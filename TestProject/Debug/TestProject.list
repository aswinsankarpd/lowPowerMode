
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b040  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b310  0800b310  0000c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b484  0800b484  0000c484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b488  0800b488  0000c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a8  24000000  0800b48c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a8  0800b534  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000108  0800b594  0000d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  24000168  0800b5f4  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  24000710  0800b5f4  0000d710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b0  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d7  00000000  00000000  00024a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00027d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b77  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035678  00000000  00000000  000297bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197dd  00000000  00000000  0005ee37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00148881  00000000  00000000  00078614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0e95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  001c0ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001c5484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b2f8 	.word	0x0800b2f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b2f8 	.word	0x0800b2f8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:
static void parseCommand(void);

static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

	commandRxd = getCmdReceivedFlag();
 80006ca:	f009 fd1d 	bl	800a108 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

	if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <debugCLITask+0x2e>
	{
		parseCommand();
 80006e0:	f000 f80a 	bl	80006f8 <parseCommand>

		processCommand();
 80006e4:	f000 f834 	bl	8000750 <processCommand>

		setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f009 fd19 	bl	800a120 <setCmdReceivedFlag>
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <parseCommand>:


static void parseCommand(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint16_t pData = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80fb      	strh	r3, [r7, #6]

	static uint16_t cmdIdx = 0;

	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000702:	e011      	b.n	8000728 <parseCommand+0x30>
	{
		commandBuffer[cmdIdx++] = pData;
 8000704:	88f9      	ldrh	r1, [r7, #6]
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <parseCommand+0x50>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	b290      	uxth	r0, r2
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <parseCommand+0x50>)
 8000710:	8010      	strh	r0, [r2, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	b2c9      	uxtb	r1, r1
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <parseCommand+0x54>)
 8000718:	5499      	strb	r1, [r3, r2]

		if(pData == 0x0D)
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	2b0d      	cmp	r3, #13
 800071e:	d103      	bne.n	8000728 <parseCommand+0x30>
		{
			cmdIdx = 0;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <parseCommand+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
			break;
 8000726:	e00b      	b.n	8000740 <parseCommand+0x48>
	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000728:	f009 fd0a 	bl	800a140 <getRxBuffer>
 800072c:	4602      	mov	r2, r0
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f009 fd91 	bl	800a25a <circularBufferDequeue>
 8000738:	4603      	mov	r3, r0
 800073a:	2b04      	cmp	r3, #4
 800073c:	d0e2      	beq.n	8000704 <parseCommand+0xc>
		}
	}

}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	240003ac 	.word	0x240003ac
 800074c:	24000184 	.word	0x24000184

08000750 <processCommand>:


static void processCommand(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
    uint8_t cmdIdx = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]

    args[argIndex] = strtok(commandBuffer, " ");
 800075e:	79fc      	ldrb	r4, [r7, #7]
 8000760:	4935      	ldr	r1, [pc, #212]	@ (8000838 <processCommand+0xe8>)
 8000762:	4836      	ldr	r0, [pc, #216]	@ (800083c <processCommand+0xec>)
 8000764:	f009 ff82 	bl	800a66c <strtok>
 8000768:	4603      	mov	r3, r0
 800076a:	4a35      	ldr	r2, [pc, #212]	@ (8000840 <processCommand+0xf0>)
 800076c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 8000770:	e00b      	b.n	800078a <processCommand+0x3a>
    {
        argIndex++;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3301      	adds	r3, #1
 8000776:	71fb      	strb	r3, [r7, #7]
        args[argIndex] = strtok(NULL, " ");
 8000778:	79fc      	ldrb	r4, [r7, #7]
 800077a:	492f      	ldr	r1, [pc, #188]	@ (8000838 <processCommand+0xe8>)
 800077c:	2000      	movs	r0, #0
 800077e:	f009 ff75 	bl	800a66c <strtok>
 8000782:	4603      	mov	r3, r0
 8000784:	4a2e      	ldr	r2, [pc, #184]	@ (8000840 <processCommand+0xf0>)
 8000786:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a2c      	ldr	r2, [pc, #176]	@ (8000840 <processCommand+0xf0>)
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ed      	bne.n	8000772 <processCommand+0x22>
    }

    argIndex = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <processCommand+0xf4>)
 800079c:	603b      	str	r3, [r7, #0]

    while (commandStruct[cmdIdx].command != NULL)
 800079e:	e03a      	b.n	8000816 <processCommand+0xc6>
    {
        if (strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007a0:	79ba      	ldrb	r2, [r7, #6]
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	461a      	mov	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4922      	ldr	r1, [pc, #136]	@ (8000840 <processCommand+0xf0>)
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4610      	mov	r0, r2
 80007be:	f7ff fda7 	bl	8000310 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d123      	bne.n	8000810 <processCommand+0xc0>
        {
            if (commandStruct[cmdIdx].fptr != NULL)
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	461a      	mov	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d006      	beq.n	80007ec <processCommand+0x9c>
            {
                HAL_UART_Transmit(&huart3, (uint8_t *)"Fptr Found", 10, 100);
 80007de:	2364      	movs	r3, #100	@ 0x64
 80007e0:	220a      	movs	r2, #10
 80007e2:	4919      	ldr	r1, [pc, #100]	@ (8000848 <processCommand+0xf8>)
 80007e4:	4819      	ldr	r0, [pc, #100]	@ (800084c <processCommand+0xfc>)
 80007e6:	f007 f969 	bl	8007abc <HAL_UART_Transmit>
                break;
 80007ea:	e020      	b.n	800082e <processCommand+0xde>
            }
            else if (commandStruct[cmdIdx].subCommand != NULL)
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <processCommand+0xc0>
            {
                HAL_UART_Transmit(&huart3, (uint8_t *)"Struct Found", 10, 100);
 8000802:	2364      	movs	r3, #100	@ 0x64
 8000804:	220a      	movs	r2, #10
 8000806:	4912      	ldr	r1, [pc, #72]	@ (8000850 <processCommand+0x100>)
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <processCommand+0xfc>)
 800080a:	f007 f957 	bl	8007abc <HAL_UART_Transmit>
                break;
 800080e:	e00e      	b.n	800082e <processCommand+0xde>
            }
        }
        cmdIdx++;
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	3301      	adds	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
    while (commandStruct[cmdIdx].command != NULL)
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	461a      	mov	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1b9      	bne.n	80007a0 <processCommand+0x50>
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	0800b320 	.word	0x0800b320
 800083c:	24000184 	.word	0x24000184
 8000840:	24000384 	.word	0x24000384
 8000844:	24000018 	.word	0x24000018
 8000848:	0800b324 	.word	0x0800b324
 800084c:	240004a4 	.word	0x240004a4
 8000850:	0800b330 	.word	0x0800b330

08000854 <sampleGetFunction>:

static void sampleGetFunction(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, "get Cmd", 7, 100);
 8000858:	2364      	movs	r3, #100	@ 0x64
 800085a:	2207      	movs	r2, #7
 800085c:	4902      	ldr	r1, [pc, #8]	@ (8000868 <sampleGetFunction+0x14>)
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <sampleGetFunction+0x18>)
 8000860:	f007 f92c 	bl	8007abc <HAL_UART_Transmit>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0800b340 	.word	0x0800b340
 800086c:	240004a4 	.word	0x240004a4

08000870 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000874:	2210      	movs	r2, #16
 8000876:	4904      	ldr	r1, [pc, #16]	@ (8000888 <systemInit+0x18>)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <systemInit+0x1c>)
 800087a:	f007 f9ad 	bl	8007bd8 <HAL_UART_Transmit_IT>

	debugUartInit();
 800087e:	f009 fc25 	bl	800a0cc <debugUartInit>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800b348 	.word	0x0800b348
 800088c:	240004a4 	.word	0x240004a4

08000890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_DMA_Init+0x3c>)
 8000898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800089c:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <MX_DMA_Init+0x3c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_DMA_Init+0x3c>)
 80008a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	200b      	movs	r0, #11
 80008ba:	f000 feea 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008be:	200b      	movs	r0, #11
 80008c0:	f000 ff01 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58024400 	.word	0x58024400

080008d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_ETH_Init+0x80>)
 80008d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <MX_ETH_Init+0x84>)
 80008d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_ETH_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_ETH_Init+0x88>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_ETH_Init+0x88>)
 80008e8:	22e1      	movs	r2, #225	@ 0xe1
 80008ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_ETH_Init+0x88>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_ETH_Init+0x88>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_ETH_Init+0x88>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_ETH_Init+0x80>)
 8000900:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <MX_ETH_Init+0x88>)
 8000902:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_ETH_Init+0x80>)
 8000906:	2201      	movs	r2, #1
 8000908:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_ETH_Init+0x80>)
 800090c:	4a13      	ldr	r2, [pc, #76]	@ (800095c <MX_ETH_Init+0x8c>)
 800090e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_ETH_Init+0x80>)
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_ETH_Init+0x90>)
 8000914:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_ETH_Init+0x80>)
 8000918:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800091c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_ETH_Init+0x80>)
 8000920:	f003 fd24 	bl	800436c <HAL_ETH_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800092a:	f000 fa6d 	bl	8000e08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800092e:	2238      	movs	r2, #56	@ 0x38
 8000930:	2100      	movs	r1, #0
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_ETH_Init+0x94>)
 8000934:	f009 fe91 	bl	800a65a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_ETH_Init+0x94>)
 800093a:	2221      	movs	r2, #33	@ 0x21
 800093c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_ETH_Init+0x94>)
 8000940:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000944:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_ETH_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240003e8 	.word	0x240003e8
 8000954:	40028000 	.word	0x40028000
 8000958:	24000498 	.word	0x24000498
 800095c:	24000108 	.word	0x24000108
 8000960:	240000a8 	.word	0x240000a8
 8000964:	240003b0 	.word	0x240003b0

08000968 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a59      	ldr	r2, [pc, #356]	@ (8000aec <HAL_ETH_MspInit+0x184>)
 8000986:	4293      	cmp	r3, r2
 8000988:	f040 80ab 	bne.w	8000ae2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800098c:	4b58      	ldr	r3, [pc, #352]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 800098e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000992:	4a57      	ldr	r2, [pc, #348]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000998:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800099c:	4b54      	ldr	r3, [pc, #336]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 800099e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a6:	623b      	str	r3, [r7, #32]
 80009a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80009aa:	4b51      	ldr	r3, [pc, #324]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009b0:	4a4f      	ldr	r2, [pc, #316]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009ba:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80009c8:	4b49      	ldr	r3, [pc, #292]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ce:	4a48      	ldr	r2, [pc, #288]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d8:	4b45      	ldr	r3, [pc, #276]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b42      	ldr	r3, [pc, #264]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a40      	ldr	r2, [pc, #256]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b3e      	ldr	r3, [pc, #248]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b3a      	ldr	r3, [pc, #232]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a39      	ldr	r2, [pc, #228]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a31      	ldr	r2, [pc, #196]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HAL_ETH_MspInit+0x188>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a5e:	2332      	movs	r3, #50	@ 0x32
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <HAL_ETH_MspInit+0x18c>)
 8000a7a:	f004 f8ab 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a7e:	2386      	movs	r3, #134	@ 0x86
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8e:	230b      	movs	r3, #11
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4817      	ldr	r0, [pc, #92]	@ (8000af8 <HAL_ETH_MspInit+0x190>)
 8000a9a:	f004 f89b 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4810      	ldr	r0, [pc, #64]	@ (8000afc <HAL_ETH_MspInit+0x194>)
 8000abc:	f004 f88a 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ac0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4808      	ldr	r0, [pc, #32]	@ (8000b00 <HAL_ETH_MspInit+0x198>)
 8000ade:	f004 f879 	bl	8004bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3738      	adds	r7, #56	@ 0x38
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40028000 	.word	0x40028000
 8000af0:	58024400 	.word	0x58024400
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020000 	.word	0x58020000
 8000afc:	58020400 	.word	0x58020400
 8000b00:	58021800 	.word	0x58021800

08000b04 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b71      	ldr	r3, [pc, #452]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a6f      	ldr	r2, [pc, #444]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b38:	4b69      	ldr	r3, [pc, #420]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	4a68      	ldr	r2, [pc, #416]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b48:	4b65      	ldr	r3, [pc, #404]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b62      	ldr	r3, [pc, #392]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a60      	ldr	r2, [pc, #384]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a59      	ldr	r2, [pc, #356]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b56      	ldr	r3, [pc, #344]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b53      	ldr	r3, [pc, #332]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a51      	ldr	r2, [pc, #324]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000b9a:	f043 0308 	orr.w	r3, r3, #8
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b47      	ldr	r3, [pc, #284]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bce:	4b44      	ldr	r3, [pc, #272]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a42      	ldr	r2, [pc, #264]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b40      	ldr	r3, [pc, #256]	@ (8000ce0 <MX_GPIO_Init+0x1dc>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bf2:	483c      	ldr	r0, [pc, #240]	@ (8000ce4 <MX_GPIO_Init+0x1e0>)
 8000bf4:	f004 f996 	bl	8004f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bfe:	483a      	ldr	r0, [pc, #232]	@ (8000ce8 <MX_GPIO_Init+0x1e4>)
 8000c00:	f004 f990 	bl	8004f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2102      	movs	r1, #2
 8000c08:	4838      	ldr	r0, [pc, #224]	@ (8000cec <MX_GPIO_Init+0x1e8>)
 8000c0a:	f004 f98b 	bl	8004f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4833      	ldr	r0, [pc, #204]	@ (8000cf0 <MX_GPIO_Init+0x1ec>)
 8000c24:	f003 ffd6 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c28:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <MX_GPIO_Init+0x1e0>)
 8000c42:	f003 ffc7 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4822      	ldr	r0, [pc, #136]	@ (8000ce8 <MX_GPIO_Init+0x1e4>)
 8000c60:	f003 ffb8 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	@ (8000cf4 <MX_GPIO_Init+0x1f0>)
 8000c7a:	f003 ffab 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4819      	ldr	r0, [pc, #100]	@ (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000c94:	f003 ff9e 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000caa:	230a      	movs	r3, #10
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000cb6:	f003 ff8d 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <MX_GPIO_Init+0x1e8>)
 8000cd2:	f003 ff7f 	bl	8004bd4 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	@ 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58020c00 	.word	0x58020c00
 8000cec:	58021000 	.word	0x58021000
 8000cf0:	58020800 	.word	0x58020800
 8000cf4:	58021800 	.word	0x58021800
 8000cf8:	58020000 	.word	0x58020000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fb46 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f810 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f7ff fefc 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0c:	f7ff fdc0 	bl	8000890 <MX_DMA_Init>
  MX_ETH_Init();
 8000d10:	f7ff fdde 	bl	80008d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d14:	f000 fa1a 	bl	800114c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d18:	f000 fb08 	bl	800132c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000d1c:	f7ff fda8 	bl	8000870 <systemInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000d20:	f7ff fcce 	bl	80006c0 <debugCLITask>
 8000d24:	e7fc      	b.n	8000d20 <main+0x24>
	...

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	@ 0x70
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	224c      	movs	r2, #76	@ 0x4c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fc8f 	bl	800a65a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2220      	movs	r2, #32
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f009 fc89 	bl	800a65a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f004 f905 	bl	8004f58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a2b      	ldr	r2, [pc, #172]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b29      	ldr	r3, [pc, #164]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d6a:	bf00      	nop
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d78:	d1f8      	bne.n	8000d6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d7a:	2321      	movs	r3, #33	@ 0x21
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d7e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d94:	f240 1313 	movw	r3, #275	@ 0x113
 8000d98:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 f908 	bl	8004fcc <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dc2:	f000 f821 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	233f      	movs	r3, #63	@ 0x3f
 8000dc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dd6:	2340      	movs	r3, #64	@ 0x40
 8000dd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dda:	2340      	movs	r3, #64	@ 0x40
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000de4:	2340      	movs	r3, #64	@ 0x40
 8000de6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2103      	movs	r1, #3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fcc7 	bl	8005780 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000df8:	f000 f806 	bl	8000e08 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	@ 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024800 	.word	0x58024800

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58024400 	.word	0x58024400

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <NMI_Handler+0x4>

08000e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <MemManage_Handler+0x4>

08000e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9e:	f000 fae9 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <DMA1_Stream0_IRQHandler+0x10>)
 8000eae:	f001 ff4b 	bl	8002d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24000538 	.word	0x24000538

08000ebc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <USART3_IRQHandler+0x10>)
 8000ec2:	f006 ff69 	bl	8007d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	240004a4 	.word	0x240004a4

08000ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_kill>:

int _kill(int pid, int sig)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eea:	f009 fc71 	bl	800a7d0 <__errno>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2216      	movs	r2, #22
 8000ef2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_exit>:

void _exit (int status)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffe7 	bl	8000ee0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f12:	bf00      	nop
 8000f14:	e7fd      	b.n	8000f12 <_exit+0x12>

08000f16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e00a      	b.n	8000f3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f28:	f3af 8000 	nop.w
 8000f2c:	4601      	mov	r1, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	b2ca      	uxtb	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf0      	blt.n	8000f28 <_read+0x12>
  }

  return len;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e009      	b.n	8000f76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbf1      	blt.n	8000f62 <_write+0x12>
  }
  return len;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_close>:

int _close(int file)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb0:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_isatty>:

int _isatty(int file)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f009 fbd6 	bl	800a7d0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	24050000 	.word	0x24050000
 8001050:	00000400 	.word	0x00000400
 8001054:	240004a0 	.word	0x240004a0
 8001058:	24000710 	.word	0x24000710

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001060:	4b32      	ldr	r3, [pc, #200]	@ (800112c <SystemInit+0xd0>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a31      	ldr	r2, [pc, #196]	@ (800112c <SystemInit+0xd0>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <SystemInit+0xd4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	2b06      	cmp	r3, #6
 800107a:	d807      	bhi.n	800108c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <SystemInit+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	4a2a      	ldr	r2, [pc, #168]	@ (8001130 <SystemInit+0xd4>)
 8001086:	f043 0307 	orr.w	r3, r3, #7
 800108a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <SystemInit+0xd8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a28      	ldr	r2, [pc, #160]	@ (8001134 <SystemInit+0xd8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <SystemInit+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800109e:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <SystemInit+0xd8>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4924      	ldr	r1, [pc, #144]	@ (8001134 <SystemInit+0xd8>)
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <SystemInit+0xdc>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <SystemInit+0xd4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SystemInit+0xd4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 030f 	bic.w	r3, r3, #15
 80010be:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <SystemInit+0xd4>)
 80010c0:	f043 0307 	orr.w	r3, r3, #7
 80010c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <SystemInit+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <SystemInit+0xd8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <SystemInit+0xd8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <SystemInit+0xd8>)
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <SystemInit+0xe0>)
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <SystemInit+0xd8>)
 80010e0:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <SystemInit+0xe4>)
 80010e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <SystemInit+0xd8>)
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <SystemInit+0xe8>)
 80010e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <SystemInit+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <SystemInit+0xd8>)
 80010f2:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <SystemInit+0xe8>)
 80010f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <SystemInit+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <SystemInit+0xd8>)
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <SystemInit+0xe8>)
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <SystemInit+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <SystemInit+0xd8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <SystemInit+0xd8>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <SystemInit+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <SystemInit+0xec>)
 800111c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001120:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	52002000 	.word	0x52002000
 8001134:	58024400 	.word	0x58024400
 8001138:	eaf6ed7f 	.word	0xeaf6ed7f
 800113c:	02020200 	.word	0x02020200
 8001140:	01ff0000 	.word	0x01ff0000
 8001144:	01010280 	.word	0x01010280
 8001148:	52004000 	.word	0x52004000

0800114c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001152:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <MX_USART3_UART_Init+0x94>)
 8001154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001158:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800115c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001194:	4811      	ldr	r0, [pc, #68]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 8001196:	f006 fc41 	bl	8007a1c <HAL_UART_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011a0:	f7ff fe32 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 80011a8:	f008 fe71 	bl	8009e8e <HAL_UARTEx_SetTxFifoThreshold>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f7ff fe29 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 80011ba:	f008 fea6 	bl	8009f0a <HAL_UARTEx_SetRxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f7ff fe20 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_USART3_UART_Init+0x90>)
 80011ca:	f008 fe27 	bl	8009e1c <HAL_UARTEx_DisableFifoMode>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f7ff fe18 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	240004a4 	.word	0x240004a4
 80011e0:	40004800 	.word	0x40004800

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	@ 0xe0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	22b8      	movs	r2, #184	@ 0xb8
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f009 fa28 	bl	800a65a <memset>
  if(uartHandle->Instance==USART3)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a42      	ldr	r2, [pc, #264]	@ (8001318 <HAL_UART_MspInit+0x134>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d17c      	bne.n	800130e <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001214:	f04f 0202 	mov.w	r2, #2
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fe34 	bl	8005e98 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001236:	f7ff fde7 	bl	8000e08 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123a:	4b38      	ldr	r3, [pc, #224]	@ (800131c <HAL_UART_MspInit+0x138>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001240:	4a36      	ldr	r2, [pc, #216]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001246:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800124a:	4b34      	ldr	r3, [pc, #208]	@ (800131c <HAL_UART_MspInit+0x138>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b30      	ldr	r3, [pc, #192]	@ (800131c <HAL_UART_MspInit+0x138>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <HAL_UART_MspInit+0x138>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <HAL_UART_MspInit+0x138>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800127a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800129a:	4619      	mov	r1, r3
 800129c:	4820      	ldr	r0, [pc, #128]	@ (8001320 <HAL_UART_MspInit+0x13c>)
 800129e:	f003 fc99 	bl	8004bd4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012a4:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <HAL_UART_MspInit+0x144>)
 80012a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012aa:	222d      	movs	r2, #45	@ 0x2d
 80012ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012e0:	4810      	ldr	r0, [pc, #64]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012e2:	f000 fa0b 	bl	80016fc <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012ec:	f7ff fd8c 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_UART_MspInit+0x140>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2027      	movs	r0, #39	@ 0x27
 8001304:	f000 f9c5 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001308:	2027      	movs	r0, #39	@ 0x27
 800130a:	f000 f9dc 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	37e0      	adds	r7, #224	@ 0xe0
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004800 	.word	0x40004800
 800131c:	58024400 	.word	0x58024400
 8001320:	58020c00 	.word	0x58020c00
 8001324:	24000538 	.word	0x24000538
 8001328:	40020010 	.word	0x40020010

0800132c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001340:	f7ff fe8c 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f009 fa37 	bl	800a7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fcc5 	bl	8000cfc <main>
  bx  lr
 8001372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001378:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800137c:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8001380:	0800b48c 	.word	0x0800b48c
  ldr r2, =_sbss
 8001384:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001388:	24000710 	.word	0x24000710

0800138c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC3_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001396:	2003      	movs	r0, #3
 8001398:	f000 f970 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800139c:	f004 fba6 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_Init+0x68>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	4913      	ldr	r1, [pc, #76]	@ (80013fc <HAL_Init+0x6c>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_Init+0x68>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <HAL_Init+0x6c>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
 80013d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_Init+0x70>)
 80013d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <HAL_Init+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f814 	bl	8001408 <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e002      	b.n	80013f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ea:	f7ff fd13 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58024400 	.word	0x58024400
 80013fc:	0800b35c 	.word	0x0800b35c
 8001400:	24000040 	.word	0x24000040
 8001404:	2400003c 	.word	0x2400003c

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_InitTick+0x60>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e021      	b.n	8001460 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_InitTick+0x64>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_InitTick+0x60>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f955 	bl	80016e2 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f91f 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_InitTick+0x68>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24000048 	.word	0x24000048
 800146c:	2400003c 	.word	0x2400003c
 8001470:	24000044 	.word	0x24000044

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	24000048 	.word	0x24000048
 8001498:	240005b0 	.word	0x240005b0

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	240005b0 	.word	0x240005b0

080014b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014c4:	4904      	ldr	r1, [pc, #16]	@ (80014d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	58000400 	.word	0x58000400

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <__NVIC_SetPriorityGrouping+0x40>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	4313      	orrs	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <__NVIC_SetPriorityGrouping+0x40>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00
 8001520:	05fa0000 	.word	0x05fa0000

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	@ (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	@ (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	@ 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff40 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff33 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa4 	bl	8001638 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff feca 	bl	800149c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e312      	b.n	8001d3a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a66      	ldr	r2, [pc, #408]	@ (80018b4 <HAL_DMA_Init+0x1b8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d04a      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a65      	ldr	r2, [pc, #404]	@ (80018b8 <HAL_DMA_Init+0x1bc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d045      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a63      	ldr	r2, [pc, #396]	@ (80018bc <HAL_DMA_Init+0x1c0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d040      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a62      	ldr	r2, [pc, #392]	@ (80018c0 <HAL_DMA_Init+0x1c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d03b      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a60      	ldr	r2, [pc, #384]	@ (80018c4 <HAL_DMA_Init+0x1c8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d036      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5f      	ldr	r2, [pc, #380]	@ (80018c8 <HAL_DMA_Init+0x1cc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d031      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5d      	ldr	r2, [pc, #372]	@ (80018cc <HAL_DMA_Init+0x1d0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02c      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5c      	ldr	r2, [pc, #368]	@ (80018d0 <HAL_DMA_Init+0x1d4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d027      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5a      	ldr	r2, [pc, #360]	@ (80018d4 <HAL_DMA_Init+0x1d8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d022      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a59      	ldr	r2, [pc, #356]	@ (80018d8 <HAL_DMA_Init+0x1dc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d01d      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a57      	ldr	r2, [pc, #348]	@ (80018dc <HAL_DMA_Init+0x1e0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d018      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a56      	ldr	r2, [pc, #344]	@ (80018e0 <HAL_DMA_Init+0x1e4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a54      	ldr	r2, [pc, #336]	@ (80018e4 <HAL_DMA_Init+0x1e8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00e      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a53      	ldr	r2, [pc, #332]	@ (80018e8 <HAL_DMA_Init+0x1ec>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d009      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a51      	ldr	r2, [pc, #324]	@ (80018ec <HAL_DMA_Init+0x1f0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d004      	beq.n	80017b4 <HAL_DMA_Init+0xb8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a50      	ldr	r2, [pc, #320]	@ (80018f0 <HAL_DMA_Init+0x1f4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_DMA_Init+0xbc>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_DMA_Init+0xbe>
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 813c 	beq.w	8001a38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a37      	ldr	r2, [pc, #220]	@ (80018b4 <HAL_DMA_Init+0x1b8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d04a      	beq.n	8001870 <HAL_DMA_Init+0x174>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a36      	ldr	r2, [pc, #216]	@ (80018b8 <HAL_DMA_Init+0x1bc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d045      	beq.n	8001870 <HAL_DMA_Init+0x174>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a34      	ldr	r2, [pc, #208]	@ (80018bc <HAL_DMA_Init+0x1c0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d040      	beq.n	8001870 <HAL_DMA_Init+0x174>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a33      	ldr	r2, [pc, #204]	@ (80018c0 <HAL_DMA_Init+0x1c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d03b      	beq.n	8001870 <HAL_DMA_Init+0x174>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a31      	ldr	r2, [pc, #196]	@ (80018c4 <HAL_DMA_Init+0x1c8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d036      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a30      	ldr	r2, [pc, #192]	@ (80018c8 <HAL_DMA_Init+0x1cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d031      	beq.n	8001870 <HAL_DMA_Init+0x174>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2e      	ldr	r2, [pc, #184]	@ (80018cc <HAL_DMA_Init+0x1d0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d02c      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2d      	ldr	r2, [pc, #180]	@ (80018d0 <HAL_DMA_Init+0x1d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d027      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <HAL_DMA_Init+0x1d8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d022      	beq.n	8001870 <HAL_DMA_Init+0x174>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2a      	ldr	r2, [pc, #168]	@ (80018d8 <HAL_DMA_Init+0x1dc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d01d      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <HAL_DMA_Init+0x1e0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d018      	beq.n	8001870 <HAL_DMA_Init+0x174>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a27      	ldr	r2, [pc, #156]	@ (80018e0 <HAL_DMA_Init+0x1e4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d013      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a25      	ldr	r2, [pc, #148]	@ (80018e4 <HAL_DMA_Init+0x1e8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00e      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a24      	ldr	r2, [pc, #144]	@ (80018e8 <HAL_DMA_Init+0x1ec>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d009      	beq.n	8001870 <HAL_DMA_Init+0x174>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <HAL_DMA_Init+0x1f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d004      	beq.n	8001870 <HAL_DMA_Init+0x174>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <HAL_DMA_Init+0x1f4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d108      	bne.n	8001882 <HAL_DMA_Init+0x186>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e007      	b.n	8001892 <HAL_DMA_Init+0x196>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001892:	e02f      	b.n	80018f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001894:	f7ff fe02 	bl	800149c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d928      	bls.n	80018f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e242      	b.n	8001d3a <HAL_DMA_Init+0x63e>
 80018b4:	40020010 	.word	0x40020010
 80018b8:	40020028 	.word	0x40020028
 80018bc:	40020040 	.word	0x40020040
 80018c0:	40020058 	.word	0x40020058
 80018c4:	40020070 	.word	0x40020070
 80018c8:	40020088 	.word	0x40020088
 80018cc:	400200a0 	.word	0x400200a0
 80018d0:	400200b8 	.word	0x400200b8
 80018d4:	40020410 	.word	0x40020410
 80018d8:	40020428 	.word	0x40020428
 80018dc:	40020440 	.word	0x40020440
 80018e0:	40020458 	.word	0x40020458
 80018e4:	40020470 	.word	0x40020470
 80018e8:	40020488 	.word	0x40020488
 80018ec:	400204a0 	.word	0x400204a0
 80018f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1c8      	bne.n	8001894 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4b83      	ldr	r3, [pc, #524]	@ (8001b1c <HAL_DMA_Init+0x420>)
 800190e:	4013      	ands	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800191a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	2b04      	cmp	r3, #4
 8001946:	d107      	bne.n	8001958 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4313      	orrs	r3, r2
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b28      	cmp	r3, #40	@ 0x28
 800195e:	d903      	bls.n	8001968 <HAL_DMA_Init+0x26c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b2e      	cmp	r3, #46	@ 0x2e
 8001966:	d91f      	bls.n	80019a8 <HAL_DMA_Init+0x2ac>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b3e      	cmp	r3, #62	@ 0x3e
 800196e:	d903      	bls.n	8001978 <HAL_DMA_Init+0x27c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b42      	cmp	r3, #66	@ 0x42
 8001976:	d917      	bls.n	80019a8 <HAL_DMA_Init+0x2ac>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b46      	cmp	r3, #70	@ 0x46
 800197e:	d903      	bls.n	8001988 <HAL_DMA_Init+0x28c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b48      	cmp	r3, #72	@ 0x48
 8001986:	d90f      	bls.n	80019a8 <HAL_DMA_Init+0x2ac>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b4e      	cmp	r3, #78	@ 0x4e
 800198e:	d903      	bls.n	8001998 <HAL_DMA_Init+0x29c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b52      	cmp	r3, #82	@ 0x52
 8001996:	d907      	bls.n	80019a8 <HAL_DMA_Init+0x2ac>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b73      	cmp	r3, #115	@ 0x73
 800199e:	d905      	bls.n	80019ac <HAL_DMA_Init+0x2b0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b77      	cmp	r3, #119	@ 0x77
 80019a6:	d801      	bhi.n	80019ac <HAL_DMA_Init+0x2b0>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_DMA_Init+0x2b2>
 80019ac:	2300      	movs	r3, #0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f023 0307 	bic.w	r3, r3, #7
 80019d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d117      	bne.n	8001a14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00e      	beq.n	8001a14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f002 fb2e 	bl	8004058 <DMA_CheckFifoParam>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2240      	movs	r2, #64	@ 0x40
 8001a06:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e192      	b.n	8001d3a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f002 fa69 	bl	8003ef4 <DMA_CalcBaseAndBitshift>
 8001a22:	4603      	mov	r3, r0
 8001a24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	223f      	movs	r2, #63	@ 0x3f
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e0c8      	b.n	8001bca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <HAL_DMA_Init+0x424>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d022      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a37      	ldr	r2, [pc, #220]	@ (8001b24 <HAL_DMA_Init+0x428>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d01d      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a35      	ldr	r2, [pc, #212]	@ (8001b28 <HAL_DMA_Init+0x42c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d018      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a34      	ldr	r2, [pc, #208]	@ (8001b2c <HAL_DMA_Init+0x430>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a32      	ldr	r2, [pc, #200]	@ (8001b30 <HAL_DMA_Init+0x434>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00e      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a31      	ldr	r2, [pc, #196]	@ (8001b34 <HAL_DMA_Init+0x438>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2f      	ldr	r2, [pc, #188]	@ (8001b38 <HAL_DMA_Init+0x43c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d004      	beq.n	8001a88 <HAL_DMA_Init+0x38c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2e      	ldr	r2, [pc, #184]	@ (8001b3c <HAL_DMA_Init+0x440>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_DMA_Init+0x390>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_DMA_Init+0x392>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8092 	beq.w	8001bb8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a21      	ldr	r2, [pc, #132]	@ (8001b20 <HAL_DMA_Init+0x424>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d021      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a20      	ldr	r2, [pc, #128]	@ (8001b24 <HAL_DMA_Init+0x428>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d01c      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1e      	ldr	r2, [pc, #120]	@ (8001b28 <HAL_DMA_Init+0x42c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d017      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <HAL_DMA_Init+0x430>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d012      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <HAL_DMA_Init+0x434>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <HAL_DMA_Init+0x438>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a18      	ldr	r2, [pc, #96]	@ (8001b38 <HAL_DMA_Init+0x43c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_DMA_Init+0x3e6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <HAL_DMA_Init+0x440>)
 8001ae0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_DMA_Init+0x444>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b40      	cmp	r3, #64	@ 0x40
 8001b08:	d01c      	beq.n	8001b44 <HAL_DMA_Init+0x448>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b80      	cmp	r3, #128	@ 0x80
 8001b10:	d102      	bne.n	8001b18 <HAL_DMA_Init+0x41c>
 8001b12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b16:	e016      	b.n	8001b46 <HAL_DMA_Init+0x44a>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e014      	b.n	8001b46 <HAL_DMA_Init+0x44a>
 8001b1c:	fe10803f 	.word	0xfe10803f
 8001b20:	58025408 	.word	0x58025408
 8001b24:	5802541c 	.word	0x5802541c
 8001b28:	58025430 	.word	0x58025430
 8001b2c:	58025444 	.word	0x58025444
 8001b30:	58025458 	.word	0x58025458
 8001b34:	5802546c 	.word	0x5802546c
 8001b38:	58025480 	.word	0x58025480
 8001b3c:	58025494 	.word	0x58025494
 8001b40:	fffe000f 	.word	0xfffe000f
 8001b44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d44 <HAL_DMA_Init+0x648>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d48 <HAL_DMA_Init+0x64c>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	009a      	lsls	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f002 f9a9 	bl	8003ef4 <DMA_CalcBaseAndBitshift>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e008      	b.n	8001bca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0b7      	b.n	8001d3a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5f      	ldr	r2, [pc, #380]	@ (8001d4c <HAL_DMA_Init+0x650>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d072      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d50 <HAL_DMA_Init+0x654>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d06d      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d54 <HAL_DMA_Init+0x658>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d068      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5a      	ldr	r2, [pc, #360]	@ (8001d58 <HAL_DMA_Init+0x65c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d063      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a59      	ldr	r2, [pc, #356]	@ (8001d5c <HAL_DMA_Init+0x660>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	@ (8001d60 <HAL_DMA_Init+0x664>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d059      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_DMA_Init+0x668>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d054      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a54      	ldr	r2, [pc, #336]	@ (8001d68 <HAL_DMA_Init+0x66c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d04f      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	@ (8001d6c <HAL_DMA_Init+0x670>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d04a      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	@ (8001d70 <HAL_DMA_Init+0x674>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d045      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_DMA_Init+0x678>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d040      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d78 <HAL_DMA_Init+0x67c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d03b      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4d      	ldr	r2, [pc, #308]	@ (8001d7c <HAL_DMA_Init+0x680>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d036      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	@ (8001d80 <HAL_DMA_Init+0x684>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d84 <HAL_DMA_Init+0x688>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d02c      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a48      	ldr	r2, [pc, #288]	@ (8001d88 <HAL_DMA_Init+0x68c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d027      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_DMA_Init+0x690>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	@ (8001d90 <HAL_DMA_Init+0x694>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01d      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a44      	ldr	r2, [pc, #272]	@ (8001d94 <HAL_DMA_Init+0x698>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d018      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a42      	ldr	r2, [pc, #264]	@ (8001d98 <HAL_DMA_Init+0x69c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a41      	ldr	r2, [pc, #260]	@ (8001d9c <HAL_DMA_Init+0x6a0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00e      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8001da0 <HAL_DMA_Init+0x6a4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d009      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	@ (8001da4 <HAL_DMA_Init+0x6a8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_DMA_Init+0x5be>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8001da8 <HAL_DMA_Init+0x6ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_DMA_Init+0x5c2>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_Init+0x5c4>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d032      	beq.n	8001d2a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f002 fa43 	bl	8004150 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b80      	cmp	r3, #128	@ 0x80
 8001cd0:	d102      	bne.n	8001cd8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_DMA_Init+0x61c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d80c      	bhi.n	8001d18 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f002 fac0 	bl	8004284 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	e008      	b.n	8001d2a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	a7fdabf8 	.word	0xa7fdabf8
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
 8001d8c:	58025408 	.word	0x58025408
 8001d90:	5802541c 	.word	0x5802541c
 8001d94:	58025430 	.word	0x58025430
 8001d98:	58025444 	.word	0x58025444
 8001d9c:	58025458 	.word	0x58025458
 8001da0:	5802546c 	.word	0x5802546c
 8001da4:	58025480 	.word	0x58025480
 8001da8:	58025494 	.word	0x58025494

08001dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e226      	b.n	8002216 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x2a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e21f      	b.n	8002216 <HAL_DMA_Start_IT+0x46a>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f040 820a 	bne.w	8002200 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a68      	ldr	r2, [pc, #416]	@ (8001fa0 <HAL_DMA_Start_IT+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04a      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a66      	ldr	r2, [pc, #408]	@ (8001fa4 <HAL_DMA_Start_IT+0x1f8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d045      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <HAL_DMA_Start_IT+0x1fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d040      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a63      	ldr	r2, [pc, #396]	@ (8001fac <HAL_DMA_Start_IT+0x200>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d03b      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a62      	ldr	r2, [pc, #392]	@ (8001fb0 <HAL_DMA_Start_IT+0x204>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a60      	ldr	r2, [pc, #384]	@ (8001fb4 <HAL_DMA_Start_IT+0x208>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb8 <HAL_DMA_Start_IT+0x20c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5d      	ldr	r2, [pc, #372]	@ (8001fbc <HAL_DMA_Start_IT+0x210>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001fc0 <HAL_DMA_Start_IT+0x214>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc4 <HAL_DMA_Start_IT+0x218>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a59      	ldr	r2, [pc, #356]	@ (8001fc8 <HAL_DMA_Start_IT+0x21c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	@ (8001fcc <HAL_DMA_Start_IT+0x220>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a56      	ldr	r2, [pc, #344]	@ (8001fd0 <HAL_DMA_Start_IT+0x224>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a54      	ldr	r2, [pc, #336]	@ (8001fd4 <HAL_DMA_Start_IT+0x228>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a53      	ldr	r2, [pc, #332]	@ (8001fd8 <HAL_DMA_Start_IT+0x22c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Start_IT+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a51      	ldr	r2, [pc, #324]	@ (8001fdc <HAL_DMA_Start_IT+0x230>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <HAL_DMA_Start_IT+0x100>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_DMA_Start_IT+0x110>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 fe6a 	bl	8003b9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a34      	ldr	r2, [pc, #208]	@ (8001fa0 <HAL_DMA_Start_IT+0x1f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	@ (8001fa4 <HAL_DMA_Start_IT+0x1f8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d045      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	@ (8001fa8 <HAL_DMA_Start_IT+0x1fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a30      	ldr	r2, [pc, #192]	@ (8001fac <HAL_DMA_Start_IT+0x200>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d03b      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb0 <HAL_DMA_Start_IT+0x204>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_DMA_Start_IT+0x208>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_DMA_Start_IT+0x20c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <HAL_DMA_Start_IT+0x210>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_DMA_Start_IT+0x214>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <HAL_DMA_Start_IT+0x218>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a25      	ldr	r2, [pc, #148]	@ (8001fc8 <HAL_DMA_Start_IT+0x21c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	@ (8001fcc <HAL_DMA_Start_IT+0x220>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a22      	ldr	r2, [pc, #136]	@ (8001fd0 <HAL_DMA_Start_IT+0x224>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_DMA_Start_IT+0x228>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_DMA_Start_IT+0x22c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Start_IT+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_DMA_Start_IT+0x230>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_DMA_Start_IT+0x1c0>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_Start_IT+0x1c2>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d036      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 021e 	bic.w	r2, r3, #30
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0216 	orr.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03e      	beq.n	800200c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0208 	orr.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e035      	b.n	800200c <HAL_DMA_Start_IT+0x260>
 8001fa0:	40020010 	.word	0x40020010
 8001fa4:	40020028 	.word	0x40020028
 8001fa8:	40020040 	.word	0x40020040
 8001fac:	40020058 	.word	0x40020058
 8001fb0:	40020070 	.word	0x40020070
 8001fb4:	40020088 	.word	0x40020088
 8001fb8:	400200a0 	.word	0x400200a0
 8001fbc:	400200b8 	.word	0x400200b8
 8001fc0:	40020410 	.word	0x40020410
 8001fc4:	40020428 	.word	0x40020428
 8001fc8:	40020440 	.word	0x40020440
 8001fcc:	40020458 	.word	0x40020458
 8001fd0:	40020470 	.word	0x40020470
 8001fd4:	40020488 	.word	0x40020488
 8001fd8:	400204a0 	.word	0x400204a0
 8001fdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020e 	bic.w	r2, r3, #14
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 020a 	orr.w	r2, r2, #10
 8001ff2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0204 	orr.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a83      	ldr	r2, [pc, #524]	@ (8002220 <HAL_DMA_Start_IT+0x474>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d072      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a82      	ldr	r2, [pc, #520]	@ (8002224 <HAL_DMA_Start_IT+0x478>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d06d      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a80      	ldr	r2, [pc, #512]	@ (8002228 <HAL_DMA_Start_IT+0x47c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d068      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7f      	ldr	r2, [pc, #508]	@ (800222c <HAL_DMA_Start_IT+0x480>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d063      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7d      	ldr	r2, [pc, #500]	@ (8002230 <HAL_DMA_Start_IT+0x484>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d05e      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7c      	ldr	r2, [pc, #496]	@ (8002234 <HAL_DMA_Start_IT+0x488>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d059      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7a      	ldr	r2, [pc, #488]	@ (8002238 <HAL_DMA_Start_IT+0x48c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d054      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a79      	ldr	r2, [pc, #484]	@ (800223c <HAL_DMA_Start_IT+0x490>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04f      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a77      	ldr	r2, [pc, #476]	@ (8002240 <HAL_DMA_Start_IT+0x494>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a76      	ldr	r2, [pc, #472]	@ (8002244 <HAL_DMA_Start_IT+0x498>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a74      	ldr	r2, [pc, #464]	@ (8002248 <HAL_DMA_Start_IT+0x49c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	@ (800224c <HAL_DMA_Start_IT+0x4a0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a71      	ldr	r2, [pc, #452]	@ (8002250 <HAL_DMA_Start_IT+0x4a4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a70      	ldr	r2, [pc, #448]	@ (8002254 <HAL_DMA_Start_IT+0x4a8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_DMA_Start_IT+0x4ac>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6d      	ldr	r2, [pc, #436]	@ (800225c <HAL_DMA_Start_IT+0x4b0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002260 <HAL_DMA_Start_IT+0x4b4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002264 <HAL_DMA_Start_IT+0x4b8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <HAL_DMA_Start_IT+0x4bc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a67      	ldr	r2, [pc, #412]	@ (800226c <HAL_DMA_Start_IT+0x4c0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a65      	ldr	r2, [pc, #404]	@ (8002270 <HAL_DMA_Start_IT+0x4c4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a64      	ldr	r2, [pc, #400]	@ (8002274 <HAL_DMA_Start_IT+0x4c8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a62      	ldr	r2, [pc, #392]	@ (8002278 <HAL_DMA_Start_IT+0x4cc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_Start_IT+0x350>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a61      	ldr	r2, [pc, #388]	@ (800227c <HAL_DMA_Start_IT+0x4d0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_DMA_Start_IT+0x354>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_DMA_Start_IT+0x356>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01a      	beq.n	800213c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002122:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800213a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a37      	ldr	r2, [pc, #220]	@ (8002220 <HAL_DMA_Start_IT+0x474>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04a      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a36      	ldr	r2, [pc, #216]	@ (8002224 <HAL_DMA_Start_IT+0x478>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d045      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a34      	ldr	r2, [pc, #208]	@ (8002228 <HAL_DMA_Start_IT+0x47c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a33      	ldr	r2, [pc, #204]	@ (800222c <HAL_DMA_Start_IT+0x480>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a31      	ldr	r2, [pc, #196]	@ (8002230 <HAL_DMA_Start_IT+0x484>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d036      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a30      	ldr	r2, [pc, #192]	@ (8002234 <HAL_DMA_Start_IT+0x488>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	@ (8002238 <HAL_DMA_Start_IT+0x48c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02c      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_DMA_Start_IT+0x490>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d027      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <HAL_DMA_Start_IT+0x494>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <HAL_DMA_Start_IT+0x498>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <HAL_DMA_Start_IT+0x49c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d018      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a27      	ldr	r2, [pc, #156]	@ (800224c <HAL_DMA_Start_IT+0x4a0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	@ (8002250 <HAL_DMA_Start_IT+0x4a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <HAL_DMA_Start_IT+0x4a8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	@ (8002258 <HAL_DMA_Start_IT+0x4ac>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_Start_IT+0x430>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	@ (800225c <HAL_DMA_Start_IT+0x4b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <HAL_DMA_Start_IT+0x442>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e012      	b.n	8002214 <HAL_DMA_Start_IT+0x468>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e009      	b.n	8002214 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002214:	7dfb      	ldrb	r3, [r7, #23]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
 8002260:	58025408 	.word	0x58025408
 8002264:	5802541c 	.word	0x5802541c
 8002268:	58025430 	.word	0x58025430
 800226c:	58025444 	.word	0x58025444
 8002270:	58025458 	.word	0x58025458
 8002274:	5802546c 	.word	0x5802546c
 8002278:	58025480 	.word	0x58025480
 800227c:	58025494 	.word	0x58025494

08002280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff f908 	bl	800149c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e2dc      	b.n	8002852 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d008      	beq.n	80022b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e2cd      	b.n	8002852 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a76      	ldr	r2, [pc, #472]	@ (8002494 <HAL_DMA_Abort+0x214>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04a      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a74      	ldr	r2, [pc, #464]	@ (8002498 <HAL_DMA_Abort+0x218>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d045      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	@ (800249c <HAL_DMA_Abort+0x21c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d040      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a71      	ldr	r2, [pc, #452]	@ (80024a0 <HAL_DMA_Abort+0x220>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d03b      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a70      	ldr	r2, [pc, #448]	@ (80024a4 <HAL_DMA_Abort+0x224>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d036      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6e      	ldr	r2, [pc, #440]	@ (80024a8 <HAL_DMA_Abort+0x228>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d031      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6d      	ldr	r2, [pc, #436]	@ (80024ac <HAL_DMA_Abort+0x22c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d02c      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6b      	ldr	r2, [pc, #428]	@ (80024b0 <HAL_DMA_Abort+0x230>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d027      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6a      	ldr	r2, [pc, #424]	@ (80024b4 <HAL_DMA_Abort+0x234>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a68      	ldr	r2, [pc, #416]	@ (80024b8 <HAL_DMA_Abort+0x238>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a67      	ldr	r2, [pc, #412]	@ (80024bc <HAL_DMA_Abort+0x23c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a65      	ldr	r2, [pc, #404]	@ (80024c0 <HAL_DMA_Abort+0x240>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a64      	ldr	r2, [pc, #400]	@ (80024c4 <HAL_DMA_Abort+0x244>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a62      	ldr	r2, [pc, #392]	@ (80024c8 <HAL_DMA_Abort+0x248>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a61      	ldr	r2, [pc, #388]	@ (80024cc <HAL_DMA_Abort+0x24c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_Abort+0xd6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5f      	ldr	r2, [pc, #380]	@ (80024d0 <HAL_DMA_Abort+0x250>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_DMA_Abort+0xda>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_DMA_Abort+0xdc>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 021e 	bic.w	r2, r2, #30
 800236e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800237e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00a      	b.n	800239e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002494 <HAL_DMA_Abort+0x214>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d072      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002498 <HAL_DMA_Abort+0x218>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d06d      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a39      	ldr	r2, [pc, #228]	@ (800249c <HAL_DMA_Abort+0x21c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d068      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a37      	ldr	r2, [pc, #220]	@ (80024a0 <HAL_DMA_Abort+0x220>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d063      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a36      	ldr	r2, [pc, #216]	@ (80024a4 <HAL_DMA_Abort+0x224>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d05e      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a34      	ldr	r2, [pc, #208]	@ (80024a8 <HAL_DMA_Abort+0x228>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d059      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <HAL_DMA_Abort+0x22c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d054      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <HAL_DMA_Abort+0x230>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d04f      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <HAL_DMA_Abort+0x234>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04a      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2e      	ldr	r2, [pc, #184]	@ (80024b8 <HAL_DMA_Abort+0x238>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d045      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2d      	ldr	r2, [pc, #180]	@ (80024bc <HAL_DMA_Abort+0x23c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d040      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2b      	ldr	r2, [pc, #172]	@ (80024c0 <HAL_DMA_Abort+0x240>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d03b      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <HAL_DMA_Abort+0x244>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d036      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	@ (80024c8 <HAL_DMA_Abort+0x248>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <HAL_DMA_Abort+0x24c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d02c      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <HAL_DMA_Abort+0x250>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d027      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a24      	ldr	r2, [pc, #144]	@ (80024d4 <HAL_DMA_Abort+0x254>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_DMA_Abort+0x258>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01d      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <HAL_DMA_Abort+0x25c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d018      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_DMA_Abort+0x260>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1e      	ldr	r2, [pc, #120]	@ (80024e4 <HAL_DMA_Abort+0x264>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_DMA_Abort+0x268>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_DMA_Abort+0x26c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_DMA_Abort+0x20e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_DMA_Abort+0x270>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d132      	bne.n	80024f4 <HAL_DMA_Abort+0x274>
 800248e:	2301      	movs	r3, #1
 8002490:	e031      	b.n	80024f6 <HAL_DMA_Abort+0x276>
 8002492:	bf00      	nop
 8002494:	40020010 	.word	0x40020010
 8002498:	40020028 	.word	0x40020028
 800249c:	40020040 	.word	0x40020040
 80024a0:	40020058 	.word	0x40020058
 80024a4:	40020070 	.word	0x40020070
 80024a8:	40020088 	.word	0x40020088
 80024ac:	400200a0 	.word	0x400200a0
 80024b0:	400200b8 	.word	0x400200b8
 80024b4:	40020410 	.word	0x40020410
 80024b8:	40020428 	.word	0x40020428
 80024bc:	40020440 	.word	0x40020440
 80024c0:	40020458 	.word	0x40020458
 80024c4:	40020470 	.word	0x40020470
 80024c8:	40020488 	.word	0x40020488
 80024cc:	400204a0 	.word	0x400204a0
 80024d0:	400204b8 	.word	0x400204b8
 80024d4:	58025408 	.word	0x58025408
 80024d8:	5802541c 	.word	0x5802541c
 80024dc:	58025430 	.word	0x58025430
 80024e0:	58025444 	.word	0x58025444
 80024e4:	58025458 	.word	0x58025458
 80024e8:	5802546c 	.word	0x5802546c
 80024ec:	58025480 	.word	0x58025480
 80024f0:	58025494 	.word	0x58025494
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002508:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6d      	ldr	r2, [pc, #436]	@ (80026c4 <HAL_DMA_Abort+0x444>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d04a      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6b      	ldr	r2, [pc, #428]	@ (80026c8 <HAL_DMA_Abort+0x448>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d045      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6a      	ldr	r2, [pc, #424]	@ (80026cc <HAL_DMA_Abort+0x44c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d040      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_DMA_Abort+0x450>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d03b      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <HAL_DMA_Abort+0x454>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d036      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_DMA_Abort+0x458>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d031      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a64      	ldr	r2, [pc, #400]	@ (80026dc <HAL_DMA_Abort+0x45c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d02c      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_DMA_Abort+0x460>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d027      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_DMA_Abort+0x464>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5f      	ldr	r2, [pc, #380]	@ (80026e8 <HAL_DMA_Abort+0x468>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5e      	ldr	r2, [pc, #376]	@ (80026ec <HAL_DMA_Abort+0x46c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <HAL_DMA_Abort+0x470>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_DMA_Abort+0x474>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a59      	ldr	r2, [pc, #356]	@ (80026f8 <HAL_DMA_Abort+0x478>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a58      	ldr	r2, [pc, #352]	@ (80026fc <HAL_DMA_Abort+0x47c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Abort+0x32a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a56      	ldr	r2, [pc, #344]	@ (8002700 <HAL_DMA_Abort+0x480>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <HAL_DMA_Abort+0x33c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e007      	b.n	80025cc <HAL_DMA_Abort+0x34c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025cc:	e013      	b.n	80025f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ce:	f7fe ff65 	bl	800149c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d90c      	bls.n	80025f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e12d      	b.n	8002852 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e5      	bne.n	80025ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2f      	ldr	r2, [pc, #188]	@ (80026c4 <HAL_DMA_Abort+0x444>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04a      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2d      	ldr	r2, [pc, #180]	@ (80026c8 <HAL_DMA_Abort+0x448>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d045      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2c      	ldr	r2, [pc, #176]	@ (80026cc <HAL_DMA_Abort+0x44c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d040      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2a      	ldr	r2, [pc, #168]	@ (80026d0 <HAL_DMA_Abort+0x450>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d03b      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a29      	ldr	r2, [pc, #164]	@ (80026d4 <HAL_DMA_Abort+0x454>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d036      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a27      	ldr	r2, [pc, #156]	@ (80026d8 <HAL_DMA_Abort+0x458>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d031      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a26      	ldr	r2, [pc, #152]	@ (80026dc <HAL_DMA_Abort+0x45c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d02c      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <HAL_DMA_Abort+0x460>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d027      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <HAL_DMA_Abort+0x464>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a21      	ldr	r2, [pc, #132]	@ (80026e8 <HAL_DMA_Abort+0x468>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01d      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a20      	ldr	r2, [pc, #128]	@ (80026ec <HAL_DMA_Abort+0x46c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_DMA_Abort+0x470>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_DMA_Abort+0x474>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <HAL_DMA_Abort+0x478>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_DMA_Abort+0x47c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_DMA_Abort+0x422>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a18      	ldr	r2, [pc, #96]	@ (8002700 <HAL_DMA_Abort+0x480>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort+0x426>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_DMA_Abort+0x428>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02b      	beq.n	8002704 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	e02a      	b.n	800271a <HAL_DMA_Abort+0x49a>
 80026c4:	40020010 	.word	0x40020010
 80026c8:	40020028 	.word	0x40020028
 80026cc:	40020040 	.word	0x40020040
 80026d0:	40020058 	.word	0x40020058
 80026d4:	40020070 	.word	0x40020070
 80026d8:	40020088 	.word	0x40020088
 80026dc:	400200a0 	.word	0x400200a0
 80026e0:	400200b8 	.word	0x400200b8
 80026e4:	40020410 	.word	0x40020410
 80026e8:	40020428 	.word	0x40020428
 80026ec:	40020440 	.word	0x40020440
 80026f0:	40020458 	.word	0x40020458
 80026f4:	40020470 	.word	0x40020470
 80026f8:	40020488 	.word	0x40020488
 80026fc:	400204a0 	.word	0x400204a0
 8002700:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_DMA_Abort+0x5dc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d072      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <HAL_DMA_Abort+0x5e0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d06d      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <HAL_DMA_Abort+0x5e4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d068      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4a      	ldr	r2, [pc, #296]	@ (8002868 <HAL_DMA_Abort+0x5e8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d063      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a49      	ldr	r2, [pc, #292]	@ (800286c <HAL_DMA_Abort+0x5ec>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <HAL_DMA_Abort+0x5f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d059      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a46      	ldr	r2, [pc, #280]	@ (8002874 <HAL_DMA_Abort+0x5f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d054      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a44      	ldr	r2, [pc, #272]	@ (8002878 <HAL_DMA_Abort+0x5f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04f      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a43      	ldr	r2, [pc, #268]	@ (800287c <HAL_DMA_Abort+0x5fc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_DMA_Abort+0x600>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <HAL_DMA_Abort+0x604>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3e      	ldr	r2, [pc, #248]	@ (8002888 <HAL_DMA_Abort+0x608>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a3d      	ldr	r2, [pc, #244]	@ (800288c <HAL_DMA_Abort+0x60c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002890 <HAL_DMA_Abort+0x610>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002894 <HAL_DMA_Abort+0x614>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a38      	ldr	r2, [pc, #224]	@ (8002898 <HAL_DMA_Abort+0x618>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a37      	ldr	r2, [pc, #220]	@ (800289c <HAL_DMA_Abort+0x61c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a35      	ldr	r2, [pc, #212]	@ (80028a0 <HAL_DMA_Abort+0x620>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a34      	ldr	r2, [pc, #208]	@ (80028a4 <HAL_DMA_Abort+0x624>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a32      	ldr	r2, [pc, #200]	@ (80028a8 <HAL_DMA_Abort+0x628>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a31      	ldr	r2, [pc, #196]	@ (80028ac <HAL_DMA_Abort+0x62c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2f      	ldr	r2, [pc, #188]	@ (80028b0 <HAL_DMA_Abort+0x630>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2e      	ldr	r2, [pc, #184]	@ (80028b4 <HAL_DMA_Abort+0x634>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort+0x58a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2c      	ldr	r2, [pc, #176]	@ (80028b8 <HAL_DMA_Abort+0x638>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_DMA_Abort+0x58e>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_DMA_Abort+0x590>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800281c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002834:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800283e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40020010 	.word	0x40020010
 8002860:	40020028 	.word	0x40020028
 8002864:	40020040 	.word	0x40020040
 8002868:	40020058 	.word	0x40020058
 800286c:	40020070 	.word	0x40020070
 8002870:	40020088 	.word	0x40020088
 8002874:	400200a0 	.word	0x400200a0
 8002878:	400200b8 	.word	0x400200b8
 800287c:	40020410 	.word	0x40020410
 8002880:	40020428 	.word	0x40020428
 8002884:	40020440 	.word	0x40020440
 8002888:	40020458 	.word	0x40020458
 800288c:	40020470 	.word	0x40020470
 8002890:	40020488 	.word	0x40020488
 8002894:	400204a0 	.word	0x400204a0
 8002898:	400204b8 	.word	0x400204b8
 800289c:	58025408 	.word	0x58025408
 80028a0:	5802541c 	.word	0x5802541c
 80028a4:	58025430 	.word	0x58025430
 80028a8:	58025444 	.word	0x58025444
 80028ac:	58025458 	.word	0x58025458
 80028b0:	5802546c 	.word	0x5802546c
 80028b4:	58025480 	.word	0x58025480
 80028b8:	58025494 	.word	0x58025494

080028bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e237      	b.n	8002d3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e22c      	b.n	8002d3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a5c <HAL_DMA_Abort_IT+0x1a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d04a      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a60 <HAL_DMA_Abort_IT+0x1a4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d045      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a59      	ldr	r2, [pc, #356]	@ (8002a64 <HAL_DMA_Abort_IT+0x1a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d040      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_DMA_Abort_IT+0x1ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d03b      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a56      	ldr	r2, [pc, #344]	@ (8002a6c <HAL_DMA_Abort_IT+0x1b0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d036      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a55      	ldr	r2, [pc, #340]	@ (8002a70 <HAL_DMA_Abort_IT+0x1b4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d031      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a53      	ldr	r2, [pc, #332]	@ (8002a74 <HAL_DMA_Abort_IT+0x1b8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02c      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a52      	ldr	r2, [pc, #328]	@ (8002a78 <HAL_DMA_Abort_IT+0x1bc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d027      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a50      	ldr	r2, [pc, #320]	@ (8002a7c <HAL_DMA_Abort_IT+0x1c0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d022      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4f      	ldr	r2, [pc, #316]	@ (8002a80 <HAL_DMA_Abort_IT+0x1c4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01d      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a84 <HAL_DMA_Abort_IT+0x1c8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d018      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4c      	ldr	r2, [pc, #304]	@ (8002a88 <HAL_DMA_Abort_IT+0x1cc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4a      	ldr	r2, [pc, #296]	@ (8002a8c <HAL_DMA_Abort_IT+0x1d0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <HAL_DMA_Abort_IT+0x1d4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a47      	ldr	r2, [pc, #284]	@ (8002a94 <HAL_DMA_Abort_IT+0x1d8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_DMA_Abort_IT+0xc8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a46      	ldr	r2, [pc, #280]	@ (8002a98 <HAL_DMA_Abort_IT+0x1dc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_DMA_Abort_IT+0xcc>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_DMA_Abort_IT+0xce>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8086 	beq.w	8002a9c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2204      	movs	r2, #4
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a5c <HAL_DMA_Abort_IT+0x1a0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04a      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a60 <HAL_DMA_Abort_IT+0x1a4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d045      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <HAL_DMA_Abort_IT+0x1a8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d040      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <HAL_DMA_Abort_IT+0x1ac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d03b      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a29      	ldr	r2, [pc, #164]	@ (8002a6c <HAL_DMA_Abort_IT+0x1b0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d036      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_DMA_Abort_IT+0x1b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a26      	ldr	r2, [pc, #152]	@ (8002a74 <HAL_DMA_Abort_IT+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02c      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a25      	ldr	r2, [pc, #148]	@ (8002a78 <HAL_DMA_Abort_IT+0x1bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d027      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_DMA_Abort_IT+0x1c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d022      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <HAL_DMA_Abort_IT+0x1c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01d      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a20      	ldr	r2, [pc, #128]	@ (8002a84 <HAL_DMA_Abort_IT+0x1c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d018      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_DMA_Abort_IT+0x1cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <HAL_DMA_Abort_IT+0x1d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00e      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_DMA_Abort_IT+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_DMA_Abort_IT+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x17c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_DMA_Abort_IT+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <HAL_DMA_Abort_IT+0x18e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e178      	b.n	8002d3c <HAL_DMA_Abort_IT+0x480>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e16f      	b.n	8002d3c <HAL_DMA_Abort_IT+0x480>
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 020e 	bic.w	r2, r2, #14
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6c      	ldr	r2, [pc, #432]	@ (8002c64 <HAL_DMA_Abort_IT+0x3a8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d04a      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6b      	ldr	r2, [pc, #428]	@ (8002c68 <HAL_DMA_Abort_IT+0x3ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d045      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a69      	ldr	r2, [pc, #420]	@ (8002c6c <HAL_DMA_Abort_IT+0x3b0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d040      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a68      	ldr	r2, [pc, #416]	@ (8002c70 <HAL_DMA_Abort_IT+0x3b4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d03b      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a66      	ldr	r2, [pc, #408]	@ (8002c74 <HAL_DMA_Abort_IT+0x3b8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d036      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a65      	ldr	r2, [pc, #404]	@ (8002c78 <HAL_DMA_Abort_IT+0x3bc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d031      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a63      	ldr	r2, [pc, #396]	@ (8002c7c <HAL_DMA_Abort_IT+0x3c0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d02c      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a62      	ldr	r2, [pc, #392]	@ (8002c80 <HAL_DMA_Abort_IT+0x3c4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d027      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_DMA_Abort_IT+0x3c8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c88 <HAL_DMA_Abort_IT+0x3cc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01d      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5d      	ldr	r2, [pc, #372]	@ (8002c8c <HAL_DMA_Abort_IT+0x3d0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c90 <HAL_DMA_Abort_IT+0x3d4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5a      	ldr	r2, [pc, #360]	@ (8002c94 <HAL_DMA_Abort_IT+0x3d8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a59      	ldr	r2, [pc, #356]	@ (8002c98 <HAL_DMA_Abort_IT+0x3dc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a57      	ldr	r2, [pc, #348]	@ (8002c9c <HAL_DMA_Abort_IT+0x3e0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x290>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a56      	ldr	r2, [pc, #344]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3e4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d108      	bne.n	8002b5e <HAL_DMA_Abort_IT+0x2a2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e007      	b.n	8002b6e <HAL_DMA_Abort_IT+0x2b2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a3c      	ldr	r2, [pc, #240]	@ (8002c64 <HAL_DMA_Abort_IT+0x3a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d072      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c68 <HAL_DMA_Abort_IT+0x3ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d06d      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a39      	ldr	r2, [pc, #228]	@ (8002c6c <HAL_DMA_Abort_IT+0x3b0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d068      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a37      	ldr	r2, [pc, #220]	@ (8002c70 <HAL_DMA_Abort_IT+0x3b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d063      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a36      	ldr	r2, [pc, #216]	@ (8002c74 <HAL_DMA_Abort_IT+0x3b8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d05e      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a34      	ldr	r2, [pc, #208]	@ (8002c78 <HAL_DMA_Abort_IT+0x3bc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d059      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a33      	ldr	r2, [pc, #204]	@ (8002c7c <HAL_DMA_Abort_IT+0x3c0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d054      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_DMA_Abort_IT+0x3c4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04f      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a30      	ldr	r2, [pc, #192]	@ (8002c84 <HAL_DMA_Abort_IT+0x3c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d04a      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8002c88 <HAL_DMA_Abort_IT+0x3cc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d045      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c8c <HAL_DMA_Abort_IT+0x3d0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d040      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c90 <HAL_DMA_Abort_IT+0x3d4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d03b      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2a      	ldr	r2, [pc, #168]	@ (8002c94 <HAL_DMA_Abort_IT+0x3d8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d036      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	@ (8002c98 <HAL_DMA_Abort_IT+0x3dc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d031      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a27      	ldr	r2, [pc, #156]	@ (8002c9c <HAL_DMA_Abort_IT+0x3e0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d02c      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a25      	ldr	r2, [pc, #148]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3e4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d027      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3e8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3ec>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a21      	ldr	r2, [pc, #132]	@ (8002cac <HAL_DMA_Abort_IT+0x3f0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d018      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb4 <HAL_DMA_Abort_IT+0x3f8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_DMA_Abort_IT+0x3fc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cbc <HAL_DMA_Abort_IT+0x400>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x3a2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_DMA_Abort_IT+0x404>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d132      	bne.n	8002cc4 <HAL_DMA_Abort_IT+0x408>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e031      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x40a>
 8002c62:	bf00      	nop
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
 8002ca4:	58025408 	.word	0x58025408
 8002ca8:	5802541c 	.word	0x5802541c
 8002cac:	58025430 	.word	0x58025430
 8002cb0:	58025444 	.word	0x58025444
 8002cb4:	58025458 	.word	0x58025458
 8002cb8:	5802546c 	.word	0x5802546c
 8002cbc:	58025480 	.word	0x58025480
 8002cc0:	58025494 	.word	0x58025494
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2201      	movs	r2, #1
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cf8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	@ 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d54:	4b67      	ldr	r3, [pc, #412]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a67      	ldr	r2, [pc, #412]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1b0>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0a9b      	lsrs	r3, r3, #10
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002efc <HAL_DMA_IRQHandler+0x1b4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04a      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5d      	ldr	r2, [pc, #372]	@ (8002f00 <HAL_DMA_IRQHandler+0x1b8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d045      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	@ (8002f04 <HAL_DMA_IRQHandler+0x1bc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d040      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_DMA_IRQHandler+0x1c0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d03b      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a59      	ldr	r2, [pc, #356]	@ (8002f0c <HAL_DMA_IRQHandler+0x1c4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d036      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a57      	ldr	r2, [pc, #348]	@ (8002f10 <HAL_DMA_IRQHandler+0x1c8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a56      	ldr	r2, [pc, #344]	@ (8002f14 <HAL_DMA_IRQHandler+0x1cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d02c      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a54      	ldr	r2, [pc, #336]	@ (8002f18 <HAL_DMA_IRQHandler+0x1d0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d027      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a53      	ldr	r2, [pc, #332]	@ (8002f1c <HAL_DMA_IRQHandler+0x1d4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	@ (8002f20 <HAL_DMA_IRQHandler+0x1d8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a50      	ldr	r2, [pc, #320]	@ (8002f24 <HAL_DMA_IRQHandler+0x1dc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4e      	ldr	r2, [pc, #312]	@ (8002f28 <HAL_DMA_IRQHandler+0x1e0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f2c <HAL_DMA_IRQHandler+0x1e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <HAL_DMA_IRQHandler+0x1e8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f34 <HAL_DMA_IRQHandler+0x1ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_IRQHandler+0xd2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a48      	ldr	r2, [pc, #288]	@ (8002f38 <HAL_DMA_IRQHandler+0x1f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_IRQHandler+0xd6>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_DMA_IRQHandler+0xd8>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 842b 	beq.w	800367c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a2 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <HAL_DMA_IRQHandler+0x1b4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d04a      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <HAL_DMA_IRQHandler+0x1b8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d045      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <HAL_DMA_IRQHandler+0x1bc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d040      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_DMA_IRQHandler+0x1c0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d03b      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_DMA_IRQHandler+0x1c4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d036      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a27      	ldr	r2, [pc, #156]	@ (8002f10 <HAL_DMA_IRQHandler+0x1c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <HAL_DMA_IRQHandler+0x1cc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02c      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <HAL_DMA_IRQHandler+0x1d0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d027      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	@ (8002f1c <HAL_DMA_IRQHandler+0x1d4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d022      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <HAL_DMA_IRQHandler+0x1d8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d01d      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <HAL_DMA_IRQHandler+0x1dc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	@ (8002f28 <HAL_DMA_IRQHandler+0x1e0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <HAL_DMA_IRQHandler+0x1e4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <HAL_DMA_IRQHandler+0x1e8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	@ (8002f34 <HAL_DMA_IRQHandler+0x1ec>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_IRQHandler+0x194>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d12f      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x1f4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e02e      	b.n	8002f50 <HAL_DMA_IRQHandler+0x208>
 8002ef2:	bf00      	nop
 8002ef4:	2400003c 	.word	0x2400003c
 8002ef8:	1b4e81b5 	.word	0x1b4e81b5
 8002efc:	40020010 	.word	0x40020010
 8002f00:	40020028 	.word	0x40020028
 8002f04:	40020040 	.word	0x40020040
 8002f08:	40020058 	.word	0x40020058
 8002f0c:	40020070 	.word	0x40020070
 8002f10:	40020088 	.word	0x40020088
 8002f14:	400200a0 	.word	0x400200a0
 8002f18:	400200b8 	.word	0x400200b8
 8002f1c:	40020410 	.word	0x40020410
 8002f20:	40020428 	.word	0x40020428
 8002f24:	40020440 	.word	0x40020440
 8002f28:	40020458 	.word	0x40020458
 8002f2c:	40020470 	.word	0x40020470
 8002f30:	40020488 	.word	0x40020488
 8002f34:	400204a0 	.word	0x400204a0
 8002f38:	400204b8 	.word	0x400204b8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d06e      	beq.n	8003074 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a69      	ldr	r2, [pc, #420]	@ (8003140 <HAL_DMA_IRQHandler+0x3f8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04a      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a67      	ldr	r2, [pc, #412]	@ (8003144 <HAL_DMA_IRQHandler+0x3fc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d045      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a66      	ldr	r2, [pc, #408]	@ (8003148 <HAL_DMA_IRQHandler+0x400>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d040      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a64      	ldr	r2, [pc, #400]	@ (800314c <HAL_DMA_IRQHandler+0x404>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d03b      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a63      	ldr	r2, [pc, #396]	@ (8003150 <HAL_DMA_IRQHandler+0x408>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d036      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a61      	ldr	r2, [pc, #388]	@ (8003154 <HAL_DMA_IRQHandler+0x40c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d031      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a60      	ldr	r2, [pc, #384]	@ (8003158 <HAL_DMA_IRQHandler+0x410>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02c      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800315c <HAL_DMA_IRQHandler+0x414>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5d      	ldr	r2, [pc, #372]	@ (8003160 <HAL_DMA_IRQHandler+0x418>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8003164 <HAL_DMA_IRQHandler+0x41c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8003168 <HAL_DMA_IRQHandler+0x420>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a58      	ldr	r2, [pc, #352]	@ (800316c <HAL_DMA_IRQHandler+0x424>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a57      	ldr	r2, [pc, #348]	@ (8003170 <HAL_DMA_IRQHandler+0x428>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a55      	ldr	r2, [pc, #340]	@ (8003174 <HAL_DMA_IRQHandler+0x42c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a54      	ldr	r2, [pc, #336]	@ (8003178 <HAL_DMA_IRQHandler+0x430>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_IRQHandler+0x2ee>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_DMA_IRQHandler+0x434>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10a      	bne.n	800304c <HAL_DMA_IRQHandler+0x304>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e003      	b.n	8003054 <HAL_DMA_IRQHandler+0x30c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2201      	movs	r2, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	f043 0202 	orr.w	r2, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2204      	movs	r2, #4
 800307e:	409a      	lsls	r2, r3
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 808f 	beq.w	80031a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2c      	ldr	r2, [pc, #176]	@ (8003140 <HAL_DMA_IRQHandler+0x3f8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d04a      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <HAL_DMA_IRQHandler+0x3fc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d045      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <HAL_DMA_IRQHandler+0x400>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d040      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_DMA_IRQHandler+0x404>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d03b      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <HAL_DMA_IRQHandler+0x408>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d036      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a24      	ldr	r2, [pc, #144]	@ (8003154 <HAL_DMA_IRQHandler+0x40c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d031      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <HAL_DMA_IRQHandler+0x410>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d02c      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a21      	ldr	r2, [pc, #132]	@ (800315c <HAL_DMA_IRQHandler+0x414>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d027      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_DMA_IRQHandler+0x418>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <HAL_DMA_IRQHandler+0x41c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <HAL_DMA_IRQHandler+0x420>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_DMA_IRQHandler+0x424>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1a      	ldr	r2, [pc, #104]	@ (8003170 <HAL_DMA_IRQHandler+0x428>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00e      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <HAL_DMA_IRQHandler+0x42c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a17      	ldr	r2, [pc, #92]	@ (8003178 <HAL_DMA_IRQHandler+0x430>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_DMA_IRQHandler+0x3e2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a15      	ldr	r2, [pc, #84]	@ (800317c <HAL_DMA_IRQHandler+0x434>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d12a      	bne.n	8003180 <HAL_DMA_IRQHandler+0x438>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e023      	b.n	8003188 <HAL_DMA_IRQHandler+0x440>
 8003140:	40020010 	.word	0x40020010
 8003144:	40020028 	.word	0x40020028
 8003148:	40020040 	.word	0x40020040
 800314c:	40020058 	.word	0x40020058
 8003150:	40020070 	.word	0x40020070
 8003154:	40020088 	.word	0x40020088
 8003158:	400200a0 	.word	0x400200a0
 800315c:	400200b8 	.word	0x400200b8
 8003160:	40020410 	.word	0x40020410
 8003164:	40020428 	.word	0x40020428
 8003168:	40020440 	.word	0x40020440
 800316c:	40020458 	.word	0x40020458
 8003170:	40020470 	.word	0x40020470
 8003174:	40020488 	.word	0x40020488
 8003178:	400204a0 	.word	0x400204a0
 800317c:	400204b8 	.word	0x400204b8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2204      	movs	r2, #4
 8003196:	409a      	lsls	r2, r3
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	f043 0204 	orr.w	r2, r3, #4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2210      	movs	r2, #16
 80031b2:	409a      	lsls	r2, r3
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a6 	beq.w	800330a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a85      	ldr	r2, [pc, #532]	@ (80033d8 <HAL_DMA_IRQHandler+0x690>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d04a      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a83      	ldr	r2, [pc, #524]	@ (80033dc <HAL_DMA_IRQHandler+0x694>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d045      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a82      	ldr	r2, [pc, #520]	@ (80033e0 <HAL_DMA_IRQHandler+0x698>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d040      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a80      	ldr	r2, [pc, #512]	@ (80033e4 <HAL_DMA_IRQHandler+0x69c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d03b      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7f      	ldr	r2, [pc, #508]	@ (80033e8 <HAL_DMA_IRQHandler+0x6a0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d036      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7d      	ldr	r2, [pc, #500]	@ (80033ec <HAL_DMA_IRQHandler+0x6a4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7c      	ldr	r2, [pc, #496]	@ (80033f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d02c      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7a      	ldr	r2, [pc, #488]	@ (80033f4 <HAL_DMA_IRQHandler+0x6ac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d027      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a79      	ldr	r2, [pc, #484]	@ (80033f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a77      	ldr	r2, [pc, #476]	@ (80033fc <HAL_DMA_IRQHandler+0x6b4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01d      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a76      	ldr	r2, [pc, #472]	@ (8003400 <HAL_DMA_IRQHandler+0x6b8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a74      	ldr	r2, [pc, #464]	@ (8003404 <HAL_DMA_IRQHandler+0x6bc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a73      	ldr	r2, [pc, #460]	@ (8003408 <HAL_DMA_IRQHandler+0x6c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a71      	ldr	r2, [pc, #452]	@ (800340c <HAL_DMA_IRQHandler+0x6c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a70      	ldr	r2, [pc, #448]	@ (8003410 <HAL_DMA_IRQHandler+0x6c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_DMA_IRQHandler+0x516>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6e      	ldr	r2, [pc, #440]	@ (8003414 <HAL_DMA_IRQHandler+0x6cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10a      	bne.n	8003274 <HAL_DMA_IRQHandler+0x52c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e009      	b.n	8003288 <HAL_DMA_IRQHandler+0x540>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d03e      	beq.n	800330a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2210      	movs	r2, #16
 8003296:	409a      	lsls	r2, r3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d024      	beq.n	800330a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
 80032c8:	e01f      	b.n	800330a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01b      	beq.n	800330a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
 80032da:	e016      	b.n	800330a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2220      	movs	r2, #32
 8003314:	409a      	lsls	r2, r3
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8110 	beq.w	8003540 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2c      	ldr	r2, [pc, #176]	@ (80033d8 <HAL_DMA_IRQHandler+0x690>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d04a      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2b      	ldr	r2, [pc, #172]	@ (80033dc <HAL_DMA_IRQHandler+0x694>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d045      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <HAL_DMA_IRQHandler+0x698>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d040      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <HAL_DMA_IRQHandler+0x69c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d03b      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <HAL_DMA_IRQHandler+0x6a0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d036      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <HAL_DMA_IRQHandler+0x6a4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02c      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a22      	ldr	r2, [pc, #136]	@ (80033f4 <HAL_DMA_IRQHandler+0x6ac>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d027      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a20      	ldr	r2, [pc, #128]	@ (80033f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_DMA_IRQHandler+0x6b4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_DMA_IRQHandler+0x6b8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_DMA_IRQHandler+0x6bc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_DMA_IRQHandler+0x6c0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a19      	ldr	r2, [pc, #100]	@ (800340c <HAL_DMA_IRQHandler+0x6c4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <HAL_DMA_IRQHandler+0x6c8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x678>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <HAL_DMA_IRQHandler+0x6cc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d12b      	bne.n	8003418 <HAL_DMA_IRQHandler+0x6d0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e02a      	b.n	800342c <HAL_DMA_IRQHandler+0x6e4>
 80033d6:	bf00      	nop
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8087 	beq.w	8003540 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2220      	movs	r2, #32
 800343c:	409a      	lsls	r2, r3
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b04      	cmp	r3, #4
 800344c:	d139      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0216 	bic.w	r2, r2, #22
 800345c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800346c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_DMA_IRQHandler+0x736>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0208 	bic.w	r2, r2, #8
 800348c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	223f      	movs	r2, #63	@ 0x3f
 8003498:	409a      	lsls	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 834a 	beq.w	8003b4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
          }
          return;
 80034c0:	e344      	b.n	8003b4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02c      	beq.n	8003540 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e027      	b.n	8003540 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e01e      	b.n	8003540 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10f      	bne.n	8003530 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0210 	bic.w	r2, r2, #16
 800351e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8306 	beq.w	8003b56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8088 	beq.w	8003668 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2204      	movs	r2, #4
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7a      	ldr	r2, [pc, #488]	@ (8003750 <HAL_DMA_IRQHandler+0xa08>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d04a      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a79      	ldr	r2, [pc, #484]	@ (8003754 <HAL_DMA_IRQHandler+0xa0c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d045      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a77      	ldr	r2, [pc, #476]	@ (8003758 <HAL_DMA_IRQHandler+0xa10>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d040      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a76      	ldr	r2, [pc, #472]	@ (800375c <HAL_DMA_IRQHandler+0xa14>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d03b      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a74      	ldr	r2, [pc, #464]	@ (8003760 <HAL_DMA_IRQHandler+0xa18>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d036      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a73      	ldr	r2, [pc, #460]	@ (8003764 <HAL_DMA_IRQHandler+0xa1c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d031      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a71      	ldr	r2, [pc, #452]	@ (8003768 <HAL_DMA_IRQHandler+0xa20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a70      	ldr	r2, [pc, #448]	@ (800376c <HAL_DMA_IRQHandler+0xa24>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d027      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003770 <HAL_DMA_IRQHandler+0xa28>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d022      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6d      	ldr	r2, [pc, #436]	@ (8003774 <HAL_DMA_IRQHandler+0xa2c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d01d      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003778 <HAL_DMA_IRQHandler+0xa30>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6a      	ldr	r2, [pc, #424]	@ (800377c <HAL_DMA_IRQHandler+0xa34>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a68      	ldr	r2, [pc, #416]	@ (8003780 <HAL_DMA_IRQHandler+0xa38>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a67      	ldr	r2, [pc, #412]	@ (8003784 <HAL_DMA_IRQHandler+0xa3c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a65      	ldr	r2, [pc, #404]	@ (8003788 <HAL_DMA_IRQHandler+0xa40>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_IRQHandler+0x8b8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a64      	ldr	r2, [pc, #400]	@ (800378c <HAL_DMA_IRQHandler+0xa44>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_IRQHandler+0x8ca>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e007      	b.n	8003622 <HAL_DMA_IRQHandler+0x8da>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3301      	adds	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362a:	429a      	cmp	r2, r3
 800362c:	d307      	bcc.n	800363e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f2      	bne.n	8003622 <HAL_DMA_IRQHandler+0x8da>
 800363c:	e000      	b.n	8003640 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800363e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003656:	e003      	b.n	8003660 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8272 	beq.w	8003b56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e26c      	b.n	8003b56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a43      	ldr	r2, [pc, #268]	@ (8003790 <HAL_DMA_IRQHandler+0xa48>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a42      	ldr	r2, [pc, #264]	@ (8003794 <HAL_DMA_IRQHandler+0xa4c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a40      	ldr	r2, [pc, #256]	@ (8003798 <HAL_DMA_IRQHandler+0xa50>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3f      	ldr	r2, [pc, #252]	@ (800379c <HAL_DMA_IRQHandler+0xa54>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a3d      	ldr	r2, [pc, #244]	@ (80037a0 <HAL_DMA_IRQHandler+0xa58>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <HAL_DMA_IRQHandler+0xa5c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	@ (80037a8 <HAL_DMA_IRQHandler+0xa60>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_IRQHandler+0x984>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a39      	ldr	r2, [pc, #228]	@ (80037ac <HAL_DMA_IRQHandler+0xa64>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x988>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_DMA_IRQHandler+0x98a>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 823f 	beq.w	8003b56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2204      	movs	r2, #4
 80036ea:	409a      	lsls	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80cd 	beq.w	8003890 <HAL_DMA_IRQHandler+0xb48>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80c7 	beq.w	8003890 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2204      	movs	r2, #4
 800370c:	409a      	lsls	r2, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d049      	beq.n	80037b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8210 	beq.w	8003b50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003738:	e20a      	b.n	8003b50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8206 	beq.w	8003b50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374c:	e200      	b.n	8003b50 <HAL_DMA_IRQHandler+0xe08>
 800374e:	bf00      	nop
 8003750:	40020010 	.word	0x40020010
 8003754:	40020028 	.word	0x40020028
 8003758:	40020040 	.word	0x40020040
 800375c:	40020058 	.word	0x40020058
 8003760:	40020070 	.word	0x40020070
 8003764:	40020088 	.word	0x40020088
 8003768:	400200a0 	.word	0x400200a0
 800376c:	400200b8 	.word	0x400200b8
 8003770:	40020410 	.word	0x40020410
 8003774:	40020428 	.word	0x40020428
 8003778:	40020440 	.word	0x40020440
 800377c:	40020458 	.word	0x40020458
 8003780:	40020470 	.word	0x40020470
 8003784:	40020488 	.word	0x40020488
 8003788:	400204a0 	.word	0x400204a0
 800378c:	400204b8 	.word	0x400204b8
 8003790:	58025408 	.word	0x58025408
 8003794:	5802541c 	.word	0x5802541c
 8003798:	58025430 	.word	0x58025430
 800379c:	58025444 	.word	0x58025444
 80037a0:	58025458 	.word	0x58025458
 80037a4:	5802546c 	.word	0x5802546c
 80037a8:	58025480 	.word	0x58025480
 80037ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d160      	bne.n	800387c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7f      	ldr	r2, [pc, #508]	@ (80039bc <HAL_DMA_IRQHandler+0xc74>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04a      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7d      	ldr	r2, [pc, #500]	@ (80039c0 <HAL_DMA_IRQHandler+0xc78>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d045      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7c      	ldr	r2, [pc, #496]	@ (80039c4 <HAL_DMA_IRQHandler+0xc7c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d040      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7a      	ldr	r2, [pc, #488]	@ (80039c8 <HAL_DMA_IRQHandler+0xc80>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d03b      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a79      	ldr	r2, [pc, #484]	@ (80039cc <HAL_DMA_IRQHandler+0xc84>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d036      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	@ (80039d0 <HAL_DMA_IRQHandler+0xc88>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d031      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a76      	ldr	r2, [pc, #472]	@ (80039d4 <HAL_DMA_IRQHandler+0xc8c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d02c      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	@ (80039d8 <HAL_DMA_IRQHandler+0xc90>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d027      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a73      	ldr	r2, [pc, #460]	@ (80039dc <HAL_DMA_IRQHandler+0xc94>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a71      	ldr	r2, [pc, #452]	@ (80039e0 <HAL_DMA_IRQHandler+0xc98>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01d      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a70      	ldr	r2, [pc, #448]	@ (80039e4 <HAL_DMA_IRQHandler+0xc9c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d018      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6e      	ldr	r2, [pc, #440]	@ (80039e8 <HAL_DMA_IRQHandler+0xca0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6d      	ldr	r2, [pc, #436]	@ (80039ec <HAL_DMA_IRQHandler+0xca4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00e      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6b      	ldr	r2, [pc, #428]	@ (80039f0 <HAL_DMA_IRQHandler+0xca8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6a      	ldr	r2, [pc, #424]	@ (80039f4 <HAL_DMA_IRQHandler+0xcac>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d004      	beq.n	800385a <HAL_DMA_IRQHandler+0xb12>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a68      	ldr	r2, [pc, #416]	@ (80039f8 <HAL_DMA_IRQHandler+0xcb0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d108      	bne.n	800386c <HAL_DMA_IRQHandler+0xb24>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e007      	b.n	800387c <HAL_DMA_IRQHandler+0xb34>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8165 	beq.w	8003b50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800388e:	e15f      	b.n	8003b50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2202      	movs	r2, #2
 800389a:	409a      	lsls	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80c5 	beq.w	8003a30 <HAL_DMA_IRQHandler+0xce8>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80bf 	beq.w	8003a30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2202      	movs	r2, #2
 80038bc:	409a      	lsls	r2, r3
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 813a 	beq.w	8003b54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e8:	e134      	b.n	8003b54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8130 	beq.w	8003b54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038fc:	e12a      	b.n	8003b54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8089 	bne.w	8003a1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2b      	ldr	r2, [pc, #172]	@ (80039bc <HAL_DMA_IRQHandler+0xc74>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04a      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <HAL_DMA_IRQHandler+0xc78>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d045      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <HAL_DMA_IRQHandler+0xc7c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d040      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a26      	ldr	r2, [pc, #152]	@ (80039c8 <HAL_DMA_IRQHandler+0xc80>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d03b      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a25      	ldr	r2, [pc, #148]	@ (80039cc <HAL_DMA_IRQHandler+0xc84>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d036      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	@ (80039d0 <HAL_DMA_IRQHandler+0xc88>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	@ (80039d4 <HAL_DMA_IRQHandler+0xc8c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d02c      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_DMA_IRQHandler+0xc90>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d027      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <HAL_DMA_IRQHandler+0xc94>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_DMA_IRQHandler+0xc98>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <HAL_DMA_IRQHandler+0xc9c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <HAL_DMA_IRQHandler+0xca0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <HAL_DMA_IRQHandler+0xca4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_DMA_IRQHandler+0xca8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_DMA_IRQHandler+0xcac>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_DMA_IRQHandler+0xc62>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <HAL_DMA_IRQHandler+0xcb0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d128      	bne.n	80039fc <HAL_DMA_IRQHandler+0xcb4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0214 	bic.w	r2, r2, #20
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e027      	b.n	8003a0c <HAL_DMA_IRQHandler+0xcc4>
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 020a 	bic.w	r2, r2, #10
 8003a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8097 	beq.w	8003b54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a2e:	e091      	b.n	8003b54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2208      	movs	r2, #8
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8088 	beq.w	8003b56 <HAL_DMA_IRQHandler+0xe0e>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8082 	beq.w	8003b56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a41      	ldr	r2, [pc, #260]	@ (8003b5c <HAL_DMA_IRQHandler+0xe14>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d04a      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3f      	ldr	r2, [pc, #252]	@ (8003b60 <HAL_DMA_IRQHandler+0xe18>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d045      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b64 <HAL_DMA_IRQHandler+0xe1c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d040      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3c      	ldr	r2, [pc, #240]	@ (8003b68 <HAL_DMA_IRQHandler+0xe20>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d03b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b6c <HAL_DMA_IRQHandler+0xe24>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d036      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a39      	ldr	r2, [pc, #228]	@ (8003b70 <HAL_DMA_IRQHandler+0xe28>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d031      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a38      	ldr	r2, [pc, #224]	@ (8003b74 <HAL_DMA_IRQHandler+0xe2c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d02c      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a36      	ldr	r2, [pc, #216]	@ (8003b78 <HAL_DMA_IRQHandler+0xe30>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d027      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a35      	ldr	r2, [pc, #212]	@ (8003b7c <HAL_DMA_IRQHandler+0xe34>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	@ (8003b80 <HAL_DMA_IRQHandler+0xe38>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a32      	ldr	r2, [pc, #200]	@ (8003b84 <HAL_DMA_IRQHandler+0xe3c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	@ (8003b88 <HAL_DMA_IRQHandler+0xe40>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <HAL_DMA_IRQHandler+0xe44>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <HAL_DMA_IRQHandler+0xe48>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b94 <HAL_DMA_IRQHandler+0xe4c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xdaa>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <HAL_DMA_IRQHandler+0xe50>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d108      	bne.n	8003b04 <HAL_DMA_IRQHandler+0xdbc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 021c 	bic.w	r2, r2, #28
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e007      	b.n	8003b14 <HAL_DMA_IRQHandler+0xdcc>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020e 	bic.w	r2, r2, #14
 8003b12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
 8003b4a:	e004      	b.n	8003b56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b56:	3728      	adds	r7, #40	@ 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8

08003b9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7f      	ldr	r2, [pc, #508]	@ (8003db8 <DMA_SetConfig+0x21c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d072      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7d      	ldr	r2, [pc, #500]	@ (8003dbc <DMA_SetConfig+0x220>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d06d      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc0 <DMA_SetConfig+0x224>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d068      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	@ (8003dc4 <DMA_SetConfig+0x228>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d063      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a79      	ldr	r2, [pc, #484]	@ (8003dc8 <DMA_SetConfig+0x22c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d05e      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a77      	ldr	r2, [pc, #476]	@ (8003dcc <DMA_SetConfig+0x230>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d059      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a76      	ldr	r2, [pc, #472]	@ (8003dd0 <DMA_SetConfig+0x234>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d054      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a74      	ldr	r2, [pc, #464]	@ (8003dd4 <DMA_SetConfig+0x238>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04f      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	@ (8003dd8 <DMA_SetConfig+0x23c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04a      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a71      	ldr	r2, [pc, #452]	@ (8003ddc <DMA_SetConfig+0x240>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d045      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a70      	ldr	r2, [pc, #448]	@ (8003de0 <DMA_SetConfig+0x244>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	@ (8003de4 <DMA_SetConfig+0x248>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d03b      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6d      	ldr	r2, [pc, #436]	@ (8003de8 <DMA_SetConfig+0x24c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d036      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6b      	ldr	r2, [pc, #428]	@ (8003dec <DMA_SetConfig+0x250>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a6a      	ldr	r2, [pc, #424]	@ (8003df0 <DMA_SetConfig+0x254>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d02c      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a68      	ldr	r2, [pc, #416]	@ (8003df4 <DMA_SetConfig+0x258>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d027      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <DMA_SetConfig+0x25c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a65      	ldr	r2, [pc, #404]	@ (8003dfc <DMA_SetConfig+0x260>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a64      	ldr	r2, [pc, #400]	@ (8003e00 <DMA_SetConfig+0x264>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a62      	ldr	r2, [pc, #392]	@ (8003e04 <DMA_SetConfig+0x268>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a61      	ldr	r2, [pc, #388]	@ (8003e08 <DMA_SetConfig+0x26c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8003e0c <DMA_SetConfig+0x270>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5e      	ldr	r2, [pc, #376]	@ (8003e10 <DMA_SetConfig+0x274>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <DMA_SetConfig+0x10a>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <DMA_SetConfig+0x278>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <DMA_SetConfig+0x10e>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <DMA_SetConfig+0x110>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cb8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a39      	ldr	r2, [pc, #228]	@ (8003db8 <DMA_SetConfig+0x21c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <DMA_SetConfig+0x220>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a36      	ldr	r2, [pc, #216]	@ (8003dc0 <DMA_SetConfig+0x224>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a35      	ldr	r2, [pc, #212]	@ (8003dc4 <DMA_SetConfig+0x228>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a33      	ldr	r2, [pc, #204]	@ (8003dc8 <DMA_SetConfig+0x22c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a32      	ldr	r2, [pc, #200]	@ (8003dcc <DMA_SetConfig+0x230>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a30      	ldr	r2, [pc, #192]	@ (8003dd0 <DMA_SetConfig+0x234>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <DMA_SetConfig+0x238>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd8 <DMA_SetConfig+0x23c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ddc <DMA_SetConfig+0x240>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2a      	ldr	r2, [pc, #168]	@ (8003de0 <DMA_SetConfig+0x244>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <DMA_SetConfig+0x248>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a27      	ldr	r2, [pc, #156]	@ (8003de8 <DMA_SetConfig+0x24c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a26      	ldr	r2, [pc, #152]	@ (8003dec <DMA_SetConfig+0x250>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <DMA_SetConfig+0x254>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <DMA_SetConfig+0x1d0>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <DMA_SetConfig+0x258>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <DMA_SetConfig+0x1d4>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <DMA_SetConfig+0x1d6>
 8003d70:	2300      	movs	r3, #0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d059      	beq.n	8003e2a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	223f      	movs	r2, #63	@ 0x3f
 8003d80:	409a      	lsls	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d138      	bne.n	8003e18 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003db6:	e086      	b.n	8003ec6 <DMA_SetConfig+0x32a>
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
 8003df8:	58025408 	.word	0x58025408
 8003dfc:	5802541c 	.word	0x5802541c
 8003e00:	58025430 	.word	0x58025430
 8003e04:	58025444 	.word	0x58025444
 8003e08:	58025458 	.word	0x58025458
 8003e0c:	5802546c 	.word	0x5802546c
 8003e10:	58025480 	.word	0x58025480
 8003e14:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]
}
 8003e28:	e04d      	b.n	8003ec6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <DMA_SetConfig+0x338>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <DMA_SetConfig+0x33c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a26      	ldr	r2, [pc, #152]	@ (8003edc <DMA_SetConfig+0x340>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ee0 <DMA_SetConfig+0x344>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a23      	ldr	r2, [pc, #140]	@ (8003ee4 <DMA_SetConfig+0x348>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <DMA_SetConfig+0x34c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <DMA_SetConfig+0x350>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <DMA_SetConfig+0x2de>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef0 <DMA_SetConfig+0x354>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <DMA_SetConfig+0x2e2>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <DMA_SetConfig+0x2e4>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d108      	bne.n	8003eb6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	60da      	str	r2, [r3, #12]
}
 8003eb4:	e007      	b.n	8003ec6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	60da      	str	r2, [r3, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	58025408 	.word	0x58025408
 8003ed8:	5802541c 	.word	0x5802541c
 8003edc:	58025430 	.word	0x58025430
 8003ee0:	58025444 	.word	0x58025444
 8003ee4:	58025458 	.word	0x58025458
 8003ee8:	5802546c 	.word	0x5802546c
 8003eec:	58025480 	.word	0x58025480
 8003ef0:	58025494 	.word	0x58025494

08003ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	@ (800400c <DMA_CalcBaseAndBitshift+0x118>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d04a      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	@ (8004010 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d045      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3f      	ldr	r2, [pc, #252]	@ (8004014 <DMA_CalcBaseAndBitshift+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d040      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8004018 <DMA_CalcBaseAndBitshift+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d03b      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3c      	ldr	r2, [pc, #240]	@ (800401c <DMA_CalcBaseAndBitshift+0x128>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d036      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3b      	ldr	r2, [pc, #236]	@ (8004020 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d031      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a39      	ldr	r2, [pc, #228]	@ (8004024 <DMA_CalcBaseAndBitshift+0x130>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d02c      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	@ (8004028 <DMA_CalcBaseAndBitshift+0x134>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d027      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a36      	ldr	r2, [pc, #216]	@ (800402c <DMA_CalcBaseAndBitshift+0x138>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d022      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a35      	ldr	r2, [pc, #212]	@ (8004030 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d01d      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a33      	ldr	r2, [pc, #204]	@ (8004034 <DMA_CalcBaseAndBitshift+0x140>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d018      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	@ (8004038 <DMA_CalcBaseAndBitshift+0x144>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a30      	ldr	r2, [pc, #192]	@ (800403c <DMA_CalcBaseAndBitshift+0x148>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00e      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2f      	ldr	r2, [pc, #188]	@ (8004040 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d009      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004044 <DMA_CalcBaseAndBitshift+0x150>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2c      	ldr	r2, [pc, #176]	@ (8004048 <DMA_CalcBaseAndBitshift+0x154>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <DMA_CalcBaseAndBitshift+0xac>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <DMA_CalcBaseAndBitshift+0xae>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d024      	beq.n	8003ff0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b10      	subs	r3, #16
 8003fae:	4a27      	ldr	r2, [pc, #156]	@ (800404c <DMA_CalcBaseAndBitshift+0x158>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d908      	bls.n	8003fe0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <DMA_CalcBaseAndBitshift+0x160>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fde:	e00d      	b.n	8003ffc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <DMA_CalcBaseAndBitshift+0x160>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fee:	e005      	b.n	8003ffc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40020010 	.word	0x40020010
 8004010:	40020028 	.word	0x40020028
 8004014:	40020040 	.word	0x40020040
 8004018:	40020058 	.word	0x40020058
 800401c:	40020070 	.word	0x40020070
 8004020:	40020088 	.word	0x40020088
 8004024:	400200a0 	.word	0x400200a0
 8004028:	400200b8 	.word	0x400200b8
 800402c:	40020410 	.word	0x40020410
 8004030:	40020428 	.word	0x40020428
 8004034:	40020440 	.word	0x40020440
 8004038:	40020458 	.word	0x40020458
 800403c:	40020470 	.word	0x40020470
 8004040:	40020488 	.word	0x40020488
 8004044:	400204a0 	.word	0x400204a0
 8004048:	400204b8 	.word	0x400204b8
 800404c:	aaaaaaab 	.word	0xaaaaaaab
 8004050:	0800b36c 	.word	0x0800b36c
 8004054:	fffffc00 	.word	0xfffffc00

08004058 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d120      	bne.n	80040ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b03      	cmp	r3, #3
 8004072:	d858      	bhi.n	8004126 <DMA_CheckFifoParam+0xce>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x24>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409f 	.word	0x0800409f
 8004084:	0800408d 	.word	0x0800408d
 8004088:	08004127 	.word	0x08004127
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d048      	beq.n	800412a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800409c:	e045      	b.n	800412a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a6:	d142      	bne.n	800412e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ac:	e03f      	b.n	800412e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b6:	d123      	bne.n	8004100 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d838      	bhi.n	8004132 <DMA_CheckFifoParam+0xda>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <DMA_CheckFifoParam+0x70>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040df 	.word	0x080040df
 80040d0:	080040d9 	.word	0x080040d9
 80040d4:	080040f1 	.word	0x080040f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
        break;
 80040dc:	e030      	b.n	8004140 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d025      	beq.n	8004136 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ee:	e022      	b.n	8004136 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f8:	d11f      	bne.n	800413a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040fe:	e01c      	b.n	800413a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	2b02      	cmp	r3, #2
 8004106:	d902      	bls.n	800410e <DMA_CheckFifoParam+0xb6>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d003      	beq.n	8004114 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800410c:	e018      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
        break;
 8004112:	e015      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
    break;
 8004124:	e00b      	b.n	800413e <DMA_CheckFifoParam+0xe6>
        break;
 8004126:	bf00      	nop
 8004128:	e00a      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        break;
 800412a:	bf00      	nop
 800412c:	e008      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        break;
 800412e:	bf00      	nop
 8004130:	e006      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        break;
 8004132:	bf00      	nop
 8004134:	e004      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
        break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <DMA_CheckFifoParam+0xe8>
    break;
 800413e:	bf00      	nop
    }
  }

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a38      	ldr	r2, [pc, #224]	@ (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a36      	ldr	r2, [pc, #216]	@ (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01d      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a35      	ldr	r2, [pc, #212]	@ (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a30      	ldr	r2, [pc, #192]	@ (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2f      	ldr	r2, [pc, #188]	@ (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01a      	beq.n	80041ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b08      	subs	r3, #8
 80041c0:	4a28      	ldr	r2, [pc, #160]	@ (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4b26      	ldr	r3, [pc, #152]	@ (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a24      	ldr	r2, [pc, #144]	@ (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2201      	movs	r2, #1
 80041e6:	409a      	lsls	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041ec:	e024      	b.n	8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3b10      	subs	r3, #16
 80041f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d806      	bhi.n	8004216 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d902      	bls.n	8004216 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3308      	adds	r3, #8
 8004214:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4b18      	ldr	r3, [pc, #96]	@ (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	461a      	mov	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004228:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2201      	movs	r2, #1
 8004232:	409a      	lsls	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	58025408 	.word	0x58025408
 8004248:	5802541c 	.word	0x5802541c
 800424c:	58025430 	.word	0x58025430
 8004250:	58025444 	.word	0x58025444
 8004254:	58025458 	.word	0x58025458
 8004258:	5802546c 	.word	0x5802546c
 800425c:	58025480 	.word	0x58025480
 8004260:	58025494 	.word	0x58025494
 8004264:	cccccccd 	.word	0xcccccccd
 8004268:	16009600 	.word	0x16009600
 800426c:	58025880 	.word	0x58025880
 8004270:	aaaaaaab 	.word	0xaaaaaaab
 8004274:	400204b8 	.word	0x400204b8
 8004278:	4002040f 	.word	0x4002040f
 800427c:	10008200 	.word	0x10008200
 8004280:	40020880 	.word	0x40020880

08004284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04a      	beq.n	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d847      	bhi.n	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a25      	ldr	r2, [pc, #148]	@ (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a24      	ldr	r2, [pc, #144]	@ (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a22      	ldr	r2, [pc, #136]	@ (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800430c:	671a      	str	r2, [r3, #112]	@ 0x70
 800430e:	e009      	b.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4b14      	ldr	r3, [pc, #80]	@ (8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004322:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	2201      	movs	r2, #1
 800432a:	409a      	lsls	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	58025408 	.word	0x58025408
 8004340:	5802541c 	.word	0x5802541c
 8004344:	58025430 	.word	0x58025430
 8004348:	58025444 	.word	0x58025444
 800434c:	58025458 	.word	0x58025458
 8004350:	5802546c 	.word	0x5802546c
 8004354:	58025480 	.word	0x58025480
 8004358:	58025494 	.word	0x58025494
 800435c:	1600963f 	.word	0x1600963f
 8004360:	58025940 	.word	0x58025940
 8004364:	1000823f 	.word	0x1000823f
 8004368:	40020940 	.word	0x40020940

0800436c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0e3      	b.n	8004546 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2223      	movs	r2, #35	@ 0x23
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fc fae9 	bl	8000968 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	4b6e      	ldr	r3, [pc, #440]	@ (8004550 <HAL_ETH_Init+0x1e4>)
 8004398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800439c:	4a6c      	ldr	r2, [pc, #432]	@ (8004550 <HAL_ETH_Init+0x1e4>)
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80043a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004550 <HAL_ETH_Init+0x1e4>)
 80043a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7a1b      	ldrb	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043bc:	2000      	movs	r0, #0
 80043be:	f7fd f879 	bl	80014b4 <HAL_SYSCFG_ETHInterfaceSelect>
 80043c2:	e003      	b.n	80043cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80043c8:	f7fd f874 	bl	80014b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80043cc:	4b61      	ldr	r3, [pc, #388]	@ (8004554 <HAL_ETH_Init+0x1e8>)
 80043ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043e8:	f7fd f858 	bl	800149c <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043ee:	e011      	b.n	8004414 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80043f0:	f7fd f854 	bl	800149c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043fe:	d909      	bls.n	8004414 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	22e0      	movs	r2, #224	@ 0xe0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e098      	b.n	8004546 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e4      	bne.n	80043f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f89e 	bl	8004568 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800442c:	f001 fcd8 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8004430:	4603      	mov	r3, r0
 8004432:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_ETH_Init+0x1ec>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	0c9a      	lsrs	r2, r3, #18
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3a01      	subs	r2, #1
 8004440:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fa81 	bl	800494c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004456:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004462:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004466:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	22e0      	movs	r2, #224	@ 0xe0
 8004482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e05d      	b.n	8004546 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004492:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <HAL_ETH_Init+0x1f0>)
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6952      	ldr	r2, [r2, #20]
 800449e:	0051      	lsls	r1, r2, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044aa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fae9 	bl	8004a86 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fb2f 	bl	8004b18 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	3305      	adds	r3, #5
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	3303      	adds	r3, #3
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	061a      	lsls	r2, r3, #24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	3302      	adds	r3, #2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	3301      	adds	r3, #1
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004506:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004508:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_ETH_Init+0x1f4>)
 800451a:	430b      	orrs	r3, r1
 800451c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <HAL_ETH_Init+0x1f8>)
 800452e:	430b      	orrs	r3, r1
 8004530:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2210      	movs	r2, #16
 8004540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
 8004554:	58000400 	.word	0x58000400
 8004558:	431bde83 	.word	0x431bde83
 800455c:	ffff8001 	.word	0xffff8001
 8004560:	0c020060 	.word	0x0c020060
 8004564:	0c20c000 	.word	0x0c20c000

08004568 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004578:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004580:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004582:	f001 fc2d 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8004586:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d804      	bhi.n	800459a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e022      	b.n	80045e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d204      	bcs.n	80045ac <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e019      	b.n	80045e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a13      	ldr	r2, [pc, #76]	@ (80045fc <HAL_ETH_SetMDIOClockRange+0x94>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d915      	bls.n	80045e0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <HAL_ETH_SetMDIOClockRange+0x98>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d804      	bhi.n	80045c6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e00c      	b.n	80045e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004604 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d804      	bhi.n	80045d8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e003      	b.n	80045e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	02160ebf 	.word	0x02160ebf
 80045f8:	03938700 	.word	0x03938700
 80045fc:	05f5e0ff 	.word	0x05f5e0ff
 8004600:	08f0d17f 	.word	0x08f0d17f
 8004604:	0ee6b27f 	.word	0x0ee6b27f

08004608 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800461a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	7b1b      	ldrb	r3, [r3, #12]
 8004628:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800462a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	7b5b      	ldrb	r3, [r3, #13]
 8004630:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	7b9b      	ldrb	r3, [r3, #14]
 8004638:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800463a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	7bdb      	ldrb	r3, [r3, #15]
 8004640:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004642:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	7c12      	ldrb	r2, [r2, #16]
 8004648:	2a00      	cmp	r2, #0
 800464a:	d102      	bne.n	8004652 <ETH_SetMACConfig+0x4a>
 800464c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004650:	e000      	b.n	8004654 <ETH_SetMACConfig+0x4c>
 8004652:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004654:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	7c52      	ldrb	r2, [r2, #17]
 800465a:	2a00      	cmp	r2, #0
 800465c:	d102      	bne.n	8004664 <ETH_SetMACConfig+0x5c>
 800465e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004662:	e000      	b.n	8004666 <ETH_SetMACConfig+0x5e>
 8004664:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	7c9b      	ldrb	r3, [r3, #18]
 800466c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800466e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004674:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800467a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	7f1b      	ldrb	r3, [r3, #28]
 8004680:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	7f5b      	ldrb	r3, [r3, #29]
 8004688:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800468a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	7f92      	ldrb	r2, [r2, #30]
 8004690:	2a00      	cmp	r2, #0
 8004692:	d102      	bne.n	800469a <ETH_SetMACConfig+0x92>
 8004694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004698:	e000      	b.n	800469c <ETH_SetMACConfig+0x94>
 800469a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800469c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	7fdb      	ldrb	r3, [r3, #31]
 80046a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	d102      	bne.n	80046b6 <ETH_SetMACConfig+0xae>
 80046b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046b4:	e000      	b.n	80046b8 <ETH_SetMACConfig+0xb0>
 80046b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80046c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <ETH_SetMACConfig+0x22c>)
 80046da:	4013      	ands	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	430b      	orrs	r3, r1
 80046e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004706:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004708:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004710:	2a00      	cmp	r2, #0
 8004712:	d102      	bne.n	800471a <ETH_SetMACConfig+0x112>
 8004714:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004718:	e000      	b.n	800471c <ETH_SetMACConfig+0x114>
 800471a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800471c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4b42      	ldr	r3, [pc, #264]	@ (8004838 <ETH_SetMACConfig+0x230>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	430b      	orrs	r3, r1
 8004738:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004740:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4b3a      	ldr	r3, [pc, #232]	@ (800483c <ETH_SetMACConfig+0x234>)
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	430b      	orrs	r3, r1
 800475c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004764:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800476a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004772:	2a00      	cmp	r2, #0
 8004774:	d101      	bne.n	800477a <ETH_SetMACConfig+0x172>
 8004776:	2280      	movs	r2, #128	@ 0x80
 8004778:	e000      	b.n	800477c <ETH_SetMACConfig+0x174>
 800477a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800477c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004782:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800478e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004792:	4013      	ands	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	430b      	orrs	r3, r1
 800479c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80047a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80047ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	f023 0103 	bic.w	r1, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80047d2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d101      	bne.n	80047f6 <ETH_SetMACConfig+0x1ee>
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	e000      	b.n	80047f8 <ETH_SetMACConfig+0x1f0>
 80047f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80047f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004800:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004802:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800480a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004818:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	430a      	orrs	r2, r1
 8004824:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	00048083 	.word	0x00048083
 8004838:	c0f88000 	.word	0xc0f88000
 800483c:	fffffef0 	.word	0xfffffef0

08004840 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <ETH_SetDMAConfig+0xf8>)
 8004856:	4013      	ands	r3, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6811      	ldr	r1, [r2, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	430b      	orrs	r3, r1
 8004862:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004866:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	791b      	ldrb	r3, [r3, #4]
 800486c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004872:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	7b1b      	ldrb	r3, [r3, #12]
 8004878:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b2c      	ldr	r3, [pc, #176]	@ (800493c <ETH_SetDMAConfig+0xfc>)
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004898:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	7b5b      	ldrb	r3, [r3, #13]
 800489e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <ETH_SetDMAConfig+0x100>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	430b      	orrs	r3, r1
 80048c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048c4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	7d1b      	ldrb	r3, [r3, #20]
 80048d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80048d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	7f5b      	ldrb	r3, [r3, #29]
 80048d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80048ea:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <ETH_SetDMAConfig+0x104>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048fa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	7f1b      	ldrb	r3, [r3, #28]
 8004902:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004914:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <ETH_SetDMAConfig+0x108>)
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	68f9      	ldr	r1, [r7, #12]
 8004922:	430b      	orrs	r3, r1
 8004924:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004928:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	ffff87fd 	.word	0xffff87fd
 800493c:	ffff2ffe 	.word	0xffff2ffe
 8004940:	fffec000 	.word	0xfffec000
 8004944:	ffc0efef 	.word	0xffc0efef
 8004948:	7fc0ffff 	.word	0x7fc0ffff

0800494c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b0a4      	sub	sp, #144	@ 0x90
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800495a:	2300      	movs	r3, #0
 800495c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004964:	2300      	movs	r3, #0
 8004966:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800498e:	2300      	movs	r3, #0
 8004990:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004994:	2300      	movs	r3, #0
 8004996:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80049a4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80049a8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049b0:	2300      	movs	r3, #0
 80049b2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80049c6:	2300      	movs	r3, #0
 80049c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80049ce:	2300      	movs	r3, #0
 80049d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049e4:	2320      	movs	r3, #32
 80049e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80049f6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a26:	2300      	movs	r3, #0
 8004a28:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fde6 	bl	8004608 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a56:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a64:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a6c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a72:	f107 0308 	add.w	r3, r7, #8
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fee1 	bl	8004840 <ETH_SetDMAConfig>
}
 8004a7e:	bf00      	nop
 8004a80:	3790      	adds	r7, #144	@ 0x90
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e01d      	b.n	8004ad0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	3206      	adds	r2, #6
 8004ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d9de      	bls.n	8004a94 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b08:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e023      	b.n	8004b6e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6919      	ldr	r1, [r3, #16]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	440b      	add	r3, r1
 8004b36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2200      	movs	r2, #0
 8004b42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	3212      	adds	r2, #18
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d9d8      	bls.n	8004b26 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004be2:	4b86      	ldr	r3, [pc, #536]	@ (8004dfc <HAL_GPIO_Init+0x228>)
 8004be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	e18c      	b.n	8004f02 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 817e 	beq.w	8004efc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d005      	beq.n	8004c18 <HAL_GPIO_Init+0x44>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d130      	bne.n	8004c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4e:	2201      	movs	r2, #1
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0201 	and.w	r2, r3, #1
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d017      	beq.n	8004cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d123      	bne.n	8004d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	2203      	movs	r2, #3
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0203 	and.w	r2, r3, #3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80d8 	beq.w	8004efc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e00 <HAL_GPIO_Init+0x22c>)
 8004d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d52:	4a2b      	ldr	r2, [pc, #172]	@ (8004e00 <HAL_GPIO_Init+0x22c>)
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d5c:	4b28      	ldr	r3, [pc, #160]	@ (8004e00 <HAL_GPIO_Init+0x22c>)
 8004d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d6a:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <HAL_GPIO_Init+0x230>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <HAL_GPIO_Init+0x234>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d04a      	beq.n	8004e2c <HAL_GPIO_Init+0x258>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <HAL_GPIO_Init+0x238>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02b      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <HAL_GPIO_Init+0x23c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d025      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e14 <HAL_GPIO_Init+0x240>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <HAL_GPIO_Init+0x244>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_GPIO_Init+0x216>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a18      	ldr	r2, [pc, #96]	@ (8004e1c <HAL_GPIO_Init+0x248>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0x212>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_GPIO_Init+0x24c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_GPIO_Init+0x20e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a16      	ldr	r2, [pc, #88]	@ (8004e24 <HAL_GPIO_Init+0x250>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_GPIO_Init+0x20a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <HAL_GPIO_Init+0x254>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_GPIO_Init+0x206>
 8004dd6:	2309      	movs	r3, #9
 8004dd8:	e029      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e027      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004dde:	2307      	movs	r3, #7
 8004de0:	e025      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004de2:	2306      	movs	r3, #6
 8004de4:	e023      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e021      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e01f      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e01d      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e01b      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e019      	b.n	8004e2e <HAL_GPIO_Init+0x25a>
 8004dfa:	bf00      	nop
 8004dfc:	58000080 	.word	0x58000080
 8004e00:	58024400 	.word	0x58024400
 8004e04:	58000400 	.word	0x58000400
 8004e08:	58020000 	.word	0x58020000
 8004e0c:	58020400 	.word	0x58020400
 8004e10:	58020800 	.word	0x58020800
 8004e14:	58020c00 	.word	0x58020c00
 8004e18:	58021000 	.word	0x58021000
 8004e1c:	58021400 	.word	0x58021400
 8004e20:	58021800 	.word	0x58021800
 8004e24:	58021c00 	.word	0x58021c00
 8004e28:	58022400 	.word	0x58022400
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	f002 0203 	and.w	r2, r2, #3
 8004e34:	0092      	lsls	r2, r2, #2
 8004e36:	4093      	lsls	r3, r2
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e3e:	4938      	ldr	r1, [pc, #224]	@ (8004f20 <HAL_GPIO_Init+0x34c>)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3302      	adds	r3, #2
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f ae6b 	bne.w	8004be8 <HAL_GPIO_Init+0x14>
  }
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	3724      	adds	r7, #36	@ 0x24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	58000400 	.word	0x58000400

08004f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]
 8004f30:	4613      	mov	r3, r2
 8004f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f34:	787b      	ldrb	r3, [r7, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f40:	e003      	b.n	8004f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	041a      	lsls	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	619a      	str	r2, [r3, #24]
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f60:	4b19      	ldr	r3, [pc, #100]	@ (8004fc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d00a      	beq.n	8004f82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f6c:	4b16      	ldr	r3, [pc, #88]	@ (8004fc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d001      	beq.n	8004f7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e01f      	b.n	8004fbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e01d      	b.n	8004fbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f82:	4b11      	ldr	r3, [pc, #68]	@ (8004fc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 0207 	bic.w	r2, r3, #7
 8004f8a:	490f      	ldr	r1, [pc, #60]	@ (8004fc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f92:	f7fc fa83 	bl	800149c <HAL_GetTick>
 8004f96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f98:	e009      	b.n	8004fae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f9a:	f7fc fa7f 	bl	800149c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fa8:	d901      	bls.n	8004fae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e007      	b.n	8004fbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_PWREx_ConfigSupply+0x70>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fba:	d1ee      	bne.n	8004f9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	58024800 	.word	0x58024800

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08c      	sub	sp, #48	@ 0x30
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e3c8      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8087 	beq.w	80050fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fec:	4b88      	ldr	r3, [pc, #544]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ff6:	4b86      	ldr	r3, [pc, #536]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d007      	beq.n	8005012 <HAL_RCC_OscConfig+0x46>
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	2b18      	cmp	r3, #24
 8005006:	d110      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d10b      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005012:	4b7f      	ldr	r3, [pc, #508]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d06c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x12c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d168      	bne.n	80050f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e3a2      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x76>
 8005034:	4b76      	ldr	r3, [pc, #472]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a75      	ldr	r2, [pc, #468]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e02e      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b71      	ldr	r3, [pc, #452]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a70      	ldr	r2, [pc, #448]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b6e      	ldr	r3, [pc, #440]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6d      	ldr	r2, [pc, #436]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0xbc>
 800506e:	4b68      	ldr	r3, [pc, #416]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a67      	ldr	r2, [pc, #412]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b65      	ldr	r3, [pc, #404]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a64      	ldr	r2, [pc, #400]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005088:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a60      	ldr	r2, [pc, #384]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b5e      	ldr	r3, [pc, #376]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5d      	ldr	r2, [pc, #372]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800509e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fc f9f8 	bl	800149c <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fc f9f4 	bl	800149c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	@ 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e356      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050c2:	4b53      	ldr	r3, [pc, #332]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe4>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fc f9e4 	bl	800149c <HAL_GetTick>
 80050d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc f9e0 	bl	800149c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	@ 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e342      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050ea:	4b49      	ldr	r3, [pc, #292]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x10c>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 808c 	beq.w	8005220 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005108:	4b41      	ldr	r3, [pc, #260]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005110:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005112:	4b3f      	ldr	r3, [pc, #252]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_RCC_OscConfig+0x162>
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	2b18      	cmp	r3, #24
 8005122:	d137      	bne.n	8005194 <HAL_RCC_OscConfig+0x1c8>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d132      	bne.n	8005194 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512e:	4b38      	ldr	r3, [pc, #224]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_RCC_OscConfig+0x17a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e314      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005146:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 0219 	bic.w	r2, r3, #25
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	492f      	ldr	r1, [pc, #188]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005154:	4313      	orrs	r3, r2
 8005156:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fc f9a0 	bl	800149c <HAL_GetTick>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005160:	f7fc f99c 	bl	800149c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e2fe      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005172:	4b27      	ldr	r3, [pc, #156]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	4920      	ldr	r1, [pc, #128]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005192:	e045      	b.n	8005220 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d026      	beq.n	80051ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800519c:	4b1c      	ldr	r3, [pc, #112]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 0219 	bic.w	r2, r3, #25
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4919      	ldr	r1, [pc, #100]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fc f975 	bl	800149c <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fc f971 	bl	800149c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e2d3      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	490b      	ldr	r1, [pc, #44]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
 80051e8:	e01a      	b.n	8005220 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <HAL_RCC_OscConfig+0x244>)
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fc f951 	bl	800149c <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051fc:	e00a      	b.n	8005214 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fe:	f7fc f94d 	bl	800149c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d903      	bls.n	8005214 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e2af      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
 8005210:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005214:	4b96      	ldr	r3, [pc, #600]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ee      	bne.n	80051fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d06a      	beq.n	8005302 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522c:	4b90      	ldr	r3, [pc, #576]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005234:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005236:	4b8e      	ldr	r3, [pc, #568]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d007      	beq.n	8005252 <HAL_RCC_OscConfig+0x286>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b18      	cmp	r3, #24
 8005246:	d11b      	bne.n	8005280 <HAL_RCC_OscConfig+0x2b4>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d116      	bne.n	8005280 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005252:	4b87      	ldr	r3, [pc, #540]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_RCC_OscConfig+0x29e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d001      	beq.n	800526a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e282      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800526a:	4b81      	ldr	r3, [pc, #516]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	497d      	ldr	r1, [pc, #500]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800527e:	e040      	b.n	8005302 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005288:	4b79      	ldr	r3, [pc, #484]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a78      	ldr	r2, [pc, #480]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800528e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fc f902 	bl	800149c <HAL_GetTick>
 8005298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800529c:	f7fc f8fe 	bl	800149c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e260      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052ae:	4b70      	ldr	r3, [pc, #448]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	4969      	ldr	r1, [pc, #420]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]
 80052ce:	e018      	b.n	8005302 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80052d0:	4b67      	ldr	r3, [pc, #412]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a66      	ldr	r2, [pc, #408]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fc f8de 	bl	800149c <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052e4:	f7fc f8da 	bl	800149c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e23c      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052f6:	4b5e      	ldr	r3, [pc, #376]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d036      	beq.n	800537c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d019      	beq.n	800534a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005316:	4b56      	ldr	r3, [pc, #344]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531a:	4a55      	ldr	r2, [pc, #340]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005322:	f7fc f8bb 	bl	800149c <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532a:	f7fc f8b7 	bl	800149c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e219      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800533c:	4b4c      	ldr	r3, [pc, #304]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800533e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x35e>
 8005348:	e018      	b.n	800537c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534a:	4b49      	ldr	r3, [pc, #292]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800534c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534e:	4a48      	ldr	r2, [pc, #288]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fc f8a1 	bl	800149c <HAL_GetTick>
 800535a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535e:	f7fc f89d 	bl	800149c <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e1ff      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005370:	4b3f      	ldr	r3, [pc, #252]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f0      	bne.n	800535e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d036      	beq.n	80053f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d019      	beq.n	80053c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005390:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a36      	ldr	r2, [pc, #216]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005396:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800539a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800539c:	f7fc f87e 	bl	800149c <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a4:	f7fc f87a 	bl	800149c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1dc      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x3d8>
 80053c2:	e018      	b.n	80053f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053d0:	f7fc f864 	bl	800149c <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d8:	f7fc f860 	bl	800149c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1c2      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ea:	4b21      	ldr	r3, [pc, #132]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8086 	beq.w	8005510 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_RCC_OscConfig+0x4a8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1a      	ldr	r2, [pc, #104]	@ (8005474 <HAL_RCC_OscConfig+0x4a8>)
 800540a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800540e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005410:	f7fc f844 	bl	800149c <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005418:	f7fc f840 	bl	800149c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e1a2      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542a:	4b12      	ldr	r3, [pc, #72]	@ (8005474 <HAL_RCC_OscConfig+0x4a8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d106      	bne.n	800544c <HAL_RCC_OscConfig+0x480>
 800543e:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	4a0b      	ldr	r2, [pc, #44]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	@ 0x70
 800544a:	e032      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d111      	bne.n	8005478 <HAL_RCC_OscConfig+0x4ac>
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005458:	4a05      	ldr	r2, [pc, #20]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a02      	ldr	r2, [pc, #8]	@ (8005470 <HAL_RCC_OscConfig+0x4a4>)
 8005466:	f023 0304 	bic.w	r3, r3, #4
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	e021      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e6>
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	58024800 	.word	0x58024800
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b05      	cmp	r3, #5
 800547e:	d10c      	bne.n	800549a <HAL_RCC_OscConfig+0x4ce>
 8005480:	4b83      	ldr	r3, [pc, #524]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	4a82      	ldr	r2, [pc, #520]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	6713      	str	r3, [r2, #112]	@ 0x70
 800548c:	4b80      	ldr	r3, [pc, #512]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	4a7f      	ldr	r2, [pc, #508]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	@ 0x70
 8005498:	e00b      	b.n	80054b2 <HAL_RCC_OscConfig+0x4e6>
 800549a:	4b7d      	ldr	r3, [pc, #500]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549e:	4a7c      	ldr	r2, [pc, #496]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	4a79      	ldr	r2, [pc, #484]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d015      	beq.n	80054e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fb ffef 	bl	800149c <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c0:	e00a      	b.n	80054d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fb ffeb 	bl	800149c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e14b      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d8:	4b6d      	ldr	r3, [pc, #436]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ee      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
 80054e4:	e014      	b.n	8005510 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fb ffd9 	bl	800149c <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fb ffd5 	bl	800149c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e135      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005504:	4b62      	ldr	r3, [pc, #392]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ee      	bne.n	80054ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 812a 	beq.w	800576e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800551a:	4b5d      	ldr	r3, [pc, #372]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005522:	2b18      	cmp	r3, #24
 8005524:	f000 80ba 	beq.w	800569c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	2b02      	cmp	r3, #2
 800552e:	f040 8095 	bne.w	800565c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b57      	ldr	r3, [pc, #348]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a56      	ldr	r2, [pc, #344]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005538:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fb ffad 	bl	800149c <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005546:	f7fb ffa9 	bl	800149c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e10b      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005558:	4b4d      	ldr	r3, [pc, #308]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005564:	4b4a      	ldr	r3, [pc, #296]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005568:	4b4a      	ldr	r3, [pc, #296]	@ (8005694 <HAL_RCC_OscConfig+0x6c8>)
 800556a:	4013      	ands	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005574:	0112      	lsls	r2, r2, #4
 8005576:	430a      	orrs	r2, r1
 8005578:	4945      	ldr	r1, [pc, #276]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	628b      	str	r3, [r1, #40]	@ 0x28
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	3b01      	subs	r3, #1
 8005584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558c:	3b01      	subs	r3, #1
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	b29b      	uxth	r3, r3
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	3b01      	subs	r3, #1
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	3b01      	subs	r3, #1
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055ae:	4938      	ldr	r1, [pc, #224]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80055b4:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	4a35      	ldr	r2, [pc, #212]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055c0:	4b33      	ldr	r3, [pc, #204]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055c4:	4b34      	ldr	r3, [pc, #208]	@ (8005698 <HAL_RCC_OscConfig+0x6cc>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055cc:	00d2      	lsls	r2, r2, #3
 80055ce:	4930      	ldr	r1, [pc, #192]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80055d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	f023 020c 	bic.w	r2, r3, #12
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	492b      	ldr	r1, [pc, #172]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	f023 0202 	bic.w	r2, r3, #2
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	4927      	ldr	r1, [pc, #156]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	4a24      	ldr	r2, [pc, #144]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005604:	4b22      	ldr	r3, [pc, #136]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4a21      	ldr	r2, [pc, #132]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800560a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005610:	4b1f      	ldr	r3, [pc, #124]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800561a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800561c:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	4a1b      	ldr	r2, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800562e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fb ff32 	bl	800149c <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fb ff2e 	bl	800149c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e090      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x670>
 800565a:	e088      	b.n	800576e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fb ff18 	bl	800149c <HAL_GetTick>
 800566c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fb ff14 	bl	800149c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e076      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005682:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <HAL_RCC_OscConfig+0x6c4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x6a4>
 800568e:	e06e      	b.n	800576e <HAL_RCC_OscConfig+0x7a2>
 8005690:	58024400 	.word	0x58024400
 8005694:	fffffc0c 	.word	0xfffffc0c
 8005698:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800569c:	4b36      	ldr	r3, [pc, #216]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056a2:	4b35      	ldr	r3, [pc, #212]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d031      	beq.n	8005714 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d12a      	bne.n	8005714 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d122      	bne.n	8005714 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11a      	bne.n	8005714 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	0a5b      	lsrs	r3, r3, #9
 80056e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d111      	bne.n	8005714 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d108      	bne.n	8005714 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e02b      	b.n	8005770 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005718:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005722:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d01f      	beq.n	800576e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800572e:	4b12      	ldr	r3, [pc, #72]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	4a11      	ldr	r2, [pc, #68]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800573a:	f7fb feaf 	bl	800149c <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005740:	bf00      	nop
 8005742:	f7fb feab 	bl	800149c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	4293      	cmp	r3, r2
 800574c:	d0f9      	beq.n	8005742 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800574e:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 8005750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <HAL_RCC_OscConfig+0x7b0>)
 8005754:	4013      	ands	r3, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800575a:	00d2      	lsls	r2, r2, #3
 800575c:	4906      	ldr	r1, [pc, #24]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 800575e:	4313      	orrs	r3, r2
 8005760:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005762:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <HAL_RCC_OscConfig+0x7ac>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3730      	adds	r7, #48	@ 0x30
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58024400 	.word	0x58024400
 800577c:	ffff0007 	.word	0xffff0007

08005780 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e19c      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005794:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d910      	bls.n	80057c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b87      	ldr	r3, [pc, #540]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f023 020f 	bic.w	r2, r3, #15
 80057aa:	4985      	ldr	r1, [pc, #532]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	4b83      	ldr	r3, [pc, #524]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e184      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	4b7b      	ldr	r3, [pc, #492]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057dc:	429a      	cmp	r2, r3
 80057de:	d908      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057e0:	4b78      	ldr	r3, [pc, #480]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	4975      	ldr	r1, [pc, #468]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	4b70      	ldr	r3, [pc, #448]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800580a:	429a      	cmp	r2, r3
 800580c:	d908      	bls.n	8005820 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800580e:	4b6d      	ldr	r3, [pc, #436]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	496a      	ldr	r1, [pc, #424]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800581c:	4313      	orrs	r3, r2
 800581e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d010      	beq.n	800584e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	4b64      	ldr	r3, [pc, #400]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005838:	429a      	cmp	r2, r3
 800583a:	d908      	bls.n	800584e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	495e      	ldr	r1, [pc, #376]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800584a:	4313      	orrs	r3, r2
 800584c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	4b59      	ldr	r3, [pc, #356]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005866:	429a      	cmp	r2, r3
 8005868:	d908      	bls.n	800587c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800586a:	4b56      	ldr	r3, [pc, #344]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4953      	ldr	r1, [pc, #332]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	429a      	cmp	r2, r3
 8005896:	d908      	bls.n	80058aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005898:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f023 020f 	bic.w	r2, r3, #15
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4947      	ldr	r1, [pc, #284]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d055      	beq.n	8005962 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058b6:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4940      	ldr	r1, [pc, #256]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d0:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d121      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f6      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e8:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d115      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0ea      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005900:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0de      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005910:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0d6      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005920:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f023 0207 	bic.w	r2, r3, #7
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4925      	ldr	r1, [pc, #148]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fb fdb3 	bl	800149c <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005938:	e00a      	b.n	8005950 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fb fdaf 	bl	800149c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005948:	4293      	cmp	r3, r2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0be      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005950:	4b1c      	ldr	r3, [pc, #112]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	429a      	cmp	r2, r3
 8005960:	d1eb      	bne.n	800593a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	429a      	cmp	r2, r3
 800597c:	d208      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597e:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f023 020f 	bic.w	r2, r3, #15
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	490e      	ldr	r1, [pc, #56]	@ (80059c4 <HAL_RCC_ClockConfig+0x244>)
 800598c:	4313      	orrs	r3, r2
 800598e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d214      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 020f 	bic.w	r2, r3, #15
 80059a6:	4906      	ldr	r1, [pc, #24]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d005      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e086      	b.n	8005ace <HAL_RCC_ClockConfig+0x34e>
 80059c0:	52002000 	.word	0x52002000
 80059c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d208      	bcs.n	80059f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059e4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	4939      	ldr	r1, [pc, #228]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	4b34      	ldr	r3, [pc, #208]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d208      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	492e      	ldr	r1, [pc, #184]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	4b28      	ldr	r3, [pc, #160]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d208      	bcs.n	8005a52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a40:	4b25      	ldr	r3, [pc, #148]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4922      	ldr	r1, [pc, #136]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d208      	bcs.n	8005a80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a80:	f000 f834 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	4912      	ldr	r1, [pc, #72]	@ (8005adc <HAL_RCC_ClockConfig+0x35c>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <HAL_RCC_ClockConfig+0x358>)
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8005adc <HAL_RCC_ClockConfig+0x35c>)
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <HAL_RCC_ClockConfig+0x360>)
 8005ab6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x364>)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x368>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fb fca0 	bl	8001408 <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	0800b35c 	.word	0x0800b35c
 8005ae0:	24000040 	.word	0x24000040
 8005ae4:	2400003c 	.word	0x2400003c
 8005ae8:	24000044 	.word	0x24000044

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b089      	sub	sp, #36	@ 0x24
 8005af0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af2:	4bb3      	ldr	r3, [pc, #716]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005afa:	2b18      	cmp	r3, #24
 8005afc:	f200 8155 	bhi.w	8005daa <HAL_RCC_GetSysClockFreq+0x2be>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005dab 	.word	0x08005dab
 8005b10:	08005dab 	.word	0x08005dab
 8005b14:	08005dab 	.word	0x08005dab
 8005b18:	08005dab 	.word	0x08005dab
 8005b1c:	08005dab 	.word	0x08005dab
 8005b20:	08005dab 	.word	0x08005dab
 8005b24:	08005dab 	.word	0x08005dab
 8005b28:	08005b93 	.word	0x08005b93
 8005b2c:	08005dab 	.word	0x08005dab
 8005b30:	08005dab 	.word	0x08005dab
 8005b34:	08005dab 	.word	0x08005dab
 8005b38:	08005dab 	.word	0x08005dab
 8005b3c:	08005dab 	.word	0x08005dab
 8005b40:	08005dab 	.word	0x08005dab
 8005b44:	08005dab 	.word	0x08005dab
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005dab 	.word	0x08005dab
 8005b50:	08005dab 	.word	0x08005dab
 8005b54:	08005dab 	.word	0x08005dab
 8005b58:	08005dab 	.word	0x08005dab
 8005b5c:	08005dab 	.word	0x08005dab
 8005b60:	08005dab 	.word	0x08005dab
 8005b64:	08005dab 	.word	0x08005dab
 8005b68:	08005b9f 	.word	0x08005b9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b6c:	4b94      	ldr	r3, [pc, #592]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b78:	4b91      	ldr	r3, [pc, #580]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	08db      	lsrs	r3, r3, #3
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	4a90      	ldr	r2, [pc, #576]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
 8005b88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b8a:	e111      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b8e:	61bb      	str	r3, [r7, #24]
      break;
 8005b90:	e10e      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b92:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b94:	61bb      	str	r3, [r7, #24]
      break;
 8005b96:	e10b      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b98:	4b8c      	ldr	r3, [pc, #560]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b9a:	61bb      	str	r3, [r7, #24]
      break;
 8005b9c:	e108      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b9e:	4b88      	ldr	r3, [pc, #544]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ba8:	4b85      	ldr	r3, [pc, #532]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bb2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bb4:	4b82      	ldr	r3, [pc, #520]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005bbe:	4b80      	ldr	r3, [pc, #512]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80e1 	beq.w	8005da4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	f000 8083 	beq.w	8005cf0 <HAL_RCC_GetSysClockFreq+0x204>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	f200 80a1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x248>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x114>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d056      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bfe:	e099      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c00:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d02d      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c0c:	4b6c      	ldr	r3, [pc, #432]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	08db      	lsrs	r3, r3, #3
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	4a6b      	ldr	r2, [pc, #428]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c18:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c36:	4b62      	ldr	r3, [pc, #392]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c4a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c66:	e087      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c72:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005dd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7a:	4b51      	ldr	r3, [pc, #324]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c8e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005caa:	e065      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b40      	ldr	r3, [pc, #256]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cee:	e043      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ddc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d32:	e021      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005dd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005dd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d78:	4b11      	ldr	r3, [pc, #68]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7c:	0a5b      	lsrs	r3, r3, #9
 8005d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d82:	3301      	adds	r3, #1
 8005d84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9c:	ee17 3a90 	vmov	r3, s15
 8005da0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005da2:	e005      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61bb      	str	r3, [r7, #24]
      break;
 8005da8:	e002      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005daa:	4b07      	ldr	r3, [pc, #28]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dac:	61bb      	str	r3, [r7, #24]
      break;
 8005dae:	bf00      	nop
  }

  return sysclockfreq;
 8005db0:	69bb      	ldr	r3, [r7, #24]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3724      	adds	r7, #36	@ 0x24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	03d09000 	.word	0x03d09000
 8005dc8:	003d0900 	.word	0x003d0900
 8005dcc:	007a1200 	.word	0x007a1200
 8005dd0:	46000000 	.word	0x46000000
 8005dd4:	4c742400 	.word	0x4c742400
 8005dd8:	4a742400 	.word	0x4a742400
 8005ddc:	4af42400 	.word	0x4af42400

08005de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005de6:	f7ff fe81 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	490f      	ldr	r1, [pc, #60]	@ (8005e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005df8:	5ccb      	ldrb	r3, [r1, r3]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e04:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e0e:	5cd3      	ldrb	r3, [r2, r3]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	4a07      	ldr	r2, [pc, #28]	@ (8005e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e26:	681b      	ldr	r3, [r3, #0]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58024400 	.word	0x58024400
 8005e34:	0800b35c 	.word	0x0800b35c
 8005e38:	24000040 	.word	0x24000040
 8005e3c:	2400003c 	.word	0x2400003c

08005e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e44:	f7ff ffcc 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4b06      	ldr	r3, [pc, #24]	@ (8005e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	4904      	ldr	r1, [pc, #16]	@ (8005e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e56:	5ccb      	ldrb	r3, [r1, r3]
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	58024400 	.word	0x58024400
 8005e68:	0800b35c 	.word	0x0800b35c

08005e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e70:	f7ff ffb6 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4904      	ldr	r1, [pc, #16]	@ (8005e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e82:	5ccb      	ldrb	r3, [r1, r3]
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	58024400 	.word	0x58024400
 8005e94:	0800b35c 	.word	0x0800b35c

08005e98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0c6      	sub	sp, #280	@ 0x118
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	ea54 0305 	orrs.w	r3, r4, r5
 8005ec2:	d049      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ece:	d02f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ed0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ed4:	d828      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ed6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eda:	d01a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005edc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee0:	d822      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eea:	d007      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005eec:	e01c      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4bab      	ldr	r3, [pc, #684]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4aaa      	ldr	r2, [pc, #680]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005efa:	e01a      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	3308      	adds	r3, #8
 8005f02:	2102      	movs	r1, #2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fc25 	bl	8007754 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f10:	e00f      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f16:	3328      	adds	r3, #40	@ 0x28
 8005f18:	2102      	movs	r1, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fccc 	bl	80078b8 <RCCEx_PLL3_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f26:	e004      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f2e:	e000      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f3a:	4b98      	ldr	r3, [pc, #608]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f48:	4a94      	ldr	r2, [pc, #592]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f64:	f04f 0900 	mov.w	r9, #0
 8005f68:	ea58 0309 	orrs.w	r3, r8, r9
 8005f6c:	d047      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d82a      	bhi.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f78:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f95 	.word	0x08005f95
 8005f84:	08005fa3 	.word	0x08005fa3
 8005f88:	08005fb9 	.word	0x08005fb9
 8005f8c:	08005fd7 	.word	0x08005fd7
 8005f90:	08005fd7 	.word	0x08005fd7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f94:	4b81      	ldr	r3, [pc, #516]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	4a80      	ldr	r2, [pc, #512]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fa0:	e01a      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fbd2 	bl	8007754 <RCCEx_PLL2_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fb6:	e00f      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbc:	3328      	adds	r3, #40	@ 0x28
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fc79 	bl	80078b8 <RCCEx_PLL3_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fd4:	e000      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fe0:	4b6e      	ldr	r3, [pc, #440]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	f023 0107 	bic.w	r1, r3, #7
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fee:	4a6b      	ldr	r2, [pc, #428]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ffa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800600a:	f04f 0b00 	mov.w	fp, #0
 800600e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006012:	d05b      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800601c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006020:	d03b      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006022:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006026:	d834      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006028:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800602c:	d037      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800602e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006032:	d82e      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006034:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006038:	d033      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800603a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800603e:	d828      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006044:	d01a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800604a:	d822      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006050:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006054:	d007      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006056:	e01c      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4b50      	ldr	r3, [pc, #320]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	4a4f      	ldr	r2, [pc, #316]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006064:	e01e      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606a:	3308      	adds	r3, #8
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fb70 	bl	8007754 <RCCEx_PLL2_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800607a:	e013      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	3328      	adds	r3, #40	@ 0x28
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fc17 	bl	80078b8 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006090:	e008      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006098:	e004      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060ac:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060bc:	4a37      	ldr	r2, [pc, #220]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c2:	e003      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80060d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d05d      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060f4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060f8:	d03b      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060fa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060fe:	d834      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006104:	d037      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006106:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800610a:	d82e      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800610c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006110:	d033      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006112:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006116:	d828      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800611c:	d01a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800611e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006122:	d822      	bhi.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800612c:	d007      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800612e:	e01c      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	4a19      	ldr	r2, [pc, #100]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800613c:	e01e      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	3308      	adds	r3, #8
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fb04 	bl	8007754 <RCCEx_PLL2_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006152:	e013      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	3328      	adds	r3, #40	@ 0x28
 800615a:	2100      	movs	r1, #0
 800615c:	4618      	mov	r0, r3
 800615e:	f001 fbab 	bl	80078b8 <RCCEx_PLL3_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006168:	e008      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006170:	e004      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800617a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10d      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006188:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006194:	4a01      	ldr	r2, [pc, #4]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006196:	430b      	orrs	r3, r1
 8006198:	6593      	str	r3, [r2, #88]	@ 0x58
 800619a:	e005      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800619c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80061b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4313      	orrs	r3, r2
 80061c6:	d03a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ce:	2b30      	cmp	r3, #48	@ 0x30
 80061d0:	d01f      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80061d2:	2b30      	cmp	r3, #48	@ 0x30
 80061d4:	d819      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d00c      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d815      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d019      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061e2:	2b10      	cmp	r3, #16
 80061e4:	d111      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e6:	4baa      	ldr	r3, [pc, #680]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	4aa9      	ldr	r2, [pc, #676]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061f2:	e011      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	3308      	adds	r3, #8
 80061fa:	2102      	movs	r1, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 faa9 	bl	8007754 <RCCEx_PLL2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006220:	4b9b      	ldr	r3, [pc, #620]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622e:	4a98      	ldr	r2, [pc, #608]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006230:	430b      	orrs	r3, r1
 8006232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800623a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800624a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006254:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006258:	460b      	mov	r3, r1
 800625a:	4313      	orrs	r3, r2
 800625c:	d051      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006268:	d035      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800626a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800626e:	d82e      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006270:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006274:	d031      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006276:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800627a:	d828      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006280:	d01a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006286:	d822      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006292:	e01c      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b7e      	ldr	r3, [pc, #504]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a7d      	ldr	r2, [pc, #500]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062a0:	e01c      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a6:	3308      	adds	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 fa52 	bl	8007754 <RCCEx_PLL2_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062b6:	e011      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062bc:	3328      	adds	r3, #40	@ 0x28
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 faf9 	bl	80078b8 <RCCEx_PLL3_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062cc:	e006      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062d4:	e002      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80062da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f2:	4a67      	ldr	r2, [pc, #412]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062f8:	e003      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800630e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006318:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d053      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800632c:	d033      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800632e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006332:	d82c      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006334:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006338:	d02f      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800633a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800633e:	d826      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006340:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006344:	d02b      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006346:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800634a:	d820      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800634c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006350:	d012      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006356:	d81a      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d022      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006360:	d115      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006366:	3308      	adds	r3, #8
 8006368:	2101      	movs	r1, #1
 800636a:	4618      	mov	r0, r3
 800636c:	f001 f9f2 	bl	8007754 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006376:	e015      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	3328      	adds	r3, #40	@ 0x28
 800637e:	2101      	movs	r1, #1
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fa99 	bl	80078b8 <RCCEx_PLL3_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800638c:	e00a      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006394:	e006      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80063ac:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ba:	4a35      	ldr	r2, [pc, #212]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063bc:	430b      	orrs	r3, r1
 80063be:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c0:	e003      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80063d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063da:	2300      	movs	r3, #0
 80063dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063e4:	460b      	mov	r3, r1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	d058      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063f6:	d033      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80063f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063fc:	d82c      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	d02f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006408:	d826      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800640a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800640e:	d02b      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006410:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006414:	d820      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800641a:	d012      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800641c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006420:	d81a      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d022      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800642a:	d115      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006430:	3308      	adds	r3, #8
 8006432:	2101      	movs	r1, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f98d 	bl	8007754 <RCCEx_PLL2_Config>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006440:	e015      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006446:	3328      	adds	r3, #40	@ 0x28
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f001 fa34 	bl	80078b8 <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006456:	e00a      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800645e:	e006      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006460:	bf00      	nop
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006464:	bf00      	nop
 8006466:	e002      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006468:	bf00      	nop
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800646c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10e      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006476:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006482:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006486:	4a02      	ldr	r2, [pc, #8]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800648e:	bf00      	nop
 8006490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80064a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d037      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c6:	d00e      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064cc:	d816      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80064d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d6:	d111      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4bc4      	ldr	r3, [pc, #784]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	4ac3      	ldr	r2, [pc, #780]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064e4:	e00f      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	3308      	adds	r3, #8
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f930 	bl	8007754 <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064fa:	e004      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800650e:	4bb7      	ldr	r3, [pc, #732]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006512:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651c:	4ab3      	ldr	r2, [pc, #716]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800651e:	430b      	orrs	r3, r1
 8006520:	6513      	str	r3, [r2, #80]	@ 0x50
 8006522:	e003      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800653c:	2300      	movs	r3, #0
 800653e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006542:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d039      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006552:	2b03      	cmp	r3, #3
 8006554:	d81c      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006556:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006599 	.word	0x08006599
 8006560:	0800656d 	.word	0x0800656d
 8006564:	0800657b 	.word	0x0800657b
 8006568:	08006599 	.word	0x08006599
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4b9f      	ldr	r3, [pc, #636]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4a9e      	ldr	r2, [pc, #632]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006578:	e00f      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	3308      	adds	r3, #8
 8006580:	2102      	movs	r1, #2
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f8e6 	bl	8007754 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065a2:	4b92      	ldr	r3, [pc, #584]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	f023 0103 	bic.w	r1, r3, #3
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b0:	4a8e      	ldr	r2, [pc, #568]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80065cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065da:	460b      	mov	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	f000 8099 	beq.w	8006714 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065e2:	4b83      	ldr	r3, [pc, #524]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a82      	ldr	r2, [pc, #520]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ee:	f7fa ff55 	bl	800149c <HAL_GetTick>
 80065f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065f6:	e00b      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f8:	f7fa ff50 	bl	800149c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b64      	cmp	r3, #100	@ 0x64
 8006606:	d903      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800660e:	e005      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006610:	4b77      	ldr	r3, [pc, #476]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0ed      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800661c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006620:	2b00      	cmp	r3, #0
 8006622:	d173      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006624:	4b71      	ldr	r3, [pc, #452]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006626:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006630:	4053      	eors	r3, r2
 8006632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006636:	2b00      	cmp	r3, #0
 8006638:	d015      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800663a:	4b6c      	ldr	r3, [pc, #432]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006642:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006646:	4b69      	ldr	r3, [pc, #420]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664a:	4a68      	ldr	r2, [pc, #416]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006650:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006652:	4b66      	ldr	r3, [pc, #408]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006656:	4a65      	ldr	r2, [pc, #404]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800665c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800665e:	4a63      	ldr	r2, [pc, #396]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006664:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800666e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006672:	d118      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fa ff12 	bl	800149c <HAL_GetTick>
 8006678:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800667c:	e00d      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fa ff0d 	bl	800149c <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006688:	1ad2      	subs	r2, r2, r3
 800668a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800668e:	429a      	cmp	r2, r3
 8006690:	d903      	bls.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006698:	e005      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800669a:	4b54      	ldr	r3, [pc, #336]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0eb      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80066a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d129      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066be:	d10e      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x846>
 80066c0:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066d0:	091a      	lsrs	r2, r3, #4
 80066d2:	4b48      	ldr	r3, [pc, #288]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	4a45      	ldr	r2, [pc, #276]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6113      	str	r3, [r2, #16]
 80066dc:	e005      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 80066de:	4b43      	ldr	r3, [pc, #268]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	4a42      	ldr	r2, [pc, #264]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066e8:	6113      	str	r3, [r2, #16]
 80066ea:	4b40      	ldr	r3, [pc, #256]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fa:	4a3c      	ldr	r2, [pc, #240]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006706:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 0301 	and.w	r3, r2, #1
 8006720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800672a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	f000 808f 	beq.w	8006854 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800673c:	2b28      	cmp	r3, #40	@ 0x28
 800673e:	d871      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006740:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800682d 	.word	0x0800682d
 800674c:	08006825 	.word	0x08006825
 8006750:	08006825 	.word	0x08006825
 8006754:	08006825 	.word	0x08006825
 8006758:	08006825 	.word	0x08006825
 800675c:	08006825 	.word	0x08006825
 8006760:	08006825 	.word	0x08006825
 8006764:	08006825 	.word	0x08006825
 8006768:	080067f9 	.word	0x080067f9
 800676c:	08006825 	.word	0x08006825
 8006770:	08006825 	.word	0x08006825
 8006774:	08006825 	.word	0x08006825
 8006778:	08006825 	.word	0x08006825
 800677c:	08006825 	.word	0x08006825
 8006780:	08006825 	.word	0x08006825
 8006784:	08006825 	.word	0x08006825
 8006788:	0800680f 	.word	0x0800680f
 800678c:	08006825 	.word	0x08006825
 8006790:	08006825 	.word	0x08006825
 8006794:	08006825 	.word	0x08006825
 8006798:	08006825 	.word	0x08006825
 800679c:	08006825 	.word	0x08006825
 80067a0:	08006825 	.word	0x08006825
 80067a4:	08006825 	.word	0x08006825
 80067a8:	0800682d 	.word	0x0800682d
 80067ac:	08006825 	.word	0x08006825
 80067b0:	08006825 	.word	0x08006825
 80067b4:	08006825 	.word	0x08006825
 80067b8:	08006825 	.word	0x08006825
 80067bc:	08006825 	.word	0x08006825
 80067c0:	08006825 	.word	0x08006825
 80067c4:	08006825 	.word	0x08006825
 80067c8:	0800682d 	.word	0x0800682d
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006825 	.word	0x08006825
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006825 	.word	0x08006825
 80067dc:	08006825 	.word	0x08006825
 80067e0:	08006825 	.word	0x08006825
 80067e4:	08006825 	.word	0x08006825
 80067e8:	0800682d 	.word	0x0800682d
 80067ec:	58024400 	.word	0x58024400
 80067f0:	58024800 	.word	0x58024800
 80067f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	3308      	adds	r3, #8
 80067fe:	2101      	movs	r1, #1
 8006800:	4618      	mov	r0, r3
 8006802:	f000 ffa7 	bl	8007754 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800680c:	e00f      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	3328      	adds	r3, #40	@ 0x28
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f84e 	bl	80078b8 <RCCEx_PLL3_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006822:	e004      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800682a:	e000      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800682c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006836:	4bbf      	ldr	r3, [pc, #764]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006844:	4abb      	ldr	r2, [pc, #748]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006846:	430b      	orrs	r3, r1
 8006848:	6553      	str	r3, [r2, #84]	@ 0x54
 800684a:	e003      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f002 0302 	and.w	r3, r2, #2
 8006860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800686a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d041      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800687a:	2b05      	cmp	r3, #5
 800687c:	d824      	bhi.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068d1 	.word	0x080068d1
 8006888:	0800689d 	.word	0x0800689d
 800688c:	080068b3 	.word	0x080068b3
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	3308      	adds	r3, #8
 80068a2:	2101      	movs	r1, #1
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 ff55 	bl	8007754 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068b0:	e00f      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b6:	3328      	adds	r3, #40	@ 0x28
 80068b8:	2101      	movs	r1, #1
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fffc 	bl	80078b8 <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80068c6:	e004      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80068d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068da:	4b96      	ldr	r3, [pc, #600]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068de:	f023 0107 	bic.w	r1, r3, #7
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068e8:	4a92      	ldr	r2, [pc, #584]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 0304 	and.w	r3, r2, #4
 8006904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800690e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d044      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006920:	2b05      	cmp	r3, #5
 8006922:	d825      	bhi.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006924:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006979 	.word	0x08006979
 8006930:	08006945 	.word	0x08006945
 8006934:	0800695b 	.word	0x0800695b
 8006938:	08006979 	.word	0x08006979
 800693c:	08006979 	.word	0x08006979
 8006940:	08006979 	.word	0x08006979
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	3308      	adds	r3, #8
 800694a:	2101      	movs	r1, #1
 800694c:	4618      	mov	r0, r3
 800694e:	f000 ff01 	bl	8007754 <RCCEx_PLL2_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006958:	e00f      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	3328      	adds	r3, #40	@ 0x28
 8006960:	2101      	movs	r1, #1
 8006962:	4618      	mov	r0, r3
 8006964:	f000 ffa8 	bl	80078b8 <RCCEx_PLL3_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800696e:	e004      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006976:	e000      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006982:	4b6c      	ldr	r3, [pc, #432]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006986:	f023 0107 	bic.w	r1, r3, #7
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	4a68      	ldr	r2, [pc, #416]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006994:	430b      	orrs	r3, r1
 8006996:	6593      	str	r3, [r2, #88]	@ 0x58
 8006998:	e003      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800699e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f002 0320 	and.w	r3, r2, #32
 80069ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80069bc:	460b      	mov	r3, r1
 80069be:	4313      	orrs	r3, r2
 80069c0:	d055      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ce:	d033      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80069d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069d4:	d82c      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d02f      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e0:	d826      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069e6:	d02b      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80069e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069ec:	d820      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f2:	d012      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80069f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f8:	d81a      	bhi.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d022      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80069fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a02:	d115      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	3308      	adds	r3, #8
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fea1 	bl	8007754 <RCCEx_PLL2_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a18:	e015      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	3328      	adds	r3, #40	@ 0x28
 8006a20:	2102      	movs	r1, #2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 ff48 	bl	80078b8 <RCCEx_PLL3_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a2e:	e00a      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a36:	e006      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a38:	bf00      	nop
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a4e:	4b39      	ldr	r3, [pc, #228]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a5e:	4a35      	ldr	r2, [pc, #212]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a64:	e003      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d058      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a96:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a9a:	d033      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006a9c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006aa0:	d82c      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa6:	d02f      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aac:	d826      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006aae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ab2:	d02b      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006ab4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ab8:	d820      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006abe:	d012      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ac4:	d81a      	bhi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d022      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ace:	d115      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fe3b 	bl	8007754 <RCCEx_PLL2_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ae4:	e015      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aea:	3328      	adds	r3, #40	@ 0x28
 8006aec:	2102      	movs	r1, #2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fee2 	bl	80078b8 <RCCEx_PLL3_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006afa:	e00a      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b02:	e006      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b04:	bf00      	nop
 8006b06:	e004      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10e      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b1a:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2a:	4a02      	ldr	r2, [pc, #8]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b30:	e006      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006b32:	bf00      	nop
 8006b34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b50:	2300      	movs	r3, #0
 8006b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	d055      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b6c:	d033      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006b6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b72:	d82c      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b78:	d02f      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7e:	d826      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b84:	d02b      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006b86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b8a:	d820      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b90:	d012      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b96:	d81a      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d022      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba0:	d115      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fdd2 	bl	8007754 <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e015      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	3328      	adds	r3, #40	@ 0x28
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fe79 	bl	80078b8 <RCCEx_PLL3_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e00a      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e004      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bda:	bf00      	nop
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bec:	4ba0      	ldr	r3, [pc, #640]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bfc:	4a9c      	ldr	r2, [pc, #624]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f002 0308 	and.w	r3, r2, #8
 8006c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d01e      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	3328      	adds	r3, #40	@ 0x28
 8006c40:	2102      	movs	r1, #2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fe38 	bl	80078b8 <RCCEx_PLL3_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c54:	4b86      	ldr	r3, [pc, #536]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c64:	4a82      	ldr	r2, [pc, #520]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c66:	430b      	orrs	r3, r1
 8006c68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f002 0310 	and.w	r3, r2, #16
 8006c76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c80:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d01e      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c96:	d10c      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9c:	3328      	adds	r3, #40	@ 0x28
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fe09 	bl	80078b8 <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d03e      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf0:	d022      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf6:	d81b      	bhi.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d00:	d00b      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006d02:	e015      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fd21 	bl	8007754 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d18:	e00f      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	3328      	adds	r3, #40	@ 0x28
 8006d20:	2102      	movs	r1, #2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fdc8 	bl	80078b8 <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d2e:	e004      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10b      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d42:	4b4b      	ldr	r3, [pc, #300]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d52:	4a47      	ldr	r2, [pc, #284]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d70:	2300      	movs	r3, #0
 8006d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d03b      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d8a:	d01f      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d90:	d818      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d003      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d9c:	d007      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006d9e:	e011      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da0:	4b33      	ldr	r3, [pc, #204]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a32      	ldr	r2, [pc, #200]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006dac:	e00f      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	3328      	adds	r3, #40	@ 0x28
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fd7e 	bl	80078b8 <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dca:	e000      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dd6:	4b26      	ldr	r3, [pc, #152]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de6:	4a22      	ldr	r2, [pc, #136]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dec:	e003      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e04:	2300      	movs	r3, #0
 8006e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d034      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d007      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006e22:	e011      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e24:	4b12      	ldr	r3, [pc, #72]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	4a11      	ldr	r2, [pc, #68]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e30:	e00e      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	3308      	adds	r3, #8
 8006e38:	2102      	movs	r1, #2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fc8a 	bl	8007754 <RCCEx_PLL2_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e46:	e003      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10d      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e58:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e66:	4a02      	ldr	r2, [pc, #8]	@ (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e6c:	e006      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006e6e:	bf00      	nop
 8006e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	d00c      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	3328      	adds	r3, #40	@ 0x28
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fd09 	bl	80078b8 <RCCEx_PLL3_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	d036      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ed8:	d018      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ede:	d811      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee4:	d014      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eea:	d80b      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d011      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef6:	4bb7      	ldr	r3, [pc, #732]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4ab6      	ldr	r2, [pc, #728]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f02:	e008      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f1e:	4bad      	ldr	r3, [pc, #692]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f2c:	4aa9      	ldr	r2, [pc, #676]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f32:	e003      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d009      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f58:	4b9e      	ldr	r3, [pc, #632]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f66:	4a9b      	ldr	r2, [pc, #620]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f88:	4b92      	ldr	r3, [pc, #584]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f96:	4a8f      	ldr	r2, [pc, #572]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006faa:	2300      	movs	r3, #0
 8006fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fb8:	4b86      	ldr	r3, [pc, #536]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4a85      	ldr	r2, [pc, #532]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fc2:	6113      	str	r3, [r2, #16]
 8006fc4:	4b83      	ldr	r3, [pc, #524]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fc6:	6919      	ldr	r1, [r3, #16]
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fd0:	4a80      	ldr	r2, [pc, #512]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fe8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ff2:	4b78      	ldr	r3, [pc, #480]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007000:	4a74      	ldr	r2, [pc, #464]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007002:	430b      	orrs	r3, r1
 8007004:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007012:	633b      	str	r3, [r7, #48]	@ 0x30
 8007014:	2300      	movs	r3, #0
 8007016:	637b      	str	r3, [r7, #52]	@ 0x34
 8007018:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800701c:	460b      	mov	r3, r1
 800701e:	4313      	orrs	r3, r2
 8007020:	d00a      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007022:	4b6c      	ldr	r3, [pc, #432]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007026:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007032:	4a68      	ldr	r2, [pc, #416]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007034:	430b      	orrs	r3, r1
 8007036:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	2100      	movs	r1, #0
 8007042:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800704a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d011      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007058:	3308      	adds	r3, #8
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fb79 	bl	8007754 <RCCEx_PLL2_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	2100      	movs	r1, #0
 8007082:	6239      	str	r1, [r7, #32]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
 800708a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800708e:	460b      	mov	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	d011      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	3308      	adds	r3, #8
 800709a:	2101      	movs	r1, #1
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fb59 	bl	8007754 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	2100      	movs	r1, #0
 80070c2:	61b9      	str	r1, [r7, #24]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80070ce:	460b      	mov	r3, r1
 80070d0:	4313      	orrs	r3, r2
 80070d2:	d011      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	3308      	adds	r3, #8
 80070da:	2102      	movs	r1, #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fb39 	bl	8007754 <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	2100      	movs	r1, #0
 8007102:	6139      	str	r1, [r7, #16]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d011      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	3328      	adds	r3, #40	@ 0x28
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fbcb 	bl	80078b8 <RCCEx_PLL3_Config>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	2100      	movs	r1, #0
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	d011      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	3328      	adds	r3, #40	@ 0x28
 800715a:	2101      	movs	r1, #1
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fbab 	bl	80078b8 <RCCEx_PLL3_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	2100      	movs	r1, #0
 8007182:	6039      	str	r1, [r7, #0]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800718e:	460b      	mov	r3, r1
 8007190:	4313      	orrs	r3, r2
 8007192:	d011      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007198:	3328      	adds	r3, #40	@ 0x28
 800719a:	2102      	movs	r1, #2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fb8b 	bl	80078b8 <RCCEx_PLL3_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80071a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80071b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80071cc:	46bd      	mov	sp, r7
 80071ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071d2:	bf00      	nop
 80071d4:	58024400 	.word	0x58024400

080071d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071dc:	f7fe fe00 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	4904      	ldr	r1, [pc, #16]	@ (8007200 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071ee:	5ccb      	ldrb	r3, [r1, r3]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	58024400 	.word	0x58024400
 8007200:	0800b35c 	.word	0x0800b35c

08007204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	@ 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720c:	4ba1      	ldr	r3, [pc, #644]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007216:	4b9f      	ldr	r3, [pc, #636]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	0b1b      	lsrs	r3, r3, #12
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007222:	4b9c      	ldr	r3, [pc, #624]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800722e:	4b99      	ldr	r3, [pc, #612]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8111 	beq.w	8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b02      	cmp	r3, #2
 8007256:	f000 8083 	beq.w	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f200 80a1 	bhi.w	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d056      	beq.n	800731c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800726e:	e099      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007270:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02d      	beq.n	80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800727c:	4b85      	ldr	r3, [pc, #532]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	4a84      	ldr	r2, [pc, #528]	@ (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072d6:	e087      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e065      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b59      	ldr	r3, [pc, #356]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e043      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b48      	ldr	r3, [pc, #288]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e021      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	edd7 6a07 	vldr	s13, [r7, #28]
 8007406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007416:	4b1f      	ldr	r3, [pc, #124]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007430:	edd7 6a07 	vldr	s13, [r7, #28]
 8007434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743c:	ee17 2a90 	vmov	r2, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007444:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800745a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746a:	ee17 2a90 	vmov	r2, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007472:	e008      	b.n	8007486 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	03d09000 	.word	0x03d09000
 800749c:	46000000 	.word	0x46000000
 80074a0:	4c742400 	.word	0x4c742400
 80074a4:	4a742400 	.word	0x4a742400
 80074a8:	4af42400 	.word	0x4af42400

080074ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	@ 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074b4:	4ba1      	ldr	r3, [pc, #644]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80074be:	4b9f      	ldr	r3, [pc, #636]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	0d1b      	lsrs	r3, r3, #20
 80074c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074ca:	4b9c      	ldr	r3, [pc, #624]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80074d6:	4b99      	ldr	r3, [pc, #612]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8111 	beq.w	800771c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	f000 8083 	beq.w	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b02      	cmp	r3, #2
 8007506:	f200 80a1 	bhi.w	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d056      	beq.n	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007516:	e099      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007518:	4b88      	ldr	r3, [pc, #544]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d02d      	beq.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007524:	4b85      	ldr	r3, [pc, #532]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	08db      	lsrs	r3, r3, #3
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	4a84      	ldr	r2, [pc, #528]	@ (8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
 8007534:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b7b      	ldr	r3, [pc, #492]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007562:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800757e:	e087      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b6a      	ldr	r3, [pc, #424]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c2:	e065      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b59      	ldr	r3, [pc, #356]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007606:	e043      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b48      	ldr	r3, [pc, #288]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a03 	vldr	s12, [r7, #12]
 800762e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764a:	e021      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800765a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765e:	4b37      	ldr	r3, [pc, #220]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007672:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800768e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007690:	4b2a      	ldr	r3, [pc, #168]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007694:	0a5b      	lsrs	r3, r3, #9
 8007696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b6:	ee17 2a90 	vmov	r2, s15
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80076be:	4b1f      	ldr	r3, [pc, #124]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e4:	ee17 2a90 	vmov	r2, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076ec:	4b13      	ldr	r3, [pc, #76]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007706:	edd7 6a07 	vldr	s13, [r7, #28]
 800770a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007712:	ee17 2a90 	vmov	r2, s15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800771a:	e008      	b.n	800772e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	bf00      	nop
 8007730:	3724      	adds	r7, #36	@ 0x24
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	03d09000 	.word	0x03d09000
 8007744:	46000000 	.word	0x46000000
 8007748:	4c742400 	.word	0x4c742400
 800774c:	4a742400 	.word	0x4a742400
 8007750:	4af42400 	.word	0x4af42400

08007754 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007762:	4b53      	ldr	r3, [pc, #332]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d101      	bne.n	8007772 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e099      	b.n	80078a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007772:	4b4f      	ldr	r3, [pc, #316]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a4e      	ldr	r2, [pc, #312]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007778:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800777c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7f9 fe8d 	bl	800149c <HAL_GetTick>
 8007782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007784:	e008      	b.n	8007798 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007786:	f7f9 fe89 	bl	800149c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e086      	b.n	80078a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007798:	4b45      	ldr	r3, [pc, #276]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f0      	bne.n	8007786 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077a4:	4b42      	ldr	r3, [pc, #264]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 80077a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	031b      	lsls	r3, r3, #12
 80077b2:	493f      	ldr	r1, [pc, #252]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	3b01      	subs	r3, #1
 80077be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	025b      	lsls	r3, r3, #9
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	061b      	lsls	r3, r3, #24
 80077e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077e8:	4931      	ldr	r1, [pc, #196]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077ee:	4b30      	ldr	r3, [pc, #192]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	492d      	ldr	r1, [pc, #180]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007800:	4b2b      	ldr	r3, [pc, #172]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	f023 0220 	bic.w	r2, r3, #32
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	4928      	ldr	r1, [pc, #160]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800780e:	4313      	orrs	r3, r2
 8007810:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007812:	4b27      	ldr	r3, [pc, #156]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	4a26      	ldr	r2, [pc, #152]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007818:	f023 0310 	bic.w	r3, r3, #16
 800781c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800781e:	4b24      	ldr	r3, [pc, #144]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007822:	4b24      	ldr	r3, [pc, #144]	@ (80078b4 <RCCEx_PLL2_Config+0x160>)
 8007824:	4013      	ands	r3, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	69d2      	ldr	r2, [r2, #28]
 800782a:	00d2      	lsls	r2, r2, #3
 800782c:	4920      	ldr	r1, [pc, #128]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007832:	4b1f      	ldr	r3, [pc, #124]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a1e      	ldr	r2, [pc, #120]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007838:	f043 0310 	orr.w	r3, r3, #16
 800783c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007844:	4b1a      	ldr	r3, [pc, #104]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	4a19      	ldr	r2, [pc, #100]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800784a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800784e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007850:	e00f      	b.n	8007872 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d106      	bne.n	8007866 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007858:	4b15      	ldr	r3, [pc, #84]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	4a14      	ldr	r2, [pc, #80]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800785e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007864:	e005      	b.n	8007872 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007866:	4b12      	ldr	r3, [pc, #72]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	4a11      	ldr	r2, [pc, #68]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800786c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007872:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0e      	ldr	r2, [pc, #56]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 8007878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800787c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787e:	f7f9 fe0d 	bl	800149c <HAL_GetTick>
 8007882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007884:	e008      	b.n	8007898 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007886:	f7f9 fe09 	bl	800149c <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e006      	b.n	80078a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007898:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <RCCEx_PLL2_Config+0x15c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	58024400 	.word	0x58024400
 80078b4:	ffff0007 	.word	0xffff0007

080078b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078c6:	4b53      	ldr	r3, [pc, #332]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d101      	bne.n	80078d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e099      	b.n	8007a0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a4e      	ldr	r2, [pc, #312]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7f9 fddb 	bl	800149c <HAL_GetTick>
 80078e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078e8:	e008      	b.n	80078fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078ea:	f7f9 fdd7 	bl	800149c <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e086      	b.n	8007a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078fc:	4b45      	ldr	r3, [pc, #276]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007908:	4b42      	ldr	r3, [pc, #264]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 800790a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	051b      	lsls	r3, r3, #20
 8007916:	493f      	ldr	r1, [pc, #252]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	628b      	str	r3, [r1, #40]	@ 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	3b01      	subs	r3, #1
 8007922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	025b      	lsls	r3, r3, #9
 800792e:	b29b      	uxth	r3, r3
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	3b01      	subs	r3, #1
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800794c:	4931      	ldr	r1, [pc, #196]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007952:	4b30      	ldr	r3, [pc, #192]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	492d      	ldr	r1, [pc, #180]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007960:	4313      	orrs	r3, r2
 8007962:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007964:	4b2b      	ldr	r3, [pc, #172]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	4928      	ldr	r1, [pc, #160]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007972:	4313      	orrs	r3, r2
 8007974:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007976:	4b27      	ldr	r3, [pc, #156]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797a:	4a26      	ldr	r2, [pc, #152]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 800797c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007980:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007982:	4b24      	ldr	r3, [pc, #144]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007986:	4b24      	ldr	r3, [pc, #144]	@ (8007a18 <RCCEx_PLL3_Config+0x160>)
 8007988:	4013      	ands	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69d2      	ldr	r2, [r2, #28]
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	4920      	ldr	r1, [pc, #128]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007992:	4313      	orrs	r3, r2
 8007994:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007996:	4b1f      	ldr	r3, [pc, #124]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 800799c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4a19      	ldr	r2, [pc, #100]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80079b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079b4:	e00f      	b.n	80079d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d106      	bne.n	80079ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80079bc:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4a14      	ldr	r2, [pc, #80]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80079c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079c8:	e005      	b.n	80079d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079ca:	4b12      	ldr	r3, [pc, #72]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	4a11      	ldr	r2, [pc, #68]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e2:	f7f9 fd5b 	bl	800149c <HAL_GetTick>
 80079e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079e8:	e008      	b.n	80079fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079ea:	f7f9 fd57 	bl	800149c <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e006      	b.n	8007a0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <RCCEx_PLL3_Config+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	ffff0007 	.word	0xffff0007

08007a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e042      	b.n	8007ab4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7f9 fbcf 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2224      	movs	r2, #36	@ 0x24
 8007a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fbdc 	bl	8009224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fd6d 	bl	800854c <UART_SetConfig>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e01b      	b.n	8007ab4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fc5b 	bl	8009368 <UART_CheckIdleState>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	@ 0x28
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d17b      	bne.n	8007bce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_UART_Transmit+0x26>
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e074      	b.n	8007bd0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2221      	movs	r2, #33	@ 0x21
 8007af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007af6:	f7f9 fcd1 	bl	800149c <HAL_GetTick>
 8007afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b14:	d108      	bne.n	8007b28 <HAL_UART_Transmit+0x6c>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	e003      	b.n	8007b30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b30:	e030      	b.n	8007b94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2180      	movs	r1, #128	@ 0x80
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 fcbd 	bl	80094bc <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e03d      	b.n	8007bd0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	e007      	b.n	8007b82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	781a      	ldrb	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1c8      	bne.n	8007b32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2140      	movs	r1, #64	@ 0x40
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 fc86 	bl	80094bc <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e006      	b.n	8007bd0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e000      	b.n	8007bd0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bce:	2302      	movs	r3, #2
  }
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3720      	adds	r7, #32
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b091      	sub	sp, #68	@ 0x44
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d178      	bne.n	8007ce2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_UART_Transmit_IT+0x24>
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e071      	b.n	8007ce4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	88fa      	ldrh	r2, [r7, #6]
 8007c0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2221      	movs	r2, #33	@ 0x21
 8007c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c34:	d12a      	bne.n	8007c8c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	d107      	bne.n	8007c50 <HAL_UART_Transmit_IT+0x78>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a29      	ldr	r2, [pc, #164]	@ (8007cf0 <HAL_UART_Transmit_IT+0x118>)
 8007c4c:	679a      	str	r2, [r3, #120]	@ 0x78
 8007c4e:	e002      	b.n	8007c56 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a28      	ldr	r2, [pc, #160]	@ (8007cf4 <HAL_UART_Transmit_IT+0x11c>)
 8007c54:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c76:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c78:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <HAL_UART_Transmit_IT+0x7e>
 8007c8a:	e028      	b.n	8007cde <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c94:	d107      	bne.n	8007ca6 <HAL_UART_Transmit_IT+0xce>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <HAL_UART_Transmit_IT+0x120>)
 8007ca2:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ca4:	e002      	b.n	8007cac <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a14      	ldr	r2, [pc, #80]	@ (8007cfc <HAL_UART_Transmit_IT+0x124>)
 8007caa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	69f9      	ldr	r1, [r7, #28]
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e6      	bne.n	8007cac <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3744      	adds	r7, #68	@ 0x44
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	08009ca1 	.word	0x08009ca1
 8007cf4:	08009bc1 	.word	0x08009bc1
 8007cf8:	08009aff 	.word	0x08009aff
 8007cfc:	08009a47 	.word	0x08009a47

08007d00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	@ 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d137      	bne.n	8007d88 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_UART_Receive_DMA+0x24>
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e030      	b.n	8007d8a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a18      	ldr	r2, [pc, #96]	@ (8007d94 <HAL_UART_Receive_DMA+0x94>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d01f      	beq.n	8007d78 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d018      	beq.n	8007d78 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	613b      	str	r3, [r7, #16]
   return(result);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	623b      	str	r3, [r7, #32]
 8007d66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	69f9      	ldr	r1, [r7, #28]
 8007d6a:	6a3a      	ldr	r2, [r7, #32]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f001 fc0a 	bl	8009598 <UART_Start_Receive_DMA>
 8007d84:	4603      	mov	r3, r0
 8007d86:	e000      	b.n	8007d8a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3728      	adds	r7, #40	@ 0x28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	58000c00 	.word	0x58000c00

08007d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007dc2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11b      	bne.n	8007e0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d015      	beq.n	8007e0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8377 	beq.w	80084f0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      }
      return;
 8007e0a:	e371      	b.n	80084f0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8123 	beq.w	800805c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8008050 <HAL_UART_IRQHandler+0x2b8>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007e26:	4b8b      	ldr	r3, [pc, #556]	@ (8008054 <HAL_UART_IRQHandler+0x2bc>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8116 	beq.w	800805c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d011      	beq.n	8007e60 <HAL_UART_IRQHandler+0xc8>
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d011      	beq.n	8007e90 <HAL_UART_IRQHandler+0xf8>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e86:	f043 0204 	orr.w	r2, r3, #4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x128>
 8007e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2204      	movs	r2, #4
 8007eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb6:	f043 0202 	orr.w	r2, r3, #2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d017      	beq.n	8007efc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ed8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007edc:	4b5c      	ldr	r3, [pc, #368]	@ (8008050 <HAL_UART_IRQHandler+0x2b8>)
 8007ede:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef2:	f043 0208 	orr.w	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d012      	beq.n	8007f2e <HAL_UART_IRQHandler+0x196>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 82dd 	beq.w	80084f4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d013      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f82:	2b40      	cmp	r3, #64	@ 0x40
 8007f84:	d005      	beq.n	8007f92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d054      	beq.n	800803c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fbe8 	bl	8009768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa2:	2b40      	cmp	r3, #64	@ 0x40
 8007fa4:	d146      	bne.n	8008034 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1d9      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d017      	beq.n	800802c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008002:	4a15      	ldr	r2, [pc, #84]	@ (8008058 <HAL_UART_IRQHandler+0x2c0>)
 8008004:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800c:	4618      	mov	r0, r3
 800800e:	f7fa fc55 	bl	80028bc <HAL_DMA_Abort_IT>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d019      	beq.n	800804c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008026:	4610      	mov	r0, r2
 8008028:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802a:	e00f      	b.n	800804c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fa77 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008032:	e00b      	b.n	800804c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fa73 	bl	8008520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803a:	e007      	b.n	800804c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa6f 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800804a:	e253      	b.n	80084f4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	bf00      	nop
    return;
 800804e:	e251      	b.n	80084f4 <HAL_UART_IRQHandler+0x75c>
 8008050:	10000001 	.word	0x10000001
 8008054:	04000120 	.word	0x04000120
 8008058:	08009a1b 	.word	0x08009a1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008060:	2b01      	cmp	r3, #1
 8008062:	f040 81e7 	bne.w	8008434 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 81e0 	beq.w	8008434 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 81d9 	beq.w	8008434 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2210      	movs	r2, #16
 8008088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008094:	2b40      	cmp	r3, #64	@ 0x40
 8008096:	f040 8151 	bne.w	800833c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a96      	ldr	r2, [pc, #600]	@ (80082fc <HAL_UART_IRQHandler+0x564>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d068      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a93      	ldr	r2, [pc, #588]	@ (8008300 <HAL_UART_IRQHandler+0x568>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d061      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a91      	ldr	r2, [pc, #580]	@ (8008304 <HAL_UART_IRQHandler+0x56c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d05a      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a8e      	ldr	r2, [pc, #568]	@ (8008308 <HAL_UART_IRQHandler+0x570>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d053      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a8c      	ldr	r2, [pc, #560]	@ (800830c <HAL_UART_IRQHandler+0x574>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d04c      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a89      	ldr	r2, [pc, #548]	@ (8008310 <HAL_UART_IRQHandler+0x578>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d045      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a87      	ldr	r2, [pc, #540]	@ (8008314 <HAL_UART_IRQHandler+0x57c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d03e      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a84      	ldr	r2, [pc, #528]	@ (8008318 <HAL_UART_IRQHandler+0x580>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d037      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a82      	ldr	r2, [pc, #520]	@ (800831c <HAL_UART_IRQHandler+0x584>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d030      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a7f      	ldr	r2, [pc, #508]	@ (8008320 <HAL_UART_IRQHandler+0x588>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d029      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a7d      	ldr	r2, [pc, #500]	@ (8008324 <HAL_UART_IRQHandler+0x58c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d022      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a7a      	ldr	r2, [pc, #488]	@ (8008328 <HAL_UART_IRQHandler+0x590>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01b      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a78      	ldr	r2, [pc, #480]	@ (800832c <HAL_UART_IRQHandler+0x594>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d014      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a75      	ldr	r2, [pc, #468]	@ (8008330 <HAL_UART_IRQHandler+0x598>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00d      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a73      	ldr	r2, [pc, #460]	@ (8008334 <HAL_UART_IRQHandler+0x59c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d006      	beq.n	800817a <HAL_UART_IRQHandler+0x3e2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a70      	ldr	r2, [pc, #448]	@ (8008338 <HAL_UART_IRQHandler+0x5a0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d106      	bne.n	8008188 <HAL_UART_IRQHandler+0x3f0>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	b29b      	uxth	r3, r3
 8008186:	e005      	b.n	8008194 <HAL_UART_IRQHandler+0x3fc>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 81ab 	beq.w	80084f8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ac:	429a      	cmp	r2, r3
 80081ae:	f080 81a3 	bcs.w	80084f8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081c8:	f000 8087 	beq.w	80082da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800820e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1da      	bne.n	80081cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3308      	adds	r3, #8
 8008236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800823a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800823e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008242:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800824c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e1      	bne.n	8008216 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008278:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800827c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e3      	bne.n	8008252 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e4      	bne.n	8008298 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f9 ffd3 	bl	8002280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f91d 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082fa:	e0fd      	b.n	80084f8 <HAL_UART_IRQHandler+0x760>
 80082fc:	40020010 	.word	0x40020010
 8008300:	40020028 	.word	0x40020028
 8008304:	40020040 	.word	0x40020040
 8008308:	40020058 	.word	0x40020058
 800830c:	40020070 	.word	0x40020070
 8008310:	40020088 	.word	0x40020088
 8008314:	400200a0 	.word	0x400200a0
 8008318:	400200b8 	.word	0x400200b8
 800831c:	40020410 	.word	0x40020410
 8008320:	40020428 	.word	0x40020428
 8008324:	40020440 	.word	0x40020440
 8008328:	40020458 	.word	0x40020458
 800832c:	40020470 	.word	0x40020470
 8008330:	40020488 	.word	0x40020488
 8008334:	400204a0 	.word	0x400204a0
 8008338:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008356:	b29b      	uxth	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 80cf 	beq.w	80084fc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800835e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 80ca 	beq.w	80084fc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800837c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800838a:	647b      	str	r3, [r7, #68]	@ 0x44
 800838c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008390:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e4      	bne.n	8008368 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3308      	adds	r3, #8
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	623b      	str	r3, [r7, #32]
   return(result);
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	4b55      	ldr	r3, [pc, #340]	@ (8008508 <HAL_UART_IRQHandler+0x770>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80083c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e3      	bne.n	800839e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	69b9      	ldr	r1, [r7, #24]
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	617b      	str	r3, [r7, #20]
   return(result);
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e4      	bne.n	80083ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f881 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008432:	e063      	b.n	80084fc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <HAL_UART_IRQHandler+0x6c6>
 8008440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fcc2 	bl	8009de0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800845c:	e051      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800845e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d014      	beq.n	8008494 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800846a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800847a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008486:	2b00      	cmp	r3, #0
 8008488:	d03a      	beq.n	8008500 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
    }
    return;
 8008492:	e035      	b.n	8008500 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_UART_IRQHandler+0x71c>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 fc6c 	bl	8009d8a <UART_EndTransmit_IT>
    return;
 80084b2:	e026      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_UART_IRQHandler+0x73c>
 80084c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fc9b 	bl	8009e08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084d2:	e016      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d010      	beq.n	8008502 <HAL_UART_IRQHandler+0x76a>
 80084e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da0c      	bge.n	8008502 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 fc83 	bl	8009df4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ee:	e008      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
      return;
 80084f0:	bf00      	nop
 80084f2:	e006      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
    return;
 80084f4:	bf00      	nop
 80084f6:	e004      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
      return;
 80084f8:	bf00      	nop
 80084fa:	e002      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
      return;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <HAL_UART_IRQHandler+0x76a>
    return;
 8008500:	bf00      	nop
  }
}
 8008502:	37e8      	adds	r7, #232	@ 0xe8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	effffffe 	.word	0xeffffffe

0800850c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800854c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008550:	b092      	sub	sp, #72	@ 0x48
 8008552:	af00      	add	r7, sp, #0
 8008554:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	431a      	orrs	r2, r3
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	431a      	orrs	r2, r3
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	4313      	orrs	r3, r2
 8008572:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4bbe      	ldr	r3, [pc, #760]	@ (8008874 <UART_SetConfig+0x328>)
 800857c:	4013      	ands	r3, r2
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008584:	430b      	orrs	r3, r1
 8008586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4ab3      	ldr	r2, [pc, #716]	@ (8008878 <UART_SetConfig+0x32c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d004      	beq.n	80085b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b4:	4313      	orrs	r3, r2
 80085b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	4baf      	ldr	r3, [pc, #700]	@ (800887c <UART_SetConfig+0x330>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085c8:	430b      	orrs	r3, r1
 80085ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d2:	f023 010f 	bic.w	r1, r3, #15
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4aa6      	ldr	r2, [pc, #664]	@ (8008880 <UART_SetConfig+0x334>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d177      	bne.n	80086dc <UART_SetConfig+0x190>
 80085ec:	4ba5      	ldr	r3, [pc, #660]	@ (8008884 <UART_SetConfig+0x338>)
 80085ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085f4:	2b28      	cmp	r3, #40	@ 0x28
 80085f6:	d86d      	bhi.n	80086d4 <UART_SetConfig+0x188>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <UART_SetConfig+0xb4>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	080086a5 	.word	0x080086a5
 8008604:	080086d5 	.word	0x080086d5
 8008608:	080086d5 	.word	0x080086d5
 800860c:	080086d5 	.word	0x080086d5
 8008610:	080086d5 	.word	0x080086d5
 8008614:	080086d5 	.word	0x080086d5
 8008618:	080086d5 	.word	0x080086d5
 800861c:	080086d5 	.word	0x080086d5
 8008620:	080086ad 	.word	0x080086ad
 8008624:	080086d5 	.word	0x080086d5
 8008628:	080086d5 	.word	0x080086d5
 800862c:	080086d5 	.word	0x080086d5
 8008630:	080086d5 	.word	0x080086d5
 8008634:	080086d5 	.word	0x080086d5
 8008638:	080086d5 	.word	0x080086d5
 800863c:	080086d5 	.word	0x080086d5
 8008640:	080086b5 	.word	0x080086b5
 8008644:	080086d5 	.word	0x080086d5
 8008648:	080086d5 	.word	0x080086d5
 800864c:	080086d5 	.word	0x080086d5
 8008650:	080086d5 	.word	0x080086d5
 8008654:	080086d5 	.word	0x080086d5
 8008658:	080086d5 	.word	0x080086d5
 800865c:	080086d5 	.word	0x080086d5
 8008660:	080086bd 	.word	0x080086bd
 8008664:	080086d5 	.word	0x080086d5
 8008668:	080086d5 	.word	0x080086d5
 800866c:	080086d5 	.word	0x080086d5
 8008670:	080086d5 	.word	0x080086d5
 8008674:	080086d5 	.word	0x080086d5
 8008678:	080086d5 	.word	0x080086d5
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086c5 	.word	0x080086c5
 8008684:	080086d5 	.word	0x080086d5
 8008688:	080086d5 	.word	0x080086d5
 800868c:	080086d5 	.word	0x080086d5
 8008690:	080086d5 	.word	0x080086d5
 8008694:	080086d5 	.word	0x080086d5
 8008698:	080086d5 	.word	0x080086d5
 800869c:	080086d5 	.word	0x080086d5
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e326      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e322      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e31e      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e31a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086c4:	2320      	movs	r3, #32
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e316      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086cc:	2340      	movs	r3, #64	@ 0x40
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e312      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e30e      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a69      	ldr	r2, [pc, #420]	@ (8008888 <UART_SetConfig+0x33c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d130      	bne.n	8008748 <UART_SetConfig+0x1fc>
 80086e6:	4b67      	ldr	r3, [pc, #412]	@ (8008884 <UART_SetConfig+0x338>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d826      	bhi.n	8008740 <UART_SetConfig+0x1f4>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x1ac>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008719 	.word	0x08008719
 8008700:	08008721 	.word	0x08008721
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e2f0      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e2ec      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e2e8      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e2e4      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008730:	2320      	movs	r3, #32
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e2e0      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008738:	2340      	movs	r3, #64	@ 0x40
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e2dc      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008740:	2380      	movs	r3, #128	@ 0x80
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e2d8      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a4f      	ldr	r2, [pc, #316]	@ (800888c <UART_SetConfig+0x340>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d130      	bne.n	80087b4 <UART_SetConfig+0x268>
 8008752:	4b4c      	ldr	r3, [pc, #304]	@ (8008884 <UART_SetConfig+0x338>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b05      	cmp	r3, #5
 800875c:	d826      	bhi.n	80087ac <UART_SetConfig+0x260>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0x218>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	0800877d 	.word	0x0800877d
 8008768:	08008785 	.word	0x08008785
 800876c:	0800878d 	.word	0x0800878d
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2300      	movs	r3, #0
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e2ba      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e2b6      	b.n	8008cfa <UART_SetConfig+0x7ae>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e2b2      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e2ae      	b.n	8008cfa <UART_SetConfig+0x7ae>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e2aa      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80087a4:	2340      	movs	r3, #64	@ 0x40
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e2a6      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80087ac:	2380      	movs	r3, #128	@ 0x80
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e2a2      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a35      	ldr	r2, [pc, #212]	@ (8008890 <UART_SetConfig+0x344>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d130      	bne.n	8008820 <UART_SetConfig+0x2d4>
 80087be:	4b31      	ldr	r3, [pc, #196]	@ (8008884 <UART_SetConfig+0x338>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d826      	bhi.n	8008818 <UART_SetConfig+0x2cc>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <UART_SetConfig+0x284>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008809 	.word	0x08008809
 80087e4:	08008811 	.word	0x08008811
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e284      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e280      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e27c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e278      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008808:	2320      	movs	r3, #32
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e274      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008810:	2340      	movs	r3, #64	@ 0x40
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e270      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008818:	2380      	movs	r3, #128	@ 0x80
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e26c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1b      	ldr	r2, [pc, #108]	@ (8008894 <UART_SetConfig+0x348>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d142      	bne.n	80088b0 <UART_SetConfig+0x364>
 800882a:	4b16      	ldr	r3, [pc, #88]	@ (8008884 <UART_SetConfig+0x338>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b05      	cmp	r3, #5
 8008834:	d838      	bhi.n	80088a8 <UART_SetConfig+0x35c>
 8008836:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <UART_SetConfig+0x2f0>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008855 	.word	0x08008855
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008865 	.word	0x08008865
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008899 	.word	0x08008899
 8008850:	080088a1 	.word	0x080088a1
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e24e      	b.n	8008cfa <UART_SetConfig+0x7ae>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e24a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e246      	b.n	8008cfa <UART_SetConfig+0x7ae>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e242      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008874:	cfff69f3 	.word	0xcfff69f3
 8008878:	58000c00 	.word	0x58000c00
 800887c:	11fff4ff 	.word	0x11fff4ff
 8008880:	40011000 	.word	0x40011000
 8008884:	58024400 	.word	0x58024400
 8008888:	40004400 	.word	0x40004400
 800888c:	40004800 	.word	0x40004800
 8008890:	40004c00 	.word	0x40004c00
 8008894:	40005000 	.word	0x40005000
 8008898:	2320      	movs	r3, #32
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e22c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80088a0:	2340      	movs	r3, #64	@ 0x40
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e228      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e224      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4ab1      	ldr	r2, [pc, #708]	@ (8008b7c <UART_SetConfig+0x630>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d176      	bne.n	80089a8 <UART_SetConfig+0x45c>
 80088ba:	4bb1      	ldr	r3, [pc, #708]	@ (8008b80 <UART_SetConfig+0x634>)
 80088bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088c2:	2b28      	cmp	r3, #40	@ 0x28
 80088c4:	d86c      	bhi.n	80089a0 <UART_SetConfig+0x454>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <UART_SetConfig+0x380>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008971 	.word	0x08008971
 80088d0:	080089a1 	.word	0x080089a1
 80088d4:	080089a1 	.word	0x080089a1
 80088d8:	080089a1 	.word	0x080089a1
 80088dc:	080089a1 	.word	0x080089a1
 80088e0:	080089a1 	.word	0x080089a1
 80088e4:	080089a1 	.word	0x080089a1
 80088e8:	080089a1 	.word	0x080089a1
 80088ec:	08008979 	.word	0x08008979
 80088f0:	080089a1 	.word	0x080089a1
 80088f4:	080089a1 	.word	0x080089a1
 80088f8:	080089a1 	.word	0x080089a1
 80088fc:	080089a1 	.word	0x080089a1
 8008900:	080089a1 	.word	0x080089a1
 8008904:	080089a1 	.word	0x080089a1
 8008908:	080089a1 	.word	0x080089a1
 800890c:	08008981 	.word	0x08008981
 8008910:	080089a1 	.word	0x080089a1
 8008914:	080089a1 	.word	0x080089a1
 8008918:	080089a1 	.word	0x080089a1
 800891c:	080089a1 	.word	0x080089a1
 8008920:	080089a1 	.word	0x080089a1
 8008924:	080089a1 	.word	0x080089a1
 8008928:	080089a1 	.word	0x080089a1
 800892c:	08008989 	.word	0x08008989
 8008930:	080089a1 	.word	0x080089a1
 8008934:	080089a1 	.word	0x080089a1
 8008938:	080089a1 	.word	0x080089a1
 800893c:	080089a1 	.word	0x080089a1
 8008940:	080089a1 	.word	0x080089a1
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089a1 	.word	0x080089a1
 800894c:	08008991 	.word	0x08008991
 8008950:	080089a1 	.word	0x080089a1
 8008954:	080089a1 	.word	0x080089a1
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089a1 	.word	0x080089a1
 8008960:	080089a1 	.word	0x080089a1
 8008964:	080089a1 	.word	0x080089a1
 8008968:	080089a1 	.word	0x080089a1
 800896c:	08008999 	.word	0x08008999
 8008970:	2301      	movs	r3, #1
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e1c0      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e1bc      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e1b8      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e1b4      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e1b0      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e1ac      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e1a8      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a75      	ldr	r2, [pc, #468]	@ (8008b84 <UART_SetConfig+0x638>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d130      	bne.n	8008a14 <UART_SetConfig+0x4c8>
 80089b2:	4b73      	ldr	r3, [pc, #460]	@ (8008b80 <UART_SetConfig+0x634>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d826      	bhi.n	8008a0c <UART_SetConfig+0x4c0>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x478>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e18a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e186      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e182      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e17e      	b.n	8008cfa <UART_SetConfig+0x7ae>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e17a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e176      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e172      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a5b      	ldr	r2, [pc, #364]	@ (8008b88 <UART_SetConfig+0x63c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x534>
 8008a1e:	4b58      	ldr	r3, [pc, #352]	@ (8008b80 <UART_SetConfig+0x634>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x52c>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x4e4>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e154      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e150      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e14c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e148      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e144      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e140      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e13c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a41      	ldr	r2, [pc, #260]	@ (8008b8c <UART_SetConfig+0x640>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	f040 8082 	bne.w	8008b90 <UART_SetConfig+0x644>
 8008a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b80 <UART_SetConfig+0x634>)
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a94:	2b28      	cmp	r3, #40	@ 0x28
 8008a96:	d86d      	bhi.n	8008b74 <UART_SetConfig+0x628>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <UART_SetConfig+0x554>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008b45 	.word	0x08008b45
 8008aa4:	08008b75 	.word	0x08008b75
 8008aa8:	08008b75 	.word	0x08008b75
 8008aac:	08008b75 	.word	0x08008b75
 8008ab0:	08008b75 	.word	0x08008b75
 8008ab4:	08008b75 	.word	0x08008b75
 8008ab8:	08008b75 	.word	0x08008b75
 8008abc:	08008b75 	.word	0x08008b75
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b75 	.word	0x08008b75
 8008ac8:	08008b75 	.word	0x08008b75
 8008acc:	08008b75 	.word	0x08008b75
 8008ad0:	08008b75 	.word	0x08008b75
 8008ad4:	08008b75 	.word	0x08008b75
 8008ad8:	08008b75 	.word	0x08008b75
 8008adc:	08008b75 	.word	0x08008b75
 8008ae0:	08008b55 	.word	0x08008b55
 8008ae4:	08008b75 	.word	0x08008b75
 8008ae8:	08008b75 	.word	0x08008b75
 8008aec:	08008b75 	.word	0x08008b75
 8008af0:	08008b75 	.word	0x08008b75
 8008af4:	08008b75 	.word	0x08008b75
 8008af8:	08008b75 	.word	0x08008b75
 8008afc:	08008b75 	.word	0x08008b75
 8008b00:	08008b5d 	.word	0x08008b5d
 8008b04:	08008b75 	.word	0x08008b75
 8008b08:	08008b75 	.word	0x08008b75
 8008b0c:	08008b75 	.word	0x08008b75
 8008b10:	08008b75 	.word	0x08008b75
 8008b14:	08008b75 	.word	0x08008b75
 8008b18:	08008b75 	.word	0x08008b75
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b65 	.word	0x08008b65
 8008b24:	08008b75 	.word	0x08008b75
 8008b28:	08008b75 	.word	0x08008b75
 8008b2c:	08008b75 	.word	0x08008b75
 8008b30:	08008b75 	.word	0x08008b75
 8008b34:	08008b75 	.word	0x08008b75
 8008b38:	08008b75 	.word	0x08008b75
 8008b3c:	08008b75 	.word	0x08008b75
 8008b40:	08008b6d 	.word	0x08008b6d
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4a:	e0d6      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b52:	e0d2      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5a:	e0ce      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b62:	e0ca      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b64:	2320      	movs	r3, #32
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e0c6      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b6c:	2340      	movs	r3, #64	@ 0x40
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e0c2      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b74:	2380      	movs	r3, #128	@ 0x80
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e0be      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008b7c:	40011400 	.word	0x40011400
 8008b80:	58024400 	.word	0x58024400
 8008b84:	40007800 	.word	0x40007800
 8008b88:	40007c00 	.word	0x40007c00
 8008b8c:	40011800 	.word	0x40011800
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4aad      	ldr	r2, [pc, #692]	@ (8008e4c <UART_SetConfig+0x900>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d176      	bne.n	8008c88 <UART_SetConfig+0x73c>
 8008b9a:	4bad      	ldr	r3, [pc, #692]	@ (8008e50 <UART_SetConfig+0x904>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba2:	2b28      	cmp	r3, #40	@ 0x28
 8008ba4:	d86c      	bhi.n	8008c80 <UART_SetConfig+0x734>
 8008ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bac <UART_SetConfig+0x660>)
 8008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bac:	08008c51 	.word	0x08008c51
 8008bb0:	08008c81 	.word	0x08008c81
 8008bb4:	08008c81 	.word	0x08008c81
 8008bb8:	08008c81 	.word	0x08008c81
 8008bbc:	08008c81 	.word	0x08008c81
 8008bc0:	08008c81 	.word	0x08008c81
 8008bc4:	08008c81 	.word	0x08008c81
 8008bc8:	08008c81 	.word	0x08008c81
 8008bcc:	08008c59 	.word	0x08008c59
 8008bd0:	08008c81 	.word	0x08008c81
 8008bd4:	08008c81 	.word	0x08008c81
 8008bd8:	08008c81 	.word	0x08008c81
 8008bdc:	08008c81 	.word	0x08008c81
 8008be0:	08008c81 	.word	0x08008c81
 8008be4:	08008c81 	.word	0x08008c81
 8008be8:	08008c81 	.word	0x08008c81
 8008bec:	08008c61 	.word	0x08008c61
 8008bf0:	08008c81 	.word	0x08008c81
 8008bf4:	08008c81 	.word	0x08008c81
 8008bf8:	08008c81 	.word	0x08008c81
 8008bfc:	08008c81 	.word	0x08008c81
 8008c00:	08008c81 	.word	0x08008c81
 8008c04:	08008c81 	.word	0x08008c81
 8008c08:	08008c81 	.word	0x08008c81
 8008c0c:	08008c69 	.word	0x08008c69
 8008c10:	08008c81 	.word	0x08008c81
 8008c14:	08008c81 	.word	0x08008c81
 8008c18:	08008c81 	.word	0x08008c81
 8008c1c:	08008c81 	.word	0x08008c81
 8008c20:	08008c81 	.word	0x08008c81
 8008c24:	08008c81 	.word	0x08008c81
 8008c28:	08008c81 	.word	0x08008c81
 8008c2c:	08008c71 	.word	0x08008c71
 8008c30:	08008c81 	.word	0x08008c81
 8008c34:	08008c81 	.word	0x08008c81
 8008c38:	08008c81 	.word	0x08008c81
 8008c3c:	08008c81 	.word	0x08008c81
 8008c40:	08008c81 	.word	0x08008c81
 8008c44:	08008c81 	.word	0x08008c81
 8008c48:	08008c81 	.word	0x08008c81
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e050      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e04c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e048      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e044      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c70:	2320      	movs	r3, #32
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e040      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c78:	2340      	movs	r3, #64	@ 0x40
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e03c      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c80:	2380      	movs	r3, #128	@ 0x80
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e038      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a71      	ldr	r2, [pc, #452]	@ (8008e54 <UART_SetConfig+0x908>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d130      	bne.n	8008cf4 <UART_SetConfig+0x7a8>
 8008c92:	4b6f      	ldr	r3, [pc, #444]	@ (8008e50 <UART_SetConfig+0x904>)
 8008c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	d826      	bhi.n	8008cec <UART_SetConfig+0x7a0>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <UART_SetConfig+0x758>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008cbd 	.word	0x08008cbd
 8008ca8:	08008cc5 	.word	0x08008cc5
 8008cac:	08008ccd 	.word	0x08008ccd
 8008cb0:	08008cd5 	.word	0x08008cd5
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e01a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e016      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008ccc:	2308      	movs	r3, #8
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e012      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e00e      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e00a      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008ce4:	2340      	movs	r3, #64	@ 0x40
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e006      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008cec:	2380      	movs	r3, #128	@ 0x80
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e002      	b.n	8008cfa <UART_SetConfig+0x7ae>
 8008cf4:	2380      	movs	r3, #128	@ 0x80
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a55      	ldr	r2, [pc, #340]	@ (8008e54 <UART_SetConfig+0x908>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	f040 80f8 	bne.w	8008ef6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	dc46      	bgt.n	8008d9c <UART_SetConfig+0x850>
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	db75      	blt.n	8008dfe <UART_SetConfig+0x8b2>
 8008d12:	3b02      	subs	r3, #2
 8008d14:	2b1e      	cmp	r3, #30
 8008d16:	d872      	bhi.n	8008dfe <UART_SetConfig+0x8b2>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <UART_SetConfig+0x7d4>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008da3 	.word	0x08008da3
 8008d24:	08008dff 	.word	0x08008dff
 8008d28:	08008dab 	.word	0x08008dab
 8008d2c:	08008dff 	.word	0x08008dff
 8008d30:	08008dff 	.word	0x08008dff
 8008d34:	08008dff 	.word	0x08008dff
 8008d38:	08008dbb 	.word	0x08008dbb
 8008d3c:	08008dff 	.word	0x08008dff
 8008d40:	08008dff 	.word	0x08008dff
 8008d44:	08008dff 	.word	0x08008dff
 8008d48:	08008dff 	.word	0x08008dff
 8008d4c:	08008dff 	.word	0x08008dff
 8008d50:	08008dff 	.word	0x08008dff
 8008d54:	08008dff 	.word	0x08008dff
 8008d58:	08008dcb 	.word	0x08008dcb
 8008d5c:	08008dff 	.word	0x08008dff
 8008d60:	08008dff 	.word	0x08008dff
 8008d64:	08008dff 	.word	0x08008dff
 8008d68:	08008dff 	.word	0x08008dff
 8008d6c:	08008dff 	.word	0x08008dff
 8008d70:	08008dff 	.word	0x08008dff
 8008d74:	08008dff 	.word	0x08008dff
 8008d78:	08008dff 	.word	0x08008dff
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008dff 	.word	0x08008dff
 8008d84:	08008dff 	.word	0x08008dff
 8008d88:	08008dff 	.word	0x08008dff
 8008d8c:	08008dff 	.word	0x08008dff
 8008d90:	08008dff 	.word	0x08008dff
 8008d94:	08008dff 	.word	0x08008dff
 8008d98:	08008df1 	.word	0x08008df1
 8008d9c:	2b40      	cmp	r3, #64	@ 0x40
 8008d9e:	d02a      	beq.n	8008df6 <UART_SetConfig+0x8aa>
 8008da0:	e02d      	b.n	8008dfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008da2:	f7fe fa19 	bl	80071d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008da6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008da8:	e02f      	b.n	8008e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fa28 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db8:	e027      	b.n	8008e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dba:	f107 0318 	add.w	r3, r7, #24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fb74 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc8:	e01f      	b.n	8008e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dca:	4b21      	ldr	r3, [pc, #132]	@ (8008e50 <UART_SetConfig+0x904>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e50 <UART_SetConfig+0x904>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	08db      	lsrs	r3, r3, #3
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e58 <UART_SetConfig+0x90c>)
 8008de2:	fa22 f303 	lsr.w	r3, r2, r3
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008de8:	e00f      	b.n	8008e0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008dea:	4b1b      	ldr	r3, [pc, #108]	@ (8008e58 <UART_SetConfig+0x90c>)
 8008dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dee:	e00c      	b.n	8008e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008df0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e5c <UART_SetConfig+0x910>)
 8008df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df4:	e009      	b.n	8008e0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfc:	e005      	b.n	8008e0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 81ee 	beq.w	80091ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	4a12      	ldr	r2, [pc, #72]	@ (8008e60 <UART_SetConfig+0x914>)
 8008e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e24:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	4413      	add	r3, r2
 8008e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d305      	bcc.n	8008e42 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d910      	bls.n	8008e64 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e48:	e1d1      	b.n	80091ee <UART_SetConfig+0xca2>
 8008e4a:	bf00      	nop
 8008e4c:	40011c00 	.word	0x40011c00
 8008e50:	58024400 	.word	0x58024400
 8008e54:	58000c00 	.word	0x58000c00
 8008e58:	03d09000 	.word	0x03d09000
 8008e5c:	003d0900 	.word	0x003d0900
 8008e60:	0800b374 	.word	0x0800b374
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e66:	2200      	movs	r2, #0
 8008e68:	60bb      	str	r3, [r7, #8]
 8008e6a:	60fa      	str	r2, [r7, #12]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	4ac0      	ldr	r2, [pc, #768]	@ (8009174 <UART_SetConfig+0xc28>)
 8008e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2200      	movs	r2, #0
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e86:	f7f7 faa3 	bl	80003d0 <__aeabi_uldivmod>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4619      	mov	r1, r3
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	020b      	lsls	r3, r1, #8
 8008e9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ea0:	0202      	lsls	r2, r0, #8
 8008ea2:	6979      	ldr	r1, [r7, #20]
 8008ea4:	6849      	ldr	r1, [r1, #4]
 8008ea6:	0849      	lsrs	r1, r1, #1
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	4605      	mov	r5, r0
 8008eae:	eb12 0804 	adds.w	r8, r2, r4
 8008eb2:	eb43 0905 	adc.w	r9, r3, r5
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	469a      	mov	sl, r3
 8008ebe:	4693      	mov	fp, r2
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	465b      	mov	r3, fp
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	f7f7 fa82 	bl	80003d0 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eda:	d308      	bcc.n	8008eee <UART_SetConfig+0x9a2>
 8008edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee2:	d204      	bcs.n	8008eee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eea:	60da      	str	r2, [r3, #12]
 8008eec:	e17f      	b.n	80091ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ef4:	e17b      	b.n	80091ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008efe:	f040 80bd 	bne.w	800907c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008f02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	dc48      	bgt.n	8008f9c <UART_SetConfig+0xa50>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db7b      	blt.n	8009006 <UART_SetConfig+0xaba>
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	d879      	bhi.n	8009006 <UART_SetConfig+0xaba>
 8008f12:	a201      	add	r2, pc, #4	@ (adr r2, 8008f18 <UART_SetConfig+0x9cc>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008fa3 	.word	0x08008fa3
 8008f1c:	08008fab 	.word	0x08008fab
 8008f20:	08009007 	.word	0x08009007
 8008f24:	08009007 	.word	0x08009007
 8008f28:	08008fb3 	.word	0x08008fb3
 8008f2c:	08009007 	.word	0x08009007
 8008f30:	08009007 	.word	0x08009007
 8008f34:	08009007 	.word	0x08009007
 8008f38:	08008fc3 	.word	0x08008fc3
 8008f3c:	08009007 	.word	0x08009007
 8008f40:	08009007 	.word	0x08009007
 8008f44:	08009007 	.word	0x08009007
 8008f48:	08009007 	.word	0x08009007
 8008f4c:	08009007 	.word	0x08009007
 8008f50:	08009007 	.word	0x08009007
 8008f54:	08009007 	.word	0x08009007
 8008f58:	08008fd3 	.word	0x08008fd3
 8008f5c:	08009007 	.word	0x08009007
 8008f60:	08009007 	.word	0x08009007
 8008f64:	08009007 	.word	0x08009007
 8008f68:	08009007 	.word	0x08009007
 8008f6c:	08009007 	.word	0x08009007
 8008f70:	08009007 	.word	0x08009007
 8008f74:	08009007 	.word	0x08009007
 8008f78:	08009007 	.word	0x08009007
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	08009007 	.word	0x08009007
 8008f84:	08009007 	.word	0x08009007
 8008f88:	08009007 	.word	0x08009007
 8008f8c:	08009007 	.word	0x08009007
 8008f90:	08009007 	.word	0x08009007
 8008f94:	08009007 	.word	0x08009007
 8008f98:	08008ff9 	.word	0x08008ff9
 8008f9c:	2b40      	cmp	r3, #64	@ 0x40
 8008f9e:	d02e      	beq.n	8008ffe <UART_SetConfig+0xab2>
 8008fa0:	e031      	b.n	8009006 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fa2:	f7fc ff4d 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8008fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fa8:	e033      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008faa:	f7fc ff5f 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 8008fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb0:	e02f      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe f924 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc0:	e027      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc2:	f107 0318 	add.w	r3, r7, #24
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe fa70 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd0:	e01f      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd2:	4b69      	ldr	r3, [pc, #420]	@ (8009178 <UART_SetConfig+0xc2c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d009      	beq.n	8008ff2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fde:	4b66      	ldr	r3, [pc, #408]	@ (8009178 <UART_SetConfig+0xc2c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	08db      	lsrs	r3, r3, #3
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	4a64      	ldr	r2, [pc, #400]	@ (800917c <UART_SetConfig+0xc30>)
 8008fea:	fa22 f303 	lsr.w	r3, r2, r3
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ff0:	e00f      	b.n	8009012 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008ff2:	4b62      	ldr	r3, [pc, #392]	@ (800917c <UART_SetConfig+0xc30>)
 8008ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff6:	e00c      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ff8:	4b61      	ldr	r3, [pc, #388]	@ (8009180 <UART_SetConfig+0xc34>)
 8008ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffc:	e009      	b.n	8009012 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009004:	e005      	b.n	8009012 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80ea 	beq.w	80091ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	4a55      	ldr	r2, [pc, #340]	@ (8009174 <UART_SetConfig+0xc28>)
 8009020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009024:	461a      	mov	r2, r3
 8009026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009028:	fbb3 f3f2 	udiv	r3, r3, r2
 800902c:	005a      	lsls	r2, r3, #1
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	441a      	add	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	fbb2 f3f3 	udiv	r3, r2, r3
 800903e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009042:	2b0f      	cmp	r3, #15
 8009044:	d916      	bls.n	8009074 <UART_SetConfig+0xb28>
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904c:	d212      	bcs.n	8009074 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800904e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009050:	b29b      	uxth	r3, r3
 8009052:	f023 030f 	bic.w	r3, r3, #15
 8009056:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	b29a      	uxth	r2, r3
 8009064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009066:	4313      	orrs	r3, r2
 8009068:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009070:	60da      	str	r2, [r3, #12]
 8009072:	e0bc      	b.n	80091ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800907a:	e0b8      	b.n	80091ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800907c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009080:	2b20      	cmp	r3, #32
 8009082:	dc4b      	bgt.n	800911c <UART_SetConfig+0xbd0>
 8009084:	2b00      	cmp	r3, #0
 8009086:	f2c0 8087 	blt.w	8009198 <UART_SetConfig+0xc4c>
 800908a:	2b20      	cmp	r3, #32
 800908c:	f200 8084 	bhi.w	8009198 <UART_SetConfig+0xc4c>
 8009090:	a201      	add	r2, pc, #4	@ (adr r2, 8009098 <UART_SetConfig+0xb4c>)
 8009092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009096:	bf00      	nop
 8009098:	08009123 	.word	0x08009123
 800909c:	0800912b 	.word	0x0800912b
 80090a0:	08009199 	.word	0x08009199
 80090a4:	08009199 	.word	0x08009199
 80090a8:	08009133 	.word	0x08009133
 80090ac:	08009199 	.word	0x08009199
 80090b0:	08009199 	.word	0x08009199
 80090b4:	08009199 	.word	0x08009199
 80090b8:	08009143 	.word	0x08009143
 80090bc:	08009199 	.word	0x08009199
 80090c0:	08009199 	.word	0x08009199
 80090c4:	08009199 	.word	0x08009199
 80090c8:	08009199 	.word	0x08009199
 80090cc:	08009199 	.word	0x08009199
 80090d0:	08009199 	.word	0x08009199
 80090d4:	08009199 	.word	0x08009199
 80090d8:	08009153 	.word	0x08009153
 80090dc:	08009199 	.word	0x08009199
 80090e0:	08009199 	.word	0x08009199
 80090e4:	08009199 	.word	0x08009199
 80090e8:	08009199 	.word	0x08009199
 80090ec:	08009199 	.word	0x08009199
 80090f0:	08009199 	.word	0x08009199
 80090f4:	08009199 	.word	0x08009199
 80090f8:	08009199 	.word	0x08009199
 80090fc:	08009199 	.word	0x08009199
 8009100:	08009199 	.word	0x08009199
 8009104:	08009199 	.word	0x08009199
 8009108:	08009199 	.word	0x08009199
 800910c:	08009199 	.word	0x08009199
 8009110:	08009199 	.word	0x08009199
 8009114:	08009199 	.word	0x08009199
 8009118:	0800918b 	.word	0x0800918b
 800911c:	2b40      	cmp	r3, #64	@ 0x40
 800911e:	d037      	beq.n	8009190 <UART_SetConfig+0xc44>
 8009120:	e03a      	b.n	8009198 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009122:	f7fc fe8d 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8009126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009128:	e03c      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800912a:	f7fc fe9f 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 800912e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009130:	e038      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe f864 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009140:	e030      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009142:	f107 0318 	add.w	r3, r7, #24
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f9b0 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009150:	e028      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009152:	4b09      	ldr	r3, [pc, #36]	@ (8009178 <UART_SetConfig+0xc2c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b00      	cmp	r3, #0
 800915c:	d012      	beq.n	8009184 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800915e:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <UART_SetConfig+0xc2c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	08db      	lsrs	r3, r3, #3
 8009164:	f003 0303 	and.w	r3, r3, #3
 8009168:	4a04      	ldr	r2, [pc, #16]	@ (800917c <UART_SetConfig+0xc30>)
 800916a:	fa22 f303 	lsr.w	r3, r2, r3
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009170:	e018      	b.n	80091a4 <UART_SetConfig+0xc58>
 8009172:	bf00      	nop
 8009174:	0800b374 	.word	0x0800b374
 8009178:	58024400 	.word	0x58024400
 800917c:	03d09000 	.word	0x03d09000
 8009180:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009184:	4b24      	ldr	r3, [pc, #144]	@ (8009218 <UART_SetConfig+0xccc>)
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009188:	e00c      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800918a:	4b24      	ldr	r3, [pc, #144]	@ (800921c <UART_SetConfig+0xcd0>)
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918e:	e009      	b.n	80091a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009190:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009196:	e005      	b.n	80091a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091a2:	bf00      	nop
    }

    if (pclk != 0U)
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d021      	beq.n	80091ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009220 <UART_SetConfig+0xcd4>)
 80091b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b4:	461a      	mov	r2, r3
 80091b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	085b      	lsrs	r3, r3, #1
 80091c2:	441a      	add	r2, r3
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	2b0f      	cmp	r3, #15
 80091d2:	d909      	bls.n	80091e8 <UART_SetConfig+0xc9c>
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091da:	d205      	bcs.n	80091e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	b29a      	uxth	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	60da      	str	r2, [r3, #12]
 80091e6:	e002      	b.n	80091ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2200      	movs	r2, #0
 8009202:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2200      	movs	r2, #0
 8009208:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800920a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800920e:	4618      	mov	r0, r3
 8009210:	3748      	adds	r7, #72	@ 0x48
 8009212:	46bd      	mov	sp, r7
 8009214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009218:	03d09000 	.word	0x03d09000
 800921c:	003d0900 	.word	0x003d0900
 8009220:	0800b374 	.word	0x0800b374

08009224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	f003 0320 	and.w	r3, r3, #32
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01a      	beq.n	800933a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800931e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009322:	d10a      	bne.n	800933a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	605a      	str	r2, [r3, #4]
  }
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b098      	sub	sp, #96	@ 0x60
 800936c:	af02      	add	r7, sp, #8
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009378:	f7f8 f890 	bl	800149c <HAL_GetTick>
 800937c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0308 	and.w	r3, r3, #8
 8009388:	2b08      	cmp	r3, #8
 800938a:	d12f      	bne.n	80093ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800938c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009394:	2200      	movs	r2, #0
 8009396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f88e 	bl	80094bc <UART_WaitOnFlagUntilTimeout>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d022      	beq.n	80093ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e6      	bne.n	80093a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e063      	b.n	80094b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d149      	bne.n	800948e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009402:	2200      	movs	r2, #0
 8009404:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f857 	bl	80094bc <UART_WaitOnFlagUntilTimeout>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d03c      	beq.n	800948e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	623b      	str	r3, [r7, #32]
   return(result);
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009432:	633b      	str	r3, [r7, #48]	@ 0x30
 8009434:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e6      	bne.n	8009414 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	60fb      	str	r3, [r7, #12]
   return(result);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3308      	adds	r3, #8
 8009464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009466:	61fa      	str	r2, [r7, #28]
 8009468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	69b9      	ldr	r1, [r7, #24]
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	617b      	str	r3, [r7, #20]
   return(result);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e5      	bne.n	8009446 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e012      	b.n	80094b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3758      	adds	r7, #88	@ 0x58
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	603b      	str	r3, [r7, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094cc:	e04f      	b.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d4:	d04b      	beq.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d6:	f7f7 ffe1 	bl	800149c <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <UART_WaitOnFlagUntilTimeout+0x30>
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e04e      	b.n	800958e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d037      	beq.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b80      	cmp	r3, #128	@ 0x80
 8009502:	d034      	beq.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b40      	cmp	r3, #64	@ 0x40
 8009508:	d031      	beq.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b08      	cmp	r3, #8
 8009516:	d110      	bne.n	800953a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2208      	movs	r2, #8
 800951e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f921 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2208      	movs	r2, #8
 800952a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e029      	b.n	800958e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009548:	d111      	bne.n	800956e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f000 f907 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2220      	movs	r2, #32
 800955e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e00f      	b.n	800958e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4013      	ands	r3, r2
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	429a      	cmp	r2, r3
 800957c:	bf0c      	ite	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	2300      	movne	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	429a      	cmp	r2, r3
 800958a:	d0a0      	beq.n	80094ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b096      	sub	sp, #88	@ 0x58
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2222      	movs	r2, #34	@ 0x22
 80095c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d02d      	beq.n	800962a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d4:	4a40      	ldr	r2, [pc, #256]	@ (80096d8 <UART_Start_Receive_DMA+0x140>)
 80095d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095de:	4a3f      	ldr	r2, [pc, #252]	@ (80096dc <UART_Start_Receive_DMA+0x144>)
 80095e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e8:	4a3d      	ldr	r2, [pc, #244]	@ (80096e0 <UART_Start_Receive_DMA+0x148>)
 80095ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f2:	2200      	movs	r2, #0
 80095f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3324      	adds	r3, #36	@ 0x24
 8009602:	4619      	mov	r1, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009608:	461a      	mov	r2, r3
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	f7f8 fbce 	bl	8001dac <HAL_DMA_Start_IT>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d009      	beq.n	800962a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2210      	movs	r2, #16
 800961a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e051      	b.n	80096ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d018      	beq.n	8009664 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009646:	657b      	str	r3, [r7, #84]	@ 0x54
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009652:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800965e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e6      	bne.n	8009632 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	653b      	str	r3, [r7, #80]	@ 0x50
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009684:	637a      	str	r2, [r7, #52]	@ 0x34
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800968a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	613b      	str	r3, [r7, #16]
   return(result);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096b8:	623a      	str	r2, [r7, #32]
 80096ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	69f9      	ldr	r1, [r7, #28]
 80096be:	6a3a      	ldr	r2, [r7, #32]
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3758      	adds	r7, #88	@ 0x58
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	08009835 	.word	0x08009835
 80096dc:	0800995d 	.word	0x0800995d
 80096e0:	0800999b 	.word	0x0800999b

080096e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b08f      	sub	sp, #60	@ 0x3c
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800970c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e6      	bne.n	80096ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	60bb      	str	r3, [r7, #8]
   return(result);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009734:	633b      	str	r3, [r7, #48]	@ 0x30
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973e:	61ba      	str	r2, [r7, #24]
 8009740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6979      	ldr	r1, [r7, #20]
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	613b      	str	r3, [r7, #16]
   return(result);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e5      	bne.n	800971e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800975a:	bf00      	nop
 800975c:	373c      	adds	r7, #60	@ 0x3c
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b095      	sub	sp, #84	@ 0x54
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800978e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009790:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009830 <UART_EndRxTransfer+0xc8>)
 80097b6:	4013      	ands	r3, r2
 80097b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3308      	adds	r3, #8
 80097c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e5      	bne.n	80097a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d118      	bne.n	8009810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f023 0310 	bic.w	r3, r3, #16
 80097f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	461a      	mov	r2, r3
 80097fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097fc:	61bb      	str	r3, [r7, #24]
 80097fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	6979      	ldr	r1, [r7, #20]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	613b      	str	r3, [r7, #16]
   return(result);
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e6      	bne.n	80097de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009824:	bf00      	nop
 8009826:	3754      	adds	r7, #84	@ 0x54
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	effffffe 	.word	0xeffffffe

08009834 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b09c      	sub	sp, #112	@ 0x70
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009840:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800984a:	d071      	beq.n	8009930 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800984c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800984e:	2200      	movs	r2, #0
 8009850:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800986a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	461a      	mov	r2, r3
 8009870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e6      	bne.n	8009854 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009898:	f023 0301 	bic.w	r3, r3, #1
 800989c:	667b      	str	r3, [r7, #100]	@ 0x64
 800989e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80098a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e5      	bne.n	8009886 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	623b      	str	r3, [r7, #32]
   return(result);
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3308      	adds	r3, #8
 80098d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098da:	633a      	str	r2, [r7, #48]	@ 0x30
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e5      	bne.n	80098ba <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d118      	bne.n	8009930 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	60fb      	str	r3, [r7, #12]
   return(result);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0310 	bic.w	r3, r3, #16
 8009912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800991c:	61fb      	str	r3, [r7, #28]
 800991e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	69b9      	ldr	r1, [r7, #24]
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	617b      	str	r3, [r7, #20]
   return(result);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e6      	bne.n	80098fe <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009932:	2200      	movs	r2, #0
 8009934:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800993a:	2b01      	cmp	r3, #1
 800993c:	d107      	bne.n	800994e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800993e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009944:	4619      	mov	r1, r3
 8009946:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009948:	f7fe fdf4 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800994c:	e002      	b.n	8009954 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800994e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009950:	f000 fb68 	bl	800a024 <HAL_UART_RxCpltCallback>
}
 8009954:	bf00      	nop
 8009956:	3770      	adds	r7, #112	@ 0x70
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009968:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d109      	bne.n	800998c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7fe fdd5 	bl	8008534 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800998a:	e002      	b.n	8009992 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fe fdbd 	bl	800850c <HAL_UART_RxHalfCpltCallback>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c2:	2b80      	cmp	r3, #128	@ 0x80
 80099c4:	d109      	bne.n	80099da <UART_DMAError+0x40>
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b21      	cmp	r3, #33	@ 0x21
 80099ca:	d106      	bne.n	80099da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80099d4:	6978      	ldr	r0, [r7, #20]
 80099d6:	f7ff fe85 	bl	80096e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e4:	2b40      	cmp	r3, #64	@ 0x40
 80099e6:	d109      	bne.n	80099fc <UART_DMAError+0x62>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b22      	cmp	r3, #34	@ 0x22
 80099ec:	d106      	bne.n	80099fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80099f6:	6978      	ldr	r0, [r7, #20]
 80099f8:	f7ff feb6 	bl	8009768 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a02:	f043 0210 	orr.w	r2, r3, #16
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a0c:	6978      	ldr	r0, [r7, #20]
 8009a0e:	f7fe fd87 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a12:	bf00      	nop
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7fe fd71 	bl	8008520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b08f      	sub	sp, #60	@ 0x3c
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a54:	2b21      	cmp	r3, #33	@ 0x21
 8009a56:	d14c      	bne.n	8009af2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d132      	bne.n	8009aca <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e6      	bne.n	8009a64 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6979      	ldr	r1, [r7, #20]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009ac8:	e013      	b.n	8009af2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ace:	781a      	ldrb	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009af2:	bf00      	nop
 8009af4:	373c      	adds	r7, #60	@ 0x3c
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b091      	sub	sp, #68	@ 0x44
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b0c:	2b21      	cmp	r3, #33	@ 0x21
 8009b0e:	d151      	bne.n	8009bb4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d132      	bne.n	8009b82 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e6      	bne.n	8009b1c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6c:	61fb      	str	r3, [r7, #28]
 8009b6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	69b9      	ldr	r1, [r7, #24]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	617b      	str	r3, [r7, #20]
   return(result);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e6      	bne.n	8009b4e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b80:	e018      	b.n	8009bb4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b96:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b9c:	1c9a      	adds	r2, r3, #2
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009bb4:	bf00      	nop
 8009bb6:	3744      	adds	r7, #68	@ 0x44
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b091      	sub	sp, #68	@ 0x44
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bce:	2b21      	cmp	r3, #33	@ 0x21
 8009bd0:	d160      	bne.n	8009c94 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009bda:	e057      	b.n	8009c8c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d133      	bne.n	8009c50 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c08:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e5      	bne.n	8009be8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3a:	61fb      	str	r3, [r7, #28]
 8009c3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	69b9      	ldr	r1, [r7, #24]
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	617b      	str	r3, [r7, #20]
   return(result);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e6      	bne.n	8009c1c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009c4e:	e021      	b.n	8009c94 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d013      	beq.n	8009c86 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1a4      	bne.n	8009bdc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009c92:	e7ff      	b.n	8009c94 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009c94:	bf00      	nop
 8009c96:	3744      	adds	r7, #68	@ 0x44
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b091      	sub	sp, #68	@ 0x44
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cae:	2b21      	cmp	r3, #33	@ 0x21
 8009cb0:	d165      	bne.n	8009d7e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009cb8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009cba:	e05c      	b.n	8009d76 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d133      	bne.n	8009d30 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf0:	e841 2300 	strex	r3, r2, [r1]
 8009cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e5      	bne.n	8009cc8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	61bb      	str	r3, [r7, #24]
 8009d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	6979      	ldr	r1, [r7, #20]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	613b      	str	r3, [r7, #16]
   return(result);
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e6      	bne.n	8009cfc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009d2e:	e026      	b.n	8009d7e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d42:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d52:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d58:	1c9a      	adds	r2, r3, #2
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d72:	3b01      	subs	r3, #1
 8009d74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009d76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d19f      	bne.n	8009cbc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009d7c:	e7ff      	b.n	8009d7e <UART_TxISR_16BIT_FIFOEN+0xde>
 8009d7e:	bf00      	nop
 8009d80:	3744      	adds	r7, #68	@ 0x44
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6979      	ldr	r1, [r7, #20]
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e6      	bne.n	8009d92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f936 	bl	800a044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd8:	bf00      	nop
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e027      	b.n	8009e82 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2224      	movs	r2, #36	@ 0x24
 8009e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e02d      	b.n	8009f02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2224      	movs	r2, #36	@ 0x24
 8009eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0201 	bic.w	r2, r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f850 	bl	8009f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e02d      	b.n	8009f7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2224      	movs	r2, #36	@ 0x24
 8009f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 0201 	bic.w	r2, r2, #1
 8009f48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f812 	bl	8009f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d108      	bne.n	8009faa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fa8:	e031      	b.n	800a00e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009faa:	2310      	movs	r3, #16
 8009fac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fae:	2310      	movs	r3, #16
 8009fb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	0e5b      	lsrs	r3, r3, #25
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	0f5b      	lsrs	r3, r3, #29
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	f003 0307 	and.w	r3, r3, #7
 8009fd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	7b3a      	ldrb	r2, [r7, #12]
 8009fd6:	4911      	ldr	r1, [pc, #68]	@ (800a01c <UARTEx_SetNbDataToProcess+0x94>)
 8009fd8:	5c8a      	ldrb	r2, [r1, r2]
 8009fda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fde:	7b3a      	ldrb	r2, [r7, #12]
 8009fe0:	490f      	ldr	r1, [pc, #60]	@ (800a020 <UARTEx_SetNbDataToProcess+0x98>)
 8009fe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	7b7a      	ldrb	r2, [r7, #13]
 8009ff4:	4909      	ldr	r1, [pc, #36]	@ (800a01c <UARTEx_SetNbDataToProcess+0x94>)
 8009ff6:	5c8a      	ldrb	r2, [r1, r2]
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	4908      	ldr	r1, [pc, #32]	@ (800a020 <UARTEx_SetNbDataToProcess+0x98>)
 800a000:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a002:	fb93 f3f2 	sdiv	r3, r3, r2
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	0800b38c 	.word	0x0800b38c
 800a020:	0800b394 	.word	0x0800b394

0800a024 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800a02c:	4b04      	ldr	r3, [pc, #16]	@ (800a040 <HAL_UART_RxCpltCallback+0x1c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]

	fptr();
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4798      	blx	r3
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	240005b4 	.word	0x240005b4

0800a044 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]

}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a060:	4a04      	ldr	r2, [pc, #16]	@ (800a074 <uartInit+0x1c>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6013      	str	r3, [r2, #0]
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	240005b4 	.word	0x240005b4

0800a078 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a080:	2201      	movs	r2, #1
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4803      	ldr	r0, [pc, #12]	@ (800a094 <receptionItrOn+0x1c>)
 800a086:	f7fd fe3b 	bl	8007d00 <HAL_UART_Receive_DMA>
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	240004a4 	.word	0x240004a4

0800a098 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a09c:	4b08      	ldr	r3, [pc, #32]	@ (800a0c0 <debugRxCallback+0x28>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b0d      	cmp	r3, #13
 800a0a2:	d102      	bne.n	800a0aa <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a0a4:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <debugRxCallback+0x2c>)
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	701a      	strb	r2, [r3, #0]
	}

	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a0aa:	4b07      	ldr	r3, [pc, #28]	@ (800a0c8 <debugRxCallback+0x30>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4904      	ldr	r1, [pc, #16]	@ (800a0c0 <debugRxCallback+0x28>)
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f88a 	bl	800a1ca <circularBufferEnqueue>

	receptionItrOn(&data);
 800a0b6:	4802      	ldr	r0, [pc, #8]	@ (800a0c0 <debugRxCallback+0x28>)
 800a0b8:	f7ff ffde 	bl	800a078 <receptionItrOn>

}
 800a0bc:	bf00      	nop
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	240005b8 	.word	0x240005b8
 800a0c4:	240005c0 	.word	0x240005c0
 800a0c8:	240005bc 	.word	0x240005bc

0800a0cc <debugUartInit>:
{

}

void debugUartInit(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <debugUartInit+0x30>)
 800a0d4:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800a0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a100 <debugUartInit+0x34>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f839 	bl	800a158 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff ffb6 	bl	800a058 <uartInit>

	receptionItrOn(&data);
 800a0ec:	4805      	ldr	r0, [pc, #20]	@ (800a104 <debugUartInit+0x38>)
 800a0ee:	f7ff ffc3 	bl	800a078 <receptionItrOn>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800a099 	.word	0x0800a099
 800a100:	240005bc 	.word	0x240005bc
 800a104:	240005b8 	.word	0x240005b8

0800a108 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800a10c:	4b03      	ldr	r3, [pc, #12]	@ (800a11c <getCmdReceivedFlag+0x14>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
}
 800a110:	4618      	mov	r0, r3
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	240005c0 	.word	0x240005c0

0800a120 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800a12a:	4a04      	ldr	r2, [pc, #16]	@ (800a13c <setCmdReceivedFlag+0x1c>)
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	7013      	strb	r3, [r2, #0]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	240005c0 	.word	0x240005c0

0800a140 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
	return rxBuffer;
 800a144:	4b03      	ldr	r3, [pc, #12]	@ (800a154 <getRxBuffer+0x14>)
 800a146:	681b      	ldr	r3, [r3, #0]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	240005bc 	.word	0x240005bc

0800a158 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	807b      	strh	r3, [r7, #2]
 800a164:	4613      	mov	r3, r2
 800a166:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	883a      	ldrh	r2, [r7, #0]
 800a17c:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	887a      	ldrh	r2, [r7, #2]
 800a182:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800a184:	887b      	ldrh	r3, [r7, #2]
 800a186:	883a      	ldrh	r2, [r7, #0]
 800a188:	fb02 f303 	mul.w	r3, r2, r3
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8a9 	bl	800a2e4 <malloc>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68d8      	ldr	r0, [r3, #12]
 800a1ac:	887b      	ldrh	r3, [r7, #2]
 800a1ae:	883a      	ldrh	r2, [r7, #0]
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	f000 fa4f 	bl	800a65a <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	889b      	ldrh	r3, [r3, #4]
 800a1e4:	89ba      	ldrh	r2, [r7, #12]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d301      	bcc.n	800a1ee <circularBufferEnqueue+0x24>
    {
        next = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	885b      	ldrh	r3, [r3, #2]
 800a1f2:	89ba      	ldrh	r2, [r7, #12]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d02b      	beq.n	800a250 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	8812      	ldrh	r2, [r2, #0]
 800a200:	4611      	mov	r1, r2
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	88d2      	ldrh	r2, [r2, #6]
 800a206:	fb01 f202 	mul.w	r2, r1, r2
 800a20a:	1898      	adds	r0, r3, r2
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	88db      	ldrh	r3, [r3, #6]
 800a210:	461a      	mov	r2, r3
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	f000 fb09 	bl	800a82a <memcpy>
 800a218:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d017      	beq.n	800a250 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	89ba      	ldrh	r2, [r7, #12]
 800a224:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800a226:	2302      	movs	r3, #2
 800a228:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	889b      	ldrh	r3, [r3, #4]
 800a234:	4413      	add	r3, r2
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	8852      	ldrh	r2, [r2, #2]
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	8892      	ldrh	r2, [r2, #4]
 800a240:	fb93 f1f2 	sdiv	r1, r3, r2
 800a244:	fb01 f202 	mul.w	r2, r1, r2
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800a264:	2305      	movs	r3, #5
 800a266:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	885a      	ldrh	r2, [r3, #2]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	d032      	beq.n	800a2da <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	885b      	ldrh	r3, [r3, #2]
 800a278:	3301      	adds	r3, #1
 800a27a:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	889b      	ldrh	r3, [r3, #4]
 800a280:	89ba      	ldrh	r2, [r7, #12]
 800a282:	429a      	cmp	r2, r3
 800a284:	d301      	bcc.n	800a28a <circularBufferDequeue+0x30>
        {
            next = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	8852      	ldrh	r2, [r2, #2]
 800a292:	4611      	mov	r1, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	88d2      	ldrh	r2, [r2, #6]
 800a298:	fb01 f202 	mul.w	r2, r1, r2
 800a29c:	1899      	adds	r1, r3, r2
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	88db      	ldrh	r3, [r3, #6]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6838      	ldr	r0, [r7, #0]
 800a2a6:	f000 fac0 	bl	800a82a <memcpy>

        cBuff->tail = next;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	89ba      	ldrh	r2, [r7, #12]
 800a2ae:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	889b      	ldrh	r3, [r3, #4]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	8852      	ldrh	r2, [r2, #2]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	8892      	ldrh	r2, [r2, #4]
 800a2c6:	fb93 f1f2 	sdiv	r1, r3, r2
 800a2ca:	fb01 f202 	mul.w	r2, r1, r2
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800a2d6:	2304      	movs	r3, #4
 800a2d8:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <malloc>:
 800a2e4:	4b02      	ldr	r3, [pc, #8]	@ (800a2f0 <malloc+0xc>)
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	f000 b825 	b.w	800a338 <_malloc_r>
 800a2ee:	bf00      	nop
 800a2f0:	24000058 	.word	0x24000058

0800a2f4 <sbrk_aligned>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4e0f      	ldr	r6, [pc, #60]	@ (800a334 <sbrk_aligned+0x40>)
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	6831      	ldr	r1, [r6, #0]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	b911      	cbnz	r1, 800a306 <sbrk_aligned+0x12>
 800a300:	f000 fa44 	bl	800a78c <_sbrk_r>
 800a304:	6030      	str	r0, [r6, #0]
 800a306:	4621      	mov	r1, r4
 800a308:	4628      	mov	r0, r5
 800a30a:	f000 fa3f 	bl	800a78c <_sbrk_r>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d103      	bne.n	800a31a <sbrk_aligned+0x26>
 800a312:	f04f 34ff 	mov.w	r4, #4294967295
 800a316:	4620      	mov	r0, r4
 800a318:	bd70      	pop	{r4, r5, r6, pc}
 800a31a:	1cc4      	adds	r4, r0, #3
 800a31c:	f024 0403 	bic.w	r4, r4, #3
 800a320:	42a0      	cmp	r0, r4
 800a322:	d0f8      	beq.n	800a316 <sbrk_aligned+0x22>
 800a324:	1a21      	subs	r1, r4, r0
 800a326:	4628      	mov	r0, r5
 800a328:	f000 fa30 	bl	800a78c <_sbrk_r>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d1f2      	bne.n	800a316 <sbrk_aligned+0x22>
 800a330:	e7ef      	b.n	800a312 <sbrk_aligned+0x1e>
 800a332:	bf00      	nop
 800a334:	240005c4 	.word	0x240005c4

0800a338 <_malloc_r>:
 800a338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a33c:	1ccd      	adds	r5, r1, #3
 800a33e:	f025 0503 	bic.w	r5, r5, #3
 800a342:	3508      	adds	r5, #8
 800a344:	2d0c      	cmp	r5, #12
 800a346:	bf38      	it	cc
 800a348:	250c      	movcc	r5, #12
 800a34a:	2d00      	cmp	r5, #0
 800a34c:	4606      	mov	r6, r0
 800a34e:	db01      	blt.n	800a354 <_malloc_r+0x1c>
 800a350:	42a9      	cmp	r1, r5
 800a352:	d904      	bls.n	800a35e <_malloc_r+0x26>
 800a354:	230c      	movs	r3, #12
 800a356:	6033      	str	r3, [r6, #0]
 800a358:	2000      	movs	r0, #0
 800a35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a434 <_malloc_r+0xfc>
 800a362:	f000 f869 	bl	800a438 <__malloc_lock>
 800a366:	f8d8 3000 	ldr.w	r3, [r8]
 800a36a:	461c      	mov	r4, r3
 800a36c:	bb44      	cbnz	r4, 800a3c0 <_malloc_r+0x88>
 800a36e:	4629      	mov	r1, r5
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff ffbf 	bl	800a2f4 <sbrk_aligned>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	4604      	mov	r4, r0
 800a37a:	d158      	bne.n	800a42e <_malloc_r+0xf6>
 800a37c:	f8d8 4000 	ldr.w	r4, [r8]
 800a380:	4627      	mov	r7, r4
 800a382:	2f00      	cmp	r7, #0
 800a384:	d143      	bne.n	800a40e <_malloc_r+0xd6>
 800a386:	2c00      	cmp	r4, #0
 800a388:	d04b      	beq.n	800a422 <_malloc_r+0xea>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	4639      	mov	r1, r7
 800a38e:	4630      	mov	r0, r6
 800a390:	eb04 0903 	add.w	r9, r4, r3
 800a394:	f000 f9fa 	bl	800a78c <_sbrk_r>
 800a398:	4581      	cmp	r9, r0
 800a39a:	d142      	bne.n	800a422 <_malloc_r+0xea>
 800a39c:	6821      	ldr	r1, [r4, #0]
 800a39e:	1a6d      	subs	r5, r5, r1
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ffa6 	bl	800a2f4 <sbrk_aligned>
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d03a      	beq.n	800a422 <_malloc_r+0xea>
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	442b      	add	r3, r5
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	bb62      	cbnz	r2, 800a414 <_malloc_r+0xdc>
 800a3ba:	f8c8 7000 	str.w	r7, [r8]
 800a3be:	e00f      	b.n	800a3e0 <_malloc_r+0xa8>
 800a3c0:	6822      	ldr	r2, [r4, #0]
 800a3c2:	1b52      	subs	r2, r2, r5
 800a3c4:	d420      	bmi.n	800a408 <_malloc_r+0xd0>
 800a3c6:	2a0b      	cmp	r2, #11
 800a3c8:	d917      	bls.n	800a3fa <_malloc_r+0xc2>
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	6025      	str	r5, [r4, #0]
 800a3d0:	bf18      	it	ne
 800a3d2:	6059      	strne	r1, [r3, #4]
 800a3d4:	6863      	ldr	r3, [r4, #4]
 800a3d6:	bf08      	it	eq
 800a3d8:	f8c8 1000 	streq.w	r1, [r8]
 800a3dc:	5162      	str	r2, [r4, r5]
 800a3de:	604b      	str	r3, [r1, #4]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f000 f82f 	bl	800a444 <__malloc_unlock>
 800a3e6:	f104 000b 	add.w	r0, r4, #11
 800a3ea:	1d23      	adds	r3, r4, #4
 800a3ec:	f020 0007 	bic.w	r0, r0, #7
 800a3f0:	1ac2      	subs	r2, r0, r3
 800a3f2:	bf1c      	itt	ne
 800a3f4:	1a1b      	subne	r3, r3, r0
 800a3f6:	50a3      	strne	r3, [r4, r2]
 800a3f8:	e7af      	b.n	800a35a <_malloc_r+0x22>
 800a3fa:	6862      	ldr	r2, [r4, #4]
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	bf0c      	ite	eq
 800a400:	f8c8 2000 	streq.w	r2, [r8]
 800a404:	605a      	strne	r2, [r3, #4]
 800a406:	e7eb      	b.n	800a3e0 <_malloc_r+0xa8>
 800a408:	4623      	mov	r3, r4
 800a40a:	6864      	ldr	r4, [r4, #4]
 800a40c:	e7ae      	b.n	800a36c <_malloc_r+0x34>
 800a40e:	463c      	mov	r4, r7
 800a410:	687f      	ldr	r7, [r7, #4]
 800a412:	e7b6      	b.n	800a382 <_malloc_r+0x4a>
 800a414:	461a      	mov	r2, r3
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	42a3      	cmp	r3, r4
 800a41a:	d1fb      	bne.n	800a414 <_malloc_r+0xdc>
 800a41c:	2300      	movs	r3, #0
 800a41e:	6053      	str	r3, [r2, #4]
 800a420:	e7de      	b.n	800a3e0 <_malloc_r+0xa8>
 800a422:	230c      	movs	r3, #12
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	4630      	mov	r0, r6
 800a428:	f000 f80c 	bl	800a444 <__malloc_unlock>
 800a42c:	e794      	b.n	800a358 <_malloc_r+0x20>
 800a42e:	6005      	str	r5, [r0, #0]
 800a430:	e7d6      	b.n	800a3e0 <_malloc_r+0xa8>
 800a432:	bf00      	nop
 800a434:	240005c8 	.word	0x240005c8

0800a438 <__malloc_lock>:
 800a438:	4801      	ldr	r0, [pc, #4]	@ (800a440 <__malloc_lock+0x8>)
 800a43a:	f000 b9f4 	b.w	800a826 <__retarget_lock_acquire_recursive>
 800a43e:	bf00      	nop
 800a440:	2400070c 	.word	0x2400070c

0800a444 <__malloc_unlock>:
 800a444:	4801      	ldr	r0, [pc, #4]	@ (800a44c <__malloc_unlock+0x8>)
 800a446:	f000 b9ef 	b.w	800a828 <__retarget_lock_release_recursive>
 800a44a:	bf00      	nop
 800a44c:	2400070c 	.word	0x2400070c

0800a450 <std>:
 800a450:	2300      	movs	r3, #0
 800a452:	b510      	push	{r4, lr}
 800a454:	4604      	mov	r4, r0
 800a456:	e9c0 3300 	strd	r3, r3, [r0]
 800a45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a45e:	6083      	str	r3, [r0, #8]
 800a460:	8181      	strh	r1, [r0, #12]
 800a462:	6643      	str	r3, [r0, #100]	@ 0x64
 800a464:	81c2      	strh	r2, [r0, #14]
 800a466:	6183      	str	r3, [r0, #24]
 800a468:	4619      	mov	r1, r3
 800a46a:	2208      	movs	r2, #8
 800a46c:	305c      	adds	r0, #92	@ 0x5c
 800a46e:	f000 f8f4 	bl	800a65a <memset>
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <std+0x58>)
 800a474:	6263      	str	r3, [r4, #36]	@ 0x24
 800a476:	4b0d      	ldr	r3, [pc, #52]	@ (800a4ac <std+0x5c>)
 800a478:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a47a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b0 <std+0x60>)
 800a47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a47e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b4 <std+0x64>)
 800a480:	6323      	str	r3, [r4, #48]	@ 0x30
 800a482:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b8 <std+0x68>)
 800a484:	6224      	str	r4, [r4, #32]
 800a486:	429c      	cmp	r4, r3
 800a488:	d006      	beq.n	800a498 <std+0x48>
 800a48a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a48e:	4294      	cmp	r4, r2
 800a490:	d002      	beq.n	800a498 <std+0x48>
 800a492:	33d0      	adds	r3, #208	@ 0xd0
 800a494:	429c      	cmp	r4, r3
 800a496:	d105      	bne.n	800a4a4 <std+0x54>
 800a498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4a0:	f000 b9c0 	b.w	800a824 <__retarget_lock_init_recursive>
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800a5d5 	.word	0x0800a5d5
 800a4ac:	0800a5f7 	.word	0x0800a5f7
 800a4b0:	0800a62f 	.word	0x0800a62f
 800a4b4:	0800a653 	.word	0x0800a653
 800a4b8:	240005cc 	.word	0x240005cc

0800a4bc <stdio_exit_handler>:
 800a4bc:	4a02      	ldr	r2, [pc, #8]	@ (800a4c8 <stdio_exit_handler+0xc>)
 800a4be:	4903      	ldr	r1, [pc, #12]	@ (800a4cc <stdio_exit_handler+0x10>)
 800a4c0:	4803      	ldr	r0, [pc, #12]	@ (800a4d0 <stdio_exit_handler+0x14>)
 800a4c2:	f000 b869 	b.w	800a598 <_fwalk_sglue>
 800a4c6:	bf00      	nop
 800a4c8:	2400004c 	.word	0x2400004c
 800a4cc:	0800aa21 	.word	0x0800aa21
 800a4d0:	2400005c 	.word	0x2400005c

0800a4d4 <cleanup_stdio>:
 800a4d4:	6841      	ldr	r1, [r0, #4]
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a508 <cleanup_stdio+0x34>)
 800a4d8:	4299      	cmp	r1, r3
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	4604      	mov	r4, r0
 800a4de:	d001      	beq.n	800a4e4 <cleanup_stdio+0x10>
 800a4e0:	f000 fa9e 	bl	800aa20 <_fflush_r>
 800a4e4:	68a1      	ldr	r1, [r4, #8]
 800a4e6:	4b09      	ldr	r3, [pc, #36]	@ (800a50c <cleanup_stdio+0x38>)
 800a4e8:	4299      	cmp	r1, r3
 800a4ea:	d002      	beq.n	800a4f2 <cleanup_stdio+0x1e>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 fa97 	bl	800aa20 <_fflush_r>
 800a4f2:	68e1      	ldr	r1, [r4, #12]
 800a4f4:	4b06      	ldr	r3, [pc, #24]	@ (800a510 <cleanup_stdio+0x3c>)
 800a4f6:	4299      	cmp	r1, r3
 800a4f8:	d004      	beq.n	800a504 <cleanup_stdio+0x30>
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a500:	f000 ba8e 	b.w	800aa20 <_fflush_r>
 800a504:	bd10      	pop	{r4, pc}
 800a506:	bf00      	nop
 800a508:	240005cc 	.word	0x240005cc
 800a50c:	24000634 	.word	0x24000634
 800a510:	2400069c 	.word	0x2400069c

0800a514 <global_stdio_init.part.0>:
 800a514:	b510      	push	{r4, lr}
 800a516:	4b0b      	ldr	r3, [pc, #44]	@ (800a544 <global_stdio_init.part.0+0x30>)
 800a518:	4c0b      	ldr	r4, [pc, #44]	@ (800a548 <global_stdio_init.part.0+0x34>)
 800a51a:	4a0c      	ldr	r2, [pc, #48]	@ (800a54c <global_stdio_init.part.0+0x38>)
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	4620      	mov	r0, r4
 800a520:	2200      	movs	r2, #0
 800a522:	2104      	movs	r1, #4
 800a524:	f7ff ff94 	bl	800a450 <std>
 800a528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a52c:	2201      	movs	r2, #1
 800a52e:	2109      	movs	r1, #9
 800a530:	f7ff ff8e 	bl	800a450 <std>
 800a534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a538:	2202      	movs	r2, #2
 800a53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53e:	2112      	movs	r1, #18
 800a540:	f7ff bf86 	b.w	800a450 <std>
 800a544:	24000704 	.word	0x24000704
 800a548:	240005cc 	.word	0x240005cc
 800a54c:	0800a4bd 	.word	0x0800a4bd

0800a550 <__sfp_lock_acquire>:
 800a550:	4801      	ldr	r0, [pc, #4]	@ (800a558 <__sfp_lock_acquire+0x8>)
 800a552:	f000 b968 	b.w	800a826 <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	2400070d 	.word	0x2400070d

0800a55c <__sfp_lock_release>:
 800a55c:	4801      	ldr	r0, [pc, #4]	@ (800a564 <__sfp_lock_release+0x8>)
 800a55e:	f000 b963 	b.w	800a828 <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	2400070d 	.word	0x2400070d

0800a568 <__sinit>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
 800a56c:	f7ff fff0 	bl	800a550 <__sfp_lock_acquire>
 800a570:	6a23      	ldr	r3, [r4, #32]
 800a572:	b11b      	cbz	r3, 800a57c <__sinit+0x14>
 800a574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a578:	f7ff bff0 	b.w	800a55c <__sfp_lock_release>
 800a57c:	4b04      	ldr	r3, [pc, #16]	@ (800a590 <__sinit+0x28>)
 800a57e:	6223      	str	r3, [r4, #32]
 800a580:	4b04      	ldr	r3, [pc, #16]	@ (800a594 <__sinit+0x2c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f5      	bne.n	800a574 <__sinit+0xc>
 800a588:	f7ff ffc4 	bl	800a514 <global_stdio_init.part.0>
 800a58c:	e7f2      	b.n	800a574 <__sinit+0xc>
 800a58e:	bf00      	nop
 800a590:	0800a4d5 	.word	0x0800a4d5
 800a594:	24000704 	.word	0x24000704

0800a598 <_fwalk_sglue>:
 800a598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a59c:	4607      	mov	r7, r0
 800a59e:	4688      	mov	r8, r1
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	2600      	movs	r6, #0
 800a5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ac:	d505      	bpl.n	800a5ba <_fwalk_sglue+0x22>
 800a5ae:	6824      	ldr	r4, [r4, #0]
 800a5b0:	2c00      	cmp	r4, #0
 800a5b2:	d1f7      	bne.n	800a5a4 <_fwalk_sglue+0xc>
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d907      	bls.n	800a5d0 <_fwalk_sglue+0x38>
 800a5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	d003      	beq.n	800a5d0 <_fwalk_sglue+0x38>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	47c0      	blx	r8
 800a5ce:	4306      	orrs	r6, r0
 800a5d0:	3568      	adds	r5, #104	@ 0x68
 800a5d2:	e7e9      	b.n	800a5a8 <_fwalk_sglue+0x10>

0800a5d4 <__sread>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5dc:	f000 f8c4 	bl	800a768 <_read_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	bfab      	itete	ge
 800a5e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5e8:	181b      	addge	r3, r3, r0
 800a5ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5ee:	bfac      	ite	ge
 800a5f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5f2:	81a3      	strhlt	r3, [r4, #12]
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <__swrite>:
 800a5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	898b      	ldrh	r3, [r1, #12]
 800a5fe:	05db      	lsls	r3, r3, #23
 800a600:	4605      	mov	r5, r0
 800a602:	460c      	mov	r4, r1
 800a604:	4616      	mov	r6, r2
 800a606:	d505      	bpl.n	800a614 <__swrite+0x1e>
 800a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60c:	2302      	movs	r3, #2
 800a60e:	2200      	movs	r2, #0
 800a610:	f000 f898 	bl	800a744 <_lseek_r>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a61a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	4632      	mov	r2, r6
 800a622:	463b      	mov	r3, r7
 800a624:	4628      	mov	r0, r5
 800a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62a:	f000 b8bf 	b.w	800a7ac <_write_r>

0800a62e <__sseek>:
 800a62e:	b510      	push	{r4, lr}
 800a630:	460c      	mov	r4, r1
 800a632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a636:	f000 f885 	bl	800a744 <_lseek_r>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	bf15      	itete	ne
 800a640:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a642:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a646:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a64a:	81a3      	strheq	r3, [r4, #12]
 800a64c:	bf18      	it	ne
 800a64e:	81a3      	strhne	r3, [r4, #12]
 800a650:	bd10      	pop	{r4, pc}

0800a652 <__sclose>:
 800a652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a656:	f000 b865 	b.w	800a724 <_close_r>

0800a65a <memset>:
 800a65a:	4402      	add	r2, r0
 800a65c:	4603      	mov	r3, r0
 800a65e:	4293      	cmp	r3, r2
 800a660:	d100      	bne.n	800a664 <memset+0xa>
 800a662:	4770      	bx	lr
 800a664:	f803 1b01 	strb.w	r1, [r3], #1
 800a668:	e7f9      	b.n	800a65e <memset+0x4>
	...

0800a66c <strtok>:
 800a66c:	4b16      	ldr	r3, [pc, #88]	@ (800a6c8 <strtok+0x5c>)
 800a66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a672:	681f      	ldr	r7, [r3, #0]
 800a674:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a676:	4605      	mov	r5, r0
 800a678:	460e      	mov	r6, r1
 800a67a:	b9ec      	cbnz	r4, 800a6b8 <strtok+0x4c>
 800a67c:	2050      	movs	r0, #80	@ 0x50
 800a67e:	f7ff fe31 	bl	800a2e4 <malloc>
 800a682:	4602      	mov	r2, r0
 800a684:	6478      	str	r0, [r7, #68]	@ 0x44
 800a686:	b920      	cbnz	r0, 800a692 <strtok+0x26>
 800a688:	4b10      	ldr	r3, [pc, #64]	@ (800a6cc <strtok+0x60>)
 800a68a:	4811      	ldr	r0, [pc, #68]	@ (800a6d0 <strtok+0x64>)
 800a68c:	215b      	movs	r1, #91	@ 0x5b
 800a68e:	f000 f8db 	bl	800a848 <__assert_func>
 800a692:	e9c0 4400 	strd	r4, r4, [r0]
 800a696:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a69a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a69e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a6a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a6a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a6aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a6ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a6b2:	6184      	str	r4, [r0, #24]
 800a6b4:	7704      	strb	r4, [r0, #28]
 800a6b6:	6244      	str	r4, [r0, #36]	@ 0x24
 800a6b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c4:	f000 b806 	b.w	800a6d4 <__strtok_r>
 800a6c8:	24000058 	.word	0x24000058
 800a6cc:	0800b39c 	.word	0x0800b39c
 800a6d0:	0800b3b3 	.word	0x0800b3b3

0800a6d4 <__strtok_r>:
 800a6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	b908      	cbnz	r0, 800a6de <__strtok_r+0xa>
 800a6da:	6814      	ldr	r4, [r2, #0]
 800a6dc:	b144      	cbz	r4, 800a6f0 <__strtok_r+0x1c>
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6ea:	b91e      	cbnz	r6, 800a6f4 <__strtok_r+0x20>
 800a6ec:	b965      	cbnz	r5, 800a708 <__strtok_r+0x34>
 800a6ee:	6015      	str	r5, [r2, #0]
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	e005      	b.n	800a700 <__strtok_r+0x2c>
 800a6f4:	42b5      	cmp	r5, r6
 800a6f6:	d1f6      	bne.n	800a6e6 <__strtok_r+0x12>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f0      	bne.n	800a6de <__strtok_r+0xa>
 800a6fc:	6014      	str	r4, [r2, #0]
 800a6fe:	7003      	strb	r3, [r0, #0]
 800a700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a702:	461c      	mov	r4, r3
 800a704:	e00c      	b.n	800a720 <__strtok_r+0x4c>
 800a706:	b915      	cbnz	r5, 800a70e <__strtok_r+0x3a>
 800a708:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a70c:	460e      	mov	r6, r1
 800a70e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a712:	42ab      	cmp	r3, r5
 800a714:	d1f7      	bne.n	800a706 <__strtok_r+0x32>
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f3      	beq.n	800a702 <__strtok_r+0x2e>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a720:	6014      	str	r4, [r2, #0]
 800a722:	e7ed      	b.n	800a700 <__strtok_r+0x2c>

0800a724 <_close_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d06      	ldr	r5, [pc, #24]	@ (800a740 <_close_r+0x1c>)
 800a728:	2300      	movs	r3, #0
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f6 fc2a 	bl	8000f88 <_close>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_close_r+0x1a>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_close_r+0x1a>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	24000708 	.word	0x24000708

0800a744 <_lseek_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d07      	ldr	r5, [pc, #28]	@ (800a764 <_lseek_r+0x20>)
 800a748:	4604      	mov	r4, r0
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f6 fc3f 	bl	8000fd6 <_lseek>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_lseek_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_lseek_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	24000708 	.word	0x24000708

0800a768 <_read_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	@ (800a788 <_read_r+0x20>)
 800a76c:	4604      	mov	r4, r0
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f6 fbcd 	bl	8000f16 <_read>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_read_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_read_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	24000708 	.word	0x24000708

0800a78c <_sbrk_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d06      	ldr	r5, [pc, #24]	@ (800a7a8 <_sbrk_r+0x1c>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7f6 fc2a 	bl	8000ff0 <_sbrk>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_sbrk_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_sbrk_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	24000708 	.word	0x24000708

0800a7ac <_write_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d07      	ldr	r5, [pc, #28]	@ (800a7cc <_write_r+0x20>)
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	602a      	str	r2, [r5, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f7f6 fbc8 	bl	8000f50 <_write>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_write_r+0x1e>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_write_r+0x1e>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	24000708 	.word	0x24000708

0800a7d0 <__errno>:
 800a7d0:	4b01      	ldr	r3, [pc, #4]	@ (800a7d8 <__errno+0x8>)
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	24000058 	.word	0x24000058

0800a7dc <__libc_init_array>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4d0d      	ldr	r5, [pc, #52]	@ (800a814 <__libc_init_array+0x38>)
 800a7e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a818 <__libc_init_array+0x3c>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	d109      	bne.n	800a800 <__libc_init_array+0x24>
 800a7ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a81c <__libc_init_array+0x40>)
 800a7ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a820 <__libc_init_array+0x44>)
 800a7f0:	f000 fd82 	bl	800b2f8 <_init>
 800a7f4:	1b64      	subs	r4, r4, r5
 800a7f6:	10a4      	asrs	r4, r4, #2
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	42a6      	cmp	r6, r4
 800a7fc:	d105      	bne.n	800a80a <__libc_init_array+0x2e>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	f855 3b04 	ldr.w	r3, [r5], #4
 800a804:	4798      	blx	r3
 800a806:	3601      	adds	r6, #1
 800a808:	e7ee      	b.n	800a7e8 <__libc_init_array+0xc>
 800a80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80e:	4798      	blx	r3
 800a810:	3601      	adds	r6, #1
 800a812:	e7f2      	b.n	800a7fa <__libc_init_array+0x1e>
 800a814:	0800b484 	.word	0x0800b484
 800a818:	0800b484 	.word	0x0800b484
 800a81c:	0800b484 	.word	0x0800b484
 800a820:	0800b488 	.word	0x0800b488

0800a824 <__retarget_lock_init_recursive>:
 800a824:	4770      	bx	lr

0800a826 <__retarget_lock_acquire_recursive>:
 800a826:	4770      	bx	lr

0800a828 <__retarget_lock_release_recursive>:
 800a828:	4770      	bx	lr

0800a82a <memcpy>:
 800a82a:	440a      	add	r2, r1
 800a82c:	4291      	cmp	r1, r2
 800a82e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a832:	d100      	bne.n	800a836 <memcpy+0xc>
 800a834:	4770      	bx	lr
 800a836:	b510      	push	{r4, lr}
 800a838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a840:	4291      	cmp	r1, r2
 800a842:	d1f9      	bne.n	800a838 <memcpy+0xe>
 800a844:	bd10      	pop	{r4, pc}
	...

0800a848 <__assert_func>:
 800a848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a84a:	4614      	mov	r4, r2
 800a84c:	461a      	mov	r2, r3
 800a84e:	4b09      	ldr	r3, [pc, #36]	@ (800a874 <__assert_func+0x2c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4605      	mov	r5, r0
 800a854:	68d8      	ldr	r0, [r3, #12]
 800a856:	b954      	cbnz	r4, 800a86e <__assert_func+0x26>
 800a858:	4b07      	ldr	r3, [pc, #28]	@ (800a878 <__assert_func+0x30>)
 800a85a:	461c      	mov	r4, r3
 800a85c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a860:	9100      	str	r1, [sp, #0]
 800a862:	462b      	mov	r3, r5
 800a864:	4905      	ldr	r1, [pc, #20]	@ (800a87c <__assert_func+0x34>)
 800a866:	f000 f903 	bl	800aa70 <fiprintf>
 800a86a:	f000 f913 	bl	800aa94 <abort>
 800a86e:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <__assert_func+0x38>)
 800a870:	e7f4      	b.n	800a85c <__assert_func+0x14>
 800a872:	bf00      	nop
 800a874:	24000058 	.word	0x24000058
 800a878:	0800b448 	.word	0x0800b448
 800a87c:	0800b41a 	.word	0x0800b41a
 800a880:	0800b40d 	.word	0x0800b40d

0800a884 <_free_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4605      	mov	r5, r0
 800a888:	2900      	cmp	r1, #0
 800a88a:	d041      	beq.n	800a910 <_free_r+0x8c>
 800a88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a890:	1f0c      	subs	r4, r1, #4
 800a892:	2b00      	cmp	r3, #0
 800a894:	bfb8      	it	lt
 800a896:	18e4      	addlt	r4, r4, r3
 800a898:	f7ff fdce 	bl	800a438 <__malloc_lock>
 800a89c:	4a1d      	ldr	r2, [pc, #116]	@ (800a914 <_free_r+0x90>)
 800a89e:	6813      	ldr	r3, [r2, #0]
 800a8a0:	b933      	cbnz	r3, 800a8b0 <_free_r+0x2c>
 800a8a2:	6063      	str	r3, [r4, #4]
 800a8a4:	6014      	str	r4, [r2, #0]
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ac:	f7ff bdca 	b.w	800a444 <__malloc_unlock>
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d908      	bls.n	800a8c6 <_free_r+0x42>
 800a8b4:	6820      	ldr	r0, [r4, #0]
 800a8b6:	1821      	adds	r1, r4, r0
 800a8b8:	428b      	cmp	r3, r1
 800a8ba:	bf01      	itttt	eq
 800a8bc:	6819      	ldreq	r1, [r3, #0]
 800a8be:	685b      	ldreq	r3, [r3, #4]
 800a8c0:	1809      	addeq	r1, r1, r0
 800a8c2:	6021      	streq	r1, [r4, #0]
 800a8c4:	e7ed      	b.n	800a8a2 <_free_r+0x1e>
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	b10b      	cbz	r3, 800a8d0 <_free_r+0x4c>
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	d9fa      	bls.n	800a8c6 <_free_r+0x42>
 800a8d0:	6811      	ldr	r1, [r2, #0]
 800a8d2:	1850      	adds	r0, r2, r1
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d10b      	bne.n	800a8f0 <_free_r+0x6c>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	4401      	add	r1, r0
 800a8dc:	1850      	adds	r0, r2, r1
 800a8de:	4283      	cmp	r3, r0
 800a8e0:	6011      	str	r1, [r2, #0]
 800a8e2:	d1e0      	bne.n	800a8a6 <_free_r+0x22>
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	6053      	str	r3, [r2, #4]
 800a8ea:	4408      	add	r0, r1
 800a8ec:	6010      	str	r0, [r2, #0]
 800a8ee:	e7da      	b.n	800a8a6 <_free_r+0x22>
 800a8f0:	d902      	bls.n	800a8f8 <_free_r+0x74>
 800a8f2:	230c      	movs	r3, #12
 800a8f4:	602b      	str	r3, [r5, #0]
 800a8f6:	e7d6      	b.n	800a8a6 <_free_r+0x22>
 800a8f8:	6820      	ldr	r0, [r4, #0]
 800a8fa:	1821      	adds	r1, r4, r0
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	bf04      	itt	eq
 800a900:	6819      	ldreq	r1, [r3, #0]
 800a902:	685b      	ldreq	r3, [r3, #4]
 800a904:	6063      	str	r3, [r4, #4]
 800a906:	bf04      	itt	eq
 800a908:	1809      	addeq	r1, r1, r0
 800a90a:	6021      	streq	r1, [r4, #0]
 800a90c:	6054      	str	r4, [r2, #4]
 800a90e:	e7ca      	b.n	800a8a6 <_free_r+0x22>
 800a910:	bd38      	pop	{r3, r4, r5, pc}
 800a912:	bf00      	nop
 800a914:	240005c8 	.word	0x240005c8

0800a918 <__sflush_r>:
 800a918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a920:	0716      	lsls	r6, r2, #28
 800a922:	4605      	mov	r5, r0
 800a924:	460c      	mov	r4, r1
 800a926:	d454      	bmi.n	800a9d2 <__sflush_r+0xba>
 800a928:	684b      	ldr	r3, [r1, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dc02      	bgt.n	800a934 <__sflush_r+0x1c>
 800a92e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	dd48      	ble.n	800a9c6 <__sflush_r+0xae>
 800a934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a936:	2e00      	cmp	r6, #0
 800a938:	d045      	beq.n	800a9c6 <__sflush_r+0xae>
 800a93a:	2300      	movs	r3, #0
 800a93c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a940:	682f      	ldr	r7, [r5, #0]
 800a942:	6a21      	ldr	r1, [r4, #32]
 800a944:	602b      	str	r3, [r5, #0]
 800a946:	d030      	beq.n	800a9aa <__sflush_r+0x92>
 800a948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	0759      	lsls	r1, r3, #29
 800a94e:	d505      	bpl.n	800a95c <__sflush_r+0x44>
 800a950:	6863      	ldr	r3, [r4, #4]
 800a952:	1ad2      	subs	r2, r2, r3
 800a954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a956:	b10b      	cbz	r3, 800a95c <__sflush_r+0x44>
 800a958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a95a:	1ad2      	subs	r2, r2, r3
 800a95c:	2300      	movs	r3, #0
 800a95e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a960:	6a21      	ldr	r1, [r4, #32]
 800a962:	4628      	mov	r0, r5
 800a964:	47b0      	blx	r6
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	d106      	bne.n	800a97a <__sflush_r+0x62>
 800a96c:	6829      	ldr	r1, [r5, #0]
 800a96e:	291d      	cmp	r1, #29
 800a970:	d82b      	bhi.n	800a9ca <__sflush_r+0xb2>
 800a972:	4a2a      	ldr	r2, [pc, #168]	@ (800aa1c <__sflush_r+0x104>)
 800a974:	410a      	asrs	r2, r1
 800a976:	07d6      	lsls	r6, r2, #31
 800a978:	d427      	bmi.n	800a9ca <__sflush_r+0xb2>
 800a97a:	2200      	movs	r2, #0
 800a97c:	6062      	str	r2, [r4, #4]
 800a97e:	04d9      	lsls	r1, r3, #19
 800a980:	6922      	ldr	r2, [r4, #16]
 800a982:	6022      	str	r2, [r4, #0]
 800a984:	d504      	bpl.n	800a990 <__sflush_r+0x78>
 800a986:	1c42      	adds	r2, r0, #1
 800a988:	d101      	bne.n	800a98e <__sflush_r+0x76>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	b903      	cbnz	r3, 800a990 <__sflush_r+0x78>
 800a98e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a992:	602f      	str	r7, [r5, #0]
 800a994:	b1b9      	cbz	r1, 800a9c6 <__sflush_r+0xae>
 800a996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a99a:	4299      	cmp	r1, r3
 800a99c:	d002      	beq.n	800a9a4 <__sflush_r+0x8c>
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f7ff ff70 	bl	800a884 <_free_r>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9a8:	e00d      	b.n	800a9c6 <__sflush_r+0xae>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b0      	blx	r6
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	1c50      	adds	r0, r2, #1
 800a9b4:	d1c9      	bne.n	800a94a <__sflush_r+0x32>
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0c6      	beq.n	800a94a <__sflush_r+0x32>
 800a9bc:	2b1d      	cmp	r3, #29
 800a9be:	d001      	beq.n	800a9c4 <__sflush_r+0xac>
 800a9c0:	2b16      	cmp	r3, #22
 800a9c2:	d11e      	bne.n	800aa02 <__sflush_r+0xea>
 800a9c4:	602f      	str	r7, [r5, #0]
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e022      	b.n	800aa10 <__sflush_r+0xf8>
 800a9ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ce:	b21b      	sxth	r3, r3
 800a9d0:	e01b      	b.n	800aa0a <__sflush_r+0xf2>
 800a9d2:	690f      	ldr	r7, [r1, #16]
 800a9d4:	2f00      	cmp	r7, #0
 800a9d6:	d0f6      	beq.n	800a9c6 <__sflush_r+0xae>
 800a9d8:	0793      	lsls	r3, r2, #30
 800a9da:	680e      	ldr	r6, [r1, #0]
 800a9dc:	bf08      	it	eq
 800a9de:	694b      	ldreq	r3, [r1, #20]
 800a9e0:	600f      	str	r7, [r1, #0]
 800a9e2:	bf18      	it	ne
 800a9e4:	2300      	movne	r3, #0
 800a9e6:	eba6 0807 	sub.w	r8, r6, r7
 800a9ea:	608b      	str	r3, [r1, #8]
 800a9ec:	f1b8 0f00 	cmp.w	r8, #0
 800a9f0:	dde9      	ble.n	800a9c6 <__sflush_r+0xae>
 800a9f2:	6a21      	ldr	r1, [r4, #32]
 800a9f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9f6:	4643      	mov	r3, r8
 800a9f8:	463a      	mov	r2, r7
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b0      	blx	r6
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	dc08      	bgt.n	800aa14 <__sflush_r+0xfc>
 800aa02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	4407      	add	r7, r0
 800aa16:	eba8 0800 	sub.w	r8, r8, r0
 800aa1a:	e7e7      	b.n	800a9ec <__sflush_r+0xd4>
 800aa1c:	dfbffffe 	.word	0xdfbffffe

0800aa20 <_fflush_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	690b      	ldr	r3, [r1, #16]
 800aa24:	4605      	mov	r5, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	b913      	cbnz	r3, 800aa30 <_fflush_r+0x10>
 800aa2a:	2500      	movs	r5, #0
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	b118      	cbz	r0, 800aa3a <_fflush_r+0x1a>
 800aa32:	6a03      	ldr	r3, [r0, #32]
 800aa34:	b90b      	cbnz	r3, 800aa3a <_fflush_r+0x1a>
 800aa36:	f7ff fd97 	bl	800a568 <__sinit>
 800aa3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0f3      	beq.n	800aa2a <_fflush_r+0xa>
 800aa42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa44:	07d0      	lsls	r0, r2, #31
 800aa46:	d404      	bmi.n	800aa52 <_fflush_r+0x32>
 800aa48:	0599      	lsls	r1, r3, #22
 800aa4a:	d402      	bmi.n	800aa52 <_fflush_r+0x32>
 800aa4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa4e:	f7ff feea 	bl	800a826 <__retarget_lock_acquire_recursive>
 800aa52:	4628      	mov	r0, r5
 800aa54:	4621      	mov	r1, r4
 800aa56:	f7ff ff5f 	bl	800a918 <__sflush_r>
 800aa5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa5c:	07da      	lsls	r2, r3, #31
 800aa5e:	4605      	mov	r5, r0
 800aa60:	d4e4      	bmi.n	800aa2c <_fflush_r+0xc>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	059b      	lsls	r3, r3, #22
 800aa66:	d4e1      	bmi.n	800aa2c <_fflush_r+0xc>
 800aa68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa6a:	f7ff fedd 	bl	800a828 <__retarget_lock_release_recursive>
 800aa6e:	e7dd      	b.n	800aa2c <_fflush_r+0xc>

0800aa70 <fiprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b503      	push	{r0, r1, lr}
 800aa74:	4601      	mov	r1, r0
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	4805      	ldr	r0, [pc, #20]	@ (800aa90 <fiprintf+0x20>)
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f000 f837 	bl	800aaf4 <_vfiprintf_r>
 800aa86:	b002      	add	sp, #8
 800aa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa8c:	b003      	add	sp, #12
 800aa8e:	4770      	bx	lr
 800aa90:	24000058 	.word	0x24000058

0800aa94 <abort>:
 800aa94:	b508      	push	{r3, lr}
 800aa96:	2006      	movs	r0, #6
 800aa98:	f000 fb8e 	bl	800b1b8 <raise>
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f7f6 fa2f 	bl	8000f00 <_exit>

0800aaa2 <__sfputc_r>:
 800aaa2:	6893      	ldr	r3, [r2, #8]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	b410      	push	{r4}
 800aaaa:	6093      	str	r3, [r2, #8]
 800aaac:	da08      	bge.n	800aac0 <__sfputc_r+0x1e>
 800aaae:	6994      	ldr	r4, [r2, #24]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	db01      	blt.n	800aab8 <__sfputc_r+0x16>
 800aab4:	290a      	cmp	r1, #10
 800aab6:	d103      	bne.n	800aac0 <__sfputc_r+0x1e>
 800aab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabc:	f000 bac0 	b.w	800b040 <__swbuf_r>
 800aac0:	6813      	ldr	r3, [r2, #0]
 800aac2:	1c58      	adds	r0, r3, #1
 800aac4:	6010      	str	r0, [r2, #0]
 800aac6:	7019      	strb	r1, [r3, #0]
 800aac8:	4608      	mov	r0, r1
 800aaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <__sfputs_r>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	4606      	mov	r6, r0
 800aad4:	460f      	mov	r7, r1
 800aad6:	4614      	mov	r4, r2
 800aad8:	18d5      	adds	r5, r2, r3
 800aada:	42ac      	cmp	r4, r5
 800aadc:	d101      	bne.n	800aae2 <__sfputs_r+0x12>
 800aade:	2000      	movs	r0, #0
 800aae0:	e007      	b.n	800aaf2 <__sfputs_r+0x22>
 800aae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae6:	463a      	mov	r2, r7
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff ffda 	bl	800aaa2 <__sfputc_r>
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	d1f3      	bne.n	800aada <__sfputs_r+0xa>
 800aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaf4 <_vfiprintf_r>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	460d      	mov	r5, r1
 800aafa:	b09d      	sub	sp, #116	@ 0x74
 800aafc:	4614      	mov	r4, r2
 800aafe:	4698      	mov	r8, r3
 800ab00:	4606      	mov	r6, r0
 800ab02:	b118      	cbz	r0, 800ab0c <_vfiprintf_r+0x18>
 800ab04:	6a03      	ldr	r3, [r0, #32]
 800ab06:	b90b      	cbnz	r3, 800ab0c <_vfiprintf_r+0x18>
 800ab08:	f7ff fd2e 	bl	800a568 <__sinit>
 800ab0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab0e:	07d9      	lsls	r1, r3, #31
 800ab10:	d405      	bmi.n	800ab1e <_vfiprintf_r+0x2a>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	059a      	lsls	r2, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_vfiprintf_r+0x2a>
 800ab18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab1a:	f7ff fe84 	bl	800a826 <__retarget_lock_acquire_recursive>
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	071b      	lsls	r3, r3, #28
 800ab22:	d501      	bpl.n	800ab28 <_vfiprintf_r+0x34>
 800ab24:	692b      	ldr	r3, [r5, #16]
 800ab26:	b99b      	cbnz	r3, 800ab50 <_vfiprintf_r+0x5c>
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f000 fac6 	bl	800b0bc <__swsetup_r>
 800ab30:	b170      	cbz	r0, 800ab50 <_vfiprintf_r+0x5c>
 800ab32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab34:	07dc      	lsls	r4, r3, #31
 800ab36:	d504      	bpl.n	800ab42 <_vfiprintf_r+0x4e>
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	b01d      	add	sp, #116	@ 0x74
 800ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	0598      	lsls	r0, r3, #22
 800ab46:	d4f7      	bmi.n	800ab38 <_vfiprintf_r+0x44>
 800ab48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab4a:	f7ff fe6d 	bl	800a828 <__retarget_lock_release_recursive>
 800ab4e:	e7f3      	b.n	800ab38 <_vfiprintf_r+0x44>
 800ab50:	2300      	movs	r3, #0
 800ab52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab54:	2320      	movs	r3, #32
 800ab56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab5e:	2330      	movs	r3, #48	@ 0x30
 800ab60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad10 <_vfiprintf_r+0x21c>
 800ab64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab68:	f04f 0901 	mov.w	r9, #1
 800ab6c:	4623      	mov	r3, r4
 800ab6e:	469a      	mov	sl, r3
 800ab70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab74:	b10a      	cbz	r2, 800ab7a <_vfiprintf_r+0x86>
 800ab76:	2a25      	cmp	r2, #37	@ 0x25
 800ab78:	d1f9      	bne.n	800ab6e <_vfiprintf_r+0x7a>
 800ab7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab7e:	d00b      	beq.n	800ab98 <_vfiprintf_r+0xa4>
 800ab80:	465b      	mov	r3, fp
 800ab82:	4622      	mov	r2, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ffa2 	bl	800aad0 <__sfputs_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f000 80a7 	beq.w	800ace0 <_vfiprintf_r+0x1ec>
 800ab92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab94:	445a      	add	r2, fp
 800ab96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab98:	f89a 3000 	ldrb.w	r3, [sl]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 809f 	beq.w	800ace0 <_vfiprintf_r+0x1ec>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abac:	f10a 0a01 	add.w	sl, sl, #1
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800abba:	4654      	mov	r4, sl
 800abbc:	2205      	movs	r2, #5
 800abbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc2:	4853      	ldr	r0, [pc, #332]	@ (800ad10 <_vfiprintf_r+0x21c>)
 800abc4:	f7f5 fbb4 	bl	8000330 <memchr>
 800abc8:	9a04      	ldr	r2, [sp, #16]
 800abca:	b9d8      	cbnz	r0, 800ac04 <_vfiprintf_r+0x110>
 800abcc:	06d1      	lsls	r1, r2, #27
 800abce:	bf44      	itt	mi
 800abd0:	2320      	movmi	r3, #32
 800abd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd6:	0713      	lsls	r3, r2, #28
 800abd8:	bf44      	itt	mi
 800abda:	232b      	movmi	r3, #43	@ 0x2b
 800abdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe0:	f89a 3000 	ldrb.w	r3, [sl]
 800abe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800abe6:	d015      	beq.n	800ac14 <_vfiprintf_r+0x120>
 800abe8:	9a07      	ldr	r2, [sp, #28]
 800abea:	4654      	mov	r4, sl
 800abec:	2000      	movs	r0, #0
 800abee:	f04f 0c0a 	mov.w	ip, #10
 800abf2:	4621      	mov	r1, r4
 800abf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf8:	3b30      	subs	r3, #48	@ 0x30
 800abfa:	2b09      	cmp	r3, #9
 800abfc:	d94b      	bls.n	800ac96 <_vfiprintf_r+0x1a2>
 800abfe:	b1b0      	cbz	r0, 800ac2e <_vfiprintf_r+0x13a>
 800ac00:	9207      	str	r2, [sp, #28]
 800ac02:	e014      	b.n	800ac2e <_vfiprintf_r+0x13a>
 800ac04:	eba0 0308 	sub.w	r3, r0, r8
 800ac08:	fa09 f303 	lsl.w	r3, r9, r3
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	46a2      	mov	sl, r4
 800ac12:	e7d2      	b.n	800abba <_vfiprintf_r+0xc6>
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	1d19      	adds	r1, r3, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	9103      	str	r1, [sp, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfbb      	ittet	lt
 800ac20:	425b      	neglt	r3, r3
 800ac22:	f042 0202 	orrlt.w	r2, r2, #2
 800ac26:	9307      	strge	r3, [sp, #28]
 800ac28:	9307      	strlt	r3, [sp, #28]
 800ac2a:	bfb8      	it	lt
 800ac2c:	9204      	strlt	r2, [sp, #16]
 800ac2e:	7823      	ldrb	r3, [r4, #0]
 800ac30:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac32:	d10a      	bne.n	800ac4a <_vfiprintf_r+0x156>
 800ac34:	7863      	ldrb	r3, [r4, #1]
 800ac36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac38:	d132      	bne.n	800aca0 <_vfiprintf_r+0x1ac>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	9203      	str	r2, [sp, #12]
 800ac42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac46:	3402      	adds	r4, #2
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad20 <_vfiprintf_r+0x22c>
 800ac4e:	7821      	ldrb	r1, [r4, #0]
 800ac50:	2203      	movs	r2, #3
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fb6c 	bl	8000330 <memchr>
 800ac58:	b138      	cbz	r0, 800ac6a <_vfiprintf_r+0x176>
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	eba0 000a 	sub.w	r0, r0, sl
 800ac60:	2240      	movs	r2, #64	@ 0x40
 800ac62:	4082      	lsls	r2, r0
 800ac64:	4313      	orrs	r3, r2
 800ac66:	3401      	adds	r4, #1
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6e:	4829      	ldr	r0, [pc, #164]	@ (800ad14 <_vfiprintf_r+0x220>)
 800ac70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac74:	2206      	movs	r2, #6
 800ac76:	f7f5 fb5b 	bl	8000330 <memchr>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d03f      	beq.n	800acfe <_vfiprintf_r+0x20a>
 800ac7e:	4b26      	ldr	r3, [pc, #152]	@ (800ad18 <_vfiprintf_r+0x224>)
 800ac80:	bb1b      	cbnz	r3, 800acca <_vfiprintf_r+0x1d6>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	3307      	adds	r3, #7
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	3308      	adds	r3, #8
 800ac8c:	9303      	str	r3, [sp, #12]
 800ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac90:	443b      	add	r3, r7
 800ac92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac94:	e76a      	b.n	800ab6c <_vfiprintf_r+0x78>
 800ac96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	e7a8      	b.n	800abf2 <_vfiprintf_r+0xfe>
 800aca0:	2300      	movs	r3, #0
 800aca2:	3401      	adds	r4, #1
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	4619      	mov	r1, r3
 800aca8:	f04f 0c0a 	mov.w	ip, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb2:	3a30      	subs	r2, #48	@ 0x30
 800acb4:	2a09      	cmp	r2, #9
 800acb6:	d903      	bls.n	800acc0 <_vfiprintf_r+0x1cc>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0c6      	beq.n	800ac4a <_vfiprintf_r+0x156>
 800acbc:	9105      	str	r1, [sp, #20]
 800acbe:	e7c4      	b.n	800ac4a <_vfiprintf_r+0x156>
 800acc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800acc4:	4604      	mov	r4, r0
 800acc6:	2301      	movs	r3, #1
 800acc8:	e7f0      	b.n	800acac <_vfiprintf_r+0x1b8>
 800acca:	ab03      	add	r3, sp, #12
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	462a      	mov	r2, r5
 800acd0:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <_vfiprintf_r+0x228>)
 800acd2:	a904      	add	r1, sp, #16
 800acd4:	4630      	mov	r0, r6
 800acd6:	f3af 8000 	nop.w
 800acda:	4607      	mov	r7, r0
 800acdc:	1c78      	adds	r0, r7, #1
 800acde:	d1d6      	bne.n	800ac8e <_vfiprintf_r+0x19a>
 800ace0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d405      	bmi.n	800acf2 <_vfiprintf_r+0x1fe>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	059a      	lsls	r2, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_vfiprintf_r+0x1fe>
 800acec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acee:	f7ff fd9b 	bl	800a828 <__retarget_lock_release_recursive>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	065b      	lsls	r3, r3, #25
 800acf6:	f53f af1f 	bmi.w	800ab38 <_vfiprintf_r+0x44>
 800acfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acfc:	e71e      	b.n	800ab3c <_vfiprintf_r+0x48>
 800acfe:	ab03      	add	r3, sp, #12
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462a      	mov	r2, r5
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <_vfiprintf_r+0x228>)
 800ad06:	a904      	add	r1, sp, #16
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 f879 	bl	800ae00 <_printf_i>
 800ad0e:	e7e4      	b.n	800acda <_vfiprintf_r+0x1e6>
 800ad10:	0800b449 	.word	0x0800b449
 800ad14:	0800b453 	.word	0x0800b453
 800ad18:	00000000 	.word	0x00000000
 800ad1c:	0800aad1 	.word	0x0800aad1
 800ad20:	0800b44f 	.word	0x0800b44f

0800ad24 <_printf_common>:
 800ad24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad28:	4616      	mov	r6, r2
 800ad2a:	4698      	mov	r8, r3
 800ad2c:	688a      	ldr	r2, [r1, #8]
 800ad2e:	690b      	ldr	r3, [r1, #16]
 800ad30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	bfb8      	it	lt
 800ad38:	4613      	movlt	r3, r2
 800ad3a:	6033      	str	r3, [r6, #0]
 800ad3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad40:	4607      	mov	r7, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	b10a      	cbz	r2, 800ad4a <_printf_common+0x26>
 800ad46:	3301      	adds	r3, #1
 800ad48:	6033      	str	r3, [r6, #0]
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	0699      	lsls	r1, r3, #26
 800ad4e:	bf42      	ittt	mi
 800ad50:	6833      	ldrmi	r3, [r6, #0]
 800ad52:	3302      	addmi	r3, #2
 800ad54:	6033      	strmi	r3, [r6, #0]
 800ad56:	6825      	ldr	r5, [r4, #0]
 800ad58:	f015 0506 	ands.w	r5, r5, #6
 800ad5c:	d106      	bne.n	800ad6c <_printf_common+0x48>
 800ad5e:	f104 0a19 	add.w	sl, r4, #25
 800ad62:	68e3      	ldr	r3, [r4, #12]
 800ad64:	6832      	ldr	r2, [r6, #0]
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dc26      	bgt.n	800adba <_printf_common+0x96>
 800ad6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	3b00      	subs	r3, #0
 800ad74:	bf18      	it	ne
 800ad76:	2301      	movne	r3, #1
 800ad78:	0692      	lsls	r2, r2, #26
 800ad7a:	d42b      	bmi.n	800add4 <_printf_common+0xb0>
 800ad7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad80:	4641      	mov	r1, r8
 800ad82:	4638      	mov	r0, r7
 800ad84:	47c8      	blx	r9
 800ad86:	3001      	adds	r0, #1
 800ad88:	d01e      	beq.n	800adc8 <_printf_common+0xa4>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	6922      	ldr	r2, [r4, #16]
 800ad8e:	f003 0306 	and.w	r3, r3, #6
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	bf02      	ittt	eq
 800ad96:	68e5      	ldreq	r5, [r4, #12]
 800ad98:	6833      	ldreq	r3, [r6, #0]
 800ad9a:	1aed      	subeq	r5, r5, r3
 800ad9c:	68a3      	ldr	r3, [r4, #8]
 800ad9e:	bf0c      	ite	eq
 800ada0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada4:	2500      	movne	r5, #0
 800ada6:	4293      	cmp	r3, r2
 800ada8:	bfc4      	itt	gt
 800adaa:	1a9b      	subgt	r3, r3, r2
 800adac:	18ed      	addgt	r5, r5, r3
 800adae:	2600      	movs	r6, #0
 800adb0:	341a      	adds	r4, #26
 800adb2:	42b5      	cmp	r5, r6
 800adb4:	d11a      	bne.n	800adec <_printf_common+0xc8>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e008      	b.n	800adcc <_printf_common+0xa8>
 800adba:	2301      	movs	r3, #1
 800adbc:	4652      	mov	r2, sl
 800adbe:	4641      	mov	r1, r8
 800adc0:	4638      	mov	r0, r7
 800adc2:	47c8      	blx	r9
 800adc4:	3001      	adds	r0, #1
 800adc6:	d103      	bne.n	800add0 <_printf_common+0xac>
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295
 800adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add0:	3501      	adds	r5, #1
 800add2:	e7c6      	b.n	800ad62 <_printf_common+0x3e>
 800add4:	18e1      	adds	r1, r4, r3
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	2030      	movs	r0, #48	@ 0x30
 800adda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adde:	4422      	add	r2, r4
 800ade0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ade4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ade8:	3302      	adds	r3, #2
 800adea:	e7c7      	b.n	800ad7c <_printf_common+0x58>
 800adec:	2301      	movs	r3, #1
 800adee:	4622      	mov	r2, r4
 800adf0:	4641      	mov	r1, r8
 800adf2:	4638      	mov	r0, r7
 800adf4:	47c8      	blx	r9
 800adf6:	3001      	adds	r0, #1
 800adf8:	d0e6      	beq.n	800adc8 <_printf_common+0xa4>
 800adfa:	3601      	adds	r6, #1
 800adfc:	e7d9      	b.n	800adb2 <_printf_common+0x8e>
	...

0800ae00 <_printf_i>:
 800ae00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae04:	7e0f      	ldrb	r7, [r1, #24]
 800ae06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae08:	2f78      	cmp	r7, #120	@ 0x78
 800ae0a:	4691      	mov	r9, r2
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	469a      	mov	sl, r3
 800ae12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae16:	d807      	bhi.n	800ae28 <_printf_i+0x28>
 800ae18:	2f62      	cmp	r7, #98	@ 0x62
 800ae1a:	d80a      	bhi.n	800ae32 <_printf_i+0x32>
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	f000 80d2 	beq.w	800afc6 <_printf_i+0x1c6>
 800ae22:	2f58      	cmp	r7, #88	@ 0x58
 800ae24:	f000 80b9 	beq.w	800af9a <_printf_i+0x19a>
 800ae28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae30:	e03a      	b.n	800aea8 <_printf_i+0xa8>
 800ae32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae36:	2b15      	cmp	r3, #21
 800ae38:	d8f6      	bhi.n	800ae28 <_printf_i+0x28>
 800ae3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ae40 <_printf_i+0x40>)
 800ae3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae40:	0800ae99 	.word	0x0800ae99
 800ae44:	0800aead 	.word	0x0800aead
 800ae48:	0800ae29 	.word	0x0800ae29
 800ae4c:	0800ae29 	.word	0x0800ae29
 800ae50:	0800ae29 	.word	0x0800ae29
 800ae54:	0800ae29 	.word	0x0800ae29
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800ae29 	.word	0x0800ae29
 800ae60:	0800ae29 	.word	0x0800ae29
 800ae64:	0800ae29 	.word	0x0800ae29
 800ae68:	0800ae29 	.word	0x0800ae29
 800ae6c:	0800afad 	.word	0x0800afad
 800ae70:	0800aed7 	.word	0x0800aed7
 800ae74:	0800af67 	.word	0x0800af67
 800ae78:	0800ae29 	.word	0x0800ae29
 800ae7c:	0800ae29 	.word	0x0800ae29
 800ae80:	0800afcf 	.word	0x0800afcf
 800ae84:	0800ae29 	.word	0x0800ae29
 800ae88:	0800aed7 	.word	0x0800aed7
 800ae8c:	0800ae29 	.word	0x0800ae29
 800ae90:	0800ae29 	.word	0x0800ae29
 800ae94:	0800af6f 	.word	0x0800af6f
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	1d1a      	adds	r2, r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6032      	str	r2, [r6, #0]
 800aea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e09d      	b.n	800afe8 <_printf_i+0x1e8>
 800aeac:	6833      	ldr	r3, [r6, #0]
 800aeae:	6820      	ldr	r0, [r4, #0]
 800aeb0:	1d19      	adds	r1, r3, #4
 800aeb2:	6031      	str	r1, [r6, #0]
 800aeb4:	0606      	lsls	r6, r0, #24
 800aeb6:	d501      	bpl.n	800aebc <_printf_i+0xbc>
 800aeb8:	681d      	ldr	r5, [r3, #0]
 800aeba:	e003      	b.n	800aec4 <_printf_i+0xc4>
 800aebc:	0645      	lsls	r5, r0, #25
 800aebe:	d5fb      	bpl.n	800aeb8 <_printf_i+0xb8>
 800aec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	da03      	bge.n	800aed0 <_printf_i+0xd0>
 800aec8:	232d      	movs	r3, #45	@ 0x2d
 800aeca:	426d      	negs	r5, r5
 800aecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aed0:	4859      	ldr	r0, [pc, #356]	@ (800b038 <_printf_i+0x238>)
 800aed2:	230a      	movs	r3, #10
 800aed4:	e011      	b.n	800aefa <_printf_i+0xfa>
 800aed6:	6821      	ldr	r1, [r4, #0]
 800aed8:	6833      	ldr	r3, [r6, #0]
 800aeda:	0608      	lsls	r0, r1, #24
 800aedc:	f853 5b04 	ldr.w	r5, [r3], #4
 800aee0:	d402      	bmi.n	800aee8 <_printf_i+0xe8>
 800aee2:	0649      	lsls	r1, r1, #25
 800aee4:	bf48      	it	mi
 800aee6:	b2ad      	uxthmi	r5, r5
 800aee8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeea:	4853      	ldr	r0, [pc, #332]	@ (800b038 <_printf_i+0x238>)
 800aeec:	6033      	str	r3, [r6, #0]
 800aeee:	bf14      	ite	ne
 800aef0:	230a      	movne	r3, #10
 800aef2:	2308      	moveq	r3, #8
 800aef4:	2100      	movs	r1, #0
 800aef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aefa:	6866      	ldr	r6, [r4, #4]
 800aefc:	60a6      	str	r6, [r4, #8]
 800aefe:	2e00      	cmp	r6, #0
 800af00:	bfa2      	ittt	ge
 800af02:	6821      	ldrge	r1, [r4, #0]
 800af04:	f021 0104 	bicge.w	r1, r1, #4
 800af08:	6021      	strge	r1, [r4, #0]
 800af0a:	b90d      	cbnz	r5, 800af10 <_printf_i+0x110>
 800af0c:	2e00      	cmp	r6, #0
 800af0e:	d04b      	beq.n	800afa8 <_printf_i+0x1a8>
 800af10:	4616      	mov	r6, r2
 800af12:	fbb5 f1f3 	udiv	r1, r5, r3
 800af16:	fb03 5711 	mls	r7, r3, r1, r5
 800af1a:	5dc7      	ldrb	r7, [r0, r7]
 800af1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af20:	462f      	mov	r7, r5
 800af22:	42bb      	cmp	r3, r7
 800af24:	460d      	mov	r5, r1
 800af26:	d9f4      	bls.n	800af12 <_printf_i+0x112>
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d10b      	bne.n	800af44 <_printf_i+0x144>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	07df      	lsls	r7, r3, #31
 800af30:	d508      	bpl.n	800af44 <_printf_i+0x144>
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	6861      	ldr	r1, [r4, #4]
 800af36:	4299      	cmp	r1, r3
 800af38:	bfde      	ittt	le
 800af3a:	2330      	movle	r3, #48	@ 0x30
 800af3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af44:	1b92      	subs	r2, r2, r6
 800af46:	6122      	str	r2, [r4, #16]
 800af48:	f8cd a000 	str.w	sl, [sp]
 800af4c:	464b      	mov	r3, r9
 800af4e:	aa03      	add	r2, sp, #12
 800af50:	4621      	mov	r1, r4
 800af52:	4640      	mov	r0, r8
 800af54:	f7ff fee6 	bl	800ad24 <_printf_common>
 800af58:	3001      	adds	r0, #1
 800af5a:	d14a      	bne.n	800aff2 <_printf_i+0x1f2>
 800af5c:	f04f 30ff 	mov.w	r0, #4294967295
 800af60:	b004      	add	sp, #16
 800af62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	f043 0320 	orr.w	r3, r3, #32
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	4833      	ldr	r0, [pc, #204]	@ (800b03c <_printf_i+0x23c>)
 800af70:	2778      	movs	r7, #120	@ 0x78
 800af72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	6831      	ldr	r1, [r6, #0]
 800af7a:	061f      	lsls	r7, r3, #24
 800af7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af80:	d402      	bmi.n	800af88 <_printf_i+0x188>
 800af82:	065f      	lsls	r7, r3, #25
 800af84:	bf48      	it	mi
 800af86:	b2ad      	uxthmi	r5, r5
 800af88:	6031      	str	r1, [r6, #0]
 800af8a:	07d9      	lsls	r1, r3, #31
 800af8c:	bf44      	itt	mi
 800af8e:	f043 0320 	orrmi.w	r3, r3, #32
 800af92:	6023      	strmi	r3, [r4, #0]
 800af94:	b11d      	cbz	r5, 800af9e <_printf_i+0x19e>
 800af96:	2310      	movs	r3, #16
 800af98:	e7ac      	b.n	800aef4 <_printf_i+0xf4>
 800af9a:	4827      	ldr	r0, [pc, #156]	@ (800b038 <_printf_i+0x238>)
 800af9c:	e7e9      	b.n	800af72 <_printf_i+0x172>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	f023 0320 	bic.w	r3, r3, #32
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	e7f6      	b.n	800af96 <_printf_i+0x196>
 800afa8:	4616      	mov	r6, r2
 800afaa:	e7bd      	b.n	800af28 <_printf_i+0x128>
 800afac:	6833      	ldr	r3, [r6, #0]
 800afae:	6825      	ldr	r5, [r4, #0]
 800afb0:	6961      	ldr	r1, [r4, #20]
 800afb2:	1d18      	adds	r0, r3, #4
 800afb4:	6030      	str	r0, [r6, #0]
 800afb6:	062e      	lsls	r6, r5, #24
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	d501      	bpl.n	800afc0 <_printf_i+0x1c0>
 800afbc:	6019      	str	r1, [r3, #0]
 800afbe:	e002      	b.n	800afc6 <_printf_i+0x1c6>
 800afc0:	0668      	lsls	r0, r5, #25
 800afc2:	d5fb      	bpl.n	800afbc <_printf_i+0x1bc>
 800afc4:	8019      	strh	r1, [r3, #0]
 800afc6:	2300      	movs	r3, #0
 800afc8:	6123      	str	r3, [r4, #16]
 800afca:	4616      	mov	r6, r2
 800afcc:	e7bc      	b.n	800af48 <_printf_i+0x148>
 800afce:	6833      	ldr	r3, [r6, #0]
 800afd0:	1d1a      	adds	r2, r3, #4
 800afd2:	6032      	str	r2, [r6, #0]
 800afd4:	681e      	ldr	r6, [r3, #0]
 800afd6:	6862      	ldr	r2, [r4, #4]
 800afd8:	2100      	movs	r1, #0
 800afda:	4630      	mov	r0, r6
 800afdc:	f7f5 f9a8 	bl	8000330 <memchr>
 800afe0:	b108      	cbz	r0, 800afe6 <_printf_i+0x1e6>
 800afe2:	1b80      	subs	r0, r0, r6
 800afe4:	6060      	str	r0, [r4, #4]
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	2300      	movs	r3, #0
 800afec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aff0:	e7aa      	b.n	800af48 <_printf_i+0x148>
 800aff2:	6923      	ldr	r3, [r4, #16]
 800aff4:	4632      	mov	r2, r6
 800aff6:	4649      	mov	r1, r9
 800aff8:	4640      	mov	r0, r8
 800affa:	47d0      	blx	sl
 800affc:	3001      	adds	r0, #1
 800affe:	d0ad      	beq.n	800af5c <_printf_i+0x15c>
 800b000:	6823      	ldr	r3, [r4, #0]
 800b002:	079b      	lsls	r3, r3, #30
 800b004:	d413      	bmi.n	800b02e <_printf_i+0x22e>
 800b006:	68e0      	ldr	r0, [r4, #12]
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	4298      	cmp	r0, r3
 800b00c:	bfb8      	it	lt
 800b00e:	4618      	movlt	r0, r3
 800b010:	e7a6      	b.n	800af60 <_printf_i+0x160>
 800b012:	2301      	movs	r3, #1
 800b014:	4632      	mov	r2, r6
 800b016:	4649      	mov	r1, r9
 800b018:	4640      	mov	r0, r8
 800b01a:	47d0      	blx	sl
 800b01c:	3001      	adds	r0, #1
 800b01e:	d09d      	beq.n	800af5c <_printf_i+0x15c>
 800b020:	3501      	adds	r5, #1
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	9903      	ldr	r1, [sp, #12]
 800b026:	1a5b      	subs	r3, r3, r1
 800b028:	42ab      	cmp	r3, r5
 800b02a:	dcf2      	bgt.n	800b012 <_printf_i+0x212>
 800b02c:	e7eb      	b.n	800b006 <_printf_i+0x206>
 800b02e:	2500      	movs	r5, #0
 800b030:	f104 0619 	add.w	r6, r4, #25
 800b034:	e7f5      	b.n	800b022 <_printf_i+0x222>
 800b036:	bf00      	nop
 800b038:	0800b45a 	.word	0x0800b45a
 800b03c:	0800b46b 	.word	0x0800b46b

0800b040 <__swbuf_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	4614      	mov	r4, r2
 800b046:	4605      	mov	r5, r0
 800b048:	b118      	cbz	r0, 800b052 <__swbuf_r+0x12>
 800b04a:	6a03      	ldr	r3, [r0, #32]
 800b04c:	b90b      	cbnz	r3, 800b052 <__swbuf_r+0x12>
 800b04e:	f7ff fa8b 	bl	800a568 <__sinit>
 800b052:	69a3      	ldr	r3, [r4, #24]
 800b054:	60a3      	str	r3, [r4, #8]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	071a      	lsls	r2, r3, #28
 800b05a:	d501      	bpl.n	800b060 <__swbuf_r+0x20>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	b943      	cbnz	r3, 800b072 <__swbuf_r+0x32>
 800b060:	4621      	mov	r1, r4
 800b062:	4628      	mov	r0, r5
 800b064:	f000 f82a 	bl	800b0bc <__swsetup_r>
 800b068:	b118      	cbz	r0, 800b072 <__swbuf_r+0x32>
 800b06a:	f04f 37ff 	mov.w	r7, #4294967295
 800b06e:	4638      	mov	r0, r7
 800b070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	6922      	ldr	r2, [r4, #16]
 800b076:	1a98      	subs	r0, r3, r2
 800b078:	6963      	ldr	r3, [r4, #20]
 800b07a:	b2f6      	uxtb	r6, r6
 800b07c:	4283      	cmp	r3, r0
 800b07e:	4637      	mov	r7, r6
 800b080:	dc05      	bgt.n	800b08e <__swbuf_r+0x4e>
 800b082:	4621      	mov	r1, r4
 800b084:	4628      	mov	r0, r5
 800b086:	f7ff fccb 	bl	800aa20 <_fflush_r>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d1ed      	bne.n	800b06a <__swbuf_r+0x2a>
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	701e      	strb	r6, [r3, #0]
 800b09c:	6962      	ldr	r2, [r4, #20]
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d004      	beq.n	800b0ae <__swbuf_r+0x6e>
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	07db      	lsls	r3, r3, #31
 800b0a8:	d5e1      	bpl.n	800b06e <__swbuf_r+0x2e>
 800b0aa:	2e0a      	cmp	r6, #10
 800b0ac:	d1df      	bne.n	800b06e <__swbuf_r+0x2e>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff fcb5 	bl	800aa20 <_fflush_r>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0d9      	beq.n	800b06e <__swbuf_r+0x2e>
 800b0ba:	e7d6      	b.n	800b06a <__swbuf_r+0x2a>

0800b0bc <__swsetup_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4b29      	ldr	r3, [pc, #164]	@ (800b164 <__swsetup_r+0xa8>)
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	b118      	cbz	r0, 800b0d0 <__swsetup_r+0x14>
 800b0c8:	6a03      	ldr	r3, [r0, #32]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <__swsetup_r+0x14>
 800b0cc:	f7ff fa4c 	bl	800a568 <__sinit>
 800b0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d4:	0719      	lsls	r1, r3, #28
 800b0d6:	d422      	bmi.n	800b11e <__swsetup_r+0x62>
 800b0d8:	06da      	lsls	r2, r3, #27
 800b0da:	d407      	bmi.n	800b0ec <__swsetup_r+0x30>
 800b0dc:	2209      	movs	r2, #9
 800b0de:	602a      	str	r2, [r5, #0]
 800b0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ea:	e033      	b.n	800b154 <__swsetup_r+0x98>
 800b0ec:	0758      	lsls	r0, r3, #29
 800b0ee:	d512      	bpl.n	800b116 <__swsetup_r+0x5a>
 800b0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f2:	b141      	cbz	r1, 800b106 <__swsetup_r+0x4a>
 800b0f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d002      	beq.n	800b102 <__swsetup_r+0x46>
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7ff fbc1 	bl	800a884 <_free_r>
 800b102:	2300      	movs	r3, #0
 800b104:	6363      	str	r3, [r4, #52]	@ 0x34
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	2300      	movs	r3, #0
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	6923      	ldr	r3, [r4, #16]
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f043 0308 	orr.w	r3, r3, #8
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	b94b      	cbnz	r3, 800b136 <__swsetup_r+0x7a>
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b12c:	d003      	beq.n	800b136 <__swsetup_r+0x7a>
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f883 	bl	800b23c <__smakebuf_r>
 800b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13a:	f013 0201 	ands.w	r2, r3, #1
 800b13e:	d00a      	beq.n	800b156 <__swsetup_r+0x9a>
 800b140:	2200      	movs	r2, #0
 800b142:	60a2      	str	r2, [r4, #8]
 800b144:	6962      	ldr	r2, [r4, #20]
 800b146:	4252      	negs	r2, r2
 800b148:	61a2      	str	r2, [r4, #24]
 800b14a:	6922      	ldr	r2, [r4, #16]
 800b14c:	b942      	cbnz	r2, 800b160 <__swsetup_r+0xa4>
 800b14e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b152:	d1c5      	bne.n	800b0e0 <__swsetup_r+0x24>
 800b154:	bd38      	pop	{r3, r4, r5, pc}
 800b156:	0799      	lsls	r1, r3, #30
 800b158:	bf58      	it	pl
 800b15a:	6962      	ldrpl	r2, [r4, #20]
 800b15c:	60a2      	str	r2, [r4, #8]
 800b15e:	e7f4      	b.n	800b14a <__swsetup_r+0x8e>
 800b160:	2000      	movs	r0, #0
 800b162:	e7f7      	b.n	800b154 <__swsetup_r+0x98>
 800b164:	24000058 	.word	0x24000058

0800b168 <_raise_r>:
 800b168:	291f      	cmp	r1, #31
 800b16a:	b538      	push	{r3, r4, r5, lr}
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	d904      	bls.n	800b17c <_raise_r+0x14>
 800b172:	2316      	movs	r3, #22
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	f04f 30ff 	mov.w	r0, #4294967295
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b17e:	b112      	cbz	r2, 800b186 <_raise_r+0x1e>
 800b180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b184:	b94b      	cbnz	r3, 800b19a <_raise_r+0x32>
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f830 	bl	800b1ec <_getpid_r>
 800b18c:	4622      	mov	r2, r4
 800b18e:	4601      	mov	r1, r0
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b196:	f000 b817 	b.w	800b1c8 <_kill_r>
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d00a      	beq.n	800b1b4 <_raise_r+0x4c>
 800b19e:	1c59      	adds	r1, r3, #1
 800b1a0:	d103      	bne.n	800b1aa <_raise_r+0x42>
 800b1a2:	2316      	movs	r3, #22
 800b1a4:	6003      	str	r3, [r0, #0]
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e7e7      	b.n	800b17a <_raise_r+0x12>
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4798      	blx	r3
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7e0      	b.n	800b17a <_raise_r+0x12>

0800b1b8 <raise>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	@ (800b1c4 <raise+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f7ff bfd3 	b.w	800b168 <_raise_r>
 800b1c2:	bf00      	nop
 800b1c4:	24000058 	.word	0x24000058

0800b1c8 <_kill_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	@ (800b1e8 <_kill_r+0x20>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7f5 fe83 	bl	8000ee0 <_kill>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_kill_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_kill_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	24000708 	.word	0x24000708

0800b1ec <_getpid_r>:
 800b1ec:	f7f5 be70 	b.w	8000ed0 <_getpid>

0800b1f0 <__swhatbuf_r>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	b096      	sub	sp, #88	@ 0x58
 800b1fc:	4615      	mov	r5, r2
 800b1fe:	461e      	mov	r6, r3
 800b200:	da0d      	bge.n	800b21e <__swhatbuf_r+0x2e>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b208:	f04f 0100 	mov.w	r1, #0
 800b20c:	bf14      	ite	ne
 800b20e:	2340      	movne	r3, #64	@ 0x40
 800b210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b214:	2000      	movs	r0, #0
 800b216:	6031      	str	r1, [r6, #0]
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	b016      	add	sp, #88	@ 0x58
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	466a      	mov	r2, sp
 800b220:	f000 f848 	bl	800b2b4 <_fstat_r>
 800b224:	2800      	cmp	r0, #0
 800b226:	dbec      	blt.n	800b202 <__swhatbuf_r+0x12>
 800b228:	9901      	ldr	r1, [sp, #4]
 800b22a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b22e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b232:	4259      	negs	r1, r3
 800b234:	4159      	adcs	r1, r3
 800b236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b23a:	e7eb      	b.n	800b214 <__swhatbuf_r+0x24>

0800b23c <__smakebuf_r>:
 800b23c:	898b      	ldrh	r3, [r1, #12]
 800b23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b240:	079d      	lsls	r5, r3, #30
 800b242:	4606      	mov	r6, r0
 800b244:	460c      	mov	r4, r1
 800b246:	d507      	bpl.n	800b258 <__smakebuf_r+0x1c>
 800b248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	2301      	movs	r3, #1
 800b252:	6163      	str	r3, [r4, #20]
 800b254:	b003      	add	sp, #12
 800b256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b258:	ab01      	add	r3, sp, #4
 800b25a:	466a      	mov	r2, sp
 800b25c:	f7ff ffc8 	bl	800b1f0 <__swhatbuf_r>
 800b260:	9f00      	ldr	r7, [sp, #0]
 800b262:	4605      	mov	r5, r0
 800b264:	4639      	mov	r1, r7
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff f866 	bl	800a338 <_malloc_r>
 800b26c:	b948      	cbnz	r0, 800b282 <__smakebuf_r+0x46>
 800b26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b272:	059a      	lsls	r2, r3, #22
 800b274:	d4ee      	bmi.n	800b254 <__smakebuf_r+0x18>
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	f043 0302 	orr.w	r3, r3, #2
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	e7e2      	b.n	800b248 <__smakebuf_r+0xc>
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	6020      	str	r0, [r4, #0]
 800b286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b292:	b15b      	cbz	r3, 800b2ac <__smakebuf_r+0x70>
 800b294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b298:	4630      	mov	r0, r6
 800b29a:	f000 f81d 	bl	800b2d8 <_isatty_r>
 800b29e:	b128      	cbz	r0, 800b2ac <__smakebuf_r+0x70>
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	f023 0303 	bic.w	r3, r3, #3
 800b2a6:	f043 0301 	orr.w	r3, r3, #1
 800b2aa:	81a3      	strh	r3, [r4, #12]
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	431d      	orrs	r5, r3
 800b2b0:	81a5      	strh	r5, [r4, #12]
 800b2b2:	e7cf      	b.n	800b254 <__smakebuf_r+0x18>

0800b2b4 <_fstat_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d07      	ldr	r5, [pc, #28]	@ (800b2d4 <_fstat_r+0x20>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	f7f5 fe6d 	bl	8000fa0 <_fstat>
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	d102      	bne.n	800b2d0 <_fstat_r+0x1c>
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	b103      	cbz	r3, 800b2d0 <_fstat_r+0x1c>
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	bd38      	pop	{r3, r4, r5, pc}
 800b2d2:	bf00      	nop
 800b2d4:	24000708 	.word	0x24000708

0800b2d8 <_isatty_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d06      	ldr	r5, [pc, #24]	@ (800b2f4 <_isatty_r+0x1c>)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7f5 fe6c 	bl	8000fc0 <_isatty>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_isatty_r+0x1a>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_isatty_r+0x1a>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	24000708 	.word	0x24000708

0800b2f8 <_init>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr

0800b304 <_fini>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr

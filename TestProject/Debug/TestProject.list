
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c37c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800c64c  0800c64c  0000d64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c934  0800c934  0000d934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c93c  0800c93c  0000d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d4  24000000  0800c944  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000d4  0800ca18  0000e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000134  0800ca78  0000e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  24000194  0800cad8  0000e194  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2400095c  0800cad8  0000e95c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca96  00000000  00000000  0000e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1f  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000377fd  00000000  00000000  00030b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa06  00000000  00000000  00068307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015015b  00000000  00000000  00087d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d7e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  001d7eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001dd394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000194 	.word	0x24000194
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c634 	.word	0x0800c634

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000198 	.word	0x24000198
 800030c:	0800c634 	.word	0x0800c634

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fc57 	bl	800af7c <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <debugCLITask+0x2e>
    {
        parseCommand();
 80006e0:	f000 f80a 	bl	80006f8 <parseCommand>
        processCommand();
 80006e4:	f000 f830 	bl	8000748 <processCommand>
        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fc53 	bl	800af94 <setCmdReceivedFlag>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <parseCommand>:

static void parseCommand(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000706:	e00d      	b.n	8000724 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	2b0d      	cmp	r3, #13
 800070c:	d102      	bne.n	8000714 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	80fb      	strh	r3, [r7, #6]
            break;
 8000712:	e013      	b.n	800073c <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000714:	88b9      	ldrh	r1, [r7, #4]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	80fa      	strh	r2, [r7, #6]
 800071c:	461a      	mov	r2, r3
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <parseCommand+0x4c>)
 8000722:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000724:	f00a fc46 	bl	800afb4 <getRxBuffer>
 8000728:	4602      	mov	r2, r0
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4610      	mov	r0, r2
 8000730:	f00a fccd 	bl	800b0ce <circularBufferDequeue>
 8000734:	4603      	mov	r3, r0
 8000736:	2b04      	cmp	r3, #4
 8000738:	d0e6      	beq.n	8000708 <parseCommand+0x10>
        }
    }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	240001b0 	.word	0x240001b0

08000748 <processCommand>:

static void processCommand(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 8000752:	4b4e      	ldr	r3, [pc, #312]	@ (800088c <processCommand+0x144>)
 8000754:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]

    memset(args,0,10);
 800075e:	220a      	movs	r2, #10
 8000760:	2100      	movs	r1, #0
 8000762:	484b      	ldr	r0, [pc, #300]	@ (8000890 <processCommand+0x148>)
 8000764:	f00a ff6f 	bl	800b646 <memset>

    args[argIndex] = strtok((char *)commandBuffer, " ");
 8000768:	7bfc      	ldrb	r4, [r7, #15]
 800076a:	494a      	ldr	r1, [pc, #296]	@ (8000894 <processCommand+0x14c>)
 800076c:	484a      	ldr	r0, [pc, #296]	@ (8000898 <processCommand+0x150>)
 800076e:	f00a ff73 	bl	800b658 <strtok>
 8000772:	4603      	mov	r3, r0
 8000774:	4a46      	ldr	r2, [pc, #280]	@ (8000890 <processCommand+0x148>)
 8000776:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800077a:	e00b      	b.n	8000794 <processCommand+0x4c>
    {
        argIndex++;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	3301      	adds	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000782:	7bfc      	ldrb	r4, [r7, #15]
 8000784:	4943      	ldr	r1, [pc, #268]	@ (8000894 <processCommand+0x14c>)
 8000786:	2000      	movs	r0, #0
 8000788:	f00a ff66 	bl	800b658 <strtok>
 800078c:	4603      	mov	r3, r0
 800078e:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <processCommand+0x148>)
 8000790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4a3e      	ldr	r2, [pc, #248]	@ (8000890 <processCommand+0x148>)
 8000798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1ed      	bne.n	800077c <processCommand+0x34>
    }

    cmdIdx = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007a8:	e04b      	b.n	8000842 <processCommand+0xfa>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	461a      	mov	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4413      	add	r3, r2
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	4934      	ldr	r1, [pc, #208]	@ (8000890 <processCommand+0x148>)
 80007c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f7ff fda2 	bl	8000310 <strcmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d134      	bne.n	800083c <processCommand+0xf4>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	461a      	mov	r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00e      	beq.n	8000806 <processCommand+0xbe>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	461a      	mov	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4413      	add	r3, r2
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4928      	ldr	r1, [pc, #160]	@ (800089c <processCommand+0x154>)
 80007fc:	4824      	ldr	r0, [pc, #144]	@ (8000890 <processCommand+0x148>)
 80007fe:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000800:	2301      	movs	r3, #1
 8000802:	71bb      	strb	r3, [r7, #6]
				break;
 8000804:	e028      	b.n	8000858 <processCommand+0x110>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	461a      	mov	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d012      	beq.n	8000842 <processCommand+0xfa>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	461a      	mov	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4413      	add	r3, r2
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3301      	adds	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e002      	b.n	8000842 <processCommand+0xfa>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	3301      	adds	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	461a      	mov	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	4413      	add	r3, r2
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1a8      	bne.n	80007aa <processCommand+0x62>
    	}
    }

    if( false == cmdSucessFlag)
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	f083 0301 	eor.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00f      	beq.n	8000884 <processCommand+0x13c>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000864:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <processCommand+0x158>)
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <processCommand+0x15c>)
 8000868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <processCommand+0x154>)
 800086e:	f00a fe73 	bl	800b558 <sniprintf>
 8000872:	4603      	mov	r3, r0
 8000874:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	b29a      	uxth	r2, r3
 800087a:	2364      	movs	r3, #100	@ 0x64
 800087c:	4907      	ldr	r1, [pc, #28]	@ (800089c <processCommand+0x154>)
 800087e:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <processCommand+0x160>)
 8000880:	f007 ff82 	bl	8008788 <HAL_UART_Transmit>
    }
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	2400003c 	.word	0x2400003c
 8000890:	240003b0 	.word	0x240003b0
 8000894:	0800c668 	.word	0x0800c668
 8000898:	240001b0 	.word	0x240001b0
 800089c:	240003d8 	.word	0x240003d8
 80008a0:	0800c66c 	.word	0x0800c66c
 80008a4:	0800c680 	.word	0x0800c680
 80008a8:	240006f0 	.word	0x240006f0

080008ac <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a fab8 	bl	800ae3c <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs);
 80008cc:	7b3b      	ldrb	r3, [r7, #12]
 80008ce:	4619      	mov	r1, r3
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	7bba      	ldrb	r2, [r7, #14]
 80008d4:	9201      	str	r2, [sp, #4]
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	460b      	mov	r3, r1
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <getDateTime+0x54>)
 80008dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f00a fe39 	bl	800b558 <sniprintf>
 80008e6:	4603      	mov	r3, r0
 80008e8:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80008ea:	8afa      	ldrh	r2, [r7, #22]
 80008ec:	2364      	movs	r3, #100	@ 0x64
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	4804      	ldr	r0, [pc, #16]	@ (8000904 <getDateTime+0x58>)
 80008f2:	f007 ff49 	bl	8008788 <HAL_UART_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	0800c684 	.word	0x0800c684
 8000904:	240006f0 	.word	0x240006f0

08000908 <setTime>:

static void setTime(char ** args, char *response)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <setTime+0xa0>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	823b      	strh	r3, [r7, #16]
 8000918:	2300      	movs	r3, #0
 800091a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	f8c3 2003 	str.w	r2, [r3, #3]

    char *token = strtok(args[2], ",");
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3308      	adds	r3, #8
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	491e      	ldr	r1, [pc, #120]	@ (80009ac <setTime+0xa4>)
 8000934:	4618      	mov	r0, r3
 8000936:	f00a fe8f 	bl	800b658 <strtok>
 800093a:	61b8      	str	r0, [r7, #24]


    while (token != NULL && tokenIdx < 3)
 800093c:	e011      	b.n	8000962 <setTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 800093e:	69b8      	ldr	r0, [r7, #24]
 8000940:	f00a fc0a 	bl	800b158 <atoi>
 8000944:	4602      	mov	r2, r0
 8000946:	7ffb      	ldrb	r3, [r7, #31]
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	3320      	adds	r3, #32
 800094c:	443b      	add	r3, r7
 800094e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000952:	7ffb      	ldrb	r3, [r7, #31]
 8000954:	3301      	adds	r3, #1
 8000956:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ",");
 8000958:	4914      	ldr	r1, [pc, #80]	@ (80009ac <setTime+0xa4>)
 800095a:	2000      	movs	r0, #0
 800095c:	f00a fe7c 	bl	800b658 <strtok>
 8000960:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <setTime+0x66>
 8000968:	7ffb      	ldrb	r3, [r7, #31]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d9e7      	bls.n	800093e <setTime+0x36>
    }

    dateTime.hours = dateTimeArray[0];
 800096e:	7c3b      	ldrb	r3, [r7, #16]
 8000970:	723b      	strb	r3, [r7, #8]
    dateTime.mins = dateTimeArray[1];
 8000972:	7c7b      	ldrb	r3, [r7, #17]
 8000974:	727b      	strb	r3, [r7, #9]
    dateTime.secs = dateTimeArray[2];
 8000976:	7cbb      	ldrb	r3, [r7, #18]
 8000978:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f00a fa0a 	bl	800ad98 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 8000984:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <setTime+0xa8>)
 8000986:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800098a:	6838      	ldr	r0, [r7, #0]
 800098c:	f00a fde4 	bl	800b558 <sniprintf>
 8000990:	4603      	mov	r3, r0
 8000992:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000994:	8afa      	ldrh	r2, [r7, #22]
 8000996:	2364      	movs	r3, #100	@ 0x64
 8000998:	6839      	ldr	r1, [r7, #0]
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <setTime+0xac>)
 800099c:	f007 fef4 	bl	8008788 <HAL_UART_Transmit>
}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	0800c6b0 	.word	0x0800c6b0
 80009ac:	0800c69c 	.word	0x0800c69c
 80009b0:	0800c6a0 	.word	0x0800c6a0
 80009b4:	240006f0 	.word	0x240006f0

080009b8 <setSleep>:

static void setSleep(char ** args, char *response)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
	startLowPowerMode();
 80009c2:	f00a f9a0 	bl	800ad06 <startLowPowerMode>

    uint16_t length = snprintf(response, 512, "Device entered low power mode\r\n");
 80009c6:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <setSleep+0x34>)
 80009c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f00a fdc3 	bl	800b558 <sniprintf>
 80009d2:	4603      	mov	r3, r0
 80009d4:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80009d6:	89fa      	ldrh	r2, [r7, #14]
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <setSleep+0x38>)
 80009de:	f007 fed3 	bl	8008788 <HAL_UART_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800c6b4 	.word	0x0800c6b4
 80009f0:	240006f0 	.word	0x240006f0

080009f4 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	debugUartInit();
 80009f8:	f00a faa2 	bl	800af40 <debugUartInit>

	RTCInit();
 80009fc:	f00a f9ae 	bl	800ad5c <RTCInit>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000a00:	2210      	movs	r2, #16
 8000a02:	4903      	ldr	r1, [pc, #12]	@ (8000a10 <systemInit+0x1c>)
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <systemInit+0x20>)
 8000a06:	f007 ff4d 	bl	80088a4 <HAL_UART_Transmit_IT>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800c6d4 	.word	0x0800c6d4
 8000a14:	240006f0 	.word	0x240006f0

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_DMA_Init+0x3c>)
 8000a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <MX_DMA_Init+0x3c>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_DMA_Init+0x3c>)
 8000a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	200b      	movs	r0, #11
 8000a42:	f000 ffca 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a46:	200b      	movs	r0, #11
 8000a48:	f000 ffe1 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	58024400 	.word	0x58024400

08000a58 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000adc <MX_ETH_Init+0x84>)
 8000a60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a70:	22e1      	movs	r2, #225	@ 0xe1
 8000a72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000a88:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <MX_ETH_Init+0x88>)
 8000a8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <MX_ETH_Init+0x8c>)
 8000a96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_ETH_Init+0x90>)
 8000a9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000aa0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000aa4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa6:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_ETH_Init+0x80>)
 8000aa8:	f003 fe04 	bl	80046b4 <HAL_ETH_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ab2:	f000 fa83 	bl	8000fbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab6:	2238      	movs	r2, #56	@ 0x38
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_ETH_Init+0x94>)
 8000abc:	f00a fdc3 	bl	800b646 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_ETH_Init+0x94>)
 8000ac2:	2221      	movs	r2, #33	@ 0x21
 8000ac4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_ETH_Init+0x94>)
 8000ac8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000acc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_ETH_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000610 	.word	0x24000610
 8000adc:	40028000 	.word	0x40028000
 8000ae0:	240006c0 	.word	0x240006c0
 8000ae4:	24000134 	.word	0x24000134
 8000ae8:	240000d4 	.word	0x240000d4
 8000aec:	240005d8 	.word	0x240005d8

08000af0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a59      	ldr	r2, [pc, #356]	@ (8000c74 <HAL_ETH_MspInit+0x184>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 80ab 	bne.w	8000c6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b14:	4b58      	ldr	r3, [pc, #352]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1a:	4a57      	ldr	r2, [pc, #348]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b24:	4b54      	ldr	r3, [pc, #336]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2e:	623b      	str	r3, [r7, #32]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b32:	4b51      	ldr	r3, [pc, #324]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b38:	4a4f      	ldr	r2, [pc, #316]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b42:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b50:	4b49      	ldr	r3, [pc, #292]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b56:	4a48      	ldr	r2, [pc, #288]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b60:	4b45      	ldr	r3, [pc, #276]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b42      	ldr	r3, [pc, #264]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	4a40      	ldr	r2, [pc, #256]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	4a39      	ldr	r2, [pc, #228]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9c:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b33      	ldr	r3, [pc, #204]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	4a31      	ldr	r2, [pc, #196]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	4a2a      	ldr	r2, [pc, #168]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd8:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be6:	2332      	movs	r3, #50	@ 0x32
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481e      	ldr	r0, [pc, #120]	@ (8000c7c <HAL_ETH_MspInit+0x18c>)
 8000c02:	f004 f98b 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c06:	2386      	movs	r3, #134	@ 0x86
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4817      	ldr	r0, [pc, #92]	@ (8000c80 <HAL_ETH_MspInit+0x190>)
 8000c22:	f004 f97b 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <HAL_ETH_MspInit+0x194>)
 8000c44:	f004 f96a 	bl	8004f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c48:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <HAL_ETH_MspInit+0x198>)
 8000c66:	f004 f959 	bl	8004f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	@ 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40028000 	.word	0x40028000
 8000c78:	58024400 	.word	0x58024400
 8000c7c:	58020800 	.word	0x58020800
 8000c80:	58020000 	.word	0x58020000
 8000c84:	58020400 	.word	0x58020400
 8000c88:	58021800 	.word	0x58021800

08000c8c <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	@ 0x30
 8000c90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b75      	ldr	r3, [pc, #468]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	4a73      	ldr	r2, [pc, #460]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb2:	4b71      	ldr	r3, [pc, #452]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b69      	ldr	r3, [pc, #420]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b66      	ldr	r3, [pc, #408]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4a64      	ldr	r2, [pc, #400]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4b62      	ldr	r3, [pc, #392]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a5d      	ldr	r2, [pc, #372]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b57      	ldr	r3, [pc, #348]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a55      	ldr	r2, [pc, #340]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b53      	ldr	r3, [pc, #332]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	4b4f      	ldr	r3, [pc, #316]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b4b      	ldr	r3, [pc, #300]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4b48      	ldr	r3, [pc, #288]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b44      	ldr	r3, [pc, #272]	@ (8000e78 <MX_GPIO_Init+0x1ec>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d7a:	4840      	ldr	r0, [pc, #256]	@ (8000e7c <MX_GPIO_Init+0x1f0>)
 8000d7c:	f004 fa76 	bl	800526c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d86:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <MX_GPIO_Init+0x1f4>)
 8000d88:	f004 fa70 	bl	800526c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2102      	movs	r1, #2
 8000d90:	483c      	ldr	r0, [pc, #240]	@ (8000e84 <MX_GPIO_Init+0x1f8>)
 8000d92:	f004 fa6b 	bl	800526c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4836      	ldr	r0, [pc, #216]	@ (8000e88 <MX_GPIO_Init+0x1fc>)
 8000dae:	f004 f8b5 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000db2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482c      	ldr	r0, [pc, #176]	@ (8000e7c <MX_GPIO_Init+0x1f0>)
 8000dcc:	f004 f8a6 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <MX_GPIO_Init+0x1f4>)
 8000dea:	f004 f897 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4822      	ldr	r0, [pc, #136]	@ (8000e8c <MX_GPIO_Init+0x200>)
 8000e04:	f004 f88a 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481c      	ldr	r0, [pc, #112]	@ (8000e90 <MX_GPIO_Init+0x204>)
 8000e1e:	f004 f87d 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e34:	230a      	movs	r3, #10
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	@ (8000e90 <MX_GPIO_Init+0x204>)
 8000e40:	f004 f86c 	bl	8004f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <MX_GPIO_Init+0x1f8>)
 8000e5c:	f004 f85e 	bl	8004f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2028      	movs	r0, #40	@ 0x28
 8000e66:	f000 fdb8 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6a:	2028      	movs	r0, #40	@ 0x28
 8000e6c:	f000 fdcf 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 8000e70:	bf00      	nop
 8000e72:	3730      	adds	r7, #48	@ 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	58020c00 	.word	0x58020c00
 8000e84:	58021000 	.word	0x58021000
 8000e88:	58020800 	.word	0x58020800
 8000e8c:	58021800 	.word	0x58021800
 8000e90:	58020000 	.word	0x58020000

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fc1e 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f812 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f7ff fef4 	bl	8000c8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea4:	f7ff fdb8 	bl	8000a18 <MX_DMA_Init>
  MX_ETH_Init();
 8000ea8:	f7ff fdd6 	bl	8000a58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000eac:	f000 faf2 	bl	8001494 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000eb0:	f000 fbe0 	bl	8001674 <MX_USB_OTG_HS_USB_Init>
  MX_RTC_Init();
 8000eb4:	f000 f888 	bl	8000fc8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000eb8:	f7ff fd9c 	bl	80009f4 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000ebc:	f7ff fc00 	bl	80006c0 <debugCLITask>
 8000ec0:	e7fc      	b.n	8000ebc <main+0x28>
	...

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09c      	sub	sp, #112	@ 0x70
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	224c      	movs	r2, #76	@ 0x4c
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00a fbb7 	bl	800b646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2220      	movs	r2, #32
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00a fbb1 	bl	800b646 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f004 fa1f 	bl	8005328 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <SystemClock_Config+0xf0>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a30      	ldr	r2, [pc, #192]	@ (8000fb4 <SystemClock_Config+0xf0>)
 8000ef4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <SystemClock_Config+0xf0>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f06:	bf00      	nop
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <SystemClock_Config+0xf0>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f14:	d1f8      	bne.n	8000f08 <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f16:	f004 f9dd 	bl	80052d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <SystemClock_Config+0xf4>)
 8000f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f1e:	4a26      	ldr	r2, [pc, #152]	@ (8000fb8 <SystemClock_Config+0xf4>)
 8000f20:	f023 0318 	bic.w	r3, r3, #24
 8000f24:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000f26:	2325      	movs	r3, #37	@ 0x25
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f34:	2301      	movs	r3, #1
 8000f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000f44:	f240 1313 	movw	r3, #275	@ 0x113
 8000f48:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f56:	2304      	movs	r3, #4
 8000f58:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fa18 	bl	800539c <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f72:	f000 f823 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	233f      	movs	r3, #63	@ 0x3f
 8000f78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f82:	2308      	movs	r3, #8
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f86:	2340      	movs	r3, #64	@ 0x40
 8000f88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f8a:	2340      	movs	r3, #64	@ 0x40
 8000f8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f94:	2340      	movs	r3, #64	@ 0x40
 8000f96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fdd7 	bl	8005b50 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000fa8:	f000 f808 	bl	8000fbc <Error_Handler>
  }
}
 8000fac:	bf00      	nop
 8000fae:	3770      	adds	r7, #112	@ 0x70
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58024800 	.word	0x58024800
 8000fb8:	58024400 	.word	0x58024400

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <Error_Handler+0x8>

08000fc8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	@ 0x40
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2228      	movs	r2, #40	@ 0x28
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00a fb2c 	bl	800b646 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fee:	4b3c      	ldr	r3, [pc, #240]	@ (80010e0 <MX_RTC_Init+0x118>)
 8000ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80010e4 <MX_RTC_Init+0x11c>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <MX_RTC_Init+0x118>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ffa:	4b39      	ldr	r3, [pc, #228]	@ (80010e0 <MX_RTC_Init+0x118>)
 8000ffc:	227f      	movs	r2, #127	@ 0x7f
 8000ffe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001000:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800100c:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <MX_RTC_Init+0x118>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001018:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <MX_RTC_Init+0x118>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800101e:	4830      	ldr	r0, [pc, #192]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001020:	f006 fee4 	bl	8007dec <HAL_RTC_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800102a:	f7ff ffc7 	bl	8000fbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 800102e:	2301      	movs	r3, #1
 8001030:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x10;
 8001034:	2310      	movs	r3, #16
 8001036:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	4823      	ldr	r0, [pc, #140]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001052:	f006 ff4d 	bl	8007ef0 <HAL_RTC_SetTime>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800105c:	f7ff ffae 	bl	8000fbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001060:	2307      	movs	r3, #7
 8001062:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001066:	2311      	movs	r3, #17
 8001068:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x11;
 800106c:	2311      	movs	r3, #17
 800106e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x24;
 8001072:	2324      	movs	r3, #36	@ 0x24
 8001074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001078:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	4817      	ldr	r0, [pc, #92]	@ (80010e0 <MX_RTC_Init+0x118>)
 8001082:	f007 f82f 	bl	80080e4 <HAL_RTC_SetDate>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800108c:	f7ff ff96 	bl	8000fbc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001090:	2300      	movs	r3, #0
 8001092:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001094:	2300      	movs	r3, #0
 8001096:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001098:	2300      	movs	r3, #0
 800109a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80010ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <MX_RTC_Init+0x118>)
 80010c8:	f007 f8e2 	bl	8008290 <HAL_RTC_SetAlarm>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80010d2:	f7ff ff73 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	@ 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	240006c8 	.word	0x240006c8
 80010e4:	58004000 	.word	0x58004000

080010e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b0      	sub	sp, #192	@ 0xc0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	22b8      	movs	r2, #184	@ 0xb8
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a faa4 	bl	800b646 <memset>
  if(rtcHandle->Instance==RTC)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <HAL_RTC_MspInit+0x5c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d119      	bne.n	800113c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001108:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4618      	mov	r0, r3
 8001122:	f005 f8a1 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800112c:	f7ff ff46 	bl	8000fbc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_RTC_MspInit+0x60>)
 8001132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_RTC_MspInit+0x60>)
 8001136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113a:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	37c0      	adds	r7, #192	@ 0xc0
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	58004000 	.word	0x58004000
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_MspInit+0x30>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001158:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x30>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x30>)
 8001164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	58024400 	.word	0x58024400

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 faf1 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <DMA1_Stream0_IRQHandler+0x10>)
 80011e6:	f001 ff53 	bl	8003090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	24000784 	.word	0x24000784

080011f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <USART3_IRQHandler+0x10>)
 80011fa:	f007 fc33 	bl	8008a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240006f0 	.word	0x240006f0

08001208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800120c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001210:	f004 f845 	bl	800529e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_kill>:

int _kill(int pid, int sig)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001232:	f00a fac3 	bl	800b7bc <__errno>
 8001236:	4603      	mov	r3, r0
 8001238:	2216      	movs	r2, #22
 800123a:	601a      	str	r2, [r3, #0]
  return -1;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_exit>:

void _exit (int status)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffe7 	bl	8001228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <_exit+0x12>

0800125e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e00a      	b.n	8001286 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001270:	f3af 8000 	nop.w
 8001274:	4601      	mov	r1, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	60ba      	str	r2, [r7, #8]
 800127c:	b2ca      	uxtb	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	dbf0      	blt.n	8001270 <_read+0x12>
  }

  return len;
 800128e:	687b      	ldr	r3, [r7, #4]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e009      	b.n	80012be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf1      	blt.n	80012aa <_write+0x12>
  }
  return len;
 80012c6:	687b      	ldr	r3, [r7, #4]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_close>:

int _close(int file)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f8:	605a      	str	r2, [r3, #4]
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_isatty>:

int _isatty(int file)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f00a fa28 	bl	800b7bc <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24050000 	.word	0x24050000
 8001398:	00000400 	.word	0x00000400
 800139c:	240006ec 	.word	0x240006ec
 80013a0:	24000960 	.word	0x24000960

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a8:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <SystemInit+0xd0>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a31      	ldr	r2, [pc, #196]	@ (8001474 <SystemInit+0xd0>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <SystemInit+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d807      	bhi.n	80013d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001478 <SystemInit+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 030f 	bic.w	r3, r3, #15
 80013cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <SystemInit+0xd4>)
 80013ce:	f043 0307 	orr.w	r3, r3, #7
 80013d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <SystemInit+0xd8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a28      	ldr	r2, [pc, #160]	@ (800147c <SystemInit+0xd8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <SystemInit+0xd8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013e6:	4b25      	ldr	r3, [pc, #148]	@ (800147c <SystemInit+0xd8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4924      	ldr	r1, [pc, #144]	@ (800147c <SystemInit+0xd8>)
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <SystemInit+0xdc>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <SystemInit+0xd4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <SystemInit+0xd4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 030f 	bic.w	r3, r3, #15
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <SystemInit+0xd4>)
 8001408:	f043 0307 	orr.w	r3, r3, #7
 800140c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <SystemInit+0xd8>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <SystemInit+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <SystemInit+0xd8>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <SystemInit+0xd8>)
 8001422:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <SystemInit+0xe0>)
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <SystemInit+0xd8>)
 8001428:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <SystemInit+0xe4>)
 800142a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <SystemInit+0xd8>)
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <SystemInit+0xe8>)
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <SystemInit+0xd8>)
 8001434:	2200      	movs	r2, #0
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <SystemInit+0xd8>)
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <SystemInit+0xe8>)
 800143c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <SystemInit+0xd8>)
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <SystemInit+0xd8>)
 8001446:	4a11      	ldr	r2, [pc, #68]	@ (800148c <SystemInit+0xe8>)
 8001448:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <SystemInit+0xd8>)
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <SystemInit+0xd8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a09      	ldr	r2, [pc, #36]	@ (800147c <SystemInit+0xd8>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <SystemInit+0xd8>)
 800145e:	2200      	movs	r2, #0
 8001460:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <SystemInit+0xec>)
 8001464:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	52002000 	.word	0x52002000
 800147c:	58024400 	.word	0x58024400
 8001480:	eaf6ed7f 	.word	0xeaf6ed7f
 8001484:	02020200 	.word	0x02020200
 8001488:	01ff0000 	.word	0x01ff0000
 800148c:	01010280 	.word	0x01010280
 8001490:	52004000 	.word	0x52004000

08001494 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_USART3_UART_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014de:	f007 f903 	bl	80086e8 <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014e8:	f7ff fd68 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 80014f0:	f009 fb33 	bl	800ab5a <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f7ff fd5f 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 8001502:	f009 fb68 	bl	800abd6 <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800150c:	f7ff fd56 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_USART3_UART_Init+0x90>)
 8001512:	f009 fae9 	bl	800aae8 <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800151c:	f7ff fd4e 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	240006f0 	.word	0x240006f0
 8001528:	40004800 	.word	0x40004800

0800152c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0b8      	sub	sp, #224	@ 0xe0
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	22b8      	movs	r2, #184	@ 0xb8
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f00a f87a 	bl	800b646 <memset>
  if(uartHandle->Instance==USART3)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <HAL_UART_MspInit+0x134>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d17c      	bne.n	8001656 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800155c:	f04f 0202 	mov.w	r2, #2
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fe78 	bl	8006268 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800157e:	f7ff fd1d 	bl	8000fbc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001582:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_UART_MspInit+0x138>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001588:	4a36      	ldr	r2, [pc, #216]	@ (8001664 <HAL_UART_MspInit+0x138>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001592:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <HAL_UART_MspInit+0x138>)
 8001594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a0:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <HAL_UART_MspInit+0x138>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001664 <HAL_UART_MspInit+0x138>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <HAL_UART_MspInit+0x138>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80015be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d8:	2307      	movs	r3, #7
 80015da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015e2:	4619      	mov	r1, r3
 80015e4:	4820      	ldr	r0, [pc, #128]	@ (8001668 <HAL_UART_MspInit+0x13c>)
 80015e6:	f003 fc99 	bl	8004f1c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_UART_MspInit+0x140>)
 80015ec:	4a20      	ldr	r2, [pc, #128]	@ (8001670 <HAL_UART_MspInit+0x144>)
 80015ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_UART_MspInit+0x140>)
 80015f2:	222d      	movs	r2, #45	@ 0x2d
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <HAL_UART_MspInit+0x140>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_UART_MspInit+0x140>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_UART_MspInit+0x140>)
 8001604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_UART_MspInit+0x140>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_UART_MspInit+0x140>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_UART_MspInit+0x140>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <HAL_UART_MspInit+0x140>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_UART_MspInit+0x140>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001628:	4810      	ldr	r0, [pc, #64]	@ (800166c <HAL_UART_MspInit+0x140>)
 800162a:	f000 fa0b 	bl	8001a44 <HAL_DMA_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001634:	f7ff fcc2 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <HAL_UART_MspInit+0x140>)
 800163c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_UART_MspInit+0x140>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2027      	movs	r0, #39	@ 0x27
 800164c:	f000 f9c5 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001650:	2027      	movs	r0, #39	@ 0x27
 8001652:	f000 f9dc 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	37e0      	adds	r7, #224	@ 0xe0
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40004800 	.word	0x40004800
 8001664:	58024400 	.word	0x58024400
 8001668:	58020c00 	.word	0x58020c00
 800166c:	24000784 	.word	0x24000784
 8001670:	40020010 	.word	0x40020010

08001674 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001688:	f7ff fe8c 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f00a f889 	bl	800b7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff fbed 	bl	8000e94 <main>
  bx  lr
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c4:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 80016c8:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 80016cc:	24000194 	.word	0x24000194
  ldr r4, =_ebss
 80016d0:	2400095c 	.word	0x2400095c

080016d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC3_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 f970 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e4:	f004 fbea 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_Init+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	4913      	ldr	r1, [pc, #76]	@ (8001744 <HAL_Init+0x6c>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_Init+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_Init+0x6c>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_Init+0x70>)
 800171a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_Init+0x74>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f814 	bl	8001750 <HAL_InitTick>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e002      	b.n	8001738 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001732:	f7ff fd0b 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	58024400 	.word	0x58024400
 8001744:	0800c710 	.word	0x0800c710
 8001748:	24000064 	.word	0x24000064
 800174c:	24000060 	.word	0x24000060

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e021      	b.n	80017a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_InitTick+0x64>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_InitTick+0x60>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f955 	bl	8001a2a <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f91f 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x68>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2400006c 	.word	0x2400006c
 80017b4:	24000060 	.word	0x24000060
 80017b8:	24000068 	.word	0x24000068

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2400006c 	.word	0x2400006c
 80017e0:	240007fc 	.word	0x240007fc

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	240007fc 	.word	0x240007fc

080017fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800180c:	4904      	ldr	r1, [pc, #16]	@ (8001820 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000400 	.word	0x58000400

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <__NVIC_SetPriorityGrouping+0x40>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	4313      	orrs	r3, r2
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <__NVIC_SetPriorityGrouping+0x40>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00
 8001868:	05fa0000 	.word	0x05fa0000

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff40 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff90 	bl	8001918 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff33 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa4 	bl	8001980 <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff feca 	bl	80017e4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e312      	b.n	8002082 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a66      	ldr	r2, [pc, #408]	@ (8001bfc <HAL_DMA_Init+0x1b8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d04a      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a65      	ldr	r2, [pc, #404]	@ (8001c00 <HAL_DMA_Init+0x1bc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d045      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a63      	ldr	r2, [pc, #396]	@ (8001c04 <HAL_DMA_Init+0x1c0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d040      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a62      	ldr	r2, [pc, #392]	@ (8001c08 <HAL_DMA_Init+0x1c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d03b      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a60      	ldr	r2, [pc, #384]	@ (8001c0c <HAL_DMA_Init+0x1c8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d036      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5f      	ldr	r2, [pc, #380]	@ (8001c10 <HAL_DMA_Init+0x1cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d031      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c14 <HAL_DMA_Init+0x1d0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d02c      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c18 <HAL_DMA_Init+0x1d4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d027      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c1c <HAL_DMA_Init+0x1d8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d022      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a59      	ldr	r2, [pc, #356]	@ (8001c20 <HAL_DMA_Init+0x1dc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d01d      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a57      	ldr	r2, [pc, #348]	@ (8001c24 <HAL_DMA_Init+0x1e0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d018      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_DMA_Init+0x1e4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a54      	ldr	r2, [pc, #336]	@ (8001c2c <HAL_DMA_Init+0x1e8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00e      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a53      	ldr	r2, [pc, #332]	@ (8001c30 <HAL_DMA_Init+0x1ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d009      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_DMA_Init+0x1f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_Init+0xb8>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a50      	ldr	r2, [pc, #320]	@ (8001c38 <HAL_DMA_Init+0x1f4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0xbc>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_DMA_Init+0xbe>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 813c 	beq.w	8001d80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a37      	ldr	r2, [pc, #220]	@ (8001bfc <HAL_DMA_Init+0x1b8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d04a      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <HAL_DMA_Init+0x1bc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d045      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <HAL_DMA_Init+0x1c0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d040      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <HAL_DMA_Init+0x1c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d03b      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_DMA_Init+0x1c8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d036      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a30      	ldr	r2, [pc, #192]	@ (8001c10 <HAL_DMA_Init+0x1cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d031      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <HAL_DMA_Init+0x1d0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02c      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <HAL_DMA_Init+0x1d4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d027      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <HAL_DMA_Init+0x1d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2a      	ldr	r2, [pc, #168]	@ (8001c20 <HAL_DMA_Init+0x1dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a28      	ldr	r2, [pc, #160]	@ (8001c24 <HAL_DMA_Init+0x1e0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a27      	ldr	r2, [pc, #156]	@ (8001c28 <HAL_DMA_Init+0x1e4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a25      	ldr	r2, [pc, #148]	@ (8001c2c <HAL_DMA_Init+0x1e8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <HAL_DMA_Init+0x1ec>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_DMA_Init+0x1f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_DMA_Init+0x174>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a21      	ldr	r2, [pc, #132]	@ (8001c38 <HAL_DMA_Init+0x1f4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d108      	bne.n	8001bca <HAL_DMA_Init+0x186>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	e007      	b.n	8001bda <HAL_DMA_Init+0x196>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bda:	e02f      	b.n	8001c3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bdc:	f7ff fe02 	bl	80017e4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d928      	bls.n	8001c3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2220      	movs	r2, #32
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e242      	b.n	8002082 <HAL_DMA_Init+0x63e>
 8001bfc:	40020010 	.word	0x40020010
 8001c00:	40020028 	.word	0x40020028
 8001c04:	40020040 	.word	0x40020040
 8001c08:	40020058 	.word	0x40020058
 8001c0c:	40020070 	.word	0x40020070
 8001c10:	40020088 	.word	0x40020088
 8001c14:	400200a0 	.word	0x400200a0
 8001c18:	400200b8 	.word	0x400200b8
 8001c1c:	40020410 	.word	0x40020410
 8001c20:	40020428 	.word	0x40020428
 8001c24:	40020440 	.word	0x40020440
 8001c28:	40020458 	.word	0x40020458
 8001c2c:	40020470 	.word	0x40020470
 8001c30:	40020488 	.word	0x40020488
 8001c34:	400204a0 	.word	0x400204a0
 8001c38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1c8      	bne.n	8001bdc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4b83      	ldr	r3, [pc, #524]	@ (8001e64 <HAL_DMA_Init+0x420>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d107      	bne.n	8001ca0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b28      	cmp	r3, #40	@ 0x28
 8001ca6:	d903      	bls.n	8001cb0 <HAL_DMA_Init+0x26c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cae:	d91f      	bls.n	8001cf0 <HAL_DMA_Init+0x2ac>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001cb6:	d903      	bls.n	8001cc0 <HAL_DMA_Init+0x27c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b42      	cmp	r3, #66	@ 0x42
 8001cbe:	d917      	bls.n	8001cf0 <HAL_DMA_Init+0x2ac>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b46      	cmp	r3, #70	@ 0x46
 8001cc6:	d903      	bls.n	8001cd0 <HAL_DMA_Init+0x28c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b48      	cmp	r3, #72	@ 0x48
 8001cce:	d90f      	bls.n	8001cf0 <HAL_DMA_Init+0x2ac>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001cd6:	d903      	bls.n	8001ce0 <HAL_DMA_Init+0x29c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b52      	cmp	r3, #82	@ 0x52
 8001cde:	d907      	bls.n	8001cf0 <HAL_DMA_Init+0x2ac>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b73      	cmp	r3, #115	@ 0x73
 8001ce6:	d905      	bls.n	8001cf4 <HAL_DMA_Init+0x2b0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b77      	cmp	r3, #119	@ 0x77
 8001cee:	d801      	bhi.n	8001cf4 <HAL_DMA_Init+0x2b0>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_DMA_Init+0x2b2>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f023 0307 	bic.w	r3, r3, #7
 8001d18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d117      	bne.n	8001d5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00e      	beq.n	8001d5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f002 fb2e 	bl	80043a0 <DMA_CheckFifoParam>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e192      	b.n	8002082 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f002 fa69 	bl	800423c <DMA_CalcBaseAndBitshift>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	223f      	movs	r2, #63	@ 0x3f
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	e0c8      	b.n	8001f12 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a38      	ldr	r2, [pc, #224]	@ (8001e68 <HAL_DMA_Init+0x424>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d022      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a37      	ldr	r2, [pc, #220]	@ (8001e6c <HAL_DMA_Init+0x428>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a35      	ldr	r2, [pc, #212]	@ (8001e70 <HAL_DMA_Init+0x42c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a34      	ldr	r2, [pc, #208]	@ (8001e74 <HAL_DMA_Init+0x430>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a32      	ldr	r2, [pc, #200]	@ (8001e78 <HAL_DMA_Init+0x434>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00e      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a31      	ldr	r2, [pc, #196]	@ (8001e7c <HAL_DMA_Init+0x438>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <HAL_DMA_Init+0x43c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_DMA_Init+0x38c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2e      	ldr	r2, [pc, #184]	@ (8001e84 <HAL_DMA_Init+0x440>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_DMA_Init+0x390>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_Init+0x392>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8092 	beq.w	8001f00 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_DMA_Init+0x424>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d021      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a20      	ldr	r2, [pc, #128]	@ (8001e6c <HAL_DMA_Init+0x428>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01c      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <HAL_DMA_Init+0x42c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_DMA_Init+0x430>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d012      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_DMA_Init+0x434>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <HAL_DMA_Init+0x438>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a18      	ldr	r2, [pc, #96]	@ (8001e80 <HAL_DMA_Init+0x43c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <HAL_DMA_Init+0x3e6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_DMA_Init+0x440>)
 8001e28:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_DMA_Init+0x444>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b40      	cmp	r3, #64	@ 0x40
 8001e50:	d01c      	beq.n	8001e8c <HAL_DMA_Init+0x448>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b80      	cmp	r3, #128	@ 0x80
 8001e58:	d102      	bne.n	8001e60 <HAL_DMA_Init+0x41c>
 8001e5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e5e:	e016      	b.n	8001e8e <HAL_DMA_Init+0x44a>
 8001e60:	2300      	movs	r3, #0
 8001e62:	e014      	b.n	8001e8e <HAL_DMA_Init+0x44a>
 8001e64:	fe10803f 	.word	0xfe10803f
 8001e68:	58025408 	.word	0x58025408
 8001e6c:	5802541c 	.word	0x5802541c
 8001e70:	58025430 	.word	0x58025430
 8001e74:	58025444 	.word	0x58025444
 8001e78:	58025458 	.word	0x58025458
 8001e7c:	5802546c 	.word	0x5802546c
 8001e80:	58025480 	.word	0x58025480
 8001e84:	58025494 	.word	0x58025494
 8001e88:	fffe000f 	.word	0xfffe000f
 8001e8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ebc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800208c <HAL_DMA_Init+0x648>)
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8002090 <HAL_DMA_Init+0x64c>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f002 f9a9 	bl	800423c <DMA_CalcBaseAndBitshift>
 8001eea:	4603      	mov	r3, r0
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e008      	b.n	8001f12 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0b7      	b.n	8002082 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5f      	ldr	r2, [pc, #380]	@ (8002094 <HAL_DMA_Init+0x650>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d072      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	@ (8002098 <HAL_DMA_Init+0x654>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d06d      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800209c <HAL_DMA_Init+0x658>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d068      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5a      	ldr	r2, [pc, #360]	@ (80020a0 <HAL_DMA_Init+0x65c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d063      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a59      	ldr	r2, [pc, #356]	@ (80020a4 <HAL_DMA_Init+0x660>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a57      	ldr	r2, [pc, #348]	@ (80020a8 <HAL_DMA_Init+0x664>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d059      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_DMA_Init+0x668>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d054      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a54      	ldr	r2, [pc, #336]	@ (80020b0 <HAL_DMA_Init+0x66c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04f      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a53      	ldr	r2, [pc, #332]	@ (80020b4 <HAL_DMA_Init+0x670>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04a      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a51      	ldr	r2, [pc, #324]	@ (80020b8 <HAL_DMA_Init+0x674>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d045      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a50      	ldr	r2, [pc, #320]	@ (80020bc <HAL_DMA_Init+0x678>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d040      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	@ (80020c0 <HAL_DMA_Init+0x67c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d03b      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80020c4 <HAL_DMA_Init+0x680>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d036      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	@ (80020c8 <HAL_DMA_Init+0x684>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80020cc <HAL_DMA_Init+0x688>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d02c      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a48      	ldr	r2, [pc, #288]	@ (80020d0 <HAL_DMA_Init+0x68c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d027      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a47      	ldr	r2, [pc, #284]	@ (80020d4 <HAL_DMA_Init+0x690>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a45      	ldr	r2, [pc, #276]	@ (80020d8 <HAL_DMA_Init+0x694>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01d      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a44      	ldr	r2, [pc, #272]	@ (80020dc <HAL_DMA_Init+0x698>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d018      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a42      	ldr	r2, [pc, #264]	@ (80020e0 <HAL_DMA_Init+0x69c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a41      	ldr	r2, [pc, #260]	@ (80020e4 <HAL_DMA_Init+0x6a0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3f      	ldr	r2, [pc, #252]	@ (80020e8 <HAL_DMA_Init+0x6a4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d009      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ec <HAL_DMA_Init+0x6a8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d004      	beq.n	8002002 <HAL_DMA_Init+0x5be>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80020f0 <HAL_DMA_Init+0x6ac>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_DMA_Init+0x5c2>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_DMA_Init+0x5c4>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d032      	beq.n	8002072 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f002 fa43 	bl	8004498 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b80      	cmp	r3, #128	@ 0x80
 8002018:	d102      	bne.n	8002020 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002034:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_DMA_Init+0x61c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b08      	cmp	r3, #8
 8002044:	d80c      	bhi.n	8002060 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f002 fac0 	bl	80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	e008      	b.n	8002072 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	a7fdabf8 	.word	0xa7fdabf8
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
 80020d4:	58025408 	.word	0x58025408
 80020d8:	5802541c 	.word	0x5802541c
 80020dc:	58025430 	.word	0x58025430
 80020e0:	58025444 	.word	0x58025444
 80020e4:	58025458 	.word	0x58025458
 80020e8:	5802546c 	.word	0x5802546c
 80020ec:	58025480 	.word	0x58025480
 80020f0:	58025494 	.word	0x58025494

080020f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e226      	b.n	800255e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_DMA_Start_IT+0x2a>
 800211a:	2302      	movs	r3, #2
 800211c:	e21f      	b.n	800255e <HAL_DMA_Start_IT+0x46a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	f040 820a 	bne.w	8002548 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a68      	ldr	r2, [pc, #416]	@ (80022e8 <HAL_DMA_Start_IT+0x1f4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04a      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a66      	ldr	r2, [pc, #408]	@ (80022ec <HAL_DMA_Start_IT+0x1f8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d045      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_DMA_Start_IT+0x1fc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d040      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_DMA_Start_IT+0x200>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d03b      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a62      	ldr	r2, [pc, #392]	@ (80022f8 <HAL_DMA_Start_IT+0x204>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d036      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_DMA_Start_IT+0x208>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d031      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5f      	ldr	r2, [pc, #380]	@ (8002300 <HAL_DMA_Start_IT+0x20c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d02c      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_DMA_Start_IT+0x210>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d027      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5c      	ldr	r2, [pc, #368]	@ (8002308 <HAL_DMA_Start_IT+0x214>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HAL_DMA_Start_IT+0x218>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a59      	ldr	r2, [pc, #356]	@ (8002310 <HAL_DMA_Start_IT+0x21c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d018      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a57      	ldr	r2, [pc, #348]	@ (8002314 <HAL_DMA_Start_IT+0x220>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a56      	ldr	r2, [pc, #344]	@ (8002318 <HAL_DMA_Start_IT+0x224>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00e      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a54      	ldr	r2, [pc, #336]	@ (800231c <HAL_DMA_Start_IT+0x228>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a53      	ldr	r2, [pc, #332]	@ (8002320 <HAL_DMA_Start_IT+0x22c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_DMA_Start_IT+0xee>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a51      	ldr	r2, [pc, #324]	@ (8002324 <HAL_DMA_Start_IT+0x230>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <HAL_DMA_Start_IT+0x100>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e007      	b.n	8002204 <HAL_DMA_Start_IT+0x110>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f001 fe6a 	bl	8003ee4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <HAL_DMA_Start_IT+0x1f4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d04a      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a33      	ldr	r2, [pc, #204]	@ (80022ec <HAL_DMA_Start_IT+0x1f8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d045      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <HAL_DMA_Start_IT+0x1fc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d040      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <HAL_DMA_Start_IT+0x200>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03b      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2e      	ldr	r2, [pc, #184]	@ (80022f8 <HAL_DMA_Start_IT+0x204>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d036      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2d      	ldr	r2, [pc, #180]	@ (80022fc <HAL_DMA_Start_IT+0x208>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2b      	ldr	r2, [pc, #172]	@ (8002300 <HAL_DMA_Start_IT+0x20c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02c      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2a      	ldr	r2, [pc, #168]	@ (8002304 <HAL_DMA_Start_IT+0x210>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d027      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a28      	ldr	r2, [pc, #160]	@ (8002308 <HAL_DMA_Start_IT+0x214>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a27      	ldr	r2, [pc, #156]	@ (800230c <HAL_DMA_Start_IT+0x218>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d01d      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <HAL_DMA_Start_IT+0x21c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d018      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a24      	ldr	r2, [pc, #144]	@ (8002314 <HAL_DMA_Start_IT+0x220>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_DMA_Start_IT+0x224>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a21      	ldr	r2, [pc, #132]	@ (800231c <HAL_DMA_Start_IT+0x228>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_DMA_Start_IT+0x22c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_Start_IT+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <HAL_DMA_Start_IT+0x230>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_DMA_Start_IT+0x1c0>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_Start_IT+0x1c2>
 80022b4:	2300      	movs	r3, #0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d036      	beq.n	8002328 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 021e 	bic.w	r2, r3, #30
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0216 	orr.w	r2, r2, #22
 80022cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03e      	beq.n	8002354 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0208 	orr.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e035      	b.n	8002354 <HAL_DMA_Start_IT+0x260>
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 020e 	bic.w	r2, r3, #14
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 020a 	orr.w	r2, r2, #10
 800233a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0204 	orr.w	r2, r2, #4
 8002352:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a83      	ldr	r2, [pc, #524]	@ (8002568 <HAL_DMA_Start_IT+0x474>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d072      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a82      	ldr	r2, [pc, #520]	@ (800256c <HAL_DMA_Start_IT+0x478>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d06d      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a80      	ldr	r2, [pc, #512]	@ (8002570 <HAL_DMA_Start_IT+0x47c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d068      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7f      	ldr	r2, [pc, #508]	@ (8002574 <HAL_DMA_Start_IT+0x480>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d063      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7d      	ldr	r2, [pc, #500]	@ (8002578 <HAL_DMA_Start_IT+0x484>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d05e      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7c      	ldr	r2, [pc, #496]	@ (800257c <HAL_DMA_Start_IT+0x488>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d059      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7a      	ldr	r2, [pc, #488]	@ (8002580 <HAL_DMA_Start_IT+0x48c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d054      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a79      	ldr	r2, [pc, #484]	@ (8002584 <HAL_DMA_Start_IT+0x490>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04f      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a77      	ldr	r2, [pc, #476]	@ (8002588 <HAL_DMA_Start_IT+0x494>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d04a      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a76      	ldr	r2, [pc, #472]	@ (800258c <HAL_DMA_Start_IT+0x498>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d045      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a74      	ldr	r2, [pc, #464]	@ (8002590 <HAL_DMA_Start_IT+0x49c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d040      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a73      	ldr	r2, [pc, #460]	@ (8002594 <HAL_DMA_Start_IT+0x4a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d03b      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a71      	ldr	r2, [pc, #452]	@ (8002598 <HAL_DMA_Start_IT+0x4a4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d036      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a70      	ldr	r2, [pc, #448]	@ (800259c <HAL_DMA_Start_IT+0x4a8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d031      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6e      	ldr	r2, [pc, #440]	@ (80025a0 <HAL_DMA_Start_IT+0x4ac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02c      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6d      	ldr	r2, [pc, #436]	@ (80025a4 <HAL_DMA_Start_IT+0x4b0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d027      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <HAL_DMA_Start_IT+0x4b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6a      	ldr	r2, [pc, #424]	@ (80025ac <HAL_DMA_Start_IT+0x4b8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01d      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a68      	ldr	r2, [pc, #416]	@ (80025b0 <HAL_DMA_Start_IT+0x4bc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d018      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a67      	ldr	r2, [pc, #412]	@ (80025b4 <HAL_DMA_Start_IT+0x4c0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_DMA_Start_IT+0x4c4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a64      	ldr	r2, [pc, #400]	@ (80025bc <HAL_DMA_Start_IT+0x4c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a62      	ldr	r2, [pc, #392]	@ (80025c0 <HAL_DMA_Start_IT+0x4cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_DMA_Start_IT+0x350>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a61      	ldr	r2, [pc, #388]	@ (80025c4 <HAL_DMA_Start_IT+0x4d0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Start_IT+0x354>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_DMA_Start_IT+0x356>
 8002448:	2300      	movs	r3, #0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01a      	beq.n	8002484 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002482:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a37      	ldr	r2, [pc, #220]	@ (8002568 <HAL_DMA_Start_IT+0x474>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a36      	ldr	r2, [pc, #216]	@ (800256c <HAL_DMA_Start_IT+0x478>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d045      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a34      	ldr	r2, [pc, #208]	@ (8002570 <HAL_DMA_Start_IT+0x47c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a33      	ldr	r2, [pc, #204]	@ (8002574 <HAL_DMA_Start_IT+0x480>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d03b      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a31      	ldr	r2, [pc, #196]	@ (8002578 <HAL_DMA_Start_IT+0x484>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d036      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a30      	ldr	r2, [pc, #192]	@ (800257c <HAL_DMA_Start_IT+0x488>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d031      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002580 <HAL_DMA_Start_IT+0x48c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02c      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <HAL_DMA_Start_IT+0x490>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d027      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002588 <HAL_DMA_Start_IT+0x494>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2a      	ldr	r2, [pc, #168]	@ (800258c <HAL_DMA_Start_IT+0x498>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <HAL_DMA_Start_IT+0x49c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <HAL_DMA_Start_IT+0x4a0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a25      	ldr	r2, [pc, #148]	@ (8002598 <HAL_DMA_Start_IT+0x4a4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_DMA_Start_IT+0x4a8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <HAL_DMA_Start_IT+0x4ac>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Start_IT+0x430>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <HAL_DMA_Start_IT+0x4b0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <HAL_DMA_Start_IT+0x442>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e012      	b.n	800255c <HAL_DMA_Start_IT+0x468>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e009      	b.n	800255c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800255c:	7dfb      	ldrb	r3, [r7, #23]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020010 	.word	0x40020010
 800256c:	40020028 	.word	0x40020028
 8002570:	40020040 	.word	0x40020040
 8002574:	40020058 	.word	0x40020058
 8002578:	40020070 	.word	0x40020070
 800257c:	40020088 	.word	0x40020088
 8002580:	400200a0 	.word	0x400200a0
 8002584:	400200b8 	.word	0x400200b8
 8002588:	40020410 	.word	0x40020410
 800258c:	40020428 	.word	0x40020428
 8002590:	40020440 	.word	0x40020440
 8002594:	40020458 	.word	0x40020458
 8002598:	40020470 	.word	0x40020470
 800259c:	40020488 	.word	0x40020488
 80025a0:	400204a0 	.word	0x400204a0
 80025a4:	400204b8 	.word	0x400204b8
 80025a8:	58025408 	.word	0x58025408
 80025ac:	5802541c 	.word	0x5802541c
 80025b0:	58025430 	.word	0x58025430
 80025b4:	58025444 	.word	0x58025444
 80025b8:	58025458 	.word	0x58025458
 80025bc:	5802546c 	.word	0x5802546c
 80025c0:	58025480 	.word	0x58025480
 80025c4:	58025494 	.word	0x58025494

080025c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff f908 	bl	80017e4 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e2dc      	b.n	8002b9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e2cd      	b.n	8002b9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a76      	ldr	r2, [pc, #472]	@ (80027dc <HAL_DMA_Abort+0x214>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04a      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a74      	ldr	r2, [pc, #464]	@ (80027e0 <HAL_DMA_Abort+0x218>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d045      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a73      	ldr	r2, [pc, #460]	@ (80027e4 <HAL_DMA_Abort+0x21c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d040      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a71      	ldr	r2, [pc, #452]	@ (80027e8 <HAL_DMA_Abort+0x220>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d03b      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a70      	ldr	r2, [pc, #448]	@ (80027ec <HAL_DMA_Abort+0x224>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d036      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_DMA_Abort+0x228>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a6d      	ldr	r2, [pc, #436]	@ (80027f4 <HAL_DMA_Abort+0x22c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02c      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6b      	ldr	r2, [pc, #428]	@ (80027f8 <HAL_DMA_Abort+0x230>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d027      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6a      	ldr	r2, [pc, #424]	@ (80027fc <HAL_DMA_Abort+0x234>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d022      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a68      	ldr	r2, [pc, #416]	@ (8002800 <HAL_DMA_Abort+0x238>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01d      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a67      	ldr	r2, [pc, #412]	@ (8002804 <HAL_DMA_Abort+0x23c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d018      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a65      	ldr	r2, [pc, #404]	@ (8002808 <HAL_DMA_Abort+0x240>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a64      	ldr	r2, [pc, #400]	@ (800280c <HAL_DMA_Abort+0x244>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00e      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a62      	ldr	r2, [pc, #392]	@ (8002810 <HAL_DMA_Abort+0x248>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a61      	ldr	r2, [pc, #388]	@ (8002814 <HAL_DMA_Abort+0x24c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5f      	ldr	r2, [pc, #380]	@ (8002818 <HAL_DMA_Abort+0x250>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_DMA_Abort+0xda>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_Abort+0xdc>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 021e 	bic.w	r2, r2, #30
 80026b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e00a      	b.n	80026e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	@ (80027dc <HAL_DMA_Abort+0x214>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d072      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3a      	ldr	r2, [pc, #232]	@ (80027e0 <HAL_DMA_Abort+0x218>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d06d      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_DMA_Abort+0x21c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d068      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a37      	ldr	r2, [pc, #220]	@ (80027e8 <HAL_DMA_Abort+0x220>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d063      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	@ (80027ec <HAL_DMA_Abort+0x224>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d05e      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a34      	ldr	r2, [pc, #208]	@ (80027f0 <HAL_DMA_Abort+0x228>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d059      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <HAL_DMA_Abort+0x22c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d054      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a31      	ldr	r2, [pc, #196]	@ (80027f8 <HAL_DMA_Abort+0x230>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d04f      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a30      	ldr	r2, [pc, #192]	@ (80027fc <HAL_DMA_Abort+0x234>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04a      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2e      	ldr	r2, [pc, #184]	@ (8002800 <HAL_DMA_Abort+0x238>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d045      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_DMA_Abort+0x23c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d040      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2b      	ldr	r2, [pc, #172]	@ (8002808 <HAL_DMA_Abort+0x240>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03b      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_DMA_Abort+0x244>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d036      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a28      	ldr	r2, [pc, #160]	@ (8002810 <HAL_DMA_Abort+0x248>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a27      	ldr	r2, [pc, #156]	@ (8002814 <HAL_DMA_Abort+0x24c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d02c      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a25      	ldr	r2, [pc, #148]	@ (8002818 <HAL_DMA_Abort+0x250>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d027      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a24      	ldr	r2, [pc, #144]	@ (800281c <HAL_DMA_Abort+0x254>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <HAL_DMA_Abort+0x258>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_DMA_Abort+0x25c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002828 <HAL_DMA_Abort+0x260>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_DMA_Abort+0x264>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_DMA_Abort+0x268>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002834 <HAL_DMA_Abort+0x26c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_DMA_Abort+0x270>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d132      	bne.n	800283c <HAL_DMA_Abort+0x274>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e031      	b.n	800283e <HAL_DMA_Abort+0x276>
 80027da:	bf00      	nop
 80027dc:	40020010 	.word	0x40020010
 80027e0:	40020028 	.word	0x40020028
 80027e4:	40020040 	.word	0x40020040
 80027e8:	40020058 	.word	0x40020058
 80027ec:	40020070 	.word	0x40020070
 80027f0:	40020088 	.word	0x40020088
 80027f4:	400200a0 	.word	0x400200a0
 80027f8:	400200b8 	.word	0x400200b8
 80027fc:	40020410 	.word	0x40020410
 8002800:	40020428 	.word	0x40020428
 8002804:	40020440 	.word	0x40020440
 8002808:	40020458 	.word	0x40020458
 800280c:	40020470 	.word	0x40020470
 8002810:	40020488 	.word	0x40020488
 8002814:	400204a0 	.word	0x400204a0
 8002818:	400204b8 	.word	0x400204b8
 800281c:	58025408 	.word	0x58025408
 8002820:	5802541c 	.word	0x5802541c
 8002824:	58025430 	.word	0x58025430
 8002828:	58025444 	.word	0x58025444
 800282c:	58025458 	.word	0x58025458
 8002830:	5802546c 	.word	0x5802546c
 8002834:	58025480 	.word	0x58025480
 8002838:	58025494 	.word	0x58025494
 800283c:	2300      	movs	r3, #0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002850:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6d      	ldr	r2, [pc, #436]	@ (8002a0c <HAL_DMA_Abort+0x444>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04a      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	@ (8002a10 <HAL_DMA_Abort+0x448>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6a      	ldr	r2, [pc, #424]	@ (8002a14 <HAL_DMA_Abort+0x44c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a68      	ldr	r2, [pc, #416]	@ (8002a18 <HAL_DMA_Abort+0x450>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d03b      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a67      	ldr	r2, [pc, #412]	@ (8002a1c <HAL_DMA_Abort+0x454>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d036      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a65      	ldr	r2, [pc, #404]	@ (8002a20 <HAL_DMA_Abort+0x458>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a64      	ldr	r2, [pc, #400]	@ (8002a24 <HAL_DMA_Abort+0x45c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d02c      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a62      	ldr	r2, [pc, #392]	@ (8002a28 <HAL_DMA_Abort+0x460>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a61      	ldr	r2, [pc, #388]	@ (8002a2c <HAL_DMA_Abort+0x464>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002a30 <HAL_DMA_Abort+0x468>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002a34 <HAL_DMA_Abort+0x46c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d018      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002a38 <HAL_DMA_Abort+0x470>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002a3c <HAL_DMA_Abort+0x474>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a59      	ldr	r2, [pc, #356]	@ (8002a40 <HAL_DMA_Abort+0x478>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <HAL_DMA_Abort+0x47c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a56      	ldr	r2, [pc, #344]	@ (8002a48 <HAL_DMA_Abort+0x480>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_Abort+0x33c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e007      	b.n	8002914 <HAL_DMA_Abort+0x34c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002914:	e013      	b.n	800293e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002916:	f7fe ff65 	bl	80017e4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b05      	cmp	r3, #5
 8002922:	d90c      	bls.n	800293e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e12d      	b.n	8002b9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a0c <HAL_DMA_Abort+0x444>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d04a      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_DMA_Abort+0x448>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d045      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2c      	ldr	r2, [pc, #176]	@ (8002a14 <HAL_DMA_Abort+0x44c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d040      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a18 <HAL_DMA_Abort+0x450>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d03b      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_DMA_Abort+0x454>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d036      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_DMA_Abort+0x458>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d031      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a26      	ldr	r2, [pc, #152]	@ (8002a24 <HAL_DMA_Abort+0x45c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d02c      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a24      	ldr	r2, [pc, #144]	@ (8002a28 <HAL_DMA_Abort+0x460>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d027      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <HAL_DMA_Abort+0x464>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <HAL_DMA_Abort+0x468>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <HAL_DMA_Abort+0x46c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_DMA_Abort+0x470>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a3c <HAL_DMA_Abort+0x474>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <HAL_DMA_Abort+0x478>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1a      	ldr	r2, [pc, #104]	@ (8002a44 <HAL_DMA_Abort+0x47c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a18      	ldr	r2, [pc, #96]	@ (8002a48 <HAL_DMA_Abort+0x480>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_Abort+0x426>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_Abort+0x428>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02b      	beq.n	8002a4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	223f      	movs	r2, #63	@ 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	e02a      	b.n	8002a62 <HAL_DMA_Abort+0x49a>
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba4 <HAL_DMA_Abort+0x5dc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d072      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba8 <HAL_DMA_Abort+0x5e0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d06d      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8002bac <HAL_DMA_Abort+0x5e4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d068      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb0 <HAL_DMA_Abort+0x5e8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d063      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a49      	ldr	r2, [pc, #292]	@ (8002bb4 <HAL_DMA_Abort+0x5ec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d05e      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a47      	ldr	r2, [pc, #284]	@ (8002bb8 <HAL_DMA_Abort+0x5f0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d059      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a46      	ldr	r2, [pc, #280]	@ (8002bbc <HAL_DMA_Abort+0x5f4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d054      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a44      	ldr	r2, [pc, #272]	@ (8002bc0 <HAL_DMA_Abort+0x5f8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04f      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a43      	ldr	r2, [pc, #268]	@ (8002bc4 <HAL_DMA_Abort+0x5fc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a41      	ldr	r2, [pc, #260]	@ (8002bc8 <HAL_DMA_Abort+0x600>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a40      	ldr	r2, [pc, #256]	@ (8002bcc <HAL_DMA_Abort+0x604>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8002bd0 <HAL_DMA_Abort+0x608>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd4 <HAL_DMA_Abort+0x60c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd8 <HAL_DMA_Abort+0x610>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3a      	ldr	r2, [pc, #232]	@ (8002bdc <HAL_DMA_Abort+0x614>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_DMA_Abort+0x618>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a37      	ldr	r2, [pc, #220]	@ (8002be4 <HAL_DMA_Abort+0x61c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a35      	ldr	r2, [pc, #212]	@ (8002be8 <HAL_DMA_Abort+0x620>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a34      	ldr	r2, [pc, #208]	@ (8002bec <HAL_DMA_Abort+0x624>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a32      	ldr	r2, [pc, #200]	@ (8002bf0 <HAL_DMA_Abort+0x628>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a31      	ldr	r2, [pc, #196]	@ (8002bf4 <HAL_DMA_Abort+0x62c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf8 <HAL_DMA_Abort+0x630>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2e      	ldr	r2, [pc, #184]	@ (8002bfc <HAL_DMA_Abort+0x634>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c00 <HAL_DMA_Abort+0x638>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Abort+0x58e>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_Abort+0x590>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40020010 	.word	0x40020010
 8002ba8:	40020028 	.word	0x40020028
 8002bac:	40020040 	.word	0x40020040
 8002bb0:	40020058 	.word	0x40020058
 8002bb4:	40020070 	.word	0x40020070
 8002bb8:	40020088 	.word	0x40020088
 8002bbc:	400200a0 	.word	0x400200a0
 8002bc0:	400200b8 	.word	0x400200b8
 8002bc4:	40020410 	.word	0x40020410
 8002bc8:	40020428 	.word	0x40020428
 8002bcc:	40020440 	.word	0x40020440
 8002bd0:	40020458 	.word	0x40020458
 8002bd4:	40020470 	.word	0x40020470
 8002bd8:	40020488 	.word	0x40020488
 8002bdc:	400204a0 	.word	0x400204a0
 8002be0:	400204b8 	.word	0x400204b8
 8002be4:	58025408 	.word	0x58025408
 8002be8:	5802541c 	.word	0x5802541c
 8002bec:	58025430 	.word	0x58025430
 8002bf0:	58025444 	.word	0x58025444
 8002bf4:	58025458 	.word	0x58025458
 8002bf8:	5802546c 	.word	0x5802546c
 8002bfc:	58025480 	.word	0x58025480
 8002c00:	58025494 	.word	0x58025494

08002c04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e237      	b.n	8003086 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e22c      	b.n	8003086 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_DMA_Abort_IT+0x1a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d04a      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002da8 <HAL_DMA_Abort_IT+0x1a4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d045      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a59      	ldr	r2, [pc, #356]	@ (8002dac <HAL_DMA_Abort_IT+0x1a8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d040      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a58      	ldr	r2, [pc, #352]	@ (8002db0 <HAL_DMA_Abort_IT+0x1ac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d03b      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a56      	ldr	r2, [pc, #344]	@ (8002db4 <HAL_DMA_Abort_IT+0x1b0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d036      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a55      	ldr	r2, [pc, #340]	@ (8002db8 <HAL_DMA_Abort_IT+0x1b4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d031      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a53      	ldr	r2, [pc, #332]	@ (8002dbc <HAL_DMA_Abort_IT+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02c      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d027      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a50      	ldr	r2, [pc, #320]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d022      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01d      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a4d      	ldr	r2, [pc, #308]	@ (8002dcc <HAL_DMA_Abort_IT+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d018      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00e      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a49      	ldr	r2, [pc, #292]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <HAL_DMA_Abort_IT+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a46      	ldr	r2, [pc, #280]	@ (8002de0 <HAL_DMA_Abort_IT+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Abort_IT+0xcc>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_DMA_Abort_IT+0xce>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8086 	beq.w	8002de4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_DMA_Abort_IT+0x1a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2e      	ldr	r2, [pc, #184]	@ (8002da8 <HAL_DMA_Abort_IT+0x1a4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d045      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8002dac <HAL_DMA_Abort_IT+0x1a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <HAL_DMA_Abort_IT+0x1ac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d03b      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <HAL_DMA_Abort_IT+0x1b0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a28      	ldr	r2, [pc, #160]	@ (8002db8 <HAL_DMA_Abort_IT+0x1b4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a26      	ldr	r2, [pc, #152]	@ (8002dbc <HAL_DMA_Abort_IT+0x1b8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a25      	ldr	r2, [pc, #148]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1bc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1c0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d022      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a22      	ldr	r2, [pc, #136]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d01d      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a20      	ldr	r2, [pc, #128]	@ (8002dcc <HAL_DMA_Abort_IT+0x1c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d018      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1d0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1d4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	@ (8002ddc <HAL_DMA_Abort_IT+0x1d8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <HAL_DMA_Abort_IT+0x1dc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <HAL_DMA_Abort_IT+0x18e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e178      	b.n	8003084 <HAL_DMA_Abort_IT+0x480>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e16f      	b.n	8003084 <HAL_DMA_Abort_IT+0x480>
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020e 	bic.w	r2, r2, #14
 8002df2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6c      	ldr	r2, [pc, #432]	@ (8002fac <HAL_DMA_Abort_IT+0x3a8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6b      	ldr	r2, [pc, #428]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3ac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d045      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a69      	ldr	r2, [pc, #420]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3b0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d040      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a68      	ldr	r2, [pc, #416]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3b4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03b      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a66      	ldr	r2, [pc, #408]	@ (8002fbc <HAL_DMA_Abort_IT+0x3b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d036      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a65      	ldr	r2, [pc, #404]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a63      	ldr	r2, [pc, #396]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02c      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a62      	ldr	r2, [pc, #392]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d027      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a60      	ldr	r2, [pc, #384]	@ (8002fcc <HAL_DMA_Abort_IT+0x3c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01d      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5a      	ldr	r2, [pc, #360]	@ (8002fdc <HAL_DMA_Abort_IT+0x3d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a59      	ldr	r2, [pc, #356]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a57      	ldr	r2, [pc, #348]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3e0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <HAL_DMA_Abort_IT+0x2a2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e007      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x2b2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3c      	ldr	r2, [pc, #240]	@ (8002fac <HAL_DMA_Abort_IT+0x3a8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3ac>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a39      	ldr	r2, [pc, #228]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3b0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a37      	ldr	r2, [pc, #220]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3b4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a36      	ldr	r2, [pc, #216]	@ (8002fbc <HAL_DMA_Abort_IT+0x3b8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a34      	ldr	r2, [pc, #208]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3bc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a33      	ldr	r2, [pc, #204]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3c0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3c4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <HAL_DMA_Abort_IT+0x3c8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3cc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3d0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3d4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2a      	ldr	r2, [pc, #168]	@ (8002fdc <HAL_DMA_Abort_IT+0x3d8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3dc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a27      	ldr	r2, [pc, #156]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3e0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3e4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a24      	ldr	r2, [pc, #144]	@ (8002fec <HAL_DMA_Abort_IT+0x3e8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3ec>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3f0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	@ (8002ffc <HAL_DMA_Abort_IT+0x3f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_DMA_Abort_IT+0x3fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	@ (8003004 <HAL_DMA_Abort_IT+0x400>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_DMA_Abort_IT+0x404>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d132      	bne.n	800300c <HAL_DMA_Abort_IT+0x408>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e031      	b.n	800300e <HAL_DMA_Abort_IT+0x40a>
 8002faa:	bf00      	nop
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8
 8002fec:	58025408 	.word	0x58025408
 8002ff0:	5802541c 	.word	0x5802541c
 8002ff4:	58025430 	.word	0x58025430
 8002ff8:	58025444 	.word	0x58025444
 8002ffc:	58025458 	.word	0x58025458
 8003000:	5802546c 	.word	0x5802546c
 8003004:	58025480 	.word	0x58025480
 8003008:	58025494 	.word	0x58025494
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d028      	beq.n	8003064 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003020:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2201      	movs	r2, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003040:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003058:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003062:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop

08003090 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800309c:	4b67      	ldr	r3, [pc, #412]	@ (800323c <HAL_DMA_IRQHandler+0x1ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a67      	ldr	r2, [pc, #412]	@ (8003240 <HAL_DMA_IRQHandler+0x1b0>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003244 <HAL_DMA_IRQHandler+0x1b4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d04a      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003248 <HAL_DMA_IRQHandler+0x1b8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d045      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5c      	ldr	r2, [pc, #368]	@ (800324c <HAL_DMA_IRQHandler+0x1bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d040      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_DMA_IRQHandler+0x1c0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d03b      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a59      	ldr	r2, [pc, #356]	@ (8003254 <HAL_DMA_IRQHandler+0x1c4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d036      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a57      	ldr	r2, [pc, #348]	@ (8003258 <HAL_DMA_IRQHandler+0x1c8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d031      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a56      	ldr	r2, [pc, #344]	@ (800325c <HAL_DMA_IRQHandler+0x1cc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d02c      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a54      	ldr	r2, [pc, #336]	@ (8003260 <HAL_DMA_IRQHandler+0x1d0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d027      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a53      	ldr	r2, [pc, #332]	@ (8003264 <HAL_DMA_IRQHandler+0x1d4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a51      	ldr	r2, [pc, #324]	@ (8003268 <HAL_DMA_IRQHandler+0x1d8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01d      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a50      	ldr	r2, [pc, #320]	@ (800326c <HAL_DMA_IRQHandler+0x1dc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4e      	ldr	r2, [pc, #312]	@ (8003270 <HAL_DMA_IRQHandler+0x1e0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4d      	ldr	r2, [pc, #308]	@ (8003274 <HAL_DMA_IRQHandler+0x1e4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <HAL_DMA_IRQHandler+0x1e8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <HAL_DMA_IRQHandler+0x1ec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a48      	ldr	r2, [pc, #288]	@ (8003280 <HAL_DMA_IRQHandler+0x1f0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_DMA_IRQHandler+0xd6>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_DMA_IRQHandler+0xd8>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 842b 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2208      	movs	r2, #8
 8003178:	409a      	lsls	r2, r3
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80a2 	beq.w	80032c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2e      	ldr	r2, [pc, #184]	@ (8003244 <HAL_DMA_IRQHandler+0x1b4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2d      	ldr	r2, [pc, #180]	@ (8003248 <HAL_DMA_IRQHandler+0x1b8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2b      	ldr	r2, [pc, #172]	@ (800324c <HAL_DMA_IRQHandler+0x1bc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003250 <HAL_DMA_IRQHandler+0x1c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a28      	ldr	r2, [pc, #160]	@ (8003254 <HAL_DMA_IRQHandler+0x1c4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <HAL_DMA_IRQHandler+0x1c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a25      	ldr	r2, [pc, #148]	@ (800325c <HAL_DMA_IRQHandler+0x1cc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a24      	ldr	r2, [pc, #144]	@ (8003260 <HAL_DMA_IRQHandler+0x1d0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <HAL_DMA_IRQHandler+0x1d4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <HAL_DMA_IRQHandler+0x1d8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1f      	ldr	r2, [pc, #124]	@ (800326c <HAL_DMA_IRQHandler+0x1dc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <HAL_DMA_IRQHandler+0x1e0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <HAL_DMA_IRQHandler+0x1e4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1b      	ldr	r2, [pc, #108]	@ (8003278 <HAL_DMA_IRQHandler+0x1e8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	@ (800327c <HAL_DMA_IRQHandler+0x1ec>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <HAL_DMA_IRQHandler+0x1f0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d12f      	bne.n	8003284 <HAL_DMA_IRQHandler+0x1f4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e02e      	b.n	8003298 <HAL_DMA_IRQHandler+0x208>
 800323a:	bf00      	nop
 800323c:	24000060 	.word	0x24000060
 8003240:	1b4e81b5 	.word	0x1b4e81b5
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2208      	movs	r2, #8
 80032b6:	409a      	lsls	r2, r3
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d06e      	beq.n	80033bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a69      	ldr	r2, [pc, #420]	@ (8003488 <HAL_DMA_IRQHandler+0x3f8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	@ (800348c <HAL_DMA_IRQHandler+0x3fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a66      	ldr	r2, [pc, #408]	@ (8003490 <HAL_DMA_IRQHandler+0x400>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a64      	ldr	r2, [pc, #400]	@ (8003494 <HAL_DMA_IRQHandler+0x404>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a63      	ldr	r2, [pc, #396]	@ (8003498 <HAL_DMA_IRQHandler+0x408>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a61      	ldr	r2, [pc, #388]	@ (800349c <HAL_DMA_IRQHandler+0x40c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a60      	ldr	r2, [pc, #384]	@ (80034a0 <HAL_DMA_IRQHandler+0x410>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5e      	ldr	r2, [pc, #376]	@ (80034a4 <HAL_DMA_IRQHandler+0x414>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5d      	ldr	r2, [pc, #372]	@ (80034a8 <HAL_DMA_IRQHandler+0x418>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5b      	ldr	r2, [pc, #364]	@ (80034ac <HAL_DMA_IRQHandler+0x41c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5a      	ldr	r2, [pc, #360]	@ (80034b0 <HAL_DMA_IRQHandler+0x420>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_DMA_IRQHandler+0x424>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_DMA_IRQHandler+0x428>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a55      	ldr	r2, [pc, #340]	@ (80034bc <HAL_DMA_IRQHandler+0x42c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a54      	ldr	r2, [pc, #336]	@ (80034c0 <HAL_DMA_IRQHandler+0x430>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a52      	ldr	r2, [pc, #328]	@ (80034c4 <HAL_DMA_IRQHandler+0x434>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10a      	bne.n	8003394 <HAL_DMA_IRQHandler+0x304>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e003      	b.n	800339c <HAL_DMA_IRQHandler+0x30c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f043 0202 	orr.w	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 808f 	beq.w	80034f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003488 <HAL_DMA_IRQHandler+0x3f8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d04a      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2a      	ldr	r2, [pc, #168]	@ (800348c <HAL_DMA_IRQHandler+0x3fc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d045      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a29      	ldr	r2, [pc, #164]	@ (8003490 <HAL_DMA_IRQHandler+0x400>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d040      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_DMA_IRQHandler+0x404>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d03b      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a26      	ldr	r2, [pc, #152]	@ (8003498 <HAL_DMA_IRQHandler+0x408>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d036      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a24      	ldr	r2, [pc, #144]	@ (800349c <HAL_DMA_IRQHandler+0x40c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a23      	ldr	r2, [pc, #140]	@ (80034a0 <HAL_DMA_IRQHandler+0x410>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d02c      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <HAL_DMA_IRQHandler+0x414>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d027      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a20      	ldr	r2, [pc, #128]	@ (80034a8 <HAL_DMA_IRQHandler+0x418>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1e      	ldr	r2, [pc, #120]	@ (80034ac <HAL_DMA_IRQHandler+0x41c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01d      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <HAL_DMA_IRQHandler+0x420>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1b      	ldr	r2, [pc, #108]	@ (80034b4 <HAL_DMA_IRQHandler+0x424>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1a      	ldr	r2, [pc, #104]	@ (80034b8 <HAL_DMA_IRQHandler+0x428>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <HAL_DMA_IRQHandler+0x42c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d009      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <HAL_DMA_IRQHandler+0x430>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <HAL_DMA_IRQHandler+0x434>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d12a      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x438>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e023      	b.n	80034d0 <HAL_DMA_IRQHandler+0x440>
 8003488:	40020010 	.word	0x40020010
 800348c:	40020028 	.word	0x40020028
 8003490:	40020040 	.word	0x40020040
 8003494:	40020058 	.word	0x40020058
 8003498:	40020070 	.word	0x40020070
 800349c:	40020088 	.word	0x40020088
 80034a0:	400200a0 	.word	0x400200a0
 80034a4:	400200b8 	.word	0x400200b8
 80034a8:	40020410 	.word	0x40020410
 80034ac:	40020428 	.word	0x40020428
 80034b0:	40020440 	.word	0x40020440
 80034b4:	40020458 	.word	0x40020458
 80034b8:	40020470 	.word	0x40020470
 80034bc:	40020488 	.word	0x40020488
 80034c0:	400204a0 	.word	0x400204a0
 80034c4:	400204b8 	.word	0x400204b8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2204      	movs	r2, #4
 80034de:	409a      	lsls	r2, r3
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2210      	movs	r2, #16
 80034fa:	409a      	lsls	r2, r3
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80a6 	beq.w	8003652 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a85      	ldr	r2, [pc, #532]	@ (8003720 <HAL_DMA_IRQHandler+0x690>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	@ (8003724 <HAL_DMA_IRQHandler+0x694>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a82      	ldr	r2, [pc, #520]	@ (8003728 <HAL_DMA_IRQHandler+0x698>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a80      	ldr	r2, [pc, #512]	@ (800372c <HAL_DMA_IRQHandler+0x69c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7f      	ldr	r2, [pc, #508]	@ (8003730 <HAL_DMA_IRQHandler+0x6a0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7d      	ldr	r2, [pc, #500]	@ (8003734 <HAL_DMA_IRQHandler+0x6a4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7c      	ldr	r2, [pc, #496]	@ (8003738 <HAL_DMA_IRQHandler+0x6a8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a7a      	ldr	r2, [pc, #488]	@ (800373c <HAL_DMA_IRQHandler+0x6ac>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a79      	ldr	r2, [pc, #484]	@ (8003740 <HAL_DMA_IRQHandler+0x6b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a77      	ldr	r2, [pc, #476]	@ (8003744 <HAL_DMA_IRQHandler+0x6b4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a76      	ldr	r2, [pc, #472]	@ (8003748 <HAL_DMA_IRQHandler+0x6b8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a74      	ldr	r2, [pc, #464]	@ (800374c <HAL_DMA_IRQHandler+0x6bc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a73      	ldr	r2, [pc, #460]	@ (8003750 <HAL_DMA_IRQHandler+0x6c0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a71      	ldr	r2, [pc, #452]	@ (8003754 <HAL_DMA_IRQHandler+0x6c4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a70      	ldr	r2, [pc, #448]	@ (8003758 <HAL_DMA_IRQHandler+0x6c8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	@ (800375c <HAL_DMA_IRQHandler+0x6cc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10a      	bne.n	80035bc <HAL_DMA_IRQHandler+0x52c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e009      	b.n	80035d0 <HAL_DMA_IRQHandler+0x540>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf14      	ite	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	2300      	moveq	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03e      	beq.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2210      	movs	r2, #16
 80035de:	409a      	lsls	r2, r3
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d024      	beq.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e01f      	b.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01b      	beq.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
 8003622:	e016      	b.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2220      	movs	r2, #32
 800365c:	409a      	lsls	r2, r3
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8110 	beq.w	8003888 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2c      	ldr	r2, [pc, #176]	@ (8003720 <HAL_DMA_IRQHandler+0x690>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2b      	ldr	r2, [pc, #172]	@ (8003724 <HAL_DMA_IRQHandler+0x694>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a29      	ldr	r2, [pc, #164]	@ (8003728 <HAL_DMA_IRQHandler+0x698>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_DMA_IRQHandler+0x69c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_DMA_IRQHandler+0x6a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_DMA_IRQHandler+0x6a4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a23      	ldr	r2, [pc, #140]	@ (8003738 <HAL_DMA_IRQHandler+0x6a8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a22      	ldr	r2, [pc, #136]	@ (800373c <HAL_DMA_IRQHandler+0x6ac>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <HAL_DMA_IRQHandler+0x6b0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <HAL_DMA_IRQHandler+0x6b4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_DMA_IRQHandler+0x6b8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <HAL_DMA_IRQHandler+0x6bc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <HAL_DMA_IRQHandler+0x6c0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_DMA_IRQHandler+0x6c4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_DMA_IRQHandler+0x6c8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_DMA_IRQHandler+0x6cc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d12b      	bne.n	8003760 <HAL_DMA_IRQHandler+0x6d0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e02a      	b.n	8003774 <HAL_DMA_IRQHandler+0x6e4>
 800371e:	bf00      	nop
 8003720:	40020010 	.word	0x40020010
 8003724:	40020028 	.word	0x40020028
 8003728:	40020040 	.word	0x40020040
 800372c:	40020058 	.word	0x40020058
 8003730:	40020070 	.word	0x40020070
 8003734:	40020088 	.word	0x40020088
 8003738:	400200a0 	.word	0x400200a0
 800373c:	400200b8 	.word	0x400200b8
 8003740:	40020410 	.word	0x40020410
 8003744:	40020428 	.word	0x40020428
 8003748:	40020440 	.word	0x40020440
 800374c:	40020458 	.word	0x40020458
 8003750:	40020470 	.word	0x40020470
 8003754:	40020488 	.word	0x40020488
 8003758:	400204a0 	.word	0x400204a0
 800375c:	400204b8 	.word	0x400204b8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8087 	beq.w	8003888 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2220      	movs	r2, #32
 8003784:	409a      	lsls	r2, r3
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b04      	cmp	r3, #4
 8003794:	d139      	bne.n	800380a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0216 	bic.w	r2, r2, #22
 80037a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x736>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0208 	bic.w	r2, r2, #8
 80037d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	223f      	movs	r2, #63	@ 0x3f
 80037e0:	409a      	lsls	r2, r3
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 834a 	beq.w	8003e94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
          }
          return;
 8003808:	e344      	b.n	8003e94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d018      	beq.n	800384a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
 8003836:	e027      	b.n	8003888 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d023      	beq.n	8003888 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e01e      	b.n	8003888 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10f      	bne.n	8003878 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0210 	bic.w	r2, r2, #16
 8003866:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8306 	beq.w	8003e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8088 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a7a      	ldr	r2, [pc, #488]	@ (8003a98 <HAL_DMA_IRQHandler+0xa08>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a79      	ldr	r2, [pc, #484]	@ (8003a9c <HAL_DMA_IRQHandler+0xa0c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d045      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a77      	ldr	r2, [pc, #476]	@ (8003aa0 <HAL_DMA_IRQHandler+0xa10>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d040      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a76      	ldr	r2, [pc, #472]	@ (8003aa4 <HAL_DMA_IRQHandler+0xa14>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d03b      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a74      	ldr	r2, [pc, #464]	@ (8003aa8 <HAL_DMA_IRQHandler+0xa18>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d036      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a73      	ldr	r2, [pc, #460]	@ (8003aac <HAL_DMA_IRQHandler+0xa1c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d031      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a71      	ldr	r2, [pc, #452]	@ (8003ab0 <HAL_DMA_IRQHandler+0xa20>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02c      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a70      	ldr	r2, [pc, #448]	@ (8003ab4 <HAL_DMA_IRQHandler+0xa24>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d027      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab8 <HAL_DMA_IRQHandler+0xa28>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6d      	ldr	r2, [pc, #436]	@ (8003abc <HAL_DMA_IRQHandler+0xa2c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d01d      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6b      	ldr	r2, [pc, #428]	@ (8003ac0 <HAL_DMA_IRQHandler+0xa30>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d018      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa34>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d013      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa38>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00e      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a67      	ldr	r2, [pc, #412]	@ (8003acc <HAL_DMA_IRQHandler+0xa3c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a65      	ldr	r2, [pc, #404]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa40>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a64      	ldr	r2, [pc, #400]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa44>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <HAL_DMA_IRQHandler+0x8ca>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e007      	b.n	800396a <HAL_DMA_IRQHandler+0x8da>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003972:	429a      	cmp	r2, r3
 8003974:	d307      	bcc.n	8003986 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f2      	bne.n	800396a <HAL_DMA_IRQHandler+0x8da>
 8003984:	e000      	b.n	8003988 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003986:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2203      	movs	r2, #3
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800399e:	e003      	b.n	80039a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8272 	beq.w	8003e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
 80039c2:	e26c      	b.n	8003e9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <HAL_DMA_IRQHandler+0xa48>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d022      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a42      	ldr	r2, [pc, #264]	@ (8003adc <HAL_DMA_IRQHandler+0xa4c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d01d      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a40      	ldr	r2, [pc, #256]	@ (8003ae0 <HAL_DMA_IRQHandler+0xa50>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae4 <HAL_DMA_IRQHandler+0xa54>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa58>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3c      	ldr	r2, [pc, #240]	@ (8003aec <HAL_DMA_IRQHandler+0xa5c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <HAL_DMA_IRQHandler+0xa60>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x984>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <HAL_DMA_IRQHandler+0xa64>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x988>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_DMA_IRQHandler+0x98a>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 823f 	beq.w	8003e9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2204      	movs	r2, #4
 8003a32:	409a      	lsls	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80cd 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xb48>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80c7 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	2204      	movs	r2, #4
 8003a54:	409a      	lsls	r2, r3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d049      	beq.n	8003af8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8210 	beq.w	8003e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a80:	e20a      	b.n	8003e98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8206 	beq.w	8003e98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a94:	e200      	b.n	8003e98 <HAL_DMA_IRQHandler+0xe08>
 8003a96:	bf00      	nop
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
 8003ad8:	58025408 	.word	0x58025408
 8003adc:	5802541c 	.word	0x5802541c
 8003ae0:	58025430 	.word	0x58025430
 8003ae4:	58025444 	.word	0x58025444
 8003ae8:	58025458 	.word	0x58025458
 8003aec:	5802546c 	.word	0x5802546c
 8003af0:	58025480 	.word	0x58025480
 8003af4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d160      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7f      	ldr	r2, [pc, #508]	@ (8003d04 <HAL_DMA_IRQHandler+0xc74>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04a      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7d      	ldr	r2, [pc, #500]	@ (8003d08 <HAL_DMA_IRQHandler+0xc78>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d045      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d0c <HAL_DMA_IRQHandler+0xc7c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	@ (8003d10 <HAL_DMA_IRQHandler+0xc80>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	@ (8003d14 <HAL_DMA_IRQHandler+0xc84>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d036      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a77      	ldr	r2, [pc, #476]	@ (8003d18 <HAL_DMA_IRQHandler+0xc88>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d031      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a76      	ldr	r2, [pc, #472]	@ (8003d1c <HAL_DMA_IRQHandler+0xc8c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02c      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a74      	ldr	r2, [pc, #464]	@ (8003d20 <HAL_DMA_IRQHandler+0xc90>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a73      	ldr	r2, [pc, #460]	@ (8003d24 <HAL_DMA_IRQHandler+0xc94>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a71      	ldr	r2, [pc, #452]	@ (8003d28 <HAL_DMA_IRQHandler+0xc98>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	@ (8003d2c <HAL_DMA_IRQHandler+0xc9c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6e      	ldr	r2, [pc, #440]	@ (8003d30 <HAL_DMA_IRQHandler+0xca0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d34 <HAL_DMA_IRQHandler+0xca4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	@ (8003d38 <HAL_DMA_IRQHandler+0xca8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6a      	ldr	r2, [pc, #424]	@ (8003d3c <HAL_DMA_IRQHandler+0xcac>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	@ (8003d40 <HAL_DMA_IRQHandler+0xcb0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0xb24>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0208 	bic.w	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e007      	b.n	8003bc4 <HAL_DMA_IRQHandler+0xb34>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8165 	beq.w	8003e98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd6:	e15f      	b.n	8003e98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2202      	movs	r2, #2
 8003be2:	409a      	lsls	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80c5 	beq.w	8003d78 <HAL_DMA_IRQHandler+0xce8>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80bf 	beq.w	8003d78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2202      	movs	r2, #2
 8003c04:	409a      	lsls	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d018      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 813a 	beq.w	8003e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c30:	e134      	b.n	8003e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8130 	beq.w	8003e9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c44:	e12a      	b.n	8003e9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f040 8089 	bne.w	8003d64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	@ (8003d04 <HAL_DMA_IRQHandler+0xc74>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04a      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a29      	ldr	r2, [pc, #164]	@ (8003d08 <HAL_DMA_IRQHandler+0xc78>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d045      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a28      	ldr	r2, [pc, #160]	@ (8003d0c <HAL_DMA_IRQHandler+0xc7c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d040      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a26      	ldr	r2, [pc, #152]	@ (8003d10 <HAL_DMA_IRQHandler+0xc80>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a25      	ldr	r2, [pc, #148]	@ (8003d14 <HAL_DMA_IRQHandler+0xc84>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d036      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a23      	ldr	r2, [pc, #140]	@ (8003d18 <HAL_DMA_IRQHandler+0xc88>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <HAL_DMA_IRQHandler+0xc8c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02c      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a20      	ldr	r2, [pc, #128]	@ (8003d20 <HAL_DMA_IRQHandler+0xc90>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d24 <HAL_DMA_IRQHandler+0xc94>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <HAL_DMA_IRQHandler+0xc98>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1c      	ldr	r2, [pc, #112]	@ (8003d2c <HAL_DMA_IRQHandler+0xc9c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d30 <HAL_DMA_IRQHandler+0xca0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <HAL_DMA_IRQHandler+0xca4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <HAL_DMA_IRQHandler+0xca8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_DMA_IRQHandler+0xcac>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a14      	ldr	r2, [pc, #80]	@ (8003d40 <HAL_DMA_IRQHandler+0xcb0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d128      	bne.n	8003d44 <HAL_DMA_IRQHandler+0xcb4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0214 	bic.w	r2, r2, #20
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e027      	b.n	8003d54 <HAL_DMA_IRQHandler+0xcc4>
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 020a 	bic.w	r2, r2, #10
 8003d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8097 	beq.w	8003e9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d76:	e091      	b.n	8003e9c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2208      	movs	r2, #8
 8003d82:	409a      	lsls	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8088 	beq.w	8003e9e <HAL_DMA_IRQHandler+0xe0e>
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8082 	beq.w	8003e9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a41      	ldr	r2, [pc, #260]	@ (8003ea4 <HAL_DMA_IRQHandler+0xe14>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea8 <HAL_DMA_IRQHandler+0xe18>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a3e      	ldr	r2, [pc, #248]	@ (8003eac <HAL_DMA_IRQHandler+0xe1c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb0 <HAL_DMA_IRQHandler+0xe20>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb4 <HAL_DMA_IRQHandler+0xe24>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_DMA_IRQHandler+0xe28>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a38      	ldr	r2, [pc, #224]	@ (8003ebc <HAL_DMA_IRQHandler+0xe2c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a36      	ldr	r2, [pc, #216]	@ (8003ec0 <HAL_DMA_IRQHandler+0xe30>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a35      	ldr	r2, [pc, #212]	@ (8003ec4 <HAL_DMA_IRQHandler+0xe34>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a33      	ldr	r2, [pc, #204]	@ (8003ec8 <HAL_DMA_IRQHandler+0xe38>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a32      	ldr	r2, [pc, #200]	@ (8003ecc <HAL_DMA_IRQHandler+0xe3c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a30      	ldr	r2, [pc, #192]	@ (8003ed0 <HAL_DMA_IRQHandler+0xe40>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed4 <HAL_DMA_IRQHandler+0xe44>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed8 <HAL_DMA_IRQHandler+0xe48>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003edc <HAL_DMA_IRQHandler+0xe4c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee0 <HAL_DMA_IRQHandler+0xe50>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <HAL_DMA_IRQHandler+0xdbc>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 021c 	bic.w	r2, r2, #28
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e007      	b.n	8003e5c <HAL_DMA_IRQHandler+0xdcc>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020e 	bic.w	r2, r2, #14
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
 8003e92:	e004      	b.n	8003e9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e9e:	3728      	adds	r7, #40	@ 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40020010 	.word	0x40020010
 8003ea8:	40020028 	.word	0x40020028
 8003eac:	40020040 	.word	0x40020040
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	40020070 	.word	0x40020070
 8003eb8:	40020088 	.word	0x40020088
 8003ebc:	400200a0 	.word	0x400200a0
 8003ec0:	400200b8 	.word	0x400200b8
 8003ec4:	40020410 	.word	0x40020410
 8003ec8:	40020428 	.word	0x40020428
 8003ecc:	40020440 	.word	0x40020440
 8003ed0:	40020458 	.word	0x40020458
 8003ed4:	40020470 	.word	0x40020470
 8003ed8:	40020488 	.word	0x40020488
 8003edc:	400204a0 	.word	0x400204a0
 8003ee0:	400204b8 	.word	0x400204b8

08003ee4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7f      	ldr	r2, [pc, #508]	@ (8004100 <DMA_SetConfig+0x21c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d072      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8004104 <DMA_SetConfig+0x220>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d06d      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7c      	ldr	r2, [pc, #496]	@ (8004108 <DMA_SetConfig+0x224>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d068      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	@ (800410c <DMA_SetConfig+0x228>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d063      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a79      	ldr	r2, [pc, #484]	@ (8004110 <DMA_SetConfig+0x22c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d05e      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	@ (8004114 <DMA_SetConfig+0x230>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d059      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	@ (8004118 <DMA_SetConfig+0x234>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d054      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a74      	ldr	r2, [pc, #464]	@ (800411c <DMA_SetConfig+0x238>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d04f      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a73      	ldr	r2, [pc, #460]	@ (8004120 <DMA_SetConfig+0x23c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a71      	ldr	r2, [pc, #452]	@ (8004124 <DMA_SetConfig+0x240>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a70      	ldr	r2, [pc, #448]	@ (8004128 <DMA_SetConfig+0x244>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	@ (800412c <DMA_SetConfig+0x248>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8004130 <DMA_SetConfig+0x24c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6b      	ldr	r2, [pc, #428]	@ (8004134 <DMA_SetConfig+0x250>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8004138 <DMA_SetConfig+0x254>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a68      	ldr	r2, [pc, #416]	@ (800413c <DMA_SetConfig+0x258>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a67      	ldr	r2, [pc, #412]	@ (8004140 <DMA_SetConfig+0x25c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a65      	ldr	r2, [pc, #404]	@ (8004144 <DMA_SetConfig+0x260>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a64      	ldr	r2, [pc, #400]	@ (8004148 <DMA_SetConfig+0x264>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a62      	ldr	r2, [pc, #392]	@ (800414c <DMA_SetConfig+0x268>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a61      	ldr	r2, [pc, #388]	@ (8004150 <DMA_SetConfig+0x26c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8004154 <DMA_SetConfig+0x270>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5e      	ldr	r2, [pc, #376]	@ (8004158 <DMA_SetConfig+0x274>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <DMA_SetConfig+0x10a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5c      	ldr	r2, [pc, #368]	@ (800415c <DMA_SetConfig+0x278>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <DMA_SetConfig+0x10e>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <DMA_SetConfig+0x110>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004000:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004012:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a39      	ldr	r2, [pc, #228]	@ (8004100 <DMA_SetConfig+0x21c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04a      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a38      	ldr	r2, [pc, #224]	@ (8004104 <DMA_SetConfig+0x220>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d045      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a36      	ldr	r2, [pc, #216]	@ (8004108 <DMA_SetConfig+0x224>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d040      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a35      	ldr	r2, [pc, #212]	@ (800410c <DMA_SetConfig+0x228>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d03b      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <DMA_SetConfig+0x22c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d036      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <DMA_SetConfig+0x230>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d031      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a30      	ldr	r2, [pc, #192]	@ (8004118 <DMA_SetConfig+0x234>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <DMA_SetConfig+0x238>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d027      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	@ (8004120 <DMA_SetConfig+0x23c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <DMA_SetConfig+0x240>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01d      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2a      	ldr	r2, [pc, #168]	@ (8004128 <DMA_SetConfig+0x244>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a29      	ldr	r2, [pc, #164]	@ (800412c <DMA_SetConfig+0x248>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <DMA_SetConfig+0x24c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <DMA_SetConfig+0x250>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <DMA_SetConfig+0x254>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <DMA_SetConfig+0x1d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <DMA_SetConfig+0x258>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <DMA_SetConfig+0x1d4>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <DMA_SetConfig+0x1d6>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d059      	beq.n	8004172 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	223f      	movs	r2, #63	@ 0x3f
 80040c8:	409a      	lsls	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d138      	bne.n	8004160 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040fe:	e086      	b.n	800420e <DMA_SetConfig+0x32a>
 8004100:	40020010 	.word	0x40020010
 8004104:	40020028 	.word	0x40020028
 8004108:	40020040 	.word	0x40020040
 800410c:	40020058 	.word	0x40020058
 8004110:	40020070 	.word	0x40020070
 8004114:	40020088 	.word	0x40020088
 8004118:	400200a0 	.word	0x400200a0
 800411c:	400200b8 	.word	0x400200b8
 8004120:	40020410 	.word	0x40020410
 8004124:	40020428 	.word	0x40020428
 8004128:	40020440 	.word	0x40020440
 800412c:	40020458 	.word	0x40020458
 8004130:	40020470 	.word	0x40020470
 8004134:	40020488 	.word	0x40020488
 8004138:	400204a0 	.word	0x400204a0
 800413c:	400204b8 	.word	0x400204b8
 8004140:	58025408 	.word	0x58025408
 8004144:	5802541c 	.word	0x5802541c
 8004148:	58025430 	.word	0x58025430
 800414c:	58025444 	.word	0x58025444
 8004150:	58025458 	.word	0x58025458
 8004154:	5802546c 	.word	0x5802546c
 8004158:	58025480 	.word	0x58025480
 800415c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
}
 8004170:	e04d      	b.n	800420e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a29      	ldr	r2, [pc, #164]	@ (800421c <DMA_SetConfig+0x338>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a27      	ldr	r2, [pc, #156]	@ (8004220 <DMA_SetConfig+0x33c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01d      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <DMA_SetConfig+0x340>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a24      	ldr	r2, [pc, #144]	@ (8004228 <DMA_SetConfig+0x344>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a23      	ldr	r2, [pc, #140]	@ (800422c <DMA_SetConfig+0x348>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a21      	ldr	r2, [pc, #132]	@ (8004230 <DMA_SetConfig+0x34c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a20      	ldr	r2, [pc, #128]	@ (8004234 <DMA_SetConfig+0x350>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <DMA_SetConfig+0x2de>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004238 <DMA_SetConfig+0x354>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <DMA_SetConfig+0x2e2>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <DMA_SetConfig+0x2e4>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2201      	movs	r2, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d108      	bne.n	80041fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	60da      	str	r2, [r3, #12]
}
 80041fc:	e007      	b.n	800420e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	58025408 	.word	0x58025408
 8004220:	5802541c 	.word	0x5802541c
 8004224:	58025430 	.word	0x58025430
 8004228:	58025444 	.word	0x58025444
 800422c:	58025458 	.word	0x58025458
 8004230:	5802546c 	.word	0x5802546c
 8004234:	58025480 	.word	0x58025480
 8004238:	58025494 	.word	0x58025494

0800423c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a42      	ldr	r2, [pc, #264]	@ (8004354 <DMA_CalcBaseAndBitshift+0x118>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a41      	ldr	r2, [pc, #260]	@ (8004358 <DMA_CalcBaseAndBitshift+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3f      	ldr	r2, [pc, #252]	@ (800435c <DMA_CalcBaseAndBitshift+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3e      	ldr	r2, [pc, #248]	@ (8004360 <DMA_CalcBaseAndBitshift+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3c      	ldr	r2, [pc, #240]	@ (8004364 <DMA_CalcBaseAndBitshift+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3b      	ldr	r2, [pc, #236]	@ (8004368 <DMA_CalcBaseAndBitshift+0x12c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a39      	ldr	r2, [pc, #228]	@ (800436c <DMA_CalcBaseAndBitshift+0x130>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a38      	ldr	r2, [pc, #224]	@ (8004370 <DMA_CalcBaseAndBitshift+0x134>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a36      	ldr	r2, [pc, #216]	@ (8004374 <DMA_CalcBaseAndBitshift+0x138>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a35      	ldr	r2, [pc, #212]	@ (8004378 <DMA_CalcBaseAndBitshift+0x13c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a33      	ldr	r2, [pc, #204]	@ (800437c <DMA_CalcBaseAndBitshift+0x140>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a32      	ldr	r2, [pc, #200]	@ (8004380 <DMA_CalcBaseAndBitshift+0x144>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a30      	ldr	r2, [pc, #192]	@ (8004384 <DMA_CalcBaseAndBitshift+0x148>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004388 <DMA_CalcBaseAndBitshift+0x14c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <DMA_CalcBaseAndBitshift+0x150>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2c      	ldr	r2, [pc, #176]	@ (8004390 <DMA_CalcBaseAndBitshift+0x154>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <DMA_CalcBaseAndBitshift+0xac>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <DMA_CalcBaseAndBitshift+0xae>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d024      	beq.n	8004338 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3b10      	subs	r3, #16
 80042f6:	4a27      	ldr	r2, [pc, #156]	@ (8004394 <DMA_CalcBaseAndBitshift+0x158>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	4a24      	ldr	r2, [pc, #144]	@ (8004398 <DMA_CalcBaseAndBitshift+0x15c>)
 8004308:	5cd3      	ldrb	r3, [r2, r3]
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d908      	bls.n	8004328 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <DMA_CalcBaseAndBitshift+0x160>)
 800431e:	4013      	ands	r3, r2
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	@ 0x58
 8004326:	e00d      	b.n	8004344 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <DMA_CalcBaseAndBitshift+0x160>)
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6593      	str	r3, [r2, #88]	@ 0x58
 8004336:	e005      	b.n	8004344 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	aaaaaaab 	.word	0xaaaaaaab
 8004398:	0800c720 	.word	0x0800c720
 800439c:	fffffc00 	.word	0xfffffc00

080043a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d120      	bne.n	80043f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d858      	bhi.n	800446e <DMA_CheckFifoParam+0xce>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <DMA_CheckFifoParam+0x24>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043d5 	.word	0x080043d5
 80043d0:	0800446f 	.word	0x0800446f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d048      	beq.n	8004472 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043e4:	e045      	b.n	8004472 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043ee:	d142      	bne.n	8004476 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f4:	e03f      	b.n	8004476 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fe:	d123      	bne.n	8004448 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	2b03      	cmp	r3, #3
 8004406:	d838      	bhi.n	800447a <DMA_CheckFifoParam+0xda>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <DMA_CheckFifoParam+0x70>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004421 	.word	0x08004421
 8004414:	08004427 	.word	0x08004427
 8004418:	08004421 	.word	0x08004421
 800441c:	08004439 	.word	0x08004439
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
        break;
 8004424:	e030      	b.n	8004488 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d025      	beq.n	800447e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004436:	e022      	b.n	800447e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004440:	d11f      	bne.n	8004482 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004446:	e01c      	b.n	8004482 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	2b02      	cmp	r3, #2
 800444e:	d902      	bls.n	8004456 <DMA_CheckFifoParam+0xb6>
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004454:	e018      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
        break;
 800445a:	e015      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
    break;
 800446c:	e00b      	b.n	8004486 <DMA_CheckFifoParam+0xe6>
        break;
 800446e:	bf00      	nop
 8004470:	e00a      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        break;
 8004472:	bf00      	nop
 8004474:	e008      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        break;
 8004476:	bf00      	nop
 8004478:	e006      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
    break;
 8004486:	bf00      	nop
    }
  }

  return status;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a38      	ldr	r2, [pc, #224]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a36      	ldr	r2, [pc, #216]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a35      	ldr	r2, [pc, #212]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a33      	ldr	r2, [pc, #204]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a32      	ldr	r2, [pc, #200]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a30      	ldr	r2, [pc, #192]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2f      	ldr	r2, [pc, #188]	@ (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2d      	ldr	r2, [pc, #180]	@ (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01a      	beq.n	8004536 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3b08      	subs	r3, #8
 8004508:	4a28      	ldr	r2, [pc, #160]	@ (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4b26      	ldr	r3, [pc, #152]	@ (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a24      	ldr	r2, [pc, #144]	@ (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004524:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004534:	e024      	b.n	8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3b10      	subs	r3, #16
 800453e:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d806      	bhi.n	800455e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d902      	bls.n	800455e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3308      	adds	r3, #8
 800455c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4b18      	ldr	r3, [pc, #96]	@ (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004570:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	58025408 	.word	0x58025408
 8004590:	5802541c 	.word	0x5802541c
 8004594:	58025430 	.word	0x58025430
 8004598:	58025444 	.word	0x58025444
 800459c:	58025458 	.word	0x58025458
 80045a0:	5802546c 	.word	0x5802546c
 80045a4:	58025480 	.word	0x58025480
 80045a8:	58025494 	.word	0x58025494
 80045ac:	cccccccd 	.word	0xcccccccd
 80045b0:	16009600 	.word	0x16009600
 80045b4:	58025880 	.word	0x58025880
 80045b8:	aaaaaaab 	.word	0xaaaaaaab
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	4002040f 	.word	0x4002040f
 80045c4:	10008200 	.word	0x10008200
 80045c8:	40020880 	.word	0x40020880

080045cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d04a      	beq.n	8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d847      	bhi.n	8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a25      	ldr	r2, [pc, #148]	@ (8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d022      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a24      	ldr	r2, [pc, #144]	@ (8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d01d      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a22      	ldr	r2, [pc, #136]	@ (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a21      	ldr	r2, [pc, #132]	@ (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1f      	ldr	r2, [pc, #124]	@ (8004694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00e      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1e      	ldr	r2, [pc, #120]	@ (8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d009      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1b      	ldr	r2, [pc, #108]	@ (80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a15      	ldr	r2, [pc, #84]	@ (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004654:	671a      	str	r2, [r3, #112]	@ 0x70
 8004656:	e009      	b.n	800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a11      	ldr	r2, [pc, #68]	@ (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800466a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3b01      	subs	r3, #1
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	58025408 	.word	0x58025408
 8004688:	5802541c 	.word	0x5802541c
 800468c:	58025430 	.word	0x58025430
 8004690:	58025444 	.word	0x58025444
 8004694:	58025458 	.word	0x58025458
 8004698:	5802546c 	.word	0x5802546c
 800469c:	58025480 	.word	0x58025480
 80046a0:	58025494 	.word	0x58025494
 80046a4:	1600963f 	.word	0x1600963f
 80046a8:	58025940 	.word	0x58025940
 80046ac:	1000823f 	.word	0x1000823f
 80046b0:	40020940 	.word	0x40020940

080046b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0e3      	b.n	800488e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2223      	movs	r2, #35	@ 0x23
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fc fa09 	bl	8000af0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046de:	4b6e      	ldr	r3, [pc, #440]	@ (8004898 <HAL_ETH_Init+0x1e4>)
 80046e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004898 <HAL_ETH_Init+0x1e4>)
 80046e6:	f043 0302 	orr.w	r3, r3, #2
 80046ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004898 <HAL_ETH_Init+0x1e4>)
 80046f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7a1b      	ldrb	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004704:	2000      	movs	r0, #0
 8004706:	f7fd f879 	bl	80017fc <HAL_SYSCFG_ETHInterfaceSelect>
 800470a:	e003      	b.n	8004714 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800470c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004710:	f7fd f874 	bl	80017fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <HAL_ETH_Init+0x1e8>)
 8004716:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800472e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004730:	f7fd f858 	bl	80017e4 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004736:	e011      	b.n	800475c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004738:	f7fd f854 	bl	80017e4 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004746:	d909      	bls.n	800475c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2204      	movs	r2, #4
 800474c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	22e0      	movs	r2, #224	@ 0xe0
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e098      	b.n	800488e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e4      	bne.n	8004738 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f89e 	bl	80048b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004774:	f001 fd1c 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 8004778:	4603      	mov	r3, r0
 800477a:	4a49      	ldr	r2, [pc, #292]	@ (80048a0 <HAL_ETH_Init+0x1ec>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	0c9a      	lsrs	r2, r3, #18
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3a01      	subs	r2, #1
 8004788:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa81 	bl	8004c94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800479e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047ae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	22e0      	movs	r2, #224	@ 0xe0
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e05d      	b.n	800488e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047da:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80047de:	4b31      	ldr	r3, [pc, #196]	@ (80048a4 <HAL_ETH_Init+0x1f0>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6952      	ldr	r2, [r2, #20]
 80047e6:	0051      	lsls	r1, r2, #1
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047f2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fae9 	bl	8004dce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb2f 	bl	8004e60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	3305      	adds	r3, #5
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	021a      	lsls	r2, r3, #8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	3303      	adds	r3, #3
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	3302      	adds	r3, #2
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	3301      	adds	r3, #1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004840:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800484e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004850:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b11      	ldr	r3, [pc, #68]	@ (80048a8 <HAL_ETH_Init+0x1f4>)
 8004862:	430b      	orrs	r3, r1
 8004864:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <HAL_ETH_Init+0x1f8>)
 8004876:	430b      	orrs	r3, r1
 8004878:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2210      	movs	r2, #16
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
 800489c:	58000400 	.word	0x58000400
 80048a0:	431bde83 	.word	0x431bde83
 80048a4:	ffff8001 	.word	0xffff8001
 80048a8:	0c020060 	.word	0x0c020060
 80048ac:	0c20c000 	.word	0x0c20c000

080048b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80048ca:	f001 fc71 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80048ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	@ (800493c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d804      	bhi.n	80048e2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e022      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <HAL_ETH_SetMDIOClockRange+0x90>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d204      	bcs.n	80048f4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e019      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <HAL_ETH_SetMDIOClockRange+0x94>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d915      	bls.n	8004928 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a12      	ldr	r2, [pc, #72]	@ (8004948 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d804      	bhi.n	800490e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e00c      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a0e      	ldr	r2, [pc, #56]	@ (800494c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d804      	bhi.n	8004920 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e003      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	02160ebf 	.word	0x02160ebf
 8004940:	03938700 	.word	0x03938700
 8004944:	05f5e0ff 	.word	0x05f5e0ff
 8004948:	08f0d17f 	.word	0x08f0d17f
 800494c:	0ee6b27f 	.word	0x0ee6b27f

08004950 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	791b      	ldrb	r3, [r3, #4]
 8004968:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800496a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	7b1b      	ldrb	r3, [r3, #12]
 8004970:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004972:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	7b5b      	ldrb	r3, [r3, #13]
 8004978:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800497a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	7b9b      	ldrb	r3, [r3, #14]
 8004980:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004982:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	7bdb      	ldrb	r3, [r3, #15]
 8004988:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800498a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	7c12      	ldrb	r2, [r2, #16]
 8004990:	2a00      	cmp	r2, #0
 8004992:	d102      	bne.n	800499a <ETH_SetMACConfig+0x4a>
 8004994:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004998:	e000      	b.n	800499c <ETH_SetMACConfig+0x4c>
 800499a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800499c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	7c52      	ldrb	r2, [r2, #17]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d102      	bne.n	80049ac <ETH_SetMACConfig+0x5c>
 80049a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049aa:	e000      	b.n	80049ae <ETH_SetMACConfig+0x5e>
 80049ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80049ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	7c9b      	ldrb	r3, [r3, #18]
 80049b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80049b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80049bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80049c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	7f1b      	ldrb	r3, [r3, #28]
 80049c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80049ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	7f5b      	ldrb	r3, [r3, #29]
 80049d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80049d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	7f92      	ldrb	r2, [r2, #30]
 80049d8:	2a00      	cmp	r2, #0
 80049da:	d102      	bne.n	80049e2 <ETH_SetMACConfig+0x92>
 80049dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049e0:	e000      	b.n	80049e4 <ETH_SetMACConfig+0x94>
 80049e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80049e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	7fdb      	ldrb	r3, [r3, #31]
 80049ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80049ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	d102      	bne.n	80049fe <ETH_SetMACConfig+0xae>
 80049f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049fc:	e000      	b.n	8004a00 <ETH_SetMACConfig+0xb0>
 80049fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a00:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a0e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004a10:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b56      	ldr	r3, [pc, #344]	@ (8004b7c <ETH_SetMACConfig+0x22c>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a4e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004a50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d102      	bne.n	8004a62 <ETH_SetMACConfig+0x112>
 8004a5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a60:	e000      	b.n	8004a64 <ETH_SetMACConfig+0x114>
 8004a62:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a64:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4b42      	ldr	r3, [pc, #264]	@ (8004b80 <ETH_SetMACConfig+0x230>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	4b3a      	ldr	r3, [pc, #232]	@ (8004b84 <ETH_SetMACConfig+0x234>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004aac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ab2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d101      	bne.n	8004ac2 <ETH_SetMACConfig+0x172>
 8004abe:	2280      	movs	r2, #128	@ 0x80
 8004ac0:	e000      	b.n	8004ac4 <ETH_SetMACConfig+0x174>
 8004ac2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ac4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ad6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004aec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004af4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	f023 0103 	bic.w	r1, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004b1a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d101      	bne.n	8004b3e <ETH_SetMACConfig+0x1ee>
 8004b3a:	2240      	movs	r2, #64	@ 0x40
 8004b3c:	e000      	b.n	8004b40 <ETH_SetMACConfig+0x1f0>
 8004b3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004b40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004b48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004b52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004b60:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	00048083 	.word	0x00048083
 8004b80:	c0f88000 	.word	0xc0f88000
 8004b84:	fffffef0 	.word	0xfffffef0

08004b88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b38      	ldr	r3, [pc, #224]	@ (8004c80 <ETH_SetDMAConfig+0xf8>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	6811      	ldr	r1, [r2, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004bba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	7b1b      	ldrb	r3, [r3, #12]
 8004bc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8004c84 <ETH_SetDMAConfig+0xfc>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	68f9      	ldr	r1, [r7, #12]
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004be0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	7b5b      	ldrb	r3, [r3, #13]
 8004be6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bf8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004bfc:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <ETH_SetDMAConfig+0x100>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	430b      	orrs	r3, r1
 8004c08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c0c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	7d1b      	ldrb	r3, [r3, #20]
 8004c18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	7f5b      	ldrb	r3, [r3, #29]
 8004c20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <ETH_SetDMAConfig+0x104>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c42:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	7f1b      	ldrb	r3, [r3, #28]
 8004c4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004c60:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <ETH_SetDMAConfig+0x108>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	68f9      	ldr	r1, [r7, #12]
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c70:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	ffff87fd 	.word	0xffff87fd
 8004c84:	ffff2ffe 	.word	0xffff2ffe
 8004c88:	fffec000 	.word	0xfffec000
 8004c8c:	ffc0efef 	.word	0xffc0efef
 8004c90:	7fc0ffff 	.word	0x7fc0ffff

08004c94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b0a4      	sub	sp, #144	@ 0x90
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004cec:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004cf0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004d16:	2300      	movs	r3, #0
 8004d18:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004d3e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004d44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004d50:	2302      	movs	r3, #2
 8004d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fde6 	bl	8004950 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d9e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004da2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004da8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004dac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004db4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004dba:	f107 0308 	add.w	r3, r7, #8
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fee1 	bl	8004b88 <ETH_SetDMAConfig>
}
 8004dc6:	bf00      	nop
 8004dc8:	3790      	adds	r7, #144	@ 0x90
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e01d      	b.n	8004e18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	3206      	adds	r2, #6
 8004e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d9de      	bls.n	8004ddc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2303      	movs	r3, #3
 8004e30:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e40:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e50:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e023      	b.n	8004eb6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	3212      	adds	r2, #18
 8004eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d9d8      	bls.n	8004e6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f0a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b089      	sub	sp, #36	@ 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f2a:	4b86      	ldr	r3, [pc, #536]	@ (8005144 <HAL_GPIO_Init+0x228>)
 8004f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f2e:	e18c      	b.n	800524a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	2101      	movs	r1, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 817e 	beq.w	8005244 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d005      	beq.n	8004f60 <HAL_GPIO_Init+0x44>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d130      	bne.n	8004fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f96:	2201      	movs	r2, #1
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 0201 	and.w	r2, r3, #1
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d017      	beq.n	8004ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	2203      	movs	r2, #3
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d123      	bne.n	8005052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	08da      	lsrs	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3208      	adds	r2, #8
 8005012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	220f      	movs	r2, #15
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	08da      	lsrs	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3208      	adds	r2, #8
 800504c:	69b9      	ldr	r1, [r7, #24]
 800504e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2203      	movs	r2, #3
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80d8 	beq.w	8005244 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005094:	4b2c      	ldr	r3, [pc, #176]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 8005096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800509a:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050a4:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_GPIO_Init+0x22c>)
 80050a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b2:	4a26      	ldr	r2, [pc, #152]	@ (800514c <HAL_GPIO_Init+0x230>)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	3302      	adds	r3, #2
 80050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	220f      	movs	r2, #15
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4013      	ands	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <HAL_GPIO_Init+0x234>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d04a      	beq.n	8005174 <HAL_GPIO_Init+0x258>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <HAL_GPIO_Init+0x238>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02b      	beq.n	800513e <HAL_GPIO_Init+0x222>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <HAL_GPIO_Init+0x23c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d025      	beq.n	800513a <HAL_GPIO_Init+0x21e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <HAL_GPIO_Init+0x240>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <HAL_GPIO_Init+0x21a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <HAL_GPIO_Init+0x244>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d019      	beq.n	8005132 <HAL_GPIO_Init+0x216>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_GPIO_Init+0x248>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_GPIO_Init+0x212>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <HAL_GPIO_Init+0x24c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_Init+0x20e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a16      	ldr	r2, [pc, #88]	@ (800516c <HAL_GPIO_Init+0x250>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_Init+0x20a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <HAL_GPIO_Init+0x254>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_Init+0x206>
 800511e:	2309      	movs	r3, #9
 8005120:	e029      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005122:	230a      	movs	r3, #10
 8005124:	e027      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005126:	2307      	movs	r3, #7
 8005128:	e025      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800512a:	2306      	movs	r3, #6
 800512c:	e023      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800512e:	2305      	movs	r3, #5
 8005130:	e021      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005132:	2304      	movs	r3, #4
 8005134:	e01f      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005136:	2303      	movs	r3, #3
 8005138:	e01d      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800513a:	2302      	movs	r3, #2
 800513c:	e01b      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 800513e:	2301      	movs	r3, #1
 8005140:	e019      	b.n	8005176 <HAL_GPIO_Init+0x25a>
 8005142:	bf00      	nop
 8005144:	58000080 	.word	0x58000080
 8005148:	58024400 	.word	0x58024400
 800514c:	58000400 	.word	0x58000400
 8005150:	58020000 	.word	0x58020000
 8005154:	58020400 	.word	0x58020400
 8005158:	58020800 	.word	0x58020800
 800515c:	58020c00 	.word	0x58020c00
 8005160:	58021000 	.word	0x58021000
 8005164:	58021400 	.word	0x58021400
 8005168:	58021800 	.word	0x58021800
 800516c:	58021c00 	.word	0x58021c00
 8005170:	58022400 	.word	0x58022400
 8005174:	2300      	movs	r3, #0
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	f002 0203 	and.w	r2, r2, #3
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4093      	lsls	r3, r2
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005186:	4938      	ldr	r1, [pc, #224]	@ (8005268 <HAL_GPIO_Init+0x34c>)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	3302      	adds	r3, #2
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f ae6b 	bne.w	8004f30 <HAL_GPIO_Init+0x14>
  }
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	3724      	adds	r7, #36	@ 0x24
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	58000400 	.word	0x58000400

0800526c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	807b      	strh	r3, [r7, #2]
 8005278:	4613      	mov	r3, r2
 800527a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800527c:	787b      	ldrb	r3, [r7, #1]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005288:	e003      	b.n	8005292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800528a:	887b      	ldrh	r3, [r7, #2]
 800528c:	041a      	lsls	r2, r3, #16
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	619a      	str	r2, [r3, #24]
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f005 fd13 	bl	800acf0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	58024800 	.word	0x58024800

080052f4 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <HAL_PWR_EnterSLEEPMode+0x30>)
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <HAL_PWR_EnterSLEEPMode+0x30>)
 8005306:	f023 0304 	bic.w	r3, r3, #4
 800530a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005312:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8005314:	e000      	b.n	8005318 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8005316:	bf20      	wfe
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005330:	4b19      	ldr	r3, [pc, #100]	@ (8005398 <HAL_PWREx_ConfigSupply+0x70>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d00a      	beq.n	8005352 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800533c:	4b16      	ldr	r3, [pc, #88]	@ (8005398 <HAL_PWREx_ConfigSupply+0x70>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d001      	beq.n	800534e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e01f      	b.n	800538e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e01d      	b.n	800538e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005352:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <HAL_PWREx_ConfigSupply+0x70>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f023 0207 	bic.w	r2, r3, #7
 800535a:	490f      	ldr	r1, [pc, #60]	@ (8005398 <HAL_PWREx_ConfigSupply+0x70>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4313      	orrs	r3, r2
 8005360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005362:	f7fc fa3f 	bl	80017e4 <HAL_GetTick>
 8005366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005368:	e009      	b.n	800537e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800536a:	f7fc fa3b 	bl	80017e4 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005378:	d901      	bls.n	800537e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e007      	b.n	800538e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800537e:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <HAL_PWREx_ConfigSupply+0x70>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538a:	d1ee      	bne.n	800536a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	58024800 	.word	0x58024800

0800539c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	@ 0x30
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e3c8      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8087 	beq.w	80054ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053bc:	4b88      	ldr	r3, [pc, #544]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053c6:	4b86      	ldr	r3, [pc, #536]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d007      	beq.n	80053e2 <HAL_RCC_OscConfig+0x46>
 80053d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d4:	2b18      	cmp	r3, #24
 80053d6:	d110      	bne.n	80053fa <HAL_RCC_OscConfig+0x5e>
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d10b      	bne.n	80053fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e2:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d06c      	beq.n	80054c8 <HAL_RCC_OscConfig+0x12c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d168      	bne.n	80054c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e3a2      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005402:	d106      	bne.n	8005412 <HAL_RCC_OscConfig+0x76>
 8005404:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a75      	ldr	r2, [pc, #468]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800540a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e02e      	b.n	8005470 <HAL_RCC_OscConfig+0xd4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <HAL_RCC_OscConfig+0x98>
 800541a:	4b71      	ldr	r3, [pc, #452]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a70      	ldr	r2, [pc, #448]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005420:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4b6e      	ldr	r3, [pc, #440]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6d      	ldr	r2, [pc, #436]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800542c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e01d      	b.n	8005470 <HAL_RCC_OscConfig+0xd4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543c:	d10c      	bne.n	8005458 <HAL_RCC_OscConfig+0xbc>
 800543e:	4b68      	ldr	r3, [pc, #416]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a67      	ldr	r2, [pc, #412]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b65      	ldr	r3, [pc, #404]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a64      	ldr	r2, [pc, #400]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e00b      	b.n	8005470 <HAL_RCC_OscConfig+0xd4>
 8005458:	4b61      	ldr	r3, [pc, #388]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a60      	ldr	r2, [pc, #384]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b5e      	ldr	r3, [pc, #376]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5d      	ldr	r2, [pc, #372]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fc f9b4 	bl	80017e4 <HAL_GetTick>
 800547c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005480:	f7fc f9b0 	bl	80017e4 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e356      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005492:	4b53      	ldr	r3, [pc, #332]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0xe4>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fc f9a0 	bl	80017e4 <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fc f99c 	bl	80017e4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	@ 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e342      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054ba:	4b49      	ldr	r3, [pc, #292]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x10c>
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 808c 	beq.w	80055f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d8:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e2:	4b3f      	ldr	r3, [pc, #252]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_RCC_OscConfig+0x162>
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	2b18      	cmp	r3, #24
 80054f2:	d137      	bne.n	8005564 <HAL_RCC_OscConfig+0x1c8>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d132      	bne.n	8005564 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fe:	4b38      	ldr	r3, [pc, #224]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_RCC_OscConfig+0x17a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e314      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005516:	4b32      	ldr	r3, [pc, #200]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 0219 	bic.w	r2, r3, #25
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	492f      	ldr	r1, [pc, #188]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc f95c 	bl	80017e4 <HAL_GetTick>
 800552c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005530:	f7fc f958 	bl	80017e4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e2fe      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005542:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554e:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	061b      	lsls	r3, r3, #24
 800555c:	4920      	ldr	r1, [pc, #128]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005562:	e045      	b.n	80055f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d026      	beq.n	80055ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800556c:	4b1c      	ldr	r3, [pc, #112]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 0219 	bic.w	r2, r3, #25
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4919      	ldr	r1, [pc, #100]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc f931 	bl	80017e4 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005586:	f7fc f92d 	bl	80017e4 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e2d3      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a4:	4b0e      	ldr	r3, [pc, #56]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	490b      	ldr	r1, [pc, #44]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]
 80055b8:	e01a      	b.n	80055f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a08      	ldr	r2, [pc, #32]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc f90d 	bl	80017e4 <HAL_GetTick>
 80055ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055cc:	e00a      	b.n	80055e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ce:	f7fc f909 	bl	80017e4 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d903      	bls.n	80055e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e2af      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
 80055e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055e4:	4b96      	ldr	r3, [pc, #600]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ee      	bne.n	80055ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d06a      	beq.n	80056d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fc:	4b90      	ldr	r3, [pc, #576]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005604:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005606:	4b8e      	ldr	r3, [pc, #568]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d007      	beq.n	8005622 <HAL_RCC_OscConfig+0x286>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b18      	cmp	r3, #24
 8005616:	d11b      	bne.n	8005650 <HAL_RCC_OscConfig+0x2b4>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d116      	bne.n	8005650 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005622:	4b87      	ldr	r3, [pc, #540]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCC_OscConfig+0x29e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	2b80      	cmp	r3, #128	@ 0x80
 8005634:	d001      	beq.n	800563a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e282      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800563a:	4b81      	ldr	r3, [pc, #516]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	497d      	ldr	r1, [pc, #500]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800564e:	e040      	b.n	80056d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d023      	beq.n	80056a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005658:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a78      	ldr	r2, [pc, #480]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc f8be 	bl	80017e4 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800566c:	f7fc f8ba 	bl	80017e4 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e260      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800567e:	4b70      	ldr	r3, [pc, #448]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	061b      	lsls	r3, r3, #24
 8005698:	4969      	ldr	r1, [pc, #420]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	60cb      	str	r3, [r1, #12]
 800569e:	e018      	b.n	80056d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056a0:	4b67      	ldr	r3, [pc, #412]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a66      	ldr	r2, [pc, #408]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80056a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc f89a 	bl	80017e4 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056b4:	f7fc f896 	bl	80017e4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e23c      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e6:	4b56      	ldr	r3, [pc, #344]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80056e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ea:	4a55      	ldr	r2, [pc, #340]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f2:	f7fc f877 	bl	80017e4 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056fa:	f7fc f873 	bl	80017e4 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e219      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800570c:	4b4c      	ldr	r3, [pc, #304]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800570e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x35e>
 8005718:	e018      	b.n	800574c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571a:	4b49      	ldr	r3, [pc, #292]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800571c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571e:	4a48      	ldr	r2, [pc, #288]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005726:	f7fc f85d 	bl	80017e4 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572e:	f7fc f859 	bl	80017e4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e1ff      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d036      	beq.n	80057c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005760:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a36      	ldr	r2, [pc, #216]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005766:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800576a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800576c:	f7fc f83a 	bl	80017e4 <HAL_GetTick>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005774:	f7fc f836 	bl	80017e4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1dc      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005786:	4b2e      	ldr	r3, [pc, #184]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x3d8>
 8005792:	e018      	b.n	80057c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005794:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a29      	ldr	r2, [pc, #164]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800579a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800579e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057a0:	f7fc f820 	bl	80017e4 <HAL_GetTick>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a8:	f7fc f81c 	bl	80017e4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1c2      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ba:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8086 	beq.w	80058e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80057da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e0:	f7fc f800 	bl	80017e4 <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e8:	f7fb fffc 	bl	80017e4 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	@ 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1a2      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057fa:	4b12      	ldr	r3, [pc, #72]	@ (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d106      	bne.n	800581c <HAL_RCC_OscConfig+0x480>
 800580e:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	4a0b      	ldr	r2, [pc, #44]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	@ 0x70
 800581a:	e032      	b.n	8005882 <HAL_RCC_OscConfig+0x4e6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d111      	bne.n	8005848 <HAL_RCC_OscConfig+0x4ac>
 8005824:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005830:	4b03      	ldr	r3, [pc, #12]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	4a02      	ldr	r2, [pc, #8]	@ (8005840 <HAL_RCC_OscConfig+0x4a4>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	@ 0x70
 800583c:	e021      	b.n	8005882 <HAL_RCC_OscConfig+0x4e6>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	58024800 	.word	0x58024800
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10c      	bne.n	800586a <HAL_RCC_OscConfig+0x4ce>
 8005850:	4b83      	ldr	r3, [pc, #524]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005854:	4a82      	ldr	r2, [pc, #520]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6713      	str	r3, [r2, #112]	@ 0x70
 800585c:	4b80      	ldr	r3, [pc, #512]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	4a7f      	ldr	r2, [pc, #508]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6713      	str	r3, [r2, #112]	@ 0x70
 8005868:	e00b      	b.n	8005882 <HAL_RCC_OscConfig+0x4e6>
 800586a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6713      	str	r3, [r2, #112]	@ 0x70
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	4a79      	ldr	r2, [pc, #484]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fb ffab 	bl	80017e4 <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fb ffa7 	bl	80017e4 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e14b      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCC_OscConfig+0x4f6>
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fb ff95 	bl	80017e4 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fb ff91 	bl	80017e4 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e135      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058d4:	4b62      	ldr	r3, [pc, #392]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ee      	bne.n	80058be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 812a 	beq.w	8005b3e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058f2:	2b18      	cmp	r3, #24
 80058f4:	f000 80ba 	beq.w	8005a6c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f040 8095 	bne.w	8005a2c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b57      	ldr	r3, [pc, #348]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a56      	ldr	r2, [pc, #344]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800590c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fb ff69 	bl	80017e4 <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005916:	f7fb ff65 	bl	80017e4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e10b      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005928:	4b4d      	ldr	r3, [pc, #308]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005934:	4b4a      	ldr	r3, [pc, #296]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005938:	4b4a      	ldr	r3, [pc, #296]	@ (8005a64 <HAL_RCC_OscConfig+0x6c8>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005944:	0112      	lsls	r2, r2, #4
 8005946:	430a      	orrs	r2, r1
 8005948:	4945      	ldr	r1, [pc, #276]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	628b      	str	r3, [r1, #40]	@ 0x28
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	3b01      	subs	r3, #1
 8005954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595c:	3b01      	subs	r3, #1
 800595e:	025b      	lsls	r3, r3, #9
 8005960:	b29b      	uxth	r3, r3
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	3b01      	subs	r3, #1
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	3b01      	subs	r3, #1
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800597e:	4938      	ldr	r1, [pc, #224]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005980:	4313      	orrs	r3, r2
 8005982:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005984:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	4a35      	ldr	r2, [pc, #212]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005990:	4b33      	ldr	r3, [pc, #204]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005994:	4b34      	ldr	r3, [pc, #208]	@ (8005a68 <HAL_RCC_OscConfig+0x6cc>)
 8005996:	4013      	ands	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800599c:	00d2      	lsls	r2, r2, #3
 800599e:	4930      	ldr	r1, [pc, #192]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f023 020c 	bic.w	r2, r3, #12
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	492b      	ldr	r1, [pc, #172]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	f023 0202 	bic.w	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	4927      	ldr	r1, [pc, #156]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059c8:	4b25      	ldr	r3, [pc, #148]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	4a24      	ldr	r2, [pc, #144]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b22      	ldr	r3, [pc, #136]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80059ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b19      	ldr	r3, [pc, #100]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 80059fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fb feee 	bl	80017e4 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fb feea 	bl	80017e4 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e090      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a1e:	4b10      	ldr	r3, [pc, #64]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x670>
 8005a2a:	e088      	b.n	8005b3e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0b      	ldr	r2, [pc, #44]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a38:	f7fb fed4 	bl	80017e4 <HAL_GetTick>
 8005a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a40:	f7fb fed0 	bl	80017e4 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e076      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a52:	4b03      	ldr	r3, [pc, #12]	@ (8005a60 <HAL_RCC_OscConfig+0x6c4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x6a4>
 8005a5e:	e06e      	b.n	8005b3e <HAL_RCC_OscConfig+0x7a2>
 8005a60:	58024400 	.word	0x58024400
 8005a64:	fffffc0c 	.word	0xfffffc0c
 8005a68:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a6c:	4b36      	ldr	r3, [pc, #216]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a72:	4b35      	ldr	r3, [pc, #212]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d031      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0203 	and.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d12a      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d122      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d11a      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	0a5b      	lsrs	r3, r3, #9
 8005ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005acc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d108      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	0e1b      	lsrs	r3, r3, #24
 8005ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e02b      	b.n	8005b40 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ae8:	4b17      	ldr	r3, [pc, #92]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d01f      	beq.n	8005b3e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005afe:	4b12      	ldr	r3, [pc, #72]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	4a11      	ldr	r2, [pc, #68]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b0a:	f7fb fe6b 	bl	80017e4 <HAL_GetTick>
 8005b0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b10:	bf00      	nop
 8005b12:	f7fb fe67 	bl	80017e4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d0f9      	beq.n	8005b12 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <HAL_RCC_OscConfig+0x7b0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b2a:	00d2      	lsls	r2, r2, #3
 8005b2c:	4906      	ldr	r1, [pc, #24]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b32:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	4a04      	ldr	r2, [pc, #16]	@ (8005b48 <HAL_RCC_OscConfig+0x7ac>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	@ 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	ffff0007 	.word	0xffff0007

08005b50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e19c      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b64:	4b8a      	ldr	r3, [pc, #552]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d910      	bls.n	8005b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b72:	4b87      	ldr	r3, [pc, #540]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 020f 	bic.w	r2, r3, #15
 8005b7a:	4985      	ldr	r1, [pc, #532]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	4b83      	ldr	r3, [pc, #524]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e184      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d908      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bb0:	4b78      	ldr	r3, [pc, #480]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4975      	ldr	r1, [pc, #468]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d010      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	4b70      	ldr	r3, [pc, #448]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d908      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bde:	4b6d      	ldr	r3, [pc, #436]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	496a      	ldr	r1, [pc, #424]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d010      	beq.n	8005c1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	4b64      	ldr	r3, [pc, #400]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d908      	bls.n	8005c1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c0c:	4b61      	ldr	r3, [pc, #388]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	495e      	ldr	r1, [pc, #376]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d010      	beq.n	8005c4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	4b59      	ldr	r3, [pc, #356]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d908      	bls.n	8005c4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c3a:	4b56      	ldr	r3, [pc, #344]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4953      	ldr	r1, [pc, #332]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d010      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d908      	bls.n	8005c7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c68:	4b4a      	ldr	r3, [pc, #296]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f023 020f 	bic.w	r2, r3, #15
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4947      	ldr	r1, [pc, #284]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d055      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c86:	4b43      	ldr	r3, [pc, #268]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	4940      	ldr	r1, [pc, #256]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d107      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d121      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0f6      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cb8:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d115      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0ea      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cd0:	4b30      	ldr	r3, [pc, #192]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0de      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0d6      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cf0:	4b28      	ldr	r3, [pc, #160]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f023 0207 	bic.w	r2, r3, #7
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4925      	ldr	r1, [pc, #148]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d02:	f7fb fd6f 	bl	80017e4 <HAL_GetTick>
 8005d06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d0a:	f7fb fd6b 	bl	80017e4 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e0be      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d1eb      	bne.n	8005d0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d208      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d4e:	4b11      	ldr	r3, [pc, #68]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f023 020f 	bic.w	r2, r3, #15
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	490e      	ldr	r1, [pc, #56]	@ (8005d94 <HAL_RCC_ClockConfig+0x244>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d60:	4b0b      	ldr	r3, [pc, #44]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d214      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 020f 	bic.w	r2, r3, #15
 8005d76:	4906      	ldr	r1, [pc, #24]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b04      	ldr	r3, [pc, #16]	@ (8005d90 <HAL_RCC_ClockConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e086      	b.n	8005e9e <HAL_RCC_ClockConfig+0x34e>
 8005d90:	52002000 	.word	0x52002000
 8005d94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005db4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	4939      	ldr	r1, [pc, #228]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d010      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d208      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005de2:	4b31      	ldr	r3, [pc, #196]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	492e      	ldr	r1, [pc, #184]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d010      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	4b28      	ldr	r3, [pc, #160]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d208      	bcs.n	8005e22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e10:	4b25      	ldr	r3, [pc, #148]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4922      	ldr	r1, [pc, #136]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d010      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d208      	bcs.n	8005e50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	4917      	ldr	r1, [pc, #92]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e50:	f000 f834 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	0a1b      	lsrs	r3, r3, #8
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	4912      	ldr	r1, [pc, #72]	@ (8005eac <HAL_RCC_ClockConfig+0x35c>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <HAL_RCC_ClockConfig+0x358>)
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	4a0d      	ldr	r2, [pc, #52]	@ (8005eac <HAL_RCC_ClockConfig+0x35c>)
 8005e78:	5cd3      	ldrb	r3, [r2, r3]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb0 <HAL_RCC_ClockConfig+0x360>)
 8005e86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e88:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <HAL_RCC_ClockConfig+0x364>)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x368>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fb fc5c 	bl	8001750 <HAL_InitTick>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	0800c710 	.word	0x0800c710
 8005eb0:	24000064 	.word	0x24000064
 8005eb4:	24000060 	.word	0x24000060
 8005eb8:	24000068 	.word	0x24000068

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	@ 0x24
 8005ec0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec2:	4bb3      	ldr	r3, [pc, #716]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eca:	2b18      	cmp	r3, #24
 8005ecc:	f200 8155 	bhi.w	800617a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005f3d 	.word	0x08005f3d
 8005edc:	0800617b 	.word	0x0800617b
 8005ee0:	0800617b 	.word	0x0800617b
 8005ee4:	0800617b 	.word	0x0800617b
 8005ee8:	0800617b 	.word	0x0800617b
 8005eec:	0800617b 	.word	0x0800617b
 8005ef0:	0800617b 	.word	0x0800617b
 8005ef4:	0800617b 	.word	0x0800617b
 8005ef8:	08005f63 	.word	0x08005f63
 8005efc:	0800617b 	.word	0x0800617b
 8005f00:	0800617b 	.word	0x0800617b
 8005f04:	0800617b 	.word	0x0800617b
 8005f08:	0800617b 	.word	0x0800617b
 8005f0c:	0800617b 	.word	0x0800617b
 8005f10:	0800617b 	.word	0x0800617b
 8005f14:	0800617b 	.word	0x0800617b
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	0800617b 	.word	0x0800617b
 8005f20:	0800617b 	.word	0x0800617b
 8005f24:	0800617b 	.word	0x0800617b
 8005f28:	0800617b 	.word	0x0800617b
 8005f2c:	0800617b 	.word	0x0800617b
 8005f30:	0800617b 	.word	0x0800617b
 8005f34:	0800617b 	.word	0x0800617b
 8005f38:	08005f6f 	.word	0x08005f6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f3c:	4b94      	ldr	r3, [pc, #592]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f48:	4b91      	ldr	r3, [pc, #580]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	08db      	lsrs	r3, r3, #3
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	4a90      	ldr	r2, [pc, #576]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f5a:	e111      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f5e:	61bb      	str	r3, [r7, #24]
      break;
 8005f60:	e10e      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f62:	4b8d      	ldr	r3, [pc, #564]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f64:	61bb      	str	r3, [r7, #24]
      break;
 8005f66:	e10b      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f68:	4b8c      	ldr	r3, [pc, #560]	@ (800619c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f6a:	61bb      	str	r3, [r7, #24]
      break;
 8005f6c:	e108      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f6e:	4b88      	ldr	r3, [pc, #544]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f78:	4b85      	ldr	r3, [pc, #532]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f84:	4b82      	ldr	r3, [pc, #520]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f8e:	4b80      	ldr	r3, [pc, #512]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80e1 	beq.w	8006174 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	f000 8083 	beq.w	80060c0 <HAL_RCC_GetSysClockFreq+0x204>
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	f200 80a1 	bhi.w	8006104 <HAL_RCC_GetSysClockFreq+0x248>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x114>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d056      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fce:	e099      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02d      	beq.n	8006038 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	08db      	lsrs	r3, r3, #3
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006006:	4b62      	ldr	r3, [pc, #392]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006016:	ed97 6a02 	vldr	s12, [r7, #8]
 800601a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80061a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800601e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006032:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006036:	e087      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006042:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80061a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604a:	4b51      	ldr	r3, [pc, #324]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605a:	ed97 6a02 	vldr	s12, [r7, #8]
 800605e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80061a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800607a:	e065      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006086:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800608a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608e:	4b40      	ldr	r3, [pc, #256]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609e:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060be:	e043      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80061ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80060ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80061a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006102:	e021      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80061a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	ed97 6a02 	vldr	s12, [r7, #8]
 800612a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80061a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800612e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006146:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006148:	4b11      	ldr	r3, [pc, #68]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	0a5b      	lsrs	r3, r3, #9
 800614e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006152:	3301      	adds	r3, #1
 8006154:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006160:	edd7 6a07 	vldr	s13, [r7, #28]
 8006164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800616c:	ee17 3a90 	vmov	r3, s15
 8006170:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006172:	e005      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
      break;
 8006178:	e002      	b.n	8006180 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800617a:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800617c:	61bb      	str	r3, [r7, #24]
      break;
 800617e:	bf00      	nop
  }

  return sysclockfreq;
 8006180:	69bb      	ldr	r3, [r7, #24]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3724      	adds	r7, #36	@ 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	03d09000 	.word	0x03d09000
 8006198:	003d0900 	.word	0x003d0900
 800619c:	007a1200 	.word	0x007a1200
 80061a0:	46000000 	.word	0x46000000
 80061a4:	4c742400 	.word	0x4c742400
 80061a8:	4a742400 	.word	0x4a742400
 80061ac:	4af42400 	.word	0x4af42400

080061b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061b6:	f7ff fe81 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80061ba:	4602      	mov	r2, r0
 80061bc:	4b10      	ldr	r3, [pc, #64]	@ (8006200 <HAL_RCC_GetHCLKFreq+0x50>)
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	490f      	ldr	r1, [pc, #60]	@ (8006204 <HAL_RCC_GetHCLKFreq+0x54>)
 80061c8:	5ccb      	ldrb	r3, [r1, r3]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <HAL_RCC_GetHCLKFreq+0x50>)
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <HAL_RCC_GetHCLKFreq+0x54>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ea:	4a07      	ldr	r2, [pc, #28]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x58>)
 80061ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061ee:	4a07      	ldr	r2, [pc, #28]	@ (800620c <HAL_RCC_GetHCLKFreq+0x5c>)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061f4:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <HAL_RCC_GetHCLKFreq+0x58>)
 80061f6:	681b      	ldr	r3, [r3, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	58024400 	.word	0x58024400
 8006204:	0800c710 	.word	0x0800c710
 8006208:	24000064 	.word	0x24000064
 800620c:	24000060 	.word	0x24000060

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006214:	f7ff ffcc 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4904      	ldr	r1, [pc, #16]	@ (8006238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	58024400 	.word	0x58024400
 8006238:	0800c710 	.word	0x0800c710

0800623c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006240:	f7ff ffb6 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4904      	ldr	r1, [pc, #16]	@ (8006264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800625c:	4618      	mov	r0, r3
 800625e:	bd80      	pop	{r7, pc}
 8006260:	58024400 	.word	0x58024400
 8006264:	0800c710 	.word	0x0800c710

08006268 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b0c6      	sub	sp, #280	@ 0x118
 800626e:	af00      	add	r7, sp, #0
 8006270:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800627a:	2300      	movs	r3, #0
 800627c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800628c:	2500      	movs	r5, #0
 800628e:	ea54 0305 	orrs.w	r3, r4, r5
 8006292:	d049      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800629a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800629e:	d02f      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80062a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062a4:	d828      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062aa:	d01a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b0:	d822      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ba:	d007      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062bc:	e01c      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062be:	4bab      	ldr	r3, [pc, #684]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	4aaa      	ldr	r2, [pc, #680]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062ca:	e01a      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	3308      	adds	r3, #8
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fc25 	bl	8007b24 <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062e0:	e00f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	3328      	adds	r3, #40	@ 0x28
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fccc 	bl	8007c88 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800630a:	4b98      	ldr	r3, [pc, #608]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800630c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006318:	4a94      	ldr	r2, [pc, #592]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800631a:	430b      	orrs	r3, r1
 800631c:	6513      	str	r3, [r2, #80]	@ 0x50
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006334:	f04f 0900 	mov.w	r9, #0
 8006338:	ea58 0309 	orrs.w	r3, r8, r9
 800633c:	d047      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006344:	2b04      	cmp	r3, #4
 8006346:	d82a      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006365 	.word	0x08006365
 8006354:	08006373 	.word	0x08006373
 8006358:	08006389 	.word	0x08006389
 800635c:	080063a7 	.word	0x080063a7
 8006360:	080063a7 	.word	0x080063a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4b81      	ldr	r3, [pc, #516]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a80      	ldr	r2, [pc, #512]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006370:	e01a      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	3308      	adds	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fbd2 	bl	8007b24 <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006386:	e00f      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638c:	3328      	adds	r3, #40	@ 0x28
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fc79 	bl	8007c88 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80063a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b0:	4b6e      	ldr	r3, [pc, #440]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b4:	f023 0107 	bic.w	r1, r3, #7
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	4a6b      	ldr	r2, [pc, #428]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80063da:	f04f 0b00 	mov.w	fp, #0
 80063de:	ea5a 030b 	orrs.w	r3, sl, fp
 80063e2:	d05b      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063ec:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80063f0:	d03b      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80063f2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80063f6:	d834      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063fc:	d037      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006402:	d82e      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006404:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006408:	d033      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800640a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800640e:	d828      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006414:	d01a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800641a:	d822      	bhi.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006424:	d007      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006426:	e01c      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006428:	4b50      	ldr	r3, [pc, #320]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	4a4f      	ldr	r2, [pc, #316]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006434:	e01e      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643a:	3308      	adds	r3, #8
 800643c:	2100      	movs	r1, #0
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fb70 	bl	8007b24 <RCCEx_PLL2_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800644a:	e013      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006450:	3328      	adds	r3, #40	@ 0x28
 8006452:	2100      	movs	r1, #0
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fc17 	bl	8007c88 <RCCEx_PLL3_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006460:	e008      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800647c:	4b3b      	ldr	r3, [pc, #236]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800648c:	4a37      	ldr	r2, [pc, #220]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6593      	str	r3, [r2, #88]	@ 0x58
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80064a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80064b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d05d      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80064c8:	d03b      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80064ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80064ce:	d834      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80064d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d4:	d037      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80064d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064da:	d82e      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80064dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e0:	d033      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80064e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e6:	d828      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80064e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ec:	d01a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80064ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f2:	d822      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064fc:	d007      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80064fe:	e01c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b1a      	ldr	r3, [pc, #104]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	4a19      	ldr	r2, [pc, #100]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800650c:	e01e      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006512:	3308      	adds	r3, #8
 8006514:	2100      	movs	r1, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f001 fb04 	bl	8007b24 <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006522:	e013      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006528:	3328      	adds	r3, #40	@ 0x28
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fbab 	bl	8007c88 <RCCEx_PLL3_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006538:	e008      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006540:	e004      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006542:	bf00      	nop
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800654a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006554:	4b05      	ldr	r3, [pc, #20]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006564:	4a01      	ldr	r2, [pc, #4]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006566:	430b      	orrs	r3, r1
 8006568:	6593      	str	r3, [r2, #88]	@ 0x58
 800656a:	e005      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800656c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006584:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800658e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d03a      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	2b30      	cmp	r3, #48	@ 0x30
 80065a0:	d01f      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80065a2:	2b30      	cmp	r3, #48	@ 0x30
 80065a4:	d819      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d00c      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d815      	bhi.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x372>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d019      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d111      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b6:	4baa      	ldr	r3, [pc, #680]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	4aa9      	ldr	r2, [pc, #676]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80065c2:	e011      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c8:	3308      	adds	r3, #8
 80065ca:	2102      	movs	r1, #2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 faa9 	bl	8007b24 <RCCEx_PLL2_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80065d8:	e006      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065e0:	e002      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80065e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065f0:	4b9b      	ldr	r3, [pc, #620]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fe:	4a98      	ldr	r2, [pc, #608]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006600:	430b      	orrs	r3, r1
 8006602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006604:	e003      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800660a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800661a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800661e:	2300      	movs	r3, #0
 8006620:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006624:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006628:	460b      	mov	r3, r1
 800662a:	4313      	orrs	r3, r2
 800662c:	d051      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006638:	d035      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800663a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800663e:	d82e      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006644:	d031      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006646:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800664a:	d828      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800664c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006650:	d01a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006656:	d822      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006660:	d007      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006662:	e01c      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006664:	4b7e      	ldr	r3, [pc, #504]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	4a7d      	ldr	r2, [pc, #500]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800666a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800666e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006670:	e01c      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	3308      	adds	r3, #8
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fa52 	bl	8007b24 <RCCEx_PLL2_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006686:	e011      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	3328      	adds	r3, #40	@ 0x28
 800668e:	2100      	movs	r1, #0
 8006690:	4618      	mov	r0, r3
 8006692:	f001 faf9 	bl	8007c88 <RCCEx_PLL3_Config>
 8006696:	4603      	mov	r3, r0
 8006698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800669c:	e006      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066a4:	e002      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80066aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c2:	4a67      	ldr	r2, [pc, #412]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066e2:	2300      	movs	r3, #0
 80066e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d053      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066fc:	d033      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80066fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006702:	d82c      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006704:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006708:	d02f      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800670a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800670e:	d826      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006710:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006714:	d02b      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006716:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800671a:	d820      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006720:	d012      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006726:	d81a      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d022      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d115      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	3308      	adds	r3, #8
 8006738:	2101      	movs	r1, #1
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f9f2 	bl	8007b24 <RCCEx_PLL2_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006746:	e015      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674c:	3328      	adds	r3, #40	@ 0x28
 800674e:	2101      	movs	r1, #1
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fa99 	bl	8007c88 <RCCEx_PLL3_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800675c:	e00a      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006764:	e006      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800677c:	4b38      	ldr	r3, [pc, #224]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800677e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006780:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800678a:	4a35      	ldr	r2, [pc, #212]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800678c:	430b      	orrs	r3, r1
 800678e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006796:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80067a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80067b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d058      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c6:	d033      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80067c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067cc:	d82c      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d2:	d02f      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d8:	d826      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067de:	d02b      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80067e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e4:	d820      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80067e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ea:	d012      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80067ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067f0:	d81a      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d022      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80067f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fa:	d115      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006800:	3308      	adds	r3, #8
 8006802:	2101      	movs	r1, #1
 8006804:	4618      	mov	r0, r3
 8006806:	f001 f98d 	bl	8007b24 <RCCEx_PLL2_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006810:	e015      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006816:	3328      	adds	r3, #40	@ 0x28
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f001 fa34 	bl	8007c88 <RCCEx_PLL3_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006826:	e00a      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800682e:	e006      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006830:	bf00      	nop
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10e      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006846:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006856:	4a02      	ldr	r2, [pc, #8]	@ (8006860 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6593      	str	r3, [r2, #88]	@ 0x58
 800685c:	e006      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006868:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006882:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d037      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006896:	d00e      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689c:	d816      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80068a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a6:	d111      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4bc4      	ldr	r3, [pc, #784]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	4ac3      	ldr	r2, [pc, #780]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068b4:	e00f      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ba:	3308      	adds	r3, #8
 80068bc:	2101      	movs	r1, #1
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 f930 	bl	8007b24 <RCCEx_PLL2_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068de:	4bb7      	ldr	r3, [pc, #732]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ec:	4ab3      	ldr	r2, [pc, #716]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ee:	430b      	orrs	r3, r1
 80068f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006912:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	d039      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006922:	2b03      	cmp	r3, #3
 8006924:	d81c      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	08006969 	.word	0x08006969
 8006930:	0800693d 	.word	0x0800693d
 8006934:	0800694b 	.word	0x0800694b
 8006938:	08006969 	.word	0x08006969
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693c:	4b9f      	ldr	r3, [pc, #636]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	4a9e      	ldr	r2, [pc, #632]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006948:	e00f      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	3308      	adds	r3, #8
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f8e6 	bl	8007b24 <RCCEx_PLL2_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800695e:	e004      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006972:	4b92      	ldr	r3, [pc, #584]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006976:	f023 0103 	bic.w	r1, r3, #3
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006980:	4a8e      	ldr	r2, [pc, #568]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006982:	430b      	orrs	r3, r1
 8006984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006986:	e003      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800698c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800699c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f000 8099 	beq.w	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069b2:	4b83      	ldr	r3, [pc, #524]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a82      	ldr	r2, [pc, #520]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069be:	f7fa ff11 	bl	80017e4 <HAL_GetTick>
 80069c2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069c6:	e00b      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c8:	f7fa ff0c 	bl	80017e4 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b64      	cmp	r3, #100	@ 0x64
 80069d6:	d903      	bls.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069de:	e005      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e0:	4b77      	ldr	r3, [pc, #476]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0ed      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80069ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d173      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069f4:	4b71      	ldr	r3, [pc, #452]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a00:	4053      	eors	r3, r2
 8006a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a12:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a16:	4b69      	ldr	r3, [pc, #420]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1a:	4a68      	ldr	r2, [pc, #416]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a22:	4b66      	ldr	r3, [pc, #408]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a26:	4a65      	ldr	r2, [pc, #404]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a2e:	4a63      	ldr	r2, [pc, #396]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a42:	d118      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fa fece 	bl	80017e4 <HAL_GetTick>
 8006a48:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a4c:	e00d      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4e:	f7fa fec9 	bl	80017e4 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a58:	1ad2      	subs	r2, r2, r3
 8006a5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d903      	bls.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006a68:	e005      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a6a:	4b54      	ldr	r3, [pc, #336]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0eb      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d129      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8e:	d10e      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a90:	4b4a      	ldr	r3, [pc, #296]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006aa0:	091a      	lsrs	r2, r3, #4
 8006aa2:	4b48      	ldr	r3, [pc, #288]	@ (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	4a45      	ldr	r2, [pc, #276]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6113      	str	r3, [r2, #16]
 8006aac:	e005      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006aae:	4b43      	ldr	r3, [pc, #268]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4a42      	ldr	r2, [pc, #264]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ab8:	6113      	str	r3, [r2, #16]
 8006aba:	4b40      	ldr	r3, [pc, #256]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006abc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aca:	4a3c      	ldr	r2, [pc, #240]	@ (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006acc:	430b      	orrs	r3, r1
 8006ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 0301 	and.w	r3, r2, #1
 8006af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006afa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f000 808f 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b0c:	2b28      	cmp	r3, #40	@ 0x28
 8006b0e:	d871      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006b10:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006bfd 	.word	0x08006bfd
 8006b1c:	08006bf5 	.word	0x08006bf5
 8006b20:	08006bf5 	.word	0x08006bf5
 8006b24:	08006bf5 	.word	0x08006bf5
 8006b28:	08006bf5 	.word	0x08006bf5
 8006b2c:	08006bf5 	.word	0x08006bf5
 8006b30:	08006bf5 	.word	0x08006bf5
 8006b34:	08006bf5 	.word	0x08006bf5
 8006b38:	08006bc9 	.word	0x08006bc9
 8006b3c:	08006bf5 	.word	0x08006bf5
 8006b40:	08006bf5 	.word	0x08006bf5
 8006b44:	08006bf5 	.word	0x08006bf5
 8006b48:	08006bf5 	.word	0x08006bf5
 8006b4c:	08006bf5 	.word	0x08006bf5
 8006b50:	08006bf5 	.word	0x08006bf5
 8006b54:	08006bf5 	.word	0x08006bf5
 8006b58:	08006bdf 	.word	0x08006bdf
 8006b5c:	08006bf5 	.word	0x08006bf5
 8006b60:	08006bf5 	.word	0x08006bf5
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006bf5 	.word	0x08006bf5
 8006b70:	08006bf5 	.word	0x08006bf5
 8006b74:	08006bf5 	.word	0x08006bf5
 8006b78:	08006bfd 	.word	0x08006bfd
 8006b7c:	08006bf5 	.word	0x08006bf5
 8006b80:	08006bf5 	.word	0x08006bf5
 8006b84:	08006bf5 	.word	0x08006bf5
 8006b88:	08006bf5 	.word	0x08006bf5
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006bf5 	.word	0x08006bf5
 8006b94:	08006bf5 	.word	0x08006bf5
 8006b98:	08006bfd 	.word	0x08006bfd
 8006b9c:	08006bf5 	.word	0x08006bf5
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006bf5 	.word	0x08006bf5
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bf5 	.word	0x08006bf5
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006bf5 	.word	0x08006bf5
 8006bb8:	08006bfd 	.word	0x08006bfd
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	58024800 	.word	0x58024800
 8006bc4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	3308      	adds	r3, #8
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 ffa7 	bl	8007b24 <RCCEx_PLL2_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e00f      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	3328      	adds	r3, #40	@ 0x28
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f84e 	bl	8007c88 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e004      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bfa:	e000      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c06:	4bbf      	ldr	r3, [pc, #764]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c14:	4abb      	ldr	r2, [pc, #748]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c16:	430b      	orrs	r3, r1
 8006c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c1a:	e003      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f002 0302 	and.w	r3, r2, #2
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4313      	orrs	r3, r2
 8006c42:	d041      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4a:	2b05      	cmp	r3, #5
 8006c4c:	d824      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006c6d 	.word	0x08006c6d
 8006c5c:	08006c83 	.word	0x08006c83
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	3308      	adds	r3, #8
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ff55 	bl	8007b24 <RCCEx_PLL2_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00f      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c86:	3328      	adds	r3, #40	@ 0x28
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fffc 	bl	8007c88 <RCCEx_PLL3_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c96:	e004      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006caa:	4b96      	ldr	r3, [pc, #600]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cae:	f023 0107 	bic.w	r1, r3, #7
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	4a92      	ldr	r2, [pc, #584]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cbe:	e003      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f002 0304 	and.w	r3, r2, #4
 8006cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cde:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d044      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf0:	2b05      	cmp	r3, #5
 8006cf2:	d825      	bhi.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d49 	.word	0x08006d49
 8006d00:	08006d15 	.word	0x08006d15
 8006d04:	08006d2b 	.word	0x08006d2b
 8006d08:	08006d49 	.word	0x08006d49
 8006d0c:	08006d49 	.word	0x08006d49
 8006d10:	08006d49 	.word	0x08006d49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	3308      	adds	r3, #8
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 ff01 	bl	8007b24 <RCCEx_PLL2_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d28:	e00f      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	3328      	adds	r3, #40	@ 0x28
 8006d30:	2101      	movs	r1, #1
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 ffa8 	bl	8007c88 <RCCEx_PLL3_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006d3e:	e004      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d46:	e000      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d52:	4b6c      	ldr	r3, [pc, #432]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	f023 0107 	bic.w	r1, r3, #7
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d62:	4a68      	ldr	r2, [pc, #416]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d68:	e003      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f002 0320 	and.w	r3, r2, #32
 8006d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d82:	2300      	movs	r3, #0
 8006d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d055      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9e:	d033      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da4:	d82c      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d02f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d826      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006db2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006db6:	d02b      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006db8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dbc:	d820      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc2:	d012      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc8:	d81a      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d022      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dd2:	d115      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fea1 	bl	8007b24 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006de8:	e015      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2102      	movs	r1, #2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 ff48 	bl	8007c88 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e06:	e006      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e004      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1e:	4b39      	ldr	r3, [pc, #228]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e2e:	4a35      	ldr	r2, [pc, #212]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e34:	e003      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006e4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	d058      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e6a:	d033      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006e6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e70:	d82c      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e76:	d02f      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7c:	d826      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e82:	d02b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e88:	d820      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8e:	d012      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e94:	d81a      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d022      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e9e:	d115      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fe3b 	bl	8007b24 <RCCEx_PLL2_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	3328      	adds	r3, #40	@ 0x28
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fee2 	bl	8007c88 <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10e      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006efa:	4a02      	ldr	r2, [pc, #8]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d055      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f3c:	d033      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006f3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006f42:	d82c      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f48:	d02f      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006f4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4e:	d826      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f54:	d02b      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006f56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f5a:	d820      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f60:	d012      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f66:	d81a      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d022      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f70:	d115      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f76:	3308      	adds	r3, #8
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fdd2 	bl	8007b24 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f86:	e015      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8c:	3328      	adds	r3, #40	@ 0x28
 8006f8e:	2102      	movs	r1, #2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fe79 	bl	8007c88 <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e004      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006fbc:	4ba0      	ldr	r3, [pc, #640]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fcc:	4a9c      	ldr	r2, [pc, #624]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f002 0308 	and.w	r3, r2, #8
 8006fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ff2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d01e      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007008:	d10c      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	3328      	adds	r3, #40	@ 0x28
 8007010:	2102      	movs	r1, #2
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fe38 	bl	8007c88 <RCCEx_PLL3_Config>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007024:	4b86      	ldr	r3, [pc, #536]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007028:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007034:	4a82      	ldr	r2, [pc, #520]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007036:	430b      	orrs	r3, r1
 8007038:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f002 0310 	and.w	r3, r2, #16
 8007046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800704a:	2300      	movs	r3, #0
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007050:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007054:	460b      	mov	r3, r1
 8007056:	4313      	orrs	r3, r2
 8007058:	d01e      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007066:	d10c      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3328      	adds	r3, #40	@ 0x28
 800706e:	2102      	movs	r1, #2
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fe09 	bl	8007c88 <RCCEx_PLL3_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007082:	4b6f      	ldr	r3, [pc, #444]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007086:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007092:	4a6b      	ldr	r2, [pc, #428]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007094:	430b      	orrs	r3, r1
 8007096:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80070a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070a6:	2300      	movs	r3, #0
 80070a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070ae:	460b      	mov	r3, r1
 80070b0:	4313      	orrs	r3, r2
 80070b2:	d03e      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c0:	d022      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80070c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c6:	d81b      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80070cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d0:	d00b      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80070d2:	e015      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	3308      	adds	r3, #8
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fd21 	bl	8007b24 <RCCEx_PLL2_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070e8:	e00f      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ee:	3328      	adds	r3, #40	@ 0x28
 80070f0:	2102      	movs	r1, #2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fdc8 	bl	8007c88 <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070fe:	e004      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007106:	e000      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10b      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007112:	4b4b      	ldr	r3, [pc, #300]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007122:	4a47      	ldr	r2, [pc, #284]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6593      	str	r3, [r2, #88]	@ 0x58
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800713e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007140:	2300      	movs	r3, #0
 8007142:	677b      	str	r3, [r7, #116]	@ 0x74
 8007144:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007148:	460b      	mov	r3, r1
 800714a:	4313      	orrs	r3, r2
 800714c:	d03b      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715a:	d01f      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800715c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007160:	d818      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800716c:	d007      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800716e:	e011      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007170:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	4a32      	ldr	r2, [pc, #200]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800717a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	3328      	adds	r3, #40	@ 0x28
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fd7e 	bl	8007c88 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071b6:	4a22      	ldr	r2, [pc, #136]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80071bc:	e003      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80071d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d4:	2300      	movs	r3, #0
 80071d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071dc:	460b      	mov	r3, r1
 80071de:	4313      	orrs	r3, r2
 80071e0:	d034      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f0:	d007      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80071f2:	e011      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f4:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	4a11      	ldr	r2, [pc, #68]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007200:	e00e      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	3308      	adds	r3, #8
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc8a 	bl	8007b24 <RCCEx_PLL2_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007216:	e003      	b.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800721e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007228:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007236:	4a02      	ldr	r2, [pc, #8]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007238:	430b      	orrs	r3, r1
 800723a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800723c:	e006      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007258:	663b      	str	r3, [r7, #96]	@ 0x60
 800725a:	2300      	movs	r3, #0
 800725c:	667b      	str	r3, [r7, #100]	@ 0x64
 800725e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007262:	460b      	mov	r3, r1
 8007264:	4313      	orrs	r3, r2
 8007266:	d00c      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	3328      	adds	r3, #40	@ 0x28
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fd09 	bl	8007c88 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800728e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007290:	2300      	movs	r3, #0
 8007292:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007294:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007298:	460b      	mov	r3, r1
 800729a:	4313      	orrs	r3, r2
 800729c:	d036      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072a8:	d018      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80072aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ae:	d811      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b4:	d014      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80072b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072ba:	d80b      	bhi.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d011      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c4:	d106      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c6:	4bb7      	ldr	r3, [pc, #732]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	4ab6      	ldr	r2, [pc, #728]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80072d2:	e008      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80072dc:	bf00      	nop
 80072de:	e002      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072ee:	4bad      	ldr	r3, [pc, #692]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072fc:	4aa9      	ldr	r2, [pc, #676]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6553      	str	r3, [r2, #84]	@ 0x54
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007318:	653b      	str	r3, [r7, #80]	@ 0x50
 800731a:	2300      	movs	r3, #0
 800731c:	657b      	str	r3, [r7, #84]	@ 0x54
 800731e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007328:	4b9e      	ldr	r3, [pc, #632]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007336:	4a9b      	ldr	r2, [pc, #620]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734a:	2300      	movs	r3, #0
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007358:	4b92      	ldr	r3, [pc, #584]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007366:	4a8f      	ldr	r2, [pc, #572]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007368:	430b      	orrs	r3, r1
 800736a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
 800737a:	2300      	movs	r3, #0
 800737c:	647b      	str	r3, [r7, #68]	@ 0x44
 800737e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	d00e      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007388:	4b86      	ldr	r3, [pc, #536]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	4a85      	ldr	r2, [pc, #532]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800738e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007392:	6113      	str	r3, [r2, #16]
 8007394:	4b83      	ldr	r3, [pc, #524]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007396:	6919      	ldr	r1, [r3, #16]
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800739c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073a0:	4a80      	ldr	r2, [pc, #512]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073b4:	2300      	movs	r3, #0
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073bc:	460b      	mov	r3, r1
 80073be:	4313      	orrs	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073c2:	4b78      	ldr	r3, [pc, #480]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d0:	4a74      	ldr	r2, [pc, #464]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e4:	2300      	movs	r3, #0
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073ec:	460b      	mov	r3, r1
 80073ee:	4313      	orrs	r3, r2
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073f2:	4b6c      	ldr	r3, [pc, #432]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	4a68      	ldr	r2, [pc, #416]	@ (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007404:	430b      	orrs	r3, r1
 8007406:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	2100      	movs	r1, #0
 8007412:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800741a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	d011      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	3308      	adds	r3, #8
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fb79 	bl	8007b24 <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007444:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	2100      	movs	r1, #0
 8007452:	6239      	str	r1, [r7, #32]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
 800745a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800745e:	460b      	mov	r3, r1
 8007460:	4313      	orrs	r3, r2
 8007462:	d011      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	3308      	adds	r3, #8
 800746a:	2101      	movs	r1, #1
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fb59 	bl	8007b24 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007484:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	2100      	movs	r1, #0
 8007492:	61b9      	str	r1, [r7, #24]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d011      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	3308      	adds	r3, #8
 80074aa:	2102      	movs	r1, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fb39 	bl	8007b24 <RCCEx_PLL2_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	2100      	movs	r1, #0
 80074d2:	6139      	str	r1, [r7, #16]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074de:	460b      	mov	r3, r1
 80074e0:	4313      	orrs	r3, r2
 80074e2:	d011      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e8:	3328      	adds	r3, #40	@ 0x28
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fbcb 	bl	8007c88 <RCCEx_PLL3_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80074f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	2100      	movs	r1, #0
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d011      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007528:	3328      	adds	r3, #40	@ 0x28
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fbab 	bl	8007c88 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	2100      	movs	r1, #0
 8007552:	6039      	str	r1, [r7, #0]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	607b      	str	r3, [r7, #4]
 800755a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d011      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	3328      	adds	r3, #40	@ 0x28
 800756a:	2102      	movs	r1, #2
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fb8b 	bl	8007c88 <RCCEx_PLL3_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007588:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
}
 8007596:	4618      	mov	r0, r3
 8007598:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a2:	bf00      	nop
 80075a4:	58024400 	.word	0x58024400

080075a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075ac:	f7fe fe00 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	091b      	lsrs	r3, r3, #4
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	4904      	ldr	r1, [pc, #16]	@ (80075d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075be:	5ccb      	ldrb	r3, [r1, r3]
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	58024400 	.word	0x58024400
 80075d0:	0800c710 	.word	0x0800c710

080075d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b089      	sub	sp, #36	@ 0x24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	0b1b      	lsrs	r3, r3, #12
 80075ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075fe:	4b99      	ldr	r3, [pc, #612]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007602:	08db      	lsrs	r3, r3, #3
 8007604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	fb02 f303 	mul.w	r3, r2, r3
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8111 	beq.w	8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b02      	cmp	r3, #2
 8007626:	f000 8083 	beq.w	8007730 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b02      	cmp	r3, #2
 800762e:	f200 80a1 	bhi.w	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d056      	beq.n	80076ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800763e:	e099      	b.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007640:	4b88      	ldr	r3, [pc, #544]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02d      	beq.n	80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800764c:	4b85      	ldr	r3, [pc, #532]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	08db      	lsrs	r3, r3, #3
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	4a84      	ldr	r2, [pc, #528]	@ (8007868 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
 800765c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b7b      	ldr	r3, [pc, #492]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a03 	vldr	s12, [r7, #12]
 800768a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076a6:	e087      	b.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ea:	e065      	b.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b59      	ldr	r3, [pc, #356]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007712:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800772e:	e043      	b.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b48      	ldr	r3, [pc, #288]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007772:	e021      	b.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b37      	ldr	r3, [pc, #220]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077bc:	0a5b      	lsrs	r3, r3, #9
 80077be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077de:	ee17 2a90 	vmov	r2, s15
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007800:	edd7 6a07 	vldr	s13, [r7, #28]
 8007804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780c:	ee17 2a90 	vmov	r2, s15
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007814:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007818:	0e1b      	lsrs	r3, r3, #24
 800781a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800782e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783a:	ee17 2a90 	vmov	r2, s15
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007842:	e008      	b.n	8007856 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	609a      	str	r2, [r3, #8]
}
 8007856:	bf00      	nop
 8007858:	3724      	adds	r7, #36	@ 0x24
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	58024400 	.word	0x58024400
 8007868:	03d09000 	.word	0x03d09000
 800786c:	46000000 	.word	0x46000000
 8007870:	4c742400 	.word	0x4c742400
 8007874:	4a742400 	.word	0x4a742400
 8007878:	4af42400 	.word	0x4af42400

0800787c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800787c:	b480      	push	{r7}
 800787e:	b089      	sub	sp, #36	@ 0x24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007884:	4ba1      	ldr	r3, [pc, #644]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800788e:	4b9f      	ldr	r3, [pc, #636]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	0d1b      	lsrs	r3, r3, #20
 8007894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007898:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800789a:	4b9c      	ldr	r3, [pc, #624]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80078a6:	4b99      	ldr	r3, [pc, #612]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078aa:	08db      	lsrs	r3, r3, #3
 80078ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8111 	beq.w	8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f000 8083 	beq.w	80079d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	f200 80a1 	bhi.w	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d056      	beq.n	8007994 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078e6:	e099      	b.n	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e8:	4b88      	ldr	r3, [pc, #544]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02d      	beq.n	8007950 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078f4:	4b85      	ldr	r3, [pc, #532]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	08db      	lsrs	r3, r3, #3
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	4a84      	ldr	r2, [pc, #528]	@ (8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
 8007904:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b7b      	ldr	r3, [pc, #492]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800794e:	e087      	b.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800795e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007962:	4b6a      	ldr	r3, [pc, #424]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007972:	ed97 6a03 	vldr	s12, [r7, #12]
 8007976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800797a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007992:	e065      	b.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a6:	4b59      	ldr	r3, [pc, #356]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079d6:	e043      	b.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b48      	ldr	r3, [pc, #288]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1a:	e021      	b.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b37      	ldr	r3, [pc, #220]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a60:	4b2a      	ldr	r3, [pc, #168]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	0a5b      	lsrs	r3, r3, #9
 8007a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a86:	ee17 2a90 	vmov	r2, s15
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a92:	0c1b      	lsrs	r3, r3, #16
 8007a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab4:	ee17 2a90 	vmov	r2, s15
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007abc:	4b13      	ldr	r3, [pc, #76]	@ (8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae2:	ee17 2a90 	vmov	r2, s15
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007aea:	e008      	b.n	8007afe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
}
 8007afe:	bf00      	nop
 8007b00:	3724      	adds	r7, #36	@ 0x24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	46000000 	.word	0x46000000
 8007b18:	4c742400 	.word	0x4c742400
 8007b1c:	4a742400 	.word	0x4a742400
 8007b20:	4af42400 	.word	0x4af42400

08007b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b32:	4b53      	ldr	r3, [pc, #332]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d101      	bne.n	8007b42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e099      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b42:	4b4f      	ldr	r3, [pc, #316]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a4e      	ldr	r2, [pc, #312]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4e:	f7f9 fe49 	bl	80017e4 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b54:	e008      	b.n	8007b68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b56:	f7f9 fe45 	bl	80017e4 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e086      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b68:	4b45      	ldr	r3, [pc, #276]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1f0      	bne.n	8007b56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b74:	4b42      	ldr	r3, [pc, #264]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	031b      	lsls	r3, r3, #12
 8007b82:	493f      	ldr	r1, [pc, #252]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	025b      	lsls	r3, r3, #9
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bb8:	4931      	ldr	r1, [pc, #196]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007bbe:	4b30      	ldr	r3, [pc, #192]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	492d      	ldr	r1, [pc, #180]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	f023 0220 	bic.w	r2, r3, #32
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	4928      	ldr	r1, [pc, #160]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007be2:	4b27      	ldr	r3, [pc, #156]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be6:	4a26      	ldr	r2, [pc, #152]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	f023 0310 	bic.w	r3, r3, #16
 8007bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bee:	4b24      	ldr	r3, [pc, #144]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bf2:	4b24      	ldr	r3, [pc, #144]	@ (8007c84 <RCCEx_PLL2_Config+0x160>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	69d2      	ldr	r2, [r2, #28]
 8007bfa:	00d2      	lsls	r2, r2, #3
 8007bfc:	4920      	ldr	r1, [pc, #128]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c02:	4b1f      	ldr	r3, [pc, #124]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	4a1e      	ldr	r2, [pc, #120]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c08:	f043 0310 	orr.w	r3, r3, #16
 8007c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c14:	4b1a      	ldr	r3, [pc, #104]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	4a19      	ldr	r2, [pc, #100]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c20:	e00f      	b.n	8007c42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d106      	bne.n	8007c36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c28:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2c:	4a14      	ldr	r2, [pc, #80]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c34:	e005      	b.n	8007c42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c36:	4b12      	ldr	r3, [pc, #72]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3a:	4a11      	ldr	r2, [pc, #68]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c42:	4b0f      	ldr	r3, [pc, #60]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a0e      	ldr	r2, [pc, #56]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c4e:	f7f9 fdc9 	bl	80017e4 <HAL_GetTick>
 8007c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c54:	e008      	b.n	8007c68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c56:	f7f9 fdc5 	bl	80017e4 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d901      	bls.n	8007c68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e006      	b.n	8007c76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c68:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400
 8007c84:	ffff0007 	.word	0xffff0007

08007c88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c96:	4b53      	ldr	r3, [pc, #332]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d101      	bne.n	8007ca6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e099      	b.n	8007dda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a4e      	ldr	r2, [pc, #312]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb2:	f7f9 fd97 	bl	80017e4 <HAL_GetTick>
 8007cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cb8:	e008      	b.n	8007ccc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cba:	f7f9 fd93 	bl	80017e4 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e086      	b.n	8007dda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ccc:	4b45      	ldr	r3, [pc, #276]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f0      	bne.n	8007cba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cd8:	4b42      	ldr	r3, [pc, #264]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	051b      	lsls	r3, r3, #20
 8007ce6:	493f      	ldr	r1, [pc, #252]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	025b      	lsls	r3, r3, #9
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	431a      	orrs	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	061b      	lsls	r3, r3, #24
 8007d18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d1c:	4931      	ldr	r1, [pc, #196]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d22:	4b30      	ldr	r3, [pc, #192]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	492d      	ldr	r1, [pc, #180]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d34:	4b2b      	ldr	r3, [pc, #172]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	4928      	ldr	r1, [pc, #160]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d46:	4b27      	ldr	r3, [pc, #156]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4a:	4a26      	ldr	r2, [pc, #152]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d52:	4b24      	ldr	r3, [pc, #144]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d56:	4b24      	ldr	r3, [pc, #144]	@ (8007de8 <RCCEx_PLL3_Config+0x160>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	69d2      	ldr	r2, [r2, #28]
 8007d5e:	00d2      	lsls	r2, r2, #3
 8007d60:	4920      	ldr	r1, [pc, #128]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d66:	4b1f      	ldr	r3, [pc, #124]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d78:	4b1a      	ldr	r3, [pc, #104]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7c:	4a19      	ldr	r2, [pc, #100]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d84:	e00f      	b.n	8007da6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d106      	bne.n	8007d9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d8c:	4b15      	ldr	r3, [pc, #84]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d90:	4a14      	ldr	r2, [pc, #80]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d98:	e005      	b.n	8007da6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d9a:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	4a11      	ldr	r2, [pc, #68]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007da0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007da4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007da6:	4b0f      	ldr	r3, [pc, #60]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a0e      	ldr	r2, [pc, #56]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db2:	f7f9 fd17 	bl	80017e4 <HAL_GetTick>
 8007db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db8:	e008      	b.n	8007dcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dba:	f7f9 fd13 	bl	80017e4 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e006      	b.n	8007dda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f0      	beq.n	8007dba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	58024400 	.word	0x58024400
 8007de8:	ffff0007 	.word	0xffff0007

08007dec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d071      	beq.n	8007ee2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7f9 f968 	bl	80010e8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d050      	beq.n	8007ed0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	22ca      	movs	r2, #202	@ 0xca
 8007e34:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2253      	movs	r2, #83	@ 0x53
 8007e3c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fb78 	bl	8008534 <RTC_EnterInitMode>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d124      	bne.n	8007e98 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6899      	ldr	r1, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	4b24      	ldr	r3, [pc, #144]	@ (8007eec <HAL_RTC_Init+0x100>)
 8007e5a:	400b      	ands	r3, r1
 8007e5c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6899      	ldr	r1, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	0419      	lsls	r1, r3, #16
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb84 	bl	800859c <RTC_ExitInitMode>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d113      	bne.n	8007ec6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0203 	bic.w	r2, r2, #3
 8007eac:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	22ff      	movs	r2, #255	@ 0xff
 8007ecc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ece:	e001      	b.n	8007ed4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	ff8fffbf 	.word	0xff8fffbf

08007ef0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_RTC_SetTime+0x1a>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e089      	b.n	800801e <HAL_RTC_SetTime+0x12e>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	22ca      	movs	r2, #202	@ 0xca
 8007f20:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2253      	movs	r2, #83	@ 0x53
 8007f28:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fb02 	bl	8008534 <RTC_EnterInitMode>
 8007f30:	4603      	mov	r3, r0
 8007f32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d161      	bne.n	8007ffe <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d126      	bne.n	8007f8e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fb5d 	bl	8008618 <RTC_ByteToBcd2>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fb56 	bl	8008618 <RTC_ByteToBcd2>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f70:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	789b      	ldrb	r3, [r3, #2]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fb4e 	bl	8008618 <RTC_ByteToBcd2>
 8007f7c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f7e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	78db      	ldrb	r3, [r3, #3]
 8007f86:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e018      	b.n	8007fc0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007fae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007fb4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	78db      	ldrb	r3, [r3, #3]
 8007fba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6979      	ldr	r1, [r7, #20]
 8007fc6:	4b18      	ldr	r3, [pc, #96]	@ (8008028 <HAL_RTC_SetTime+0x138>)
 8007fc8:	400b      	ands	r3, r1
 8007fca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007fda:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6899      	ldr	r1, [r3, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fad1 	bl	800859c <RTC_ExitInitMode>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	22ff      	movs	r2, #255	@ 0xff
 8008004:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008006:	7cfb      	ldrb	r3, [r7, #19]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800801c:	7cfb      	ldrb	r3, [r7, #19]
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	bd90      	pop	{r4, r7, pc}
 8008026:	bf00      	nop
 8008028:	007f7f7f 	.word	0x007f7f7f

0800802c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b22      	ldr	r3, [pc, #136]	@ (80080e0 <HAL_RTC_GetTime+0xb4>)
 8008058:	4013      	ands	r3, r2
 800805a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	0c1b      	lsrs	r3, r3, #16
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008066:	b2da      	uxtb	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008076:	b2da      	uxtb	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008084:	b2da      	uxtb	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	0d9b      	lsrs	r3, r3, #22
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11a      	bne.n	80080d6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fad7 	bl	8008658 <RTC_Bcd2ToByte>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 face 	bl	8008658 <RTC_Bcd2ToByte>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	789b      	ldrb	r3, [r3, #2]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fac5 	bl	8008658 <RTC_Bcd2ToByte>
 80080ce:	4603      	mov	r3, r0
 80080d0:	461a      	mov	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	007f7f7f 	.word	0x007f7f7f

080080e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_RTC_SetDate+0x1a>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e073      	b.n	80081e6 <HAL_RTC_SetDate+0x102>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2202      	movs	r2, #2
 800810a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10e      	bne.n	8008132 <HAL_RTC_SetDate+0x4e>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	f023 0310 	bic.w	r3, r3, #16
 8008128:	b2db      	uxtb	r3, r3
 800812a:	330a      	adds	r3, #10
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11c      	bne.n	8008172 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	78db      	ldrb	r3, [r3, #3]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fa6b 	bl	8008618 <RTC_ByteToBcd2>
 8008142:	4603      	mov	r3, r0
 8008144:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fa64 	bl	8008618 <RTC_ByteToBcd2>
 8008150:	4603      	mov	r3, r0
 8008152:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008154:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	789b      	ldrb	r3, [r3, #2]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fa5c 	bl	8008618 <RTC_ByteToBcd2>
 8008160:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008162:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e00e      	b.n	8008190 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	78db      	ldrb	r3, [r3, #3]
 8008176:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800817e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008184:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	22ca      	movs	r2, #202	@ 0xca
 8008196:	625a      	str	r2, [r3, #36]	@ 0x24
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2253      	movs	r2, #83	@ 0x53
 800819e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f9c7 	bl	8008534 <RTC_EnterInitMode>
 80081a6:	4603      	mov	r3, r0
 80081a8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80081aa:	7cfb      	ldrb	r3, [r7, #19]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	6979      	ldr	r1, [r7, #20]
 80081b6:	4b0e      	ldr	r3, [pc, #56]	@ (80081f0 <HAL_RTC_SetDate+0x10c>)
 80081b8:	400b      	ands	r3, r1
 80081ba:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f9ed 	bl	800859c <RTC_ExitInitMode>
 80081c2:	4603      	mov	r3, r0
 80081c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	22ff      	movs	r2, #255	@ 0xff
 80081cc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80081ce:	7cfb      	ldrb	r3, [r7, #19]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80081e4:	7cfb      	ldrb	r3, [r7, #19]


}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd90      	pop	{r4, r7, pc}
 80081ee:	bf00      	nop
 80081f0:	00ffff3f 	.word	0x00ffff3f

080081f4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b21      	ldr	r3, [pc, #132]	@ (800828c <HAL_RTC_GetDate+0x98>)
 8008208:	4013      	ands	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	b2da      	uxtb	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	b2da      	uxtb	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800822e:	b2da      	uxtb	r2, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	0b5b      	lsrs	r3, r3, #13
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	b2da      	uxtb	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11a      	bne.n	8008280 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	78db      	ldrb	r3, [r3, #3]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa02 	bl	8008658 <RTC_Bcd2ToByte>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	4618      	mov	r0, r3
 8008262:	f000 f9f9 	bl	8008658 <RTC_Bcd2ToByte>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f9f0 	bl	8008658 <RTC_Bcd2ToByte>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	00ffff3f 	.word	0x00ffff3f

08008290 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_RTC_SetAlarm+0x1a>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e11b      	b.n	80084e2 <HAL_RTC_SetAlarm+0x252>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2202      	movs	r2, #2
 80082b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d137      	bne.n	8008330 <HAL_RTC_SetAlarm+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f99d 	bl	8008618 <RTC_ByteToBcd2>
 80082de:	4603      	mov	r3, r0
 80082e0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f996 	bl	8008618 <RTC_ByteToBcd2>
 80082ec:	4603      	mov	r3, r0
 80082ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082f0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	789b      	ldrb	r3, [r3, #2]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f98e 	bl	8008618 <RTC_ByteToBcd2>
 80082fc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008308:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f980 	bl	8008618 <RTC_ByteToBcd2>
 8008318:	4603      	mov	r3, r0
 800831a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 800831c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008324:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800832a:	4313      	orrs	r3, r2
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	e023      	b.n	8008378 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008350:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8008356:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	78db      	ldrb	r3, [r3, #3]
 800835c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800835e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008366:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8008368:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 800836e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8008374:	4313      	orrs	r3, r2
 8008376:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	4313      	orrs	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	22ca      	movs	r2, #202	@ 0xca
 800838a:	625a      	str	r2, [r3, #36]	@ 0x24
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2253      	movs	r2, #83	@ 0x53
 8008392:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839c:	d14a      	bne.n	8008434 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083ac:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80083be:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083ce:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80083d0:	f7f9 fa08 	bl	80017e4 <HAL_GetTick>
 80083d4:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80083d6:	e015      	b.n	8008404 <HAL_RTC_SetAlarm+0x174>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083d8:	f7f9 fa04 	bl	80017e4 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083e6:	d90d      	bls.n	8008404 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	22ff      	movs	r2, #255	@ 0xff
 80083ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2203      	movs	r2, #3
 80083f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e06e      	b.n	80084e2 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0e2      	beq.n	80083d8 <HAL_RTC_SetAlarm+0x148>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008430:	609a      	str	r2, [r3, #8]
 8008432:	e049      	b.n	80084c8 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008442:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	b2da      	uxtb	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008454:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008464:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008466:	f7f9 f9bd 	bl	80017e4 <HAL_GetTick>
 800846a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800846c:	e015      	b.n	800849a <HAL_RTC_SetAlarm+0x20a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800846e:	f7f9 f9b9 	bl	80017e4 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800847c:	d90d      	bls.n	800849a <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	22ff      	movs	r2, #255	@ 0xff
 8008484:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2203      	movs	r2, #3
 800848a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e023      	b.n	80084e2 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0e2      	beq.n	800846e <HAL_RTC_SetAlarm+0x1de>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c6:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	22ff      	movs	r2, #255	@ 0xff
 80084ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3724      	adds	r7, #36	@ 0x24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd90      	pop	{r4, r7, pc}
	...

080084ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008530 <HAL_RTC_WaitForSynchro+0x44>)
 80084fa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80084fc:	f7f9 f972 	bl	80017e4 <HAL_GetTick>
 8008500:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008502:	e009      	b.n	8008518 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008504:	f7f9 f96e 	bl	80017e4 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008512:	d901      	bls.n	8008518 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e007      	b.n	8008528 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0ee      	beq.n	8008504 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	0003ff5f 	.word	0x0003ff5f

08008534 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d120      	bne.n	8008590 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f04f 32ff 	mov.w	r2, #4294967295
 8008556:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008558:	f7f9 f944 	bl	80017e4 <HAL_GetTick>
 800855c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800855e:	e00d      	b.n	800857c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008560:	f7f9 f940 	bl	80017e4 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800856e:	d905      	bls.n	800857c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2203      	movs	r2, #3
 8008578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <RTC_EnterInitMode+0x5c>
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d1e7      	bne.n	8008560 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80085a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008614 <RTC_ExitInitMode+0x78>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4a19      	ldr	r2, [pc, #100]	@ (8008614 <RTC_ExitInitMode+0x78>)
 80085ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085b2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80085b4:	4b17      	ldr	r3, [pc, #92]	@ (8008614 <RTC_ExitInitMode+0x78>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10c      	bne.n	80085da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff93 	bl	80084ec <HAL_RTC_WaitForSynchro>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2203      	movs	r2, #3
 80085d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]
 80085d8:	e017      	b.n	800860a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80085da:	4b0e      	ldr	r3, [pc, #56]	@ (8008614 <RTC_ExitInitMode+0x78>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4a0d      	ldr	r2, [pc, #52]	@ (8008614 <RTC_ExitInitMode+0x78>)
 80085e0:	f023 0320 	bic.w	r3, r3, #32
 80085e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff80 	bl	80084ec <HAL_RTC_WaitForSynchro>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2203      	movs	r2, #3
 80085f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80085fe:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <RTC_ExitInitMode+0x78>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4a04      	ldr	r2, [pc, #16]	@ (8008614 <RTC_ExitInitMode+0x78>)
 8008604:	f043 0320 	orr.w	r3, r3, #32
 8008608:	6093      	str	r3, [r2, #8]
  }

  return status;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	58004000 	.word	0x58004000

08008618 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800862a:	e005      	b.n	8008638 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	3b0a      	subs	r3, #10
 8008636:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	2b09      	cmp	r3, #9
 800863c:	d8f6      	bhi.n	800862c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	b2da      	uxtb	r2, r3
 8008646:	7afb      	ldrb	r3, [r7, #11]
 8008648:	4313      	orrs	r3, r2
 800864a:	b2db      	uxtb	r3, r3
}
 800864c:	4618      	mov	r0, r3
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	091b      	lsrs	r3, r3, #4
 8008666:	b2db      	uxtb	r3, r3
 8008668:	461a      	mov	r2, r3
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	4413      	add	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	b2da      	uxtb	r2, r3
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	4413      	add	r3, r2
 800867e:	b2db      	uxtb	r3, r3
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3350      	adds	r3, #80	@ 0x50
 800869e:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4413      	add	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3350      	adds	r3, #80	@ 0x50
 80086cc:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e042      	b.n	8008780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7f8 ff0d 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2224      	movs	r2, #36	@ 0x24
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fbdc 	bl	8009ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fd6d 	bl	8009218 <UART_SetConfig>
 800873e:	4603      	mov	r3, r0
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e01b      	b.n	8008780 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fc5b 	bl	800a034 <UART_CheckIdleState>
 800877e:	4603      	mov	r3, r0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	@ 0x28
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d17b      	bne.n	800889a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_UART_Transmit+0x26>
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e074      	b.n	800889c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2221      	movs	r2, #33	@ 0x21
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087c2:	f7f9 f80f 	bl	80017e4 <HAL_GetTick>
 80087c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	88fa      	ldrh	r2, [r7, #6]
 80087cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e0:	d108      	bne.n	80087f4 <HAL_UART_Transmit+0x6c>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	e003      	b.n	80087fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087fc:	e030      	b.n	8008860 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2200      	movs	r2, #0
 8008806:	2180      	movs	r1, #128	@ 0x80
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f001 fcbd 	bl	800a188 <UART_WaitOnFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e03d      	b.n	800889c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008834:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	3302      	adds	r3, #2
 800883a:	61bb      	str	r3, [r7, #24]
 800883c:	e007      	b.n	800884e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	3301      	adds	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1c8      	bne.n	80087fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2200      	movs	r2, #0
 8008874:	2140      	movs	r1, #64	@ 0x40
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f001 fc86 	bl	800a188 <UART_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e006      	b.n	800889c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800889a:	2302      	movs	r3, #2
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3720      	adds	r7, #32
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b091      	sub	sp, #68	@ 0x44
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d178      	bne.n	80089ae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_UART_Transmit_IT+0x24>
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e071      	b.n	80089b0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	88fa      	ldrh	r2, [r7, #6]
 80088de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2221      	movs	r2, #33	@ 0x21
 80088f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008900:	d12a      	bne.n	8008958 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890a:	d107      	bne.n	800891c <HAL_UART_Transmit_IT+0x78>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4a29      	ldr	r2, [pc, #164]	@ (80089bc <HAL_UART_Transmit_IT+0x118>)
 8008918:	679a      	str	r2, [r3, #120]	@ 0x78
 800891a:	e002      	b.n	8008922 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a28      	ldr	r2, [pc, #160]	@ (80089c0 <HAL_UART_Transmit_IT+0x11c>)
 8008920:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008938:	63bb      	str	r3, [r7, #56]	@ 0x38
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008942:	637a      	str	r2, [r7, #52]	@ 0x34
 8008944:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <HAL_UART_Transmit_IT+0x7e>
 8008956:	e028      	b.n	80089aa <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008960:	d107      	bne.n	8008972 <HAL_UART_Transmit_IT+0xce>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4a15      	ldr	r2, [pc, #84]	@ (80089c4 <HAL_UART_Transmit_IT+0x120>)
 800896e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008970:	e002      	b.n	8008978 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4a14      	ldr	r2, [pc, #80]	@ (80089c8 <HAL_UART_Transmit_IT+0x124>)
 8008976:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	613b      	str	r3, [r7, #16]
   return(result);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008996:	623b      	str	r3, [r7, #32]
 8008998:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	6a3a      	ldr	r2, [r7, #32]
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e6      	bne.n	8008978 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	e000      	b.n	80089b0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80089ae:	2302      	movs	r3, #2
  }
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3744      	adds	r7, #68	@ 0x44
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	0800a96d 	.word	0x0800a96d
 80089c0:	0800a88d 	.word	0x0800a88d
 80089c4:	0800a7cb 	.word	0x0800a7cb
 80089c8:	0800a713 	.word	0x0800a713

080089cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	@ 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d137      	bne.n	8008a54 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_UART_Receive_DMA+0x24>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e030      	b.n	8008a56 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a18      	ldr	r2, [pc, #96]	@ (8008a60 <HAL_UART_Receive_DMA+0x94>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d01f      	beq.n	8008a44 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d018      	beq.n	8008a44 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	623b      	str	r3, [r7, #32]
 8008a32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	69f9      	ldr	r1, [r7, #28]
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e6      	bne.n	8008a12 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	461a      	mov	r2, r3
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f001 fc0a 	bl	800a264 <UART_Start_Receive_DMA>
 8008a50:	4603      	mov	r3, r0
 8008a52:	e000      	b.n	8008a56 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3728      	adds	r7, #40	@ 0x28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	58000c00 	.word	0x58000c00

08008a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b0ba      	sub	sp, #232	@ 0xe8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a92:	4013      	ands	r3, r2
 8008a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11b      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d015      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8377 	beq.w	80091bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	4798      	blx	r3
      }
      return;
 8008ad6:	e371      	b.n	80091bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8123 	beq.w	8008d28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ae2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8008d1c <HAL_UART_IRQHandler+0x2b8>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008aee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008af2:	4b8b      	ldr	r3, [pc, #556]	@ (8008d20 <HAL_UART_IRQHandler+0x2bc>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8116 	beq.w	8008d28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d011      	beq.n	8008b2c <HAL_UART_IRQHandler+0xc8>
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b22:	f043 0201 	orr.w	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d011      	beq.n	8008b5c <HAL_UART_IRQHandler+0xf8>
 8008b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b52:	f043 0204 	orr.w	r2, r3, #4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d011      	beq.n	8008b8c <HAL_UART_IRQHandler+0x128>
 8008b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2204      	movs	r2, #4
 8008b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b82:	f043 0202 	orr.w	r2, r3, #2
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b90:	f003 0308 	and.w	r3, r3, #8
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d017      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d105      	bne.n	8008bb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ba4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8008d1c <HAL_UART_IRQHandler+0x2b8>)
 8008baa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbe:	f043 0208 	orr.w	r2, r3, #8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d012      	beq.n	8008bfa <HAL_UART_IRQHandler+0x196>
 8008bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00c      	beq.n	8008bfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf0:	f043 0220 	orr.w	r2, r3, #32
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 82dd 	beq.w	80091c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d013      	beq.n	8008c3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d105      	bne.n	8008c2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4e:	2b40      	cmp	r3, #64	@ 0x40
 8008c50:	d005      	beq.n	8008c5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d054      	beq.n	8008d08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 fbe8 	bl	800a434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6e:	2b40      	cmp	r3, #64	@ 0x40
 8008c70:	d146      	bne.n	8008d00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1d9      	bne.n	8008c72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cce:	4a15      	ldr	r2, [pc, #84]	@ (8008d24 <HAL_UART_IRQHandler+0x2c0>)
 8008cd0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f9 ff93 	bl	8002c04 <HAL_DMA_Abort_IT>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d019      	beq.n	8008d18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf6:	e00f      	b.n	8008d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa77 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfe:	e00b      	b.n	8008d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa73 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d06:	e007      	b.n	8008d18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa6f 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d16:	e253      	b.n	80091c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d18:	bf00      	nop
    return;
 8008d1a:	e251      	b.n	80091c0 <HAL_UART_IRQHandler+0x75c>
 8008d1c:	10000001 	.word	0x10000001
 8008d20:	04000120 	.word	0x04000120
 8008d24:	0800a6e7 	.word	0x0800a6e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	f040 81e7 	bne.w	8009100 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 81e0 	beq.w	8009100 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 81d9 	beq.w	8009100 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2210      	movs	r2, #16
 8008d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b40      	cmp	r3, #64	@ 0x40
 8008d62:	f040 8151 	bne.w	8009008 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a96      	ldr	r2, [pc, #600]	@ (8008fc8 <HAL_UART_IRQHandler+0x564>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d068      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a93      	ldr	r2, [pc, #588]	@ (8008fcc <HAL_UART_IRQHandler+0x568>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d061      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a91      	ldr	r2, [pc, #580]	@ (8008fd0 <HAL_UART_IRQHandler+0x56c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d05a      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a8e      	ldr	r2, [pc, #568]	@ (8008fd4 <HAL_UART_IRQHandler+0x570>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d053      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a8c      	ldr	r2, [pc, #560]	@ (8008fd8 <HAL_UART_IRQHandler+0x574>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d04c      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a89      	ldr	r2, [pc, #548]	@ (8008fdc <HAL_UART_IRQHandler+0x578>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d045      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a87      	ldr	r2, [pc, #540]	@ (8008fe0 <HAL_UART_IRQHandler+0x57c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d03e      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a84      	ldr	r2, [pc, #528]	@ (8008fe4 <HAL_UART_IRQHandler+0x580>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d037      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a82      	ldr	r2, [pc, #520]	@ (8008fe8 <HAL_UART_IRQHandler+0x584>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d030      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a7f      	ldr	r2, [pc, #508]	@ (8008fec <HAL_UART_IRQHandler+0x588>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d029      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8008ff0 <HAL_UART_IRQHandler+0x58c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d022      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a7a      	ldr	r2, [pc, #488]	@ (8008ff4 <HAL_UART_IRQHandler+0x590>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01b      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a78      	ldr	r2, [pc, #480]	@ (8008ff8 <HAL_UART_IRQHandler+0x594>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d014      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a75      	ldr	r2, [pc, #468]	@ (8008ffc <HAL_UART_IRQHandler+0x598>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00d      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a73      	ldr	r2, [pc, #460]	@ (8009000 <HAL_UART_IRQHandler+0x59c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d006      	beq.n	8008e46 <HAL_UART_IRQHandler+0x3e2>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a70      	ldr	r2, [pc, #448]	@ (8009004 <HAL_UART_IRQHandler+0x5a0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d106      	bne.n	8008e54 <HAL_UART_IRQHandler+0x3f0>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	e005      	b.n	8008e60 <HAL_UART_IRQHandler+0x3fc>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81ab 	beq.w	80091c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	f080 81a3 	bcs.w	80091c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e94:	f000 8087 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1da      	bne.n	8008e98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e1      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f74:	f023 0310 	bic.w	r3, r3, #16
 8008f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e4      	bne.n	8008f64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f9 fb11 	bl	80025c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f91d 	bl	8009200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fc6:	e0fd      	b.n	80091c4 <HAL_UART_IRQHandler+0x760>
 8008fc8:	40020010 	.word	0x40020010
 8008fcc:	40020028 	.word	0x40020028
 8008fd0:	40020040 	.word	0x40020040
 8008fd4:	40020058 	.word	0x40020058
 8008fd8:	40020070 	.word	0x40020070
 8008fdc:	40020088 	.word	0x40020088
 8008fe0:	400200a0 	.word	0x400200a0
 8008fe4:	400200b8 	.word	0x400200b8
 8008fe8:	40020410 	.word	0x40020410
 8008fec:	40020428 	.word	0x40020428
 8008ff0:	40020440 	.word	0x40020440
 8008ff4:	40020458 	.word	0x40020458
 8008ff8:	40020470 	.word	0x40020470
 8008ffc:	40020488 	.word	0x40020488
 8009000:	400204a0 	.word	0x400204a0
 8009004:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009014:	b29b      	uxth	r3, r3
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80cf 	beq.w	80091c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800902a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 80ca 	beq.w	80091c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009056:	647b      	str	r3, [r7, #68]	@ 0x44
 8009058:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800905c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e4      	bne.n	8009034 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	623b      	str	r3, [r7, #32]
   return(result);
 800907a:	6a3a      	ldr	r2, [r7, #32]
 800907c:	4b55      	ldr	r3, [pc, #340]	@ (80091d4 <HAL_UART_IRQHandler+0x770>)
 800907e:	4013      	ands	r3, r2
 8009080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3308      	adds	r3, #8
 800908a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800908e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800909c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e3      	bne.n	800906a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0310 	bic.w	r3, r3, #16
 80090ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	69b9      	ldr	r1, [r7, #24]
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	617b      	str	r3, [r7, #20]
   return(result);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e4      	bne.n	80090b6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f881 	bl	8009200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fe:	e063      	b.n	80091c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00e      	beq.n	800912a <HAL_UART_IRQHandler+0x6c6>
 800910c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fcc2 	bl	800aaac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009128:	e051      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d014      	beq.n	8009160 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800913a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d105      	bne.n	800914e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009152:	2b00      	cmp	r3, #0
 8009154:	d03a      	beq.n	80091cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
    }
    return;
 800915e:	e035      	b.n	80091cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <HAL_UART_IRQHandler+0x71c>
 800916c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fc6c 	bl	800aa56 <UART_EndTransmit_IT>
    return;
 800917e:	e026      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d009      	beq.n	80091a0 <HAL_UART_IRQHandler+0x73c>
 800918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009190:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fc9b 	bl	800aad4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919e:	e016      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d010      	beq.n	80091ce <HAL_UART_IRQHandler+0x76a>
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	da0c      	bge.n	80091ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fc83 	bl	800aac0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ba:	e008      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
      return;
 80091bc:	bf00      	nop
 80091be:	e006      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
    return;
 80091c0:	bf00      	nop
 80091c2:	e004      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
      return;
 80091c4:	bf00      	nop
 80091c6:	e002      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
      return;
 80091c8:	bf00      	nop
 80091ca:	e000      	b.n	80091ce <HAL_UART_IRQHandler+0x76a>
    return;
 80091cc:	bf00      	nop
  }
}
 80091ce:	37e8      	adds	r7, #232	@ 0xe8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	effffffe 	.word	0xeffffffe

080091d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800921c:	b092      	sub	sp, #72	@ 0x48
 800921e:	af00      	add	r7, sp, #0
 8009220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	431a      	orrs	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	431a      	orrs	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	4313      	orrs	r3, r2
 800923e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4bbe      	ldr	r3, [pc, #760]	@ (8009540 <UART_SetConfig+0x328>)
 8009248:	4013      	ands	r3, r2
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009250:	430b      	orrs	r3, r1
 8009252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4ab3      	ldr	r2, [pc, #716]	@ (8009544 <UART_SetConfig+0x32c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009280:	4313      	orrs	r3, r2
 8009282:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	4baf      	ldr	r3, [pc, #700]	@ (8009548 <UART_SetConfig+0x330>)
 800928c:	4013      	ands	r3, r2
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009294:	430b      	orrs	r3, r1
 8009296:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929e:	f023 010f 	bic.w	r1, r3, #15
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4aa6      	ldr	r2, [pc, #664]	@ (800954c <UART_SetConfig+0x334>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d177      	bne.n	80093a8 <UART_SetConfig+0x190>
 80092b8:	4ba5      	ldr	r3, [pc, #660]	@ (8009550 <UART_SetConfig+0x338>)
 80092ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092c0:	2b28      	cmp	r3, #40	@ 0x28
 80092c2:	d86d      	bhi.n	80093a0 <UART_SetConfig+0x188>
 80092c4:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <UART_SetConfig+0xb4>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	08009371 	.word	0x08009371
 80092d0:	080093a1 	.word	0x080093a1
 80092d4:	080093a1 	.word	0x080093a1
 80092d8:	080093a1 	.word	0x080093a1
 80092dc:	080093a1 	.word	0x080093a1
 80092e0:	080093a1 	.word	0x080093a1
 80092e4:	080093a1 	.word	0x080093a1
 80092e8:	080093a1 	.word	0x080093a1
 80092ec:	08009379 	.word	0x08009379
 80092f0:	080093a1 	.word	0x080093a1
 80092f4:	080093a1 	.word	0x080093a1
 80092f8:	080093a1 	.word	0x080093a1
 80092fc:	080093a1 	.word	0x080093a1
 8009300:	080093a1 	.word	0x080093a1
 8009304:	080093a1 	.word	0x080093a1
 8009308:	080093a1 	.word	0x080093a1
 800930c:	08009381 	.word	0x08009381
 8009310:	080093a1 	.word	0x080093a1
 8009314:	080093a1 	.word	0x080093a1
 8009318:	080093a1 	.word	0x080093a1
 800931c:	080093a1 	.word	0x080093a1
 8009320:	080093a1 	.word	0x080093a1
 8009324:	080093a1 	.word	0x080093a1
 8009328:	080093a1 	.word	0x080093a1
 800932c:	08009389 	.word	0x08009389
 8009330:	080093a1 	.word	0x080093a1
 8009334:	080093a1 	.word	0x080093a1
 8009338:	080093a1 	.word	0x080093a1
 800933c:	080093a1 	.word	0x080093a1
 8009340:	080093a1 	.word	0x080093a1
 8009344:	080093a1 	.word	0x080093a1
 8009348:	080093a1 	.word	0x080093a1
 800934c:	08009391 	.word	0x08009391
 8009350:	080093a1 	.word	0x080093a1
 8009354:	080093a1 	.word	0x080093a1
 8009358:	080093a1 	.word	0x080093a1
 800935c:	080093a1 	.word	0x080093a1
 8009360:	080093a1 	.word	0x080093a1
 8009364:	080093a1 	.word	0x080093a1
 8009368:	080093a1 	.word	0x080093a1
 800936c:	08009399 	.word	0x08009399
 8009370:	2301      	movs	r3, #1
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e326      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009378:	2304      	movs	r3, #4
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e322      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009380:	2308      	movs	r3, #8
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e31e      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009388:	2310      	movs	r3, #16
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e31a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009390:	2320      	movs	r3, #32
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e316      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009398:	2340      	movs	r3, #64	@ 0x40
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e312      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093a0:	2380      	movs	r3, #128	@ 0x80
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e30e      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a69      	ldr	r2, [pc, #420]	@ (8009554 <UART_SetConfig+0x33c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d130      	bne.n	8009414 <UART_SetConfig+0x1fc>
 80093b2:	4b67      	ldr	r3, [pc, #412]	@ (8009550 <UART_SetConfig+0x338>)
 80093b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b6:	f003 0307 	and.w	r3, r3, #7
 80093ba:	2b05      	cmp	r3, #5
 80093bc:	d826      	bhi.n	800940c <UART_SetConfig+0x1f4>
 80093be:	a201      	add	r2, pc, #4	@ (adr r2, 80093c4 <UART_SetConfig+0x1ac>)
 80093c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c4:	080093dd 	.word	0x080093dd
 80093c8:	080093e5 	.word	0x080093e5
 80093cc:	080093ed 	.word	0x080093ed
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	080093fd 	.word	0x080093fd
 80093d8:	08009405 	.word	0x08009405
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e2f0      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093e4:	2304      	movs	r3, #4
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e2ec      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093ec:	2308      	movs	r3, #8
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e2e8      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093f4:	2310      	movs	r3, #16
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e2e4      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80093fc:	2320      	movs	r3, #32
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e2e0      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009404:	2340      	movs	r3, #64	@ 0x40
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e2dc      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800940c:	2380      	movs	r3, #128	@ 0x80
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e2d8      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a4f      	ldr	r2, [pc, #316]	@ (8009558 <UART_SetConfig+0x340>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d130      	bne.n	8009480 <UART_SetConfig+0x268>
 800941e:	4b4c      	ldr	r3, [pc, #304]	@ (8009550 <UART_SetConfig+0x338>)
 8009420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b05      	cmp	r3, #5
 8009428:	d826      	bhi.n	8009478 <UART_SetConfig+0x260>
 800942a:	a201      	add	r2, pc, #4	@ (adr r2, 8009430 <UART_SetConfig+0x218>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	08009449 	.word	0x08009449
 8009434:	08009451 	.word	0x08009451
 8009438:	08009459 	.word	0x08009459
 800943c:	08009461 	.word	0x08009461
 8009440:	08009469 	.word	0x08009469
 8009444:	08009471 	.word	0x08009471
 8009448:	2300      	movs	r3, #0
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e2ba      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009450:	2304      	movs	r3, #4
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e2b6      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009458:	2308      	movs	r3, #8
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945e:	e2b2      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009460:	2310      	movs	r3, #16
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e2ae      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009468:	2320      	movs	r3, #32
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e2aa      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009470:	2340      	movs	r3, #64	@ 0x40
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e2a6      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009478:	2380      	movs	r3, #128	@ 0x80
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947e:	e2a2      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a35      	ldr	r2, [pc, #212]	@ (800955c <UART_SetConfig+0x344>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d130      	bne.n	80094ec <UART_SetConfig+0x2d4>
 800948a:	4b31      	ldr	r3, [pc, #196]	@ (8009550 <UART_SetConfig+0x338>)
 800948c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	2b05      	cmp	r3, #5
 8009494:	d826      	bhi.n	80094e4 <UART_SetConfig+0x2cc>
 8009496:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <UART_SetConfig+0x284>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094b5 	.word	0x080094b5
 80094a0:	080094bd 	.word	0x080094bd
 80094a4:	080094c5 	.word	0x080094c5
 80094a8:	080094cd 	.word	0x080094cd
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	2300      	movs	r3, #0
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e284      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094bc:	2304      	movs	r3, #4
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e280      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094c4:	2308      	movs	r3, #8
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e27c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094cc:	2310      	movs	r3, #16
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e278      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094d4:	2320      	movs	r3, #32
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e274      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094dc:	2340      	movs	r3, #64	@ 0x40
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e270      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094e4:	2380      	movs	r3, #128	@ 0x80
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e26c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009560 <UART_SetConfig+0x348>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d142      	bne.n	800957c <UART_SetConfig+0x364>
 80094f6:	4b16      	ldr	r3, [pc, #88]	@ (8009550 <UART_SetConfig+0x338>)
 80094f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d838      	bhi.n	8009574 <UART_SetConfig+0x35c>
 8009502:	a201      	add	r2, pc, #4	@ (adr r2, 8009508 <UART_SetConfig+0x2f0>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009521 	.word	0x08009521
 800950c:	08009529 	.word	0x08009529
 8009510:	08009531 	.word	0x08009531
 8009514:	08009539 	.word	0x08009539
 8009518:	08009565 	.word	0x08009565
 800951c:	0800956d 	.word	0x0800956d
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e24e      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e24a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e246      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e242      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009540:	cfff69f3 	.word	0xcfff69f3
 8009544:	58000c00 	.word	0x58000c00
 8009548:	11fff4ff 	.word	0x11fff4ff
 800954c:	40011000 	.word	0x40011000
 8009550:	58024400 	.word	0x58024400
 8009554:	40004400 	.word	0x40004400
 8009558:	40004800 	.word	0x40004800
 800955c:	40004c00 	.word	0x40004c00
 8009560:	40005000 	.word	0x40005000
 8009564:	2320      	movs	r3, #32
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e22c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800956c:	2340      	movs	r3, #64	@ 0x40
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e228      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009574:	2380      	movs	r3, #128	@ 0x80
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e224      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4ab1      	ldr	r2, [pc, #708]	@ (8009848 <UART_SetConfig+0x630>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d176      	bne.n	8009674 <UART_SetConfig+0x45c>
 8009586:	4bb1      	ldr	r3, [pc, #708]	@ (800984c <UART_SetConfig+0x634>)
 8009588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800958e:	2b28      	cmp	r3, #40	@ 0x28
 8009590:	d86c      	bhi.n	800966c <UART_SetConfig+0x454>
 8009592:	a201      	add	r2, pc, #4	@ (adr r2, 8009598 <UART_SetConfig+0x380>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	0800963d 	.word	0x0800963d
 800959c:	0800966d 	.word	0x0800966d
 80095a0:	0800966d 	.word	0x0800966d
 80095a4:	0800966d 	.word	0x0800966d
 80095a8:	0800966d 	.word	0x0800966d
 80095ac:	0800966d 	.word	0x0800966d
 80095b0:	0800966d 	.word	0x0800966d
 80095b4:	0800966d 	.word	0x0800966d
 80095b8:	08009645 	.word	0x08009645
 80095bc:	0800966d 	.word	0x0800966d
 80095c0:	0800966d 	.word	0x0800966d
 80095c4:	0800966d 	.word	0x0800966d
 80095c8:	0800966d 	.word	0x0800966d
 80095cc:	0800966d 	.word	0x0800966d
 80095d0:	0800966d 	.word	0x0800966d
 80095d4:	0800966d 	.word	0x0800966d
 80095d8:	0800964d 	.word	0x0800964d
 80095dc:	0800966d 	.word	0x0800966d
 80095e0:	0800966d 	.word	0x0800966d
 80095e4:	0800966d 	.word	0x0800966d
 80095e8:	0800966d 	.word	0x0800966d
 80095ec:	0800966d 	.word	0x0800966d
 80095f0:	0800966d 	.word	0x0800966d
 80095f4:	0800966d 	.word	0x0800966d
 80095f8:	08009655 	.word	0x08009655
 80095fc:	0800966d 	.word	0x0800966d
 8009600:	0800966d 	.word	0x0800966d
 8009604:	0800966d 	.word	0x0800966d
 8009608:	0800966d 	.word	0x0800966d
 800960c:	0800966d 	.word	0x0800966d
 8009610:	0800966d 	.word	0x0800966d
 8009614:	0800966d 	.word	0x0800966d
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800966d 	.word	0x0800966d
 8009620:	0800966d 	.word	0x0800966d
 8009624:	0800966d 	.word	0x0800966d
 8009628:	0800966d 	.word	0x0800966d
 800962c:	0800966d 	.word	0x0800966d
 8009630:	0800966d 	.word	0x0800966d
 8009634:	0800966d 	.word	0x0800966d
 8009638:	08009665 	.word	0x08009665
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e1c0      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009644:	2304      	movs	r3, #4
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e1bc      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800964c:	2308      	movs	r3, #8
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e1b8      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009654:	2310      	movs	r3, #16
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e1b4      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800965c:	2320      	movs	r3, #32
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e1b0      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009664:	2340      	movs	r3, #64	@ 0x40
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e1ac      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800966c:	2380      	movs	r3, #128	@ 0x80
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e1a8      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a75      	ldr	r2, [pc, #468]	@ (8009850 <UART_SetConfig+0x638>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d130      	bne.n	80096e0 <UART_SetConfig+0x4c8>
 800967e:	4b73      	ldr	r3, [pc, #460]	@ (800984c <UART_SetConfig+0x634>)
 8009680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b05      	cmp	r3, #5
 8009688:	d826      	bhi.n	80096d8 <UART_SetConfig+0x4c0>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <UART_SetConfig+0x478>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096a9 	.word	0x080096a9
 8009694:	080096b1 	.word	0x080096b1
 8009698:	080096b9 	.word	0x080096b9
 800969c:	080096c1 	.word	0x080096c1
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e18a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096b0:	2304      	movs	r3, #4
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e186      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096b8:	2308      	movs	r3, #8
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e182      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e17e      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096c8:	2320      	movs	r3, #32
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e17a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096d0:	2340      	movs	r3, #64	@ 0x40
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e176      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096d8:	2380      	movs	r3, #128	@ 0x80
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e172      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009854 <UART_SetConfig+0x63c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d130      	bne.n	800974c <UART_SetConfig+0x534>
 80096ea:	4b58      	ldr	r3, [pc, #352]	@ (800984c <UART_SetConfig+0x634>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d826      	bhi.n	8009744 <UART_SetConfig+0x52c>
 80096f6:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <UART_SetConfig+0x4e4>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009715 	.word	0x08009715
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009725 	.word	0x08009725
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009735 	.word	0x08009735
 8009710:	0800973d 	.word	0x0800973d
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e154      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e150      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e14c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e148      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009734:	2320      	movs	r3, #32
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973a:	e144      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800973c:	2340      	movs	r3, #64	@ 0x40
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009742:	e140      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009744:	2380      	movs	r3, #128	@ 0x80
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974a:	e13c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a41      	ldr	r2, [pc, #260]	@ (8009858 <UART_SetConfig+0x640>)
 8009752:	4293      	cmp	r3, r2
 8009754:	f040 8082 	bne.w	800985c <UART_SetConfig+0x644>
 8009758:	4b3c      	ldr	r3, [pc, #240]	@ (800984c <UART_SetConfig+0x634>)
 800975a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009760:	2b28      	cmp	r3, #40	@ 0x28
 8009762:	d86d      	bhi.n	8009840 <UART_SetConfig+0x628>
 8009764:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <UART_SetConfig+0x554>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	08009811 	.word	0x08009811
 8009770:	08009841 	.word	0x08009841
 8009774:	08009841 	.word	0x08009841
 8009778:	08009841 	.word	0x08009841
 800977c:	08009841 	.word	0x08009841
 8009780:	08009841 	.word	0x08009841
 8009784:	08009841 	.word	0x08009841
 8009788:	08009841 	.word	0x08009841
 800978c:	08009819 	.word	0x08009819
 8009790:	08009841 	.word	0x08009841
 8009794:	08009841 	.word	0x08009841
 8009798:	08009841 	.word	0x08009841
 800979c:	08009841 	.word	0x08009841
 80097a0:	08009841 	.word	0x08009841
 80097a4:	08009841 	.word	0x08009841
 80097a8:	08009841 	.word	0x08009841
 80097ac:	08009821 	.word	0x08009821
 80097b0:	08009841 	.word	0x08009841
 80097b4:	08009841 	.word	0x08009841
 80097b8:	08009841 	.word	0x08009841
 80097bc:	08009841 	.word	0x08009841
 80097c0:	08009841 	.word	0x08009841
 80097c4:	08009841 	.word	0x08009841
 80097c8:	08009841 	.word	0x08009841
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009841 	.word	0x08009841
 80097d4:	08009841 	.word	0x08009841
 80097d8:	08009841 	.word	0x08009841
 80097dc:	08009841 	.word	0x08009841
 80097e0:	08009841 	.word	0x08009841
 80097e4:	08009841 	.word	0x08009841
 80097e8:	08009841 	.word	0x08009841
 80097ec:	08009831 	.word	0x08009831
 80097f0:	08009841 	.word	0x08009841
 80097f4:	08009841 	.word	0x08009841
 80097f8:	08009841 	.word	0x08009841
 80097fc:	08009841 	.word	0x08009841
 8009800:	08009841 	.word	0x08009841
 8009804:	08009841 	.word	0x08009841
 8009808:	08009841 	.word	0x08009841
 800980c:	08009839 	.word	0x08009839
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e0d6      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009818:	2304      	movs	r3, #4
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e0d2      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009820:	2308      	movs	r3, #8
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e0ce      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e0ca      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009830:	2320      	movs	r3, #32
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e0c6      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009838:	2340      	movs	r3, #64	@ 0x40
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e0c2      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009840:	2380      	movs	r3, #128	@ 0x80
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e0be      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009848:	40011400 	.word	0x40011400
 800984c:	58024400 	.word	0x58024400
 8009850:	40007800 	.word	0x40007800
 8009854:	40007c00 	.word	0x40007c00
 8009858:	40011800 	.word	0x40011800
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4aad      	ldr	r2, [pc, #692]	@ (8009b18 <UART_SetConfig+0x900>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d176      	bne.n	8009954 <UART_SetConfig+0x73c>
 8009866:	4bad      	ldr	r3, [pc, #692]	@ (8009b1c <UART_SetConfig+0x904>)
 8009868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800986e:	2b28      	cmp	r3, #40	@ 0x28
 8009870:	d86c      	bhi.n	800994c <UART_SetConfig+0x734>
 8009872:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <UART_SetConfig+0x660>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	0800991d 	.word	0x0800991d
 800987c:	0800994d 	.word	0x0800994d
 8009880:	0800994d 	.word	0x0800994d
 8009884:	0800994d 	.word	0x0800994d
 8009888:	0800994d 	.word	0x0800994d
 800988c:	0800994d 	.word	0x0800994d
 8009890:	0800994d 	.word	0x0800994d
 8009894:	0800994d 	.word	0x0800994d
 8009898:	08009925 	.word	0x08009925
 800989c:	0800994d 	.word	0x0800994d
 80098a0:	0800994d 	.word	0x0800994d
 80098a4:	0800994d 	.word	0x0800994d
 80098a8:	0800994d 	.word	0x0800994d
 80098ac:	0800994d 	.word	0x0800994d
 80098b0:	0800994d 	.word	0x0800994d
 80098b4:	0800994d 	.word	0x0800994d
 80098b8:	0800992d 	.word	0x0800992d
 80098bc:	0800994d 	.word	0x0800994d
 80098c0:	0800994d 	.word	0x0800994d
 80098c4:	0800994d 	.word	0x0800994d
 80098c8:	0800994d 	.word	0x0800994d
 80098cc:	0800994d 	.word	0x0800994d
 80098d0:	0800994d 	.word	0x0800994d
 80098d4:	0800994d 	.word	0x0800994d
 80098d8:	08009935 	.word	0x08009935
 80098dc:	0800994d 	.word	0x0800994d
 80098e0:	0800994d 	.word	0x0800994d
 80098e4:	0800994d 	.word	0x0800994d
 80098e8:	0800994d 	.word	0x0800994d
 80098ec:	0800994d 	.word	0x0800994d
 80098f0:	0800994d 	.word	0x0800994d
 80098f4:	0800994d 	.word	0x0800994d
 80098f8:	0800993d 	.word	0x0800993d
 80098fc:	0800994d 	.word	0x0800994d
 8009900:	0800994d 	.word	0x0800994d
 8009904:	0800994d 	.word	0x0800994d
 8009908:	0800994d 	.word	0x0800994d
 800990c:	0800994d 	.word	0x0800994d
 8009910:	0800994d 	.word	0x0800994d
 8009914:	0800994d 	.word	0x0800994d
 8009918:	08009945 	.word	0x08009945
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e050      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009924:	2304      	movs	r3, #4
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e04c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800992c:	2308      	movs	r3, #8
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e048      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e044      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800993c:	2320      	movs	r3, #32
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e040      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009944:	2340      	movs	r3, #64	@ 0x40
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e03c      	b.n	80099c6 <UART_SetConfig+0x7ae>
 800994c:	2380      	movs	r3, #128	@ 0x80
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e038      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a71      	ldr	r2, [pc, #452]	@ (8009b20 <UART_SetConfig+0x908>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d130      	bne.n	80099c0 <UART_SetConfig+0x7a8>
 800995e:	4b6f      	ldr	r3, [pc, #444]	@ (8009b1c <UART_SetConfig+0x904>)
 8009960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b05      	cmp	r3, #5
 8009968:	d826      	bhi.n	80099b8 <UART_SetConfig+0x7a0>
 800996a:	a201      	add	r2, pc, #4	@ (adr r2, 8009970 <UART_SetConfig+0x758>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	08009989 	.word	0x08009989
 8009974:	08009991 	.word	0x08009991
 8009978:	08009999 	.word	0x08009999
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099b1 	.word	0x080099b1
 8009988:	2302      	movs	r3, #2
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e01a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009990:	2304      	movs	r3, #4
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e016      	b.n	80099c6 <UART_SetConfig+0x7ae>
 8009998:	2308      	movs	r3, #8
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e012      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80099a0:	2310      	movs	r3, #16
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e00e      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80099a8:	2320      	movs	r3, #32
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e00a      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80099b0:	2340      	movs	r3, #64	@ 0x40
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e006      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80099b8:	2380      	movs	r3, #128	@ 0x80
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e002      	b.n	80099c6 <UART_SetConfig+0x7ae>
 80099c0:	2380      	movs	r3, #128	@ 0x80
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a55      	ldr	r2, [pc, #340]	@ (8009b20 <UART_SetConfig+0x908>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	f040 80f8 	bne.w	8009bc2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	dc46      	bgt.n	8009a68 <UART_SetConfig+0x850>
 80099da:	2b02      	cmp	r3, #2
 80099dc:	db75      	blt.n	8009aca <UART_SetConfig+0x8b2>
 80099de:	3b02      	subs	r3, #2
 80099e0:	2b1e      	cmp	r3, #30
 80099e2:	d872      	bhi.n	8009aca <UART_SetConfig+0x8b2>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <UART_SetConfig+0x7d4>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a6f 	.word	0x08009a6f
 80099f0:	08009acb 	.word	0x08009acb
 80099f4:	08009a77 	.word	0x08009a77
 80099f8:	08009acb 	.word	0x08009acb
 80099fc:	08009acb 	.word	0x08009acb
 8009a00:	08009acb 	.word	0x08009acb
 8009a04:	08009a87 	.word	0x08009a87
 8009a08:	08009acb 	.word	0x08009acb
 8009a0c:	08009acb 	.word	0x08009acb
 8009a10:	08009acb 	.word	0x08009acb
 8009a14:	08009acb 	.word	0x08009acb
 8009a18:	08009acb 	.word	0x08009acb
 8009a1c:	08009acb 	.word	0x08009acb
 8009a20:	08009acb 	.word	0x08009acb
 8009a24:	08009a97 	.word	0x08009a97
 8009a28:	08009acb 	.word	0x08009acb
 8009a2c:	08009acb 	.word	0x08009acb
 8009a30:	08009acb 	.word	0x08009acb
 8009a34:	08009acb 	.word	0x08009acb
 8009a38:	08009acb 	.word	0x08009acb
 8009a3c:	08009acb 	.word	0x08009acb
 8009a40:	08009acb 	.word	0x08009acb
 8009a44:	08009acb 	.word	0x08009acb
 8009a48:	08009acb 	.word	0x08009acb
 8009a4c:	08009acb 	.word	0x08009acb
 8009a50:	08009acb 	.word	0x08009acb
 8009a54:	08009acb 	.word	0x08009acb
 8009a58:	08009acb 	.word	0x08009acb
 8009a5c:	08009acb 	.word	0x08009acb
 8009a60:	08009acb 	.word	0x08009acb
 8009a64:	08009abd 	.word	0x08009abd
 8009a68:	2b40      	cmp	r3, #64	@ 0x40
 8009a6a:	d02a      	beq.n	8009ac2 <UART_SetConfig+0x8aa>
 8009a6c:	e02d      	b.n	8009aca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a6e:	f7fd fd9b 	bl	80075a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a74:	e02f      	b.n	8009ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd fdaa 	bl	80075d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e027      	b.n	8009ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a86:	f107 0318 	add.w	r3, r7, #24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fd fef6 	bl	800787c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a94:	e01f      	b.n	8009ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a96:	4b21      	ldr	r3, [pc, #132]	@ (8009b1c <UART_SetConfig+0x904>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b1c <UART_SetConfig+0x904>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	08db      	lsrs	r3, r3, #3
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	4a1d      	ldr	r2, [pc, #116]	@ (8009b24 <UART_SetConfig+0x90c>)
 8009aae:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ab4:	e00f      	b.n	8009ad6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b24 <UART_SetConfig+0x90c>)
 8009ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aba:	e00c      	b.n	8009ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009abc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b28 <UART_SetConfig+0x910>)
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac0:	e009      	b.n	8009ad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e005      	b.n	8009ad6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009aca:	2300      	movs	r3, #0
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 81ee 	beq.w	8009eba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae2:	4a12      	ldr	r2, [pc, #72]	@ (8009b2c <UART_SetConfig+0x914>)
 8009ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4413      	add	r3, r2
 8009afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d305      	bcc.n	8009b0e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d910      	bls.n	8009b30 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b14:	e1d1      	b.n	8009eba <UART_SetConfig+0xca2>
 8009b16:	bf00      	nop
 8009b18:	40011c00 	.word	0x40011c00
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	58000c00 	.word	0x58000c00
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	003d0900 	.word	0x003d0900
 8009b2c:	0800c728 	.word	0x0800c728
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b32:	2200      	movs	r2, #0
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	60fa      	str	r2, [r7, #12]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3c:	4ac0      	ldr	r2, [pc, #768]	@ (8009e40 <UART_SetConfig+0xc28>)
 8009b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2200      	movs	r2, #0
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b52:	f7f6 fc3d 	bl	80003d0 <__aeabi_uldivmod>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f04f 0200 	mov.w	r2, #0
 8009b62:	f04f 0300 	mov.w	r3, #0
 8009b66:	020b      	lsls	r3, r1, #8
 8009b68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b6c:	0202      	lsls	r2, r0, #8
 8009b6e:	6979      	ldr	r1, [r7, #20]
 8009b70:	6849      	ldr	r1, [r1, #4]
 8009b72:	0849      	lsrs	r1, r1, #1
 8009b74:	2000      	movs	r0, #0
 8009b76:	460c      	mov	r4, r1
 8009b78:	4605      	mov	r5, r0
 8009b7a:	eb12 0804 	adds.w	r8, r2, r4
 8009b7e:	eb43 0905 	adc.w	r9, r3, r5
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	469a      	mov	sl, r3
 8009b8a:	4693      	mov	fp, r2
 8009b8c:	4652      	mov	r2, sl
 8009b8e:	465b      	mov	r3, fp
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 fc1c 	bl	80003d0 <__aeabi_uldivmod>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ba6:	d308      	bcc.n	8009bba <UART_SetConfig+0x9a2>
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bae:	d204      	bcs.n	8009bba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bb6:	60da      	str	r2, [r3, #12]
 8009bb8:	e17f      	b.n	8009eba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bc0:	e17b      	b.n	8009eba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bca:	f040 80bd 	bne.w	8009d48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009bce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	dc48      	bgt.n	8009c68 <UART_SetConfig+0xa50>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	db7b      	blt.n	8009cd2 <UART_SetConfig+0xaba>
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d879      	bhi.n	8009cd2 <UART_SetConfig+0xaba>
 8009bde:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <UART_SetConfig+0x9cc>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009c6f 	.word	0x08009c6f
 8009be8:	08009c77 	.word	0x08009c77
 8009bec:	08009cd3 	.word	0x08009cd3
 8009bf0:	08009cd3 	.word	0x08009cd3
 8009bf4:	08009c7f 	.word	0x08009c7f
 8009bf8:	08009cd3 	.word	0x08009cd3
 8009bfc:	08009cd3 	.word	0x08009cd3
 8009c00:	08009cd3 	.word	0x08009cd3
 8009c04:	08009c8f 	.word	0x08009c8f
 8009c08:	08009cd3 	.word	0x08009cd3
 8009c0c:	08009cd3 	.word	0x08009cd3
 8009c10:	08009cd3 	.word	0x08009cd3
 8009c14:	08009cd3 	.word	0x08009cd3
 8009c18:	08009cd3 	.word	0x08009cd3
 8009c1c:	08009cd3 	.word	0x08009cd3
 8009c20:	08009cd3 	.word	0x08009cd3
 8009c24:	08009c9f 	.word	0x08009c9f
 8009c28:	08009cd3 	.word	0x08009cd3
 8009c2c:	08009cd3 	.word	0x08009cd3
 8009c30:	08009cd3 	.word	0x08009cd3
 8009c34:	08009cd3 	.word	0x08009cd3
 8009c38:	08009cd3 	.word	0x08009cd3
 8009c3c:	08009cd3 	.word	0x08009cd3
 8009c40:	08009cd3 	.word	0x08009cd3
 8009c44:	08009cd3 	.word	0x08009cd3
 8009c48:	08009cd3 	.word	0x08009cd3
 8009c4c:	08009cd3 	.word	0x08009cd3
 8009c50:	08009cd3 	.word	0x08009cd3
 8009c54:	08009cd3 	.word	0x08009cd3
 8009c58:	08009cd3 	.word	0x08009cd3
 8009c5c:	08009cd3 	.word	0x08009cd3
 8009c60:	08009cd3 	.word	0x08009cd3
 8009c64:	08009cc5 	.word	0x08009cc5
 8009c68:	2b40      	cmp	r3, #64	@ 0x40
 8009c6a:	d02e      	beq.n	8009cca <UART_SetConfig+0xab2>
 8009c6c:	e031      	b.n	8009cd2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c6e:	f7fc facf 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8009c72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c74:	e033      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c76:	f7fc fae1 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 8009c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c7c:	e02f      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fd fca6 	bl	80075d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8c:	e027      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c8e:	f107 0318 	add.w	r3, r7, #24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fd fdf2 	bl	800787c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c9c:	e01f      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c9e:	4b69      	ldr	r3, [pc, #420]	@ (8009e44 <UART_SetConfig+0xc2c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009caa:	4b66      	ldr	r3, [pc, #408]	@ (8009e44 <UART_SetConfig+0xc2c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	08db      	lsrs	r3, r3, #3
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	4a64      	ldr	r2, [pc, #400]	@ (8009e48 <UART_SetConfig+0xc30>)
 8009cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cbc:	e00f      	b.n	8009cde <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009cbe:	4b62      	ldr	r3, [pc, #392]	@ (8009e48 <UART_SetConfig+0xc30>)
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc2:	e00c      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cc4:	4b61      	ldr	r3, [pc, #388]	@ (8009e4c <UART_SetConfig+0xc34>)
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc8:	e009      	b.n	8009cde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd0:	e005      	b.n	8009cde <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80ea 	beq.w	8009eba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cea:	4a55      	ldr	r2, [pc, #340]	@ (8009e40 <UART_SetConfig+0xc28>)
 8009cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf8:	005a      	lsls	r2, r3, #1
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	085b      	lsrs	r3, r3, #1
 8009d00:	441a      	add	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d916      	bls.n	8009d40 <UART_SetConfig+0xb28>
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d18:	d212      	bcs.n	8009d40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f023 030f 	bic.w	r3, r3, #15
 8009d22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d32:	4313      	orrs	r3, r2
 8009d34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	e0bc      	b.n	8009eba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d46:	e0b8      	b.n	8009eba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	dc4b      	bgt.n	8009de8 <UART_SetConfig+0xbd0>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f2c0 8087 	blt.w	8009e64 <UART_SetConfig+0xc4c>
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	f200 8084 	bhi.w	8009e64 <UART_SetConfig+0xc4c>
 8009d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <UART_SetConfig+0xb4c>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009df7 	.word	0x08009df7
 8009d6c:	08009e65 	.word	0x08009e65
 8009d70:	08009e65 	.word	0x08009e65
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009e65 	.word	0x08009e65
 8009d7c:	08009e65 	.word	0x08009e65
 8009d80:	08009e65 	.word	0x08009e65
 8009d84:	08009e0f 	.word	0x08009e0f
 8009d88:	08009e65 	.word	0x08009e65
 8009d8c:	08009e65 	.word	0x08009e65
 8009d90:	08009e65 	.word	0x08009e65
 8009d94:	08009e65 	.word	0x08009e65
 8009d98:	08009e65 	.word	0x08009e65
 8009d9c:	08009e65 	.word	0x08009e65
 8009da0:	08009e65 	.word	0x08009e65
 8009da4:	08009e1f 	.word	0x08009e1f
 8009da8:	08009e65 	.word	0x08009e65
 8009dac:	08009e65 	.word	0x08009e65
 8009db0:	08009e65 	.word	0x08009e65
 8009db4:	08009e65 	.word	0x08009e65
 8009db8:	08009e65 	.word	0x08009e65
 8009dbc:	08009e65 	.word	0x08009e65
 8009dc0:	08009e65 	.word	0x08009e65
 8009dc4:	08009e65 	.word	0x08009e65
 8009dc8:	08009e65 	.word	0x08009e65
 8009dcc:	08009e65 	.word	0x08009e65
 8009dd0:	08009e65 	.word	0x08009e65
 8009dd4:	08009e65 	.word	0x08009e65
 8009dd8:	08009e65 	.word	0x08009e65
 8009ddc:	08009e65 	.word	0x08009e65
 8009de0:	08009e65 	.word	0x08009e65
 8009de4:	08009e57 	.word	0x08009e57
 8009de8:	2b40      	cmp	r3, #64	@ 0x40
 8009dea:	d037      	beq.n	8009e5c <UART_SetConfig+0xc44>
 8009dec:	e03a      	b.n	8009e64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dee:	f7fc fa0f 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8009df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009df4:	e03c      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df6:	f7fc fa21 	bl	800623c <HAL_RCC_GetPCLK2Freq>
 8009dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dfc:	e038      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fd fbe6 	bl	80075d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0c:	e030      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0e:	f107 0318 	add.w	r3, r7, #24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fd fd32 	bl	800787c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1c:	e028      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1e:	4b09      	ldr	r3, [pc, #36]	@ (8009e44 <UART_SetConfig+0xc2c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d012      	beq.n	8009e50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e2a:	4b06      	ldr	r3, [pc, #24]	@ (8009e44 <UART_SetConfig+0xc2c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	08db      	lsrs	r3, r3, #3
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	4a04      	ldr	r2, [pc, #16]	@ (8009e48 <UART_SetConfig+0xc30>)
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e3c:	e018      	b.n	8009e70 <UART_SetConfig+0xc58>
 8009e3e:	bf00      	nop
 8009e40:	0800c728 	.word	0x0800c728
 8009e44:	58024400 	.word	0x58024400
 8009e48:	03d09000 	.word	0x03d09000
 8009e4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e50:	4b24      	ldr	r3, [pc, #144]	@ (8009ee4 <UART_SetConfig+0xccc>)
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e54:	e00c      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <UART_SetConfig+0xcd0>)
 8009e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5a:	e009      	b.n	8009e70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e62:	e005      	b.n	8009e70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d021      	beq.n	8009eba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8009eec <UART_SetConfig+0xcd4>)
 8009e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e84:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	085b      	lsrs	r3, r3, #1
 8009e8e:	441a      	add	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e98:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	d909      	bls.n	8009eb4 <UART_SetConfig+0xc9c>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea6:	d205      	bcs.n	8009eb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	e002      	b.n	8009eba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ed6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3748      	adds	r7, #72	@ 0x48
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ee4:	03d09000 	.word	0x03d09000
 8009ee8:	003d0900 	.word	0x003d0900
 8009eec:	0800c728 	.word	0x0800c728

08009ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efc:	f003 0308 	and.w	r3, r3, #8
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00a      	beq.n	8009f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00a      	beq.n	8009f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01a      	beq.n	800a006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fee:	d10a      	bne.n	800a006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	430a      	orrs	r2, r1
 800a004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	605a      	str	r2, [r3, #4]
  }
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b098      	sub	sp, #96	@ 0x60
 800a038:	af02      	add	r7, sp, #8
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a044:	f7f7 fbce 	bl	80017e4 <HAL_GetTick>
 800a048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0308 	and.w	r3, r3, #8
 800a054:	2b08      	cmp	r3, #8
 800a056:	d12f      	bne.n	800a0b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a060:	2200      	movs	r2, #0
 800a062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f88e 	bl	800a188 <UART_WaitOnFlagUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d022      	beq.n	800a0b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a086:	653b      	str	r3, [r7, #80]	@ 0x50
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a090:	647b      	str	r3, [r7, #68]	@ 0x44
 800a092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e063      	b.n	800a180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d149      	bne.n	800a15a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f857 	bl	800a188 <UART_WaitOnFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d03c      	beq.n	800a15a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	e853 3f00 	ldrex	r3, [r3]
 800a0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a100:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e6      	bne.n	800a0e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3308      	adds	r3, #8
 800a118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	60fb      	str	r3, [r7, #12]
   return(result);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a132:	61fa      	str	r2, [r7, #28]
 800a134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	69b9      	ldr	r1, [r7, #24]
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	617b      	str	r3, [r7, #20]
   return(result);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e5      	bne.n	800a112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e012      	b.n	800a180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2220      	movs	r2, #32
 800a166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3758      	adds	r7, #88	@ 0x58
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a198:	e04f      	b.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a0:	d04b      	beq.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1a2:	f7f7 fb1f 	bl	80017e4 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d302      	bcc.n	800a1b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e04e      	b.n	800a25a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d037      	beq.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b80      	cmp	r3, #128	@ 0x80
 800a1ce:	d034      	beq.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b40      	cmp	r3, #64	@ 0x40
 800a1d4:	d031      	beq.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b08      	cmp	r3, #8
 800a1e2:	d110      	bne.n	800a206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 f921 	bl	800a434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2208      	movs	r2, #8
 800a1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e029      	b.n	800a25a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a214:	d111      	bne.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a21e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 f907 	bl	800a434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e00f      	b.n	800a25a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4013      	ands	r3, r2
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	429a      	cmp	r2, r3
 800a248:	bf0c      	ite	eq
 800a24a:	2301      	moveq	r3, #1
 800a24c:	2300      	movne	r3, #0
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	461a      	mov	r2, r3
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	429a      	cmp	r2, r3
 800a256:	d0a0      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b096      	sub	sp, #88	@ 0x58
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	88fa      	ldrh	r2, [r7, #6]
 800a27c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2222      	movs	r2, #34	@ 0x22
 800a28c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d02d      	beq.n	800a2f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a0:	4a40      	ldr	r2, [pc, #256]	@ (800a3a4 <UART_Start_Receive_DMA+0x140>)
 800a2a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2aa:	4a3f      	ldr	r2, [pc, #252]	@ (800a3a8 <UART_Start_Receive_DMA+0x144>)
 800a2ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b4:	4a3d      	ldr	r2, [pc, #244]	@ (800a3ac <UART_Start_Receive_DMA+0x148>)
 800a2b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2be:	2200      	movs	r2, #0
 800a2c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3324      	adds	r3, #36	@ 0x24
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	f7f7 ff0c 	bl	80020f4 <HAL_DMA_Start_IT>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e051      	b.n	800a39a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d018      	beq.n	800a330 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a312:	657b      	str	r3, [r7, #84]	@ 0x54
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a31e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e6      	bne.n	800a2fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	653b      	str	r3, [r7, #80]	@ 0x50
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3308      	adds	r3, #8
 800a34e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a350:	637a      	str	r2, [r7, #52]	@ 0x34
 800a352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a358:	e841 2300 	strex	r3, r2, [r1]
 800a35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e5      	bne.n	800a330 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	613b      	str	r3, [r7, #16]
   return(result);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3308      	adds	r3, #8
 800a382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a384:	623a      	str	r2, [r7, #32]
 800a386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	69f9      	ldr	r1, [r7, #28]
 800a38a:	6a3a      	ldr	r2, [r7, #32]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	61bb      	str	r3, [r7, #24]
   return(result);
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e5      	bne.n	800a364 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3758      	adds	r7, #88	@ 0x58
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800a501 	.word	0x0800a501
 800a3a8:	0800a629 	.word	0x0800a629
 800a3ac:	0800a667 	.word	0x0800a667

0800a3b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b08f      	sub	sp, #60	@ 0x3c
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e6      	bne.n	800a3b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a400:	633b      	str	r3, [r7, #48]	@ 0x30
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3308      	adds	r3, #8
 800a408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a40a:	61ba      	str	r2, [r7, #24]
 800a40c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6979      	ldr	r1, [r7, #20]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	613b      	str	r3, [r7, #16]
   return(result);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e5      	bne.n	800a3ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2220      	movs	r2, #32
 800a422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a426:	bf00      	nop
 800a428:	373c      	adds	r7, #60	@ 0x3c
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
	...

0800a434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a434:	b480      	push	{r7}
 800a436:	b095      	sub	sp, #84	@ 0x54
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a45a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a45c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e6      	bne.n	800a43c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3308      	adds	r3, #8
 800a474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	4b1e      	ldr	r3, [pc, #120]	@ (800a4fc <UART_EndRxTransfer+0xc8>)
 800a482:	4013      	ands	r3, r2
 800a484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3308      	adds	r3, #8
 800a48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a48e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e5      	bne.n	800a46e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d118      	bne.n	800a4dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	f023 0310 	bic.w	r3, r3, #16
 800a4be:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4f0:	bf00      	nop
 800a4f2:	3754      	adds	r7, #84	@ 0x54
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	effffffe 	.word	0xeffffffe

0800a500 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b09c      	sub	sp, #112	@ 0x70
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a516:	d071      	beq.n	800a5fc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a52e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a534:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a53e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a540:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e6      	bne.n	800a520 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	e853 3f00 	ldrex	r3, [r3]
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a564:	f023 0301 	bic.w	r3, r3, #1
 800a568:	667b      	str	r3, [r7, #100]	@ 0x64
 800a56a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a572:	647a      	str	r2, [r7, #68]	@ 0x44
 800a574:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e5      	bne.n	800a552 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	3308      	adds	r3, #8
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	623b      	str	r3, [r7, #32]
   return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a59c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e5      	bne.n	800a586 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d118      	bne.n	800a5fc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0310 	bic.w	r3, r3, #16
 800a5de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69b9      	ldr	r1, [r7, #24]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e6      	bne.n	800a5ca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5fe:	2200      	movs	r2, #0
 800a600:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d107      	bne.n	800a61a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a60c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a610:	4619      	mov	r1, r3
 800a612:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a614:	f7fe fdf4 	bl	8009200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a618:	e002      	b.n	800a620 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a61a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a61c:	f000 fc3c 	bl	800ae98 <HAL_UART_RxCpltCallback>
}
 800a620:	bf00      	nop
 800a622:	3770      	adds	r7, #112	@ 0x70
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d109      	bne.n	800a658 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4619      	mov	r1, r3
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7fe fdd5 	bl	8009200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a656:	e002      	b.n	800a65e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7fe fdbd 	bl	80091d8 <HAL_UART_RxHalfCpltCallback>
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a672:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a67a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a682:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a68e:	2b80      	cmp	r3, #128	@ 0x80
 800a690:	d109      	bne.n	800a6a6 <UART_DMAError+0x40>
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b21      	cmp	r3, #33	@ 0x21
 800a696:	d106      	bne.n	800a6a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	f7ff fe85 	bl	800a3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b0:	2b40      	cmp	r3, #64	@ 0x40
 800a6b2:	d109      	bne.n	800a6c8 <UART_DMAError+0x62>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b22      	cmp	r3, #34	@ 0x22
 800a6b8:	d106      	bne.n	800a6c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f7ff feb6 	bl	800a434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ce:	f043 0210 	orr.w	r2, r3, #16
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6d8:	6978      	ldr	r0, [r7, #20]
 800a6da:	f7fe fd87 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6de:	bf00      	nop
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7fe fd71 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a712:	b480      	push	{r7}
 800a714:	b08f      	sub	sp, #60	@ 0x3c
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a720:	2b21      	cmp	r3, #33	@ 0x21
 800a722:	d14c      	bne.n	800a7be <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d132      	bne.n	800a796 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a750:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e6      	bne.n	800a730 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a784:	6979      	ldr	r1, [r7, #20]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	e841 2300 	strex	r3, r2, [r1]
 800a78c:	613b      	str	r3, [r7, #16]
   return(result);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e6      	bne.n	800a762 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a794:	e013      	b.n	800a7be <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a7be:	bf00      	nop
 800a7c0:	373c      	adds	r7, #60	@ 0x3c
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b091      	sub	sp, #68	@ 0x44
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7d8:	2b21      	cmp	r3, #33	@ 0x21
 800a7da:	d151      	bne.n	800a880 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d132      	bne.n	800a84e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	e853 3f00 	ldrex	r3, [r3]
 800a7f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	633b      	str	r3, [r7, #48]	@ 0x30
 800a808:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a80c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80e:	e841 2300 	strex	r3, r2, [r1]
 800a812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e6      	bne.n	800a7e8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	60fb      	str	r3, [r7, #12]
   return(result);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a838:	61fb      	str	r3, [r7, #28]
 800a83a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	69b9      	ldr	r1, [r7, #24]
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	617b      	str	r3, [r7, #20]
   return(result);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e6      	bne.n	800a81a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a84c:	e018      	b.n	800a880 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a862:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a868:	1c9a      	adds	r2, r3, #2
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a874:	b29b      	uxth	r3, r3
 800a876:	3b01      	subs	r3, #1
 800a878:	b29a      	uxth	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a880:	bf00      	nop
 800a882:	3744      	adds	r7, #68	@ 0x44
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b091      	sub	sp, #68	@ 0x44
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a89a:	2b21      	cmp	r3, #33	@ 0x21
 800a89c:	d160      	bne.n	800a960 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a8a6:	e057      	b.n	800a958 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d133      	bne.n	800a91c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8dc:	e841 2300 	strex	r3, r2, [r1]
 800a8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e5      	bne.n	800a8b4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	e853 3f00 	ldrex	r3, [r3]
 800a8f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90a:	69b9      	ldr	r1, [r7, #24]
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	e841 2300 	strex	r3, r2, [r1]
 800a912:	617b      	str	r3, [r7, #20]
   return(result);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e6      	bne.n	800a8e8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a91a:	e021      	b.n	800a960 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b00      	cmp	r3, #0
 800a928:	d013      	beq.n	800a952 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a946:	b29b      	uxth	r3, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a954:	3b01      	subs	r3, #1
 800a956:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a958:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1a4      	bne.n	800a8a8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a95e:	e7ff      	b.n	800a960 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a960:	bf00      	nop
 800a962:	3744      	adds	r7, #68	@ 0x44
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b091      	sub	sp, #68	@ 0x44
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a97a:	2b21      	cmp	r3, #33	@ 0x21
 800a97c:	d165      	bne.n	800aa4a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a984:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a986:	e05c      	b.n	800aa42 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a98e:	b29b      	uxth	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	d133      	bne.n	800a9fc <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3308      	adds	r3, #8
 800a99a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a9aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e5      	bne.n	800a994 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	61bb      	str	r3, [r7, #24]
 800a9e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	6979      	ldr	r1, [r7, #20]
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e6      	bne.n	800a9c8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a9fa:	e026      	b.n	800aa4a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d018      	beq.n	800aa3c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	461a      	mov	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa1e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa24:	1c9a      	adds	r2, r3, #2
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	3b01      	subs	r3, #1
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aa3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aa42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d19f      	bne.n	800a988 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aa48:	e7ff      	b.n	800aa4a <UART_TxISR_16BIT_FIFOEN+0xde>
 800aa4a:	bf00      	nop
 800aa4c:	3744      	adds	r7, #68	@ 0x44
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	61bb      	str	r3, [r7, #24]
 800aa7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	613b      	str	r3, [r7, #16]
   return(result);
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e6      	bne.n	800aa5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2220      	movs	r2, #32
 800aa94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa0a 	bl	800aeb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa4:	bf00      	nop
 800aaa6:	3720      	adds	r7, #32
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d101      	bne.n	800aafe <HAL_UARTEx_DisableFifoMode+0x16>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e027      	b.n	800ab4e <HAL_UARTEx_DisableFifoMode+0x66>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2224      	movs	r2, #36	@ 0x24
 800ab0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0201 	bic.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d101      	bne.n	800ab72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab6e:	2302      	movs	r3, #2
 800ab70:	e02d      	b.n	800abce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2224      	movs	r2, #36	@ 0x24
 800ab7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f022 0201 	bic.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f850 	bl	800ac54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abea:	2302      	movs	r3, #2
 800abec:	e02d      	b.n	800ac4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2224      	movs	r2, #36	@ 0x24
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0201 	bic.w	r2, r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f812 	bl	800ac54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d108      	bne.n	800ac76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac74:	e031      	b.n	800acda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac76:	2310      	movs	r3, #16
 800ac78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	0e5b      	lsrs	r3, r3, #25
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	0f5b      	lsrs	r3, r3, #29
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	f003 0307 	and.w	r3, r3, #7
 800ac9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	7b3a      	ldrb	r2, [r7, #12]
 800aca2:	4911      	ldr	r1, [pc, #68]	@ (800ace8 <UARTEx_SetNbDataToProcess+0x94>)
 800aca4:	5c8a      	ldrb	r2, [r1, r2]
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800acaa:	7b3a      	ldrb	r2, [r7, #12]
 800acac:	490f      	ldr	r1, [pc, #60]	@ (800acec <UARTEx_SetNbDataToProcess+0x98>)
 800acae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	7b7a      	ldrb	r2, [r7, #13]
 800acc0:	4909      	ldr	r1, [pc, #36]	@ (800ace8 <UARTEx_SetNbDataToProcess+0x94>)
 800acc2:	5c8a      	ldrb	r2, [r1, r2]
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acc8:	7b7a      	ldrb	r2, [r7, #13]
 800acca:	4908      	ldr	r1, [pc, #32]	@ (800acec <UARTEx_SetNbDataToProcess+0x98>)
 800accc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acce:	fb93 f3f2 	sdiv	r3, r3, r2
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	0800c740 	.word	0x0800c740
 800acec:	0800c748 	.word	0x0800c748

0800acf0 <HAL_GPIO_EXTI_Callback>:
 *      Author: Aswin
 */
#include "gpioInt.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800acfa:	f000 f81f 	bl	800ad3c <HAL_ResumeTick>
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <startLowPowerMode>:
#include "lowPowerMode.h"



void startLowPowerMode(void)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 800ad0a:	f000 f807 	bl	800ad1c <HAL_SuspendTick>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800ad0e:	2101      	movs	r1, #1
 800ad10:	2000      	movs	r0, #0
 800ad12:	f7fa faef 	bl	80052f4 <HAL_PWR_EnterSLEEPMode>
}
 800ad16:	bf00      	nop
 800ad18:	bd80      	pop	{r7, pc}
	...

0800ad1c <HAL_SuspendTick>:


void HAL_SuspendTick(void)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ad20:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <HAL_SuspendTick+0x1c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a04      	ldr	r2, [pc, #16]	@ (800ad38 <HAL_SuspendTick+0x1c>)
 800ad26:	f023 0302 	bic.w	r3, r3, #2
 800ad2a:	6013      	str	r3, [r2, #0]
}
 800ad2c:	bf00      	nop
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	e000e010 	.word	0xe000e010

0800ad3c <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ad40:	4b05      	ldr	r3, [pc, #20]	@ (800ad58 <HAL_ResumeTick+0x1c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a04      	ldr	r2, [pc, #16]	@ (800ad58 <HAL_ResumeTick+0x1c>)
 800ad46:	f043 0302 	orr.w	r3, r3, #2
 800ad4a:	6013      	str	r3, [r2, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	e000e010 	.word	0xe000e010

0800ad5c <RTCInit>:
		.mins	= 0,
		.secs	= 21
};

void RTCInit(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800ad60:	2101      	movs	r1, #1
 800ad62:	4809      	ldr	r0, [pc, #36]	@ (800ad88 <RTCInit+0x2c>)
 800ad64:	f7fd fcaa 	bl	80086bc <HAL_RTCEx_BKUPRead>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f242 3246 	movw	r2, #9030	@ 0x2346
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d008      	beq.n	800ad84 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800ad72:	4806      	ldr	r0, [pc, #24]	@ (800ad8c <RTCInit+0x30>)
 800ad74:	f000 f810 	bl	800ad98 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800ad78:	2364      	movs	r3, #100	@ 0x64
 800ad7a:	220d      	movs	r2, #13
 800ad7c:	4904      	ldr	r1, [pc, #16]	@ (800ad90 <RTCInit+0x34>)
 800ad7e:	4805      	ldr	r0, [pc, #20]	@ (800ad94 <RTCInit+0x38>)
 800ad80:	f7fd fd02 	bl	8008788 <HAL_UART_Transmit>
	}
}
 800ad84:	bf00      	nop
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	240006c8 	.word	0x240006c8
 800ad8c:	24000070 	.word	0x24000070
 800ad90:	0800c6e8 	.word	0x0800c6e8
 800ad94:	240006f0 	.word	0x240006f0

0800ad98 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800ada0:	f107 030c 	add.w	r3, r7, #12
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	609a      	str	r2, [r3, #8]
 800adac:	60da      	str	r2, [r3, #12]
 800adae:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	785b      	ldrb	r3, [r3, #1]
 800adba:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	789b      	ldrb	r3, [r3, #2]
 800adc0:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800adca:	2300      	movs	r3, #0
 800adcc:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	78db      	ldrb	r3, [r3, #3]
 800add2:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	795b      	ldrb	r3, [r3, #5]
 800add8:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	791b      	ldrb	r3, [r3, #4]
 800adde:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	799b      	ldrb	r3, [r3, #6]
 800ade4:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	2200      	movs	r2, #0
 800adec:	4619      	mov	r1, r3
 800adee:	4810      	ldr	r0, [pc, #64]	@ (800ae30 <setRTCData+0x98>)
 800adf0:	f7fd f87e 	bl	8007ef0 <HAL_RTC_SetTime>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d115      	bne.n	800ae26 <setRTCData+0x8e>
 800adfa:	f107 0308 	add.w	r3, r7, #8
 800adfe:	2200      	movs	r2, #0
 800ae00:	4619      	mov	r1, r3
 800ae02:	480b      	ldr	r0, [pc, #44]	@ (800ae30 <setRTCData+0x98>)
 800ae04:	f7fd f96e 	bl	80080e4 <HAL_RTC_SetDate>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <setRTCData+0x8e>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800ae0e:	f242 3245 	movw	r2, #9029	@ 0x2345
 800ae12:	2101      	movs	r1, #1
 800ae14:	4806      	ldr	r0, [pc, #24]	@ (800ae30 <setRTCData+0x98>)
 800ae16:	f7fd fc39 	bl	800868c <HAL_RTCEx_BKUPWrite>
		HAL_UART_Transmit(&huart3, "RTC date Time Set\r\n", 18, 100);
 800ae1a:	2364      	movs	r3, #100	@ 0x64
 800ae1c:	2212      	movs	r2, #18
 800ae1e:	4905      	ldr	r1, [pc, #20]	@ (800ae34 <setRTCData+0x9c>)
 800ae20:	4805      	ldr	r0, [pc, #20]	@ (800ae38 <setRTCData+0xa0>)
 800ae22:	f7fd fcb1 	bl	8008788 <HAL_UART_Transmit>
	}
}
 800ae26:	bf00      	nop
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	240006c8 	.word	0x240006c8
 800ae34:	0800c6fc 	.word	0x0800c6fc
 800ae38:	240006f0 	.word	0x240006f0

0800ae3c <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800ae44:	f107 0308 	add.w	r3, r7, #8
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4811      	ldr	r0, [pc, #68]	@ (800ae94 <getRTCData+0x58>)
 800ae4e:	f7fd f8ed 	bl	800802c <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800ae52:	f107 031c 	add.w	r3, r7, #28
 800ae56:	2200      	movs	r2, #0
 800ae58:	4619      	mov	r1, r3
 800ae5a:	480e      	ldr	r0, [pc, #56]	@ (800ae94 <getRTCData+0x58>)
 800ae5c:	f7fd f9ca 	bl	80081f4 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800ae60:	7fba      	ldrb	r2, [r7, #30]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800ae66:	7f3a      	ldrb	r2, [r7, #28]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800ae6c:	7f7a      	ldrb	r2, [r7, #29]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800ae72:	7ffa      	ldrb	r2, [r7, #31]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800ae78:	7a3a      	ldrb	r2, [r7, #8]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800ae7e:	7a7a      	ldrb	r2, [r7, #9]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800ae84:	7aba      	ldrb	r2, [r7, #10]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	709a      	strb	r2, [r3, #2]
}
 800ae8a:	bf00      	nop
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	240006c8 	.word	0x240006c8

0800ae98 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800aea0:	4b04      	ldr	r3, [pc, #16]	@ (800aeb4 <HAL_UART_RxCpltCallback+0x1c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]

	fptr();
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	4798      	blx	r3
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	24000800 	.word	0x24000800

0800aeb8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]

}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800aed4:	4a04      	ldr	r2, [pc, #16]	@ (800aee8 <uartInit+0x1c>)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6013      	str	r3, [r2, #0]
}
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	24000800 	.word	0x24000800

0800aeec <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800aef4:	2201      	movs	r2, #1
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	4803      	ldr	r0, [pc, #12]	@ (800af08 <receptionItrOn+0x1c>)
 800aefa:	f7fd fd67 	bl	80089cc <HAL_UART_Receive_DMA>
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	240006f0 	.word	0x240006f0

0800af0c <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800af10:	4b08      	ldr	r3, [pc, #32]	@ (800af34 <debugRxCallback+0x28>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b0d      	cmp	r3, #13
 800af16:	d102      	bne.n	800af1e <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800af18:	4b07      	ldr	r3, [pc, #28]	@ (800af38 <debugRxCallback+0x2c>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800af1e:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <debugRxCallback+0x30>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4904      	ldr	r1, [pc, #16]	@ (800af34 <debugRxCallback+0x28>)
 800af24:	4618      	mov	r0, r3
 800af26:	f000 f88a 	bl	800b03e <circularBufferEnqueue>
	receptionItrOn(&data);
 800af2a:	4802      	ldr	r0, [pc, #8]	@ (800af34 <debugRxCallback+0x28>)
 800af2c:	f7ff ffde 	bl	800aeec <receptionItrOn>

}
 800af30:	bf00      	nop
 800af32:	bd80      	pop	{r7, pc}
 800af34:	24000804 	.word	0x24000804
 800af38:	2400080c 	.word	0x2400080c
 800af3c:	24000808 	.word	0x24000808

0800af40 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800af46:	4b0a      	ldr	r3, [pc, #40]	@ (800af70 <debugUartInit+0x30>)
 800af48:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800af4a:	4b0a      	ldr	r3, [pc, #40]	@ (800af74 <debugUartInit+0x34>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2201      	movs	r2, #1
 800af50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af54:	4618      	mov	r0, r3
 800af56:	f000 f839 	bl	800afcc <circularBufferInit>

	uartInit(rxCallbackFptr);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff ffb6 	bl	800aecc <uartInit>

	receptionItrOn(&data);
 800af60:	4805      	ldr	r0, [pc, #20]	@ (800af78 <debugUartInit+0x38>)
 800af62:	f7ff ffc3 	bl	800aeec <receptionItrOn>
}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	0800af0d 	.word	0x0800af0d
 800af74:	24000808 	.word	0x24000808
 800af78:	24000804 	.word	0x24000804

0800af7c <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800af80:	4b03      	ldr	r3, [pc, #12]	@ (800af90 <getCmdReceivedFlag+0x14>)
 800af82:	781b      	ldrb	r3, [r3, #0]
}
 800af84:	4618      	mov	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	2400080c 	.word	0x2400080c

0800af94 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800af9e:	4a04      	ldr	r2, [pc, #16]	@ (800afb0 <setCmdReceivedFlag+0x1c>)
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	7013      	strb	r3, [r2, #0]
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	2400080c 	.word	0x2400080c

0800afb4 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
	return rxBuffer;
 800afb8:	4b03      	ldr	r3, [pc, #12]	@ (800afc8 <getRxBuffer+0x14>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	24000808 	.word	0x24000808

0800afcc <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	807b      	strh	r3, [r7, #2]
 800afd8:	4613      	mov	r3, r2
 800afda:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	883a      	ldrh	r2, [r7, #0]
 800aff0:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	887a      	ldrh	r2, [r7, #2]
 800aff6:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800aff8:	887b      	ldrh	r3, [r7, #2]
 800affa:	883a      	ldrh	r2, [r7, #0]
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	4618      	mov	r0, r3
 800b002:	f000 f8ad 	bl	800b160 <malloc>
 800b006:	4603      	mov	r3, r0
 800b008:	461a      	mov	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68d8      	ldr	r0, [r3, #12]
 800b020:	887b      	ldrh	r3, [r7, #2]
 800b022:	883a      	ldrh	r2, [r7, #0]
 800b024:	fb02 f303 	mul.w	r3, r2, r3
 800b028:	461a      	mov	r2, r3
 800b02a:	2100      	movs	r1, #0
 800b02c:	f000 fb0b 	bl	800b646 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800b030:	2300      	movs	r3, #0
 800b032:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800b048:	2303      	movs	r3, #3
 800b04a:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	889b      	ldrh	r3, [r3, #4]
 800b058:	89ba      	ldrh	r2, [r7, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d301      	bcc.n	800b062 <circularBufferEnqueue+0x24>
    {
        next = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	89ba      	ldrh	r2, [r7, #12]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d02b      	beq.n	800b0c4 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	8812      	ldrh	r2, [r2, #0]
 800b074:	4611      	mov	r1, r2
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	88d2      	ldrh	r2, [r2, #6]
 800b07a:	fb01 f202 	mul.w	r2, r1, r2
 800b07e:	1898      	adds	r0, r3, r2
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	88db      	ldrh	r3, [r3, #6]
 800b084:	461a      	mov	r2, r3
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	f000 fbc5 	bl	800b816 <memcpy>
 800b08c:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d017      	beq.n	800b0c4 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	89ba      	ldrh	r2, [r7, #12]
 800b098:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800b09a:	2302      	movs	r3, #2
 800b09c:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	889b      	ldrh	r3, [r3, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	8852      	ldrh	r2, [r2, #2]
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	8892      	ldrh	r2, [r2, #4]
 800b0b4:	fb93 f1f2 	sdiv	r1, r3, r2
 800b0b8:	fb01 f202 	mul.w	r2, r1, r2
 800b0bc:	1a9b      	subs	r3, r3, r2
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800b0d8:	2305      	movs	r3, #5
 800b0da:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	885a      	ldrh	r2, [r3, #2]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d032      	beq.n	800b14e <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	885b      	ldrh	r3, [r3, #2]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	889b      	ldrh	r3, [r3, #4]
 800b0f4:	89ba      	ldrh	r2, [r7, #12]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d301      	bcc.n	800b0fe <circularBufferDequeue+0x30>
        {
            next = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	8852      	ldrh	r2, [r2, #2]
 800b106:	4611      	mov	r1, r2
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	88d2      	ldrh	r2, [r2, #6]
 800b10c:	fb01 f202 	mul.w	r2, r1, r2
 800b110:	1899      	adds	r1, r3, r2
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	88db      	ldrh	r3, [r3, #6]
 800b116:	461a      	mov	r2, r3
 800b118:	6838      	ldr	r0, [r7, #0]
 800b11a:	f000 fb7c 	bl	800b816 <memcpy>

        cBuff->tail = next;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	89ba      	ldrh	r2, [r7, #12]
 800b122:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	889b      	ldrh	r3, [r3, #4]
 800b12e:	4413      	add	r3, r2
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	8852      	ldrh	r2, [r2, #2]
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	8892      	ldrh	r2, [r2, #4]
 800b13a:	fb93 f1f2 	sdiv	r1, r3, r2
 800b13e:	fb01 f202 	mul.w	r2, r1, r2
 800b142:	1a9b      	subs	r3, r3, r2
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800b14a:	2304      	movs	r3, #4
 800b14c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <atoi>:
 800b158:	220a      	movs	r2, #10
 800b15a:	2100      	movs	r1, #0
 800b15c:	f000 b930 	b.w	800b3c0 <strtol>

0800b160 <malloc>:
 800b160:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <malloc+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f000 b825 	b.w	800b1b4 <_malloc_r>
 800b16a:	bf00      	nop
 800b16c:	24000084 	.word	0x24000084

0800b170 <sbrk_aligned>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	4e0f      	ldr	r6, [pc, #60]	@ (800b1b0 <sbrk_aligned+0x40>)
 800b174:	460c      	mov	r4, r1
 800b176:	6831      	ldr	r1, [r6, #0]
 800b178:	4605      	mov	r5, r0
 800b17a:	b911      	cbnz	r1, 800b182 <sbrk_aligned+0x12>
 800b17c:	f000 fafc 	bl	800b778 <_sbrk_r>
 800b180:	6030      	str	r0, [r6, #0]
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 faf7 	bl	800b778 <_sbrk_r>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	d103      	bne.n	800b196 <sbrk_aligned+0x26>
 800b18e:	f04f 34ff 	mov.w	r4, #4294967295
 800b192:	4620      	mov	r0, r4
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	1cc4      	adds	r4, r0, #3
 800b198:	f024 0403 	bic.w	r4, r4, #3
 800b19c:	42a0      	cmp	r0, r4
 800b19e:	d0f8      	beq.n	800b192 <sbrk_aligned+0x22>
 800b1a0:	1a21      	subs	r1, r4, r0
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 fae8 	bl	800b778 <_sbrk_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d1f2      	bne.n	800b192 <sbrk_aligned+0x22>
 800b1ac:	e7ef      	b.n	800b18e <sbrk_aligned+0x1e>
 800b1ae:	bf00      	nop
 800b1b0:	24000810 	.word	0x24000810

0800b1b4 <_malloc_r>:
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	1ccd      	adds	r5, r1, #3
 800b1ba:	f025 0503 	bic.w	r5, r5, #3
 800b1be:	3508      	adds	r5, #8
 800b1c0:	2d0c      	cmp	r5, #12
 800b1c2:	bf38      	it	cc
 800b1c4:	250c      	movcc	r5, #12
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	db01      	blt.n	800b1d0 <_malloc_r+0x1c>
 800b1cc:	42a9      	cmp	r1, r5
 800b1ce:	d904      	bls.n	800b1da <_malloc_r+0x26>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	6033      	str	r3, [r6, #0]
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2b0 <_malloc_r+0xfc>
 800b1de:	f000 f869 	bl	800b2b4 <__malloc_lock>
 800b1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e6:	461c      	mov	r4, r3
 800b1e8:	bb44      	cbnz	r4, 800b23c <_malloc_r+0x88>
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f7ff ffbf 	bl	800b170 <sbrk_aligned>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	d158      	bne.n	800b2aa <_malloc_r+0xf6>
 800b1f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b1fc:	4627      	mov	r7, r4
 800b1fe:	2f00      	cmp	r7, #0
 800b200:	d143      	bne.n	800b28a <_malloc_r+0xd6>
 800b202:	2c00      	cmp	r4, #0
 800b204:	d04b      	beq.n	800b29e <_malloc_r+0xea>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	4639      	mov	r1, r7
 800b20a:	4630      	mov	r0, r6
 800b20c:	eb04 0903 	add.w	r9, r4, r3
 800b210:	f000 fab2 	bl	800b778 <_sbrk_r>
 800b214:	4581      	cmp	r9, r0
 800b216:	d142      	bne.n	800b29e <_malloc_r+0xea>
 800b218:	6821      	ldr	r1, [r4, #0]
 800b21a:	1a6d      	subs	r5, r5, r1
 800b21c:	4629      	mov	r1, r5
 800b21e:	4630      	mov	r0, r6
 800b220:	f7ff ffa6 	bl	800b170 <sbrk_aligned>
 800b224:	3001      	adds	r0, #1
 800b226:	d03a      	beq.n	800b29e <_malloc_r+0xea>
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	442b      	add	r3, r5
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	f8d8 3000 	ldr.w	r3, [r8]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	bb62      	cbnz	r2, 800b290 <_malloc_r+0xdc>
 800b236:	f8c8 7000 	str.w	r7, [r8]
 800b23a:	e00f      	b.n	800b25c <_malloc_r+0xa8>
 800b23c:	6822      	ldr	r2, [r4, #0]
 800b23e:	1b52      	subs	r2, r2, r5
 800b240:	d420      	bmi.n	800b284 <_malloc_r+0xd0>
 800b242:	2a0b      	cmp	r2, #11
 800b244:	d917      	bls.n	800b276 <_malloc_r+0xc2>
 800b246:	1961      	adds	r1, r4, r5
 800b248:	42a3      	cmp	r3, r4
 800b24a:	6025      	str	r5, [r4, #0]
 800b24c:	bf18      	it	ne
 800b24e:	6059      	strne	r1, [r3, #4]
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	bf08      	it	eq
 800b254:	f8c8 1000 	streq.w	r1, [r8]
 800b258:	5162      	str	r2, [r4, r5]
 800b25a:	604b      	str	r3, [r1, #4]
 800b25c:	4630      	mov	r0, r6
 800b25e:	f000 f82f 	bl	800b2c0 <__malloc_unlock>
 800b262:	f104 000b 	add.w	r0, r4, #11
 800b266:	1d23      	adds	r3, r4, #4
 800b268:	f020 0007 	bic.w	r0, r0, #7
 800b26c:	1ac2      	subs	r2, r0, r3
 800b26e:	bf1c      	itt	ne
 800b270:	1a1b      	subne	r3, r3, r0
 800b272:	50a3      	strne	r3, [r4, r2]
 800b274:	e7af      	b.n	800b1d6 <_malloc_r+0x22>
 800b276:	6862      	ldr	r2, [r4, #4]
 800b278:	42a3      	cmp	r3, r4
 800b27a:	bf0c      	ite	eq
 800b27c:	f8c8 2000 	streq.w	r2, [r8]
 800b280:	605a      	strne	r2, [r3, #4]
 800b282:	e7eb      	b.n	800b25c <_malloc_r+0xa8>
 800b284:	4623      	mov	r3, r4
 800b286:	6864      	ldr	r4, [r4, #4]
 800b288:	e7ae      	b.n	800b1e8 <_malloc_r+0x34>
 800b28a:	463c      	mov	r4, r7
 800b28c:	687f      	ldr	r7, [r7, #4]
 800b28e:	e7b6      	b.n	800b1fe <_malloc_r+0x4a>
 800b290:	461a      	mov	r2, r3
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	42a3      	cmp	r3, r4
 800b296:	d1fb      	bne.n	800b290 <_malloc_r+0xdc>
 800b298:	2300      	movs	r3, #0
 800b29a:	6053      	str	r3, [r2, #4]
 800b29c:	e7de      	b.n	800b25c <_malloc_r+0xa8>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	6033      	str	r3, [r6, #0]
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f000 f80c 	bl	800b2c0 <__malloc_unlock>
 800b2a8:	e794      	b.n	800b1d4 <_malloc_r+0x20>
 800b2aa:	6005      	str	r5, [r0, #0]
 800b2ac:	e7d6      	b.n	800b25c <_malloc_r+0xa8>
 800b2ae:	bf00      	nop
 800b2b0:	24000814 	.word	0x24000814

0800b2b4 <__malloc_lock>:
 800b2b4:	4801      	ldr	r0, [pc, #4]	@ (800b2bc <__malloc_lock+0x8>)
 800b2b6:	f000 baac 	b.w	800b812 <__retarget_lock_acquire_recursive>
 800b2ba:	bf00      	nop
 800b2bc:	24000958 	.word	0x24000958

0800b2c0 <__malloc_unlock>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	@ (800b2c8 <__malloc_unlock+0x8>)
 800b2c2:	f000 baa7 	b.w	800b814 <__retarget_lock_release_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	24000958 	.word	0x24000958

0800b2cc <_strtol_l.constprop.0>:
 800b2cc:	2b24      	cmp	r3, #36	@ 0x24
 800b2ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d2:	4686      	mov	lr, r0
 800b2d4:	4690      	mov	r8, r2
 800b2d6:	d801      	bhi.n	800b2dc <_strtol_l.constprop.0+0x10>
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d106      	bne.n	800b2ea <_strtol_l.constprop.0+0x1e>
 800b2dc:	f000 fa6e 	bl	800b7bc <__errno>
 800b2e0:	2316      	movs	r3, #22
 800b2e2:	6003      	str	r3, [r0, #0]
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	4834      	ldr	r0, [pc, #208]	@ (800b3bc <_strtol_l.constprop.0+0xf0>)
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2f4:	5d06      	ldrb	r6, [r0, r4]
 800b2f6:	f016 0608 	ands.w	r6, r6, #8
 800b2fa:	d1f8      	bne.n	800b2ee <_strtol_l.constprop.0+0x22>
 800b2fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2fe:	d12d      	bne.n	800b35c <_strtol_l.constprop.0+0x90>
 800b300:	782c      	ldrb	r4, [r5, #0]
 800b302:	2601      	movs	r6, #1
 800b304:	1c95      	adds	r5, r2, #2
 800b306:	f033 0210 	bics.w	r2, r3, #16
 800b30a:	d109      	bne.n	800b320 <_strtol_l.constprop.0+0x54>
 800b30c:	2c30      	cmp	r4, #48	@ 0x30
 800b30e:	d12a      	bne.n	800b366 <_strtol_l.constprop.0+0x9a>
 800b310:	782a      	ldrb	r2, [r5, #0]
 800b312:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b316:	2a58      	cmp	r2, #88	@ 0x58
 800b318:	d125      	bne.n	800b366 <_strtol_l.constprop.0+0x9a>
 800b31a:	786c      	ldrb	r4, [r5, #1]
 800b31c:	2310      	movs	r3, #16
 800b31e:	3502      	adds	r5, #2
 800b320:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b324:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b328:	2200      	movs	r2, #0
 800b32a:	fbbc f9f3 	udiv	r9, ip, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	fb03 ca19 	mls	sl, r3, r9, ip
 800b334:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b338:	2f09      	cmp	r7, #9
 800b33a:	d81b      	bhi.n	800b374 <_strtol_l.constprop.0+0xa8>
 800b33c:	463c      	mov	r4, r7
 800b33e:	42a3      	cmp	r3, r4
 800b340:	dd27      	ble.n	800b392 <_strtol_l.constprop.0+0xc6>
 800b342:	1c57      	adds	r7, r2, #1
 800b344:	d007      	beq.n	800b356 <_strtol_l.constprop.0+0x8a>
 800b346:	4581      	cmp	r9, r0
 800b348:	d320      	bcc.n	800b38c <_strtol_l.constprop.0+0xc0>
 800b34a:	d101      	bne.n	800b350 <_strtol_l.constprop.0+0x84>
 800b34c:	45a2      	cmp	sl, r4
 800b34e:	db1d      	blt.n	800b38c <_strtol_l.constprop.0+0xc0>
 800b350:	fb00 4003 	mla	r0, r0, r3, r4
 800b354:	2201      	movs	r2, #1
 800b356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b35a:	e7eb      	b.n	800b334 <_strtol_l.constprop.0+0x68>
 800b35c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b35e:	bf04      	itt	eq
 800b360:	782c      	ldrbeq	r4, [r5, #0]
 800b362:	1c95      	addeq	r5, r2, #2
 800b364:	e7cf      	b.n	800b306 <_strtol_l.constprop.0+0x3a>
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1da      	bne.n	800b320 <_strtol_l.constprop.0+0x54>
 800b36a:	2c30      	cmp	r4, #48	@ 0x30
 800b36c:	bf0c      	ite	eq
 800b36e:	2308      	moveq	r3, #8
 800b370:	230a      	movne	r3, #10
 800b372:	e7d5      	b.n	800b320 <_strtol_l.constprop.0+0x54>
 800b374:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b378:	2f19      	cmp	r7, #25
 800b37a:	d801      	bhi.n	800b380 <_strtol_l.constprop.0+0xb4>
 800b37c:	3c37      	subs	r4, #55	@ 0x37
 800b37e:	e7de      	b.n	800b33e <_strtol_l.constprop.0+0x72>
 800b380:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b384:	2f19      	cmp	r7, #25
 800b386:	d804      	bhi.n	800b392 <_strtol_l.constprop.0+0xc6>
 800b388:	3c57      	subs	r4, #87	@ 0x57
 800b38a:	e7d8      	b.n	800b33e <_strtol_l.constprop.0+0x72>
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	e7e1      	b.n	800b356 <_strtol_l.constprop.0+0x8a>
 800b392:	1c53      	adds	r3, r2, #1
 800b394:	d108      	bne.n	800b3a8 <_strtol_l.constprop.0+0xdc>
 800b396:	2322      	movs	r3, #34	@ 0x22
 800b398:	f8ce 3000 	str.w	r3, [lr]
 800b39c:	4660      	mov	r0, ip
 800b39e:	f1b8 0f00 	cmp.w	r8, #0
 800b3a2:	d0a0      	beq.n	800b2e6 <_strtol_l.constprop.0+0x1a>
 800b3a4:	1e69      	subs	r1, r5, #1
 800b3a6:	e006      	b.n	800b3b6 <_strtol_l.constprop.0+0xea>
 800b3a8:	b106      	cbz	r6, 800b3ac <_strtol_l.constprop.0+0xe0>
 800b3aa:	4240      	negs	r0, r0
 800b3ac:	f1b8 0f00 	cmp.w	r8, #0
 800b3b0:	d099      	beq.n	800b2e6 <_strtol_l.constprop.0+0x1a>
 800b3b2:	2a00      	cmp	r2, #0
 800b3b4:	d1f6      	bne.n	800b3a4 <_strtol_l.constprop.0+0xd8>
 800b3b6:	f8c8 1000 	str.w	r1, [r8]
 800b3ba:	e794      	b.n	800b2e6 <_strtol_l.constprop.0+0x1a>
 800b3bc:	0800c751 	.word	0x0800c751

0800b3c0 <strtol>:
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	4802      	ldr	r0, [pc, #8]	@ (800b3d0 <strtol+0x10>)
 800b3c8:	6800      	ldr	r0, [r0, #0]
 800b3ca:	f7ff bf7f 	b.w	800b2cc <_strtol_l.constprop.0>
 800b3ce:	bf00      	nop
 800b3d0:	24000084 	.word	0x24000084

0800b3d4 <std>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	4604      	mov	r4, r0
 800b3da:	e9c0 3300 	strd	r3, r3, [r0]
 800b3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3e2:	6083      	str	r3, [r0, #8]
 800b3e4:	8181      	strh	r1, [r0, #12]
 800b3e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3e8:	81c2      	strh	r2, [r0, #14]
 800b3ea:	6183      	str	r3, [r0, #24]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	2208      	movs	r2, #8
 800b3f0:	305c      	adds	r0, #92	@ 0x5c
 800b3f2:	f000 f928 	bl	800b646 <memset>
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b42c <std+0x58>)
 800b3f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <std+0x5c>)
 800b3fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b434 <std+0x60>)
 800b400:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b402:	4b0d      	ldr	r3, [pc, #52]	@ (800b438 <std+0x64>)
 800b404:	6323      	str	r3, [r4, #48]	@ 0x30
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <std+0x68>)
 800b408:	6224      	str	r4, [r4, #32]
 800b40a:	429c      	cmp	r4, r3
 800b40c:	d006      	beq.n	800b41c <std+0x48>
 800b40e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b412:	4294      	cmp	r4, r2
 800b414:	d002      	beq.n	800b41c <std+0x48>
 800b416:	33d0      	adds	r3, #208	@ 0xd0
 800b418:	429c      	cmp	r4, r3
 800b41a:	d105      	bne.n	800b428 <std+0x54>
 800b41c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b424:	f000 b9f4 	b.w	800b810 <__retarget_lock_init_recursive>
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	bf00      	nop
 800b42c:	0800b5c1 	.word	0x0800b5c1
 800b430:	0800b5e3 	.word	0x0800b5e3
 800b434:	0800b61b 	.word	0x0800b61b
 800b438:	0800b63f 	.word	0x0800b63f
 800b43c:	24000818 	.word	0x24000818

0800b440 <stdio_exit_handler>:
 800b440:	4a02      	ldr	r2, [pc, #8]	@ (800b44c <stdio_exit_handler+0xc>)
 800b442:	4903      	ldr	r1, [pc, #12]	@ (800b450 <stdio_exit_handler+0x10>)
 800b444:	4803      	ldr	r0, [pc, #12]	@ (800b454 <stdio_exit_handler+0x14>)
 800b446:	f000 b869 	b.w	800b51c <_fwalk_sglue>
 800b44a:	bf00      	nop
 800b44c:	24000078 	.word	0x24000078
 800b450:	0800bfd9 	.word	0x0800bfd9
 800b454:	24000088 	.word	0x24000088

0800b458 <cleanup_stdio>:
 800b458:	6841      	ldr	r1, [r0, #4]
 800b45a:	4b0c      	ldr	r3, [pc, #48]	@ (800b48c <cleanup_stdio+0x34>)
 800b45c:	4299      	cmp	r1, r3
 800b45e:	b510      	push	{r4, lr}
 800b460:	4604      	mov	r4, r0
 800b462:	d001      	beq.n	800b468 <cleanup_stdio+0x10>
 800b464:	f000 fdb8 	bl	800bfd8 <_fflush_r>
 800b468:	68a1      	ldr	r1, [r4, #8]
 800b46a:	4b09      	ldr	r3, [pc, #36]	@ (800b490 <cleanup_stdio+0x38>)
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d002      	beq.n	800b476 <cleanup_stdio+0x1e>
 800b470:	4620      	mov	r0, r4
 800b472:	f000 fdb1 	bl	800bfd8 <_fflush_r>
 800b476:	68e1      	ldr	r1, [r4, #12]
 800b478:	4b06      	ldr	r3, [pc, #24]	@ (800b494 <cleanup_stdio+0x3c>)
 800b47a:	4299      	cmp	r1, r3
 800b47c:	d004      	beq.n	800b488 <cleanup_stdio+0x30>
 800b47e:	4620      	mov	r0, r4
 800b480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b484:	f000 bda8 	b.w	800bfd8 <_fflush_r>
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	bf00      	nop
 800b48c:	24000818 	.word	0x24000818
 800b490:	24000880 	.word	0x24000880
 800b494:	240008e8 	.word	0x240008e8

0800b498 <global_stdio_init.part.0>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c8 <global_stdio_init.part.0+0x30>)
 800b49c:	4c0b      	ldr	r4, [pc, #44]	@ (800b4cc <global_stdio_init.part.0+0x34>)
 800b49e:	4a0c      	ldr	r2, [pc, #48]	@ (800b4d0 <global_stdio_init.part.0+0x38>)
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2104      	movs	r1, #4
 800b4a8:	f7ff ff94 	bl	800b3d4 <std>
 800b4ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	2109      	movs	r1, #9
 800b4b4:	f7ff ff8e 	bl	800b3d4 <std>
 800b4b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4bc:	2202      	movs	r2, #2
 800b4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c2:	2112      	movs	r1, #18
 800b4c4:	f7ff bf86 	b.w	800b3d4 <std>
 800b4c8:	24000950 	.word	0x24000950
 800b4cc:	24000818 	.word	0x24000818
 800b4d0:	0800b441 	.word	0x0800b441

0800b4d4 <__sfp_lock_acquire>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	@ (800b4dc <__sfp_lock_acquire+0x8>)
 800b4d6:	f000 b99c 	b.w	800b812 <__retarget_lock_acquire_recursive>
 800b4da:	bf00      	nop
 800b4dc:	24000959 	.word	0x24000959

0800b4e0 <__sfp_lock_release>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	@ (800b4e8 <__sfp_lock_release+0x8>)
 800b4e2:	f000 b997 	b.w	800b814 <__retarget_lock_release_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	24000959 	.word	0x24000959

0800b4ec <__sinit>:
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	f7ff fff0 	bl	800b4d4 <__sfp_lock_acquire>
 800b4f4:	6a23      	ldr	r3, [r4, #32]
 800b4f6:	b11b      	cbz	r3, 800b500 <__sinit+0x14>
 800b4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4fc:	f7ff bff0 	b.w	800b4e0 <__sfp_lock_release>
 800b500:	4b04      	ldr	r3, [pc, #16]	@ (800b514 <__sinit+0x28>)
 800b502:	6223      	str	r3, [r4, #32]
 800b504:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <__sinit+0x2c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f5      	bne.n	800b4f8 <__sinit+0xc>
 800b50c:	f7ff ffc4 	bl	800b498 <global_stdio_init.part.0>
 800b510:	e7f2      	b.n	800b4f8 <__sinit+0xc>
 800b512:	bf00      	nop
 800b514:	0800b459 	.word	0x0800b459
 800b518:	24000950 	.word	0x24000950

0800b51c <_fwalk_sglue>:
 800b51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b520:	4607      	mov	r7, r0
 800b522:	4688      	mov	r8, r1
 800b524:	4614      	mov	r4, r2
 800b526:	2600      	movs	r6, #0
 800b528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b52c:	f1b9 0901 	subs.w	r9, r9, #1
 800b530:	d505      	bpl.n	800b53e <_fwalk_sglue+0x22>
 800b532:	6824      	ldr	r4, [r4, #0]
 800b534:	2c00      	cmp	r4, #0
 800b536:	d1f7      	bne.n	800b528 <_fwalk_sglue+0xc>
 800b538:	4630      	mov	r0, r6
 800b53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d907      	bls.n	800b554 <_fwalk_sglue+0x38>
 800b544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b548:	3301      	adds	r3, #1
 800b54a:	d003      	beq.n	800b554 <_fwalk_sglue+0x38>
 800b54c:	4629      	mov	r1, r5
 800b54e:	4638      	mov	r0, r7
 800b550:	47c0      	blx	r8
 800b552:	4306      	orrs	r6, r0
 800b554:	3568      	adds	r5, #104	@ 0x68
 800b556:	e7e9      	b.n	800b52c <_fwalk_sglue+0x10>

0800b558 <sniprintf>:
 800b558:	b40c      	push	{r2, r3}
 800b55a:	b530      	push	{r4, r5, lr}
 800b55c:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <sniprintf+0x64>)
 800b55e:	1e0c      	subs	r4, r1, #0
 800b560:	681d      	ldr	r5, [r3, #0]
 800b562:	b09d      	sub	sp, #116	@ 0x74
 800b564:	da08      	bge.n	800b578 <sniprintf+0x20>
 800b566:	238b      	movs	r3, #139	@ 0x8b
 800b568:	602b      	str	r3, [r5, #0]
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	b01d      	add	sp, #116	@ 0x74
 800b570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b574:	b002      	add	sp, #8
 800b576:	4770      	bx	lr
 800b578:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b57c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b580:	bf14      	ite	ne
 800b582:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b586:	4623      	moveq	r3, r4
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b590:	9002      	str	r0, [sp, #8]
 800b592:	9006      	str	r0, [sp, #24]
 800b594:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b598:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b59a:	ab21      	add	r3, sp, #132	@ 0x84
 800b59c:	a902      	add	r1, sp, #8
 800b59e:	4628      	mov	r0, r5
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	f000 fa0b 	bl	800b9bc <_svfiprintf_r>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	bfbc      	itt	lt
 800b5aa:	238b      	movlt	r3, #139	@ 0x8b
 800b5ac:	602b      	strlt	r3, [r5, #0]
 800b5ae:	2c00      	cmp	r4, #0
 800b5b0:	d0dd      	beq.n	800b56e <sniprintf+0x16>
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e7d9      	b.n	800b56e <sniprintf+0x16>
 800b5ba:	bf00      	nop
 800b5bc:	24000084 	.word	0x24000084

0800b5c0 <__sread>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c8:	f000 f8c4 	bl	800b754 <_read_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	bfab      	itete	ge
 800b5d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5d4:	181b      	addge	r3, r3, r0
 800b5d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5da:	bfac      	ite	ge
 800b5dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5de:	81a3      	strhlt	r3, [r4, #12]
 800b5e0:	bd10      	pop	{r4, pc}

0800b5e2 <__swrite>:
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	898b      	ldrh	r3, [r1, #12]
 800b5ea:	05db      	lsls	r3, r3, #23
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	d505      	bpl.n	800b600 <__swrite+0x1e>
 800b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f000 f898 	bl	800b730 <_lseek_r>
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	4632      	mov	r2, r6
 800b60e:	463b      	mov	r3, r7
 800b610:	4628      	mov	r0, r5
 800b612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	f000 b8bf 	b.w	800b798 <_write_r>

0800b61a <__sseek>:
 800b61a:	b510      	push	{r4, lr}
 800b61c:	460c      	mov	r4, r1
 800b61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b622:	f000 f885 	bl	800b730 <_lseek_r>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	bf15      	itete	ne
 800b62c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b62e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b636:	81a3      	strheq	r3, [r4, #12]
 800b638:	bf18      	it	ne
 800b63a:	81a3      	strhne	r3, [r4, #12]
 800b63c:	bd10      	pop	{r4, pc}

0800b63e <__sclose>:
 800b63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b642:	f000 b865 	b.w	800b710 <_close_r>

0800b646 <memset>:
 800b646:	4402      	add	r2, r0
 800b648:	4603      	mov	r3, r0
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d100      	bne.n	800b650 <memset+0xa>
 800b64e:	4770      	bx	lr
 800b650:	f803 1b01 	strb.w	r1, [r3], #1
 800b654:	e7f9      	b.n	800b64a <memset+0x4>
	...

0800b658 <strtok>:
 800b658:	4b16      	ldr	r3, [pc, #88]	@ (800b6b4 <strtok+0x5c>)
 800b65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65e:	681f      	ldr	r7, [r3, #0]
 800b660:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b662:	4605      	mov	r5, r0
 800b664:	460e      	mov	r6, r1
 800b666:	b9ec      	cbnz	r4, 800b6a4 <strtok+0x4c>
 800b668:	2050      	movs	r0, #80	@ 0x50
 800b66a:	f7ff fd79 	bl	800b160 <malloc>
 800b66e:	4602      	mov	r2, r0
 800b670:	6478      	str	r0, [r7, #68]	@ 0x44
 800b672:	b920      	cbnz	r0, 800b67e <strtok+0x26>
 800b674:	4b10      	ldr	r3, [pc, #64]	@ (800b6b8 <strtok+0x60>)
 800b676:	4811      	ldr	r0, [pc, #68]	@ (800b6bc <strtok+0x64>)
 800b678:	215b      	movs	r1, #91	@ 0x5b
 800b67a:	f000 f8db 	bl	800b834 <__assert_func>
 800b67e:	e9c0 4400 	strd	r4, r4, [r0]
 800b682:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b686:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b68a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b68e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b692:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b696:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b69a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b69e:	6184      	str	r4, [r0, #24]
 800b6a0:	7704      	strb	r4, [r0, #28]
 800b6a2:	6244      	str	r4, [r0, #36]	@ 0x24
 800b6a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b0:	f000 b806 	b.w	800b6c0 <__strtok_r>
 800b6b4:	24000084 	.word	0x24000084
 800b6b8:	0800c851 	.word	0x0800c851
 800b6bc:	0800c868 	.word	0x0800c868

0800b6c0 <__strtok_r>:
 800b6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	b908      	cbnz	r0, 800b6ca <__strtok_r+0xa>
 800b6c6:	6814      	ldr	r4, [r2, #0]
 800b6c8:	b144      	cbz	r4, 800b6dc <__strtok_r+0x1c>
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b6d6:	b91e      	cbnz	r6, 800b6e0 <__strtok_r+0x20>
 800b6d8:	b965      	cbnz	r5, 800b6f4 <__strtok_r+0x34>
 800b6da:	6015      	str	r5, [r2, #0]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e005      	b.n	800b6ec <__strtok_r+0x2c>
 800b6e0:	42b5      	cmp	r5, r6
 800b6e2:	d1f6      	bne.n	800b6d2 <__strtok_r+0x12>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1f0      	bne.n	800b6ca <__strtok_r+0xa>
 800b6e8:	6014      	str	r4, [r2, #0]
 800b6ea:	7003      	strb	r3, [r0, #0]
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	e00c      	b.n	800b70c <__strtok_r+0x4c>
 800b6f2:	b915      	cbnz	r5, 800b6fa <__strtok_r+0x3a>
 800b6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6f8:	460e      	mov	r6, r1
 800b6fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6fe:	42ab      	cmp	r3, r5
 800b700:	d1f7      	bne.n	800b6f2 <__strtok_r+0x32>
 800b702:	2b00      	cmp	r3, #0
 800b704:	d0f3      	beq.n	800b6ee <__strtok_r+0x2e>
 800b706:	2300      	movs	r3, #0
 800b708:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b70c:	6014      	str	r4, [r2, #0]
 800b70e:	e7ed      	b.n	800b6ec <__strtok_r+0x2c>

0800b710 <_close_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d06      	ldr	r5, [pc, #24]	@ (800b72c <_close_r+0x1c>)
 800b714:	2300      	movs	r3, #0
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	f7f5 fdd8 	bl	80012d0 <_close>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_close_r+0x1a>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_close_r+0x1a>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	24000954 	.word	0x24000954

0800b730 <_lseek_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	@ (800b750 <_lseek_r+0x20>)
 800b734:	4604      	mov	r4, r0
 800b736:	4608      	mov	r0, r1
 800b738:	4611      	mov	r1, r2
 800b73a:	2200      	movs	r2, #0
 800b73c:	602a      	str	r2, [r5, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	f7f5 fded 	bl	800131e <_lseek>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_lseek_r+0x1e>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_lseek_r+0x1e>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	24000954 	.word	0x24000954

0800b754 <_read_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d07      	ldr	r5, [pc, #28]	@ (800b774 <_read_r+0x20>)
 800b758:	4604      	mov	r4, r0
 800b75a:	4608      	mov	r0, r1
 800b75c:	4611      	mov	r1, r2
 800b75e:	2200      	movs	r2, #0
 800b760:	602a      	str	r2, [r5, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	f7f5 fd7b 	bl	800125e <_read>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d102      	bne.n	800b772 <_read_r+0x1e>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	b103      	cbz	r3, 800b772 <_read_r+0x1e>
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	24000954 	.word	0x24000954

0800b778 <_sbrk_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d06      	ldr	r5, [pc, #24]	@ (800b794 <_sbrk_r+0x1c>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f5 fdd8 	bl	8001338 <_sbrk>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_sbrk_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_sbrk_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	24000954 	.word	0x24000954

0800b798 <_write_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4d07      	ldr	r5, [pc, #28]	@ (800b7b8 <_write_r+0x20>)
 800b79c:	4604      	mov	r4, r0
 800b79e:	4608      	mov	r0, r1
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	602a      	str	r2, [r5, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f7f5 fd76 	bl	8001298 <_write>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_write_r+0x1e>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_write_r+0x1e>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	24000954 	.word	0x24000954

0800b7bc <__errno>:
 800b7bc:	4b01      	ldr	r3, [pc, #4]	@ (800b7c4 <__errno+0x8>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	24000084 	.word	0x24000084

0800b7c8 <__libc_init_array>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b800 <__libc_init_array+0x38>)
 800b7cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b804 <__libc_init_array+0x3c>)
 800b7ce:	1b64      	subs	r4, r4, r5
 800b7d0:	10a4      	asrs	r4, r4, #2
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	42a6      	cmp	r6, r4
 800b7d6:	d109      	bne.n	800b7ec <__libc_init_array+0x24>
 800b7d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b808 <__libc_init_array+0x40>)
 800b7da:	4c0c      	ldr	r4, [pc, #48]	@ (800b80c <__libc_init_array+0x44>)
 800b7dc:	f000 ff2a 	bl	800c634 <_init>
 800b7e0:	1b64      	subs	r4, r4, r5
 800b7e2:	10a4      	asrs	r4, r4, #2
 800b7e4:	2600      	movs	r6, #0
 800b7e6:	42a6      	cmp	r6, r4
 800b7e8:	d105      	bne.n	800b7f6 <__libc_init_array+0x2e>
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f0:	4798      	blx	r3
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	e7ee      	b.n	800b7d4 <__libc_init_array+0xc>
 800b7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fa:	4798      	blx	r3
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	e7f2      	b.n	800b7e6 <__libc_init_array+0x1e>
 800b800:	0800c93c 	.word	0x0800c93c
 800b804:	0800c93c 	.word	0x0800c93c
 800b808:	0800c93c 	.word	0x0800c93c
 800b80c:	0800c940 	.word	0x0800c940

0800b810 <__retarget_lock_init_recursive>:
 800b810:	4770      	bx	lr

0800b812 <__retarget_lock_acquire_recursive>:
 800b812:	4770      	bx	lr

0800b814 <__retarget_lock_release_recursive>:
 800b814:	4770      	bx	lr

0800b816 <memcpy>:
 800b816:	440a      	add	r2, r1
 800b818:	4291      	cmp	r1, r2
 800b81a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b81e:	d100      	bne.n	800b822 <memcpy+0xc>
 800b820:	4770      	bx	lr
 800b822:	b510      	push	{r4, lr}
 800b824:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b82c:	4291      	cmp	r1, r2
 800b82e:	d1f9      	bne.n	800b824 <memcpy+0xe>
 800b830:	bd10      	pop	{r4, pc}
	...

0800b834 <__assert_func>:
 800b834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b836:	4614      	mov	r4, r2
 800b838:	461a      	mov	r2, r3
 800b83a:	4b09      	ldr	r3, [pc, #36]	@ (800b860 <__assert_func+0x2c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	68d8      	ldr	r0, [r3, #12]
 800b842:	b954      	cbnz	r4, 800b85a <__assert_func+0x26>
 800b844:	4b07      	ldr	r3, [pc, #28]	@ (800b864 <__assert_func+0x30>)
 800b846:	461c      	mov	r4, r3
 800b848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b84c:	9100      	str	r1, [sp, #0]
 800b84e:	462b      	mov	r3, r5
 800b850:	4905      	ldr	r1, [pc, #20]	@ (800b868 <__assert_func+0x34>)
 800b852:	f000 fbe9 	bl	800c028 <fiprintf>
 800b856:	f000 fc13 	bl	800c080 <abort>
 800b85a:	4b04      	ldr	r3, [pc, #16]	@ (800b86c <__assert_func+0x38>)
 800b85c:	e7f4      	b.n	800b848 <__assert_func+0x14>
 800b85e:	bf00      	nop
 800b860:	24000084 	.word	0x24000084
 800b864:	0800c8fd 	.word	0x0800c8fd
 800b868:	0800c8cf 	.word	0x0800c8cf
 800b86c:	0800c8c2 	.word	0x0800c8c2

0800b870 <_free_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4605      	mov	r5, r0
 800b874:	2900      	cmp	r1, #0
 800b876:	d041      	beq.n	800b8fc <_free_r+0x8c>
 800b878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87c:	1f0c      	subs	r4, r1, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bfb8      	it	lt
 800b882:	18e4      	addlt	r4, r4, r3
 800b884:	f7ff fd16 	bl	800b2b4 <__malloc_lock>
 800b888:	4a1d      	ldr	r2, [pc, #116]	@ (800b900 <_free_r+0x90>)
 800b88a:	6813      	ldr	r3, [r2, #0]
 800b88c:	b933      	cbnz	r3, 800b89c <_free_r+0x2c>
 800b88e:	6063      	str	r3, [r4, #4]
 800b890:	6014      	str	r4, [r2, #0]
 800b892:	4628      	mov	r0, r5
 800b894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b898:	f7ff bd12 	b.w	800b2c0 <__malloc_unlock>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	d908      	bls.n	800b8b2 <_free_r+0x42>
 800b8a0:	6820      	ldr	r0, [r4, #0]
 800b8a2:	1821      	adds	r1, r4, r0
 800b8a4:	428b      	cmp	r3, r1
 800b8a6:	bf01      	itttt	eq
 800b8a8:	6819      	ldreq	r1, [r3, #0]
 800b8aa:	685b      	ldreq	r3, [r3, #4]
 800b8ac:	1809      	addeq	r1, r1, r0
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	e7ed      	b.n	800b88e <_free_r+0x1e>
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	b10b      	cbz	r3, 800b8bc <_free_r+0x4c>
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	d9fa      	bls.n	800b8b2 <_free_r+0x42>
 800b8bc:	6811      	ldr	r1, [r2, #0]
 800b8be:	1850      	adds	r0, r2, r1
 800b8c0:	42a0      	cmp	r0, r4
 800b8c2:	d10b      	bne.n	800b8dc <_free_r+0x6c>
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	4401      	add	r1, r0
 800b8c8:	1850      	adds	r0, r2, r1
 800b8ca:	4283      	cmp	r3, r0
 800b8cc:	6011      	str	r1, [r2, #0]
 800b8ce:	d1e0      	bne.n	800b892 <_free_r+0x22>
 800b8d0:	6818      	ldr	r0, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	6053      	str	r3, [r2, #4]
 800b8d6:	4408      	add	r0, r1
 800b8d8:	6010      	str	r0, [r2, #0]
 800b8da:	e7da      	b.n	800b892 <_free_r+0x22>
 800b8dc:	d902      	bls.n	800b8e4 <_free_r+0x74>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	602b      	str	r3, [r5, #0]
 800b8e2:	e7d6      	b.n	800b892 <_free_r+0x22>
 800b8e4:	6820      	ldr	r0, [r4, #0]
 800b8e6:	1821      	adds	r1, r4, r0
 800b8e8:	428b      	cmp	r3, r1
 800b8ea:	bf04      	itt	eq
 800b8ec:	6819      	ldreq	r1, [r3, #0]
 800b8ee:	685b      	ldreq	r3, [r3, #4]
 800b8f0:	6063      	str	r3, [r4, #4]
 800b8f2:	bf04      	itt	eq
 800b8f4:	1809      	addeq	r1, r1, r0
 800b8f6:	6021      	streq	r1, [r4, #0]
 800b8f8:	6054      	str	r4, [r2, #4]
 800b8fa:	e7ca      	b.n	800b892 <_free_r+0x22>
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
 800b8fe:	bf00      	nop
 800b900:	24000814 	.word	0x24000814

0800b904 <__ssputs_r>:
 800b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b908:	688e      	ldr	r6, [r1, #8]
 800b90a:	461f      	mov	r7, r3
 800b90c:	42be      	cmp	r6, r7
 800b90e:	680b      	ldr	r3, [r1, #0]
 800b910:	4682      	mov	sl, r0
 800b912:	460c      	mov	r4, r1
 800b914:	4690      	mov	r8, r2
 800b916:	d82d      	bhi.n	800b974 <__ssputs_r+0x70>
 800b918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b91c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b920:	d026      	beq.n	800b970 <__ssputs_r+0x6c>
 800b922:	6965      	ldr	r5, [r4, #20]
 800b924:	6909      	ldr	r1, [r1, #16]
 800b926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b92a:	eba3 0901 	sub.w	r9, r3, r1
 800b92e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b932:	1c7b      	adds	r3, r7, #1
 800b934:	444b      	add	r3, r9
 800b936:	106d      	asrs	r5, r5, #1
 800b938:	429d      	cmp	r5, r3
 800b93a:	bf38      	it	cc
 800b93c:	461d      	movcc	r5, r3
 800b93e:	0553      	lsls	r3, r2, #21
 800b940:	d527      	bpl.n	800b992 <__ssputs_r+0x8e>
 800b942:	4629      	mov	r1, r5
 800b944:	f7ff fc36 	bl	800b1b4 <_malloc_r>
 800b948:	4606      	mov	r6, r0
 800b94a:	b360      	cbz	r0, 800b9a6 <__ssputs_r+0xa2>
 800b94c:	6921      	ldr	r1, [r4, #16]
 800b94e:	464a      	mov	r2, r9
 800b950:	f7ff ff61 	bl	800b816 <memcpy>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	6126      	str	r6, [r4, #16]
 800b962:	6165      	str	r5, [r4, #20]
 800b964:	444e      	add	r6, r9
 800b966:	eba5 0509 	sub.w	r5, r5, r9
 800b96a:	6026      	str	r6, [r4, #0]
 800b96c:	60a5      	str	r5, [r4, #8]
 800b96e:	463e      	mov	r6, r7
 800b970:	42be      	cmp	r6, r7
 800b972:	d900      	bls.n	800b976 <__ssputs_r+0x72>
 800b974:	463e      	mov	r6, r7
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	4632      	mov	r2, r6
 800b97a:	4641      	mov	r1, r8
 800b97c:	f000 fb66 	bl	800c04c <memmove>
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	1b9b      	subs	r3, r3, r6
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4433      	add	r3, r6
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	2000      	movs	r0, #0
 800b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b992:	462a      	mov	r2, r5
 800b994:	f000 fb7b 	bl	800c08e <_realloc_r>
 800b998:	4606      	mov	r6, r0
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d1e0      	bne.n	800b960 <__ssputs_r+0x5c>
 800b99e:	6921      	ldr	r1, [r4, #16]
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	f7ff ff65 	bl	800b870 <_free_r>
 800b9a6:	230c      	movs	r3, #12
 800b9a8:	f8ca 3000 	str.w	r3, [sl]
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	e7e9      	b.n	800b98e <__ssputs_r+0x8a>
	...

0800b9bc <_svfiprintf_r>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	4698      	mov	r8, r3
 800b9c2:	898b      	ldrh	r3, [r1, #12]
 800b9c4:	061b      	lsls	r3, r3, #24
 800b9c6:	b09d      	sub	sp, #116	@ 0x74
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	d510      	bpl.n	800b9f2 <_svfiprintf_r+0x36>
 800b9d0:	690b      	ldr	r3, [r1, #16]
 800b9d2:	b973      	cbnz	r3, 800b9f2 <_svfiprintf_r+0x36>
 800b9d4:	2140      	movs	r1, #64	@ 0x40
 800b9d6:	f7ff fbed 	bl	800b1b4 <_malloc_r>
 800b9da:	6028      	str	r0, [r5, #0]
 800b9dc:	6128      	str	r0, [r5, #16]
 800b9de:	b930      	cbnz	r0, 800b9ee <_svfiprintf_r+0x32>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	b01d      	add	sp, #116	@ 0x74
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	2340      	movs	r3, #64	@ 0x40
 800b9f0:	616b      	str	r3, [r5, #20]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba00:	2330      	movs	r3, #48	@ 0x30
 800ba02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bba0 <_svfiprintf_r+0x1e4>
 800ba06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba0a:	f04f 0901 	mov.w	r9, #1
 800ba0e:	4623      	mov	r3, r4
 800ba10:	469a      	mov	sl, r3
 800ba12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba16:	b10a      	cbz	r2, 800ba1c <_svfiprintf_r+0x60>
 800ba18:	2a25      	cmp	r2, #37	@ 0x25
 800ba1a:	d1f9      	bne.n	800ba10 <_svfiprintf_r+0x54>
 800ba1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba20:	d00b      	beq.n	800ba3a <_svfiprintf_r+0x7e>
 800ba22:	465b      	mov	r3, fp
 800ba24:	4622      	mov	r2, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ff6b 	bl	800b904 <__ssputs_r>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f000 80a7 	beq.w	800bb82 <_svfiprintf_r+0x1c6>
 800ba34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba36:	445a      	add	r2, fp
 800ba38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 809f 	beq.w	800bb82 <_svfiprintf_r+0x1c6>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba4e:	f10a 0a01 	add.w	sl, sl, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba5c:	4654      	mov	r4, sl
 800ba5e:	2205      	movs	r2, #5
 800ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba64:	484e      	ldr	r0, [pc, #312]	@ (800bba0 <_svfiprintf_r+0x1e4>)
 800ba66:	f7f4 fc63 	bl	8000330 <memchr>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	b9d8      	cbnz	r0, 800baa6 <_svfiprintf_r+0xea>
 800ba6e:	06d0      	lsls	r0, r2, #27
 800ba70:	bf44      	itt	mi
 800ba72:	2320      	movmi	r3, #32
 800ba74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba78:	0711      	lsls	r1, r2, #28
 800ba7a:	bf44      	itt	mi
 800ba7c:	232b      	movmi	r3, #43	@ 0x2b
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba82:	f89a 3000 	ldrb.w	r3, [sl]
 800ba86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba88:	d015      	beq.n	800bab6 <_svfiprintf_r+0xfa>
 800ba8a:	9a07      	ldr	r2, [sp, #28]
 800ba8c:	4654      	mov	r4, sl
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f04f 0c0a 	mov.w	ip, #10
 800ba94:	4621      	mov	r1, r4
 800ba96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9a:	3b30      	subs	r3, #48	@ 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d94b      	bls.n	800bb38 <_svfiprintf_r+0x17c>
 800baa0:	b1b0      	cbz	r0, 800bad0 <_svfiprintf_r+0x114>
 800baa2:	9207      	str	r2, [sp, #28]
 800baa4:	e014      	b.n	800bad0 <_svfiprintf_r+0x114>
 800baa6:	eba0 0308 	sub.w	r3, r0, r8
 800baaa:	fa09 f303 	lsl.w	r3, r9, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	46a2      	mov	sl, r4
 800bab4:	e7d2      	b.n	800ba5c <_svfiprintf_r+0xa0>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	1d19      	adds	r1, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9103      	str	r1, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfbb      	ittet	lt
 800bac2:	425b      	neglt	r3, r3
 800bac4:	f042 0202 	orrlt.w	r2, r2, #2
 800bac8:	9307      	strge	r3, [sp, #28]
 800baca:	9307      	strlt	r3, [sp, #28]
 800bacc:	bfb8      	it	lt
 800bace:	9204      	strlt	r2, [sp, #16]
 800bad0:	7823      	ldrb	r3, [r4, #0]
 800bad2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bad4:	d10a      	bne.n	800baec <_svfiprintf_r+0x130>
 800bad6:	7863      	ldrb	r3, [r4, #1]
 800bad8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bada:	d132      	bne.n	800bb42 <_svfiprintf_r+0x186>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9203      	str	r2, [sp, #12]
 800bae4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bae8:	3402      	adds	r4, #2
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bbb0 <_svfiprintf_r+0x1f4>
 800baf0:	7821      	ldrb	r1, [r4, #0]
 800baf2:	2203      	movs	r2, #3
 800baf4:	4650      	mov	r0, sl
 800baf6:	f7f4 fc1b 	bl	8000330 <memchr>
 800bafa:	b138      	cbz	r0, 800bb0c <_svfiprintf_r+0x150>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	eba0 000a 	sub.w	r0, r0, sl
 800bb02:	2240      	movs	r2, #64	@ 0x40
 800bb04:	4082      	lsls	r2, r0
 800bb06:	4313      	orrs	r3, r2
 800bb08:	3401      	adds	r4, #1
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb10:	4824      	ldr	r0, [pc, #144]	@ (800bba4 <_svfiprintf_r+0x1e8>)
 800bb12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb16:	2206      	movs	r2, #6
 800bb18:	f7f4 fc0a 	bl	8000330 <memchr>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d036      	beq.n	800bb8e <_svfiprintf_r+0x1d2>
 800bb20:	4b21      	ldr	r3, [pc, #132]	@ (800bba8 <_svfiprintf_r+0x1ec>)
 800bb22:	bb1b      	cbnz	r3, 800bb6c <_svfiprintf_r+0x1b0>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	3307      	adds	r3, #7
 800bb28:	f023 0307 	bic.w	r3, r3, #7
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	9303      	str	r3, [sp, #12]
 800bb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb32:	4433      	add	r3, r6
 800bb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb36:	e76a      	b.n	800ba0e <_svfiprintf_r+0x52>
 800bb38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7a8      	b.n	800ba94 <_svfiprintf_r+0xd8>
 800bb42:	2300      	movs	r3, #0
 800bb44:	3401      	adds	r4, #1
 800bb46:	9305      	str	r3, [sp, #20]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f04f 0c0a 	mov.w	ip, #10
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb54:	3a30      	subs	r2, #48	@ 0x30
 800bb56:	2a09      	cmp	r2, #9
 800bb58:	d903      	bls.n	800bb62 <_svfiprintf_r+0x1a6>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0c6      	beq.n	800baec <_svfiprintf_r+0x130>
 800bb5e:	9105      	str	r1, [sp, #20]
 800bb60:	e7c4      	b.n	800baec <_svfiprintf_r+0x130>
 800bb62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb66:	4604      	mov	r4, r0
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7f0      	b.n	800bb4e <_svfiprintf_r+0x192>
 800bb6c:	ab03      	add	r3, sp, #12
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	462a      	mov	r2, r5
 800bb72:	4b0e      	ldr	r3, [pc, #56]	@ (800bbac <_svfiprintf_r+0x1f0>)
 800bb74:	a904      	add	r1, sp, #16
 800bb76:	4638      	mov	r0, r7
 800bb78:	f3af 8000 	nop.w
 800bb7c:	1c42      	adds	r2, r0, #1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	d1d6      	bne.n	800bb30 <_svfiprintf_r+0x174>
 800bb82:	89ab      	ldrh	r3, [r5, #12]
 800bb84:	065b      	lsls	r3, r3, #25
 800bb86:	f53f af2d 	bmi.w	800b9e4 <_svfiprintf_r+0x28>
 800bb8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb8c:	e72c      	b.n	800b9e8 <_svfiprintf_r+0x2c>
 800bb8e:	ab03      	add	r3, sp, #12
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	4b05      	ldr	r3, [pc, #20]	@ (800bbac <_svfiprintf_r+0x1f0>)
 800bb96:	a904      	add	r1, sp, #16
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f000 f879 	bl	800bc90 <_printf_i>
 800bb9e:	e7ed      	b.n	800bb7c <_svfiprintf_r+0x1c0>
 800bba0:	0800c8fe 	.word	0x0800c8fe
 800bba4:	0800c908 	.word	0x0800c908
 800bba8:	00000000 	.word	0x00000000
 800bbac:	0800b905 	.word	0x0800b905
 800bbb0:	0800c904 	.word	0x0800c904

0800bbb4 <_printf_common>:
 800bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb8:	4616      	mov	r6, r2
 800bbba:	4698      	mov	r8, r3
 800bbbc:	688a      	ldr	r2, [r1, #8]
 800bbbe:	690b      	ldr	r3, [r1, #16]
 800bbc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	bfb8      	it	lt
 800bbc8:	4613      	movlt	r3, r2
 800bbca:	6033      	str	r3, [r6, #0]
 800bbcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	b10a      	cbz	r2, 800bbda <_printf_common+0x26>
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	6033      	str	r3, [r6, #0]
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	0699      	lsls	r1, r3, #26
 800bbde:	bf42      	ittt	mi
 800bbe0:	6833      	ldrmi	r3, [r6, #0]
 800bbe2:	3302      	addmi	r3, #2
 800bbe4:	6033      	strmi	r3, [r6, #0]
 800bbe6:	6825      	ldr	r5, [r4, #0]
 800bbe8:	f015 0506 	ands.w	r5, r5, #6
 800bbec:	d106      	bne.n	800bbfc <_printf_common+0x48>
 800bbee:	f104 0a19 	add.w	sl, r4, #25
 800bbf2:	68e3      	ldr	r3, [r4, #12]
 800bbf4:	6832      	ldr	r2, [r6, #0]
 800bbf6:	1a9b      	subs	r3, r3, r2
 800bbf8:	42ab      	cmp	r3, r5
 800bbfa:	dc26      	bgt.n	800bc4a <_printf_common+0x96>
 800bbfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc00:	6822      	ldr	r2, [r4, #0]
 800bc02:	3b00      	subs	r3, #0
 800bc04:	bf18      	it	ne
 800bc06:	2301      	movne	r3, #1
 800bc08:	0692      	lsls	r2, r2, #26
 800bc0a:	d42b      	bmi.n	800bc64 <_printf_common+0xb0>
 800bc0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc10:	4641      	mov	r1, r8
 800bc12:	4638      	mov	r0, r7
 800bc14:	47c8      	blx	r9
 800bc16:	3001      	adds	r0, #1
 800bc18:	d01e      	beq.n	800bc58 <_printf_common+0xa4>
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	6922      	ldr	r2, [r4, #16]
 800bc1e:	f003 0306 	and.w	r3, r3, #6
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	bf02      	ittt	eq
 800bc26:	68e5      	ldreq	r5, [r4, #12]
 800bc28:	6833      	ldreq	r3, [r6, #0]
 800bc2a:	1aed      	subeq	r5, r5, r3
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	bf0c      	ite	eq
 800bc30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc34:	2500      	movne	r5, #0
 800bc36:	4293      	cmp	r3, r2
 800bc38:	bfc4      	itt	gt
 800bc3a:	1a9b      	subgt	r3, r3, r2
 800bc3c:	18ed      	addgt	r5, r5, r3
 800bc3e:	2600      	movs	r6, #0
 800bc40:	341a      	adds	r4, #26
 800bc42:	42b5      	cmp	r5, r6
 800bc44:	d11a      	bne.n	800bc7c <_printf_common+0xc8>
 800bc46:	2000      	movs	r0, #0
 800bc48:	e008      	b.n	800bc5c <_printf_common+0xa8>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	4641      	mov	r1, r8
 800bc50:	4638      	mov	r0, r7
 800bc52:	47c8      	blx	r9
 800bc54:	3001      	adds	r0, #1
 800bc56:	d103      	bne.n	800bc60 <_printf_common+0xac>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc60:	3501      	adds	r5, #1
 800bc62:	e7c6      	b.n	800bbf2 <_printf_common+0x3e>
 800bc64:	18e1      	adds	r1, r4, r3
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	2030      	movs	r0, #48	@ 0x30
 800bc6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc6e:	4422      	add	r2, r4
 800bc70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc78:	3302      	adds	r3, #2
 800bc7a:	e7c7      	b.n	800bc0c <_printf_common+0x58>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	4622      	mov	r2, r4
 800bc80:	4641      	mov	r1, r8
 800bc82:	4638      	mov	r0, r7
 800bc84:	47c8      	blx	r9
 800bc86:	3001      	adds	r0, #1
 800bc88:	d0e6      	beq.n	800bc58 <_printf_common+0xa4>
 800bc8a:	3601      	adds	r6, #1
 800bc8c:	e7d9      	b.n	800bc42 <_printf_common+0x8e>
	...

0800bc90 <_printf_i>:
 800bc90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc94:	7e0f      	ldrb	r7, [r1, #24]
 800bc96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc98:	2f78      	cmp	r7, #120	@ 0x78
 800bc9a:	4691      	mov	r9, r2
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	469a      	mov	sl, r3
 800bca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bca6:	d807      	bhi.n	800bcb8 <_printf_i+0x28>
 800bca8:	2f62      	cmp	r7, #98	@ 0x62
 800bcaa:	d80a      	bhi.n	800bcc2 <_printf_i+0x32>
 800bcac:	2f00      	cmp	r7, #0
 800bcae:	f000 80d2 	beq.w	800be56 <_printf_i+0x1c6>
 800bcb2:	2f58      	cmp	r7, #88	@ 0x58
 800bcb4:	f000 80b9 	beq.w	800be2a <_printf_i+0x19a>
 800bcb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bcc0:	e03a      	b.n	800bd38 <_printf_i+0xa8>
 800bcc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bcc6:	2b15      	cmp	r3, #21
 800bcc8:	d8f6      	bhi.n	800bcb8 <_printf_i+0x28>
 800bcca:	a101      	add	r1, pc, #4	@ (adr r1, 800bcd0 <_printf_i+0x40>)
 800bccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcd0:	0800bd29 	.word	0x0800bd29
 800bcd4:	0800bd3d 	.word	0x0800bd3d
 800bcd8:	0800bcb9 	.word	0x0800bcb9
 800bcdc:	0800bcb9 	.word	0x0800bcb9
 800bce0:	0800bcb9 	.word	0x0800bcb9
 800bce4:	0800bcb9 	.word	0x0800bcb9
 800bce8:	0800bd3d 	.word	0x0800bd3d
 800bcec:	0800bcb9 	.word	0x0800bcb9
 800bcf0:	0800bcb9 	.word	0x0800bcb9
 800bcf4:	0800bcb9 	.word	0x0800bcb9
 800bcf8:	0800bcb9 	.word	0x0800bcb9
 800bcfc:	0800be3d 	.word	0x0800be3d
 800bd00:	0800bd67 	.word	0x0800bd67
 800bd04:	0800bdf7 	.word	0x0800bdf7
 800bd08:	0800bcb9 	.word	0x0800bcb9
 800bd0c:	0800bcb9 	.word	0x0800bcb9
 800bd10:	0800be5f 	.word	0x0800be5f
 800bd14:	0800bcb9 	.word	0x0800bcb9
 800bd18:	0800bd67 	.word	0x0800bd67
 800bd1c:	0800bcb9 	.word	0x0800bcb9
 800bd20:	0800bcb9 	.word	0x0800bcb9
 800bd24:	0800bdff 	.word	0x0800bdff
 800bd28:	6833      	ldr	r3, [r6, #0]
 800bd2a:	1d1a      	adds	r2, r3, #4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6032      	str	r2, [r6, #0]
 800bd30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e09d      	b.n	800be78 <_printf_i+0x1e8>
 800bd3c:	6833      	ldr	r3, [r6, #0]
 800bd3e:	6820      	ldr	r0, [r4, #0]
 800bd40:	1d19      	adds	r1, r3, #4
 800bd42:	6031      	str	r1, [r6, #0]
 800bd44:	0606      	lsls	r6, r0, #24
 800bd46:	d501      	bpl.n	800bd4c <_printf_i+0xbc>
 800bd48:	681d      	ldr	r5, [r3, #0]
 800bd4a:	e003      	b.n	800bd54 <_printf_i+0xc4>
 800bd4c:	0645      	lsls	r5, r0, #25
 800bd4e:	d5fb      	bpl.n	800bd48 <_printf_i+0xb8>
 800bd50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd54:	2d00      	cmp	r5, #0
 800bd56:	da03      	bge.n	800bd60 <_printf_i+0xd0>
 800bd58:	232d      	movs	r3, #45	@ 0x2d
 800bd5a:	426d      	negs	r5, r5
 800bd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd60:	4859      	ldr	r0, [pc, #356]	@ (800bec8 <_printf_i+0x238>)
 800bd62:	230a      	movs	r3, #10
 800bd64:	e011      	b.n	800bd8a <_printf_i+0xfa>
 800bd66:	6821      	ldr	r1, [r4, #0]
 800bd68:	6833      	ldr	r3, [r6, #0]
 800bd6a:	0608      	lsls	r0, r1, #24
 800bd6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bd70:	d402      	bmi.n	800bd78 <_printf_i+0xe8>
 800bd72:	0649      	lsls	r1, r1, #25
 800bd74:	bf48      	it	mi
 800bd76:	b2ad      	uxthmi	r5, r5
 800bd78:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd7a:	4853      	ldr	r0, [pc, #332]	@ (800bec8 <_printf_i+0x238>)
 800bd7c:	6033      	str	r3, [r6, #0]
 800bd7e:	bf14      	ite	ne
 800bd80:	230a      	movne	r3, #10
 800bd82:	2308      	moveq	r3, #8
 800bd84:	2100      	movs	r1, #0
 800bd86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd8a:	6866      	ldr	r6, [r4, #4]
 800bd8c:	60a6      	str	r6, [r4, #8]
 800bd8e:	2e00      	cmp	r6, #0
 800bd90:	bfa2      	ittt	ge
 800bd92:	6821      	ldrge	r1, [r4, #0]
 800bd94:	f021 0104 	bicge.w	r1, r1, #4
 800bd98:	6021      	strge	r1, [r4, #0]
 800bd9a:	b90d      	cbnz	r5, 800bda0 <_printf_i+0x110>
 800bd9c:	2e00      	cmp	r6, #0
 800bd9e:	d04b      	beq.n	800be38 <_printf_i+0x1a8>
 800bda0:	4616      	mov	r6, r2
 800bda2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bda6:	fb03 5711 	mls	r7, r3, r1, r5
 800bdaa:	5dc7      	ldrb	r7, [r0, r7]
 800bdac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdb0:	462f      	mov	r7, r5
 800bdb2:	42bb      	cmp	r3, r7
 800bdb4:	460d      	mov	r5, r1
 800bdb6:	d9f4      	bls.n	800bda2 <_printf_i+0x112>
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d10b      	bne.n	800bdd4 <_printf_i+0x144>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	07df      	lsls	r7, r3, #31
 800bdc0:	d508      	bpl.n	800bdd4 <_printf_i+0x144>
 800bdc2:	6923      	ldr	r3, [r4, #16]
 800bdc4:	6861      	ldr	r1, [r4, #4]
 800bdc6:	4299      	cmp	r1, r3
 800bdc8:	bfde      	ittt	le
 800bdca:	2330      	movle	r3, #48	@ 0x30
 800bdcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bdd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bdd4:	1b92      	subs	r2, r2, r6
 800bdd6:	6122      	str	r2, [r4, #16]
 800bdd8:	f8cd a000 	str.w	sl, [sp]
 800bddc:	464b      	mov	r3, r9
 800bdde:	aa03      	add	r2, sp, #12
 800bde0:	4621      	mov	r1, r4
 800bde2:	4640      	mov	r0, r8
 800bde4:	f7ff fee6 	bl	800bbb4 <_printf_common>
 800bde8:	3001      	adds	r0, #1
 800bdea:	d14a      	bne.n	800be82 <_printf_i+0x1f2>
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	b004      	add	sp, #16
 800bdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	f043 0320 	orr.w	r3, r3, #32
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	4833      	ldr	r0, [pc, #204]	@ (800becc <_printf_i+0x23c>)
 800be00:	2778      	movs	r7, #120	@ 0x78
 800be02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	6831      	ldr	r1, [r6, #0]
 800be0a:	061f      	lsls	r7, r3, #24
 800be0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800be10:	d402      	bmi.n	800be18 <_printf_i+0x188>
 800be12:	065f      	lsls	r7, r3, #25
 800be14:	bf48      	it	mi
 800be16:	b2ad      	uxthmi	r5, r5
 800be18:	6031      	str	r1, [r6, #0]
 800be1a:	07d9      	lsls	r1, r3, #31
 800be1c:	bf44      	itt	mi
 800be1e:	f043 0320 	orrmi.w	r3, r3, #32
 800be22:	6023      	strmi	r3, [r4, #0]
 800be24:	b11d      	cbz	r5, 800be2e <_printf_i+0x19e>
 800be26:	2310      	movs	r3, #16
 800be28:	e7ac      	b.n	800bd84 <_printf_i+0xf4>
 800be2a:	4827      	ldr	r0, [pc, #156]	@ (800bec8 <_printf_i+0x238>)
 800be2c:	e7e9      	b.n	800be02 <_printf_i+0x172>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	f023 0320 	bic.w	r3, r3, #32
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	e7f6      	b.n	800be26 <_printf_i+0x196>
 800be38:	4616      	mov	r6, r2
 800be3a:	e7bd      	b.n	800bdb8 <_printf_i+0x128>
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	6825      	ldr	r5, [r4, #0]
 800be40:	6961      	ldr	r1, [r4, #20]
 800be42:	1d18      	adds	r0, r3, #4
 800be44:	6030      	str	r0, [r6, #0]
 800be46:	062e      	lsls	r6, r5, #24
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	d501      	bpl.n	800be50 <_printf_i+0x1c0>
 800be4c:	6019      	str	r1, [r3, #0]
 800be4e:	e002      	b.n	800be56 <_printf_i+0x1c6>
 800be50:	0668      	lsls	r0, r5, #25
 800be52:	d5fb      	bpl.n	800be4c <_printf_i+0x1bc>
 800be54:	8019      	strh	r1, [r3, #0]
 800be56:	2300      	movs	r3, #0
 800be58:	6123      	str	r3, [r4, #16]
 800be5a:	4616      	mov	r6, r2
 800be5c:	e7bc      	b.n	800bdd8 <_printf_i+0x148>
 800be5e:	6833      	ldr	r3, [r6, #0]
 800be60:	1d1a      	adds	r2, r3, #4
 800be62:	6032      	str	r2, [r6, #0]
 800be64:	681e      	ldr	r6, [r3, #0]
 800be66:	6862      	ldr	r2, [r4, #4]
 800be68:	2100      	movs	r1, #0
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7f4 fa60 	bl	8000330 <memchr>
 800be70:	b108      	cbz	r0, 800be76 <_printf_i+0x1e6>
 800be72:	1b80      	subs	r0, r0, r6
 800be74:	6060      	str	r0, [r4, #4]
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	2300      	movs	r3, #0
 800be7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be80:	e7aa      	b.n	800bdd8 <_printf_i+0x148>
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	4632      	mov	r2, r6
 800be86:	4649      	mov	r1, r9
 800be88:	4640      	mov	r0, r8
 800be8a:	47d0      	blx	sl
 800be8c:	3001      	adds	r0, #1
 800be8e:	d0ad      	beq.n	800bdec <_printf_i+0x15c>
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	079b      	lsls	r3, r3, #30
 800be94:	d413      	bmi.n	800bebe <_printf_i+0x22e>
 800be96:	68e0      	ldr	r0, [r4, #12]
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	4298      	cmp	r0, r3
 800be9c:	bfb8      	it	lt
 800be9e:	4618      	movlt	r0, r3
 800bea0:	e7a6      	b.n	800bdf0 <_printf_i+0x160>
 800bea2:	2301      	movs	r3, #1
 800bea4:	4632      	mov	r2, r6
 800bea6:	4649      	mov	r1, r9
 800bea8:	4640      	mov	r0, r8
 800beaa:	47d0      	blx	sl
 800beac:	3001      	adds	r0, #1
 800beae:	d09d      	beq.n	800bdec <_printf_i+0x15c>
 800beb0:	3501      	adds	r5, #1
 800beb2:	68e3      	ldr	r3, [r4, #12]
 800beb4:	9903      	ldr	r1, [sp, #12]
 800beb6:	1a5b      	subs	r3, r3, r1
 800beb8:	42ab      	cmp	r3, r5
 800beba:	dcf2      	bgt.n	800bea2 <_printf_i+0x212>
 800bebc:	e7eb      	b.n	800be96 <_printf_i+0x206>
 800bebe:	2500      	movs	r5, #0
 800bec0:	f104 0619 	add.w	r6, r4, #25
 800bec4:	e7f5      	b.n	800beb2 <_printf_i+0x222>
 800bec6:	bf00      	nop
 800bec8:	0800c90f 	.word	0x0800c90f
 800becc:	0800c920 	.word	0x0800c920

0800bed0 <__sflush_r>:
 800bed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed8:	0716      	lsls	r6, r2, #28
 800beda:	4605      	mov	r5, r0
 800bedc:	460c      	mov	r4, r1
 800bede:	d454      	bmi.n	800bf8a <__sflush_r+0xba>
 800bee0:	684b      	ldr	r3, [r1, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dc02      	bgt.n	800beec <__sflush_r+0x1c>
 800bee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dd48      	ble.n	800bf7e <__sflush_r+0xae>
 800beec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beee:	2e00      	cmp	r6, #0
 800bef0:	d045      	beq.n	800bf7e <__sflush_r+0xae>
 800bef2:	2300      	movs	r3, #0
 800bef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bef8:	682f      	ldr	r7, [r5, #0]
 800befa:	6a21      	ldr	r1, [r4, #32]
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	d030      	beq.n	800bf62 <__sflush_r+0x92>
 800bf00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	0759      	lsls	r1, r3, #29
 800bf06:	d505      	bpl.n	800bf14 <__sflush_r+0x44>
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	1ad2      	subs	r2, r2, r3
 800bf0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf0e:	b10b      	cbz	r3, 800bf14 <__sflush_r+0x44>
 800bf10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf12:	1ad2      	subs	r2, r2, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf18:	6a21      	ldr	r1, [r4, #32]
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b0      	blx	r6
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	d106      	bne.n	800bf32 <__sflush_r+0x62>
 800bf24:	6829      	ldr	r1, [r5, #0]
 800bf26:	291d      	cmp	r1, #29
 800bf28:	d82b      	bhi.n	800bf82 <__sflush_r+0xb2>
 800bf2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bfd4 <__sflush_r+0x104>)
 800bf2c:	410a      	asrs	r2, r1
 800bf2e:	07d6      	lsls	r6, r2, #31
 800bf30:	d427      	bmi.n	800bf82 <__sflush_r+0xb2>
 800bf32:	2200      	movs	r2, #0
 800bf34:	6062      	str	r2, [r4, #4]
 800bf36:	04d9      	lsls	r1, r3, #19
 800bf38:	6922      	ldr	r2, [r4, #16]
 800bf3a:	6022      	str	r2, [r4, #0]
 800bf3c:	d504      	bpl.n	800bf48 <__sflush_r+0x78>
 800bf3e:	1c42      	adds	r2, r0, #1
 800bf40:	d101      	bne.n	800bf46 <__sflush_r+0x76>
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	b903      	cbnz	r3, 800bf48 <__sflush_r+0x78>
 800bf46:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf4a:	602f      	str	r7, [r5, #0]
 800bf4c:	b1b9      	cbz	r1, 800bf7e <__sflush_r+0xae>
 800bf4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf52:	4299      	cmp	r1, r3
 800bf54:	d002      	beq.n	800bf5c <__sflush_r+0x8c>
 800bf56:	4628      	mov	r0, r5
 800bf58:	f7ff fc8a 	bl	800b870 <_free_r>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf60:	e00d      	b.n	800bf7e <__sflush_r+0xae>
 800bf62:	2301      	movs	r3, #1
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b0      	blx	r6
 800bf68:	4602      	mov	r2, r0
 800bf6a:	1c50      	adds	r0, r2, #1
 800bf6c:	d1c9      	bne.n	800bf02 <__sflush_r+0x32>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0c6      	beq.n	800bf02 <__sflush_r+0x32>
 800bf74:	2b1d      	cmp	r3, #29
 800bf76:	d001      	beq.n	800bf7c <__sflush_r+0xac>
 800bf78:	2b16      	cmp	r3, #22
 800bf7a:	d11e      	bne.n	800bfba <__sflush_r+0xea>
 800bf7c:	602f      	str	r7, [r5, #0]
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e022      	b.n	800bfc8 <__sflush_r+0xf8>
 800bf82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf86:	b21b      	sxth	r3, r3
 800bf88:	e01b      	b.n	800bfc2 <__sflush_r+0xf2>
 800bf8a:	690f      	ldr	r7, [r1, #16]
 800bf8c:	2f00      	cmp	r7, #0
 800bf8e:	d0f6      	beq.n	800bf7e <__sflush_r+0xae>
 800bf90:	0793      	lsls	r3, r2, #30
 800bf92:	680e      	ldr	r6, [r1, #0]
 800bf94:	bf08      	it	eq
 800bf96:	694b      	ldreq	r3, [r1, #20]
 800bf98:	600f      	str	r7, [r1, #0]
 800bf9a:	bf18      	it	ne
 800bf9c:	2300      	movne	r3, #0
 800bf9e:	eba6 0807 	sub.w	r8, r6, r7
 800bfa2:	608b      	str	r3, [r1, #8]
 800bfa4:	f1b8 0f00 	cmp.w	r8, #0
 800bfa8:	dde9      	ble.n	800bf7e <__sflush_r+0xae>
 800bfaa:	6a21      	ldr	r1, [r4, #32]
 800bfac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfae:	4643      	mov	r3, r8
 800bfb0:	463a      	mov	r2, r7
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	47b0      	blx	r6
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	dc08      	bgt.n	800bfcc <__sflush_r+0xfc>
 800bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	4407      	add	r7, r0
 800bfce:	eba8 0800 	sub.w	r8, r8, r0
 800bfd2:	e7e7      	b.n	800bfa4 <__sflush_r+0xd4>
 800bfd4:	dfbffffe 	.word	0xdfbffffe

0800bfd8 <_fflush_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	690b      	ldr	r3, [r1, #16]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b913      	cbnz	r3, 800bfe8 <_fflush_r+0x10>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	b118      	cbz	r0, 800bff2 <_fflush_r+0x1a>
 800bfea:	6a03      	ldr	r3, [r0, #32]
 800bfec:	b90b      	cbnz	r3, 800bff2 <_fflush_r+0x1a>
 800bfee:	f7ff fa7d 	bl	800b4ec <__sinit>
 800bff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0f3      	beq.n	800bfe2 <_fflush_r+0xa>
 800bffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bffc:	07d0      	lsls	r0, r2, #31
 800bffe:	d404      	bmi.n	800c00a <_fflush_r+0x32>
 800c000:	0599      	lsls	r1, r3, #22
 800c002:	d402      	bmi.n	800c00a <_fflush_r+0x32>
 800c004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c006:	f7ff fc04 	bl	800b812 <__retarget_lock_acquire_recursive>
 800c00a:	4628      	mov	r0, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	f7ff ff5f 	bl	800bed0 <__sflush_r>
 800c012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c014:	07da      	lsls	r2, r3, #31
 800c016:	4605      	mov	r5, r0
 800c018:	d4e4      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	059b      	lsls	r3, r3, #22
 800c01e:	d4e1      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c022:	f7ff fbf7 	bl	800b814 <__retarget_lock_release_recursive>
 800c026:	e7dd      	b.n	800bfe4 <_fflush_r+0xc>

0800c028 <fiprintf>:
 800c028:	b40e      	push	{r1, r2, r3}
 800c02a:	b503      	push	{r0, r1, lr}
 800c02c:	4601      	mov	r1, r0
 800c02e:	ab03      	add	r3, sp, #12
 800c030:	4805      	ldr	r0, [pc, #20]	@ (800c048 <fiprintf+0x20>)
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	6800      	ldr	r0, [r0, #0]
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	f000 f87f 	bl	800c13c <_vfiprintf_r>
 800c03e:	b002      	add	sp, #8
 800c040:	f85d eb04 	ldr.w	lr, [sp], #4
 800c044:	b003      	add	sp, #12
 800c046:	4770      	bx	lr
 800c048:	24000084 	.word	0x24000084

0800c04c <memmove>:
 800c04c:	4288      	cmp	r0, r1
 800c04e:	b510      	push	{r4, lr}
 800c050:	eb01 0402 	add.w	r4, r1, r2
 800c054:	d902      	bls.n	800c05c <memmove+0x10>
 800c056:	4284      	cmp	r4, r0
 800c058:	4623      	mov	r3, r4
 800c05a:	d807      	bhi.n	800c06c <memmove+0x20>
 800c05c:	1e43      	subs	r3, r0, #1
 800c05e:	42a1      	cmp	r1, r4
 800c060:	d008      	beq.n	800c074 <memmove+0x28>
 800c062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c06a:	e7f8      	b.n	800c05e <memmove+0x12>
 800c06c:	4402      	add	r2, r0
 800c06e:	4601      	mov	r1, r0
 800c070:	428a      	cmp	r2, r1
 800c072:	d100      	bne.n	800c076 <memmove+0x2a>
 800c074:	bd10      	pop	{r4, pc}
 800c076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c07e:	e7f7      	b.n	800c070 <memmove+0x24>

0800c080 <abort>:
 800c080:	b508      	push	{r3, lr}
 800c082:	2006      	movs	r0, #6
 800c084:	f000 fa2e 	bl	800c4e4 <raise>
 800c088:	2001      	movs	r0, #1
 800c08a:	f7f5 f8dd 	bl	8001248 <_exit>

0800c08e <_realloc_r>:
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	4680      	mov	r8, r0
 800c094:	4615      	mov	r5, r2
 800c096:	460c      	mov	r4, r1
 800c098:	b921      	cbnz	r1, 800c0a4 <_realloc_r+0x16>
 800c09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	4611      	mov	r1, r2
 800c0a0:	f7ff b888 	b.w	800b1b4 <_malloc_r>
 800c0a4:	b92a      	cbnz	r2, 800c0b2 <_realloc_r+0x24>
 800c0a6:	f7ff fbe3 	bl	800b870 <_free_r>
 800c0aa:	2400      	movs	r4, #0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b2:	f000 fa33 	bl	800c51c <_malloc_usable_size_r>
 800c0b6:	4285      	cmp	r5, r0
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	d802      	bhi.n	800c0c2 <_realloc_r+0x34>
 800c0bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0c0:	d8f4      	bhi.n	800c0ac <_realloc_r+0x1e>
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	f7ff f875 	bl	800b1b4 <_malloc_r>
 800c0ca:	4607      	mov	r7, r0
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	d0ec      	beq.n	800c0aa <_realloc_r+0x1c>
 800c0d0:	42b5      	cmp	r5, r6
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	bf28      	it	cs
 800c0d8:	4632      	movcs	r2, r6
 800c0da:	f7ff fb9c 	bl	800b816 <memcpy>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	f7ff fbc5 	bl	800b870 <_free_r>
 800c0e6:	463c      	mov	r4, r7
 800c0e8:	e7e0      	b.n	800c0ac <_realloc_r+0x1e>

0800c0ea <__sfputc_r>:
 800c0ea:	6893      	ldr	r3, [r2, #8]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	b410      	push	{r4}
 800c0f2:	6093      	str	r3, [r2, #8]
 800c0f4:	da08      	bge.n	800c108 <__sfputc_r+0x1e>
 800c0f6:	6994      	ldr	r4, [r2, #24]
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	db01      	blt.n	800c100 <__sfputc_r+0x16>
 800c0fc:	290a      	cmp	r1, #10
 800c0fe:	d103      	bne.n	800c108 <__sfputc_r+0x1e>
 800c100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c104:	f000 b932 	b.w	800c36c <__swbuf_r>
 800c108:	6813      	ldr	r3, [r2, #0]
 800c10a:	1c58      	adds	r0, r3, #1
 800c10c:	6010      	str	r0, [r2, #0]
 800c10e:	7019      	strb	r1, [r3, #0]
 800c110:	4608      	mov	r0, r1
 800c112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <__sfputs_r>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	4614      	mov	r4, r2
 800c120:	18d5      	adds	r5, r2, r3
 800c122:	42ac      	cmp	r4, r5
 800c124:	d101      	bne.n	800c12a <__sfputs_r+0x12>
 800c126:	2000      	movs	r0, #0
 800c128:	e007      	b.n	800c13a <__sfputs_r+0x22>
 800c12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c12e:	463a      	mov	r2, r7
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff ffda 	bl	800c0ea <__sfputc_r>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d1f3      	bne.n	800c122 <__sfputs_r+0xa>
 800c13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c13c <_vfiprintf_r>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	460d      	mov	r5, r1
 800c142:	b09d      	sub	sp, #116	@ 0x74
 800c144:	4614      	mov	r4, r2
 800c146:	4698      	mov	r8, r3
 800c148:	4606      	mov	r6, r0
 800c14a:	b118      	cbz	r0, 800c154 <_vfiprintf_r+0x18>
 800c14c:	6a03      	ldr	r3, [r0, #32]
 800c14e:	b90b      	cbnz	r3, 800c154 <_vfiprintf_r+0x18>
 800c150:	f7ff f9cc 	bl	800b4ec <__sinit>
 800c154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c156:	07d9      	lsls	r1, r3, #31
 800c158:	d405      	bmi.n	800c166 <_vfiprintf_r+0x2a>
 800c15a:	89ab      	ldrh	r3, [r5, #12]
 800c15c:	059a      	lsls	r2, r3, #22
 800c15e:	d402      	bmi.n	800c166 <_vfiprintf_r+0x2a>
 800c160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c162:	f7ff fb56 	bl	800b812 <__retarget_lock_acquire_recursive>
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	071b      	lsls	r3, r3, #28
 800c16a:	d501      	bpl.n	800c170 <_vfiprintf_r+0x34>
 800c16c:	692b      	ldr	r3, [r5, #16]
 800c16e:	b99b      	cbnz	r3, 800c198 <_vfiprintf_r+0x5c>
 800c170:	4629      	mov	r1, r5
 800c172:	4630      	mov	r0, r6
 800c174:	f000 f938 	bl	800c3e8 <__swsetup_r>
 800c178:	b170      	cbz	r0, 800c198 <_vfiprintf_r+0x5c>
 800c17a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c17c:	07dc      	lsls	r4, r3, #31
 800c17e:	d504      	bpl.n	800c18a <_vfiprintf_r+0x4e>
 800c180:	f04f 30ff 	mov.w	r0, #4294967295
 800c184:	b01d      	add	sp, #116	@ 0x74
 800c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18a:	89ab      	ldrh	r3, [r5, #12]
 800c18c:	0598      	lsls	r0, r3, #22
 800c18e:	d4f7      	bmi.n	800c180 <_vfiprintf_r+0x44>
 800c190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c192:	f7ff fb3f 	bl	800b814 <__retarget_lock_release_recursive>
 800c196:	e7f3      	b.n	800c180 <_vfiprintf_r+0x44>
 800c198:	2300      	movs	r3, #0
 800c19a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19c:	2320      	movs	r3, #32
 800c19e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a6:	2330      	movs	r3, #48	@ 0x30
 800c1a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c358 <_vfiprintf_r+0x21c>
 800c1ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1b0:	f04f 0901 	mov.w	r9, #1
 800c1b4:	4623      	mov	r3, r4
 800c1b6:	469a      	mov	sl, r3
 800c1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1bc:	b10a      	cbz	r2, 800c1c2 <_vfiprintf_r+0x86>
 800c1be:	2a25      	cmp	r2, #37	@ 0x25
 800c1c0:	d1f9      	bne.n	800c1b6 <_vfiprintf_r+0x7a>
 800c1c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c6:	d00b      	beq.n	800c1e0 <_vfiprintf_r+0xa4>
 800c1c8:	465b      	mov	r3, fp
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f7ff ffa2 	bl	800c118 <__sfputs_r>
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f000 80a7 	beq.w	800c328 <_vfiprintf_r+0x1ec>
 800c1da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1dc:	445a      	add	r2, fp
 800c1de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 809f 	beq.w	800c328 <_vfiprintf_r+0x1ec>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f4:	f10a 0a01 	add.w	sl, sl, #1
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	9307      	str	r3, [sp, #28]
 800c1fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c200:	931a      	str	r3, [sp, #104]	@ 0x68
 800c202:	4654      	mov	r4, sl
 800c204:	2205      	movs	r2, #5
 800c206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20a:	4853      	ldr	r0, [pc, #332]	@ (800c358 <_vfiprintf_r+0x21c>)
 800c20c:	f7f4 f890 	bl	8000330 <memchr>
 800c210:	9a04      	ldr	r2, [sp, #16]
 800c212:	b9d8      	cbnz	r0, 800c24c <_vfiprintf_r+0x110>
 800c214:	06d1      	lsls	r1, r2, #27
 800c216:	bf44      	itt	mi
 800c218:	2320      	movmi	r3, #32
 800c21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c21e:	0713      	lsls	r3, r2, #28
 800c220:	bf44      	itt	mi
 800c222:	232b      	movmi	r3, #43	@ 0x2b
 800c224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c228:	f89a 3000 	ldrb.w	r3, [sl]
 800c22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c22e:	d015      	beq.n	800c25c <_vfiprintf_r+0x120>
 800c230:	9a07      	ldr	r2, [sp, #28]
 800c232:	4654      	mov	r4, sl
 800c234:	2000      	movs	r0, #0
 800c236:	f04f 0c0a 	mov.w	ip, #10
 800c23a:	4621      	mov	r1, r4
 800c23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c240:	3b30      	subs	r3, #48	@ 0x30
 800c242:	2b09      	cmp	r3, #9
 800c244:	d94b      	bls.n	800c2de <_vfiprintf_r+0x1a2>
 800c246:	b1b0      	cbz	r0, 800c276 <_vfiprintf_r+0x13a>
 800c248:	9207      	str	r2, [sp, #28]
 800c24a:	e014      	b.n	800c276 <_vfiprintf_r+0x13a>
 800c24c:	eba0 0308 	sub.w	r3, r0, r8
 800c250:	fa09 f303 	lsl.w	r3, r9, r3
 800c254:	4313      	orrs	r3, r2
 800c256:	9304      	str	r3, [sp, #16]
 800c258:	46a2      	mov	sl, r4
 800c25a:	e7d2      	b.n	800c202 <_vfiprintf_r+0xc6>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	1d19      	adds	r1, r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	9103      	str	r1, [sp, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	bfbb      	ittet	lt
 800c268:	425b      	neglt	r3, r3
 800c26a:	f042 0202 	orrlt.w	r2, r2, #2
 800c26e:	9307      	strge	r3, [sp, #28]
 800c270:	9307      	strlt	r3, [sp, #28]
 800c272:	bfb8      	it	lt
 800c274:	9204      	strlt	r2, [sp, #16]
 800c276:	7823      	ldrb	r3, [r4, #0]
 800c278:	2b2e      	cmp	r3, #46	@ 0x2e
 800c27a:	d10a      	bne.n	800c292 <_vfiprintf_r+0x156>
 800c27c:	7863      	ldrb	r3, [r4, #1]
 800c27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c280:	d132      	bne.n	800c2e8 <_vfiprintf_r+0x1ac>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	1d1a      	adds	r2, r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	9203      	str	r2, [sp, #12]
 800c28a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c28e:	3402      	adds	r4, #2
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c368 <_vfiprintf_r+0x22c>
 800c296:	7821      	ldrb	r1, [r4, #0]
 800c298:	2203      	movs	r2, #3
 800c29a:	4650      	mov	r0, sl
 800c29c:	f7f4 f848 	bl	8000330 <memchr>
 800c2a0:	b138      	cbz	r0, 800c2b2 <_vfiprintf_r+0x176>
 800c2a2:	9b04      	ldr	r3, [sp, #16]
 800c2a4:	eba0 000a 	sub.w	r0, r0, sl
 800c2a8:	2240      	movs	r2, #64	@ 0x40
 800c2aa:	4082      	lsls	r2, r0
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	3401      	adds	r4, #1
 800c2b0:	9304      	str	r3, [sp, #16]
 800c2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b6:	4829      	ldr	r0, [pc, #164]	@ (800c35c <_vfiprintf_r+0x220>)
 800c2b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2bc:	2206      	movs	r2, #6
 800c2be:	f7f4 f837 	bl	8000330 <memchr>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d03f      	beq.n	800c346 <_vfiprintf_r+0x20a>
 800c2c6:	4b26      	ldr	r3, [pc, #152]	@ (800c360 <_vfiprintf_r+0x224>)
 800c2c8:	bb1b      	cbnz	r3, 800c312 <_vfiprintf_r+0x1d6>
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	3307      	adds	r3, #7
 800c2ce:	f023 0307 	bic.w	r3, r3, #7
 800c2d2:	3308      	adds	r3, #8
 800c2d4:	9303      	str	r3, [sp, #12]
 800c2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d8:	443b      	add	r3, r7
 800c2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2dc:	e76a      	b.n	800c1b4 <_vfiprintf_r+0x78>
 800c2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	e7a8      	b.n	800c23a <_vfiprintf_r+0xfe>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	3401      	adds	r4, #1
 800c2ec:	9305      	str	r3, [sp, #20]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	f04f 0c0a 	mov.w	ip, #10
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fa:	3a30      	subs	r2, #48	@ 0x30
 800c2fc:	2a09      	cmp	r2, #9
 800c2fe:	d903      	bls.n	800c308 <_vfiprintf_r+0x1cc>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0c6      	beq.n	800c292 <_vfiprintf_r+0x156>
 800c304:	9105      	str	r1, [sp, #20]
 800c306:	e7c4      	b.n	800c292 <_vfiprintf_r+0x156>
 800c308:	fb0c 2101 	mla	r1, ip, r1, r2
 800c30c:	4604      	mov	r4, r0
 800c30e:	2301      	movs	r3, #1
 800c310:	e7f0      	b.n	800c2f4 <_vfiprintf_r+0x1b8>
 800c312:	ab03      	add	r3, sp, #12
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	462a      	mov	r2, r5
 800c318:	4b12      	ldr	r3, [pc, #72]	@ (800c364 <_vfiprintf_r+0x228>)
 800c31a:	a904      	add	r1, sp, #16
 800c31c:	4630      	mov	r0, r6
 800c31e:	f3af 8000 	nop.w
 800c322:	4607      	mov	r7, r0
 800c324:	1c78      	adds	r0, r7, #1
 800c326:	d1d6      	bne.n	800c2d6 <_vfiprintf_r+0x19a>
 800c328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c32a:	07d9      	lsls	r1, r3, #31
 800c32c:	d405      	bmi.n	800c33a <_vfiprintf_r+0x1fe>
 800c32e:	89ab      	ldrh	r3, [r5, #12]
 800c330:	059a      	lsls	r2, r3, #22
 800c332:	d402      	bmi.n	800c33a <_vfiprintf_r+0x1fe>
 800c334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c336:	f7ff fa6d 	bl	800b814 <__retarget_lock_release_recursive>
 800c33a:	89ab      	ldrh	r3, [r5, #12]
 800c33c:	065b      	lsls	r3, r3, #25
 800c33e:	f53f af1f 	bmi.w	800c180 <_vfiprintf_r+0x44>
 800c342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c344:	e71e      	b.n	800c184 <_vfiprintf_r+0x48>
 800c346:	ab03      	add	r3, sp, #12
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	462a      	mov	r2, r5
 800c34c:	4b05      	ldr	r3, [pc, #20]	@ (800c364 <_vfiprintf_r+0x228>)
 800c34e:	a904      	add	r1, sp, #16
 800c350:	4630      	mov	r0, r6
 800c352:	f7ff fc9d 	bl	800bc90 <_printf_i>
 800c356:	e7e4      	b.n	800c322 <_vfiprintf_r+0x1e6>
 800c358:	0800c8fe 	.word	0x0800c8fe
 800c35c:	0800c908 	.word	0x0800c908
 800c360:	00000000 	.word	0x00000000
 800c364:	0800c119 	.word	0x0800c119
 800c368:	0800c904 	.word	0x0800c904

0800c36c <__swbuf_r>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	460e      	mov	r6, r1
 800c370:	4614      	mov	r4, r2
 800c372:	4605      	mov	r5, r0
 800c374:	b118      	cbz	r0, 800c37e <__swbuf_r+0x12>
 800c376:	6a03      	ldr	r3, [r0, #32]
 800c378:	b90b      	cbnz	r3, 800c37e <__swbuf_r+0x12>
 800c37a:	f7ff f8b7 	bl	800b4ec <__sinit>
 800c37e:	69a3      	ldr	r3, [r4, #24]
 800c380:	60a3      	str	r3, [r4, #8]
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	071a      	lsls	r2, r3, #28
 800c386:	d501      	bpl.n	800c38c <__swbuf_r+0x20>
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	b943      	cbnz	r3, 800c39e <__swbuf_r+0x32>
 800c38c:	4621      	mov	r1, r4
 800c38e:	4628      	mov	r0, r5
 800c390:	f000 f82a 	bl	800c3e8 <__swsetup_r>
 800c394:	b118      	cbz	r0, 800c39e <__swbuf_r+0x32>
 800c396:	f04f 37ff 	mov.w	r7, #4294967295
 800c39a:	4638      	mov	r0, r7
 800c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	6922      	ldr	r2, [r4, #16]
 800c3a2:	1a98      	subs	r0, r3, r2
 800c3a4:	6963      	ldr	r3, [r4, #20]
 800c3a6:	b2f6      	uxtb	r6, r6
 800c3a8:	4283      	cmp	r3, r0
 800c3aa:	4637      	mov	r7, r6
 800c3ac:	dc05      	bgt.n	800c3ba <__swbuf_r+0x4e>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f7ff fe11 	bl	800bfd8 <_fflush_r>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d1ed      	bne.n	800c396 <__swbuf_r+0x2a>
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	6022      	str	r2, [r4, #0]
 800c3c6:	701e      	strb	r6, [r3, #0]
 800c3c8:	6962      	ldr	r2, [r4, #20]
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d004      	beq.n	800c3da <__swbuf_r+0x6e>
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	07db      	lsls	r3, r3, #31
 800c3d4:	d5e1      	bpl.n	800c39a <__swbuf_r+0x2e>
 800c3d6:	2e0a      	cmp	r6, #10
 800c3d8:	d1df      	bne.n	800c39a <__swbuf_r+0x2e>
 800c3da:	4621      	mov	r1, r4
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f7ff fdfb 	bl	800bfd8 <_fflush_r>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d0d9      	beq.n	800c39a <__swbuf_r+0x2e>
 800c3e6:	e7d6      	b.n	800c396 <__swbuf_r+0x2a>

0800c3e8 <__swsetup_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4b29      	ldr	r3, [pc, #164]	@ (800c490 <__swsetup_r+0xa8>)
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	b118      	cbz	r0, 800c3fc <__swsetup_r+0x14>
 800c3f4:	6a03      	ldr	r3, [r0, #32]
 800c3f6:	b90b      	cbnz	r3, 800c3fc <__swsetup_r+0x14>
 800c3f8:	f7ff f878 	bl	800b4ec <__sinit>
 800c3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c400:	0719      	lsls	r1, r3, #28
 800c402:	d422      	bmi.n	800c44a <__swsetup_r+0x62>
 800c404:	06da      	lsls	r2, r3, #27
 800c406:	d407      	bmi.n	800c418 <__swsetup_r+0x30>
 800c408:	2209      	movs	r2, #9
 800c40a:	602a      	str	r2, [r5, #0]
 800c40c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	f04f 30ff 	mov.w	r0, #4294967295
 800c416:	e033      	b.n	800c480 <__swsetup_r+0x98>
 800c418:	0758      	lsls	r0, r3, #29
 800c41a:	d512      	bpl.n	800c442 <__swsetup_r+0x5a>
 800c41c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c41e:	b141      	cbz	r1, 800c432 <__swsetup_r+0x4a>
 800c420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c424:	4299      	cmp	r1, r3
 800c426:	d002      	beq.n	800c42e <__swsetup_r+0x46>
 800c428:	4628      	mov	r0, r5
 800c42a:	f7ff fa21 	bl	800b870 <_free_r>
 800c42e:	2300      	movs	r3, #0
 800c430:	6363      	str	r3, [r4, #52]	@ 0x34
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	2300      	movs	r3, #0
 800c43c:	6063      	str	r3, [r4, #4]
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f043 0308 	orr.w	r3, r3, #8
 800c448:	81a3      	strh	r3, [r4, #12]
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	b94b      	cbnz	r3, 800c462 <__swsetup_r+0x7a>
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c458:	d003      	beq.n	800c462 <__swsetup_r+0x7a>
 800c45a:	4621      	mov	r1, r4
 800c45c:	4628      	mov	r0, r5
 800c45e:	f000 f88b 	bl	800c578 <__smakebuf_r>
 800c462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c466:	f013 0201 	ands.w	r2, r3, #1
 800c46a:	d00a      	beq.n	800c482 <__swsetup_r+0x9a>
 800c46c:	2200      	movs	r2, #0
 800c46e:	60a2      	str	r2, [r4, #8]
 800c470:	6962      	ldr	r2, [r4, #20]
 800c472:	4252      	negs	r2, r2
 800c474:	61a2      	str	r2, [r4, #24]
 800c476:	6922      	ldr	r2, [r4, #16]
 800c478:	b942      	cbnz	r2, 800c48c <__swsetup_r+0xa4>
 800c47a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c47e:	d1c5      	bne.n	800c40c <__swsetup_r+0x24>
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	0799      	lsls	r1, r3, #30
 800c484:	bf58      	it	pl
 800c486:	6962      	ldrpl	r2, [r4, #20]
 800c488:	60a2      	str	r2, [r4, #8]
 800c48a:	e7f4      	b.n	800c476 <__swsetup_r+0x8e>
 800c48c:	2000      	movs	r0, #0
 800c48e:	e7f7      	b.n	800c480 <__swsetup_r+0x98>
 800c490:	24000084 	.word	0x24000084

0800c494 <_raise_r>:
 800c494:	291f      	cmp	r1, #31
 800c496:	b538      	push	{r3, r4, r5, lr}
 800c498:	4605      	mov	r5, r0
 800c49a:	460c      	mov	r4, r1
 800c49c:	d904      	bls.n	800c4a8 <_raise_r+0x14>
 800c49e:	2316      	movs	r3, #22
 800c4a0:	6003      	str	r3, [r0, #0]
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4aa:	b112      	cbz	r2, 800c4b2 <_raise_r+0x1e>
 800c4ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b0:	b94b      	cbnz	r3, 800c4c6 <_raise_r+0x32>
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f830 	bl	800c518 <_getpid_r>
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	4628      	mov	r0, r5
 800c4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c2:	f000 b817 	b.w	800c4f4 <_kill_r>
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d00a      	beq.n	800c4e0 <_raise_r+0x4c>
 800c4ca:	1c59      	adds	r1, r3, #1
 800c4cc:	d103      	bne.n	800c4d6 <_raise_r+0x42>
 800c4ce:	2316      	movs	r3, #22
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	e7e7      	b.n	800c4a6 <_raise_r+0x12>
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4798      	blx	r3
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e7e0      	b.n	800c4a6 <_raise_r+0x12>

0800c4e4 <raise>:
 800c4e4:	4b02      	ldr	r3, [pc, #8]	@ (800c4f0 <raise+0xc>)
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	f7ff bfd3 	b.w	800c494 <_raise_r>
 800c4ee:	bf00      	nop
 800c4f0:	24000084 	.word	0x24000084

0800c4f4 <_kill_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	@ (800c514 <_kill_r+0x20>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f7f4 fe91 	bl	8001228 <_kill>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d102      	bne.n	800c510 <_kill_r+0x1c>
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	b103      	cbz	r3, 800c510 <_kill_r+0x1c>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	24000954 	.word	0x24000954

0800c518 <_getpid_r>:
 800c518:	f7f4 be7e 	b.w	8001218 <_getpid>

0800c51c <_malloc_usable_size_r>:
 800c51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c520:	1f18      	subs	r0, r3, #4
 800c522:	2b00      	cmp	r3, #0
 800c524:	bfbc      	itt	lt
 800c526:	580b      	ldrlt	r3, [r1, r0]
 800c528:	18c0      	addlt	r0, r0, r3
 800c52a:	4770      	bx	lr

0800c52c <__swhatbuf_r>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	460c      	mov	r4, r1
 800c530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c534:	2900      	cmp	r1, #0
 800c536:	b096      	sub	sp, #88	@ 0x58
 800c538:	4615      	mov	r5, r2
 800c53a:	461e      	mov	r6, r3
 800c53c:	da0d      	bge.n	800c55a <__swhatbuf_r+0x2e>
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c544:	f04f 0100 	mov.w	r1, #0
 800c548:	bf14      	ite	ne
 800c54a:	2340      	movne	r3, #64	@ 0x40
 800c54c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c550:	2000      	movs	r0, #0
 800c552:	6031      	str	r1, [r6, #0]
 800c554:	602b      	str	r3, [r5, #0]
 800c556:	b016      	add	sp, #88	@ 0x58
 800c558:	bd70      	pop	{r4, r5, r6, pc}
 800c55a:	466a      	mov	r2, sp
 800c55c:	f000 f848 	bl	800c5f0 <_fstat_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	dbec      	blt.n	800c53e <__swhatbuf_r+0x12>
 800c564:	9901      	ldr	r1, [sp, #4]
 800c566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c56a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c56e:	4259      	negs	r1, r3
 800c570:	4159      	adcs	r1, r3
 800c572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c576:	e7eb      	b.n	800c550 <__swhatbuf_r+0x24>

0800c578 <__smakebuf_r>:
 800c578:	898b      	ldrh	r3, [r1, #12]
 800c57a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c57c:	079d      	lsls	r5, r3, #30
 800c57e:	4606      	mov	r6, r0
 800c580:	460c      	mov	r4, r1
 800c582:	d507      	bpl.n	800c594 <__smakebuf_r+0x1c>
 800c584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	6123      	str	r3, [r4, #16]
 800c58c:	2301      	movs	r3, #1
 800c58e:	6163      	str	r3, [r4, #20]
 800c590:	b003      	add	sp, #12
 800c592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c594:	ab01      	add	r3, sp, #4
 800c596:	466a      	mov	r2, sp
 800c598:	f7ff ffc8 	bl	800c52c <__swhatbuf_r>
 800c59c:	9f00      	ldr	r7, [sp, #0]
 800c59e:	4605      	mov	r5, r0
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f7fe fe06 	bl	800b1b4 <_malloc_r>
 800c5a8:	b948      	cbnz	r0, 800c5be <__smakebuf_r+0x46>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	059a      	lsls	r2, r3, #22
 800c5b0:	d4ee      	bmi.n	800c590 <__smakebuf_r+0x18>
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	f043 0302 	orr.w	r3, r3, #2
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	e7e2      	b.n	800c584 <__smakebuf_r+0xc>
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	6020      	str	r0, [r4, #0]
 800c5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c6:	81a3      	strh	r3, [r4, #12]
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5ce:	b15b      	cbz	r3, 800c5e8 <__smakebuf_r+0x70>
 800c5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f000 f81d 	bl	800c614 <_isatty_r>
 800c5da:	b128      	cbz	r0, 800c5e8 <__smakebuf_r+0x70>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f023 0303 	bic.w	r3, r3, #3
 800c5e2:	f043 0301 	orr.w	r3, r3, #1
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	431d      	orrs	r5, r3
 800c5ec:	81a5      	strh	r5, [r4, #12]
 800c5ee:	e7cf      	b.n	800c590 <__smakebuf_r+0x18>

0800c5f0 <_fstat_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d07      	ldr	r5, [pc, #28]	@ (800c610 <_fstat_r+0x20>)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	602b      	str	r3, [r5, #0]
 800c5fe:	f7f4 fe73 	bl	80012e8 <_fstat>
 800c602:	1c43      	adds	r3, r0, #1
 800c604:	d102      	bne.n	800c60c <_fstat_r+0x1c>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	b103      	cbz	r3, 800c60c <_fstat_r+0x1c>
 800c60a:	6023      	str	r3, [r4, #0]
 800c60c:	bd38      	pop	{r3, r4, r5, pc}
 800c60e:	bf00      	nop
 800c610:	24000954 	.word	0x24000954

0800c614 <_isatty_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d06      	ldr	r5, [pc, #24]	@ (800c630 <_isatty_r+0x1c>)
 800c618:	2300      	movs	r3, #0
 800c61a:	4604      	mov	r4, r0
 800c61c:	4608      	mov	r0, r1
 800c61e:	602b      	str	r3, [r5, #0]
 800c620:	f7f4 fe72 	bl	8001308 <_isatty>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_isatty_r+0x1a>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_isatty_r+0x1a>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	24000954 	.word	0x24000954

0800c634 <_init>:
 800c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c636:	bf00      	nop
 800c638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63a:	bc08      	pop	{r3}
 800c63c:	469e      	mov	lr, r3
 800c63e:	4770      	bx	lr

0800c640 <_fini>:
 800c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c642:	bf00      	nop
 800c644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c646:	bc08      	pop	{r3}
 800c648:	469e      	mov	lr, r3
 800c64a:	4770      	bx	lr


TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a204  0800a204  0000b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a20c  0800a20c  0000b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a214  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a274  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a2d4  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  24000120  0800a334  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  24000498  0800a334  0000c498  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016773  00000000  00000000  0000c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3a  00000000  00000000  000228c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00025800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad2  00000000  00000000  00026640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000347cb  00000000  00000000  00027112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181dc  00000000  00000000  0005b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146c02  00000000  00000000  00073ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba6bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  001ba700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001be2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000120 	.word	0x24000120
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a198 	.word	0x0800a198

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000124 	.word	0x24000124
 8000308:	0800a198 	.word	0x0800a198

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000600:	2210      	movs	r2, #16
 8000602:	4904      	ldr	r1, [pc, #16]	@ (8000614 <systemInit+0x18>)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <systemInit+0x1c>)
 8000606:	f007 f925 	bl	8007854 <HAL_UART_Transmit_IT>

	debugUartInit();
 800060a:	f009 fb9d 	bl	8009d48 <debugUartInit>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	0800a1b0 	.word	0x0800a1b0
 8000618:	24000230 	.word	0x24000230

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <MX_DMA_Init+0x3c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_DMA_Init+0x3c>)
 8000634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	200b      	movs	r0, #11
 8000646:	f000 fe62 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800064a:	200b      	movs	r0, #11
 800064c:	f000 fe79 	bl	8001342 <HAL_NVIC_EnableIRQ>

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58024400 	.word	0x58024400

0800065c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ETH_Init+0x80>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <MX_ETH_Init+0x84>)
 8000664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_ETH_Init+0x88>)
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000674:	22e1      	movs	r2, #225	@ 0xe1
 8000676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_ETH_Init+0x88>)
 800067a:	2200      	movs	r2, #0
 800067c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ETH_Init+0x80>)
 800068c:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <MX_ETH_Init+0x88>)
 800068e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ETH_Init+0x80>)
 8000692:	2201      	movs	r2, #1
 8000694:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ETH_Init+0x80>)
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_ETH_Init+0x8c>)
 800069a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ETH_Init+0x80>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_ETH_Init+0x90>)
 80006a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_ETH_Init+0x80>)
 80006a4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_ETH_Init+0x80>)
 80006ac:	f003 fc9c 	bl	8003fe8 <HAL_ETH_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006b6:	f000 fa75 	bl	8000ba4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ba:	2238      	movs	r2, #56	@ 0x38
 80006bc:	2100      	movs	r1, #0
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006c0:	f009 fd18 	bl	800a0f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006c6:	2221      	movs	r2, #33	@ 0x21
 80006c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000174 	.word	0x24000174
 80006e0:	40028000 	.word	0x40028000
 80006e4:	24000224 	.word	0x24000224
 80006e8:	240000c0 	.word	0x240000c0
 80006ec:	24000060 	.word	0x24000060
 80006f0:	2400013c 	.word	0x2400013c

080006f4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a59      	ldr	r2, [pc, #356]	@ (8000878 <HAL_ETH_MspInit+0x184>)
 8000712:	4293      	cmp	r3, r2
 8000714:	f040 80ab 	bne.w	800086e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000718:	4b58      	ldr	r3, [pc, #352]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800071e:	4a57      	ldr	r2, [pc, #348]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000724:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000728:	4b54      	ldr	r3, [pc, #336]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800072e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000736:	4b51      	ldr	r3, [pc, #324]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800073c:	4a4f      	ldr	r2, [pc, #316]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800073e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000742:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000746:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800074c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000754:	4b49      	ldr	r3, [pc, #292]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075a:	4a48      	ldr	r2, [pc, #288]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800075c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000760:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000764:	4b45      	ldr	r3, [pc, #276]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b42      	ldr	r3, [pc, #264]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4a40      	ldr	r2, [pc, #256]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b3a      	ldr	r3, [pc, #232]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a39      	ldr	r2, [pc, #228]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b36      	ldr	r3, [pc, #216]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a31      	ldr	r2, [pc, #196]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007cc:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007ea:	2332      	movs	r3, #50	@ 0x32
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fa:	230b      	movs	r3, #11
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	481e      	ldr	r0, [pc, #120]	@ (8000880 <HAL_ETH_MspInit+0x18c>)
 8000806:	f004 f823 	bl	8004850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800080a:	2386      	movs	r3, #134	@ 0x86
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081a:	230b      	movs	r3, #11
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4817      	ldr	r0, [pc, #92]	@ (8000884 <HAL_ETH_MspInit+0x190>)
 8000826:	f004 f813 	bl	8004850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083c:	230b      	movs	r3, #11
 800083e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4810      	ldr	r0, [pc, #64]	@ (8000888 <HAL_ETH_MspInit+0x194>)
 8000848:	f004 f802 	bl	8004850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800084c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085e:	230b      	movs	r3, #11
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	4808      	ldr	r0, [pc, #32]	@ (800088c <HAL_ETH_MspInit+0x198>)
 800086a:	f003 fff1 	bl	8004850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3738      	adds	r7, #56	@ 0x38
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40028000 	.word	0x40028000
 800087c:	58024400 	.word	0x58024400
 8000880:	58020800 	.word	0x58020800
 8000884:	58020000 	.word	0x58020000
 8000888:	58020400 	.word	0x58020400
 800088c:	58021800 	.word	0x58021800

08000890 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b71      	ldr	r3, [pc, #452]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a6f      	ldr	r2, [pc, #444]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c4:	4b69      	ldr	r3, [pc, #420]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	4a68      	ldr	r2, [pc, #416]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d4:	4b65      	ldr	r3, [pc, #404]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b62      	ldr	r3, [pc, #392]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b5a      	ldr	r3, [pc, #360]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a59      	ldr	r2, [pc, #356]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a51      	ldr	r2, [pc, #324]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0308 	and.w	r3, r3, #8
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a4a      	ldr	r2, [pc, #296]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b47      	ldr	r3, [pc, #284]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a42      	ldr	r2, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b40      	ldr	r3, [pc, #256]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800097e:	483c      	ldr	r0, [pc, #240]	@ (8000a70 <MX_GPIO_Init+0x1e0>)
 8000980:	f004 f90e 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098a:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x1e4>)
 800098c:	f004 f908 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	4838      	ldr	r0, [pc, #224]	@ (8000a78 <MX_GPIO_Init+0x1e8>)
 8000996:	f004 f903 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4833      	ldr	r0, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0x1ec>)
 80009b0:	f003 ff4e 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4828      	ldr	r0, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0x1e0>)
 80009ce:	f003 ff3f 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <MX_GPIO_Init+0x1e4>)
 80009ec:	f003 ff30 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a06:	f003 ff23 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <MX_GPIO_Init+0x1f4>)
 8000a20:	f003 ff16 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	@ (8000a84 <MX_GPIO_Init+0x1f4>)
 8000a42:	f003 ff05 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a5e:	f003 fef7 	bl	8004850 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020400 	.word	0x58020400
 8000a74:	58020c00 	.word	0x58020c00
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	58021800 	.word	0x58021800
 8000a84:	58020000 	.word	0x58020000

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fabe 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f818 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f7ff fefc 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f7ff fdc0 	bl	800061c <MX_DMA_Init>
  MX_ETH_Init();
 8000a9c:	f7ff fdde 	bl	800065c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000aa0:	f000 f992 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000aa4:	f000 fa80 	bl	8000fa8 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000aa8:	f7ff fda8 	bl	80005fc <systemInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(1 == getCmdReceivedFlag())
 8000aac:	f009 f98a 	bl	8009dc4 <getCmdReceivedFlag>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d1fa      	bne.n	8000aac <main+0x24>
	  {
		  debugPrint();
 8000ab6:	f009 f965 	bl	8009d84 <debugPrint>
		  setCmdReceivedFlag(0);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f009 f98e 	bl	8009ddc <setCmdReceivedFlag>
	  if(1 == getCmdReceivedFlag())
 8000ac0:	e7f4      	b.n	8000aac <main+0x24>
	...

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	@ 0x70
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	224c      	movs	r2, #76	@ 0x4c
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 fb0e 	bl	800a0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2220      	movs	r2, #32
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f009 fb08 	bl	800a0f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f004 f875 	bl	8004bd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000af4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b06:	bf00      	nop
 8000b08:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b14:	d1f8      	bne.n	8000b08 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b16:	2321      	movs	r3, #33	@ 0x21
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b1a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b30:	f240 1313 	movw	r3, #275	@ 0x113
 8000b34:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b42:	2304      	movs	r3, #4
 8000b44:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 f878 	bl	8004c48 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b5e:	f000 f821 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	233f      	movs	r3, #63	@ 0x3f
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2303      	movs	r3, #3
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b72:	2340      	movs	r3, #64	@ 0x40
 8000b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b76:	2340      	movs	r3, #64	@ 0x40
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2103      	movs	r1, #3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 fc37 	bl	80053fc <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b94:	f000 f806 	bl	8000ba4 <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3770      	adds	r7, #112	@ 0x70
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024800 	.word	0x58024800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_MspInit+0x30>)
 8000bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bbc:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_MspInit+0x30>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	58024400 	.word	0x58024400

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fa59 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <DMA1_Stream0_IRQHandler+0x10>)
 8000c4a:	f001 febb 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240002c4 	.word	0x240002c4

08000c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <USART3_IRQHandler+0x10>)
 8000c5e:	f006 fed9 	bl	8007a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000230 	.word	0x24000230

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f009 fa42 	bl	800a124 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24050000 	.word	0x24050000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	2400022c 	.word	0x2400022c
 8000cd4:	24000498 	.word	0x24000498

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b32      	ldr	r3, [pc, #200]	@ (8000da8 <SystemInit+0xd0>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a31      	ldr	r2, [pc, #196]	@ (8000da8 <SystemInit+0xd0>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cec:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <SystemInit+0xd4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d807      	bhi.n	8000d08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <SystemInit+0xd4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 030f 	bic.w	r3, r3, #15
 8000d00:	4a2a      	ldr	r2, [pc, #168]	@ (8000dac <SystemInit+0xd4>)
 8000d02:	f043 0307 	orr.w	r3, r3, #7
 8000d06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <SystemInit+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a28      	ldr	r2, [pc, #160]	@ (8000db0 <SystemInit+0xd8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d14:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <SystemInit+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <SystemInit+0xd8>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4924      	ldr	r1, [pc, #144]	@ (8000db0 <SystemInit+0xd8>)
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <SystemInit+0xdc>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <SystemInit+0xd4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d32:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <SystemInit+0xd4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 030f 	bic.w	r3, r3, #15
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <SystemInit+0xd4>)
 8000d3c:	f043 0307 	orr.w	r3, r3, #7
 8000d40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <SystemInit+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <SystemInit+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <SystemInit+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <SystemInit+0xd8>)
 8000d56:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <SystemInit+0xe0>)
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <SystemInit+0xd8>)
 8000d5c:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <SystemInit+0xe4>)
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <SystemInit+0xd8>)
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <SystemInit+0xe8>)
 8000d64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <SystemInit+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <SystemInit+0xd8>)
 8000d6e:	4a14      	ldr	r2, [pc, #80]	@ (8000dc0 <SystemInit+0xe8>)
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <SystemInit+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <SystemInit+0xd8>)
 8000d7a:	4a11      	ldr	r2, [pc, #68]	@ (8000dc0 <SystemInit+0xe8>)
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <SystemInit+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <SystemInit+0xd8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <SystemInit+0xd8>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <SystemInit+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SystemInit+0xec>)
 8000d98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	52002000 	.word	0x52002000
 8000db0:	58024400 	.word	0x58024400
 8000db4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000db8:	02020200 	.word	0x02020200
 8000dbc:	01ff0000 	.word	0x01ff0000
 8000dc0:	01010280 	.word	0x01010280
 8000dc4:	52004000 	.word	0x52004000

08000dc8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e12:	f006 fc41 	bl	8007698 <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f7ff fec2 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e24:	f008 fe71 	bl	8009b0a <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f7ff feb9 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e36:	f008 fea6 	bl	8009b86 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f7ff feb0 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e46:	f008 fe27 	bl	8009a98 <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f7ff fea8 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000230 	.word	0x24000230
 8000e5c:	40004800 	.word	0x40004800

08000e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0b8      	sub	sp, #224	@ 0xe0
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	22b8      	movs	r2, #184	@ 0xb8
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f009 f937 	bl	800a0f4 <memset>
  if(uartHandle->Instance==USART3)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a42      	ldr	r2, [pc, #264]	@ (8000f94 <HAL_UART_MspInit+0x134>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d17c      	bne.n	8000f8a <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e90:	f04f 0202 	mov.w	r2, #2
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fe34 	bl	8005b14 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eb2:	f7ff fe77 	bl	8000ba4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ebc:	4a36      	ldr	r2, [pc, #216]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec6:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a2f      	ldr	r2, [pc, #188]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <HAL_UART_MspInit+0x138>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ef2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f16:	4619      	mov	r1, r3
 8000f18:	4820      	ldr	r0, [pc, #128]	@ (8000f9c <HAL_UART_MspInit+0x13c>)
 8000f1a:	f003 fc99 	bl	8004850 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f20:	4a20      	ldr	r2, [pc, #128]	@ (8000fa4 <HAL_UART_MspInit+0x144>)
 8000f22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f26:	222d      	movs	r2, #45	@ 0x2d
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f5c:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f5e:	f000 fa0b 	bl	8001378 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000f68:	f7ff fe1c 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_UART_MspInit+0x140>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2027      	movs	r0, #39	@ 0x27
 8000f80:	f000 f9c5 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f84:	2027      	movs	r0, #39	@ 0x27
 8000f86:	f000 f9dc 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	37e0      	adds	r7, #224	@ 0xe0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	240002c4 	.word	0x240002c4
 8000fa4:	40020010 	.word	0x40020010

08000fa8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff fe8c 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f009 f8a3 	bl	800a130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fd4d 	bl	8000a88 <main>
  bx  lr
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000ffc:	0800a214 	.word	0x0800a214
  ldr r2, =_sbss
 8001000:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001004:	24000498 	.word	0x24000498

08001008 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC3_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001012:	2003      	movs	r0, #3
 8001014:	f000 f970 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001018:	f004 fba6 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_Init+0x68>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	4913      	ldr	r1, [pc, #76]	@ (8001078 <HAL_Init+0x6c>)
 800102a:	5ccb      	ldrb	r3, [r1, r3]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_Init+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_Init+0x6c>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_Init+0x70>)
 800104e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_Init+0x74>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f814 	bl	8001084 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e002      	b.n	800106c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff fda3 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58024400 	.word	0x58024400
 8001078:	0800a1c4 	.word	0x0800a1c4
 800107c:	24000004 	.word	0x24000004
 8001080:	24000000 	.word	0x24000000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_InitTick+0x60>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e021      	b.n	80010dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_InitTick+0x64>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_InitTick+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f955 	bl	800135e <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f91f 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_InitTick+0x68>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2400000c 	.word	0x2400000c
 80010e8:	24000000 	.word	0x24000000
 80010ec:	24000008 	.word	0x24000008

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2400000c 	.word	0x2400000c
 8001114:	2400033c 	.word	0x2400033c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2400033c 	.word	0x2400033c

08001130 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001140:	4904      	ldr	r1, [pc, #16]	@ (8001154 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	58000400 	.word	0x58000400

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	05fa0000 	.word	0x05fa0000

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff40 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff33 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa4 	bl	80012b4 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff feca 	bl	8001118 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e312      	b.n	80019b6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a66      	ldr	r2, [pc, #408]	@ (8001530 <HAL_DMA_Init+0x1b8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d04a      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a65      	ldr	r2, [pc, #404]	@ (8001534 <HAL_DMA_Init+0x1bc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d045      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a63      	ldr	r2, [pc, #396]	@ (8001538 <HAL_DMA_Init+0x1c0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d040      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a62      	ldr	r2, [pc, #392]	@ (800153c <HAL_DMA_Init+0x1c4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d03b      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a60      	ldr	r2, [pc, #384]	@ (8001540 <HAL_DMA_Init+0x1c8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d036      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001544 <HAL_DMA_Init+0x1cc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d031      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001548 <HAL_DMA_Init+0x1d0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02c      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a5c      	ldr	r2, [pc, #368]	@ (800154c <HAL_DMA_Init+0x1d4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d027      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001550 <HAL_DMA_Init+0x1d8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d022      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a59      	ldr	r2, [pc, #356]	@ (8001554 <HAL_DMA_Init+0x1dc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d01d      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a57      	ldr	r2, [pc, #348]	@ (8001558 <HAL_DMA_Init+0x1e0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d018      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a56      	ldr	r2, [pc, #344]	@ (800155c <HAL_DMA_Init+0x1e4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a54      	ldr	r2, [pc, #336]	@ (8001560 <HAL_DMA_Init+0x1e8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00e      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a53      	ldr	r2, [pc, #332]	@ (8001564 <HAL_DMA_Init+0x1ec>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d009      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a51      	ldr	r2, [pc, #324]	@ (8001568 <HAL_DMA_Init+0x1f0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d004      	beq.n	8001430 <HAL_DMA_Init+0xb8>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a50      	ldr	r2, [pc, #320]	@ (800156c <HAL_DMA_Init+0x1f4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Init+0xbc>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_DMA_Init+0xbe>
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 813c 	beq.w	80016b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a37      	ldr	r2, [pc, #220]	@ (8001530 <HAL_DMA_Init+0x1b8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d04a      	beq.n	80014ec <HAL_DMA_Init+0x174>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a36      	ldr	r2, [pc, #216]	@ (8001534 <HAL_DMA_Init+0x1bc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d045      	beq.n	80014ec <HAL_DMA_Init+0x174>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a34      	ldr	r2, [pc, #208]	@ (8001538 <HAL_DMA_Init+0x1c0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d040      	beq.n	80014ec <HAL_DMA_Init+0x174>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a33      	ldr	r2, [pc, #204]	@ (800153c <HAL_DMA_Init+0x1c4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d03b      	beq.n	80014ec <HAL_DMA_Init+0x174>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a31      	ldr	r2, [pc, #196]	@ (8001540 <HAL_DMA_Init+0x1c8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d036      	beq.n	80014ec <HAL_DMA_Init+0x174>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a30      	ldr	r2, [pc, #192]	@ (8001544 <HAL_DMA_Init+0x1cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d031      	beq.n	80014ec <HAL_DMA_Init+0x174>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2e      	ldr	r2, [pc, #184]	@ (8001548 <HAL_DMA_Init+0x1d0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d02c      	beq.n	80014ec <HAL_DMA_Init+0x174>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2d      	ldr	r2, [pc, #180]	@ (800154c <HAL_DMA_Init+0x1d4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d027      	beq.n	80014ec <HAL_DMA_Init+0x174>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001550 <HAL_DMA_Init+0x1d8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d022      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <HAL_DMA_Init+0x1dc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d01d      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a28      	ldr	r2, [pc, #160]	@ (8001558 <HAL_DMA_Init+0x1e0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d018      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a27      	ldr	r2, [pc, #156]	@ (800155c <HAL_DMA_Init+0x1e4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d013      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <HAL_DMA_Init+0x1e8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00e      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <HAL_DMA_Init+0x1ec>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d009      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a22      	ldr	r2, [pc, #136]	@ (8001568 <HAL_DMA_Init+0x1f0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_DMA_Init+0x174>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_DMA_Init+0x1f4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d108      	bne.n	80014fe <HAL_DMA_Init+0x186>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e007      	b.n	800150e <HAL_DMA_Init+0x196>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800150e:	e02f      	b.n	8001570 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001510:	f7ff fe02 	bl	8001118 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b05      	cmp	r3, #5
 800151c:	d928      	bls.n	8001570 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e242      	b.n	80019b6 <HAL_DMA_Init+0x63e>
 8001530:	40020010 	.word	0x40020010
 8001534:	40020028 	.word	0x40020028
 8001538:	40020040 	.word	0x40020040
 800153c:	40020058 	.word	0x40020058
 8001540:	40020070 	.word	0x40020070
 8001544:	40020088 	.word	0x40020088
 8001548:	400200a0 	.word	0x400200a0
 800154c:	400200b8 	.word	0x400200b8
 8001550:	40020410 	.word	0x40020410
 8001554:	40020428 	.word	0x40020428
 8001558:	40020440 	.word	0x40020440
 800155c:	40020458 	.word	0x40020458
 8001560:	40020470 	.word	0x40020470
 8001564:	40020488 	.word	0x40020488
 8001568:	400204a0 	.word	0x400204a0
 800156c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1c8      	bne.n	8001510 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4b83      	ldr	r3, [pc, #524]	@ (8001798 <HAL_DMA_Init+0x420>)
 800158a:	4013      	ands	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001596:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d107      	bne.n	80015d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	4313      	orrs	r3, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b28      	cmp	r3, #40	@ 0x28
 80015da:	d903      	bls.n	80015e4 <HAL_DMA_Init+0x26c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80015e2:	d91f      	bls.n	8001624 <HAL_DMA_Init+0x2ac>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80015ea:	d903      	bls.n	80015f4 <HAL_DMA_Init+0x27c>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b42      	cmp	r3, #66	@ 0x42
 80015f2:	d917      	bls.n	8001624 <HAL_DMA_Init+0x2ac>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b46      	cmp	r3, #70	@ 0x46
 80015fa:	d903      	bls.n	8001604 <HAL_DMA_Init+0x28c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b48      	cmp	r3, #72	@ 0x48
 8001602:	d90f      	bls.n	8001624 <HAL_DMA_Init+0x2ac>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b4e      	cmp	r3, #78	@ 0x4e
 800160a:	d903      	bls.n	8001614 <HAL_DMA_Init+0x29c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b52      	cmp	r3, #82	@ 0x52
 8001612:	d907      	bls.n	8001624 <HAL_DMA_Init+0x2ac>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b73      	cmp	r3, #115	@ 0x73
 800161a:	d905      	bls.n	8001628 <HAL_DMA_Init+0x2b0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b77      	cmp	r3, #119	@ 0x77
 8001622:	d801      	bhi.n	8001628 <HAL_DMA_Init+0x2b0>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_DMA_Init+0x2b2>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001634:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f023 0307 	bic.w	r3, r3, #7
 800164c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	2b04      	cmp	r3, #4
 800165e:	d117      	bne.n	8001690 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	4313      	orrs	r3, r2
 8001668:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00e      	beq.n	8001690 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f002 fb2e 	bl	8003cd4 <DMA_CheckFifoParam>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2240      	movs	r2, #64	@ 0x40
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e192      	b.n	80019b6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f002 fa69 	bl	8003b70 <DMA_CalcBaseAndBitshift>
 800169e:	4603      	mov	r3, r0
 80016a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	223f      	movs	r2, #63	@ 0x3f
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	e0c8      	b.n	8001846 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a38      	ldr	r2, [pc, #224]	@ (800179c <HAL_DMA_Init+0x424>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d022      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a37      	ldr	r2, [pc, #220]	@ (80017a0 <HAL_DMA_Init+0x428>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d01d      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a35      	ldr	r2, [pc, #212]	@ (80017a4 <HAL_DMA_Init+0x42c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d018      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a34      	ldr	r2, [pc, #208]	@ (80017a8 <HAL_DMA_Init+0x430>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d013      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a32      	ldr	r2, [pc, #200]	@ (80017ac <HAL_DMA_Init+0x434>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00e      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a31      	ldr	r2, [pc, #196]	@ (80017b0 <HAL_DMA_Init+0x438>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d009      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2f      	ldr	r2, [pc, #188]	@ (80017b4 <HAL_DMA_Init+0x43c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d004      	beq.n	8001704 <HAL_DMA_Init+0x38c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2e      	ldr	r2, [pc, #184]	@ (80017b8 <HAL_DMA_Init+0x440>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0x390>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_DMA_Init+0x392>
 8001708:	2300      	movs	r3, #0
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8092 	beq.w	8001834 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_DMA_Init+0x424>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d021      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a20      	ldr	r2, [pc, #128]	@ (80017a0 <HAL_DMA_Init+0x428>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d01c      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_DMA_Init+0x42c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d017      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_DMA_Init+0x430>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d012      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <HAL_DMA_Init+0x434>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <HAL_DMA_Init+0x438>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d008      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <HAL_DMA_Init+0x43c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_DMA_Init+0x3e6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <HAL_DMA_Init+0x440>)
 800175c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2202      	movs	r2, #2
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_DMA_Init+0x444>)
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b40      	cmp	r3, #64	@ 0x40
 8001784:	d01c      	beq.n	80017c0 <HAL_DMA_Init+0x448>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b80      	cmp	r3, #128	@ 0x80
 800178c:	d102      	bne.n	8001794 <HAL_DMA_Init+0x41c>
 800178e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001792:	e016      	b.n	80017c2 <HAL_DMA_Init+0x44a>
 8001794:	2300      	movs	r3, #0
 8001796:	e014      	b.n	80017c2 <HAL_DMA_Init+0x44a>
 8001798:	fe10803f 	.word	0xfe10803f
 800179c:	58025408 	.word	0x58025408
 80017a0:	5802541c 	.word	0x5802541c
 80017a4:	58025430 	.word	0x58025430
 80017a8:	58025444 	.word	0x58025444
 80017ac:	58025458 	.word	0x58025458
 80017b0:	5802546c 	.word	0x5802546c
 80017b4:	58025480 	.word	0x58025480
 80017b8:	58025494 	.word	0x58025494
 80017bc:	fffe000f 	.word	0xfffe000f
 80017c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68d2      	ldr	r2, [r2, #12]
 80017c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80017f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_DMA_Init+0x648>)
 8001808:	4413      	add	r3, r2
 800180a:	4a6e      	ldr	r2, [pc, #440]	@ (80019c4 <HAL_DMA_Init+0x64c>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	009a      	lsls	r2, r3, #2
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f002 f9a9 	bl	8003b70 <DMA_CalcBaseAndBitshift>
 800181e:	4603      	mov	r3, r0
 8001820:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	e008      	b.n	8001846 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2240      	movs	r2, #64	@ 0x40
 8001838:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0b7      	b.n	80019b6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5f      	ldr	r2, [pc, #380]	@ (80019c8 <HAL_DMA_Init+0x650>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d072      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5d      	ldr	r2, [pc, #372]	@ (80019cc <HAL_DMA_Init+0x654>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d06d      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5c      	ldr	r2, [pc, #368]	@ (80019d0 <HAL_DMA_Init+0x658>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d068      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a5a      	ldr	r2, [pc, #360]	@ (80019d4 <HAL_DMA_Init+0x65c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d063      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a59      	ldr	r2, [pc, #356]	@ (80019d8 <HAL_DMA_Init+0x660>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d05e      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a57      	ldr	r2, [pc, #348]	@ (80019dc <HAL_DMA_Init+0x664>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d059      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a56      	ldr	r2, [pc, #344]	@ (80019e0 <HAL_DMA_Init+0x668>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d054      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a54      	ldr	r2, [pc, #336]	@ (80019e4 <HAL_DMA_Init+0x66c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d04f      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a53      	ldr	r2, [pc, #332]	@ (80019e8 <HAL_DMA_Init+0x670>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04a      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a51      	ldr	r2, [pc, #324]	@ (80019ec <HAL_DMA_Init+0x674>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d045      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a50      	ldr	r2, [pc, #320]	@ (80019f0 <HAL_DMA_Init+0x678>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d040      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4e      	ldr	r2, [pc, #312]	@ (80019f4 <HAL_DMA_Init+0x67c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d03b      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	@ (80019f8 <HAL_DMA_Init+0x680>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d036      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_DMA_Init+0x684>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d031      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001a00 <HAL_DMA_Init+0x688>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d02c      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a48      	ldr	r2, [pc, #288]	@ (8001a04 <HAL_DMA_Init+0x68c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d027      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a47      	ldr	r2, [pc, #284]	@ (8001a08 <HAL_DMA_Init+0x690>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d022      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a45      	ldr	r2, [pc, #276]	@ (8001a0c <HAL_DMA_Init+0x694>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01d      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a44      	ldr	r2, [pc, #272]	@ (8001a10 <HAL_DMA_Init+0x698>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d018      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a42      	ldr	r2, [pc, #264]	@ (8001a14 <HAL_DMA_Init+0x69c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_DMA_Init+0x6a0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00e      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3f      	ldr	r2, [pc, #252]	@ (8001a1c <HAL_DMA_Init+0x6a4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d009      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <HAL_DMA_Init+0x6a8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d004      	beq.n	8001936 <HAL_DMA_Init+0x5be>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <HAL_DMA_Init+0x6ac>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_DMA_Init+0x5c2>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_DMA_Init+0x5c4>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d032      	beq.n	80019a6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f002 fa43 	bl	8003dcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b80      	cmp	r3, #128	@ 0x80
 800194c:	d102      	bne.n	8001954 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001968:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d010      	beq.n	8001994 <HAL_DMA_Init+0x61c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d80c      	bhi.n	8001994 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f002 fac0 	bl	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e008      	b.n	80019a6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	a7fdabf8 	.word	0xa7fdabf8
 80019c4:	cccccccd 	.word	0xcccccccd
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
 8001a08:	58025408 	.word	0x58025408
 8001a0c:	5802541c 	.word	0x5802541c
 8001a10:	58025430 	.word	0x58025430
 8001a14:	58025444 	.word	0x58025444
 8001a18:	58025458 	.word	0x58025458
 8001a1c:	5802546c 	.word	0x5802546c
 8001a20:	58025480 	.word	0x58025480
 8001a24:	58025494 	.word	0x58025494

08001a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e226      	b.n	8001e92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Start_IT+0x2a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e21f      	b.n	8001e92 <HAL_DMA_Start_IT+0x46a>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 820a 	bne.w	8001e7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a68      	ldr	r2, [pc, #416]	@ (8001c1c <HAL_DMA_Start_IT+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04a      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a66      	ldr	r2, [pc, #408]	@ (8001c20 <HAL_DMA_Start_IT+0x1f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d045      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a65      	ldr	r2, [pc, #404]	@ (8001c24 <HAL_DMA_Start_IT+0x1fc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d040      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a63      	ldr	r2, [pc, #396]	@ (8001c28 <HAL_DMA_Start_IT+0x200>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d03b      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a62      	ldr	r2, [pc, #392]	@ (8001c2c <HAL_DMA_Start_IT+0x204>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d036      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a60      	ldr	r2, [pc, #384]	@ (8001c30 <HAL_DMA_Start_IT+0x208>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c34 <HAL_DMA_Start_IT+0x20c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d02c      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <HAL_DMA_Start_IT+0x210>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d027      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a5c      	ldr	r2, [pc, #368]	@ (8001c3c <HAL_DMA_Start_IT+0x214>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d022      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HAL_DMA_Start_IT+0x218>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01d      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a59      	ldr	r2, [pc, #356]	@ (8001c44 <HAL_DMA_Start_IT+0x21c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d018      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_DMA_Start_IT+0x220>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_DMA_Start_IT+0x224>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00e      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a54      	ldr	r2, [pc, #336]	@ (8001c50 <HAL_DMA_Start_IT+0x228>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a53      	ldr	r2, [pc, #332]	@ (8001c54 <HAL_DMA_Start_IT+0x22c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d004      	beq.n	8001b16 <HAL_DMA_Start_IT+0xee>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a51      	ldr	r2, [pc, #324]	@ (8001c58 <HAL_DMA_Start_IT+0x230>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d108      	bne.n	8001b28 <HAL_DMA_Start_IT+0x100>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e007      	b.n	8001b38 <HAL_DMA_Start_IT+0x110>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f001 fe6a 	bl	8003818 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a34      	ldr	r2, [pc, #208]	@ (8001c1c <HAL_DMA_Start_IT+0x1f4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d04a      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a33      	ldr	r2, [pc, #204]	@ (8001c20 <HAL_DMA_Start_IT+0x1f8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d045      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <HAL_DMA_Start_IT+0x1fc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d040      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <HAL_DMA_Start_IT+0x200>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d03b      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2e      	ldr	r2, [pc, #184]	@ (8001c2c <HAL_DMA_Start_IT+0x204>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d036      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c30 <HAL_DMA_Start_IT+0x208>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d031      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <HAL_DMA_Start_IT+0x20c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02c      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c38 <HAL_DMA_Start_IT+0x210>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d027      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a28      	ldr	r2, [pc, #160]	@ (8001c3c <HAL_DMA_Start_IT+0x214>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a27      	ldr	r2, [pc, #156]	@ (8001c40 <HAL_DMA_Start_IT+0x218>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01d      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <HAL_DMA_Start_IT+0x21c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a24      	ldr	r2, [pc, #144]	@ (8001c48 <HAL_DMA_Start_IT+0x220>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a22      	ldr	r2, [pc, #136]	@ (8001c4c <HAL_DMA_Start_IT+0x224>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_DMA_Start_IT+0x228>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_DMA_Start_IT+0x22c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Start_IT+0x1bc>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_DMA_Start_IT+0x230>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Start_IT+0x1c0>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_DMA_Start_IT+0x1c2>
 8001be8:	2300      	movs	r3, #0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d036      	beq.n	8001c5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 021e 	bic.w	r2, r3, #30
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0216 	orr.w	r2, r2, #22
 8001c00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03e      	beq.n	8001c88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0208 	orr.w	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e035      	b.n	8001c88 <HAL_DMA_Start_IT+0x260>
 8001c1c:	40020010 	.word	0x40020010
 8001c20:	40020028 	.word	0x40020028
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	40020070 	.word	0x40020070
 8001c30:	40020088 	.word	0x40020088
 8001c34:	400200a0 	.word	0x400200a0
 8001c38:	400200b8 	.word	0x400200b8
 8001c3c:	40020410 	.word	0x40020410
 8001c40:	40020428 	.word	0x40020428
 8001c44:	40020440 	.word	0x40020440
 8001c48:	40020458 	.word	0x40020458
 8001c4c:	40020470 	.word	0x40020470
 8001c50:	40020488 	.word	0x40020488
 8001c54:	400204a0 	.word	0x400204a0
 8001c58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 020e 	bic.w	r2, r3, #14
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 020a 	orr.w	r2, r2, #10
 8001c6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0204 	orr.w	r2, r2, #4
 8001c86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a83      	ldr	r2, [pc, #524]	@ (8001e9c <HAL_DMA_Start_IT+0x474>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d072      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a82      	ldr	r2, [pc, #520]	@ (8001ea0 <HAL_DMA_Start_IT+0x478>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d06d      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a80      	ldr	r2, [pc, #512]	@ (8001ea4 <HAL_DMA_Start_IT+0x47c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d068      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7f      	ldr	r2, [pc, #508]	@ (8001ea8 <HAL_DMA_Start_IT+0x480>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d063      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8001eac <HAL_DMA_Start_IT+0x484>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d05e      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <HAL_DMA_Start_IT+0x488>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d059      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb4 <HAL_DMA_Start_IT+0x48c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d054      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a79      	ldr	r2, [pc, #484]	@ (8001eb8 <HAL_DMA_Start_IT+0x490>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04f      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a77      	ldr	r2, [pc, #476]	@ (8001ebc <HAL_DMA_Start_IT+0x494>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d04a      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a76      	ldr	r2, [pc, #472]	@ (8001ec0 <HAL_DMA_Start_IT+0x498>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d045      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a74      	ldr	r2, [pc, #464]	@ (8001ec4 <HAL_DMA_Start_IT+0x49c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d040      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a73      	ldr	r2, [pc, #460]	@ (8001ec8 <HAL_DMA_Start_IT+0x4a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d03b      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a71      	ldr	r2, [pc, #452]	@ (8001ecc <HAL_DMA_Start_IT+0x4a4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d036      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a70      	ldr	r2, [pc, #448]	@ (8001ed0 <HAL_DMA_Start_IT+0x4a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d031      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_DMA_Start_IT+0x4ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02c      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed8 <HAL_DMA_Start_IT+0x4b0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d027      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001edc <HAL_DMA_Start_IT+0x4b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d022      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee0 <HAL_DMA_Start_IT+0x4b8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d01d      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	@ (8001ee4 <HAL_DMA_Start_IT+0x4bc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d018      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a67      	ldr	r2, [pc, #412]	@ (8001ee8 <HAL_DMA_Start_IT+0x4c0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a65      	ldr	r2, [pc, #404]	@ (8001eec <HAL_DMA_Start_IT+0x4c4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00e      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a64      	ldr	r2, [pc, #400]	@ (8001ef0 <HAL_DMA_Start_IT+0x4c8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d009      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a62      	ldr	r2, [pc, #392]	@ (8001ef4 <HAL_DMA_Start_IT+0x4cc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d004      	beq.n	8001d78 <HAL_DMA_Start_IT+0x350>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a61      	ldr	r2, [pc, #388]	@ (8001ef8 <HAL_DMA_Start_IT+0x4d0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_DMA_Start_IT+0x354>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_Start_IT+0x356>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01a      	beq.n	8001db8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001db6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a37      	ldr	r2, [pc, #220]	@ (8001e9c <HAL_DMA_Start_IT+0x474>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d04a      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a36      	ldr	r2, [pc, #216]	@ (8001ea0 <HAL_DMA_Start_IT+0x478>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d045      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a34      	ldr	r2, [pc, #208]	@ (8001ea4 <HAL_DMA_Start_IT+0x47c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d040      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <HAL_DMA_Start_IT+0x480>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d03b      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a31      	ldr	r2, [pc, #196]	@ (8001eac <HAL_DMA_Start_IT+0x484>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d036      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a30      	ldr	r2, [pc, #192]	@ (8001eb0 <HAL_DMA_Start_IT+0x488>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d031      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <HAL_DMA_Start_IT+0x48c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d02c      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <HAL_DMA_Start_IT+0x490>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d027      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ebc <HAL_DMA_Start_IT+0x494>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d022      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec0 <HAL_DMA_Start_IT+0x498>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01d      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <HAL_DMA_Start_IT+0x49c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <HAL_DMA_Start_IT+0x4a0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <HAL_DMA_Start_IT+0x4a4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <HAL_DMA_Start_IT+0x4a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <HAL_DMA_Start_IT+0x4ac>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_DMA_Start_IT+0x430>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <HAL_DMA_Start_IT+0x4b0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d108      	bne.n	8001e6a <HAL_DMA_Start_IT+0x442>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e012      	b.n	8001e90 <HAL_DMA_Start_IT+0x468>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e009      	b.n	8001e90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40020010 	.word	0x40020010
 8001ea0:	40020028 	.word	0x40020028
 8001ea4:	40020040 	.word	0x40020040
 8001ea8:	40020058 	.word	0x40020058
 8001eac:	40020070 	.word	0x40020070
 8001eb0:	40020088 	.word	0x40020088
 8001eb4:	400200a0 	.word	0x400200a0
 8001eb8:	400200b8 	.word	0x400200b8
 8001ebc:	40020410 	.word	0x40020410
 8001ec0:	40020428 	.word	0x40020428
 8001ec4:	40020440 	.word	0x40020440
 8001ec8:	40020458 	.word	0x40020458
 8001ecc:	40020470 	.word	0x40020470
 8001ed0:	40020488 	.word	0x40020488
 8001ed4:	400204a0 	.word	0x400204a0
 8001ed8:	400204b8 	.word	0x400204b8
 8001edc:	58025408 	.word	0x58025408
 8001ee0:	5802541c 	.word	0x5802541c
 8001ee4:	58025430 	.word	0x58025430
 8001ee8:	58025444 	.word	0x58025444
 8001eec:	58025458 	.word	0x58025458
 8001ef0:	5802546c 	.word	0x5802546c
 8001ef4:	58025480 	.word	0x58025480
 8001ef8:	58025494 	.word	0x58025494

08001efc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff f908 	bl	8001118 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e2dc      	b.n	80024ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d008      	beq.n	8001f32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e2cd      	b.n	80024ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a76      	ldr	r2, [pc, #472]	@ (8002110 <HAL_DMA_Abort+0x214>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d04a      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a74      	ldr	r2, [pc, #464]	@ (8002114 <HAL_DMA_Abort+0x218>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d045      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a73      	ldr	r2, [pc, #460]	@ (8002118 <HAL_DMA_Abort+0x21c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d040      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a71      	ldr	r2, [pc, #452]	@ (800211c <HAL_DMA_Abort+0x220>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d03b      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a70      	ldr	r2, [pc, #448]	@ (8002120 <HAL_DMA_Abort+0x224>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d036      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_DMA_Abort+0x228>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d031      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6d      	ldr	r2, [pc, #436]	@ (8002128 <HAL_DMA_Abort+0x22c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d02c      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6b      	ldr	r2, [pc, #428]	@ (800212c <HAL_DMA_Abort+0x230>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_DMA_Abort+0x234>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a68      	ldr	r2, [pc, #416]	@ (8002134 <HAL_DMA_Abort+0x238>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01d      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a67      	ldr	r2, [pc, #412]	@ (8002138 <HAL_DMA_Abort+0x23c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a65      	ldr	r2, [pc, #404]	@ (800213c <HAL_DMA_Abort+0x240>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a64      	ldr	r2, [pc, #400]	@ (8002140 <HAL_DMA_Abort+0x244>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00e      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a62      	ldr	r2, [pc, #392]	@ (8002144 <HAL_DMA_Abort+0x248>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d009      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a61      	ldr	r2, [pc, #388]	@ (8002148 <HAL_DMA_Abort+0x24c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_DMA_Abort+0xd6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5f      	ldr	r2, [pc, #380]	@ (800214c <HAL_DMA_Abort+0x250>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Abort+0xda>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_DMA_Abort+0xdc>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 021e 	bic.w	r2, r2, #30
 8001fea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ffa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e00a      	b.n	800201a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020e 	bic.w	r2, r2, #14
 8002012:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3c      	ldr	r2, [pc, #240]	@ (8002110 <HAL_DMA_Abort+0x214>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d072      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3a      	ldr	r2, [pc, #232]	@ (8002114 <HAL_DMA_Abort+0x218>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d06d      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a39      	ldr	r2, [pc, #228]	@ (8002118 <HAL_DMA_Abort+0x21c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d068      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a37      	ldr	r2, [pc, #220]	@ (800211c <HAL_DMA_Abort+0x220>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d063      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a36      	ldr	r2, [pc, #216]	@ (8002120 <HAL_DMA_Abort+0x224>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d05e      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a34      	ldr	r2, [pc, #208]	@ (8002124 <HAL_DMA_Abort+0x228>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d059      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a33      	ldr	r2, [pc, #204]	@ (8002128 <HAL_DMA_Abort+0x22c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d054      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a31      	ldr	r2, [pc, #196]	@ (800212c <HAL_DMA_Abort+0x230>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04f      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a30      	ldr	r2, [pc, #192]	@ (8002130 <HAL_DMA_Abort+0x234>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04a      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2e      	ldr	r2, [pc, #184]	@ (8002134 <HAL_DMA_Abort+0x238>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d045      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <HAL_DMA_Abort+0x23c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d040      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2b      	ldr	r2, [pc, #172]	@ (800213c <HAL_DMA_Abort+0x240>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d03b      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2a      	ldr	r2, [pc, #168]	@ (8002140 <HAL_DMA_Abort+0x244>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d036      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a28      	ldr	r2, [pc, #160]	@ (8002144 <HAL_DMA_Abort+0x248>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <HAL_DMA_Abort+0x24c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d02c      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	@ (800214c <HAL_DMA_Abort+0x250>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d027      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <HAL_DMA_Abort+0x254>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a22      	ldr	r2, [pc, #136]	@ (8002154 <HAL_DMA_Abort+0x258>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01d      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a21      	ldr	r2, [pc, #132]	@ (8002158 <HAL_DMA_Abort+0x25c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d018      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1f      	ldr	r2, [pc, #124]	@ (800215c <HAL_DMA_Abort+0x260>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <HAL_DMA_Abort+0x264>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002164 <HAL_DMA_Abort+0x268>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002168 <HAL_DMA_Abort+0x26c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <HAL_DMA_Abort+0x20e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_DMA_Abort+0x270>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d132      	bne.n	8002170 <HAL_DMA_Abort+0x274>
 800210a:	2301      	movs	r3, #1
 800210c:	e031      	b.n	8002172 <HAL_DMA_Abort+0x276>
 800210e:	bf00      	nop
 8002110:	40020010 	.word	0x40020010
 8002114:	40020028 	.word	0x40020028
 8002118:	40020040 	.word	0x40020040
 800211c:	40020058 	.word	0x40020058
 8002120:	40020070 	.word	0x40020070
 8002124:	40020088 	.word	0x40020088
 8002128:	400200a0 	.word	0x400200a0
 800212c:	400200b8 	.word	0x400200b8
 8002130:	40020410 	.word	0x40020410
 8002134:	40020428 	.word	0x40020428
 8002138:	40020440 	.word	0x40020440
 800213c:	40020458 	.word	0x40020458
 8002140:	40020470 	.word	0x40020470
 8002144:	40020488 	.word	0x40020488
 8002148:	400204a0 	.word	0x400204a0
 800214c:	400204b8 	.word	0x400204b8
 8002150:	58025408 	.word	0x58025408
 8002154:	5802541c 	.word	0x5802541c
 8002158:	58025430 	.word	0x58025430
 800215c:	58025444 	.word	0x58025444
 8002160:	58025458 	.word	0x58025458
 8002164:	5802546c 	.word	0x5802546c
 8002168:	58025480 	.word	0x58025480
 800216c:	58025494 	.word	0x58025494
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002184:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6d      	ldr	r2, [pc, #436]	@ (8002340 <HAL_DMA_Abort+0x444>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d04a      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6b      	ldr	r2, [pc, #428]	@ (8002344 <HAL_DMA_Abort+0x448>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d045      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6a      	ldr	r2, [pc, #424]	@ (8002348 <HAL_DMA_Abort+0x44c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d040      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a68      	ldr	r2, [pc, #416]	@ (800234c <HAL_DMA_Abort+0x450>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d03b      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a67      	ldr	r2, [pc, #412]	@ (8002350 <HAL_DMA_Abort+0x454>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d036      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_DMA_Abort+0x458>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d031      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a64      	ldr	r2, [pc, #400]	@ (8002358 <HAL_DMA_Abort+0x45c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d02c      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a62      	ldr	r2, [pc, #392]	@ (800235c <HAL_DMA_Abort+0x460>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d027      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a61      	ldr	r2, [pc, #388]	@ (8002360 <HAL_DMA_Abort+0x464>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002364 <HAL_DMA_Abort+0x468>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01d      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002368 <HAL_DMA_Abort+0x46c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d018      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_DMA_Abort+0x470>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a5b      	ldr	r2, [pc, #364]	@ (8002370 <HAL_DMA_Abort+0x474>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00e      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a59      	ldr	r2, [pc, #356]	@ (8002374 <HAL_DMA_Abort+0x478>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a58      	ldr	r2, [pc, #352]	@ (8002378 <HAL_DMA_Abort+0x47c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_DMA_Abort+0x32a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a56      	ldr	r2, [pc, #344]	@ (800237c <HAL_DMA_Abort+0x480>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d108      	bne.n	8002238 <HAL_DMA_Abort+0x33c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e007      	b.n	8002248 <HAL_DMA_Abort+0x34c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002248:	e013      	b.n	8002272 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224a:	f7fe ff65 	bl	8001118 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b05      	cmp	r3, #5
 8002256:	d90c      	bls.n	8002272 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e12d      	b.n	80024ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1e5      	bne.n	800224a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <HAL_DMA_Abort+0x444>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04a      	beq.n	800231e <HAL_DMA_Abort+0x422>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_DMA_Abort+0x448>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d045      	beq.n	800231e <HAL_DMA_Abort+0x422>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2c      	ldr	r2, [pc, #176]	@ (8002348 <HAL_DMA_Abort+0x44c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d040      	beq.n	800231e <HAL_DMA_Abort+0x422>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_DMA_Abort+0x450>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d03b      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a29      	ldr	r2, [pc, #164]	@ (8002350 <HAL_DMA_Abort+0x454>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d036      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <HAL_DMA_Abort+0x458>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <HAL_DMA_Abort+0x45c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d02c      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a24      	ldr	r2, [pc, #144]	@ (800235c <HAL_DMA_Abort+0x460>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d027      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a23      	ldr	r2, [pc, #140]	@ (8002360 <HAL_DMA_Abort+0x464>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <HAL_DMA_Abort+0x468>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01d      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_DMA_Abort+0x46c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d018      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <HAL_DMA_Abort+0x470>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_DMA_Abort+0x422>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <HAL_DMA_Abort+0x474>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Abort+0x422>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_DMA_Abort+0x478>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_DMA_Abort+0x422>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1a      	ldr	r2, [pc, #104]	@ (8002378 <HAL_DMA_Abort+0x47c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Abort+0x422>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a18      	ldr	r2, [pc, #96]	@ (800237c <HAL_DMA_Abort+0x480>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_DMA_Abort+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_DMA_Abort+0x428>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02b      	beq.n	8002380 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	223f      	movs	r2, #63	@ 0x3f
 8002338:	409a      	lsls	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e02a      	b.n	8002396 <HAL_DMA_Abort+0x49a>
 8002340:	40020010 	.word	0x40020010
 8002344:	40020028 	.word	0x40020028
 8002348:	40020040 	.word	0x40020040
 800234c:	40020058 	.word	0x40020058
 8002350:	40020070 	.word	0x40020070
 8002354:	40020088 	.word	0x40020088
 8002358:	400200a0 	.word	0x400200a0
 800235c:	400200b8 	.word	0x400200b8
 8002360:	40020410 	.word	0x40020410
 8002364:	40020428 	.word	0x40020428
 8002368:	40020440 	.word	0x40020440
 800236c:	40020458 	.word	0x40020458
 8002370:	40020470 	.word	0x40020470
 8002374:	40020488 	.word	0x40020488
 8002378:	400204a0 	.word	0x400204a0
 800237c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2201      	movs	r2, #1
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4f      	ldr	r2, [pc, #316]	@ (80024d8 <HAL_DMA_Abort+0x5dc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d072      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	@ (80024dc <HAL_DMA_Abort+0x5e0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d06d      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4c      	ldr	r2, [pc, #304]	@ (80024e0 <HAL_DMA_Abort+0x5e4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d068      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <HAL_DMA_Abort+0x5e8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d063      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a49      	ldr	r2, [pc, #292]	@ (80024e8 <HAL_DMA_Abort+0x5ec>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d05e      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a47      	ldr	r2, [pc, #284]	@ (80024ec <HAL_DMA_Abort+0x5f0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d059      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <HAL_DMA_Abort+0x5f4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d054      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a44      	ldr	r2, [pc, #272]	@ (80024f4 <HAL_DMA_Abort+0x5f8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d04f      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a43      	ldr	r2, [pc, #268]	@ (80024f8 <HAL_DMA_Abort+0x5fc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d04a      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a41      	ldr	r2, [pc, #260]	@ (80024fc <HAL_DMA_Abort+0x600>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d045      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a40      	ldr	r2, [pc, #256]	@ (8002500 <HAL_DMA_Abort+0x604>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d040      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3e      	ldr	r2, [pc, #248]	@ (8002504 <HAL_DMA_Abort+0x608>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d03b      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3d      	ldr	r2, [pc, #244]	@ (8002508 <HAL_DMA_Abort+0x60c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d036      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <HAL_DMA_Abort+0x610>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d031      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <HAL_DMA_Abort+0x614>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d02c      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a38      	ldr	r2, [pc, #224]	@ (8002514 <HAL_DMA_Abort+0x618>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d027      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a37      	ldr	r2, [pc, #220]	@ (8002518 <HAL_DMA_Abort+0x61c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a35      	ldr	r2, [pc, #212]	@ (800251c <HAL_DMA_Abort+0x620>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01d      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a34      	ldr	r2, [pc, #208]	@ (8002520 <HAL_DMA_Abort+0x624>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d018      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <HAL_DMA_Abort+0x628>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <HAL_DMA_Abort+0x62c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00e      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <HAL_DMA_Abort+0x630>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2e      	ldr	r2, [pc, #184]	@ (8002530 <HAL_DMA_Abort+0x634>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_DMA_Abort+0x58a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <HAL_DMA_Abort+0x638>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_DMA_Abort+0x58e>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_DMA_Abort+0x590>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d015      	beq.n	80024bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002498:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020010 	.word	0x40020010
 80024dc:	40020028 	.word	0x40020028
 80024e0:	40020040 	.word	0x40020040
 80024e4:	40020058 	.word	0x40020058
 80024e8:	40020070 	.word	0x40020070
 80024ec:	40020088 	.word	0x40020088
 80024f0:	400200a0 	.word	0x400200a0
 80024f4:	400200b8 	.word	0x400200b8
 80024f8:	40020410 	.word	0x40020410
 80024fc:	40020428 	.word	0x40020428
 8002500:	40020440 	.word	0x40020440
 8002504:	40020458 	.word	0x40020458
 8002508:	40020470 	.word	0x40020470
 800250c:	40020488 	.word	0x40020488
 8002510:	400204a0 	.word	0x400204a0
 8002514:	400204b8 	.word	0x400204b8
 8002518:	58025408 	.word	0x58025408
 800251c:	5802541c 	.word	0x5802541c
 8002520:	58025430 	.word	0x58025430
 8002524:	58025444 	.word	0x58025444
 8002528:	58025458 	.word	0x58025458
 800252c:	5802546c 	.word	0x5802546c
 8002530:	58025480 	.word	0x58025480
 8002534:	58025494 	.word	0x58025494

08002538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e237      	b.n	80029ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e22c      	b.n	80029ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5c      	ldr	r2, [pc, #368]	@ (80026d8 <HAL_DMA_Abort_IT+0x1a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04a      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5b      	ldr	r2, [pc, #364]	@ (80026dc <HAL_DMA_Abort_IT+0x1a4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d045      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a59      	ldr	r2, [pc, #356]	@ (80026e0 <HAL_DMA_Abort_IT+0x1a8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d040      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_DMA_Abort_IT+0x1ac>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d03b      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a56      	ldr	r2, [pc, #344]	@ (80026e8 <HAL_DMA_Abort_IT+0x1b0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d036      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a55      	ldr	r2, [pc, #340]	@ (80026ec <HAL_DMA_Abort_IT+0x1b4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a53      	ldr	r2, [pc, #332]	@ (80026f0 <HAL_DMA_Abort_IT+0x1b8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02c      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a52      	ldr	r2, [pc, #328]	@ (80026f4 <HAL_DMA_Abort_IT+0x1bc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d027      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a50      	ldr	r2, [pc, #320]	@ (80026f8 <HAL_DMA_Abort_IT+0x1c0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a4f      	ldr	r2, [pc, #316]	@ (80026fc <HAL_DMA_Abort_IT+0x1c4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002700 <HAL_DMA_Abort_IT+0x1c8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <HAL_DMA_Abort_IT+0x1cc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_DMA_Abort_IT+0x1d0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a49      	ldr	r2, [pc, #292]	@ (800270c <HAL_DMA_Abort_IT+0x1d4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <HAL_DMA_Abort_IT+0x1d8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_DMA_Abort_IT+0xc8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_DMA_Abort_IT+0x1dc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Abort_IT+0xcc>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_DMA_Abort_IT+0xce>
 8002604:	2300      	movs	r3, #0
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8086 	beq.w	8002718 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2204      	movs	r2, #4
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_DMA_Abort_IT+0x1a0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d04a      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2e      	ldr	r2, [pc, #184]	@ (80026dc <HAL_DMA_Abort_IT+0x1a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d045      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2c      	ldr	r2, [pc, #176]	@ (80026e0 <HAL_DMA_Abort_IT+0x1a8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d040      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <HAL_DMA_Abort_IT+0x1ac>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d03b      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <HAL_DMA_Abort_IT+0x1b0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d036      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a28      	ldr	r2, [pc, #160]	@ (80026ec <HAL_DMA_Abort_IT+0x1b4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d031      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a26      	ldr	r2, [pc, #152]	@ (80026f0 <HAL_DMA_Abort_IT+0x1b8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02c      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a25      	ldr	r2, [pc, #148]	@ (80026f4 <HAL_DMA_Abort_IT+0x1bc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d027      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_DMA_Abort_IT+0x1c0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_DMA_Abort_IT+0x1c4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d01d      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a20      	ldr	r2, [pc, #128]	@ (8002700 <HAL_DMA_Abort_IT+0x1c8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <HAL_DMA_Abort_IT+0x1cc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_DMA_Abort_IT+0x1d0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00e      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_DMA_Abort_IT+0x1d4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002710 <HAL_DMA_Abort_IT+0x1d8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x17c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <HAL_DMA_Abort_IT+0x1dc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d108      	bne.n	80026c6 <HAL_DMA_Abort_IT+0x18e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e178      	b.n	80029b8 <HAL_DMA_Abort_IT+0x480>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e16f      	b.n	80029b8 <HAL_DMA_Abort_IT+0x480>
 80026d8:	40020010 	.word	0x40020010
 80026dc:	40020028 	.word	0x40020028
 80026e0:	40020040 	.word	0x40020040
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40020070 	.word	0x40020070
 80026ec:	40020088 	.word	0x40020088
 80026f0:	400200a0 	.word	0x400200a0
 80026f4:	400200b8 	.word	0x400200b8
 80026f8:	40020410 	.word	0x40020410
 80026fc:	40020428 	.word	0x40020428
 8002700:	40020440 	.word	0x40020440
 8002704:	40020458 	.word	0x40020458
 8002708:	40020470 	.word	0x40020470
 800270c:	40020488 	.word	0x40020488
 8002710:	400204a0 	.word	0x400204a0
 8002714:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020e 	bic.w	r2, r2, #14
 8002726:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6c      	ldr	r2, [pc, #432]	@ (80028e0 <HAL_DMA_Abort_IT+0x3a8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d04a      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6b      	ldr	r2, [pc, #428]	@ (80028e4 <HAL_DMA_Abort_IT+0x3ac>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d045      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a69      	ldr	r2, [pc, #420]	@ (80028e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d040      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a68      	ldr	r2, [pc, #416]	@ (80028ec <HAL_DMA_Abort_IT+0x3b4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d03b      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a66      	ldr	r2, [pc, #408]	@ (80028f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d036      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d031      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a63      	ldr	r2, [pc, #396]	@ (80028f8 <HAL_DMA_Abort_IT+0x3c0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02c      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a62      	ldr	r2, [pc, #392]	@ (80028fc <HAL_DMA_Abort_IT+0x3c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d027      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a60      	ldr	r2, [pc, #384]	@ (8002900 <HAL_DMA_Abort_IT+0x3c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d022      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <HAL_DMA_Abort_IT+0x3cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01d      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5d      	ldr	r2, [pc, #372]	@ (8002908 <HAL_DMA_Abort_IT+0x3d0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d018      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5c      	ldr	r2, [pc, #368]	@ (800290c <HAL_DMA_Abort_IT+0x3d4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002910 <HAL_DMA_Abort_IT+0x3d8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00e      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a59      	ldr	r2, [pc, #356]	@ (8002914 <HAL_DMA_Abort_IT+0x3dc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a57      	ldr	r2, [pc, #348]	@ (8002918 <HAL_DMA_Abort_IT+0x3e0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x290>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a56      	ldr	r2, [pc, #344]	@ (800291c <HAL_DMA_Abort_IT+0x3e4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d108      	bne.n	80027da <HAL_DMA_Abort_IT+0x2a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e007      	b.n	80027ea <HAL_DMA_Abort_IT+0x2b2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3c      	ldr	r2, [pc, #240]	@ (80028e0 <HAL_DMA_Abort_IT+0x3a8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d072      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3a      	ldr	r2, [pc, #232]	@ (80028e4 <HAL_DMA_Abort_IT+0x3ac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d06d      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a39      	ldr	r2, [pc, #228]	@ (80028e8 <HAL_DMA_Abort_IT+0x3b0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d068      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a37      	ldr	r2, [pc, #220]	@ (80028ec <HAL_DMA_Abort_IT+0x3b4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d063      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a36      	ldr	r2, [pc, #216]	@ (80028f0 <HAL_DMA_Abort_IT+0x3b8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d05e      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_DMA_Abort_IT+0x3bc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d059      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a33      	ldr	r2, [pc, #204]	@ (80028f8 <HAL_DMA_Abort_IT+0x3c0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d054      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a31      	ldr	r2, [pc, #196]	@ (80028fc <HAL_DMA_Abort_IT+0x3c4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d04f      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a30      	ldr	r2, [pc, #192]	@ (8002900 <HAL_DMA_Abort_IT+0x3c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d04a      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <HAL_DMA_Abort_IT+0x3cc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d045      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2d      	ldr	r2, [pc, #180]	@ (8002908 <HAL_DMA_Abort_IT+0x3d0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d040      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2b      	ldr	r2, [pc, #172]	@ (800290c <HAL_DMA_Abort_IT+0x3d4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d03b      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2a      	ldr	r2, [pc, #168]	@ (8002910 <HAL_DMA_Abort_IT+0x3d8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d036      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <HAL_DMA_Abort_IT+0x3dc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d031      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <HAL_DMA_Abort_IT+0x3e0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d02c      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a25      	ldr	r2, [pc, #148]	@ (800291c <HAL_DMA_Abort_IT+0x3e4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d027      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a24      	ldr	r2, [pc, #144]	@ (8002920 <HAL_DMA_Abort_IT+0x3e8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_DMA_Abort_IT+0x3ec>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a21      	ldr	r2, [pc, #132]	@ (8002928 <HAL_DMA_Abort_IT+0x3f0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1f      	ldr	r2, [pc, #124]	@ (800292c <HAL_DMA_Abort_IT+0x3f4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <HAL_DMA_Abort_IT+0x3f8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <HAL_DMA_Abort_IT+0x3fc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <HAL_DMA_Abort_IT+0x400>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_DMA_Abort_IT+0x3a2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	@ (800293c <HAL_DMA_Abort_IT+0x404>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d132      	bne.n	8002940 <HAL_DMA_Abort_IT+0x408>
 80028da:	2301      	movs	r3, #1
 80028dc:	e031      	b.n	8002942 <HAL_DMA_Abort_IT+0x40a>
 80028de:	bf00      	nop
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
 8002920:	58025408 	.word	0x58025408
 8002924:	5802541c 	.word	0x5802541c
 8002928:	58025430 	.word	0x58025430
 800292c:	58025444 	.word	0x58025444
 8002930:	58025458 	.word	0x58025458
 8002934:	5802546c 	.word	0x5802546c
 8002938:	58025480 	.word	0x58025480
 800293c:	58025494 	.word	0x58025494
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002954:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2201      	movs	r2, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002974:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002996:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop

080029c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029d0:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <HAL_DMA_IRQHandler+0x1ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a67      	ldr	r2, [pc, #412]	@ (8002b74 <HAL_DMA_IRQHandler+0x1b0>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b78 <HAL_DMA_IRQHandler+0x1b4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d04a      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	@ (8002b7c <HAL_DMA_IRQHandler+0x1b8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d045      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b80 <HAL_DMA_IRQHandler+0x1bc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d040      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5a      	ldr	r2, [pc, #360]	@ (8002b84 <HAL_DMA_IRQHandler+0x1c0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d03b      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a59      	ldr	r2, [pc, #356]	@ (8002b88 <HAL_DMA_IRQHandler+0x1c4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d036      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	@ (8002b8c <HAL_DMA_IRQHandler+0x1c8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a56      	ldr	r2, [pc, #344]	@ (8002b90 <HAL_DMA_IRQHandler+0x1cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d02c      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a54      	ldr	r2, [pc, #336]	@ (8002b94 <HAL_DMA_IRQHandler+0x1d0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d027      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a53      	ldr	r2, [pc, #332]	@ (8002b98 <HAL_DMA_IRQHandler+0x1d4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a51      	ldr	r2, [pc, #324]	@ (8002b9c <HAL_DMA_IRQHandler+0x1d8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a50      	ldr	r2, [pc, #320]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1e0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bac <HAL_DMA_IRQHandler+0x1e8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1ec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xd2>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a48      	ldr	r2, [pc, #288]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_IRQHandler+0xd6>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_IRQHandler+0xd8>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 842b 	beq.w	80032f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2208      	movs	r2, #8
 8002aac:	409a      	lsls	r2, r3
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a2 	beq.w	8002bfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b78 <HAL_DMA_IRQHandler+0x1b4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <HAL_DMA_IRQHandler+0x1b8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_DMA_IRQHandler+0x1bc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2a      	ldr	r2, [pc, #168]	@ (8002b84 <HAL_DMA_IRQHandler+0x1c0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a28      	ldr	r2, [pc, #160]	@ (8002b88 <HAL_DMA_IRQHandler+0x1c4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <HAL_DMA_IRQHandler+0x1c8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a25      	ldr	r2, [pc, #148]	@ (8002b90 <HAL_DMA_IRQHandler+0x1cc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a24      	ldr	r2, [pc, #144]	@ (8002b94 <HAL_DMA_IRQHandler+0x1d0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <HAL_DMA_IRQHandler+0x1d4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	@ (8002b9c <HAL_DMA_IRQHandler+0x1d8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1dc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1e0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1e4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_DMA_IRQHandler+0x1e8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1ec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x194>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d12f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x1f4>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e02e      	b.n	8002bcc <HAL_DMA_IRQHandler+0x208>
 8002b6e:	bf00      	nop
 8002b70:	24000000 	.word	0x24000000
 8002b74:	1b4e81b5 	.word	0x1b4e81b5
 8002b78:	40020010 	.word	0x40020010
 8002b7c:	40020028 	.word	0x40020028
 8002b80:	40020040 	.word	0x40020040
 8002b84:	40020058 	.word	0x40020058
 8002b88:	40020070 	.word	0x40020070
 8002b8c:	40020088 	.word	0x40020088
 8002b90:	400200a0 	.word	0x400200a0
 8002b94:	400200b8 	.word	0x400200b8
 8002b98:	40020410 	.word	0x40020410
 8002b9c:	40020428 	.word	0x40020428
 8002ba0:	40020440 	.word	0x40020440
 8002ba4:	40020458 	.word	0x40020458
 8002ba8:	40020470 	.word	0x40020470
 8002bac:	40020488 	.word	0x40020488
 8002bb0:	400204a0 	.word	0x400204a0
 8002bb4:	400204b8 	.word	0x400204b8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d015      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0204 	bic.w	r2, r2, #4
 8002bde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2208      	movs	r2, #8
 8002bea:	409a      	lsls	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d06e      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a69      	ldr	r2, [pc, #420]	@ (8002dbc <HAL_DMA_IRQHandler+0x3f8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d04a      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a67      	ldr	r2, [pc, #412]	@ (8002dc0 <HAL_DMA_IRQHandler+0x3fc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d045      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a66      	ldr	r2, [pc, #408]	@ (8002dc4 <HAL_DMA_IRQHandler+0x400>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d040      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a64      	ldr	r2, [pc, #400]	@ (8002dc8 <HAL_DMA_IRQHandler+0x404>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a63      	ldr	r2, [pc, #396]	@ (8002dcc <HAL_DMA_IRQHandler+0x408>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d036      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a61      	ldr	r2, [pc, #388]	@ (8002dd0 <HAL_DMA_IRQHandler+0x40c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a60      	ldr	r2, [pc, #384]	@ (8002dd4 <HAL_DMA_IRQHandler+0x410>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d02c      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd8 <HAL_DMA_IRQHandler+0x414>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d027      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5d      	ldr	r2, [pc, #372]	@ (8002ddc <HAL_DMA_IRQHandler+0x418>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5b      	ldr	r2, [pc, #364]	@ (8002de0 <HAL_DMA_IRQHandler+0x41c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002de4 <HAL_DMA_IRQHandler+0x420>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a58      	ldr	r2, [pc, #352]	@ (8002de8 <HAL_DMA_IRQHandler+0x424>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a57      	ldr	r2, [pc, #348]	@ (8002dec <HAL_DMA_IRQHandler+0x428>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a55      	ldr	r2, [pc, #340]	@ (8002df0 <HAL_DMA_IRQHandler+0x42c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a54      	ldr	r2, [pc, #336]	@ (8002df4 <HAL_DMA_IRQHandler+0x430>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x2ee>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_DMA_IRQHandler+0x434>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x304>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e003      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x30c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	f043 0202 	orr.w	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 808f 	beq.w	8002e24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dbc <HAL_DMA_IRQHandler+0x3f8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d04a      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc0 <HAL_DMA_IRQHandler+0x3fc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d045      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_DMA_IRQHandler+0x400>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d040      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_DMA_IRQHandler+0x404>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d03b      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_DMA_IRQHandler+0x408>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d036      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a24      	ldr	r2, [pc, #144]	@ (8002dd0 <HAL_DMA_IRQHandler+0x40c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d031      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <HAL_DMA_IRQHandler+0x410>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02c      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	@ (8002dd8 <HAL_DMA_IRQHandler+0x414>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d027      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <HAL_DMA_IRQHandler+0x418>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <HAL_DMA_IRQHandler+0x41c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01d      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_DMA_IRQHandler+0x420>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <HAL_DMA_IRQHandler+0x424>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1a      	ldr	r2, [pc, #104]	@ (8002dec <HAL_DMA_IRQHandler+0x428>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_DMA_IRQHandler+0x42c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_DMA_IRQHandler+0x430>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x3e2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a15      	ldr	r2, [pc, #84]	@ (8002df8 <HAL_DMA_IRQHandler+0x434>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d12a      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x438>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e023      	b.n	8002e04 <HAL_DMA_IRQHandler+0x440>
 8002dbc:	40020010 	.word	0x40020010
 8002dc0:	40020028 	.word	0x40020028
 8002dc4:	40020040 	.word	0x40020040
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	40020070 	.word	0x40020070
 8002dd0:	40020088 	.word	0x40020088
 8002dd4:	400200a0 	.word	0x400200a0
 8002dd8:	400200b8 	.word	0x400200b8
 8002ddc:	40020410 	.word	0x40020410
 8002de0:	40020428 	.word	0x40020428
 8002de4:	40020440 	.word	0x40020440
 8002de8:	40020458 	.word	0x40020458
 8002dec:	40020470 	.word	0x40020470
 8002df0:	40020488 	.word	0x40020488
 8002df4:	400204a0 	.word	0x400204a0
 8002df8:	400204b8 	.word	0x400204b8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2204      	movs	r2, #4
 8002e12:	409a      	lsls	r2, r3
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a85      	ldr	r2, [pc, #532]	@ (8003054 <HAL_DMA_IRQHandler+0x690>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a83      	ldr	r2, [pc, #524]	@ (8003058 <HAL_DMA_IRQHandler+0x694>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a82      	ldr	r2, [pc, #520]	@ (800305c <HAL_DMA_IRQHandler+0x698>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a80      	ldr	r2, [pc, #512]	@ (8003060 <HAL_DMA_IRQHandler+0x69c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7f      	ldr	r2, [pc, #508]	@ (8003064 <HAL_DMA_IRQHandler+0x6a0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a7d      	ldr	r2, [pc, #500]	@ (8003068 <HAL_DMA_IRQHandler+0x6a4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800306c <HAL_DMA_IRQHandler+0x6a8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a7a      	ldr	r2, [pc, #488]	@ (8003070 <HAL_DMA_IRQHandler+0x6ac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a79      	ldr	r2, [pc, #484]	@ (8003074 <HAL_DMA_IRQHandler+0x6b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a77      	ldr	r2, [pc, #476]	@ (8003078 <HAL_DMA_IRQHandler+0x6b4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a76      	ldr	r2, [pc, #472]	@ (800307c <HAL_DMA_IRQHandler+0x6b8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a74      	ldr	r2, [pc, #464]	@ (8003080 <HAL_DMA_IRQHandler+0x6bc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a73      	ldr	r2, [pc, #460]	@ (8003084 <HAL_DMA_IRQHandler+0x6c0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a71      	ldr	r2, [pc, #452]	@ (8003088 <HAL_DMA_IRQHandler+0x6c4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a70      	ldr	r2, [pc, #448]	@ (800308c <HAL_DMA_IRQHandler+0x6c8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_IRQHandler+0x516>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_DMA_IRQHandler+0x6cc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x52c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e009      	b.n	8002f04 <HAL_DMA_IRQHandler+0x540>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d03e      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2210      	movs	r2, #16
 8002f12:	409a      	lsls	r2, r3
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d108      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d024      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e01f      	b.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
 8002f56:	e016      	b.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2220      	movs	r2, #32
 8002f90:	409a      	lsls	r2, r3
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8110 	beq.w	80031bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003054 <HAL_DMA_IRQHandler+0x690>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d04a      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2b      	ldr	r2, [pc, #172]	@ (8003058 <HAL_DMA_IRQHandler+0x694>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d045      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <HAL_DMA_IRQHandler+0x698>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d040      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_DMA_IRQHandler+0x69c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d03b      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a26      	ldr	r2, [pc, #152]	@ (8003064 <HAL_DMA_IRQHandler+0x6a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d036      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a25      	ldr	r2, [pc, #148]	@ (8003068 <HAL_DMA_IRQHandler+0x6a4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d031      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a23      	ldr	r2, [pc, #140]	@ (800306c <HAL_DMA_IRQHandler+0x6a8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d02c      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <HAL_DMA_IRQHandler+0x6ac>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d027      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <HAL_DMA_IRQHandler+0x6b0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d022      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8003078 <HAL_DMA_IRQHandler+0x6b4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d01d      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <HAL_DMA_IRQHandler+0x6b8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1c      	ldr	r2, [pc, #112]	@ (8003080 <HAL_DMA_IRQHandler+0x6bc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <HAL_DMA_IRQHandler+0x6c0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <HAL_DMA_IRQHandler+0x6c4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a17      	ldr	r2, [pc, #92]	@ (800308c <HAL_DMA_IRQHandler+0x6c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_DMA_IRQHandler+0x678>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <HAL_DMA_IRQHandler+0x6cc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d12b      	bne.n	8003094 <HAL_DMA_IRQHandler+0x6d0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	e02a      	b.n	80030a8 <HAL_DMA_IRQHandler+0x6e4>
 8003052:	bf00      	nop
 8003054:	40020010 	.word	0x40020010
 8003058:	40020028 	.word	0x40020028
 800305c:	40020040 	.word	0x40020040
 8003060:	40020058 	.word	0x40020058
 8003064:	40020070 	.word	0x40020070
 8003068:	40020088 	.word	0x40020088
 800306c:	400200a0 	.word	0x400200a0
 8003070:	400200b8 	.word	0x400200b8
 8003074:	40020410 	.word	0x40020410
 8003078:	40020428 	.word	0x40020428
 800307c:	40020440 	.word	0x40020440
 8003080:	40020458 	.word	0x40020458
 8003084:	40020470 	.word	0x40020470
 8003088:	40020488 	.word	0x40020488
 800308c:	400204a0 	.word	0x400204a0
 8003090:	400204b8 	.word	0x400204b8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8087 	beq.w	80031bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2220      	movs	r2, #32
 80030b8:	409a      	lsls	r2, r3
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d139      	bne.n	800313e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0216 	bic.w	r2, r2, #22
 80030d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_DMA_IRQHandler+0x736>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	223f      	movs	r2, #63	@ 0x3f
 8003114:	409a      	lsls	r2, r3
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 834a 	beq.w	80037c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
          }
          return;
 800313c:	e344      	b.n	80037c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02c      	beq.n	80031bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e027      	b.n	80031bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d023      	beq.n	80031bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e01e      	b.n	80031bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0210 	bic.w	r2, r2, #16
 800319a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8306 	beq.w	80037d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8088 	beq.w	80032e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2204      	movs	r2, #4
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7a      	ldr	r2, [pc, #488]	@ (80033cc <HAL_DMA_IRQHandler+0xa08>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d04a      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a79      	ldr	r2, [pc, #484]	@ (80033d0 <HAL_DMA_IRQHandler+0xa0c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d045      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a77      	ldr	r2, [pc, #476]	@ (80033d4 <HAL_DMA_IRQHandler+0xa10>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d040      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a76      	ldr	r2, [pc, #472]	@ (80033d8 <HAL_DMA_IRQHandler+0xa14>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d03b      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a74      	ldr	r2, [pc, #464]	@ (80033dc <HAL_DMA_IRQHandler+0xa18>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d036      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a73      	ldr	r2, [pc, #460]	@ (80033e0 <HAL_DMA_IRQHandler+0xa1c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d031      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a71      	ldr	r2, [pc, #452]	@ (80033e4 <HAL_DMA_IRQHandler+0xa20>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02c      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a70      	ldr	r2, [pc, #448]	@ (80033e8 <HAL_DMA_IRQHandler+0xa24>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d027      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6e      	ldr	r2, [pc, #440]	@ (80033ec <HAL_DMA_IRQHandler+0xa28>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6d      	ldr	r2, [pc, #436]	@ (80033f0 <HAL_DMA_IRQHandler+0xa2c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d01d      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6b      	ldr	r2, [pc, #428]	@ (80033f4 <HAL_DMA_IRQHandler+0xa30>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_DMA_IRQHandler+0xa34>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	@ (80033fc <HAL_DMA_IRQHandler+0xa38>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a67      	ldr	r2, [pc, #412]	@ (8003400 <HAL_DMA_IRQHandler+0xa3c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a65      	ldr	r2, [pc, #404]	@ (8003404 <HAL_DMA_IRQHandler+0xa40>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_DMA_IRQHandler+0x8b8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a64      	ldr	r2, [pc, #400]	@ (8003408 <HAL_DMA_IRQHandler+0xa44>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d108      	bne.n	800328e <HAL_DMA_IRQHandler+0x8ca>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <HAL_DMA_IRQHandler+0x8da>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d307      	bcc.n	80032ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f2      	bne.n	800329e <HAL_DMA_IRQHandler+0x8da>
 80032b8:	e000      	b.n	80032bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032d2:	e003      	b.n	80032dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8272 	beq.w	80037d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
 80032f6:	e26c      	b.n	80037d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a43      	ldr	r2, [pc, #268]	@ (800340c <HAL_DMA_IRQHandler+0xa48>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d022      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a42      	ldr	r2, [pc, #264]	@ (8003410 <HAL_DMA_IRQHandler+0xa4c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d01d      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <HAL_DMA_IRQHandler+0xa50>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d018      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3f      	ldr	r2, [pc, #252]	@ (8003418 <HAL_DMA_IRQHandler+0xa54>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3d      	ldr	r2, [pc, #244]	@ (800341c <HAL_DMA_IRQHandler+0xa58>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3c      	ldr	r2, [pc, #240]	@ (8003420 <HAL_DMA_IRQHandler+0xa5c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a3a      	ldr	r2, [pc, #232]	@ (8003424 <HAL_DMA_IRQHandler+0xa60>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_DMA_IRQHandler+0x984>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a39      	ldr	r2, [pc, #228]	@ (8003428 <HAL_DMA_IRQHandler+0xa64>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_DMA_IRQHandler+0x988>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_DMA_IRQHandler+0x98a>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 823f 	beq.w	80037d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2204      	movs	r2, #4
 8003366:	409a      	lsls	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80cd 	beq.w	800350c <HAL_DMA_IRQHandler+0xb48>
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80c7 	beq.w	800350c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2204      	movs	r2, #4
 8003388:	409a      	lsls	r2, r3
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d049      	beq.n	800342c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8210 	beq.w	80037cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b4:	e20a      	b.n	80037cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8206 	beq.w	80037cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c8:	e200      	b.n	80037cc <HAL_DMA_IRQHandler+0xe08>
 80033ca:	bf00      	nop
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	58025408 	.word	0x58025408
 8003410:	5802541c 	.word	0x5802541c
 8003414:	58025430 	.word	0x58025430
 8003418:	58025444 	.word	0x58025444
 800341c:	58025458 	.word	0x58025458
 8003420:	5802546c 	.word	0x5802546c
 8003424:	58025480 	.word	0x58025480
 8003428:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d160      	bne.n	80034f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7f      	ldr	r2, [pc, #508]	@ (8003638 <HAL_DMA_IRQHandler+0xc74>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d04a      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7d      	ldr	r2, [pc, #500]	@ (800363c <HAL_DMA_IRQHandler+0xc78>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d045      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7c      	ldr	r2, [pc, #496]	@ (8003640 <HAL_DMA_IRQHandler+0xc7c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d040      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7a      	ldr	r2, [pc, #488]	@ (8003644 <HAL_DMA_IRQHandler+0xc80>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a79      	ldr	r2, [pc, #484]	@ (8003648 <HAL_DMA_IRQHandler+0xc84>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d036      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	@ (800364c <HAL_DMA_IRQHandler+0xc88>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a76      	ldr	r2, [pc, #472]	@ (8003650 <HAL_DMA_IRQHandler+0xc8c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d02c      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a74      	ldr	r2, [pc, #464]	@ (8003654 <HAL_DMA_IRQHandler+0xc90>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d027      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	@ (8003658 <HAL_DMA_IRQHandler+0xc94>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	@ (800365c <HAL_DMA_IRQHandler+0xc98>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a70      	ldr	r2, [pc, #448]	@ (8003660 <HAL_DMA_IRQHandler+0xc9c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003664 <HAL_DMA_IRQHandler+0xca0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003668 <HAL_DMA_IRQHandler+0xca4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	@ (800366c <HAL_DMA_IRQHandler+0xca8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003670 <HAL_DMA_IRQHandler+0xcac>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xb12>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	@ (8003674 <HAL_DMA_IRQHandler+0xcb0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0xb24>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0208 	bic.w	r2, r2, #8
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e007      	b.n	80034f8 <HAL_DMA_IRQHandler+0xb34>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8165 	beq.w	80037cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800350a:	e15f      	b.n	80037cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2202      	movs	r2, #2
 8003516:	409a      	lsls	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80c5 	beq.w	80036ac <HAL_DMA_IRQHandler+0xce8>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80bf 	beq.w	80036ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2202      	movs	r2, #2
 8003538:	409a      	lsls	r2, r3
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 813a 	beq.w	80037d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003564:	e134      	b.n	80037d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8130 	beq.w	80037d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003578:	e12a      	b.n	80037d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8089 	bne.w	8003698 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <HAL_DMA_IRQHandler+0xc74>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a29      	ldr	r2, [pc, #164]	@ (800363c <HAL_DMA_IRQHandler+0xc78>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <HAL_DMA_IRQHandler+0xc7c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <HAL_DMA_IRQHandler+0xc80>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a25      	ldr	r2, [pc, #148]	@ (8003648 <HAL_DMA_IRQHandler+0xc84>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_DMA_IRQHandler+0xc88>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_DMA_IRQHandler+0xc8c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a20      	ldr	r2, [pc, #128]	@ (8003654 <HAL_DMA_IRQHandler+0xc90>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1f      	ldr	r2, [pc, #124]	@ (8003658 <HAL_DMA_IRQHandler+0xc94>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1d      	ldr	r2, [pc, #116]	@ (800365c <HAL_DMA_IRQHandler+0xc98>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <HAL_DMA_IRQHandler+0xc9c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003664 <HAL_DMA_IRQHandler+0xca0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a19      	ldr	r2, [pc, #100]	@ (8003668 <HAL_DMA_IRQHandler+0xca4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a17      	ldr	r2, [pc, #92]	@ (800366c <HAL_DMA_IRQHandler+0xca8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_DMA_IRQHandler+0xcac>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_IRQHandler+0xc62>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <HAL_DMA_IRQHandler+0xcb0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d128      	bne.n	8003678 <HAL_DMA_IRQHandler+0xcb4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0214 	bic.w	r2, r2, #20
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e027      	b.n	8003688 <HAL_DMA_IRQHandler+0xcc4>
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 020a 	bic.w	r2, r2, #10
 8003686:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8097 	beq.w	80037d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036aa:	e091      	b.n	80037d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2208      	movs	r2, #8
 80036b6:	409a      	lsls	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8088 	beq.w	80037d2 <HAL_DMA_IRQHandler+0xe0e>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8082 	beq.w	80037d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a41      	ldr	r2, [pc, #260]	@ (80037d8 <HAL_DMA_IRQHandler+0xe14>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d04a      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a3f      	ldr	r2, [pc, #252]	@ (80037dc <HAL_DMA_IRQHandler+0xe18>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d045      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a3e      	ldr	r2, [pc, #248]	@ (80037e0 <HAL_DMA_IRQHandler+0xe1c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d040      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_DMA_IRQHandler+0xe20>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d03b      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3b      	ldr	r2, [pc, #236]	@ (80037e8 <HAL_DMA_IRQHandler+0xe24>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d036      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	@ (80037ec <HAL_DMA_IRQHandler+0xe28>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d031      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a38      	ldr	r2, [pc, #224]	@ (80037f0 <HAL_DMA_IRQHandler+0xe2c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d02c      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a36      	ldr	r2, [pc, #216]	@ (80037f4 <HAL_DMA_IRQHandler+0xe30>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d027      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a35      	ldr	r2, [pc, #212]	@ (80037f8 <HAL_DMA_IRQHandler+0xe34>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a33      	ldr	r2, [pc, #204]	@ (80037fc <HAL_DMA_IRQHandler+0xe38>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a32      	ldr	r2, [pc, #200]	@ (8003800 <HAL_DMA_IRQHandler+0xe3c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a30      	ldr	r2, [pc, #192]	@ (8003804 <HAL_DMA_IRQHandler+0xe40>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2f      	ldr	r2, [pc, #188]	@ (8003808 <HAL_DMA_IRQHandler+0xe44>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <HAL_DMA_IRQHandler+0xe48>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <HAL_DMA_IRQHandler+0xe4c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_DMA_IRQHandler+0xdaa>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <HAL_DMA_IRQHandler+0xe50>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <HAL_DMA_IRQHandler+0xdbc>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 021c 	bic.w	r2, r2, #28
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e007      	b.n	8003790 <HAL_DMA_IRQHandler+0xdcc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2201      	movs	r2, #1
 800379a:	409a      	lsls	r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e004      	b.n	80037d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037c8:	bf00      	nop
 80037ca:	e002      	b.n	80037d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037d2:	3728      	adds	r7, #40	@ 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8

08003818 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7f      	ldr	r2, [pc, #508]	@ (8003a34 <DMA_SetConfig+0x21c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d072      	beq.n	8003922 <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7d      	ldr	r2, [pc, #500]	@ (8003a38 <DMA_SetConfig+0x220>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d06d      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a3c <DMA_SetConfig+0x224>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d068      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7a      	ldr	r2, [pc, #488]	@ (8003a40 <DMA_SetConfig+0x228>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d063      	beq.n	8003922 <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a79      	ldr	r2, [pc, #484]	@ (8003a44 <DMA_SetConfig+0x22c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d05e      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a77      	ldr	r2, [pc, #476]	@ (8003a48 <DMA_SetConfig+0x230>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d059      	beq.n	8003922 <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a76      	ldr	r2, [pc, #472]	@ (8003a4c <DMA_SetConfig+0x234>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d054      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a74      	ldr	r2, [pc, #464]	@ (8003a50 <DMA_SetConfig+0x238>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04f      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a73      	ldr	r2, [pc, #460]	@ (8003a54 <DMA_SetConfig+0x23c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <DMA_SetConfig+0x10a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a71      	ldr	r2, [pc, #452]	@ (8003a58 <DMA_SetConfig+0x240>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a70      	ldr	r2, [pc, #448]	@ (8003a5c <DMA_SetConfig+0x244>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a60 <DMA_SetConfig+0x248>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003a64 <DMA_SetConfig+0x24c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a68 <DMA_SetConfig+0x250>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <DMA_SetConfig+0x254>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a68      	ldr	r2, [pc, #416]	@ (8003a70 <DMA_SetConfig+0x258>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a67      	ldr	r2, [pc, #412]	@ (8003a74 <DMA_SetConfig+0x25c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a65      	ldr	r2, [pc, #404]	@ (8003a78 <DMA_SetConfig+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a64      	ldr	r2, [pc, #400]	@ (8003a7c <DMA_SetConfig+0x264>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a62      	ldr	r2, [pc, #392]	@ (8003a80 <DMA_SetConfig+0x268>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <DMA_SetConfig+0x10a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a61      	ldr	r2, [pc, #388]	@ (8003a84 <DMA_SetConfig+0x26c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5f      	ldr	r2, [pc, #380]	@ (8003a88 <DMA_SetConfig+0x270>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <DMA_SetConfig+0x10a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a5e      	ldr	r2, [pc, #376]	@ (8003a8c <DMA_SetConfig+0x274>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <DMA_SetConfig+0x10a>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a90 <DMA_SetConfig+0x278>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <DMA_SetConfig+0x10e>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <DMA_SetConfig+0x110>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003934:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003946:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a39      	ldr	r2, [pc, #228]	@ (8003a34 <DMA_SetConfig+0x21c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04a      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <DMA_SetConfig+0x220>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d045      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a36      	ldr	r2, [pc, #216]	@ (8003a3c <DMA_SetConfig+0x224>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d040      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <DMA_SetConfig+0x228>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d03b      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a33      	ldr	r2, [pc, #204]	@ (8003a44 <DMA_SetConfig+0x22c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d036      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a32      	ldr	r2, [pc, #200]	@ (8003a48 <DMA_SetConfig+0x230>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d031      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a30      	ldr	r2, [pc, #192]	@ (8003a4c <DMA_SetConfig+0x234>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02c      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2f      	ldr	r2, [pc, #188]	@ (8003a50 <DMA_SetConfig+0x238>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d027      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a54 <DMA_SetConfig+0x23c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a58 <DMA_SetConfig+0x240>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01d      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a5c <DMA_SetConfig+0x244>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a29      	ldr	r2, [pc, #164]	@ (8003a60 <DMA_SetConfig+0x248>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a27      	ldr	r2, [pc, #156]	@ (8003a64 <DMA_SetConfig+0x24c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a26      	ldr	r2, [pc, #152]	@ (8003a68 <DMA_SetConfig+0x250>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a24      	ldr	r2, [pc, #144]	@ (8003a6c <DMA_SetConfig+0x254>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <DMA_SetConfig+0x1d0>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <DMA_SetConfig+0x258>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <DMA_SetConfig+0x1d4>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <DMA_SetConfig+0x1d6>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d059      	beq.n	8003aa6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	223f      	movs	r2, #63	@ 0x3f
 80039fc:	409a      	lsls	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d138      	bne.n	8003a94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a32:	e086      	b.n	8003b42 <DMA_SetConfig+0x32a>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	58025408 	.word	0x58025408
 8003a78:	5802541c 	.word	0x5802541c
 8003a7c:	58025430 	.word	0x58025430
 8003a80:	58025444 	.word	0x58025444
 8003a84:	58025458 	.word	0x58025458
 8003a88:	5802546c 	.word	0x5802546c
 8003a8c:	58025480 	.word	0x58025480
 8003a90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]
}
 8003aa4:	e04d      	b.n	8003b42 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a29      	ldr	r2, [pc, #164]	@ (8003b50 <DMA_SetConfig+0x338>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <DMA_SetConfig+0x33c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a26      	ldr	r2, [pc, #152]	@ (8003b58 <DMA_SetConfig+0x340>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <DMA_SetConfig+0x344>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a23      	ldr	r2, [pc, #140]	@ (8003b60 <DMA_SetConfig+0x348>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a21      	ldr	r2, [pc, #132]	@ (8003b64 <DMA_SetConfig+0x34c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a20      	ldr	r2, [pc, #128]	@ (8003b68 <DMA_SetConfig+0x350>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <DMA_SetConfig+0x2de>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b6c <DMA_SetConfig+0x354>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <DMA_SetConfig+0x2e2>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <DMA_SetConfig+0x2e4>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d108      	bne.n	8003b32 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
}
 8003b30:	e007      	b.n	8003b42 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	60da      	str	r2, [r3, #12]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	58025408 	.word	0x58025408
 8003b54:	5802541c 	.word	0x5802541c
 8003b58:	58025430 	.word	0x58025430
 8003b5c:	58025444 	.word	0x58025444
 8003b60:	58025458 	.word	0x58025458
 8003b64:	5802546c 	.word	0x5802546c
 8003b68:	58025480 	.word	0x58025480
 8003b6c:	58025494 	.word	0x58025494

08003b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	@ (8003c88 <DMA_CalcBaseAndBitshift+0x118>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d04a      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a41      	ldr	r2, [pc, #260]	@ (8003c8c <DMA_CalcBaseAndBitshift+0x11c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d045      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3f      	ldr	r2, [pc, #252]	@ (8003c90 <DMA_CalcBaseAndBitshift+0x120>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d040      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c94 <DMA_CalcBaseAndBitshift+0x124>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d03b      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8003c98 <DMA_CalcBaseAndBitshift+0x128>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d036      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3b      	ldr	r2, [pc, #236]	@ (8003c9c <DMA_CalcBaseAndBitshift+0x12c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d031      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a39      	ldr	r2, [pc, #228]	@ (8003ca0 <DMA_CalcBaseAndBitshift+0x130>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d02c      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <DMA_CalcBaseAndBitshift+0x134>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d027      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a36      	ldr	r2, [pc, #216]	@ (8003ca8 <DMA_CalcBaseAndBitshift+0x138>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d022      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a35      	ldr	r2, [pc, #212]	@ (8003cac <DMA_CalcBaseAndBitshift+0x13c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d01d      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a33      	ldr	r2, [pc, #204]	@ (8003cb0 <DMA_CalcBaseAndBitshift+0x140>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d018      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a32      	ldr	r2, [pc, #200]	@ (8003cb4 <DMA_CalcBaseAndBitshift+0x144>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a30      	ldr	r2, [pc, #192]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x148>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00e      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x14c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d009      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x150>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <DMA_CalcBaseAndBitshift+0xa8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc4 <DMA_CalcBaseAndBitshift+0x154>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <DMA_CalcBaseAndBitshift+0xac>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <DMA_CalcBaseAndBitshift+0xae>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d024      	beq.n	8003c6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3b10      	subs	r3, #16
 8003c2a:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x158>)
 8003c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x15c>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d908      	bls.n	8003c5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	1d1a      	adds	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c5a:	e00d      	b.n	8003c78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c6a:	e005      	b.n	8003c78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028
 8003c90:	40020040 	.word	0x40020040
 8003c94:	40020058 	.word	0x40020058
 8003c98:	40020070 	.word	0x40020070
 8003c9c:	40020088 	.word	0x40020088
 8003ca0:	400200a0 	.word	0x400200a0
 8003ca4:	400200b8 	.word	0x400200b8
 8003ca8:	40020410 	.word	0x40020410
 8003cac:	40020428 	.word	0x40020428
 8003cb0:	40020440 	.word	0x40020440
 8003cb4:	40020458 	.word	0x40020458
 8003cb8:	40020470 	.word	0x40020470
 8003cbc:	40020488 	.word	0x40020488
 8003cc0:	400204a0 	.word	0x400204a0
 8003cc4:	400204b8 	.word	0x400204b8
 8003cc8:	aaaaaaab 	.word	0xaaaaaaab
 8003ccc:	0800a1d4 	.word	0x0800a1d4
 8003cd0:	fffffc00 	.word	0xfffffc00

08003cd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d120      	bne.n	8003d2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d858      	bhi.n	8003da2 <DMA_CheckFifoParam+0xce>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <DMA_CheckFifoParam+0x24>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d1b 	.word	0x08003d1b
 8003d00:	08003d09 	.word	0x08003d09
 8003d04:	08003da3 	.word	0x08003da3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d048      	beq.n	8003da6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d18:	e045      	b.n	8003da6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d22:	d142      	bne.n	8003daa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d28:	e03f      	b.n	8003daa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d32:	d123      	bne.n	8003d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d838      	bhi.n	8003dae <DMA_CheckFifoParam+0xda>
 8003d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <DMA_CheckFifoParam+0x70>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003d5b 	.word	0x08003d5b
 8003d4c:	08003d55 	.word	0x08003d55
 8003d50:	08003d6d 	.word	0x08003d6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
        break;
 8003d58:	e030      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d025      	beq.n	8003db2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d6a:	e022      	b.n	8003db2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d74:	d11f      	bne.n	8003db6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d7a:	e01c      	b.n	8003db6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d902      	bls.n	8003d8a <DMA_CheckFifoParam+0xb6>
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d003      	beq.n	8003d90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d88:	e018      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8e:	e015      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8003da0:	e00b      	b.n	8003dba <DMA_CheckFifoParam+0xe6>
        break;
 8003da2:	bf00      	nop
 8003da4:	e00a      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        break;
 8003da6:	bf00      	nop
 8003da8:	e008      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        break;
 8003daa:	bf00      	nop
 8003dac:	e006      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        break;
 8003dae:	bf00      	nop
 8003db0:	e004      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
        break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <DMA_CheckFifoParam+0xe8>
    break;
 8003dba:	bf00      	nop
    }
  }

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop

08003dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a38      	ldr	r2, [pc, #224]	@ (8003ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d022      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a36      	ldr	r2, [pc, #216]	@ (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01d      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a35      	ldr	r2, [pc, #212]	@ (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a33      	ldr	r2, [pc, #204]	@ (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a32      	ldr	r2, [pc, #200]	@ (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a30      	ldr	r2, [pc, #192]	@ (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b08      	subs	r3, #8
 8003e3c:	4a28      	ldr	r2, [pc, #160]	@ (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a24      	ldr	r2, [pc, #144]	@ (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e68:	e024      	b.n	8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3b10      	subs	r3, #16
 8003e72:	4a1e      	ldr	r2, [pc, #120]	@ (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d806      	bhi.n	8003e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d902      	bls.n	8003e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ea4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	58025408 	.word	0x58025408
 8003ec4:	5802541c 	.word	0x5802541c
 8003ec8:	58025430 	.word	0x58025430
 8003ecc:	58025444 	.word	0x58025444
 8003ed0:	58025458 	.word	0x58025458
 8003ed4:	5802546c 	.word	0x5802546c
 8003ed8:	58025480 	.word	0x58025480
 8003edc:	58025494 	.word	0x58025494
 8003ee0:	cccccccd 	.word	0xcccccccd
 8003ee4:	16009600 	.word	0x16009600
 8003ee8:	58025880 	.word	0x58025880
 8003eec:	aaaaaaab 	.word	0xaaaaaaab
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	4002040f 	.word	0x4002040f
 8003ef8:	10008200 	.word	0x10008200
 8003efc:	40020880 	.word	0x40020880

08003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04a      	beq.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d847      	bhi.n	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	@ (8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01d      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4b17      	ldr	r3, [pc, #92]	@ (8003fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f88:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f8a:	e009      	b.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a11      	ldr	r2, [pc, #68]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	58025408 	.word	0x58025408
 8003fbc:	5802541c 	.word	0x5802541c
 8003fc0:	58025430 	.word	0x58025430
 8003fc4:	58025444 	.word	0x58025444
 8003fc8:	58025458 	.word	0x58025458
 8003fcc:	5802546c 	.word	0x5802546c
 8003fd0:	58025480 	.word	0x58025480
 8003fd4:	58025494 	.word	0x58025494
 8003fd8:	1600963f 	.word	0x1600963f
 8003fdc:	58025940 	.word	0x58025940
 8003fe0:	1000823f 	.word	0x1000823f
 8003fe4:	40020940 	.word	0x40020940

08003fe8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0e3      	b.n	80041c2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2223      	movs	r2, #35	@ 0x23
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fc fb71 	bl	80006f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	4b6e      	ldr	r3, [pc, #440]	@ (80041cc <HAL_ETH_Init+0x1e4>)
 8004014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004018:	4a6c      	ldr	r2, [pc, #432]	@ (80041cc <HAL_ETH_Init+0x1e4>)
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_ETH_Init+0x1e4>)
 8004024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	7a1b      	ldrb	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d103      	bne.n	8004040 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fd f879 	bl	8001130 <HAL_SYSCFG_ETHInterfaceSelect>
 800403e:	e003      	b.n	8004048 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004040:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004044:	f7fd f874 	bl	8001130 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004048:	4b61      	ldr	r3, [pc, #388]	@ (80041d0 <HAL_ETH_Init+0x1e8>)
 800404a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004062:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004064:	f7fd f858 	bl	8001118 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800406a:	e011      	b.n	8004090 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800406c:	f7fd f854 	bl	8001118 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800407a:	d909      	bls.n	8004090 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	22e0      	movs	r2, #224	@ 0xe0
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e098      	b.n	80041c2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e4      	bne.n	800406c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f89e 	bl	80041e4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80040a8:	f001 fcd8 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4a49      	ldr	r2, [pc, #292]	@ (80041d4 <HAL_ETH_Init+0x1ec>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9a      	lsrs	r2, r3, #18
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3a01      	subs	r2, #1
 80040bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa81 	bl	80045c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040d2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040e2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	22e0      	movs	r2, #224	@ 0xe0
 80040fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e05d      	b.n	80041c2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_ETH_Init+0x1f0>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6952      	ldr	r2, [r2, #20]
 800411a:	0051      	lsls	r1, r2, #1
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004126:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fae9 	bl	8004702 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb2f 	bl	8004794 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	3305      	adds	r3, #5
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	4619      	mov	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	3303      	adds	r3, #3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	061a      	lsls	r2, r3, #24
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	3302      	adds	r3, #2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004174:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004182:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004184:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_ETH_Init+0x1f4>)
 8004196:	430b      	orrs	r3, r1
 8004198:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <HAL_ETH_Init+0x1f8>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2210      	movs	r2, #16
 80041bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	58000400 	.word	0x58000400
 80041d4:	431bde83 	.word	0x431bde83
 80041d8:	ffff8001 	.word	0xffff8001
 80041dc:	0c020060 	.word	0x0c020060
 80041e0:	0c20c000 	.word	0x0c20c000

080041e4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80041fe:	f001 fc2d 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8004202:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a1a      	ldr	r2, [pc, #104]	@ (8004270 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d804      	bhi.n	8004216 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e022      	b.n	800425c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <HAL_ETH_SetMDIOClockRange+0x90>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d204      	bcs.n	8004228 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e019      	b.n	800425c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4a13      	ldr	r2, [pc, #76]	@ (8004278 <HAL_ETH_SetMDIOClockRange+0x94>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d915      	bls.n	800425c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4a12      	ldr	r2, [pc, #72]	@ (800427c <HAL_ETH_SetMDIOClockRange+0x98>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d804      	bhi.n	8004242 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e00c      	b.n	800425c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a0e      	ldr	r2, [pc, #56]	@ (8004280 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d804      	bhi.n	8004254 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e003      	b.n	800425c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	02160ebf 	.word	0x02160ebf
 8004274:	03938700 	.word	0x03938700
 8004278:	05f5e0ff 	.word	0x05f5e0ff
 800427c:	08f0d17f 	.word	0x08f0d17f
 8004280:	0ee6b27f 	.word	0x0ee6b27f

08004284 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004296:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800429e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	7b1b      	ldrb	r3, [r3, #12]
 80042a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	7b5b      	ldrb	r3, [r3, #13]
 80042ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	7b9b      	ldrb	r3, [r3, #14]
 80042b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	7bdb      	ldrb	r3, [r3, #15]
 80042bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	7c12      	ldrb	r2, [r2, #16]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d102      	bne.n	80042ce <ETH_SetMACConfig+0x4a>
 80042c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80042cc:	e000      	b.n	80042d0 <ETH_SetMACConfig+0x4c>
 80042ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	7c52      	ldrb	r2, [r2, #17]
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d102      	bne.n	80042e0 <ETH_SetMACConfig+0x5c>
 80042da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042de:	e000      	b.n	80042e2 <ETH_SetMACConfig+0x5e>
 80042e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80042e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7c9b      	ldrb	r3, [r3, #18]
 80042e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80042ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80042f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80042f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	7f1b      	ldrb	r3, [r3, #28]
 80042fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80042fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	7f5b      	ldrb	r3, [r3, #29]
 8004304:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004306:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	7f92      	ldrb	r2, [r2, #30]
 800430c:	2a00      	cmp	r2, #0
 800430e:	d102      	bne.n	8004316 <ETH_SetMACConfig+0x92>
 8004310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004314:	e000      	b.n	8004318 <ETH_SetMACConfig+0x94>
 8004316:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004318:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	7fdb      	ldrb	r3, [r3, #31]
 800431e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004320:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004328:	2a00      	cmp	r2, #0
 800432a:	d102      	bne.n	8004332 <ETH_SetMACConfig+0xae>
 800432c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004330:	e000      	b.n	8004334 <ETH_SetMACConfig+0xb0>
 8004332:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004334:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800433a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004342:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004344:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b56      	ldr	r3, [pc, #344]	@ (80044b0 <ETH_SetMACConfig+0x22c>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	430b      	orrs	r3, r1
 8004360:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800436e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004370:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004378:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800437a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004382:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004384:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800438c:	2a00      	cmp	r2, #0
 800438e:	d102      	bne.n	8004396 <ETH_SetMACConfig+0x112>
 8004390:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004394:	e000      	b.n	8004398 <ETH_SetMACConfig+0x114>
 8004396:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004398:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	4b42      	ldr	r3, [pc, #264]	@ (80044b4 <ETH_SetMACConfig+0x230>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <ETH_SetMACConfig+0x234>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80043e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80043e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80043ee:	2a00      	cmp	r2, #0
 80043f0:	d101      	bne.n	80043f6 <ETH_SetMACConfig+0x172>
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	e000      	b.n	80043f8 <ETH_SetMACConfig+0x174>
 80043f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80043f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800440a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	430b      	orrs	r3, r1
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004420:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004428:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	f023 0103 	bic.w	r1, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	430a      	orrs	r2, r1
 8004442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800444e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800446a:	2a00      	cmp	r2, #0
 800446c:	d101      	bne.n	8004472 <ETH_SetMACConfig+0x1ee>
 800446e:	2240      	movs	r2, #64	@ 0x40
 8004470:	e000      	b.n	8004474 <ETH_SetMACConfig+0x1f0>
 8004472:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004474:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800447c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800447e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004486:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004494:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	430a      	orrs	r2, r1
 80044a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	00048083 	.word	0x00048083
 80044b4:	c0f88000 	.word	0xc0f88000
 80044b8:	fffffef0 	.word	0xfffffef0

080044bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b38      	ldr	r3, [pc, #224]	@ (80045b4 <ETH_SetDMAConfig+0xf8>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	6811      	ldr	r1, [r2, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80044ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	7b1b      	ldrb	r3, [r3, #12]
 80044f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <ETH_SetDMAConfig+0xfc>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	430b      	orrs	r3, r1
 8004510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004514:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	7b5b      	ldrb	r3, [r3, #13]
 800451a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004530:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <ETH_SetDMAConfig+0x100>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	430b      	orrs	r3, r1
 800453c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004540:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	7d1b      	ldrb	r3, [r3, #20]
 800454c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800454e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	7f5b      	ldrb	r3, [r3, #29]
 8004554:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004562:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004566:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <ETH_SetDMAConfig+0x104>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	430b      	orrs	r3, r1
 8004572:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004576:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	7f1b      	ldrb	r3, [r3, #28]
 800457e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004590:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <ETH_SetDMAConfig+0x108>)
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	430b      	orrs	r3, r1
 80045a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045a4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	ffff87fd 	.word	0xffff87fd
 80045b8:	ffff2ffe 	.word	0xffff2ffe
 80045bc:	fffec000 	.word	0xfffec000
 80045c0:	ffc0efef 	.word	0xffc0efef
 80045c4:	7fc0ffff 	.word	0x7fc0ffff

080045c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b0a4      	sub	sp, #144	@ 0x90
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045d6:	2300      	movs	r3, #0
 80045d8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004604:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004610:	2300      	movs	r3, #0
 8004612:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004620:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004624:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004626:	2300      	movs	r3, #0
 8004628:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004642:	2300      	movs	r3, #0
 8004644:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004646:	2300      	movs	r3, #0
 8004648:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800464a:	2300      	movs	r3, #0
 800464c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004660:	2320      	movs	r3, #32
 8004662:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004672:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004678:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800467c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004684:	2302      	movs	r3, #2
 8004686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004696:	2300      	movs	r3, #0
 8004698:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046a2:	2300      	movs	r3, #0
 80046a4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fde6 	bl	8004284 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046bc:	2301      	movs	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80046e8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fee1 	bl	80044bc <ETH_SetDMAConfig>
}
 80046fa:	bf00      	nop
 80046fc:	3790      	adds	r7, #144	@ 0x90
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e01d      	b.n	800474c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68d9      	ldr	r1, [r3, #12]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	3206      	adds	r2, #6
 8004742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d9de      	bls.n	8004710 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004760:	461a      	mov	r2, r3
 8004762:	2303      	movs	r3, #3
 8004764:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004774:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004784:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e023      	b.n	80047ea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6919      	ldr	r1, [r3, #16]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	3212      	adds	r2, #18
 80047e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d9d8      	bls.n	80047a2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004816:	461a      	mov	r2, r3
 8004818:	2303      	movs	r3, #3
 800481a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800482a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800485e:	4b86      	ldr	r3, [pc, #536]	@ (8004a78 <HAL_GPIO_Init+0x228>)
 8004860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004862:	e18c      	b.n	8004b7e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 817e 	beq.w	8004b78 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d005      	beq.n	8004894 <HAL_GPIO_Init+0x44>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d130      	bne.n	80048f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	2203      	movs	r2, #3
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ca:	2201      	movs	r2, #1
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0201 	and.w	r2, r3, #1
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d017      	beq.n	8004932 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d123      	bne.n	8004986 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	08da      	lsrs	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3208      	adds	r2, #8
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80d8 	beq.w	8004b78 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c8:	4b2c      	ldr	r3, [pc, #176]	@ (8004a7c <HAL_GPIO_Init+0x22c>)
 80049ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049ce:	4a2b      	ldr	r2, [pc, #172]	@ (8004a7c <HAL_GPIO_Init+0x22c>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <HAL_GPIO_Init+0x22c>)
 80049da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e6:	4a26      	ldr	r2, [pc, #152]	@ (8004a80 <HAL_GPIO_Init+0x230>)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3302      	adds	r3, #2
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a84 <HAL_GPIO_Init+0x234>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <HAL_GPIO_Init+0x258>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_GPIO_Init+0x238>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d02b      	beq.n	8004a72 <HAL_GPIO_Init+0x222>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a8c <HAL_GPIO_Init+0x23c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d025      	beq.n	8004a6e <HAL_GPIO_Init+0x21e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1a      	ldr	r2, [pc, #104]	@ (8004a90 <HAL_GPIO_Init+0x240>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01f      	beq.n	8004a6a <HAL_GPIO_Init+0x21a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	@ (8004a94 <HAL_GPIO_Init+0x244>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d019      	beq.n	8004a66 <HAL_GPIO_Init+0x216>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <HAL_GPIO_Init+0x248>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_GPIO_Init+0x212>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	@ (8004a9c <HAL_GPIO_Init+0x24c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00d      	beq.n	8004a5e <HAL_GPIO_Init+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a16      	ldr	r2, [pc, #88]	@ (8004aa0 <HAL_GPIO_Init+0x250>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <HAL_GPIO_Init+0x20a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <HAL_GPIO_Init+0x254>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_GPIO_Init+0x206>
 8004a52:	2309      	movs	r3, #9
 8004a54:	e029      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a56:	230a      	movs	r3, #10
 8004a58:	e027      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	e025      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a5e:	2306      	movs	r3, #6
 8004a60:	e023      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e021      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e01f      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e01d      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e01b      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e019      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a76:	bf00      	nop
 8004a78:	58000080 	.word	0x58000080
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	58000400 	.word	0x58000400
 8004a84:	58020000 	.word	0x58020000
 8004a88:	58020400 	.word	0x58020400
 8004a8c:	58020800 	.word	0x58020800
 8004a90:	58020c00 	.word	0x58020c00
 8004a94:	58021000 	.word	0x58021000
 8004a98:	58021400 	.word	0x58021400
 8004a9c:	58021800 	.word	0x58021800
 8004aa0:	58021c00 	.word	0x58021c00
 8004aa4:	58022400 	.word	0x58022400
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aba:	4938      	ldr	r1, [pc, #224]	@ (8004b9c <HAL_GPIO_Init+0x34c>)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f ae6b 	bne.w	8004864 <HAL_GPIO_Init+0x14>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	3724      	adds	r7, #36	@ 0x24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	58000400 	.word	0x58000400

08004ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
 8004bac:	4613      	mov	r3, r2
 8004bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bbc:	e003      	b.n	8004bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	041a      	lsls	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	619a      	str	r2, [r3, #24]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_PWREx_ConfigSupply+0x70>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d00a      	beq.n	8004bfe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004be8:	4b16      	ldr	r3, [pc, #88]	@ (8004c44 <HAL_PWREx_ConfigSupply+0x70>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d001      	beq.n	8004bfa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e01f      	b.n	8004c3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e01d      	b.n	8004c3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bfe:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_PWREx_ConfigSupply+0x70>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f023 0207 	bic.w	r2, r3, #7
 8004c06:	490f      	ldr	r1, [pc, #60]	@ (8004c44 <HAL_PWREx_ConfigSupply+0x70>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c0e:	f7fc fa83 	bl	8001118 <HAL_GetTick>
 8004c12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c14:	e009      	b.n	8004c2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c16:	f7fc fa7f 	bl	8001118 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c24:	d901      	bls.n	8004c2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e007      	b.n	8004c3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	d1ee      	bne.n	8004c16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	58024800 	.word	0x58024800

08004c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	@ 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e3c8      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8087 	beq.w	8004d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c68:	4b88      	ldr	r3, [pc, #544]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c72:	4b86      	ldr	r3, [pc, #536]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d007      	beq.n	8004c8e <HAL_RCC_OscConfig+0x46>
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	2b18      	cmp	r3, #24
 8004c82:	d110      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x5e>
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d06c      	beq.n	8004d74 <HAL_RCC_OscConfig+0x12c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d168      	bne.n	8004d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e3a2      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x76>
 8004cb0:	4b76      	ldr	r3, [pc, #472]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a75      	ldr	r2, [pc, #468]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e02e      	b.n	8004d1c <HAL_RCC_OscConfig+0xd4>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x98>
 8004cc6:	4b71      	ldr	r3, [pc, #452]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a70      	ldr	r2, [pc, #448]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e01d      	b.n	8004d1c <HAL_RCC_OscConfig+0xd4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCC_OscConfig+0xbc>
 8004cea:	4b68      	ldr	r3, [pc, #416]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a67      	ldr	r2, [pc, #412]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a64      	ldr	r2, [pc, #400]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0xd4>
 8004d04:	4b61      	ldr	r3, [pc, #388]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a60      	ldr	r2, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b5e      	ldr	r3, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5d      	ldr	r2, [pc, #372]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc f9f8 	bl	8001118 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fc f9f4 	bl	8001118 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e356      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d3e:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0xe4>
 8004d4a:	e014      	b.n	8004d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fc f9e4 	bl	8001118 <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fc f9e0 	bl	8001118 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e342      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d66:	4b49      	ldr	r3, [pc, #292]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x10c>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 808c 	beq.w	8004e9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d84:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <HAL_RCC_OscConfig+0x162>
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	2b18      	cmp	r3, #24
 8004d9e:	d137      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1c8>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d132      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x17a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e314      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dc2:	4b32      	ldr	r3, [pc, #200]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 0219 	bic.w	r2, r3, #25
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	492f      	ldr	r1, [pc, #188]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc f9a0 	bl	8001118 <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fc f99c 	bl	8001118 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e2fe      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dee:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	4920      	ldr	r1, [pc, #128]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e0e:	e045      	b.n	8004e9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d026      	beq.n	8004e66 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e18:	4b1c      	ldr	r3, [pc, #112]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 0219 	bic.w	r2, r3, #25
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4919      	ldr	r1, [pc, #100]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fc f975 	bl	8001118 <HAL_GetTick>
 8004e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fc f971 	bl	8001118 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e2d3      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	490b      	ldr	r1, [pc, #44]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
 8004e64:	e01a      	b.n	8004e9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCC_OscConfig+0x244>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fc f951 	bl	8001118 <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e78:	e00a      	b.n	8004e90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7a:	f7fc f94d 	bl	8001118 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d903      	bls.n	8004e90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e2af      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
 8004e8c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e90:	4b96      	ldr	r3, [pc, #600]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ee      	bne.n	8004e7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d06a      	beq.n	8004f7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea8:	4b90      	ldr	r3, [pc, #576]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eb2:	4b8e      	ldr	r3, [pc, #568]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d007      	beq.n	8004ece <HAL_RCC_OscConfig+0x286>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d11b      	bne.n	8004efc <HAL_RCC_OscConfig+0x2b4>
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d116      	bne.n	8004efc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ece:	4b87      	ldr	r3, [pc, #540]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x29e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b80      	cmp	r3, #128	@ 0x80
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e282      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee6:	4b81      	ldr	r3, [pc, #516]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	497d      	ldr	r1, [pc, #500]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efa:	e040      	b.n	8004f7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d023      	beq.n	8004f4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f04:	4b79      	ldr	r3, [pc, #484]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a78      	ldr	r2, [pc, #480]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc f902 	bl	8001118 <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f18:	f7fc f8fe 	bl	8001118 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e260      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f2a:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f36:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	061b      	lsls	r3, r3, #24
 8004f44:	4969      	ldr	r1, [pc, #420]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60cb      	str	r3, [r1, #12]
 8004f4a:	e018      	b.n	8004f7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f4c:	4b67      	ldr	r3, [pc, #412]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a66      	ldr	r2, [pc, #408]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fc f8de 	bl	8001118 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f60:	f7fc f8da 	bl	8001118 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e23c      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f72:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d036      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d019      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f92:	4b56      	ldr	r3, [pc, #344]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	4a55      	ldr	r2, [pc, #340]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7fc f8bb 	bl	8001118 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7fc f8b7 	bl	8001118 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e219      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x35e>
 8004fc4:	e018      	b.n	8004ff8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	4a48      	ldr	r2, [pc, #288]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fc f8a1 	bl	8001118 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fc f89d 	bl	8001118 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1ff      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fec:	4b3f      	ldr	r3, [pc, #252]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d036      	beq.n	8005072 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d019      	beq.n	8005040 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800500c:	4b37      	ldr	r3, [pc, #220]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a36      	ldr	r2, [pc, #216]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8005012:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005018:	f7fc f87e 	bl	8001118 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005020:	f7fc f87a 	bl	8001118 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1dc      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005032:	4b2e      	ldr	r3, [pc, #184]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x3d8>
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005040:	4b2a      	ldr	r3, [pc, #168]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a29      	ldr	r2, [pc, #164]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8005046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800504a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800504c:	f7fc f864 	bl	8001118 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005054:	f7fc f860 	bl	8001118 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1c2      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005066:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8086 	beq.w	800518c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005080:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x4a8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_RCC_OscConfig+0x4a8>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800508a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508c:	f7fc f844 	bl	8001118 <HAL_GetTick>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fc f840 	bl	8001118 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	@ 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1a2      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_RCC_OscConfig+0x4a8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d106      	bne.n	80050c8 <HAL_RCC_OscConfig+0x480>
 80050ba:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050be:	4a0b      	ldr	r2, [pc, #44]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c6:	e032      	b.n	800512e <HAL_RCC_OscConfig+0x4e6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d111      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4ac>
 80050d0:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d4:	4a05      	ldr	r2, [pc, #20]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	6713      	str	r3, [r2, #112]	@ 0x70
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e0:	4a02      	ldr	r2, [pc, #8]	@ (80050ec <HAL_RCC_OscConfig+0x4a4>)
 80050e2:	f023 0304 	bic.w	r3, r3, #4
 80050e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e8:	e021      	b.n	800512e <HAL_RCC_OscConfig+0x4e6>
 80050ea:	bf00      	nop
 80050ec:	58024400 	.word	0x58024400
 80050f0:	58024800 	.word	0x58024800
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d10c      	bne.n	8005116 <HAL_RCC_OscConfig+0x4ce>
 80050fc:	4b83      	ldr	r3, [pc, #524]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	4a82      	ldr	r2, [pc, #520]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6713      	str	r3, [r2, #112]	@ 0x70
 8005108:	4b80      	ldr	r3, [pc, #512]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	4a7f      	ldr	r2, [pc, #508]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	@ 0x70
 8005114:	e00b      	b.n	800512e <HAL_RCC_OscConfig+0x4e6>
 8005116:	4b7d      	ldr	r3, [pc, #500]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	4a7c      	ldr	r2, [pc, #496]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	6713      	str	r3, [r2, #112]	@ 0x70
 8005122:	4b7a      	ldr	r3, [pc, #488]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	4a79      	ldr	r2, [pc, #484]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d015      	beq.n	8005162 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fb ffef 	bl	8001118 <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fb ffeb 	bl	8001118 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e14b      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005154:	4b6d      	ldr	r3, [pc, #436]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ee      	beq.n	800513e <HAL_RCC_OscConfig+0x4f6>
 8005160:	e014      	b.n	800518c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fb ffd9 	bl	8001118 <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fb ffd5 	bl	8001118 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e135      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005180:	4b62      	ldr	r3, [pc, #392]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ee      	bne.n	800516a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 812a 	beq.w	80053ea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005196:	4b5d      	ldr	r3, [pc, #372]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	2b18      	cmp	r3, #24
 80051a0:	f000 80ba 	beq.w	8005318 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 8095 	bne.w	80052d8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ae:	4b57      	ldr	r3, [pc, #348]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a56      	ldr	r2, [pc, #344]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80051b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fb ffad 	bl	8001118 <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fb ffa9 	bl	8001118 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e10b      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051d4:	4b4d      	ldr	r3, [pc, #308]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b4a      	ldr	r3, [pc, #296]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005310 <HAL_RCC_OscConfig+0x6c8>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	430a      	orrs	r2, r1
 80051f4:	4945      	ldr	r1, [pc, #276]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fe:	3b01      	subs	r3, #1
 8005200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005208:	3b01      	subs	r3, #1
 800520a:	025b      	lsls	r3, r3, #9
 800520c:	b29b      	uxth	r3, r3
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	3b01      	subs	r3, #1
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	3b01      	subs	r3, #1
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800522a:	4938      	ldr	r1, [pc, #224]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005230:	4b36      	ldr	r3, [pc, #216]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	4a35      	ldr	r2, [pc, #212]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800523c:	4b33      	ldr	r3, [pc, #204]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800523e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0x6cc>)
 8005242:	4013      	ands	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005248:	00d2      	lsls	r2, r2, #3
 800524a:	4930      	ldr	r1, [pc, #192]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005250:	4b2e      	ldr	r3, [pc, #184]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	f023 020c 	bic.w	r2, r3, #12
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	492b      	ldr	r1, [pc, #172]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005262:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	f023 0202 	bic.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	4927      	ldr	r1, [pc, #156]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	4a24      	ldr	r2, [pc, #144]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005280:	4b22      	ldr	r3, [pc, #136]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	4a21      	ldr	r2, [pc, #132]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800528c:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005298:	4b1c      	ldr	r3, [pc, #112]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4a1b      	ldr	r2, [pc, #108]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a4:	4b19      	ldr	r3, [pc, #100]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a18      	ldr	r2, [pc, #96]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fb ff32 	bl	8001118 <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fb ff2e 	bl	8001118 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e090      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x670>
 80052d6:	e088      	b.n	80053ea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fb ff18 	bl	8001118 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fb ff14 	bl	8001118 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e076      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052fe:	4b03      	ldr	r3, [pc, #12]	@ (800530c <HAL_RCC_OscConfig+0x6c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x6a4>
 800530a:	e06e      	b.n	80053ea <HAL_RCC_OscConfig+0x7a2>
 800530c:	58024400 	.word	0x58024400
 8005310:	fffffc0c 	.word	0xfffffc0c
 8005314:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005318:	4b36      	ldr	r3, [pc, #216]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800531e:	4b35      	ldr	r3, [pc, #212]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	2b01      	cmp	r3, #1
 800532a:	d031      	beq.n	8005390 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d12a      	bne.n	8005390 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d122      	bne.n	8005390 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d11a      	bne.n	8005390 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0a5b      	lsrs	r3, r3, #9
 800535e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d111      	bne.n	8005390 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d108      	bne.n	8005390 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e02b      	b.n	80053ec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005394:	4b17      	ldr	r3, [pc, #92]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 8005396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800539e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d01f      	beq.n	80053ea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053aa:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	4a11      	ldr	r2, [pc, #68]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053b6:	f7fb feaf 	bl	8001118 <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053bc:	bf00      	nop
 80053be:	f7fb feab 	bl	8001118 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d0f9      	beq.n	80053be <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053ca:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ce:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <HAL_RCC_OscConfig+0x7b0>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053d6:	00d2      	lsls	r2, r2, #3
 80053d8:	4906      	ldr	r1, [pc, #24]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4a04      	ldr	r2, [pc, #16]	@ (80053f4 <HAL_RCC_OscConfig+0x7ac>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3730      	adds	r7, #48	@ 0x30
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	58024400 	.word	0x58024400
 80053f8:	ffff0007 	.word	0xffff0007

080053fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e19c      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005410:	4b8a      	ldr	r3, [pc, #552]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d910      	bls.n	8005440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b87      	ldr	r3, [pc, #540]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 020f 	bic.w	r2, r3, #15
 8005426:	4985      	ldr	r1, [pc, #532]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b83      	ldr	r3, [pc, #524]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e184      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b7b      	ldr	r3, [pc, #492]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005458:	429a      	cmp	r2, r3
 800545a:	d908      	bls.n	800546e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800545c:	4b78      	ldr	r3, [pc, #480]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4975      	ldr	r1, [pc, #468]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800546a:	4313      	orrs	r3, r2
 800546c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d010      	beq.n	800549c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	4b70      	ldr	r3, [pc, #448]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005486:	429a      	cmp	r2, r3
 8005488:	d908      	bls.n	800549c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800548a:	4b6d      	ldr	r3, [pc, #436]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	496a      	ldr	r1, [pc, #424]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005498:	4313      	orrs	r3, r2
 800549a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	4b64      	ldr	r3, [pc, #400]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054b8:	4b61      	ldr	r3, [pc, #388]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	495e      	ldr	r1, [pc, #376]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	4b59      	ldr	r3, [pc, #356]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d908      	bls.n	80054f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054e6:	4b56      	ldr	r3, [pc, #344]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4953      	ldr	r1, [pc, #332]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d010      	beq.n	8005526 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b4d      	ldr	r3, [pc, #308]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	429a      	cmp	r2, r3
 8005512:	d908      	bls.n	8005526 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b4a      	ldr	r3, [pc, #296]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f023 020f 	bic.w	r2, r3, #15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4947      	ldr	r1, [pc, #284]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005522:	4313      	orrs	r3, r2
 8005524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d055      	beq.n	80055de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005532:	4b43      	ldr	r3, [pc, #268]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	4940      	ldr	r1, [pc, #256]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005540:	4313      	orrs	r3, r2
 8005542:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d107      	bne.n	800555c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800554c:	4b3c      	ldr	r3, [pc, #240]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d121      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0f6      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d107      	bne.n	8005574 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005564:	4b36      	ldr	r3, [pc, #216]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d115      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0ea      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800557c:	4b30      	ldr	r3, [pc, #192]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d109      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0de      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558c:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0d6      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800559c:	4b28      	ldr	r3, [pc, #160]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f023 0207 	bic.w	r2, r3, #7
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4925      	ldr	r1, [pc, #148]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ae:	f7fb fdb3 	bl	8001118 <HAL_GetTick>
 80055b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b6:	f7fb fdaf 	bl	8001118 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e0be      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	429a      	cmp	r2, r3
 80055dc:	d1eb      	bne.n	80055b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d010      	beq.n	800560c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d208      	bcs.n	800560c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fa:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f023 020f 	bic.w	r2, r3, #15
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	490e      	ldr	r1, [pc, #56]	@ (8005640 <HAL_RCC_ClockConfig+0x244>)
 8005608:	4313      	orrs	r3, r2
 800560a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d214      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b08      	ldr	r3, [pc, #32]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 020f 	bic.w	r2, r3, #15
 8005622:	4906      	ldr	r1, [pc, #24]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b04      	ldr	r3, [pc, #16]	@ (800563c <HAL_RCC_ClockConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d005      	beq.n	8005644 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e086      	b.n	800574a <HAL_RCC_ClockConfig+0x34e>
 800563c:	52002000 	.word	0x52002000
 8005640:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	4b3f      	ldr	r3, [pc, #252]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800565c:	429a      	cmp	r2, r3
 800565e:	d208      	bcs.n	8005672 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005660:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4939      	ldr	r1, [pc, #228]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 800566e:	4313      	orrs	r3, r2
 8005670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d010      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	4b34      	ldr	r3, [pc, #208]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800568a:	429a      	cmp	r2, r3
 800568c:	d208      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800568e:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	492e      	ldr	r1, [pc, #184]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 800569c:	4313      	orrs	r3, r2
 800569e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d208      	bcs.n	80056ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056bc:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	4922      	ldr	r1, [pc, #136]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d208      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4917      	ldr	r1, [pc, #92]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056fc:	f000 f834 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	4912      	ldr	r1, [pc, #72]	@ (8005758 <HAL_RCC_ClockConfig+0x35c>)
 800570e:	5ccb      	ldrb	r3, [r1, r3]
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800571a:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <HAL_RCC_ClockConfig+0x358>)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	4a0d      	ldr	r2, [pc, #52]	@ (8005758 <HAL_RCC_ClockConfig+0x35c>)
 8005724:	5cd3      	ldrb	r3, [r2, r3]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	4a0a      	ldr	r2, [pc, #40]	@ (800575c <HAL_RCC_ClockConfig+0x360>)
 8005732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_RCC_ClockConfig+0x364>)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <HAL_RCC_ClockConfig+0x368>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fb fca0 	bl	8001084 <HAL_InitTick>
 8005744:	4603      	mov	r3, r0
 8005746:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	58024400 	.word	0x58024400
 8005758:	0800a1c4 	.word	0x0800a1c4
 800575c:	24000004 	.word	0x24000004
 8005760:	24000000 	.word	0x24000000
 8005764:	24000008 	.word	0x24000008

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	@ 0x24
 800576c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800576e:	4bb3      	ldr	r3, [pc, #716]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005776:	2b18      	cmp	r3, #24
 8005778:	f200 8155 	bhi.w	8005a26 <HAL_RCC_GetSysClockFreq+0x2be>
 800577c:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <HAL_RCC_GetSysClockFreq+0x1c>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	080057e9 	.word	0x080057e9
 8005788:	08005a27 	.word	0x08005a27
 800578c:	08005a27 	.word	0x08005a27
 8005790:	08005a27 	.word	0x08005a27
 8005794:	08005a27 	.word	0x08005a27
 8005798:	08005a27 	.word	0x08005a27
 800579c:	08005a27 	.word	0x08005a27
 80057a0:	08005a27 	.word	0x08005a27
 80057a4:	0800580f 	.word	0x0800580f
 80057a8:	08005a27 	.word	0x08005a27
 80057ac:	08005a27 	.word	0x08005a27
 80057b0:	08005a27 	.word	0x08005a27
 80057b4:	08005a27 	.word	0x08005a27
 80057b8:	08005a27 	.word	0x08005a27
 80057bc:	08005a27 	.word	0x08005a27
 80057c0:	08005a27 	.word	0x08005a27
 80057c4:	08005815 	.word	0x08005815
 80057c8:	08005a27 	.word	0x08005a27
 80057cc:	08005a27 	.word	0x08005a27
 80057d0:	08005a27 	.word	0x08005a27
 80057d4:	08005a27 	.word	0x08005a27
 80057d8:	08005a27 	.word	0x08005a27
 80057dc:	08005a27 	.word	0x08005a27
 80057e0:	08005a27 	.word	0x08005a27
 80057e4:	0800581b 	.word	0x0800581b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057e8:	4b94      	ldr	r3, [pc, #592]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057f4:	4b91      	ldr	r3, [pc, #580]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	4a90      	ldr	r2, [pc, #576]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005806:	e111      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005808:	4b8d      	ldr	r3, [pc, #564]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800580a:	61bb      	str	r3, [r7, #24]
      break;
 800580c:	e10e      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800580e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005810:	61bb      	str	r3, [r7, #24]
      break;
 8005812:	e10b      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005814:	4b8c      	ldr	r3, [pc, #560]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005816:	61bb      	str	r3, [r7, #24]
      break;
 8005818:	e108      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800581a:	4b88      	ldr	r3, [pc, #544]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005824:	4b85      	ldr	r3, [pc, #532]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800582e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005830:	4b82      	ldr	r3, [pc, #520]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800583a:	4b80      	ldr	r3, [pc, #512]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80e1 	beq.w	8005a20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b02      	cmp	r3, #2
 8005862:	f000 8083 	beq.w	800596c <HAL_RCC_GetSysClockFreq+0x204>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b02      	cmp	r3, #2
 800586a:	f200 80a1 	bhi.w	80059b0 <HAL_RCC_GetSysClockFreq+0x248>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x114>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d056      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x1c0>
 800587a:	e099      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02d      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005888:	4b6c      	ldr	r3, [pc, #432]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	08db      	lsrs	r3, r3, #3
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	4a6b      	ldr	r2, [pc, #428]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b2:	4b62      	ldr	r3, [pc, #392]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058e2:	e087      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f6:	4b51      	ldr	r3, [pc, #324]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005906:	ed97 6a02 	vldr	s12, [r7, #8]
 800590a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800590e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005926:	e065      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005932:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593a:	4b40      	ldr	r3, [pc, #256]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	ed97 6a02 	vldr	s12, [r7, #8]
 800594e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800596a:	e043      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2f0>
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005992:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ae:	e021      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059f4:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f8:	0a5b      	lsrs	r3, r3, #9
 80059fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059fe:	3301      	adds	r3, #1
 8005a00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a18:	ee17 3a90 	vmov	r3, s15
 8005a1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a1e:	e005      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
      break;
 8005a24:	e002      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a26:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a28:	61bb      	str	r3, [r7, #24]
      break;
 8005a2a:	bf00      	nop
  }

  return sysclockfreq;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3724      	adds	r7, #36	@ 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	03d09000 	.word	0x03d09000
 8005a44:	003d0900 	.word	0x003d0900
 8005a48:	007a1200 	.word	0x007a1200
 8005a4c:	46000000 	.word	0x46000000
 8005a50:	4c742400 	.word	0x4c742400
 8005a54:	4a742400 	.word	0x4a742400
 8005a58:	4af42400 	.word	0x4af42400

08005a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a62:	f7ff fe81 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8005a66:	4602      	mov	r2, r0
 8005a68:	4b10      	ldr	r3, [pc, #64]	@ (8005aac <HAL_RCC_GetHCLKFreq+0x50>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	490f      	ldr	r1, [pc, #60]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a74:	5ccb      	ldrb	r3, [r1, r3]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a80:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <HAL_RCC_GetHCLKFreq+0x50>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a07      	ldr	r2, [pc, #28]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a9a:	4a07      	ldr	r2, [pc, #28]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	0800a1c4 	.word	0x0800a1c4
 8005ab4:	24000004 	.word	0x24000004
 8005ab8:	24000000 	.word	0x24000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ac0:	f7ff ffcc 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	4904      	ldr	r1, [pc, #16]	@ (8005ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ad2:	5ccb      	ldrb	r3, [r1, r3]
 8005ad4:	f003 031f 	and.w	r3, r3, #31
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	0800a1c4 	.word	0x0800a1c4

08005ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005aec:	f7ff ffb6 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4904      	ldr	r1, [pc, #16]	@ (8005b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	0800a1c4 	.word	0x0800a1c4

08005b14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b18:	b0c6      	sub	sp, #280	@ 0x118
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b20:	2300      	movs	r3, #0
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b38:	2500      	movs	r5, #0
 8005b3a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b3e:	d049      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b4a:	d02f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b50:	d828      	bhi.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b56:	d01a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b5c:	d822      	bhi.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b66:	d007      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b68:	e01c      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6a:	4bab      	ldr	r3, [pc, #684]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	4aaa      	ldr	r2, [pc, #680]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b76:	e01a      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	2102      	movs	r1, #2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 fc25 	bl	80073d0 <RCCEx_PLL2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b8c:	e00f      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b92:	3328      	adds	r3, #40	@ 0x28
 8005b94:	2102      	movs	r1, #2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fccc 	bl	8007534 <RCCEx_PLL3_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bb6:	4b98      	ldr	r3, [pc, #608]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc4:	4a94      	ldr	r2, [pc, #592]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005be0:	f04f 0900 	mov.w	r9, #0
 8005be4:	ea58 0309 	orrs.w	r3, r8, r9
 8005be8:	d047      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d82a      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c11 	.word	0x08005c11
 8005c00:	08005c1f 	.word	0x08005c1f
 8005c04:	08005c35 	.word	0x08005c35
 8005c08:	08005c53 	.word	0x08005c53
 8005c0c:	08005c53 	.word	0x08005c53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b81      	ldr	r3, [pc, #516]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4a80      	ldr	r2, [pc, #512]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c1c:	e01a      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	3308      	adds	r3, #8
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fbd2 	bl	80073d0 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c32:	e00f      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c38:	3328      	adds	r3, #40	@ 0x28
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 fc79 	bl	8007534 <RCCEx_PLL3_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c48:	e004      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c50:	e000      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c60:	f023 0107 	bic.w	r1, r3, #7
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c70:	e003      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c86:	f04f 0b00 	mov.w	fp, #0
 8005c8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c8e:	d05b      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c98:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c9c:	d03b      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c9e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ca2:	d834      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ca4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ca8:	d037      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005caa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cae:	d82e      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cb4:	d033      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cba:	d828      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc0:	d01a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc6:	d822      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd0:	d007      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005cd2:	e01c      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b50      	ldr	r3, [pc, #320]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce0:	e01e      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fb70 	bl	80073d0 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cf6:	e013      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	3328      	adds	r3, #40	@ 0x28
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fc17 	bl	8007534 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d14:	e004      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10b      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d28:	4b3b      	ldr	r3, [pc, #236]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d38:	4a37      	ldr	r2, [pc, #220]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d3e:	e003      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d5e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d62:	460b      	mov	r3, r1
 8005d64:	4313      	orrs	r3, r2
 8005d66:	d05d      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d74:	d03b      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d7a:	d834      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d80:	d037      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d86:	d82e      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d8c:	d033      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d92:	d828      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d98:	d01a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d9e:	d822      	bhi.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da8:	d007      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005daa:	e01c      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dac:	4b1a      	ldr	r3, [pc, #104]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db8:	e01e      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 fb04 	bl	80073d0 <RCCEx_PLL2_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dce:	e013      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	3328      	adds	r3, #40	@ 0x28
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 fbab 	bl	8007534 <RCCEx_PLL3_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e10:	4a01      	ldr	r2, [pc, #4]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	e005      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d03a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4a:	2b30      	cmp	r3, #48	@ 0x30
 8005e4c:	d01f      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e4e:	2b30      	cmp	r3, #48	@ 0x30
 8005e50:	d819      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d00c      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d815      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d019      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d111      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e62:	4baa      	ldr	r3, [pc, #680]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	4aa9      	ldr	r2, [pc, #676]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e6e:	e011      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	3308      	adds	r3, #8
 8005e76:	2102      	movs	r1, #2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 faa9 	bl	80073d0 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e84:	e006      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e9c:	4b9b      	ldr	r3, [pc, #620]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eaa:	4a98      	ldr	r2, [pc, #608]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eac:	430b      	orrs	r3, r1
 8005eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005eb0:	e003      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ed0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	d051      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ee4:	d035      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eea:	d82e      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef0:	d031      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef6:	d828      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005efc:	d01a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f02:	d822      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0c:	d007      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f0e:	e01c      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f10:	4b7e      	ldr	r3, [pc, #504]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	4a7d      	ldr	r2, [pc, #500]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f1c:	e01c      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	3308      	adds	r3, #8
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fa52 	bl	80073d0 <RCCEx_PLL2_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f32:	e011      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	3328      	adds	r3, #40	@ 0x28
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 faf9 	bl	8007534 <RCCEx_PLL3_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f48:	e006      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f50:	e002      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f52:	bf00      	nop
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f60:	4b6a      	ldr	r3, [pc, #424]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6e:	4a67      	ldr	r2, [pc, #412]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d053      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fa8:	d033      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fae:	d82c      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fb4:	d02f      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fba:	d826      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fc0:	d02b      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005fc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fc6:	d820      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d012      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fd2:	d81a      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d022      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fdc:	d115      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f9f2 	bl	80073d0 <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e015      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff8:	3328      	adds	r3, #40	@ 0x28
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fa99 	bl	8007534 <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006008:	e00a      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006010:	e006      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006012:	bf00      	nop
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006028:	4b38      	ldr	r3, [pc, #224]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800602a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006036:	4a35      	ldr	r2, [pc, #212]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6513      	str	r3, [r2, #80]	@ 0x50
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006042:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006056:	2300      	movs	r3, #0
 8006058:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800605c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d058      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800606e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006072:	d033      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006078:	d82c      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d02f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d826      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800608a:	d02b      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800608c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006090:	d820      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006096:	d012      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609c:	d81a      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d022      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a6:	d115      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ac:	3308      	adds	r3, #8
 80060ae:	2101      	movs	r1, #1
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 f98d 	bl	80073d0 <RCCEx_PLL2_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060bc:	e015      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c2:	3328      	adds	r3, #40	@ 0x28
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fa34 	bl	8007534 <RCCEx_PLL3_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060d2:	e00a      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060da:	e006      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060dc:	bf00      	nop
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e0:	bf00      	nop
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060f2:	4b06      	ldr	r3, [pc, #24]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006102:	4a02      	ldr	r2, [pc, #8]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6593      	str	r3, [r2, #88]	@ 0x58
 8006108:	e006      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006114:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800612e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d037      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006142:	d00e      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006148:	d816      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d018      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800614e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006152:	d111      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006154:	4bc4      	ldr	r3, [pc, #784]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4ac3      	ldr	r2, [pc, #780]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006160:	e00f      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006166:	3308      	adds	r3, #8
 8006168:	2101      	movs	r1, #1
 800616a:	4618      	mov	r0, r3
 800616c:	f001 f930 	bl	80073d0 <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800618a:	4bb7      	ldr	r3, [pc, #732]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006198:	4ab3      	ldr	r2, [pc, #716]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800619a:	430b      	orrs	r3, r1
 800619c:	6513      	str	r3, [r2, #80]	@ 0x50
 800619e:	e003      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061c2:	460b      	mov	r3, r1
 80061c4:	4313      	orrs	r3, r2
 80061c6:	d039      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d81c      	bhi.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061d2:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	08006215 	.word	0x08006215
 80061dc:	080061e9 	.word	0x080061e9
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	08006215 	.word	0x08006215
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e8:	4b9f      	ldr	r3, [pc, #636]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	4a9e      	ldr	r2, [pc, #632]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061f4:	e00f      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fa:	3308      	adds	r3, #8
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f8e6 	bl	80073d0 <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800620a:	e004      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800621e:	4b92      	ldr	r3, [pc, #584]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006222:	f023 0103 	bic.w	r1, r3, #3
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800622c:	4a8e      	ldr	r2, [pc, #568]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800622e:	430b      	orrs	r3, r1
 8006230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006232:	e003      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	f000 8099 	beq.w	8006390 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625e:	4b83      	ldr	r3, [pc, #524]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a82      	ldr	r2, [pc, #520]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800626a:	f7fa ff55 	bl	8001118 <HAL_GetTick>
 800626e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006272:	e00b      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006274:	f7fa ff50 	bl	8001118 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	@ 0x64
 8006282:	d903      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628c:	4b77      	ldr	r3, [pc, #476]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ed      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629c:	2b00      	cmp	r3, #0
 800629e:	d173      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062a0:	4b71      	ldr	r3, [pc, #452]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062ac:	4053      	eors	r3, r2
 80062ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d015      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b6:	4b6c      	ldr	r3, [pc, #432]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c2:	4b69      	ldr	r3, [pc, #420]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	4a68      	ldr	r2, [pc, #416]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ce:	4b66      	ldr	r3, [pc, #408]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d2:	4a65      	ldr	r2, [pc, #404]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062da:	4a63      	ldr	r2, [pc, #396]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d118      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fa ff12 	bl	8001118 <HAL_GetTick>
 80062f4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062f8:	e00d      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fa ff0d 	bl	8001118 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	f241 3388 	movw	r3, #5000	@ 0x1388
 800630a:	429a      	cmp	r2, r3
 800630c:	d903      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006314:	e005      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006316:	4b54      	ldr	r3, [pc, #336]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0eb      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006326:	2b00      	cmp	r3, #0
 8006328:	d129      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800633a:	d10e      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800633c:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800634c:	091a      	lsrs	r2, r3, #4
 800634e:	4b48      	ldr	r3, [pc, #288]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006350:	4013      	ands	r3, r2
 8006352:	4a45      	ldr	r2, [pc, #276]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6113      	str	r3, [r2, #16]
 8006358:	e005      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800635a:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	4a42      	ldr	r2, [pc, #264]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006360:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006364:	6113      	str	r3, [r2, #16]
 8006366:	4b40      	ldr	r3, [pc, #256]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006368:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006376:	4a3c      	ldr	r2, [pc, #240]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006378:	430b      	orrs	r3, r1
 800637a:	6713      	str	r3, [r2, #112]	@ 0x70
 800637c:	e008      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800637e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006382:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006386:	e003      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 0301 	and.w	r3, r2, #1
 800639c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f000 808f 	beq.w	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063b8:	2b28      	cmp	r3, #40	@ 0x28
 80063ba:	d871      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063bc:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080064a9 	.word	0x080064a9
 80063c8:	080064a1 	.word	0x080064a1
 80063cc:	080064a1 	.word	0x080064a1
 80063d0:	080064a1 	.word	0x080064a1
 80063d4:	080064a1 	.word	0x080064a1
 80063d8:	080064a1 	.word	0x080064a1
 80063dc:	080064a1 	.word	0x080064a1
 80063e0:	080064a1 	.word	0x080064a1
 80063e4:	08006475 	.word	0x08006475
 80063e8:	080064a1 	.word	0x080064a1
 80063ec:	080064a1 	.word	0x080064a1
 80063f0:	080064a1 	.word	0x080064a1
 80063f4:	080064a1 	.word	0x080064a1
 80063f8:	080064a1 	.word	0x080064a1
 80063fc:	080064a1 	.word	0x080064a1
 8006400:	080064a1 	.word	0x080064a1
 8006404:	0800648b 	.word	0x0800648b
 8006408:	080064a1 	.word	0x080064a1
 800640c:	080064a1 	.word	0x080064a1
 8006410:	080064a1 	.word	0x080064a1
 8006414:	080064a1 	.word	0x080064a1
 8006418:	080064a1 	.word	0x080064a1
 800641c:	080064a1 	.word	0x080064a1
 8006420:	080064a1 	.word	0x080064a1
 8006424:	080064a9 	.word	0x080064a9
 8006428:	080064a1 	.word	0x080064a1
 800642c:	080064a1 	.word	0x080064a1
 8006430:	080064a1 	.word	0x080064a1
 8006434:	080064a1 	.word	0x080064a1
 8006438:	080064a1 	.word	0x080064a1
 800643c:	080064a1 	.word	0x080064a1
 8006440:	080064a1 	.word	0x080064a1
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a1 	.word	0x080064a1
 800644c:	080064a1 	.word	0x080064a1
 8006450:	080064a1 	.word	0x080064a1
 8006454:	080064a1 	.word	0x080064a1
 8006458:	080064a1 	.word	0x080064a1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064a1 	.word	0x080064a1
 8006464:	080064a9 	.word	0x080064a9
 8006468:	58024400 	.word	0x58024400
 800646c:	58024800 	.word	0x58024800
 8006470:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	3308      	adds	r3, #8
 800647a:	2101      	movs	r1, #1
 800647c:	4618      	mov	r0, r3
 800647e:	f000 ffa7 	bl	80073d0 <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006488:	e00f      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648e:	3328      	adds	r3, #40	@ 0x28
 8006490:	2101      	movs	r1, #1
 8006492:	4618      	mov	r0, r3
 8006494:	f001 f84e 	bl	8007534 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800649e:	e004      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064b2:	4bbf      	ldr	r3, [pc, #764]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c0:	4abb      	ldr	r2, [pc, #748]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80064c6:	e003      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f002 0302 	and.w	r3, r2, #2
 80064dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064e0:	2300      	movs	r3, #0
 80064e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4313      	orrs	r3, r2
 80064ee:	d041      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d824      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	0800654d 	.word	0x0800654d
 8006504:	08006519 	.word	0x08006519
 8006508:	0800652f 	.word	0x0800652f
 800650c:	0800654d 	.word	0x0800654d
 8006510:	0800654d 	.word	0x0800654d
 8006514:	0800654d 	.word	0x0800654d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	3308      	adds	r3, #8
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 ff55 	bl	80073d0 <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800652c:	e00f      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	3328      	adds	r3, #40	@ 0x28
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fffc 	bl	8007534 <RCCEx_PLL3_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006542:	e004      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800654c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800654e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006556:	4b96      	ldr	r3, [pc, #600]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	f023 0107 	bic.w	r1, r3, #7
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006564:	4a92      	ldr	r2, [pc, #584]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006566:	430b      	orrs	r3, r1
 8006568:	6553      	str	r3, [r2, #84]	@ 0x54
 800656a:	e003      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f002 0304 	and.w	r3, r2, #4
 8006580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800658a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	d044      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659c:	2b05      	cmp	r3, #5
 800659e:	d825      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065c1 	.word	0x080065c1
 80065b0:	080065d7 	.word	0x080065d7
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065f5 	.word	0x080065f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	3308      	adds	r3, #8
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ff01 	bl	80073d0 <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065d4:	e00f      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	3328      	adds	r3, #40	@ 0x28
 80065dc:	2101      	movs	r1, #1
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 ffa8 	bl	8007534 <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065ea:	e004      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065f2:	e000      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065fe:	4b6c      	ldr	r3, [pc, #432]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006602:	f023 0107 	bic.w	r1, r3, #7
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660e:	4a68      	ldr	r2, [pc, #416]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006610:	430b      	orrs	r3, r1
 8006612:	6593      	str	r3, [r2, #88]	@ 0x58
 8006614:	e003      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f002 0320 	and.w	r3, r2, #32
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800662e:	2300      	movs	r3, #0
 8006630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006634:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d055      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800663e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800664a:	d033      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800664c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006650:	d82c      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006656:	d02f      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665c:	d826      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800665e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006662:	d02b      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006668:	d820      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800666a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800666e:	d012      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006674:	d81a      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d022      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800667a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800667e:	d115      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	3308      	adds	r3, #8
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fea1 	bl	80073d0 <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006694:	e015      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669a:	3328      	adds	r3, #40	@ 0x28
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff48 	bl	8007534 <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066aa:	e00a      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066b2:	e006      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066b4:	bf00      	nop
 80066b6:	e004      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066b8:	bf00      	nop
 80066ba:	e002      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ca:	4b39      	ldr	r3, [pc, #228]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066da:	4a35      	ldr	r2, [pc, #212]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6553      	str	r3, [r2, #84]	@ 0x54
 80066e0:	e003      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006700:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006704:	460b      	mov	r3, r1
 8006706:	4313      	orrs	r3, r2
 8006708:	d058      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006712:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006716:	d033      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006718:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800671c:	d82c      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006722:	d02f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006728:	d826      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800672a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800672e:	d02b      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006734:	d820      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800673a:	d012      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800673c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006740:	d81a      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d022      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674a:	d115      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	3308      	adds	r3, #8
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fe3b 	bl	80073d0 <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006760:	e015      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	3328      	adds	r3, #40	@ 0x28
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fee2 	bl	8007534 <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006776:	e00a      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800677e:	e006      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006780:	bf00      	nop
 8006782:	e004      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800678c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10e      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006796:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067a6:	4a02      	ldr	r2, [pc, #8]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ac:	e006      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067ae:	bf00      	nop
 80067b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d055      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067e8:	d033      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067ee:	d82c      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f4:	d02f      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067fa:	d826      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006800:	d02b      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006802:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006806:	d820      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800680c:	d012      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800680e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006812:	d81a      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d022      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681c:	d115      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	3308      	adds	r3, #8
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fdd2 	bl	80073d0 <RCCEx_PLL2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006832:	e015      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	3328      	adds	r3, #40	@ 0x28
 800683a:	2102      	movs	r1, #2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fe79 	bl	8007534 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006848:	e00a      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006850:	e006      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006852:	bf00      	nop
 8006854:	e004      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006856:	bf00      	nop
 8006858:	e002      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800685a:	bf00      	nop
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800685e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006868:	4ba0      	ldr	r3, [pc, #640]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006878:	4a9c      	ldr	r2, [pc, #624]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800687a:	430b      	orrs	r3, r1
 800687c:	6593      	str	r3, [r2, #88]	@ 0x58
 800687e:	e003      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f002 0308 	and.w	r3, r2, #8
 8006894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800689e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d01e      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ba:	3328      	adds	r3, #40	@ 0x28
 80068bc:	2102      	movs	r1, #2
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fe38 	bl	8007534 <RCCEx_PLL3_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068d0:	4b86      	ldr	r3, [pc, #536]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e0:	4a82      	ldr	r2, [pc, #520]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068e2:	430b      	orrs	r3, r1
 80068e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f002 0310 	and.w	r3, r2, #16
 80068f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d01e      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800690e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006912:	d10c      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	3328      	adds	r3, #40	@ 0x28
 800691a:	2102      	movs	r1, #2
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fe09 	bl	8007534 <RCCEx_PLL3_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800692e:	4b6f      	ldr	r3, [pc, #444]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800693e:	4a6b      	ldr	r2, [pc, #428]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006940:	430b      	orrs	r3, r1
 8006942:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006950:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006952:	2300      	movs	r3, #0
 8006954:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006956:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800695a:	460b      	mov	r3, r1
 800695c:	4313      	orrs	r3, r2
 800695e:	d03e      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696c:	d022      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006972:	d81b      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697c:	d00b      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800697e:	e015      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	3308      	adds	r3, #8
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fd21 	bl	80073d0 <RCCEx_PLL2_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006994:	e00f      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	3328      	adds	r3, #40	@ 0x28
 800699c:	2102      	movs	r1, #2
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fdc8 	bl	8007534 <RCCEx_PLL3_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069aa:	e004      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069be:	4b4b      	ldr	r3, [pc, #300]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ce:	4a47      	ldr	r2, [pc, #284]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069d4:	e003      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80069ec:	2300      	movs	r3, #0
 80069ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80069f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d03b      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a06:	d01f      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a0c:	d818      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a12:	d003      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a18:	d007      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a1a:	e011      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a1c:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4a32      	ldr	r2, [pc, #200]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a28:	e00f      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	3328      	adds	r3, #40	@ 0x28
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fd7e 	bl	8007534 <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a3e:	e004      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a46:	e000      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a52:	4b26      	ldr	r3, [pc, #152]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a62:	4a22      	ldr	r2, [pc, #136]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a68:	e003      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a80:	2300      	movs	r3, #0
 8006a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a84:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d034      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a9c:	d007      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a9e:	e011      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a11      	ldr	r2, [pc, #68]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006aac:	e00e      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2102      	movs	r1, #2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fc8a 	bl	80073d0 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ac2:	e003      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ad4:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae2:	4a02      	ldr	r2, [pc, #8]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ae8:	e006      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b06:	2300      	movs	r3, #0
 8006b08:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b0a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d00c      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b18:	3328      	adds	r3, #40	@ 0x28
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fd09 	bl	8007534 <RCCEx_PLL3_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b40:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d036      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b54:	d018      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b5a:	d811      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b60:	d014      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b66:	d80b      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d011      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b70:	d106      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b72:	4bb7      	ldr	r3, [pc, #732]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	4ab6      	ldr	r2, [pc, #728]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b7e:	e008      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b88:	bf00      	nop
 8006b8a:	e002      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b9a:	4bad      	ldr	r3, [pc, #692]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ba8:	4aa9      	ldr	r2, [pc, #676]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bae:	e003      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be2:	4a9b      	ldr	r2, [pc, #620]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bfa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c04:	4b92      	ldr	r3, [pc, #584]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c08:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c12:	4a8f      	ldr	r2, [pc, #572]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c26:	2300      	movs	r3, #0
 8006c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c2a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c34:	4b86      	ldr	r3, [pc, #536]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4a85      	ldr	r2, [pc, #532]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c3e:	6113      	str	r3, [r2, #16]
 8006c40:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c42:	6919      	ldr	r1, [r3, #16]
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c4c:	4a80      	ldr	r2, [pc, #512]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c60:	2300      	movs	r3, #0
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c6e:	4b78      	ldr	r3, [pc, #480]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7c:	4a74      	ldr	r2, [pc, #464]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c90:	2300      	movs	r3, #0
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c94:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cae:	4a68      	ldr	r2, [pc, #416]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d011      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fb79 	bl	80073d0 <RCCEx_PLL2_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6239      	str	r1, [r7, #32]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d011      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	3308      	adds	r3, #8
 8006d16:	2101      	movs	r1, #1
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fb59 	bl	80073d0 <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	61b9      	str	r1, [r7, #24]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	d011      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	3308      	adds	r3, #8
 8006d56:	2102      	movs	r1, #2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fb39 	bl	80073d0 <RCCEx_PLL2_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6139      	str	r1, [r7, #16]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d011      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbcb 	bl	8007534 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d011      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd4:	3328      	adds	r3, #40	@ 0x28
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fbab 	bl	8007534 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6039      	str	r1, [r7, #0]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	d011      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	3328      	adds	r3, #40	@ 0x28
 8006e16:	2102      	movs	r1, #2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fb8b 	bl	8007534 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400

08006e54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e58:	f7fe fe00 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	4904      	ldr	r1, [pc, #16]	@ (8006e7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e6a:	5ccb      	ldrb	r3, [r1, r3]
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	58024400 	.word	0x58024400
 8006e7c:	0800a1c4 	.word	0x0800a1c4

08006e80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b089      	sub	sp, #36	@ 0x24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e88:	4ba1      	ldr	r3, [pc, #644]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e92:	4b9f      	ldr	r3, [pc, #636]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	0b1b      	lsrs	r3, r3, #12
 8006e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006eaa:	4b99      	ldr	r3, [pc, #612]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eae:	08db      	lsrs	r3, r3, #3
 8006eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	fb02 f303 	mul.w	r3, r2, r3
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8111 	beq.w	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	f000 8083 	beq.w	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f200 80a1 	bhi.w	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d056      	beq.n	8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eea:	e099      	b.n	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eec:	4b88      	ldr	r3, [pc, #544]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02d      	beq.n	8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef8:	4b85      	ldr	r3, [pc, #532]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	08db      	lsrs	r3, r3, #3
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	4a84      	ldr	r2, [pc, #528]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b7b      	ldr	r3, [pc, #492]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f52:	e087      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f96:	e065      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b59      	ldr	r3, [pc, #356]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fda:	e043      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b48      	ldr	r3, [pc, #288]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800701e:	e021      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007064:	4b2a      	ldr	r3, [pc, #168]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007068:	0a5b      	lsrs	r3, r3, #9
 800706a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800707e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708a:	ee17 2a90 	vmov	r2, s15
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007092:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b8:	ee17 2a90 	vmov	r2, s15
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070c0:	4b13      	ldr	r3, [pc, #76]	@ (8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	0e1b      	lsrs	r3, r3, #24
 80070c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070da:	edd7 6a07 	vldr	s13, [r7, #28]
 80070de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e6:	ee17 2a90 	vmov	r2, s15
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070ee:	e008      	b.n	8007102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	609a      	str	r2, [r3, #8]
}
 8007102:	bf00      	nop
 8007104:	3724      	adds	r7, #36	@ 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	03d09000 	.word	0x03d09000
 8007118:	46000000 	.word	0x46000000
 800711c:	4c742400 	.word	0x4c742400
 8007120:	4a742400 	.word	0x4a742400
 8007124:	4af42400 	.word	0x4af42400

08007128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007130:	4ba1      	ldr	r3, [pc, #644]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800713a:	4b9f      	ldr	r3, [pc, #636]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	0d1b      	lsrs	r3, r3, #20
 8007140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007146:	4b9c      	ldr	r3, [pc, #624]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	0a1b      	lsrs	r3, r3, #8
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007152:	4b99      	ldr	r3, [pc, #612]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007156:	08db      	lsrs	r3, r3, #3
 8007158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	fb02 f303 	mul.w	r3, r2, r3
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8111 	beq.w	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b02      	cmp	r3, #2
 800717a:	f000 8083 	beq.w	8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b02      	cmp	r3, #2
 8007182:	f200 80a1 	bhi.w	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d056      	beq.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007192:	e099      	b.n	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007194:	4b88      	ldr	r3, [pc, #544]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d02d      	beq.n	80071fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a0:	4b85      	ldr	r3, [pc, #532]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	4a84      	ldr	r2, [pc, #528]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
 80071b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ca:	4b7b      	ldr	r3, [pc, #492]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071da:	ed97 6a03 	vldr	s12, [r7, #12]
 80071de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071fa:	e087      	b.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b6a      	ldr	r3, [pc, #424]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007222:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723e:	e065      	b.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b59      	ldr	r3, [pc, #356]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007282:	e043      	b.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b48      	ldr	r3, [pc, #288]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c6:	e021      	b.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b37      	ldr	r3, [pc, #220]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800730c:	4b2a      	ldr	r3, [pc, #168]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007310:	0a5b      	lsrs	r3, r3, #9
 8007312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007326:	edd7 6a07 	vldr	s13, [r7, #28]
 800732a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007332:	ee17 2a90 	vmov	r2, s15
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800733a:	4b1f      	ldr	r3, [pc, #124]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	0c1b      	lsrs	r3, r3, #16
 8007340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007354:	edd7 6a07 	vldr	s13, [r7, #28]
 8007358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007360:	ee17 2a90 	vmov	r2, s15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007368:	4b13      	ldr	r3, [pc, #76]	@ (80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	0e1b      	lsrs	r3, r3, #24
 800736e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800737e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007382:	edd7 6a07 	vldr	s13, [r7, #28]
 8007386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738e:	ee17 2a90 	vmov	r2, s15
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007396:	e008      	b.n	80073aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	609a      	str	r2, [r3, #8]
}
 80073aa:	bf00      	nop
 80073ac:	3724      	adds	r7, #36	@ 0x24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	58024400 	.word	0x58024400
 80073bc:	03d09000 	.word	0x03d09000
 80073c0:	46000000 	.word	0x46000000
 80073c4:	4c742400 	.word	0x4c742400
 80073c8:	4a742400 	.word	0x4a742400
 80073cc:	4af42400 	.word	0x4af42400

080073d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073de:	4b53      	ldr	r3, [pc, #332]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d101      	bne.n	80073ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e099      	b.n	8007522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073ee:	4b4f      	ldr	r3, [pc, #316]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4e      	ldr	r2, [pc, #312]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80073f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073fa:	f7f9 fe8d 	bl	8001118 <HAL_GetTick>
 80073fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007400:	e008      	b.n	8007414 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007402:	f7f9 fe89 	bl	8001118 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e086      	b.n	8007522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007414:	4b45      	ldr	r3, [pc, #276]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f0      	bne.n	8007402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007420:	4b42      	ldr	r3, [pc, #264]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	493f      	ldr	r1, [pc, #252]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007430:	4313      	orrs	r3, r2
 8007432:	628b      	str	r3, [r1, #40]	@ 0x28
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	3b01      	subs	r3, #1
 800743a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	3b01      	subs	r3, #1
 8007444:	025b      	lsls	r3, r3, #9
 8007446:	b29b      	uxth	r3, r3
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	3b01      	subs	r3, #1
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	3b01      	subs	r3, #1
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007464:	4931      	ldr	r1, [pc, #196]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800746a:	4b30      	ldr	r3, [pc, #192]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	492d      	ldr	r1, [pc, #180]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007478:	4313      	orrs	r3, r2
 800747a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800747c:	4b2b      	ldr	r3, [pc, #172]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	f023 0220 	bic.w	r2, r3, #32
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	4928      	ldr	r1, [pc, #160]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 800748a:	4313      	orrs	r3, r2
 800748c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800748e:	4b27      	ldr	r3, [pc, #156]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4a26      	ldr	r2, [pc, #152]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007494:	f023 0310 	bic.w	r3, r3, #16
 8007498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800749a:	4b24      	ldr	r3, [pc, #144]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 800749c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <RCCEx_PLL2_Config+0x160>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	69d2      	ldr	r2, [r2, #28]
 80074a6:	00d2      	lsls	r2, r2, #3
 80074a8:	4920      	ldr	r1, [pc, #128]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074ae:	4b1f      	ldr	r3, [pc, #124]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	4a1e      	ldr	r2, [pc, #120]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074b4:	f043 0310 	orr.w	r3, r3, #16
 80074b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074c0:	4b1a      	ldr	r3, [pc, #104]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074cc:	e00f      	b.n	80074ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d106      	bne.n	80074e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074d4:	4b15      	ldr	r3, [pc, #84]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d8:	4a14      	ldr	r2, [pc, #80]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074e0:	e005      	b.n	80074ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074e2:	4b12      	ldr	r3, [pc, #72]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a11      	ldr	r2, [pc, #68]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074ee:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a0e      	ldr	r2, [pc, #56]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 80074f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fa:	f7f9 fe0d 	bl	8001118 <HAL_GetTick>
 80074fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007500:	e008      	b.n	8007514 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007502:	f7f9 fe09 	bl	8001118 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e006      	b.n	8007522 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007514:	4b05      	ldr	r3, [pc, #20]	@ (800752c <RCCEx_PLL2_Config+0x15c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f0      	beq.n	8007502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	ffff0007 	.word	0xffff0007

08007534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007542:	4b53      	ldr	r3, [pc, #332]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b03      	cmp	r3, #3
 800754c:	d101      	bne.n	8007552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e099      	b.n	8007686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007552:	4b4f      	ldr	r3, [pc, #316]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a4e      	ldr	r2, [pc, #312]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800755c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755e:	f7f9 fddb 	bl	8001118 <HAL_GetTick>
 8007562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007564:	e008      	b.n	8007578 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007566:	f7f9 fdd7 	bl	8001118 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e086      	b.n	8007686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007578:	4b45      	ldr	r3, [pc, #276]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f0      	bne.n	8007566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007584:	4b42      	ldr	r3, [pc, #264]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	051b      	lsls	r3, r3, #20
 8007592:	493f      	ldr	r1, [pc, #252]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	628b      	str	r3, [r1, #40]	@ 0x28
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	3b01      	subs	r3, #1
 800759e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	025b      	lsls	r3, r3, #9
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075c8:	4931      	ldr	r1, [pc, #196]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075ce:	4b30      	ldr	r3, [pc, #192]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	492d      	ldr	r1, [pc, #180]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	4928      	ldr	r1, [pc, #160]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075f2:	4b27      	ldr	r3, [pc, #156]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	4a26      	ldr	r2, [pc, #152]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075fe:	4b24      	ldr	r3, [pc, #144]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007602:	4b24      	ldr	r3, [pc, #144]	@ (8007694 <RCCEx_PLL3_Config+0x160>)
 8007604:	4013      	ands	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	69d2      	ldr	r2, [r2, #28]
 800760a:	00d2      	lsls	r2, r2, #3
 800760c:	4920      	ldr	r1, [pc, #128]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007612:	4b1f      	ldr	r3, [pc, #124]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800761c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007624:	4b1a      	ldr	r3, [pc, #104]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a19      	ldr	r2, [pc, #100]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800762a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007630:	e00f      	b.n	8007652 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007638:	4b15      	ldr	r3, [pc, #84]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	4a14      	ldr	r2, [pc, #80]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800763e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007644:	e005      	b.n	8007652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007646:	4b12      	ldr	r3, [pc, #72]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	4a11      	ldr	r2, [pc, #68]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800764c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007652:	4b0f      	ldr	r3, [pc, #60]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0e      	ldr	r2, [pc, #56]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 8007658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800765c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765e:	f7f9 fd5b 	bl	8001118 <HAL_GetTick>
 8007662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007664:	e008      	b.n	8007678 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007666:	f7f9 fd57 	bl	8001118 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e006      	b.n	8007686 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007678:	4b05      	ldr	r3, [pc, #20]	@ (8007690 <RCCEx_PLL3_Config+0x15c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400
 8007694:	ffff0007 	.word	0xffff0007

08007698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e042      	b.n	8007730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7f9 fbcf 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2224      	movs	r2, #36	@ 0x24
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0201 	bic.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fbdc 	bl	8008ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fd6d 	bl	80081c8 <UART_SetConfig>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e01b      	b.n	8007730 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fc5b 	bl	8008fe4 <UART_CheckIdleState>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	@ 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774e:	2b20      	cmp	r3, #32
 8007750:	d17b      	bne.n	800784a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <HAL_UART_Transmit+0x26>
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e074      	b.n	800784c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2221      	movs	r2, #33	@ 0x21
 800776e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007772:	f7f9 fcd1 	bl	8001118 <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007790:	d108      	bne.n	80077a4 <HAL_UART_Transmit+0x6c>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	e003      	b.n	80077ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ac:	e030      	b.n	8007810 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2200      	movs	r2, #0
 80077b6:	2180      	movs	r1, #128	@ 0x80
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f001 fcbd 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e03d      	b.n	800784c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	3302      	adds	r3, #2
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e007      	b.n	80077fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1c8      	bne.n	80077ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	2140      	movs	r1, #64	@ 0x40
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f001 fc86 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e006      	b.n	800784c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e000      	b.n	800784c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800784a:	2302      	movs	r3, #2
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007854:	b480      	push	{r7}
 8007856:	b091      	sub	sp, #68	@ 0x44
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007868:	2b20      	cmp	r3, #32
 800786a:	d178      	bne.n	800795e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_UART_Transmit_IT+0x24>
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e071      	b.n	8007960 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2221      	movs	r2, #33	@ 0x21
 80078a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078b0:	d12a      	bne.n	8007908 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ba:	d107      	bne.n	80078cc <HAL_UART_Transmit_IT+0x78>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a29      	ldr	r2, [pc, #164]	@ (800796c <HAL_UART_Transmit_IT+0x118>)
 80078c8:	679a      	str	r2, [r3, #120]	@ 0x78
 80078ca:	e002      	b.n	80078d2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a28      	ldr	r2, [pc, #160]	@ (8007970 <HAL_UART_Transmit_IT+0x11c>)
 80078d0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80078f4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <HAL_UART_Transmit_IT+0x7e>
 8007906:	e028      	b.n	800795a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007910:	d107      	bne.n	8007922 <HAL_UART_Transmit_IT+0xce>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4a15      	ldr	r2, [pc, #84]	@ (8007974 <HAL_UART_Transmit_IT+0x120>)
 800791e:	679a      	str	r2, [r3, #120]	@ 0x78
 8007920:	e002      	b.n	8007928 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4a14      	ldr	r2, [pc, #80]	@ (8007978 <HAL_UART_Transmit_IT+0x124>)
 8007926:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	613b      	str	r3, [r7, #16]
   return(result);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007946:	623b      	str	r3, [r7, #32]
 8007948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	61bb      	str	r3, [r7, #24]
   return(result);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e6      	bne.n	8007928 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e000      	b.n	8007960 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
  }
}
 8007960:	4618      	mov	r0, r3
 8007962:	3744      	adds	r7, #68	@ 0x44
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	0800991d 	.word	0x0800991d
 8007970:	0800983d 	.word	0x0800983d
 8007974:	0800977b 	.word	0x0800977b
 8007978:	080096c3 	.word	0x080096c3

0800797c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	@ 0x28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007990:	2b20      	cmp	r3, #32
 8007992:	d137      	bne.n	8007a04 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Receive_DMA+0x24>
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e030      	b.n	8007a06 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <HAL_UART_Receive_DMA+0x94>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d01f      	beq.n	80079f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d018      	beq.n	80079f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	613b      	str	r3, [r7, #16]
   return(result);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	69f9      	ldr	r1, [r7, #28]
 80079e6:	6a3a      	ldr	r2, [r7, #32]
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	461a      	mov	r2, r3
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f001 fc0a 	bl	8009214 <UART_Start_Receive_DMA>
 8007a00:	4603      	mov	r3, r0
 8007a02:	e000      	b.n	8007a06 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a04:	2302      	movs	r3, #2
  }
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3728      	adds	r7, #40	@ 0x28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	58000c00 	.word	0x58000c00

08007a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b0ba      	sub	sp, #232	@ 0xe8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007a3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007a42:	4013      	ands	r3, r2
 8007a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11b      	bne.n	8007a88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d015      	beq.n	8007a88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d105      	bne.n	8007a74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d009      	beq.n	8007a88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 8377 	beq.w	800816c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
      }
      return;
 8007a86:	e371      	b.n	800816c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8123 	beq.w	8007cd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a96:	4b8d      	ldr	r3, [pc, #564]	@ (8007ccc <HAL_UART_IRQHandler+0x2b8>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8007cd0 <HAL_UART_IRQHandler+0x2bc>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8116 	beq.w	8007cd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <HAL_UART_IRQHandler+0xc8>
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad2:	f043 0201 	orr.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d011      	beq.n	8007b0c <HAL_UART_IRQHandler+0xf8>
 8007ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2202      	movs	r2, #2
 8007afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b02:	f043 0204 	orr.w	r2, r3, #4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d011      	beq.n	8007b3c <HAL_UART_IRQHandler+0x128>
 8007b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2204      	movs	r2, #4
 8007b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b32:	f043 0202 	orr.w	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d017      	beq.n	8007b78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b58:	4b5c      	ldr	r3, [pc, #368]	@ (8007ccc <HAL_UART_IRQHandler+0x2b8>)
 8007b5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2208      	movs	r2, #8
 8007b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6e:	f043 0208 	orr.w	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d012      	beq.n	8007baa <HAL_UART_IRQHandler+0x196>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 82dd 	beq.w	8008170 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d013      	beq.n	8007bea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfe:	2b40      	cmp	r3, #64	@ 0x40
 8007c00:	d005      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d054      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fbe8 	bl	80093e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d146      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1d9      	bne.n	8007c22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d017      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7e:	4a15      	ldr	r2, [pc, #84]	@ (8007cd4 <HAL_UART_IRQHandler+0x2c0>)
 8007c80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fa fc55 	bl	8002538 <HAL_DMA_Abort_IT>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d019      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	e00f      	b.n	8007cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa77 	bl	800819c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cae:	e00b      	b.n	8007cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa73 	bl	800819c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb6:	e007      	b.n	8007cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa6f 	bl	800819c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007cc6:	e253      	b.n	8008170 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	bf00      	nop
    return;
 8007cca:	e251      	b.n	8008170 <HAL_UART_IRQHandler+0x75c>
 8007ccc:	10000001 	.word	0x10000001
 8007cd0:	04000120 	.word	0x04000120
 8007cd4:	08009697 	.word	0x08009697

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	f040 81e7 	bne.w	80080b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 81e0 	beq.w	80080b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 81d9 	beq.w	80080b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2210      	movs	r2, #16
 8007d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d10:	2b40      	cmp	r3, #64	@ 0x40
 8007d12:	f040 8151 	bne.w	8007fb8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a96      	ldr	r2, [pc, #600]	@ (8007f78 <HAL_UART_IRQHandler+0x564>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d068      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a93      	ldr	r2, [pc, #588]	@ (8007f7c <HAL_UART_IRQHandler+0x568>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d061      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a91      	ldr	r2, [pc, #580]	@ (8007f80 <HAL_UART_IRQHandler+0x56c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d05a      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a8e      	ldr	r2, [pc, #568]	@ (8007f84 <HAL_UART_IRQHandler+0x570>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d053      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a8c      	ldr	r2, [pc, #560]	@ (8007f88 <HAL_UART_IRQHandler+0x574>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d04c      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a89      	ldr	r2, [pc, #548]	@ (8007f8c <HAL_UART_IRQHandler+0x578>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d045      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a87      	ldr	r2, [pc, #540]	@ (8007f90 <HAL_UART_IRQHandler+0x57c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d03e      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a84      	ldr	r2, [pc, #528]	@ (8007f94 <HAL_UART_IRQHandler+0x580>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d037      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a82      	ldr	r2, [pc, #520]	@ (8007f98 <HAL_UART_IRQHandler+0x584>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d030      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7f      	ldr	r2, [pc, #508]	@ (8007f9c <HAL_UART_IRQHandler+0x588>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d029      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a7d      	ldr	r2, [pc, #500]	@ (8007fa0 <HAL_UART_IRQHandler+0x58c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d022      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a7a      	ldr	r2, [pc, #488]	@ (8007fa4 <HAL_UART_IRQHandler+0x590>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01b      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a78      	ldr	r2, [pc, #480]	@ (8007fa8 <HAL_UART_IRQHandler+0x594>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d014      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a75      	ldr	r2, [pc, #468]	@ (8007fac <HAL_UART_IRQHandler+0x598>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00d      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a73      	ldr	r2, [pc, #460]	@ (8007fb0 <HAL_UART_IRQHandler+0x59c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d006      	beq.n	8007df6 <HAL_UART_IRQHandler+0x3e2>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a70      	ldr	r2, [pc, #448]	@ (8007fb4 <HAL_UART_IRQHandler+0x5a0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_IRQHandler+0x3f0>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	e005      	b.n	8007e10 <HAL_UART_IRQHandler+0x3fc>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 81ab 	beq.w	8008174 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	f080 81a3 	bcs.w	8008174 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e44:	f000 8087 	beq.w	8007f56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1da      	bne.n	8007e48 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007eb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e1      	bne.n	8007e92 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ef2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ef8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e3      	bne.n	8007ece <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e4      	bne.n	8007f14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f9 ffd3 	bl	8001efc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f91d 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f76:	e0fd      	b.n	8008174 <HAL_UART_IRQHandler+0x760>
 8007f78:	40020010 	.word	0x40020010
 8007f7c:	40020028 	.word	0x40020028
 8007f80:	40020040 	.word	0x40020040
 8007f84:	40020058 	.word	0x40020058
 8007f88:	40020070 	.word	0x40020070
 8007f8c:	40020088 	.word	0x40020088
 8007f90:	400200a0 	.word	0x400200a0
 8007f94:	400200b8 	.word	0x400200b8
 8007f98:	40020410 	.word	0x40020410
 8007f9c:	40020428 	.word	0x40020428
 8007fa0:	40020440 	.word	0x40020440
 8007fa4:	40020458 	.word	0x40020458
 8007fa8:	40020470 	.word	0x40020470
 8007fac:	40020488 	.word	0x40020488
 8007fb0:	400204a0 	.word	0x400204a0
 8007fb4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80cf 	beq.w	8008178 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80ca 	beq.w	8008178 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008006:	647b      	str	r3, [r7, #68]	@ 0x44
 8008008:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800800c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e4      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	623b      	str	r3, [r7, #32]
   return(result);
 800802a:	6a3a      	ldr	r2, [r7, #32]
 800802c:	4b55      	ldr	r3, [pc, #340]	@ (8008184 <HAL_UART_IRQHandler+0x770>)
 800802e:	4013      	ands	r3, r2
 8008030:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3308      	adds	r3, #8
 800803a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800803e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e3      	bne.n	800801a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	60fb      	str	r3, [r7, #12]
   return(result);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0310 	bic.w	r3, r3, #16
 800807a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008088:	61fb      	str	r3, [r7, #28]
 800808a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	69b9      	ldr	r1, [r7, #24]
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	617b      	str	r3, [r7, #20]
   return(result);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e4      	bne.n	8008066 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f881 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080ae:	e063      	b.n	8008178 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00e      	beq.n	80080da <HAL_UART_IRQHandler+0x6c6>
 80080bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fcc2 	bl	8009a5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080d8:	e051      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d014      	beq.n	8008110 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d105      	bne.n	80080fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008102:	2b00      	cmp	r3, #0
 8008104:	d03a      	beq.n	800817c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
    }
    return;
 800810e:	e035      	b.n	800817c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_UART_IRQHandler+0x71c>
 800811c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 fc6c 	bl	8009a06 <UART_EndTransmit_IT>
    return;
 800812e:	e026      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d009      	beq.n	8008150 <HAL_UART_IRQHandler+0x73c>
 800813c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008140:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fc9b 	bl	8009a84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800814e:	e016      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d010      	beq.n	800817e <HAL_UART_IRQHandler+0x76a>
 800815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008160:	2b00      	cmp	r3, #0
 8008162:	da0c      	bge.n	800817e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fc83 	bl	8009a70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800816a:	e008      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
      return;
 800816c:	bf00      	nop
 800816e:	e006      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
    return;
 8008170:	bf00      	nop
 8008172:	e004      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
      return;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
      return;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <HAL_UART_IRQHandler+0x76a>
    return;
 800817c:	bf00      	nop
  }
}
 800817e:	37e8      	adds	r7, #232	@ 0xe8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	effffffe 	.word	0xeffffffe

08008188 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081cc:	b092      	sub	sp, #72	@ 0x48
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4bbe      	ldr	r3, [pc, #760]	@ (80084f0 <UART_SetConfig+0x328>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008200:	430b      	orrs	r3, r1
 8008202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4ab3      	ldr	r2, [pc, #716]	@ (80084f4 <UART_SetConfig+0x32c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d004      	beq.n	8008234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008230:	4313      	orrs	r3, r2
 8008232:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	4baf      	ldr	r3, [pc, #700]	@ (80084f8 <UART_SetConfig+0x330>)
 800823c:	4013      	ands	r3, r2
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008244:	430b      	orrs	r3, r1
 8008246:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	f023 010f 	bic.w	r1, r3, #15
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4aa6      	ldr	r2, [pc, #664]	@ (80084fc <UART_SetConfig+0x334>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d177      	bne.n	8008358 <UART_SetConfig+0x190>
 8008268:	4ba5      	ldr	r3, [pc, #660]	@ (8008500 <UART_SetConfig+0x338>)
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008270:	2b28      	cmp	r3, #40	@ 0x28
 8008272:	d86d      	bhi.n	8008350 <UART_SetConfig+0x188>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <UART_SetConfig+0xb4>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	08008321 	.word	0x08008321
 8008280:	08008351 	.word	0x08008351
 8008284:	08008351 	.word	0x08008351
 8008288:	08008351 	.word	0x08008351
 800828c:	08008351 	.word	0x08008351
 8008290:	08008351 	.word	0x08008351
 8008294:	08008351 	.word	0x08008351
 8008298:	08008351 	.word	0x08008351
 800829c:	08008329 	.word	0x08008329
 80082a0:	08008351 	.word	0x08008351
 80082a4:	08008351 	.word	0x08008351
 80082a8:	08008351 	.word	0x08008351
 80082ac:	08008351 	.word	0x08008351
 80082b0:	08008351 	.word	0x08008351
 80082b4:	08008351 	.word	0x08008351
 80082b8:	08008351 	.word	0x08008351
 80082bc:	08008331 	.word	0x08008331
 80082c0:	08008351 	.word	0x08008351
 80082c4:	08008351 	.word	0x08008351
 80082c8:	08008351 	.word	0x08008351
 80082cc:	08008351 	.word	0x08008351
 80082d0:	08008351 	.word	0x08008351
 80082d4:	08008351 	.word	0x08008351
 80082d8:	08008351 	.word	0x08008351
 80082dc:	08008339 	.word	0x08008339
 80082e0:	08008351 	.word	0x08008351
 80082e4:	08008351 	.word	0x08008351
 80082e8:	08008351 	.word	0x08008351
 80082ec:	08008351 	.word	0x08008351
 80082f0:	08008351 	.word	0x08008351
 80082f4:	08008351 	.word	0x08008351
 80082f8:	08008351 	.word	0x08008351
 80082fc:	08008341 	.word	0x08008341
 8008300:	08008351 	.word	0x08008351
 8008304:	08008351 	.word	0x08008351
 8008308:	08008351 	.word	0x08008351
 800830c:	08008351 	.word	0x08008351
 8008310:	08008351 	.word	0x08008351
 8008314:	08008351 	.word	0x08008351
 8008318:	08008351 	.word	0x08008351
 800831c:	08008349 	.word	0x08008349
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e326      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008328:	2304      	movs	r3, #4
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e322      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008330:	2308      	movs	r3, #8
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e31e      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008338:	2310      	movs	r3, #16
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e31a      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008340:	2320      	movs	r3, #32
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e316      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008348:	2340      	movs	r3, #64	@ 0x40
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e312      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008350:	2380      	movs	r3, #128	@ 0x80
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e30e      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a69      	ldr	r2, [pc, #420]	@ (8008504 <UART_SetConfig+0x33c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d130      	bne.n	80083c4 <UART_SetConfig+0x1fc>
 8008362:	4b67      	ldr	r3, [pc, #412]	@ (8008500 <UART_SetConfig+0x338>)
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	2b05      	cmp	r3, #5
 800836c:	d826      	bhi.n	80083bc <UART_SetConfig+0x1f4>
 800836e:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <UART_SetConfig+0x1ac>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	0800838d 	.word	0x0800838d
 8008378:	08008395 	.word	0x08008395
 800837c:	0800839d 	.word	0x0800839d
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	2300      	movs	r3, #0
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e2f0      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008394:	2304      	movs	r3, #4
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e2ec      	b.n	8008976 <UART_SetConfig+0x7ae>
 800839c:	2308      	movs	r3, #8
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e2e8      	b.n	8008976 <UART_SetConfig+0x7ae>
 80083a4:	2310      	movs	r3, #16
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e2e4      	b.n	8008976 <UART_SetConfig+0x7ae>
 80083ac:	2320      	movs	r3, #32
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e2e0      	b.n	8008976 <UART_SetConfig+0x7ae>
 80083b4:	2340      	movs	r3, #64	@ 0x40
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e2dc      	b.n	8008976 <UART_SetConfig+0x7ae>
 80083bc:	2380      	movs	r3, #128	@ 0x80
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e2d8      	b.n	8008976 <UART_SetConfig+0x7ae>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a4f      	ldr	r2, [pc, #316]	@ (8008508 <UART_SetConfig+0x340>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d130      	bne.n	8008430 <UART_SetConfig+0x268>
 80083ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008500 <UART_SetConfig+0x338>)
 80083d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d826      	bhi.n	8008428 <UART_SetConfig+0x260>
 80083da:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <UART_SetConfig+0x218>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e2ba      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e2b6      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e2b2      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e2ae      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e2aa      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008420:	2340      	movs	r3, #64	@ 0x40
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e2a6      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008428:	2380      	movs	r3, #128	@ 0x80
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e2a2      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a35      	ldr	r2, [pc, #212]	@ (800850c <UART_SetConfig+0x344>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d130      	bne.n	800849c <UART_SetConfig+0x2d4>
 800843a:	4b31      	ldr	r3, [pc, #196]	@ (8008500 <UART_SetConfig+0x338>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	2b05      	cmp	r3, #5
 8008444:	d826      	bhi.n	8008494 <UART_SetConfig+0x2cc>
 8008446:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <UART_SetConfig+0x284>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008465 	.word	0x08008465
 8008450:	0800846d 	.word	0x0800846d
 8008454:	08008475 	.word	0x08008475
 8008458:	0800847d 	.word	0x0800847d
 800845c:	08008485 	.word	0x08008485
 8008460:	0800848d 	.word	0x0800848d
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e284      	b.n	8008976 <UART_SetConfig+0x7ae>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e280      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e27c      	b.n	8008976 <UART_SetConfig+0x7ae>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e278      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008484:	2320      	movs	r3, #32
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e274      	b.n	8008976 <UART_SetConfig+0x7ae>
 800848c:	2340      	movs	r3, #64	@ 0x40
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e270      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008494:	2380      	movs	r3, #128	@ 0x80
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e26c      	b.n	8008976 <UART_SetConfig+0x7ae>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <UART_SetConfig+0x348>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d142      	bne.n	800852c <UART_SetConfig+0x364>
 80084a6:	4b16      	ldr	r3, [pc, #88]	@ (8008500 <UART_SetConfig+0x338>)
 80084a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d838      	bhi.n	8008524 <UART_SetConfig+0x35c>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <UART_SetConfig+0x2f0>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084d1 	.word	0x080084d1
 80084bc:	080084d9 	.word	0x080084d9
 80084c0:	080084e1 	.word	0x080084e1
 80084c4:	080084e9 	.word	0x080084e9
 80084c8:	08008515 	.word	0x08008515
 80084cc:	0800851d 	.word	0x0800851d
 80084d0:	2300      	movs	r3, #0
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e24e      	b.n	8008976 <UART_SetConfig+0x7ae>
 80084d8:	2304      	movs	r3, #4
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e24a      	b.n	8008976 <UART_SetConfig+0x7ae>
 80084e0:	2308      	movs	r3, #8
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e246      	b.n	8008976 <UART_SetConfig+0x7ae>
 80084e8:	2310      	movs	r3, #16
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e242      	b.n	8008976 <UART_SetConfig+0x7ae>
 80084f0:	cfff69f3 	.word	0xcfff69f3
 80084f4:	58000c00 	.word	0x58000c00
 80084f8:	11fff4ff 	.word	0x11fff4ff
 80084fc:	40011000 	.word	0x40011000
 8008500:	58024400 	.word	0x58024400
 8008504:	40004400 	.word	0x40004400
 8008508:	40004800 	.word	0x40004800
 800850c:	40004c00 	.word	0x40004c00
 8008510:	40005000 	.word	0x40005000
 8008514:	2320      	movs	r3, #32
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e22c      	b.n	8008976 <UART_SetConfig+0x7ae>
 800851c:	2340      	movs	r3, #64	@ 0x40
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e228      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008524:	2380      	movs	r3, #128	@ 0x80
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e224      	b.n	8008976 <UART_SetConfig+0x7ae>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4ab1      	ldr	r2, [pc, #708]	@ (80087f8 <UART_SetConfig+0x630>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d176      	bne.n	8008624 <UART_SetConfig+0x45c>
 8008536:	4bb1      	ldr	r3, [pc, #708]	@ (80087fc <UART_SetConfig+0x634>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800853e:	2b28      	cmp	r3, #40	@ 0x28
 8008540:	d86c      	bhi.n	800861c <UART_SetConfig+0x454>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0x380>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	080085ed 	.word	0x080085ed
 800854c:	0800861d 	.word	0x0800861d
 8008550:	0800861d 	.word	0x0800861d
 8008554:	0800861d 	.word	0x0800861d
 8008558:	0800861d 	.word	0x0800861d
 800855c:	0800861d 	.word	0x0800861d
 8008560:	0800861d 	.word	0x0800861d
 8008564:	0800861d 	.word	0x0800861d
 8008568:	080085f5 	.word	0x080085f5
 800856c:	0800861d 	.word	0x0800861d
 8008570:	0800861d 	.word	0x0800861d
 8008574:	0800861d 	.word	0x0800861d
 8008578:	0800861d 	.word	0x0800861d
 800857c:	0800861d 	.word	0x0800861d
 8008580:	0800861d 	.word	0x0800861d
 8008584:	0800861d 	.word	0x0800861d
 8008588:	080085fd 	.word	0x080085fd
 800858c:	0800861d 	.word	0x0800861d
 8008590:	0800861d 	.word	0x0800861d
 8008594:	0800861d 	.word	0x0800861d
 8008598:	0800861d 	.word	0x0800861d
 800859c:	0800861d 	.word	0x0800861d
 80085a0:	0800861d 	.word	0x0800861d
 80085a4:	0800861d 	.word	0x0800861d
 80085a8:	08008605 	.word	0x08008605
 80085ac:	0800861d 	.word	0x0800861d
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	0800861d 	.word	0x0800861d
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	0800861d 	.word	0x0800861d
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	0800860d 	.word	0x0800860d
 80085cc:	0800861d 	.word	0x0800861d
 80085d0:	0800861d 	.word	0x0800861d
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	0800861d 	.word	0x0800861d
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	0800861d 	.word	0x0800861d
 80085e4:	0800861d 	.word	0x0800861d
 80085e8:	08008615 	.word	0x08008615
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e1c0      	b.n	8008976 <UART_SetConfig+0x7ae>
 80085f4:	2304      	movs	r3, #4
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e1bc      	b.n	8008976 <UART_SetConfig+0x7ae>
 80085fc:	2308      	movs	r3, #8
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e1b8      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008604:	2310      	movs	r3, #16
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e1b4      	b.n	8008976 <UART_SetConfig+0x7ae>
 800860c:	2320      	movs	r3, #32
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e1b0      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008614:	2340      	movs	r3, #64	@ 0x40
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e1ac      	b.n	8008976 <UART_SetConfig+0x7ae>
 800861c:	2380      	movs	r3, #128	@ 0x80
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e1a8      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a75      	ldr	r2, [pc, #468]	@ (8008800 <UART_SetConfig+0x638>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d130      	bne.n	8008690 <UART_SetConfig+0x4c8>
 800862e:	4b73      	ldr	r3, [pc, #460]	@ (80087fc <UART_SetConfig+0x634>)
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	2b05      	cmp	r3, #5
 8008638:	d826      	bhi.n	8008688 <UART_SetConfig+0x4c0>
 800863a:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <UART_SetConfig+0x478>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008659 	.word	0x08008659
 8008644:	08008661 	.word	0x08008661
 8008648:	08008669 	.word	0x08008669
 800864c:	08008671 	.word	0x08008671
 8008650:	08008679 	.word	0x08008679
 8008654:	08008681 	.word	0x08008681
 8008658:	2300      	movs	r3, #0
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e18a      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e186      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e182      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e17e      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008678:	2320      	movs	r3, #32
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e17a      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008680:	2340      	movs	r3, #64	@ 0x40
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e176      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008688:	2380      	movs	r3, #128	@ 0x80
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e172      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a5b      	ldr	r2, [pc, #364]	@ (8008804 <UART_SetConfig+0x63c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d130      	bne.n	80086fc <UART_SetConfig+0x534>
 800869a:	4b58      	ldr	r3, [pc, #352]	@ (80087fc <UART_SetConfig+0x634>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	d826      	bhi.n	80086f4 <UART_SetConfig+0x52c>
 80086a6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <UART_SetConfig+0x4e4>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086c5 	.word	0x080086c5
 80086b0:	080086cd 	.word	0x080086cd
 80086b4:	080086d5 	.word	0x080086d5
 80086b8:	080086dd 	.word	0x080086dd
 80086bc:	080086e5 	.word	0x080086e5
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	2300      	movs	r3, #0
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e154      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086cc:	2304      	movs	r3, #4
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e150      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086d4:	2308      	movs	r3, #8
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e14c      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086dc:	2310      	movs	r3, #16
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e148      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086e4:	2320      	movs	r3, #32
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e144      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086ec:	2340      	movs	r3, #64	@ 0x40
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e140      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086f4:	2380      	movs	r3, #128	@ 0x80
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e13c      	b.n	8008976 <UART_SetConfig+0x7ae>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a41      	ldr	r2, [pc, #260]	@ (8008808 <UART_SetConfig+0x640>)
 8008702:	4293      	cmp	r3, r2
 8008704:	f040 8082 	bne.w	800880c <UART_SetConfig+0x644>
 8008708:	4b3c      	ldr	r3, [pc, #240]	@ (80087fc <UART_SetConfig+0x634>)
 800870a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008710:	2b28      	cmp	r3, #40	@ 0x28
 8008712:	d86d      	bhi.n	80087f0 <UART_SetConfig+0x628>
 8008714:	a201      	add	r2, pc, #4	@ (adr r2, 800871c <UART_SetConfig+0x554>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	080087c1 	.word	0x080087c1
 8008720:	080087f1 	.word	0x080087f1
 8008724:	080087f1 	.word	0x080087f1
 8008728:	080087f1 	.word	0x080087f1
 800872c:	080087f1 	.word	0x080087f1
 8008730:	080087f1 	.word	0x080087f1
 8008734:	080087f1 	.word	0x080087f1
 8008738:	080087f1 	.word	0x080087f1
 800873c:	080087c9 	.word	0x080087c9
 8008740:	080087f1 	.word	0x080087f1
 8008744:	080087f1 	.word	0x080087f1
 8008748:	080087f1 	.word	0x080087f1
 800874c:	080087f1 	.word	0x080087f1
 8008750:	080087f1 	.word	0x080087f1
 8008754:	080087f1 	.word	0x080087f1
 8008758:	080087f1 	.word	0x080087f1
 800875c:	080087d1 	.word	0x080087d1
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087f1 	.word	0x080087f1
 8008770:	080087f1 	.word	0x080087f1
 8008774:	080087f1 	.word	0x080087f1
 8008778:	080087f1 	.word	0x080087f1
 800877c:	080087d9 	.word	0x080087d9
 8008780:	080087f1 	.word	0x080087f1
 8008784:	080087f1 	.word	0x080087f1
 8008788:	080087f1 	.word	0x080087f1
 800878c:	080087f1 	.word	0x080087f1
 8008790:	080087f1 	.word	0x080087f1
 8008794:	080087f1 	.word	0x080087f1
 8008798:	080087f1 	.word	0x080087f1
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087f1 	.word	0x080087f1
 80087a4:	080087f1 	.word	0x080087f1
 80087a8:	080087f1 	.word	0x080087f1
 80087ac:	080087f1 	.word	0x080087f1
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087f1 	.word	0x080087f1
 80087b8:	080087f1 	.word	0x080087f1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	2301      	movs	r3, #1
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e0d6      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e0d2      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e0ce      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e0ca      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e0c6      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087e8:	2340      	movs	r3, #64	@ 0x40
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e0c2      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e0be      	b.n	8008976 <UART_SetConfig+0x7ae>
 80087f8:	40011400 	.word	0x40011400
 80087fc:	58024400 	.word	0x58024400
 8008800:	40007800 	.word	0x40007800
 8008804:	40007c00 	.word	0x40007c00
 8008808:	40011800 	.word	0x40011800
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4aad      	ldr	r2, [pc, #692]	@ (8008ac8 <UART_SetConfig+0x900>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d176      	bne.n	8008904 <UART_SetConfig+0x73c>
 8008816:	4bad      	ldr	r3, [pc, #692]	@ (8008acc <UART_SetConfig+0x904>)
 8008818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800881e:	2b28      	cmp	r3, #40	@ 0x28
 8008820:	d86c      	bhi.n	80088fc <UART_SetConfig+0x734>
 8008822:	a201      	add	r2, pc, #4	@ (adr r2, 8008828 <UART_SetConfig+0x660>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	080088cd 	.word	0x080088cd
 800882c:	080088fd 	.word	0x080088fd
 8008830:	080088fd 	.word	0x080088fd
 8008834:	080088fd 	.word	0x080088fd
 8008838:	080088fd 	.word	0x080088fd
 800883c:	080088fd 	.word	0x080088fd
 8008840:	080088fd 	.word	0x080088fd
 8008844:	080088fd 	.word	0x080088fd
 8008848:	080088d5 	.word	0x080088d5
 800884c:	080088fd 	.word	0x080088fd
 8008850:	080088fd 	.word	0x080088fd
 8008854:	080088fd 	.word	0x080088fd
 8008858:	080088fd 	.word	0x080088fd
 800885c:	080088fd 	.word	0x080088fd
 8008860:	080088fd 	.word	0x080088fd
 8008864:	080088fd 	.word	0x080088fd
 8008868:	080088dd 	.word	0x080088dd
 800886c:	080088fd 	.word	0x080088fd
 8008870:	080088fd 	.word	0x080088fd
 8008874:	080088fd 	.word	0x080088fd
 8008878:	080088fd 	.word	0x080088fd
 800887c:	080088fd 	.word	0x080088fd
 8008880:	080088fd 	.word	0x080088fd
 8008884:	080088fd 	.word	0x080088fd
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088fd 	.word	0x080088fd
 8008890:	080088fd 	.word	0x080088fd
 8008894:	080088fd 	.word	0x080088fd
 8008898:	080088fd 	.word	0x080088fd
 800889c:	080088fd 	.word	0x080088fd
 80088a0:	080088fd 	.word	0x080088fd
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	080088ed 	.word	0x080088ed
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	080088fd 	.word	0x080088fd
 80088b8:	080088fd 	.word	0x080088fd
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e050      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e04c      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e048      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e044      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088ec:	2320      	movs	r3, #32
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e040      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088f4:	2340      	movs	r3, #64	@ 0x40
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e03c      	b.n	8008976 <UART_SetConfig+0x7ae>
 80088fc:	2380      	movs	r3, #128	@ 0x80
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e038      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a71      	ldr	r2, [pc, #452]	@ (8008ad0 <UART_SetConfig+0x908>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d130      	bne.n	8008970 <UART_SetConfig+0x7a8>
 800890e:	4b6f      	ldr	r3, [pc, #444]	@ (8008acc <UART_SetConfig+0x904>)
 8008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b05      	cmp	r3, #5
 8008918:	d826      	bhi.n	8008968 <UART_SetConfig+0x7a0>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <UART_SetConfig+0x758>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008939 	.word	0x08008939
 8008924:	08008941 	.word	0x08008941
 8008928:	08008949 	.word	0x08008949
 800892c:	08008951 	.word	0x08008951
 8008930:	08008959 	.word	0x08008959
 8008934:	08008961 	.word	0x08008961
 8008938:	2302      	movs	r3, #2
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e01a      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e016      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e012      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e00e      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008958:	2320      	movs	r3, #32
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e00a      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008960:	2340      	movs	r3, #64	@ 0x40
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e006      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008968:	2380      	movs	r3, #128	@ 0x80
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e002      	b.n	8008976 <UART_SetConfig+0x7ae>
 8008970:	2380      	movs	r3, #128	@ 0x80
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a55      	ldr	r2, [pc, #340]	@ (8008ad0 <UART_SetConfig+0x908>)
 800897c:	4293      	cmp	r3, r2
 800897e:	f040 80f8 	bne.w	8008b72 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008986:	2b20      	cmp	r3, #32
 8008988:	dc46      	bgt.n	8008a18 <UART_SetConfig+0x850>
 800898a:	2b02      	cmp	r3, #2
 800898c:	db75      	blt.n	8008a7a <UART_SetConfig+0x8b2>
 800898e:	3b02      	subs	r3, #2
 8008990:	2b1e      	cmp	r3, #30
 8008992:	d872      	bhi.n	8008a7a <UART_SetConfig+0x8b2>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <UART_SetConfig+0x7d4>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	08008a1f 	.word	0x08008a1f
 80089a0:	08008a7b 	.word	0x08008a7b
 80089a4:	08008a27 	.word	0x08008a27
 80089a8:	08008a7b 	.word	0x08008a7b
 80089ac:	08008a7b 	.word	0x08008a7b
 80089b0:	08008a7b 	.word	0x08008a7b
 80089b4:	08008a37 	.word	0x08008a37
 80089b8:	08008a7b 	.word	0x08008a7b
 80089bc:	08008a7b 	.word	0x08008a7b
 80089c0:	08008a7b 	.word	0x08008a7b
 80089c4:	08008a7b 	.word	0x08008a7b
 80089c8:	08008a7b 	.word	0x08008a7b
 80089cc:	08008a7b 	.word	0x08008a7b
 80089d0:	08008a7b 	.word	0x08008a7b
 80089d4:	08008a47 	.word	0x08008a47
 80089d8:	08008a7b 	.word	0x08008a7b
 80089dc:	08008a7b 	.word	0x08008a7b
 80089e0:	08008a7b 	.word	0x08008a7b
 80089e4:	08008a7b 	.word	0x08008a7b
 80089e8:	08008a7b 	.word	0x08008a7b
 80089ec:	08008a7b 	.word	0x08008a7b
 80089f0:	08008a7b 	.word	0x08008a7b
 80089f4:	08008a7b 	.word	0x08008a7b
 80089f8:	08008a7b 	.word	0x08008a7b
 80089fc:	08008a7b 	.word	0x08008a7b
 8008a00:	08008a7b 	.word	0x08008a7b
 8008a04:	08008a7b 	.word	0x08008a7b
 8008a08:	08008a7b 	.word	0x08008a7b
 8008a0c:	08008a7b 	.word	0x08008a7b
 8008a10:	08008a7b 	.word	0x08008a7b
 8008a14:	08008a6d 	.word	0x08008a6d
 8008a18:	2b40      	cmp	r3, #64	@ 0x40
 8008a1a:	d02a      	beq.n	8008a72 <UART_SetConfig+0x8aa>
 8008a1c:	e02d      	b.n	8008a7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a1e:	f7fe fa19 	bl	8006e54 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a24:	e02f      	b.n	8008a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fa28 	bl	8006e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a34:	e027      	b.n	8008a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a36:	f107 0318 	add.w	r3, r7, #24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fb74 	bl	8007128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a44:	e01f      	b.n	8008a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a46:	4b21      	ldr	r3, [pc, #132]	@ (8008acc <UART_SetConfig+0x904>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a52:	4b1e      	ldr	r3, [pc, #120]	@ (8008acc <UART_SetConfig+0x904>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad4 <UART_SetConfig+0x90c>)
 8008a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a64:	e00f      	b.n	8008a86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a66:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad4 <UART_SetConfig+0x90c>)
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6a:	e00c      	b.n	8008a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <UART_SetConfig+0x910>)
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a70:	e009      	b.n	8008a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e005      	b.n	8008a86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 81ee 	beq.w	8008e6a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a92:	4a12      	ldr	r2, [pc, #72]	@ (8008adc <UART_SetConfig+0x914>)
 8008a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d305      	bcc.n	8008abe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d910      	bls.n	8008ae0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ac4:	e1d1      	b.n	8008e6a <UART_SetConfig+0xca2>
 8008ac6:	bf00      	nop
 8008ac8:	40011c00 	.word	0x40011c00
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	58000c00 	.word	0x58000c00
 8008ad4:	03d09000 	.word	0x03d09000
 8008ad8:	003d0900 	.word	0x003d0900
 8008adc:	0800a1dc 	.word	0x0800a1dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	60fa      	str	r2, [r7, #12]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	4ac0      	ldr	r2, [pc, #768]	@ (8008df0 <UART_SetConfig+0xc28>)
 8008aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2200      	movs	r2, #0
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	607a      	str	r2, [r7, #4]
 8008afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b02:	f7f7 fc03 	bl	800030c <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	020b      	lsls	r3, r1, #8
 8008b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b1c:	0202      	lsls	r2, r0, #8
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	6849      	ldr	r1, [r1, #4]
 8008b22:	0849      	lsrs	r1, r1, #1
 8008b24:	2000      	movs	r0, #0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4605      	mov	r5, r0
 8008b2a:	eb12 0804 	adds.w	r8, r2, r4
 8008b2e:	eb43 0905 	adc.w	r9, r3, r5
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	469a      	mov	sl, r3
 8008b3a:	4693      	mov	fp, r2
 8008b3c:	4652      	mov	r2, sl
 8008b3e:	465b      	mov	r3, fp
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	f7f7 fbe2 	bl	800030c <__aeabi_uldivmod>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b56:	d308      	bcc.n	8008b6a <UART_SetConfig+0x9a2>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b5e:	d204      	bcs.n	8008b6a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b66:	60da      	str	r2, [r3, #12]
 8008b68:	e17f      	b.n	8008e6a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b70:	e17b      	b.n	8008e6a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b7a:	f040 80bd 	bne.w	8008cf8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	dc48      	bgt.n	8008c18 <UART_SetConfig+0xa50>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db7b      	blt.n	8008c82 <UART_SetConfig+0xaba>
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d879      	bhi.n	8008c82 <UART_SetConfig+0xaba>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <UART_SetConfig+0x9cc>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008c1f 	.word	0x08008c1f
 8008b98:	08008c27 	.word	0x08008c27
 8008b9c:	08008c83 	.word	0x08008c83
 8008ba0:	08008c83 	.word	0x08008c83
 8008ba4:	08008c2f 	.word	0x08008c2f
 8008ba8:	08008c83 	.word	0x08008c83
 8008bac:	08008c83 	.word	0x08008c83
 8008bb0:	08008c83 	.word	0x08008c83
 8008bb4:	08008c3f 	.word	0x08008c3f
 8008bb8:	08008c83 	.word	0x08008c83
 8008bbc:	08008c83 	.word	0x08008c83
 8008bc0:	08008c83 	.word	0x08008c83
 8008bc4:	08008c83 	.word	0x08008c83
 8008bc8:	08008c83 	.word	0x08008c83
 8008bcc:	08008c83 	.word	0x08008c83
 8008bd0:	08008c83 	.word	0x08008c83
 8008bd4:	08008c4f 	.word	0x08008c4f
 8008bd8:	08008c83 	.word	0x08008c83
 8008bdc:	08008c83 	.word	0x08008c83
 8008be0:	08008c83 	.word	0x08008c83
 8008be4:	08008c83 	.word	0x08008c83
 8008be8:	08008c83 	.word	0x08008c83
 8008bec:	08008c83 	.word	0x08008c83
 8008bf0:	08008c83 	.word	0x08008c83
 8008bf4:	08008c83 	.word	0x08008c83
 8008bf8:	08008c83 	.word	0x08008c83
 8008bfc:	08008c83 	.word	0x08008c83
 8008c00:	08008c83 	.word	0x08008c83
 8008c04:	08008c83 	.word	0x08008c83
 8008c08:	08008c83 	.word	0x08008c83
 8008c0c:	08008c83 	.word	0x08008c83
 8008c10:	08008c83 	.word	0x08008c83
 8008c14:	08008c75 	.word	0x08008c75
 8008c18:	2b40      	cmp	r3, #64	@ 0x40
 8008c1a:	d02e      	beq.n	8008c7a <UART_SetConfig+0xab2>
 8008c1c:	e031      	b.n	8008c82 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1e:	f7fc ff4d 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8008c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c24:	e033      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c26:	f7fc ff5f 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 8008c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c2c:	e02f      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f924 	bl	8006e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e027      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c3e:	f107 0318 	add.w	r3, r7, #24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fa70 	bl	8007128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4c:	e01f      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c4e:	4b69      	ldr	r3, [pc, #420]	@ (8008df4 <UART_SetConfig+0xc2c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c5a:	4b66      	ldr	r3, [pc, #408]	@ (8008df4 <UART_SetConfig+0xc2c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	4a64      	ldr	r2, [pc, #400]	@ (8008df8 <UART_SetConfig+0xc30>)
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c6c:	e00f      	b.n	8008c8e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c6e:	4b62      	ldr	r3, [pc, #392]	@ (8008df8 <UART_SetConfig+0xc30>)
 8008c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c72:	e00c      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c74:	4b61      	ldr	r3, [pc, #388]	@ (8008dfc <UART_SetConfig+0xc34>)
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c78:	e009      	b.n	8008c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c80:	e005      	b.n	8008c8e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 80ea 	beq.w	8008e6a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9a:	4a55      	ldr	r2, [pc, #340]	@ (8008df0 <UART_SetConfig+0xc28>)
 8008c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca8:	005a      	lsls	r2, r3, #1
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	441a      	add	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d916      	bls.n	8008cf0 <UART_SetConfig+0xb28>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc8:	d212      	bcs.n	8008cf0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f023 030f 	bic.w	r3, r3, #15
 8008cd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	085b      	lsrs	r3, r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008cec:	60da      	str	r2, [r3, #12]
 8008cee:	e0bc      	b.n	8008e6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cf6:	e0b8      	b.n	8008e6a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cf8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	dc4b      	bgt.n	8008d98 <UART_SetConfig+0xbd0>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f2c0 8087 	blt.w	8008e14 <UART_SetConfig+0xc4c>
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	f200 8084 	bhi.w	8008e14 <UART_SetConfig+0xc4c>
 8008d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0xb4c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d9f 	.word	0x08008d9f
 8008d18:	08008da7 	.word	0x08008da7
 8008d1c:	08008e15 	.word	0x08008e15
 8008d20:	08008e15 	.word	0x08008e15
 8008d24:	08008daf 	.word	0x08008daf
 8008d28:	08008e15 	.word	0x08008e15
 8008d2c:	08008e15 	.word	0x08008e15
 8008d30:	08008e15 	.word	0x08008e15
 8008d34:	08008dbf 	.word	0x08008dbf
 8008d38:	08008e15 	.word	0x08008e15
 8008d3c:	08008e15 	.word	0x08008e15
 8008d40:	08008e15 	.word	0x08008e15
 8008d44:	08008e15 	.word	0x08008e15
 8008d48:	08008e15 	.word	0x08008e15
 8008d4c:	08008e15 	.word	0x08008e15
 8008d50:	08008e15 	.word	0x08008e15
 8008d54:	08008dcf 	.word	0x08008dcf
 8008d58:	08008e15 	.word	0x08008e15
 8008d5c:	08008e15 	.word	0x08008e15
 8008d60:	08008e15 	.word	0x08008e15
 8008d64:	08008e15 	.word	0x08008e15
 8008d68:	08008e15 	.word	0x08008e15
 8008d6c:	08008e15 	.word	0x08008e15
 8008d70:	08008e15 	.word	0x08008e15
 8008d74:	08008e15 	.word	0x08008e15
 8008d78:	08008e15 	.word	0x08008e15
 8008d7c:	08008e15 	.word	0x08008e15
 8008d80:	08008e15 	.word	0x08008e15
 8008d84:	08008e15 	.word	0x08008e15
 8008d88:	08008e15 	.word	0x08008e15
 8008d8c:	08008e15 	.word	0x08008e15
 8008d90:	08008e15 	.word	0x08008e15
 8008d94:	08008e07 	.word	0x08008e07
 8008d98:	2b40      	cmp	r3, #64	@ 0x40
 8008d9a:	d037      	beq.n	8008e0c <UART_SetConfig+0xc44>
 8008d9c:	e03a      	b.n	8008e14 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d9e:	f7fc fe8d 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8008da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008da4:	e03c      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da6:	f7fc fe9f 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 8008daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dac:	e038      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe f864 	bl	8006e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e030      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dbe:	f107 0318 	add.w	r3, r7, #24
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe f9b0 	bl	8007128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dcc:	e028      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dce:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <UART_SetConfig+0xc2c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d012      	beq.n	8008e00 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dda:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <UART_SetConfig+0xc2c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	08db      	lsrs	r3, r3, #3
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	4a04      	ldr	r2, [pc, #16]	@ (8008df8 <UART_SetConfig+0xc30>)
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008dec:	e018      	b.n	8008e20 <UART_SetConfig+0xc58>
 8008dee:	bf00      	nop
 8008df0:	0800a1dc 	.word	0x0800a1dc
 8008df4:	58024400 	.word	0x58024400
 8008df8:	03d09000 	.word	0x03d09000
 8008dfc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e00:	4b24      	ldr	r3, [pc, #144]	@ (8008e94 <UART_SetConfig+0xccc>)
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e04:	e00c      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e06:	4b24      	ldr	r3, [pc, #144]	@ (8008e98 <UART_SetConfig+0xcd0>)
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0a:	e009      	b.n	8008e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e12:	e005      	b.n	8008e20 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d021      	beq.n	8008e6a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e9c <UART_SetConfig+0xcd4>)
 8008e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e34:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	441a      	add	r2, r3
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	2b0f      	cmp	r3, #15
 8008e4e:	d909      	bls.n	8008e64 <UART_SetConfig+0xc9c>
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e56:	d205      	bcs.n	8008e64 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	e002      	b.n	8008e6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2200      	movs	r2, #0
 8008e84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e86:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3748      	adds	r7, #72	@ 0x48
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e94:	03d09000 	.word	0x03d09000
 8008e98:	003d0900 	.word	0x003d0900
 8008e9c:	0800a1dc 	.word	0x0800a1dc

08008ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f9e:	d10a      	bne.n	8008fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b098      	sub	sp, #96	@ 0x60
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ff4:	f7f8 f890 	bl	8001118 <HAL_GetTick>
 8008ff8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b08      	cmp	r3, #8
 8009006:	d12f      	bne.n	8009068 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009010:	2200      	movs	r2, #0
 8009012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f88e 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d022      	beq.n	8009068 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009036:	653b      	str	r3, [r7, #80]	@ 0x50
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009040:	647b      	str	r3, [r7, #68]	@ 0x44
 8009042:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800904e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e6      	bne.n	8009022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e063      	b.n	8009130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b04      	cmp	r3, #4
 8009074:	d149      	bne.n	800910a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009076:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800907e:	2200      	movs	r2, #0
 8009080:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f857 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d03c      	beq.n	800910a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	623b      	str	r3, [r7, #32]
   return(result);
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	461a      	mov	r2, r3
 80090ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e6      	bne.n	8009090 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f023 0301 	bic.w	r3, r3, #1
 80090d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3308      	adds	r3, #8
 80090e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090e2:	61fa      	str	r2, [r7, #28]
 80090e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	69b9      	ldr	r1, [r7, #24]
 80090e8:	69fa      	ldr	r2, [r7, #28]
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	617b      	str	r3, [r7, #20]
   return(result);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e5      	bne.n	80090c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e012      	b.n	8009130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3758      	adds	r7, #88	@ 0x58
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4613      	mov	r3, r2
 8009146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009148:	e04f      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d04b      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009152:	f7f7 ffe1 	bl	8001118 <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <UART_WaitOnFlagUntilTimeout+0x30>
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e04e      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0304 	and.w	r3, r3, #4
 8009176:	2b00      	cmp	r3, #0
 8009178:	d037      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b80      	cmp	r3, #128	@ 0x80
 800917e:	d034      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b40      	cmp	r3, #64	@ 0x40
 8009184:	d031      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	2b08      	cmp	r3, #8
 8009192:	d110      	bne.n	80091b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2208      	movs	r2, #8
 800919a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 f921 	bl	80093e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2208      	movs	r2, #8
 80091a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e029      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091c4:	d111      	bne.n	80091ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 f907 	bl	80093e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e00f      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69da      	ldr	r2, [r3, #28]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4013      	ands	r3, r2
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	bf0c      	ite	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	2300      	movne	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	461a      	mov	r2, r3
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	429a      	cmp	r2, r3
 8009206:	d0a0      	beq.n	800914a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b096      	sub	sp, #88	@ 0x58
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	88fa      	ldrh	r2, [r7, #6]
 800922c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2222      	movs	r2, #34	@ 0x22
 800923c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d02d      	beq.n	80092a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009250:	4a40      	ldr	r2, [pc, #256]	@ (8009354 <UART_Start_Receive_DMA+0x140>)
 8009252:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800925a:	4a3f      	ldr	r2, [pc, #252]	@ (8009358 <UART_Start_Receive_DMA+0x144>)
 800925c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009264:	4a3d      	ldr	r2, [pc, #244]	@ (800935c <UART_Start_Receive_DMA+0x148>)
 8009266:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926e:	2200      	movs	r2, #0
 8009270:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3324      	adds	r3, #36	@ 0x24
 800927e:	4619      	mov	r1, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009284:	461a      	mov	r2, r3
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	f7f8 fbce 	bl	8001a28 <HAL_DMA_Start_IT>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d009      	beq.n	80092a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2210      	movs	r2, #16
 8009296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e051      	b.n	800934a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d018      	beq.n	80092e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80092da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e6      	bne.n	80092ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	e853 3f00 	ldrex	r3, [r3]
 80092ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3308      	adds	r3, #8
 80092fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009300:	637a      	str	r2, [r7, #52]	@ 0x34
 8009302:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800930e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e5      	bne.n	80092e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	613b      	str	r3, [r7, #16]
   return(result);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3308      	adds	r3, #8
 8009332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009334:	623a      	str	r2, [r7, #32]
 8009336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	69f9      	ldr	r1, [r7, #28]
 800933a:	6a3a      	ldr	r2, [r7, #32]
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	61bb      	str	r3, [r7, #24]
   return(result);
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e5      	bne.n	8009314 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3758      	adds	r7, #88	@ 0x58
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	080094b1 	.word	0x080094b1
 8009358:	080095d9 	.word	0x080095d9
 800935c:	08009617 	.word	0x08009617

08009360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009360:	b480      	push	{r7}
 8009362:	b08f      	sub	sp, #60	@ 0x3c
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	61fb      	str	r3, [r7, #28]
   return(result);
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800937c:	637b      	str	r3, [r7, #52]	@ 0x34
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009388:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800938c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e6      	bne.n	8009368 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80093b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3308      	adds	r3, #8
 80093b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ba:	61ba      	str	r2, [r7, #24]
 80093bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6979      	ldr	r1, [r7, #20]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	613b      	str	r3, [r7, #16]
   return(result);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80093d6:	bf00      	nop
 80093d8:	373c      	adds	r7, #60	@ 0x3c
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b095      	sub	sp, #84	@ 0x54
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800940a:	643b      	str	r3, [r7, #64]	@ 0x40
 800940c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e6      	bne.n	80093ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	61fb      	str	r3, [r7, #28]
   return(result);
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	4b1e      	ldr	r3, [pc, #120]	@ (80094ac <UART_EndRxTransfer+0xc8>)
 8009432:	4013      	ands	r3, r2
 8009434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800943e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e5      	bne.n	800941e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009456:	2b01      	cmp	r3, #1
 8009458:	d118      	bne.n	800948c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	60bb      	str	r3, [r7, #8]
   return(result);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f023 0310 	bic.w	r3, r3, #16
 800946e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	613b      	str	r3, [r7, #16]
   return(result);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80094a0:	bf00      	nop
 80094a2:	3754      	adds	r7, #84	@ 0x54
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	effffffe 	.word	0xeffffffe

080094b0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b09c      	sub	sp, #112	@ 0x70
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c6:	d071      	beq.n	80095ac <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80094c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e6      	bne.n	80094d0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	f023 0301 	bic.w	r3, r3, #1
 8009518:	667b      	str	r3, [r7, #100]	@ 0x64
 800951a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009522:	647a      	str	r2, [r7, #68]	@ 0x44
 8009524:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009528:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e5      	bne.n	8009502 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	623b      	str	r3, [r7, #32]
   return(result);
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800954c:	663b      	str	r3, [r7, #96]	@ 0x60
 800954e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009556:	633a      	str	r2, [r7, #48]	@ 0x30
 8009558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800955c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e5      	bne.n	8009536 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800956a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800956c:	2220      	movs	r2, #32
 800956e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009576:	2b01      	cmp	r3, #1
 8009578:	d118      	bne.n	80095ac <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	60fb      	str	r3, [r7, #12]
   return(result);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0310 	bic.w	r3, r3, #16
 800958e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	617b      	str	r3, [r7, #20]
   return(result);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e6      	bne.n	800957a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ae:	2200      	movs	r2, #0
 80095b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d107      	bne.n	80095ca <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095c0:	4619      	mov	r1, r3
 80095c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095c4:	f7fe fdf4 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095c8:	e002      	b.n	80095d0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80095ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095cc:	f000 fb68 	bl	8009ca0 <HAL_UART_RxCpltCallback>
}
 80095d0:	bf00      	nop
 80095d2:	3770      	adds	r7, #112	@ 0x70
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d109      	bne.n	8009608 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095fa:	085b      	lsrs	r3, r3, #1
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7fe fdd5 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009606:	e002      	b.n	800960e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7fe fdbd 	bl	8008188 <HAL_UART_RxHalfCpltCallback>
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b086      	sub	sp, #24
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009632:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963e:	2b80      	cmp	r3, #128	@ 0x80
 8009640:	d109      	bne.n	8009656 <UART_DMAError+0x40>
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b21      	cmp	r3, #33	@ 0x21
 8009646:	d106      	bne.n	8009656 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2200      	movs	r2, #0
 800964c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009650:	6978      	ldr	r0, [r7, #20]
 8009652:	f7ff fe85 	bl	8009360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009660:	2b40      	cmp	r3, #64	@ 0x40
 8009662:	d109      	bne.n	8009678 <UART_DMAError+0x62>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b22      	cmp	r3, #34	@ 0x22
 8009668:	d106      	bne.n	8009678 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2200      	movs	r2, #0
 800966e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	f7ff feb6 	bl	80093e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967e:	f043 0210 	orr.w	r2, r3, #16
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009688:	6978      	ldr	r0, [r7, #20]
 800968a:	f7fe fd87 	bl	800819c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800968e:	bf00      	nop
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7fe fd71 	bl	800819c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b08f      	sub	sp, #60	@ 0x3c
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d0:	2b21      	cmp	r3, #33	@ 0x21
 80096d2:	d14c      	bne.n	800976e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096da:	b29b      	uxth	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d132      	bne.n	8009746 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009700:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e6      	bne.n	80096e0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009726:	633b      	str	r3, [r7, #48]	@ 0x30
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	613b      	str	r3, [r7, #16]
   return(result);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e6      	bne.n	8009712 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009744:	e013      	b.n	800976e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800974a:	781a      	ldrb	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b01      	subs	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800976e:	bf00      	nop
 8009770:	373c      	adds	r7, #60	@ 0x3c
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800977a:	b480      	push	{r7}
 800977c:	b091      	sub	sp, #68	@ 0x44
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009788:	2b21      	cmp	r3, #33	@ 0x21
 800978a:	d151      	bne.n	8009830 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d132      	bne.n	80097fe <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	623b      	str	r3, [r7, #32]
   return(result);
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e6      	bne.n	8009798 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	69b9      	ldr	r1, [r7, #24]
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	617b      	str	r3, [r7, #20]
   return(result);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80097fc:	e018      	b.n	8009830 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009812:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009818:	1c9a      	adds	r2, r3, #2
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009824:	b29b      	uxth	r3, r3
 8009826:	3b01      	subs	r3, #1
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009830:	bf00      	nop
 8009832:	3744      	adds	r7, #68	@ 0x44
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b091      	sub	sp, #68	@ 0x44
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800984a:	2b21      	cmp	r3, #33	@ 0x21
 800984c:	d160      	bne.n	8009910 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009854:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009856:	e057      	b.n	8009908 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d133      	bne.n	80098cc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	623b      	str	r3, [r7, #32]
   return(result);
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800987a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3308      	adds	r3, #8
 8009882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009884:	633a      	str	r2, [r7, #48]	@ 0x30
 8009886:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800988a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e5      	bne.n	8009864 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	69b9      	ldr	r1, [r7, #24]
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	617b      	str	r3, [r7, #20]
   return(result);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e6      	bne.n	8009898 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80098ca:	e021      	b.n	8009910 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d013      	beq.n	8009902 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009902:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009904:	3b01      	subs	r3, #1
 8009906:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009908:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1a4      	bne.n	8009858 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800990e:	e7ff      	b.n	8009910 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009910:	bf00      	nop
 8009912:	3744      	adds	r7, #68	@ 0x44
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b091      	sub	sp, #68	@ 0x44
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	2b21      	cmp	r3, #33	@ 0x21
 800992c:	d165      	bne.n	80099fa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009934:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009936:	e05c      	b.n	80099f2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d133      	bne.n	80099ac <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	61fb      	str	r3, [r7, #28]
   return(result);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800996a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	60bb      	str	r3, [r7, #8]
   return(result);
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800998c:	633b      	str	r3, [r7, #48]	@ 0x30
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	6979      	ldr	r1, [r7, #20]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	613b      	str	r3, [r7, #16]
   return(result);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e6      	bne.n	8009978 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80099aa:	e026      	b.n	80099fa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d018      	beq.n	80099ec <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099be:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80099c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ce:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099d4:	1c9a      	adds	r2, r3, #2
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099ee:	3b01      	subs	r3, #1
 80099f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80099f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d19f      	bne.n	8009938 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80099f8:	e7ff      	b.n	80099fa <UART_TxISR_16BIT_FIFOEN+0xde>
 80099fa:	bf00      	nop
 80099fc:	3744      	adds	r7, #68	@ 0x44
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2220      	movs	r2, #32
 8009a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f936 	bl	8009cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a54:	bf00      	nop
 8009a56:	3720      	adds	r7, #32
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <HAL_UARTEx_DisableFifoMode+0x16>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e027      	b.n	8009afe <HAL_UARTEx_DisableFifoMode+0x66>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2224      	movs	r2, #36	@ 0x24
 8009aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f022 0201 	bic.w	r2, r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009adc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e02d      	b.n	8009b7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2224      	movs	r2, #36	@ 0x24
 8009b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0201 	bic.w	r2, r2, #1
 8009b48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f850 	bl	8009c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e02d      	b.n	8009bfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2224      	movs	r2, #36	@ 0x24
 8009baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f812 	bl	8009c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c24:	e031      	b.n	8009c8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c26:	2310      	movs	r3, #16
 8009c28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	0e5b      	lsrs	r3, r3, #25
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	0f5b      	lsrs	r3, r3, #29
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	7b3a      	ldrb	r2, [r7, #12]
 8009c52:	4911      	ldr	r1, [pc, #68]	@ (8009c98 <UARTEx_SetNbDataToProcess+0x94>)
 8009c54:	5c8a      	ldrb	r2, [r1, r2]
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c5a:	7b3a      	ldrb	r2, [r7, #12]
 8009c5c:	490f      	ldr	r1, [pc, #60]	@ (8009c9c <UARTEx_SetNbDataToProcess+0x98>)
 8009c5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	7b7a      	ldrb	r2, [r7, #13]
 8009c70:	4909      	ldr	r1, [pc, #36]	@ (8009c98 <UARTEx_SetNbDataToProcess+0x94>)
 8009c72:	5c8a      	ldrb	r2, [r1, r2]
 8009c74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c78:	7b7a      	ldrb	r2, [r7, #13]
 8009c7a:	4908      	ldr	r1, [pc, #32]	@ (8009c9c <UARTEx_SetNbDataToProcess+0x98>)
 8009c7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c8a:	bf00      	nop
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	0800a1f4 	.word	0x0800a1f4
 8009c9c:	0800a1fc 	.word	0x0800a1fc

08009ca0 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 8009ca8:	4b04      	ldr	r3, [pc, #16]	@ (8009cbc <HAL_UART_RxCpltCallback+0x1c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	60fb      	str	r3, [r7, #12]

	fptr();
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4798      	blx	r3
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	24000340 	.word	0x24000340

08009cc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 8009cdc:	4a04      	ldr	r2, [pc, #16]	@ (8009cf0 <uartInit+0x1c>)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6013      	str	r3, [r2, #0]
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	24000340 	.word	0x24000340

08009cf4 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	4803      	ldr	r0, [pc, #12]	@ (8009d10 <receptionItrOn+0x1c>)
 8009d02:	f7fd fe3b 	bl	800797c <HAL_UART_Receive_DMA>
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	24000230 	.word	0x24000230

08009d14 <debugRxCallback>:
sCircularBuffer_t * rxBuffer = NULL;

uint8_t commandReceivedFlag = 0;

void debugRxCallback(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 8009d18:	4b08      	ldr	r3, [pc, #32]	@ (8009d3c <debugRxCallback+0x28>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b0d      	cmp	r3, #13
 8009d1e:	d102      	bne.n	8009d26 <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 8009d20:	4b07      	ldr	r3, [pc, #28]	@ (8009d40 <debugRxCallback+0x2c>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	701a      	strb	r2, [r3, #0]
	}

	circularBufferEnqueue(rxBuffer, (void * )&data);
 8009d26:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <debugRxCallback+0x30>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4904      	ldr	r1, [pc, #16]	@ (8009d3c <debugRxCallback+0x28>)
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f89e 	bl	8009e6e <circularBufferEnqueue>

	receptionItrOn(&data);
 8009d32:	4802      	ldr	r0, [pc, #8]	@ (8009d3c <debugRxCallback+0x28>)
 8009d34:	f7ff ffde 	bl	8009cf4 <receptionItrOn>

}
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	24000344 	.word	0x24000344
 8009d40:	2400034c 	.word	0x2400034c
 8009d44:	24000348 	.word	0x24000348

08009d48 <debugUartInit>:
{

}

void debugUartInit(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <debugUartInit+0x30>)
 8009d50:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 8009d52:	4b0a      	ldr	r3, [pc, #40]	@ (8009d7c <debugUartInit+0x34>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f84d 	bl	8009dfc <circularBufferInit>

	uartInit(rxCallbackFptr);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff ffb6 	bl	8009cd4 <uartInit>

	receptionItrOn(&data);
 8009d68:	4805      	ldr	r0, [pc, #20]	@ (8009d80 <debugUartInit+0x38>)
 8009d6a:	f7ff ffc3 	bl	8009cf4 <receptionItrOn>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08009d15 	.word	0x08009d15
 8009d7c:	24000348 	.word	0x24000348
 8009d80:	24000344 	.word	0x24000344

08009d84 <debugPrint>:



void debugPrint(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
	uint8_t pData = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	71fb      	strb	r3, [r7, #7]

	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(rxBuffer, (void *)&pData))
 8009d8e:	e005      	b.n	8009d9c <debugPrint+0x18>
	{
		HAL_UART_Transmit(&huart3, &pData, 1, 10);
 8009d90:	1df9      	adds	r1, r7, #7
 8009d92:	230a      	movs	r3, #10
 8009d94:	2201      	movs	r2, #1
 8009d96:	4809      	ldr	r0, [pc, #36]	@ (8009dbc <debugPrint+0x38>)
 8009d98:	f7fd fcce 	bl	8007738 <HAL_UART_Transmit>
	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(rxBuffer, (void *)&pData))
 8009d9c:	4b08      	ldr	r3, [pc, #32]	@ (8009dc0 <debugPrint+0x3c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	1dfa      	adds	r2, r7, #7
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 f8aa 	bl	8009efe <circularBufferDequeue>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d0ef      	beq.n	8009d90 <debugPrint+0xc>
	}

}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	24000230 	.word	0x24000230
 8009dc0:	24000348 	.word	0x24000348

08009dc4 <getCmdReceivedFlag>:

uint8_t getCmdReceivedFlag(void)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 8009dc8:	4b03      	ldr	r3, [pc, #12]	@ (8009dd8 <getCmdReceivedFlag+0x14>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	2400034c 	.word	0x2400034c

08009ddc <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 8009de6:	4a04      	ldr	r2, [pc, #16]	@ (8009df8 <setCmdReceivedFlag+0x1c>)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	7013      	strb	r3, [r2, #0]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	2400034c 	.word	0x2400034c

08009dfc <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	883a      	ldrh	r2, [r7, #0]
 8009e20:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	887a      	ldrh	r2, [r7, #2]
 8009e26:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 8009e28:	887b      	ldrh	r3, [r7, #2]
 8009e2a:	883a      	ldrh	r2, [r7, #0]
 8009e2c:	fb02 f303 	mul.w	r3, r2, r3
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f8a9 	bl	8009f88 <malloc>
 8009e36:	4603      	mov	r3, r0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68d8      	ldr	r0, [r3, #12]
 8009e50:	887b      	ldrh	r3, [r7, #2]
 8009e52:	883a      	ldrh	r2, [r7, #0]
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
 8009e58:	461a      	mov	r2, r3
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	f000 f94a 	bl	800a0f4 <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	889b      	ldrh	r3, [r3, #4]
 8009e88:	89ba      	ldrh	r2, [r7, #12]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d301      	bcc.n	8009e92 <circularBufferEnqueue+0x24>
    {
        next = 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	89ba      	ldrh	r2, [r7, #12]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d02b      	beq.n	8009ef4 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	8812      	ldrh	r2, [r2, #0]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	88d2      	ldrh	r2, [r2, #6]
 8009eaa:	fb01 f202 	mul.w	r2, r1, r2
 8009eae:	1898      	adds	r0, r3, r2
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	88db      	ldrh	r3, [r3, #6]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	f000 f960 	bl	800a17c <memcpy>
 8009ebc:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d017      	beq.n	8009ef4 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	89ba      	ldrh	r2, [r7, #12]
 8009ec8:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	889b      	ldrh	r3, [r3, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	8852      	ldrh	r2, [r2, #2]
 8009ede:	1a9b      	subs	r3, r3, r2
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	8892      	ldrh	r2, [r2, #4]
 8009ee4:	fb93 f1f2 	sdiv	r1, r3, r2
 8009ee8:	fb01 f202 	mul.w	r2, r1, r2
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 8009f08:	2305      	movs	r3, #5
 8009f0a:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	885a      	ldrh	r2, [r3, #2]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d032      	beq.n	8009f7e <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	885b      	ldrh	r3, [r3, #2]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	889b      	ldrh	r3, [r3, #4]
 8009f24:	89ba      	ldrh	r2, [r7, #12]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d301      	bcc.n	8009f2e <circularBufferDequeue+0x30>
        {
            next = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	8852      	ldrh	r2, [r2, #2]
 8009f36:	4611      	mov	r1, r2
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	88d2      	ldrh	r2, [r2, #6]
 8009f3c:	fb01 f202 	mul.w	r2, r1, r2
 8009f40:	1899      	adds	r1, r3, r2
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	88db      	ldrh	r3, [r3, #6]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6838      	ldr	r0, [r7, #0]
 8009f4a:	f000 f917 	bl	800a17c <memcpy>

        cBuff->tail = next;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	89ba      	ldrh	r2, [r7, #12]
 8009f52:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	889b      	ldrh	r3, [r3, #4]
 8009f5e:	4413      	add	r3, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	8852      	ldrh	r2, [r2, #2]
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	8892      	ldrh	r2, [r2, #4]
 8009f6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8009f6e:	fb01 f202 	mul.w	r2, r1, r2
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 8009f7a:	2304      	movs	r3, #4
 8009f7c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <malloc>:
 8009f88:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <malloc+0xc>)
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	f000 b825 	b.w	8009fdc <_malloc_r>
 8009f92:	bf00      	nop
 8009f94:	24000010 	.word	0x24000010

08009f98 <sbrk_aligned>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8009fd8 <sbrk_aligned+0x40>)
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	6831      	ldr	r1, [r6, #0]
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	b911      	cbnz	r1, 8009faa <sbrk_aligned+0x12>
 8009fa4:	f000 f8ae 	bl	800a104 <_sbrk_r>
 8009fa8:	6030      	str	r0, [r6, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f8a9 	bl	800a104 <_sbrk_r>
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d103      	bne.n	8009fbe <sbrk_aligned+0x26>
 8009fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8009fba:	4620      	mov	r0, r4
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	1cc4      	adds	r4, r0, #3
 8009fc0:	f024 0403 	bic.w	r4, r4, #3
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d0f8      	beq.n	8009fba <sbrk_aligned+0x22>
 8009fc8:	1a21      	subs	r1, r4, r0
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f89a 	bl	800a104 <_sbrk_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1f2      	bne.n	8009fba <sbrk_aligned+0x22>
 8009fd4:	e7ef      	b.n	8009fb6 <sbrk_aligned+0x1e>
 8009fd6:	bf00      	nop
 8009fd8:	24000350 	.word	0x24000350

08009fdc <_malloc_r>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	1ccd      	adds	r5, r1, #3
 8009fe2:	f025 0503 	bic.w	r5, r5, #3
 8009fe6:	3508      	adds	r5, #8
 8009fe8:	2d0c      	cmp	r5, #12
 8009fea:	bf38      	it	cc
 8009fec:	250c      	movcc	r5, #12
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	db01      	blt.n	8009ff8 <_malloc_r+0x1c>
 8009ff4:	42a9      	cmp	r1, r5
 8009ff6:	d904      	bls.n	800a002 <_malloc_r+0x26>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0d8 <_malloc_r+0xfc>
 800a006:	f000 f869 	bl	800a0dc <__malloc_lock>
 800a00a:	f8d8 3000 	ldr.w	r3, [r8]
 800a00e:	461c      	mov	r4, r3
 800a010:	bb44      	cbnz	r4, 800a064 <_malloc_r+0x88>
 800a012:	4629      	mov	r1, r5
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff ffbf 	bl	8009f98 <sbrk_aligned>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	4604      	mov	r4, r0
 800a01e:	d158      	bne.n	800a0d2 <_malloc_r+0xf6>
 800a020:	f8d8 4000 	ldr.w	r4, [r8]
 800a024:	4627      	mov	r7, r4
 800a026:	2f00      	cmp	r7, #0
 800a028:	d143      	bne.n	800a0b2 <_malloc_r+0xd6>
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d04b      	beq.n	800a0c6 <_malloc_r+0xea>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	4639      	mov	r1, r7
 800a032:	4630      	mov	r0, r6
 800a034:	eb04 0903 	add.w	r9, r4, r3
 800a038:	f000 f864 	bl	800a104 <_sbrk_r>
 800a03c:	4581      	cmp	r9, r0
 800a03e:	d142      	bne.n	800a0c6 <_malloc_r+0xea>
 800a040:	6821      	ldr	r1, [r4, #0]
 800a042:	1a6d      	subs	r5, r5, r1
 800a044:	4629      	mov	r1, r5
 800a046:	4630      	mov	r0, r6
 800a048:	f7ff ffa6 	bl	8009f98 <sbrk_aligned>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d03a      	beq.n	800a0c6 <_malloc_r+0xea>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	442b      	add	r3, r5
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	f8d8 3000 	ldr.w	r3, [r8]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	bb62      	cbnz	r2, 800a0b8 <_malloc_r+0xdc>
 800a05e:	f8c8 7000 	str.w	r7, [r8]
 800a062:	e00f      	b.n	800a084 <_malloc_r+0xa8>
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	1b52      	subs	r2, r2, r5
 800a068:	d420      	bmi.n	800a0ac <_malloc_r+0xd0>
 800a06a:	2a0b      	cmp	r2, #11
 800a06c:	d917      	bls.n	800a09e <_malloc_r+0xc2>
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	42a3      	cmp	r3, r4
 800a072:	6025      	str	r5, [r4, #0]
 800a074:	bf18      	it	ne
 800a076:	6059      	strne	r1, [r3, #4]
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	bf08      	it	eq
 800a07c:	f8c8 1000 	streq.w	r1, [r8]
 800a080:	5162      	str	r2, [r4, r5]
 800a082:	604b      	str	r3, [r1, #4]
 800a084:	4630      	mov	r0, r6
 800a086:	f000 f82f 	bl	800a0e8 <__malloc_unlock>
 800a08a:	f104 000b 	add.w	r0, r4, #11
 800a08e:	1d23      	adds	r3, r4, #4
 800a090:	f020 0007 	bic.w	r0, r0, #7
 800a094:	1ac2      	subs	r2, r0, r3
 800a096:	bf1c      	itt	ne
 800a098:	1a1b      	subne	r3, r3, r0
 800a09a:	50a3      	strne	r3, [r4, r2]
 800a09c:	e7af      	b.n	8009ffe <_malloc_r+0x22>
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	bf0c      	ite	eq
 800a0a4:	f8c8 2000 	streq.w	r2, [r8]
 800a0a8:	605a      	strne	r2, [r3, #4]
 800a0aa:	e7eb      	b.n	800a084 <_malloc_r+0xa8>
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	6864      	ldr	r4, [r4, #4]
 800a0b0:	e7ae      	b.n	800a010 <_malloc_r+0x34>
 800a0b2:	463c      	mov	r4, r7
 800a0b4:	687f      	ldr	r7, [r7, #4]
 800a0b6:	e7b6      	b.n	800a026 <_malloc_r+0x4a>
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d1fb      	bne.n	800a0b8 <_malloc_r+0xdc>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	6053      	str	r3, [r2, #4]
 800a0c4:	e7de      	b.n	800a084 <_malloc_r+0xa8>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f80c 	bl	800a0e8 <__malloc_unlock>
 800a0d0:	e794      	b.n	8009ffc <_malloc_r+0x20>
 800a0d2:	6005      	str	r5, [r0, #0]
 800a0d4:	e7d6      	b.n	800a084 <_malloc_r+0xa8>
 800a0d6:	bf00      	nop
 800a0d8:	24000354 	.word	0x24000354

0800a0dc <__malloc_lock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_lock+0x8>)
 800a0de:	f000 b84b 	b.w	800a178 <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	24000494 	.word	0x24000494

0800a0e8 <__malloc_unlock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	@ (800a0f0 <__malloc_unlock+0x8>)
 800a0ea:	f000 b846 	b.w	800a17a <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	24000494 	.word	0x24000494

0800a0f4 <memset>:
 800a0f4:	4402      	add	r2, r0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d100      	bne.n	800a0fe <memset+0xa>
 800a0fc:	4770      	bx	lr
 800a0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a102:	e7f9      	b.n	800a0f8 <memset+0x4>

0800a104 <_sbrk_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	@ (800a120 <_sbrk_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f6 fdac 	bl	8000c6c <_sbrk>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_sbrk_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_sbrk_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	24000490 	.word	0x24000490

0800a124 <__errno>:
 800a124:	4b01      	ldr	r3, [pc, #4]	@ (800a12c <__errno+0x8>)
 800a126:	6818      	ldr	r0, [r3, #0]
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	24000010 	.word	0x24000010

0800a130 <__libc_init_array>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	4d0d      	ldr	r5, [pc, #52]	@ (800a168 <__libc_init_array+0x38>)
 800a134:	4c0d      	ldr	r4, [pc, #52]	@ (800a16c <__libc_init_array+0x3c>)
 800a136:	1b64      	subs	r4, r4, r5
 800a138:	10a4      	asrs	r4, r4, #2
 800a13a:	2600      	movs	r6, #0
 800a13c:	42a6      	cmp	r6, r4
 800a13e:	d109      	bne.n	800a154 <__libc_init_array+0x24>
 800a140:	4d0b      	ldr	r5, [pc, #44]	@ (800a170 <__libc_init_array+0x40>)
 800a142:	4c0c      	ldr	r4, [pc, #48]	@ (800a174 <__libc_init_array+0x44>)
 800a144:	f000 f828 	bl	800a198 <_init>
 800a148:	1b64      	subs	r4, r4, r5
 800a14a:	10a4      	asrs	r4, r4, #2
 800a14c:	2600      	movs	r6, #0
 800a14e:	42a6      	cmp	r6, r4
 800a150:	d105      	bne.n	800a15e <__libc_init_array+0x2e>
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	f855 3b04 	ldr.w	r3, [r5], #4
 800a158:	4798      	blx	r3
 800a15a:	3601      	adds	r6, #1
 800a15c:	e7ee      	b.n	800a13c <__libc_init_array+0xc>
 800a15e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a162:	4798      	blx	r3
 800a164:	3601      	adds	r6, #1
 800a166:	e7f2      	b.n	800a14e <__libc_init_array+0x1e>
 800a168:	0800a20c 	.word	0x0800a20c
 800a16c:	0800a20c 	.word	0x0800a20c
 800a170:	0800a20c 	.word	0x0800a20c
 800a174:	0800a210 	.word	0x0800a210

0800a178 <__retarget_lock_acquire_recursive>:
 800a178:	4770      	bx	lr

0800a17a <__retarget_lock_release_recursive>:
 800a17a:	4770      	bx	lr

0800a17c <memcpy>:
 800a17c:	440a      	add	r2, r1
 800a17e:	4291      	cmp	r1, r2
 800a180:	f100 33ff 	add.w	r3, r0, #4294967295
 800a184:	d100      	bne.n	800a188 <memcpy+0xc>
 800a186:	4770      	bx	lr
 800a188:	b510      	push	{r4, lr}
 800a18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a192:	4291      	cmp	r1, r2
 800a194:	d1f9      	bne.n	800a18a <memcpy+0xe>
 800a196:	bd10      	pop	{r4, pc}

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr

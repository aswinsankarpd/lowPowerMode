
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b454  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b724  0800b724  0000c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b890  0800b890  0000c890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b898  0800b898  0000c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b89c  0800b89c  0000c89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a8  24000000  0800b8a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a8  0800b948  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000108  0800b9a8  0000d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  24000168  0800ba08  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2400090c  0800ba08  0000d90c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001794a  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ea  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00027dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b77  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035678  00000000  00000000  0002986f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001980b  00000000  00000000  0005eee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001488a1  00000000  00000000  000786f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0f93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  001c0fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001c571c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b70c 	.word	0x0800b70c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b70c 	.word	0x0800b70c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f009 fd4b 	bl	800a164 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <debugCLITask+0x2e>
    {
        parseCommand();
 80006e0:	f000 f80a 	bl	80006f8 <parseCommand>
        processCommand();
 80006e4:	f000 f830 	bl	8000748 <processCommand>
        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f009 fd47 	bl	800a17c <setCmdReceivedFlag>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <parseCommand>:

static void parseCommand(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	80fb      	strh	r3, [r7, #6]

    // Dequeue data from circular buffer until end of command (0x0D) is detected
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000706:	e00d      	b.n	8000724 <parseCommand+0x2c>
    {


        // Reset index if end of command is detected
        if(pData == 0x0D)
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	2b0d      	cmp	r3, #13
 800070c:	d102      	bne.n	8000714 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	80fb      	strh	r3, [r7, #6]
            break;
 8000712:	e013      	b.n	800073c <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000714:	88b9      	ldrh	r1, [r7, #4]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	80fa      	strh	r2, [r7, #6]
 800071c:	461a      	mov	r2, r3
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <parseCommand+0x4c>)
 8000722:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000724:	f009 fd3a 	bl	800a19c <getRxBuffer>
 8000728:	4602      	mov	r2, r0
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4610      	mov	r0, r2
 8000730:	f009 fdc1 	bl	800a2b6 <circularBufferDequeue>
 8000734:	4603      	mov	r3, r0
 8000736:	2b04      	cmp	r3, #4
 8000738:	d0e6      	beq.n	8000708 <parseCommand+0x10>
        }
    }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	24000184 	.word	0x24000184

08000748 <processCommand>:

static void processCommand(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 8000752:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <processCommand+0x13c>)
 8000754:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]

    args[argIndex] = strtok((char *)commandBuffer, " ");
 800075e:	7bfc      	ldrb	r4, [r7, #15]
 8000760:	4949      	ldr	r1, [pc, #292]	@ (8000888 <processCommand+0x140>)
 8000762:	484a      	ldr	r0, [pc, #296]	@ (800088c <processCommand+0x144>)
 8000764:	f009 ffe4 	bl	800a730 <strtok>
 8000768:	4603      	mov	r3, r0
 800076a:	4a49      	ldr	r2, [pc, #292]	@ (8000890 <processCommand+0x148>)
 800076c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 8000770:	e00b      	b.n	800078a <processCommand+0x42>
    {
        argIndex++;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3301      	adds	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000778:	7bfc      	ldrb	r4, [r7, #15]
 800077a:	4943      	ldr	r1, [pc, #268]	@ (8000888 <processCommand+0x140>)
 800077c:	2000      	movs	r0, #0
 800077e:	f009 ffd7 	bl	800a730 <strtok>
 8000782:	4603      	mov	r3, r0
 8000784:	4a42      	ldr	r2, [pc, #264]	@ (8000890 <processCommand+0x148>)
 8000786:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <processCommand+0x148>)
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ed      	bne.n	8000772 <processCommand+0x2a>
    }

    cmdIdx = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 800079e:	e04b      	b.n	8000838 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	461a      	mov	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4936      	ldr	r1, [pc, #216]	@ (8000890 <processCommand+0x148>)
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4610      	mov	r0, r2
 80007be:	f7ff fda7 	bl	8000310 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d134      	bne.n	8000832 <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	461a      	mov	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	461a      	mov	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	4928      	ldr	r1, [pc, #160]	@ (8000894 <processCommand+0x14c>)
 80007f2:	4827      	ldr	r0, [pc, #156]	@ (8000890 <processCommand+0x148>)
 80007f4:	4798      	blx	r3
    			cmdSucessFlag = true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	71bb      	strb	r3, [r7, #6]
				break;
 80007fa:	e028      	b.n	800084e <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	461a      	mov	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d012      	beq.n	8000838 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	461a      	mov	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3301      	adds	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	e002      	b.n	8000838 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3301      	adds	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	461a      	mov	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4413      	add	r3, r2
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1a8      	bne.n	80007a0 <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00f      	beq.n	800087a <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <processCommand+0x150>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <processCommand+0x154>)
 800085e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <processCommand+0x14c>)
 8000864:	f009 fee4 	bl	800a630 <sniprintf>
 8000868:	4603      	mov	r3, r0
 800086a:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	b29a      	uxth	r2, r3
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	4908      	ldr	r1, [pc, #32]	@ (8000894 <processCommand+0x14c>)
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <processCommand+0x158>)
 8000876:	f007 f94f 	bl	8007b18 <HAL_UART_Transmit>
    }
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	24000018 	.word	0x24000018
 8000888:	0800b734 	.word	0x0800b734
 800088c:	24000184 	.word	0x24000184
 8000890:	24000384 	.word	0x24000384
 8000894:	240003ac 	.word	0x240003ac
 8000898:	0800b738 	.word	0x0800b738
 800089c:	0800b74c 	.word	0x0800b74c
 80008a0:	240006a0 	.word	0x240006a0

080008a4 <sampleGetFunction>:


static void sampleGetFunction(char * args, char *response)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)"get Cmd OK", 10, 100);
 80008ae:	2364      	movs	r3, #100	@ 0x64
 80008b0:	220a      	movs	r2, #10
 80008b2:	4904      	ldr	r1, [pc, #16]	@ (80008c4 <sampleGetFunction+0x20>)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <sampleGetFunction+0x24>)
 80008b6:	f007 f92f 	bl	8007b18 <HAL_UART_Transmit>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	0800b750 	.word	0x0800b750
 80008c8:	240006a0 	.word	0x240006a0

080008cc <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 80008d0:	2210      	movs	r2, #16
 80008d2:	4904      	ldr	r1, [pc, #16]	@ (80008e4 <systemInit+0x18>)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <systemInit+0x1c>)
 80008d6:	f007 f9ad 	bl	8007c34 <HAL_UART_Transmit_IT>

	debugUartInit();
 80008da:	f009 fc25 	bl	800a128 <debugUartInit>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	0800b75c 	.word	0x0800b75c
 80008e8:	240006a0 	.word	0x240006a0

080008ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <MX_DMA_Init+0x3c>)
 80008f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <MX_DMA_Init+0x3c>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_DMA_Init+0x3c>)
 8000904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	200b      	movs	r0, #11
 8000916:	f000 feea 	bl	80016ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800091a:	200b      	movs	r0, #11
 800091c:	f000 ff01 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58024400 	.word	0x58024400

0800092c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_ETH_Init+0x80>)
 8000932:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <MX_ETH_Init+0x84>)
 8000934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_ETH_Init+0x88>)
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000944:	22e1      	movs	r2, #225	@ 0xe1
 8000946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_ETH_Init+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_ETH_Init+0x88>)
 8000956:	2200      	movs	r2, #0
 8000958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_ETH_Init+0x80>)
 800095c:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_ETH_Init+0x88>)
 800095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_ETH_Init+0x80>)
 8000962:	2201      	movs	r2, #1
 8000964:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_ETH_Init+0x80>)
 8000968:	4a13      	ldr	r2, [pc, #76]	@ (80009b8 <MX_ETH_Init+0x8c>)
 800096a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_ETH_Init+0x80>)
 800096e:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <MX_ETH_Init+0x90>)
 8000970:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_ETH_Init+0x80>)
 8000974:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097a:	480c      	ldr	r0, [pc, #48]	@ (80009ac <MX_ETH_Init+0x80>)
 800097c:	f003 fd24 	bl	80043c8 <HAL_ETH_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 fa6d 	bl	8000e64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800098a:	2238      	movs	r2, #56	@ 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_ETH_Init+0x94>)
 8000990:	f009 fec5 	bl	800a71e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000994:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <MX_ETH_Init+0x94>)
 8000996:	2221      	movs	r2, #33	@ 0x21
 8000998:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_ETH_Init+0x94>)
 800099c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <MX_ETH_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	240005e4 	.word	0x240005e4
 80009b0:	40028000 	.word	0x40028000
 80009b4:	24000694 	.word	0x24000694
 80009b8:	24000108 	.word	0x24000108
 80009bc:	240000a8 	.word	0x240000a8
 80009c0:	240005ac 	.word	0x240005ac

080009c4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	@ 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a59      	ldr	r2, [pc, #356]	@ (8000b48 <HAL_ETH_MspInit+0x184>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f040 80ab 	bne.w	8000b3e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80009e8:	4b58      	ldr	r3, [pc, #352]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 80009ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ee:	4a57      	ldr	r2, [pc, #348]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 80009f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009f8:	4b54      	ldr	r3, [pc, #336]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 80009fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a06:	4b51      	ldr	r3, [pc, #324]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a16:	4b4d      	ldr	r3, [pc, #308]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a24:	4b49      	ldr	r3, [pc, #292]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a2a:	4a48      	ldr	r2, [pc, #288]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a34:	4b45      	ldr	r3, [pc, #276]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b42      	ldr	r3, [pc, #264]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	4a40      	ldr	r2, [pc, #256]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a52:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b3a      	ldr	r3, [pc, #232]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	4a39      	ldr	r2, [pc, #228]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a70:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	4a31      	ldr	r2, [pc, #196]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <HAL_ETH_MspInit+0x188>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aba:	2332      	movs	r3, #50	@ 0x32
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_ETH_MspInit+0x18c>)
 8000ad6:	f004 f8ab 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ada:	2386      	movs	r3, #134	@ 0x86
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aea:	230b      	movs	r3, #11
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_ETH_MspInit+0x190>)
 8000af6:	f004 f89b 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <HAL_ETH_MspInit+0x194>)
 8000b18:	f004 f88a 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b2e:	230b      	movs	r3, #11
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <HAL_ETH_MspInit+0x198>)
 8000b3a:	f004 f879 	bl	8004c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40028000 	.word	0x40028000
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020800 	.word	0x58020800
 8000b54:	58020000 	.word	0x58020000
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	58021800 	.word	0x58021800

08000b60 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b71      	ldr	r3, [pc, #452]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a6f      	ldr	r2, [pc, #444]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b6d      	ldr	r3, [pc, #436]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b94:	4b69      	ldr	r3, [pc, #420]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a68      	ldr	r2, [pc, #416]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b65      	ldr	r3, [pc, #404]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b62      	ldr	r3, [pc, #392]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a60      	ldr	r2, [pc, #384]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a59      	ldr	r2, [pc, #356]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4b53      	ldr	r3, [pc, #332]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a51      	ldr	r2, [pc, #324]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a4a      	ldr	r2, [pc, #296]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2a:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a42      	ldr	r2, [pc, #264]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <MX_GPIO_Init+0x1dc>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c4e:	483c      	ldr	r0, [pc, #240]	@ (8000d40 <MX_GPIO_Init+0x1e0>)
 8000c50:	f004 f996 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5a:	483a      	ldr	r0, [pc, #232]	@ (8000d44 <MX_GPIO_Init+0x1e4>)
 8000c5c:	f004 f990 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2102      	movs	r1, #2
 8000c64:	4838      	ldr	r0, [pc, #224]	@ (8000d48 <MX_GPIO_Init+0x1e8>)
 8000c66:	f004 f98b 	bl	8004f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4833      	ldr	r0, [pc, #204]	@ (8000d4c <MX_GPIO_Init+0x1ec>)
 8000c80:	f003 ffd6 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c84:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4828      	ldr	r0, [pc, #160]	@ (8000d40 <MX_GPIO_Init+0x1e0>)
 8000c9e:	f003 ffc7 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	@ (8000d44 <MX_GPIO_Init+0x1e4>)
 8000cbc:	f003 ffb8 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481e      	ldr	r0, [pc, #120]	@ (8000d50 <MX_GPIO_Init+0x1f0>)
 8000cd6:	f003 ffab 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4819      	ldr	r0, [pc, #100]	@ (8000d54 <MX_GPIO_Init+0x1f4>)
 8000cf0:	f003 ff9e 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d06:	230a      	movs	r3, #10
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4810      	ldr	r0, [pc, #64]	@ (8000d54 <MX_GPIO_Init+0x1f4>)
 8000d12:	f003 ff8d 	bl	8004c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_GPIO_Init+0x1e8>)
 8000d2e:	f003 ff7f 	bl	8004c30 <HAL_GPIO_Init>

}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	@ 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020400 	.word	0x58020400
 8000d44:	58020c00 	.word	0x58020c00
 8000d48:	58021000 	.word	0x58021000
 8000d4c:	58020800 	.word	0x58020800
 8000d50:	58021800 	.word	0x58021800
 8000d54:	58020000 	.word	0x58020000

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fb46 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f810 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f7ff fefc 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d68:	f7ff fdc0 	bl	80008ec <MX_DMA_Init>
  MX_ETH_Init();
 8000d6c:	f7ff fdde 	bl	800092c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d70:	f000 fa1a 	bl	80011a8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d74:	f000 fb08 	bl	8001388 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000d78:	f7ff fda8 	bl	80008cc <systemInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000d7c:	f7ff fca0 	bl	80006c0 <debugCLITask>
 8000d80:	e7fc      	b.n	8000d7c <main+0x24>
	...

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	@ 0x70
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	224c      	movs	r2, #76	@ 0x4c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f009 fcc3 	bl	800a71e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fcbd 	bl	800a71e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f004 f905 	bl	8004fb4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <SystemClock_Config+0xdc>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e60 <SystemClock_Config+0xdc>)
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <SystemClock_Config+0xdc>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc6:	bf00      	nop
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <SystemClock_Config+0xdc>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd4:	d1f8      	bne.n	8000dc8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dd6:	2321      	movs	r3, #33	@ 0x21
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dda:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000de0:	2301      	movs	r3, #1
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000df0:	f240 1313 	movw	r3, #275	@ 0x113
 8000df4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000e02:	2304      	movs	r3, #4
 8000e04:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 f908 	bl	8005028 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e1e:	f000 f821 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	233f      	movs	r3, #63	@ 0x3f
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2303      	movs	r3, #3
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e36:	2340      	movs	r3, #64	@ 0x40
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e40:	2340      	movs	r3, #64	@ 0x40
 8000e42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2103      	movs	r1, #3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fcc7 	bl	80057dc <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e54:	f000 f806 	bl	8000e64 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3770      	adds	r7, #112	@ 0x70
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024800 	.word	0x58024800

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <Error_Handler+0x8>

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_MspInit+0x30>)
 8000e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e7c:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <HAL_MspInit+0x30>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_MspInit+0x30>)
 8000e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 fae9 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA1_Stream0_IRQHandler+0x10>)
 8000f0a:	f001 ff4b 	bl	8002da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	24000734 	.word	0x24000734

08000f18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USART3_IRQHandler+0x10>)
 8000f1e:	f006 ff69 	bl	8007df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240006a0 	.word	0x240006a0

08000f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_kill>:

int _kill(int pid, int sig)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f46:	f009 fca5 	bl	800a894 <__errno>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_exit>:

void _exit (int status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffe7 	bl	8000f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <_exit+0x12>

08000f72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e009      	b.n	8000fd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbf1      	blt.n	8000fbe <_write+0x12>
  }
  return len;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_close>:

int _close(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100c:	605a      	str	r2, [r3, #4]
  return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_isatty>:

int _isatty(int file)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001032:	b480      	push	{r7}
 8001034:	b085      	sub	sp, #20
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f009 fc0a 	bl	800a894 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24050000 	.word	0x24050000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2400069c 	.word	0x2400069c
 80010b4:	24000910 	.word	0x24000910

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <SystemInit+0xd0>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <SystemInit+0xd0>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <SystemInit+0xd4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d807      	bhi.n	80010e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d8:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <SystemInit+0xd4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <SystemInit+0xd4>)
 80010e2:	f043 0307 	orr.w	r3, r3, #7
 80010e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <SystemInit+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <SystemInit+0xd8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <SystemInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <SystemInit+0xd8>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4924      	ldr	r1, [pc, #144]	@ (8001190 <SystemInit+0xd8>)
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <SystemInit+0xdc>)
 8001102:	4013      	ands	r3, r2
 8001104:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <SystemInit+0xd4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <SystemInit+0xd4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 030f 	bic.w	r3, r3, #15
 800111a:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <SystemInit+0xd4>)
 800111c:	f043 0307 	orr.w	r3, r3, #7
 8001120:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <SystemInit+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <SystemInit+0xd8>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <SystemInit+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <SystemInit+0xd8>)
 8001136:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <SystemInit+0xe0>)
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <SystemInit+0xd8>)
 800113c:	4a17      	ldr	r2, [pc, #92]	@ (800119c <SystemInit+0xe4>)
 800113e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <SystemInit+0xd8>)
 8001142:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <SystemInit+0xe8>)
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <SystemInit+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <SystemInit+0xd8>)
 800114e:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <SystemInit+0xe8>)
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <SystemInit+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <SystemInit+0xd8>)
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <SystemInit+0xe8>)
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <SystemInit+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <SystemInit+0xd8>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <SystemInit+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <SystemInit+0xec>)
 8001178:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800117c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	52002000 	.word	0x52002000
 8001190:	58024400 	.word	0x58024400
 8001194:	eaf6ed7f 	.word	0xeaf6ed7f
 8001198:	02020200 	.word	0x02020200
 800119c:	01ff0000 	.word	0x01ff0000
 80011a0:	01010280 	.word	0x01010280
 80011a4:	52004000 	.word	0x52004000

080011a8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011ae:	4a23      	ldr	r2, [pc, #140]	@ (800123c <MX_USART3_UART_Init+0x94>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f0:	4811      	ldr	r0, [pc, #68]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 80011f2:	f006 fc41 	bl	8007a78 <HAL_UART_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011fc:	f7ff fe32 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 8001204:	f008 fe71 	bl	8009eea <HAL_UARTEx_SetTxFifoThreshold>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800120e:	f7ff fe29 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	4808      	ldr	r0, [pc, #32]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 8001216:	f008 fea6 	bl	8009f66 <HAL_UARTEx_SetRxFifoThreshold>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001220:	f7ff fe20 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_USART3_UART_Init+0x90>)
 8001226:	f008 fe27 	bl	8009e78 <HAL_UARTEx_DisableFifoMode>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001230:	f7ff fe18 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	240006a0 	.word	0x240006a0
 800123c:	40004800 	.word	0x40004800

08001240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b8      	sub	sp, #224	@ 0xe0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	22b8      	movs	r2, #184	@ 0xb8
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f009 fa5c 	bl	800a71e <memset>
  if(uartHandle->Instance==USART3)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a42      	ldr	r2, [pc, #264]	@ (8001374 <HAL_UART_MspInit+0x134>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d17c      	bne.n	800136a <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001270:	f04f 0202 	mov.w	r2, #2
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fe34 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001292:	f7ff fde7 	bl	8000e64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001296:	4b38      	ldr	r3, [pc, #224]	@ (8001378 <HAL_UART_MspInit+0x138>)
 8001298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129c:	4a36      	ldr	r2, [pc, #216]	@ (8001378 <HAL_UART_MspInit+0x138>)
 800129e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <HAL_UART_MspInit+0x138>)
 80012a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_UART_MspInit+0x138>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <HAL_UART_MspInit+0x138>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <HAL_UART_MspInit+0x138>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80012d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ec:	2307      	movs	r3, #7
 80012ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012f6:	4619      	mov	r1, r3
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <HAL_UART_MspInit+0x13c>)
 80012fa:	f003 fc99 	bl	8004c30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001300:	4a20      	ldr	r2, [pc, #128]	@ (8001384 <HAL_UART_MspInit+0x144>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001306:	222d      	movs	r2, #45	@ 0x2d
 8001308:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_UART_MspInit+0x140>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_UART_MspInit+0x140>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800133c:	4810      	ldr	r0, [pc, #64]	@ (8001380 <HAL_UART_MspInit+0x140>)
 800133e:	f000 fa0b 	bl	8001758 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001348:	f7ff fd8c 	bl	8000e64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001354:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_UART_MspInit+0x140>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2027      	movs	r0, #39	@ 0x27
 8001360:	f000 f9c5 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001364:	2027      	movs	r0, #39	@ 0x27
 8001366:	f000 f9dc 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	37e0      	adds	r7, #224	@ 0xe0
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004800 	.word	0x40004800
 8001378:	58024400 	.word	0x58024400
 800137c:	58020c00 	.word	0x58020c00
 8001380:	24000734 	.word	0x24000734
 8001384:	40020010 	.word	0x40020010

08001388 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff fe8c 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f009 fa6b 	bl	800a8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fcc5 	bl	8000d58 <main>
  bx  lr
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d8:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 80013dc:	0800b8a0 	.word	0x0800b8a0
  ldr r2, =_sbss
 80013e0:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 80013e4:	2400090c 	.word	0x2400090c

080013e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f2:	2003      	movs	r0, #3
 80013f4:	f000 f970 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f8:	f004 fba6 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4913      	ldr	r1, [pc, #76]	@ (8001458 <HAL_Init+0x6c>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_Init+0x6c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_Init+0x70>)
 800142e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <HAL_Init+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f814 	bl	8001464 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e002      	b.n	800144c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001446:	f7ff fd13 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	0800b770 	.word	0x0800b770
 800145c:	24000040 	.word	0x24000040
 8001460:	2400003c 	.word	0x2400003c

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_InitTick+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e021      	b.n	80014bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_InitTick+0x64>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f955 	bl	800173e <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f91f 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x68>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24000048 	.word	0x24000048
 80014c8:	2400003c 	.word	0x2400003c
 80014cc:	24000044 	.word	0x24000044

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	24000048 	.word	0x24000048
 80014f4:	240007ac 	.word	0x240007ac

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	240007ac 	.word	0x240007ac

08001510 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001520:	4904      	ldr	r1, [pc, #16]	@ (8001534 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58000400 	.word	0x58000400

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	05fa0000 	.word	0x05fa0000

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff40 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff33 	bl	800159c <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa4 	bl	8001694 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff feca 	bl	80014f8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e312      	b.n	8001d96 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a66      	ldr	r2, [pc, #408]	@ (8001910 <HAL_DMA_Init+0x1b8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d04a      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a65      	ldr	r2, [pc, #404]	@ (8001914 <HAL_DMA_Init+0x1bc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d045      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a63      	ldr	r2, [pc, #396]	@ (8001918 <HAL_DMA_Init+0x1c0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d040      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a62      	ldr	r2, [pc, #392]	@ (800191c <HAL_DMA_Init+0x1c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d03b      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a60      	ldr	r2, [pc, #384]	@ (8001920 <HAL_DMA_Init+0x1c8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d036      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <HAL_DMA_Init+0x1cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d031      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001928 <HAL_DMA_Init+0x1d0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02c      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5c      	ldr	r2, [pc, #368]	@ (800192c <HAL_DMA_Init+0x1d4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d027      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001930 <HAL_DMA_Init+0x1d8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d022      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a59      	ldr	r2, [pc, #356]	@ (8001934 <HAL_DMA_Init+0x1dc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d01d      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a57      	ldr	r2, [pc, #348]	@ (8001938 <HAL_DMA_Init+0x1e0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d018      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a56      	ldr	r2, [pc, #344]	@ (800193c <HAL_DMA_Init+0x1e4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a54      	ldr	r2, [pc, #336]	@ (8001940 <HAL_DMA_Init+0x1e8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00e      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a53      	ldr	r2, [pc, #332]	@ (8001944 <HAL_DMA_Init+0x1ec>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a51      	ldr	r2, [pc, #324]	@ (8001948 <HAL_DMA_Init+0x1f0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_DMA_Init+0xb8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a50      	ldr	r2, [pc, #320]	@ (800194c <HAL_DMA_Init+0x1f4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_DMA_Init+0xbc>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_DMA_Init+0xbe>
 8001814:	2300      	movs	r3, #0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 813c 	beq.w	8001a94 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a37      	ldr	r2, [pc, #220]	@ (8001910 <HAL_DMA_Init+0x1b8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d04a      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a36      	ldr	r2, [pc, #216]	@ (8001914 <HAL_DMA_Init+0x1bc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d045      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <HAL_DMA_Init+0x1c0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d040      	beq.n	80018cc <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a33      	ldr	r2, [pc, #204]	@ (800191c <HAL_DMA_Init+0x1c4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d03b      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <HAL_DMA_Init+0x1c8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d036      	beq.n	80018cc <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a30      	ldr	r2, [pc, #192]	@ (8001924 <HAL_DMA_Init+0x1cc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d031      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2e      	ldr	r2, [pc, #184]	@ (8001928 <HAL_DMA_Init+0x1d0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02c      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2d      	ldr	r2, [pc, #180]	@ (800192c <HAL_DMA_Init+0x1d4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d027      	beq.n	80018cc <HAL_DMA_Init+0x174>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <HAL_DMA_Init+0x1d8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d022      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_DMA_Init+0x1dc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d01d      	beq.n	80018cc <HAL_DMA_Init+0x174>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a28      	ldr	r2, [pc, #160]	@ (8001938 <HAL_DMA_Init+0x1e0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d018      	beq.n	80018cc <HAL_DMA_Init+0x174>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a27      	ldr	r2, [pc, #156]	@ (800193c <HAL_DMA_Init+0x1e4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_DMA_Init+0x174>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <HAL_DMA_Init+0x1e8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00e      	beq.n	80018cc <HAL_DMA_Init+0x174>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <HAL_DMA_Init+0x1ec>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d009      	beq.n	80018cc <HAL_DMA_Init+0x174>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_DMA_Init+0x1f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_Init+0x174>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <HAL_DMA_Init+0x1f4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d108      	bne.n	80018de <HAL_DMA_Init+0x186>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e007      	b.n	80018ee <HAL_DMA_Init+0x196>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ee:	e02f      	b.n	8001950 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f0:	f7ff fe02 	bl	80014f8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d928      	bls.n	8001950 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e242      	b.n	8001d96 <HAL_DMA_Init+0x63e>
 8001910:	40020010 	.word	0x40020010
 8001914:	40020028 	.word	0x40020028
 8001918:	40020040 	.word	0x40020040
 800191c:	40020058 	.word	0x40020058
 8001920:	40020070 	.word	0x40020070
 8001924:	40020088 	.word	0x40020088
 8001928:	400200a0 	.word	0x400200a0
 800192c:	400200b8 	.word	0x400200b8
 8001930:	40020410 	.word	0x40020410
 8001934:	40020428 	.word	0x40020428
 8001938:	40020440 	.word	0x40020440
 800193c:	40020458 	.word	0x40020458
 8001940:	40020470 	.word	0x40020470
 8001944:	40020488 	.word	0x40020488
 8001948:	400204a0 	.word	0x400204a0
 800194c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1c8      	bne.n	80018f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4b83      	ldr	r3, [pc, #524]	@ (8001b78 <HAL_DMA_Init+0x420>)
 800196a:	4013      	ands	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001976:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ac:	4313      	orrs	r3, r2
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b28      	cmp	r3, #40	@ 0x28
 80019ba:	d903      	bls.n	80019c4 <HAL_DMA_Init+0x26c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80019c2:	d91f      	bls.n	8001a04 <HAL_DMA_Init+0x2ac>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80019ca:	d903      	bls.n	80019d4 <HAL_DMA_Init+0x27c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b42      	cmp	r3, #66	@ 0x42
 80019d2:	d917      	bls.n	8001a04 <HAL_DMA_Init+0x2ac>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b46      	cmp	r3, #70	@ 0x46
 80019da:	d903      	bls.n	80019e4 <HAL_DMA_Init+0x28c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b48      	cmp	r3, #72	@ 0x48
 80019e2:	d90f      	bls.n	8001a04 <HAL_DMA_Init+0x2ac>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80019ea:	d903      	bls.n	80019f4 <HAL_DMA_Init+0x29c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b52      	cmp	r3, #82	@ 0x52
 80019f2:	d907      	bls.n	8001a04 <HAL_DMA_Init+0x2ac>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b73      	cmp	r3, #115	@ 0x73
 80019fa:	d905      	bls.n	8001a08 <HAL_DMA_Init+0x2b0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b77      	cmp	r3, #119	@ 0x77
 8001a02:	d801      	bhi.n	8001a08 <HAL_DMA_Init+0x2b0>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_DMA_Init+0x2b2>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a14:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f023 0307 	bic.w	r3, r3, #7
 8001a2c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d117      	bne.n	8001a70 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00e      	beq.n	8001a70 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f002 fb2e 	bl	80040b4 <DMA_CheckFifoParam>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2240      	movs	r2, #64	@ 0x40
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e192      	b.n	8001d96 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f002 fa69 	bl	8003f50 <DMA_CalcBaseAndBitshift>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	223f      	movs	r2, #63	@ 0x3f
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	e0c8      	b.n	8001c26 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_DMA_Init+0x424>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d022      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a37      	ldr	r2, [pc, #220]	@ (8001b80 <HAL_DMA_Init+0x428>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d01d      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <HAL_DMA_Init+0x42c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d018      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a34      	ldr	r2, [pc, #208]	@ (8001b88 <HAL_DMA_Init+0x430>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a32      	ldr	r2, [pc, #200]	@ (8001b8c <HAL_DMA_Init+0x434>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00e      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a31      	ldr	r2, [pc, #196]	@ (8001b90 <HAL_DMA_Init+0x438>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b94 <HAL_DMA_Init+0x43c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_Init+0x38c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2e      	ldr	r2, [pc, #184]	@ (8001b98 <HAL_DMA_Init+0x440>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x390>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_DMA_Init+0x392>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8092 	beq.w	8001c14 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <HAL_DMA_Init+0x424>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d021      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a20      	ldr	r2, [pc, #128]	@ (8001b80 <HAL_DMA_Init+0x428>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01c      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1e      	ldr	r2, [pc, #120]	@ (8001b84 <HAL_DMA_Init+0x42c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d017      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	@ (8001b88 <HAL_DMA_Init+0x430>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_DMA_Init+0x434>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00d      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_DMA_Init+0x438>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_DMA_Init+0x43c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Init+0x3e6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <HAL_DMA_Init+0x440>)
 8001b3c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_DMA_Init+0x444>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b40      	cmp	r3, #64	@ 0x40
 8001b64:	d01c      	beq.n	8001ba0 <HAL_DMA_Init+0x448>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b80      	cmp	r3, #128	@ 0x80
 8001b6c:	d102      	bne.n	8001b74 <HAL_DMA_Init+0x41c>
 8001b6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b72:	e016      	b.n	8001ba2 <HAL_DMA_Init+0x44a>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e014      	b.n	8001ba2 <HAL_DMA_Init+0x44a>
 8001b78:	fe10803f 	.word	0xfe10803f
 8001b7c:	58025408 	.word	0x58025408
 8001b80:	5802541c 	.word	0x5802541c
 8001b84:	58025430 	.word	0x58025430
 8001b88:	58025444 	.word	0x58025444
 8001b8c:	58025458 	.word	0x58025458
 8001b90:	5802546c 	.word	0x5802546c
 8001b94:	58025480 	.word	0x58025480
 8001b98:	58025494 	.word	0x58025494
 8001b9c:	fffe000f 	.word	0xfffe000f
 8001ba0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68d2      	ldr	r2, [r2, #12]
 8001ba6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bd0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b6e      	ldr	r3, [pc, #440]	@ (8001da0 <HAL_DMA_Init+0x648>)
 8001be8:	4413      	add	r3, r2
 8001bea:	4a6e      	ldr	r2, [pc, #440]	@ (8001da4 <HAL_DMA_Init+0x64c>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	009a      	lsls	r2, r3, #2
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f002 f9a9 	bl	8003f50 <DMA_CalcBaseAndBitshift>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e008      	b.n	8001c26 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2240      	movs	r2, #64	@ 0x40
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0b7      	b.n	8001d96 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8001da8 <HAL_DMA_Init+0x650>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d072      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5d      	ldr	r2, [pc, #372]	@ (8001dac <HAL_DMA_Init+0x654>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d06d      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001db0 <HAL_DMA_Init+0x658>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d068      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a5a      	ldr	r2, [pc, #360]	@ (8001db4 <HAL_DMA_Init+0x65c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d063      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a59      	ldr	r2, [pc, #356]	@ (8001db8 <HAL_DMA_Init+0x660>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05e      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	@ (8001dbc <HAL_DMA_Init+0x664>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d059      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a56      	ldr	r2, [pc, #344]	@ (8001dc0 <HAL_DMA_Init+0x668>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d054      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a54      	ldr	r2, [pc, #336]	@ (8001dc4 <HAL_DMA_Init+0x66c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04f      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a53      	ldr	r2, [pc, #332]	@ (8001dc8 <HAL_DMA_Init+0x670>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d04a      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a51      	ldr	r2, [pc, #324]	@ (8001dcc <HAL_DMA_Init+0x674>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d045      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a50      	ldr	r2, [pc, #320]	@ (8001dd0 <HAL_DMA_Init+0x678>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d040      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd4 <HAL_DMA_Init+0x67c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d03b      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd8 <HAL_DMA_Init+0x680>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d036      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	@ (8001ddc <HAL_DMA_Init+0x684>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_DMA_Init+0x688>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d02c      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a48      	ldr	r2, [pc, #288]	@ (8001de4 <HAL_DMA_Init+0x68c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a47      	ldr	r2, [pc, #284]	@ (8001de8 <HAL_DMA_Init+0x690>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a45      	ldr	r2, [pc, #276]	@ (8001dec <HAL_DMA_Init+0x694>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01d      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a44      	ldr	r2, [pc, #272]	@ (8001df0 <HAL_DMA_Init+0x698>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	@ (8001df4 <HAL_DMA_Init+0x69c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a41      	ldr	r2, [pc, #260]	@ (8001df8 <HAL_DMA_Init+0x6a0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	@ (8001dfc <HAL_DMA_Init+0x6a4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	@ (8001e00 <HAL_DMA_Init+0x6a8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_DMA_Init+0x5be>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a3c      	ldr	r2, [pc, #240]	@ (8001e04 <HAL_DMA_Init+0x6ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Init+0x5c2>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_DMA_Init+0x5c4>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d032      	beq.n	8001d86 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f002 fa43 	bl	80041ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b80      	cmp	r3, #128	@ 0x80
 8001d2c:	d102      	bne.n	8001d34 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_DMA_Init+0x61c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d80c      	bhi.n	8001d74 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f002 fac0 	bl	80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e008      	b.n	8001d86 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	a7fdabf8 	.word	0xa7fdabf8
 8001da4:	cccccccd 	.word	0xcccccccd
 8001da8:	40020010 	.word	0x40020010
 8001dac:	40020028 	.word	0x40020028
 8001db0:	40020040 	.word	0x40020040
 8001db4:	40020058 	.word	0x40020058
 8001db8:	40020070 	.word	0x40020070
 8001dbc:	40020088 	.word	0x40020088
 8001dc0:	400200a0 	.word	0x400200a0
 8001dc4:	400200b8 	.word	0x400200b8
 8001dc8:	40020410 	.word	0x40020410
 8001dcc:	40020428 	.word	0x40020428
 8001dd0:	40020440 	.word	0x40020440
 8001dd4:	40020458 	.word	0x40020458
 8001dd8:	40020470 	.word	0x40020470
 8001ddc:	40020488 	.word	0x40020488
 8001de0:	400204a0 	.word	0x400204a0
 8001de4:	400204b8 	.word	0x400204b8
 8001de8:	58025408 	.word	0x58025408
 8001dec:	5802541c 	.word	0x5802541c
 8001df0:	58025430 	.word	0x58025430
 8001df4:	58025444 	.word	0x58025444
 8001df8:	58025458 	.word	0x58025458
 8001dfc:	5802546c 	.word	0x5802546c
 8001e00:	58025480 	.word	0x58025480
 8001e04:	58025494 	.word	0x58025494

08001e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e226      	b.n	8002272 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Start_IT+0x2a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e21f      	b.n	8002272 <HAL_DMA_Start_IT+0x46a>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	f040 820a 	bne.w	800225c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a68      	ldr	r2, [pc, #416]	@ (8001ffc <HAL_DMA_Start_IT+0x1f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d04a      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a66      	ldr	r2, [pc, #408]	@ (8002000 <HAL_DMA_Start_IT+0x1f8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d045      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a65      	ldr	r2, [pc, #404]	@ (8002004 <HAL_DMA_Start_IT+0x1fc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d040      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a63      	ldr	r2, [pc, #396]	@ (8002008 <HAL_DMA_Start_IT+0x200>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d03b      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a62      	ldr	r2, [pc, #392]	@ (800200c <HAL_DMA_Start_IT+0x204>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d036      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a60      	ldr	r2, [pc, #384]	@ (8002010 <HAL_DMA_Start_IT+0x208>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d031      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5f      	ldr	r2, [pc, #380]	@ (8002014 <HAL_DMA_Start_IT+0x20c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d02c      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8002018 <HAL_DMA_Start_IT+0x210>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d027      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800201c <HAL_DMA_Start_IT+0x214>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002020 <HAL_DMA_Start_IT+0x218>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01d      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	@ (8002024 <HAL_DMA_Start_IT+0x21c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d018      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_DMA_Start_IT+0x220>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <HAL_DMA_Start_IT+0x224>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00e      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a54      	ldr	r2, [pc, #336]	@ (8002030 <HAL_DMA_Start_IT+0x228>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a53      	ldr	r2, [pc, #332]	@ (8002034 <HAL_DMA_Start_IT+0x22c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d004      	beq.n	8001ef6 <HAL_DMA_Start_IT+0xee>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a51      	ldr	r2, [pc, #324]	@ (8002038 <HAL_DMA_Start_IT+0x230>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <HAL_DMA_Start_IT+0x100>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_DMA_Start_IT+0x110>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f001 fe6a 	bl	8003bf8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a34      	ldr	r2, [pc, #208]	@ (8001ffc <HAL_DMA_Start_IT+0x1f4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a33      	ldr	r2, [pc, #204]	@ (8002000 <HAL_DMA_Start_IT+0x1f8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d045      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a31      	ldr	r2, [pc, #196]	@ (8002004 <HAL_DMA_Start_IT+0x1fc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <HAL_DMA_Start_IT+0x200>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2e      	ldr	r2, [pc, #184]	@ (800200c <HAL_DMA_Start_IT+0x204>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d036      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002010 <HAL_DMA_Start_IT+0x208>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d031      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2b      	ldr	r2, [pc, #172]	@ (8002014 <HAL_DMA_Start_IT+0x20c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02c      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <HAL_DMA_Start_IT+0x210>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d027      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a28      	ldr	r2, [pc, #160]	@ (800201c <HAL_DMA_Start_IT+0x214>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a27      	ldr	r2, [pc, #156]	@ (8002020 <HAL_DMA_Start_IT+0x218>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01d      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <HAL_DMA_Start_IT+0x21c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <HAL_DMA_Start_IT+0x220>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a22      	ldr	r2, [pc, #136]	@ (800202c <HAL_DMA_Start_IT+0x224>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <HAL_DMA_Start_IT+0x228>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_DMA_Start_IT+0x22c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_DMA_Start_IT+0x230>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Start_IT+0x1c0>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Start_IT+0x1c2>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d036      	beq.n	800203c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 021e 	bic.w	r2, r3, #30
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0216 	orr.w	r2, r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03e      	beq.n	8002068 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0208 	orr.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e035      	b.n	8002068 <HAL_DMA_Start_IT+0x260>
 8001ffc:	40020010 	.word	0x40020010
 8002000:	40020028 	.word	0x40020028
 8002004:	40020040 	.word	0x40020040
 8002008:	40020058 	.word	0x40020058
 800200c:	40020070 	.word	0x40020070
 8002010:	40020088 	.word	0x40020088
 8002014:	400200a0 	.word	0x400200a0
 8002018:	400200b8 	.word	0x400200b8
 800201c:	40020410 	.word	0x40020410
 8002020:	40020428 	.word	0x40020428
 8002024:	40020440 	.word	0x40020440
 8002028:	40020458 	.word	0x40020458
 800202c:	40020470 	.word	0x40020470
 8002030:	40020488 	.word	0x40020488
 8002034:	400204a0 	.word	0x400204a0
 8002038:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 020e 	bic.w	r2, r3, #14
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 020a 	orr.w	r2, r2, #10
 800204e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0204 	orr.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a83      	ldr	r2, [pc, #524]	@ (800227c <HAL_DMA_Start_IT+0x474>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d072      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a82      	ldr	r2, [pc, #520]	@ (8002280 <HAL_DMA_Start_IT+0x478>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d06d      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a80      	ldr	r2, [pc, #512]	@ (8002284 <HAL_DMA_Start_IT+0x47c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d068      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7f      	ldr	r2, [pc, #508]	@ (8002288 <HAL_DMA_Start_IT+0x480>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d063      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7d      	ldr	r2, [pc, #500]	@ (800228c <HAL_DMA_Start_IT+0x484>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d05e      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7c      	ldr	r2, [pc, #496]	@ (8002290 <HAL_DMA_Start_IT+0x488>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d059      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002294 <HAL_DMA_Start_IT+0x48c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d054      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a79      	ldr	r2, [pc, #484]	@ (8002298 <HAL_DMA_Start_IT+0x490>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04f      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a77      	ldr	r2, [pc, #476]	@ (800229c <HAL_DMA_Start_IT+0x494>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a76      	ldr	r2, [pc, #472]	@ (80022a0 <HAL_DMA_Start_IT+0x498>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a74      	ldr	r2, [pc, #464]	@ (80022a4 <HAL_DMA_Start_IT+0x49c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a73      	ldr	r2, [pc, #460]	@ (80022a8 <HAL_DMA_Start_IT+0x4a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a71      	ldr	r2, [pc, #452]	@ (80022ac <HAL_DMA_Start_IT+0x4a4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a70      	ldr	r2, [pc, #448]	@ (80022b0 <HAL_DMA_Start_IT+0x4a8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	@ (80022b4 <HAL_DMA_Start_IT+0x4ac>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6d      	ldr	r2, [pc, #436]	@ (80022b8 <HAL_DMA_Start_IT+0x4b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6b      	ldr	r2, [pc, #428]	@ (80022bc <HAL_DMA_Start_IT+0x4b4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6a      	ldr	r2, [pc, #424]	@ (80022c0 <HAL_DMA_Start_IT+0x4b8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	@ (80022c4 <HAL_DMA_Start_IT+0x4bc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a67      	ldr	r2, [pc, #412]	@ (80022c8 <HAL_DMA_Start_IT+0x4c0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_DMA_Start_IT+0x4c4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a64      	ldr	r2, [pc, #400]	@ (80022d0 <HAL_DMA_Start_IT+0x4c8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	@ (80022d4 <HAL_DMA_Start_IT+0x4cc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Start_IT+0x350>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a61      	ldr	r2, [pc, #388]	@ (80022d8 <HAL_DMA_Start_IT+0x4d0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Start_IT+0x354>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Start_IT+0x356>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01a      	beq.n	8002198 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800217e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002196:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a37      	ldr	r2, [pc, #220]	@ (800227c <HAL_DMA_Start_IT+0x474>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a36      	ldr	r2, [pc, #216]	@ (8002280 <HAL_DMA_Start_IT+0x478>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d045      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a34      	ldr	r2, [pc, #208]	@ (8002284 <HAL_DMA_Start_IT+0x47c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d040      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <HAL_DMA_Start_IT+0x480>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d03b      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_DMA_Start_IT+0x484>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d036      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <HAL_DMA_Start_IT+0x488>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002294 <HAL_DMA_Start_IT+0x48c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02c      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <HAL_DMA_Start_IT+0x490>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <HAL_DMA_Start_IT+0x494>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d022      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2a      	ldr	r2, [pc, #168]	@ (80022a0 <HAL_DMA_Start_IT+0x498>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01d      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_DMA_Start_IT+0x49c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_DMA_Start_IT+0x4a0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a25      	ldr	r2, [pc, #148]	@ (80022ac <HAL_DMA_Start_IT+0x4a4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <HAL_DMA_Start_IT+0x4a8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_DMA_Start_IT+0x4ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Start_IT+0x430>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	@ (80022b8 <HAL_DMA_Start_IT+0x4b0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <HAL_DMA_Start_IT+0x442>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e012      	b.n	8002270 <HAL_DMA_Start_IT+0x468>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e009      	b.n	8002270 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002270:	7dfb      	ldrb	r3, [r7, #23]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
 80022bc:	58025408 	.word	0x58025408
 80022c0:	5802541c 	.word	0x5802541c
 80022c4:	58025430 	.word	0x58025430
 80022c8:	58025444 	.word	0x58025444
 80022cc:	58025458 	.word	0x58025458
 80022d0:	5802546c 	.word	0x5802546c
 80022d4:	58025480 	.word	0x58025480
 80022d8:	58025494 	.word	0x58025494

080022dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff f908 	bl	80014f8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2dc      	b.n	80028ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e2cd      	b.n	80028ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a76      	ldr	r2, [pc, #472]	@ (80024f0 <HAL_DMA_Abort+0x214>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04a      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a74      	ldr	r2, [pc, #464]	@ (80024f4 <HAL_DMA_Abort+0x218>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d045      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a73      	ldr	r2, [pc, #460]	@ (80024f8 <HAL_DMA_Abort+0x21c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d040      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a71      	ldr	r2, [pc, #452]	@ (80024fc <HAL_DMA_Abort+0x220>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d03b      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a70      	ldr	r2, [pc, #448]	@ (8002500 <HAL_DMA_Abort+0x224>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d036      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_DMA_Abort+0x228>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6d      	ldr	r2, [pc, #436]	@ (8002508 <HAL_DMA_Abort+0x22c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d02c      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6b      	ldr	r2, [pc, #428]	@ (800250c <HAL_DMA_Abort+0x230>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6a      	ldr	r2, [pc, #424]	@ (8002510 <HAL_DMA_Abort+0x234>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a68      	ldr	r2, [pc, #416]	@ (8002514 <HAL_DMA_Abort+0x238>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01d      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a67      	ldr	r2, [pc, #412]	@ (8002518 <HAL_DMA_Abort+0x23c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a65      	ldr	r2, [pc, #404]	@ (800251c <HAL_DMA_Abort+0x240>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a64      	ldr	r2, [pc, #400]	@ (8002520 <HAL_DMA_Abort+0x244>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a62      	ldr	r2, [pc, #392]	@ (8002524 <HAL_DMA_Abort+0x248>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a61      	ldr	r2, [pc, #388]	@ (8002528 <HAL_DMA_Abort+0x24c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_Abort+0xd6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5f      	ldr	r2, [pc, #380]	@ (800252c <HAL_DMA_Abort+0x250>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Abort+0xda>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_DMA_Abort+0xdc>
 80023b6:	2300      	movs	r3, #0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 021e 	bic.w	r2, r2, #30
 80023ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e00a      	b.n	80023fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3c      	ldr	r2, [pc, #240]	@ (80024f0 <HAL_DMA_Abort+0x214>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d072      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3a      	ldr	r2, [pc, #232]	@ (80024f4 <HAL_DMA_Abort+0x218>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d06d      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	@ (80024f8 <HAL_DMA_Abort+0x21c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d068      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a37      	ldr	r2, [pc, #220]	@ (80024fc <HAL_DMA_Abort+0x220>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d063      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a36      	ldr	r2, [pc, #216]	@ (8002500 <HAL_DMA_Abort+0x224>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d05e      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a34      	ldr	r2, [pc, #208]	@ (8002504 <HAL_DMA_Abort+0x228>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d059      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a33      	ldr	r2, [pc, #204]	@ (8002508 <HAL_DMA_Abort+0x22c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d054      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a31      	ldr	r2, [pc, #196]	@ (800250c <HAL_DMA_Abort+0x230>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04f      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a30      	ldr	r2, [pc, #192]	@ (8002510 <HAL_DMA_Abort+0x234>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04a      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2e      	ldr	r2, [pc, #184]	@ (8002514 <HAL_DMA_Abort+0x238>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d045      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2d      	ldr	r2, [pc, #180]	@ (8002518 <HAL_DMA_Abort+0x23c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d040      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <HAL_DMA_Abort+0x240>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d03b      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2a      	ldr	r2, [pc, #168]	@ (8002520 <HAL_DMA_Abort+0x244>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d036      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <HAL_DMA_Abort+0x248>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <HAL_DMA_Abort+0x24c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d02c      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	@ (800252c <HAL_DMA_Abort+0x250>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d027      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <HAL_DMA_Abort+0x254>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a22      	ldr	r2, [pc, #136]	@ (8002534 <HAL_DMA_Abort+0x258>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01d      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	@ (8002538 <HAL_DMA_Abort+0x25c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d018      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <HAL_DMA_Abort+0x260>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002540 <HAL_DMA_Abort+0x264>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <HAL_DMA_Abort+0x268>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <HAL_DMA_Abort+0x26c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	@ (800254c <HAL_DMA_Abort+0x270>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d132      	bne.n	8002550 <HAL_DMA_Abort+0x274>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e031      	b.n	8002552 <HAL_DMA_Abort+0x276>
 80024ee:	bf00      	nop
 80024f0:	40020010 	.word	0x40020010
 80024f4:	40020028 	.word	0x40020028
 80024f8:	40020040 	.word	0x40020040
 80024fc:	40020058 	.word	0x40020058
 8002500:	40020070 	.word	0x40020070
 8002504:	40020088 	.word	0x40020088
 8002508:	400200a0 	.word	0x400200a0
 800250c:	400200b8 	.word	0x400200b8
 8002510:	40020410 	.word	0x40020410
 8002514:	40020428 	.word	0x40020428
 8002518:	40020440 	.word	0x40020440
 800251c:	40020458 	.word	0x40020458
 8002520:	40020470 	.word	0x40020470
 8002524:	40020488 	.word	0x40020488
 8002528:	400204a0 	.word	0x400204a0
 800252c:	400204b8 	.word	0x400204b8
 8002530:	58025408 	.word	0x58025408
 8002534:	5802541c 	.word	0x5802541c
 8002538:	58025430 	.word	0x58025430
 800253c:	58025444 	.word	0x58025444
 8002540:	58025458 	.word	0x58025458
 8002544:	5802546c 	.word	0x5802546c
 8002548:	58025480 	.word	0x58025480
 800254c:	58025494 	.word	0x58025494
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002564:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6d      	ldr	r2, [pc, #436]	@ (8002720 <HAL_DMA_Abort+0x444>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6b      	ldr	r2, [pc, #428]	@ (8002724 <HAL_DMA_Abort+0x448>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6a      	ldr	r2, [pc, #424]	@ (8002728 <HAL_DMA_Abort+0x44c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a68      	ldr	r2, [pc, #416]	@ (800272c <HAL_DMA_Abort+0x450>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a67      	ldr	r2, [pc, #412]	@ (8002730 <HAL_DMA_Abort+0x454>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_DMA_Abort+0x458>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a64      	ldr	r2, [pc, #400]	@ (8002738 <HAL_DMA_Abort+0x45c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a62      	ldr	r2, [pc, #392]	@ (800273c <HAL_DMA_Abort+0x460>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a61      	ldr	r2, [pc, #388]	@ (8002740 <HAL_DMA_Abort+0x464>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002744 <HAL_DMA_Abort+0x468>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002748 <HAL_DMA_Abort+0x46c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5c      	ldr	r2, [pc, #368]	@ (800274c <HAL_DMA_Abort+0x470>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002750 <HAL_DMA_Abort+0x474>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a59      	ldr	r2, [pc, #356]	@ (8002754 <HAL_DMA_Abort+0x478>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_DMA_Abort+0x47c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Abort+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a56      	ldr	r2, [pc, #344]	@ (800275c <HAL_DMA_Abort+0x480>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <HAL_DMA_Abort+0x33c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <HAL_DMA_Abort+0x34c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002628:	e013      	b.n	8002652 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800262a:	f7fe ff65 	bl	80014f8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b05      	cmp	r3, #5
 8002636:	d90c      	bls.n	8002652 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2203      	movs	r2, #3
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e12d      	b.n	80028ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e5      	bne.n	800262a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <HAL_DMA_Abort+0x444>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d04a      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <HAL_DMA_Abort+0x448>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d045      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2c      	ldr	r2, [pc, #176]	@ (8002728 <HAL_DMA_Abort+0x44c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d040      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2a      	ldr	r2, [pc, #168]	@ (800272c <HAL_DMA_Abort+0x450>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d03b      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a29      	ldr	r2, [pc, #164]	@ (8002730 <HAL_DMA_Abort+0x454>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d036      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <HAL_DMA_Abort+0x458>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <HAL_DMA_Abort+0x45c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d02c      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a24      	ldr	r2, [pc, #144]	@ (800273c <HAL_DMA_Abort+0x460>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d027      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a23      	ldr	r2, [pc, #140]	@ (8002740 <HAL_DMA_Abort+0x464>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d022      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <HAL_DMA_Abort+0x468>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01d      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a20      	ldr	r2, [pc, #128]	@ (8002748 <HAL_DMA_Abort+0x46c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d018      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_DMA_Abort+0x470>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_DMA_Abort+0x474>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002754 <HAL_DMA_Abort+0x478>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <HAL_DMA_Abort+0x47c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_Abort+0x422>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_DMA_Abort+0x480>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_DMA_Abort+0x426>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_DMA_Abort+0x428>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02b      	beq.n	8002760 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	223f      	movs	r2, #63	@ 0x3f
 8002718:	409a      	lsls	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	e02a      	b.n	8002776 <HAL_DMA_Abort+0x49a>
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a4f      	ldr	r2, [pc, #316]	@ (80028b8 <HAL_DMA_Abort+0x5dc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d072      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a4d      	ldr	r2, [pc, #308]	@ (80028bc <HAL_DMA_Abort+0x5e0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d06d      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4c      	ldr	r2, [pc, #304]	@ (80028c0 <HAL_DMA_Abort+0x5e4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d068      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_DMA_Abort+0x5e8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d063      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a49      	ldr	r2, [pc, #292]	@ (80028c8 <HAL_DMA_Abort+0x5ec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d05e      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_DMA_Abort+0x5f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d059      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a46      	ldr	r2, [pc, #280]	@ (80028d0 <HAL_DMA_Abort+0x5f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d054      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a44      	ldr	r2, [pc, #272]	@ (80028d4 <HAL_DMA_Abort+0x5f8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d04f      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a43      	ldr	r2, [pc, #268]	@ (80028d8 <HAL_DMA_Abort+0x5fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d04a      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a41      	ldr	r2, [pc, #260]	@ (80028dc <HAL_DMA_Abort+0x600>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d045      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a40      	ldr	r2, [pc, #256]	@ (80028e0 <HAL_DMA_Abort+0x604>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d040      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3e      	ldr	r2, [pc, #248]	@ (80028e4 <HAL_DMA_Abort+0x608>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d03b      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3d      	ldr	r2, [pc, #244]	@ (80028e8 <HAL_DMA_Abort+0x60c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d036      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3b      	ldr	r2, [pc, #236]	@ (80028ec <HAL_DMA_Abort+0x610>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_DMA_Abort+0x614>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d02c      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a38      	ldr	r2, [pc, #224]	@ (80028f4 <HAL_DMA_Abort+0x618>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d027      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a37      	ldr	r2, [pc, #220]	@ (80028f8 <HAL_DMA_Abort+0x61c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a35      	ldr	r2, [pc, #212]	@ (80028fc <HAL_DMA_Abort+0x620>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a34      	ldr	r2, [pc, #208]	@ (8002900 <HAL_DMA_Abort+0x624>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <HAL_DMA_Abort+0x628>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a31      	ldr	r2, [pc, #196]	@ (8002908 <HAL_DMA_Abort+0x62c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2f      	ldr	r2, [pc, #188]	@ (800290c <HAL_DMA_Abort+0x630>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <HAL_DMA_Abort+0x634>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2c      	ldr	r2, [pc, #176]	@ (8002914 <HAL_DMA_Abort+0x638>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_DMA_Abort+0x58e>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_DMA_Abort+0x590>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002878:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800288c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002890:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800289a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40020010 	.word	0x40020010
 80028bc:	40020028 	.word	0x40020028
 80028c0:	40020040 	.word	0x40020040
 80028c4:	40020058 	.word	0x40020058
 80028c8:	40020070 	.word	0x40020070
 80028cc:	40020088 	.word	0x40020088
 80028d0:	400200a0 	.word	0x400200a0
 80028d4:	400200b8 	.word	0x400200b8
 80028d8:	40020410 	.word	0x40020410
 80028dc:	40020428 	.word	0x40020428
 80028e0:	40020440 	.word	0x40020440
 80028e4:	40020458 	.word	0x40020458
 80028e8:	40020470 	.word	0x40020470
 80028ec:	40020488 	.word	0x40020488
 80028f0:	400204a0 	.word	0x400204a0
 80028f4:	400204b8 	.word	0x400204b8
 80028f8:	58025408 	.word	0x58025408
 80028fc:	5802541c 	.word	0x5802541c
 8002900:	58025430 	.word	0x58025430
 8002904:	58025444 	.word	0x58025444
 8002908:	58025458 	.word	0x58025458
 800290c:	5802546c 	.word	0x5802546c
 8002910:	58025480 	.word	0x58025480
 8002914:	58025494 	.word	0x58025494

08002918 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e237      	b.n	8002d9a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d004      	beq.n	8002940 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e22c      	b.n	8002d9a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab8 <HAL_DMA_Abort_IT+0x1a0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d04a      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5b      	ldr	r2, [pc, #364]	@ (8002abc <HAL_DMA_Abort_IT+0x1a4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d045      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a59      	ldr	r2, [pc, #356]	@ (8002ac0 <HAL_DMA_Abort_IT+0x1a8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d040      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a58      	ldr	r2, [pc, #352]	@ (8002ac4 <HAL_DMA_Abort_IT+0x1ac>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d03b      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a56      	ldr	r2, [pc, #344]	@ (8002ac8 <HAL_DMA_Abort_IT+0x1b0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d036      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a55      	ldr	r2, [pc, #340]	@ (8002acc <HAL_DMA_Abort_IT+0x1b4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d031      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a53      	ldr	r2, [pc, #332]	@ (8002ad0 <HAL_DMA_Abort_IT+0x1b8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02c      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a52      	ldr	r2, [pc, #328]	@ (8002ad4 <HAL_DMA_Abort_IT+0x1bc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d027      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a50      	ldr	r2, [pc, #320]	@ (8002ad8 <HAL_DMA_Abort_IT+0x1c0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a4f      	ldr	r2, [pc, #316]	@ (8002adc <HAL_DMA_Abort_IT+0x1c4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d01d      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ae0 <HAL_DMA_Abort_IT+0x1c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d018      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1cc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1d0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00e      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a49      	ldr	r2, [pc, #292]	@ (8002aec <HAL_DMA_Abort_IT+0x1d4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <HAL_DMA_Abort_IT+0x1d8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_Abort_IT+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a46      	ldr	r2, [pc, #280]	@ (8002af4 <HAL_DMA_Abort_IT+0x1dc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Abort_IT+0xcc>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_Abort_IT+0xce>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8086 	beq.w	8002af8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2204      	movs	r2, #4
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <HAL_DMA_Abort_IT+0x1a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <HAL_DMA_Abort_IT+0x1a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a29      	ldr	r2, [pc, #164]	@ (8002ac8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a28      	ldr	r2, [pc, #160]	@ (8002acc <HAL_DMA_Abort_IT+0x1b4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_DMA_Abort_IT+0x1b8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_DMA_Abort_IT+0x1bc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_DMA_Abort_IT+0x1c0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_DMA_Abort_IT+0x1c4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_DMA_Abort_IT+0x1c8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae4 <HAL_DMA_Abort_IT+0x1cc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae8 <HAL_DMA_Abort_IT+0x1d0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_DMA_Abort_IT+0x1d4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <HAL_DMA_Abort_IT+0x1d8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x17c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a19      	ldr	r2, [pc, #100]	@ (8002af4 <HAL_DMA_Abort_IT+0x1dc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d108      	bne.n	8002aa6 <HAL_DMA_Abort_IT+0x18e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e178      	b.n	8002d98 <HAL_DMA_Abort_IT+0x480>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e16f      	b.n	8002d98 <HAL_DMA_Abort_IT+0x480>
 8002ab8:	40020010 	.word	0x40020010
 8002abc:	40020028 	.word	0x40020028
 8002ac0:	40020040 	.word	0x40020040
 8002ac4:	40020058 	.word	0x40020058
 8002ac8:	40020070 	.word	0x40020070
 8002acc:	40020088 	.word	0x40020088
 8002ad0:	400200a0 	.word	0x400200a0
 8002ad4:	400200b8 	.word	0x400200b8
 8002ad8:	40020410 	.word	0x40020410
 8002adc:	40020428 	.word	0x40020428
 8002ae0:	40020440 	.word	0x40020440
 8002ae4:	40020458 	.word	0x40020458
 8002ae8:	40020470 	.word	0x40020470
 8002aec:	40020488 	.word	0x40020488
 8002af0:	400204a0 	.word	0x400204a0
 8002af4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 020e 	bic.w	r2, r2, #14
 8002b06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6c      	ldr	r2, [pc, #432]	@ (8002cc0 <HAL_DMA_Abort_IT+0x3a8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d04a      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6b      	ldr	r2, [pc, #428]	@ (8002cc4 <HAL_DMA_Abort_IT+0x3ac>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d045      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a69      	ldr	r2, [pc, #420]	@ (8002cc8 <HAL_DMA_Abort_IT+0x3b0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d040      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a68      	ldr	r2, [pc, #416]	@ (8002ccc <HAL_DMA_Abort_IT+0x3b4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d03b      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a66      	ldr	r2, [pc, #408]	@ (8002cd0 <HAL_DMA_Abort_IT+0x3b8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d036      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_DMA_Abort_IT+0x3bc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d031      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a63      	ldr	r2, [pc, #396]	@ (8002cd8 <HAL_DMA_Abort_IT+0x3c0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02c      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a62      	ldr	r2, [pc, #392]	@ (8002cdc <HAL_DMA_Abort_IT+0x3c4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d027      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a60      	ldr	r2, [pc, #384]	@ (8002ce0 <HAL_DMA_Abort_IT+0x3c8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce4 <HAL_DMA_Abort_IT+0x3cc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d01d      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce8 <HAL_DMA_Abort_IT+0x3d0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cec <HAL_DMA_Abort_IT+0x3d4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5a      	ldr	r2, [pc, #360]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3d8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a59      	ldr	r2, [pc, #356]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3dc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a57      	ldr	r2, [pc, #348]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3e0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x290>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a56      	ldr	r2, [pc, #344]	@ (8002cfc <HAL_DMA_Abort_IT+0x3e4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <HAL_DMA_Abort_IT+0x2a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e007      	b.n	8002bca <HAL_DMA_Abort_IT+0x2b2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc0 <HAL_DMA_Abort_IT+0x3a8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d072      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <HAL_DMA_Abort_IT+0x3ac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d06d      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a39      	ldr	r2, [pc, #228]	@ (8002cc8 <HAL_DMA_Abort_IT+0x3b0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d068      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a37      	ldr	r2, [pc, #220]	@ (8002ccc <HAL_DMA_Abort_IT+0x3b4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d063      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a36      	ldr	r2, [pc, #216]	@ (8002cd0 <HAL_DMA_Abort_IT+0x3b8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d05e      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a34      	ldr	r2, [pc, #208]	@ (8002cd4 <HAL_DMA_Abort_IT+0x3bc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d059      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a33      	ldr	r2, [pc, #204]	@ (8002cd8 <HAL_DMA_Abort_IT+0x3c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d054      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a31      	ldr	r2, [pc, #196]	@ (8002cdc <HAL_DMA_Abort_IT+0x3c4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04f      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a30      	ldr	r2, [pc, #192]	@ (8002ce0 <HAL_DMA_Abort_IT+0x3c8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d04a      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2e      	ldr	r2, [pc, #184]	@ (8002ce4 <HAL_DMA_Abort_IT+0x3cc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d045      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce8 <HAL_DMA_Abort_IT+0x3d0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d040      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <HAL_DMA_Abort_IT+0x3d4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d03b      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf0 <HAL_DMA_Abort_IT+0x3d8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d036      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a28      	ldr	r2, [pc, #160]	@ (8002cf4 <HAL_DMA_Abort_IT+0x3dc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d031      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a27      	ldr	r2, [pc, #156]	@ (8002cf8 <HAL_DMA_Abort_IT+0x3e0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d02c      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a25      	ldr	r2, [pc, #148]	@ (8002cfc <HAL_DMA_Abort_IT+0x3e4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d027      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <HAL_DMA_Abort_IT+0x3e8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a22      	ldr	r2, [pc, #136]	@ (8002d04 <HAL_DMA_Abort_IT+0x3ec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01d      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a21      	ldr	r2, [pc, #132]	@ (8002d08 <HAL_DMA_Abort_IT+0x3f0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d0c <HAL_DMA_Abort_IT+0x3f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1e      	ldr	r2, [pc, #120]	@ (8002d10 <HAL_DMA_Abort_IT+0x3f8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <HAL_DMA_Abort_IT+0x3fc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <HAL_DMA_Abort_IT+0x400>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_Abort_IT+0x3a2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	@ (8002d1c <HAL_DMA_Abort_IT+0x404>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d132      	bne.n	8002d20 <HAL_DMA_Abort_IT+0x408>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e031      	b.n	8002d22 <HAL_DMA_Abort_IT+0x40a>
 8002cbe:	bf00      	nop
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	40020028 	.word	0x40020028
 8002cc8:	40020040 	.word	0x40020040
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020070 	.word	0x40020070
 8002cd4:	40020088 	.word	0x40020088
 8002cd8:	400200a0 	.word	0x400200a0
 8002cdc:	400200b8 	.word	0x400200b8
 8002ce0:	40020410 	.word	0x40020410
 8002ce4:	40020428 	.word	0x40020428
 8002ce8:	40020440 	.word	0x40020440
 8002cec:	40020458 	.word	0x40020458
 8002cf0:	40020470 	.word	0x40020470
 8002cf4:	40020488 	.word	0x40020488
 8002cf8:	400204a0 	.word	0x400204a0
 8002cfc:	400204b8 	.word	0x400204b8
 8002d00:	58025408 	.word	0x58025408
 8002d04:	5802541c 	.word	0x5802541c
 8002d08:	58025430 	.word	0x58025430
 8002d0c:	58025444 	.word	0x58025444
 8002d10:	58025458 	.word	0x58025458
 8002d14:	5802546c 	.word	0x5802546c
 8002d18:	58025480 	.word	0x58025480
 8002d1c:	58025494 	.word	0x58025494
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d028      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d34:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2201      	movs	r2, #1
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d54:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d76:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop

08002da4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002db0:	4b67      	ldr	r3, [pc, #412]	@ (8002f50 <HAL_DMA_IRQHandler+0x1ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a67      	ldr	r2, [pc, #412]	@ (8002f54 <HAL_DMA_IRQHandler+0x1b0>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0a9b      	lsrs	r3, r3, #10
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a5f      	ldr	r2, [pc, #380]	@ (8002f58 <HAL_DMA_IRQHandler+0x1b4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04a      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f5c <HAL_DMA_IRQHandler+0x1b8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d045      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a5c      	ldr	r2, [pc, #368]	@ (8002f60 <HAL_DMA_IRQHandler+0x1bc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d040      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f64 <HAL_DMA_IRQHandler+0x1c0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d03b      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a59      	ldr	r2, [pc, #356]	@ (8002f68 <HAL_DMA_IRQHandler+0x1c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d036      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a57      	ldr	r2, [pc, #348]	@ (8002f6c <HAL_DMA_IRQHandler+0x1c8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d031      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a56      	ldr	r2, [pc, #344]	@ (8002f70 <HAL_DMA_IRQHandler+0x1cc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02c      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a54      	ldr	r2, [pc, #336]	@ (8002f74 <HAL_DMA_IRQHandler+0x1d0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d027      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <HAL_DMA_IRQHandler+0x1d4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a51      	ldr	r2, [pc, #324]	@ (8002f7c <HAL_DMA_IRQHandler+0x1d8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a50      	ldr	r2, [pc, #320]	@ (8002f80 <HAL_DMA_IRQHandler+0x1dc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4e      	ldr	r2, [pc, #312]	@ (8002f84 <HAL_DMA_IRQHandler+0x1e0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4d      	ldr	r2, [pc, #308]	@ (8002f88 <HAL_DMA_IRQHandler+0x1e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f8c <HAL_DMA_IRQHandler+0x1e8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4a      	ldr	r2, [pc, #296]	@ (8002f90 <HAL_DMA_IRQHandler+0x1ec>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a48      	ldr	r2, [pc, #288]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_IRQHandler+0xd6>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_IRQHandler+0xd8>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 842b 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80a2 	beq.w	8002fdc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f58 <HAL_DMA_IRQHandler+0x1b4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04a      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <HAL_DMA_IRQHandler+0x1b8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d045      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f60 <HAL_DMA_IRQHandler+0x1bc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2a      	ldr	r2, [pc, #168]	@ (8002f64 <HAL_DMA_IRQHandler+0x1c0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a28      	ldr	r2, [pc, #160]	@ (8002f68 <HAL_DMA_IRQHandler+0x1c4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d036      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a27      	ldr	r2, [pc, #156]	@ (8002f6c <HAL_DMA_IRQHandler+0x1c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a25      	ldr	r2, [pc, #148]	@ (8002f70 <HAL_DMA_IRQHandler+0x1cc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a24      	ldr	r2, [pc, #144]	@ (8002f74 <HAL_DMA_IRQHandler+0x1d0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a22      	ldr	r2, [pc, #136]	@ (8002f78 <HAL_DMA_IRQHandler+0x1d4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a21      	ldr	r2, [pc, #132]	@ (8002f7c <HAL_DMA_IRQHandler+0x1d8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1f      	ldr	r2, [pc, #124]	@ (8002f80 <HAL_DMA_IRQHandler+0x1dc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f84 <HAL_DMA_IRQHandler+0x1e0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <HAL_DMA_IRQHandler+0x1e4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <HAL_DMA_IRQHandler+0x1e8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <HAL_DMA_IRQHandler+0x1ec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d12f      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x1f4>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e02e      	b.n	8002fac <HAL_DMA_IRQHandler+0x208>
 8002f4e:	bf00      	nop
 8002f50:	2400003c 	.word	0x2400003c
 8002f54:	1b4e81b5 	.word	0x1b4e81b5
 8002f58:	40020010 	.word	0x40020010
 8002f5c:	40020028 	.word	0x40020028
 8002f60:	40020040 	.word	0x40020040
 8002f64:	40020058 	.word	0x40020058
 8002f68:	40020070 	.word	0x40020070
 8002f6c:	40020088 	.word	0x40020088
 8002f70:	400200a0 	.word	0x400200a0
 8002f74:	400200b8 	.word	0x400200b8
 8002f78:	40020410 	.word	0x40020410
 8002f7c:	40020428 	.word	0x40020428
 8002f80:	40020440 	.word	0x40020440
 8002f84:	40020458 	.word	0x40020458
 8002f88:	40020470 	.word	0x40020470
 8002f8c:	40020488 	.word	0x40020488
 8002f90:	400204a0 	.word	0x400204a0
 8002f94:	400204b8 	.word	0x400204b8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2208      	movs	r2, #8
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06e      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a69      	ldr	r2, [pc, #420]	@ (800319c <HAL_DMA_IRQHandler+0x3f8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04a      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a67      	ldr	r2, [pc, #412]	@ (80031a0 <HAL_DMA_IRQHandler+0x3fc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d045      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a66      	ldr	r2, [pc, #408]	@ (80031a4 <HAL_DMA_IRQHandler+0x400>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d040      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a64      	ldr	r2, [pc, #400]	@ (80031a8 <HAL_DMA_IRQHandler+0x404>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d03b      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a63      	ldr	r2, [pc, #396]	@ (80031ac <HAL_DMA_IRQHandler+0x408>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a61      	ldr	r2, [pc, #388]	@ (80031b0 <HAL_DMA_IRQHandler+0x40c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d031      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a60      	ldr	r2, [pc, #384]	@ (80031b4 <HAL_DMA_IRQHandler+0x410>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d02c      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5e      	ldr	r2, [pc, #376]	@ (80031b8 <HAL_DMA_IRQHandler+0x414>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d027      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5d      	ldr	r2, [pc, #372]	@ (80031bc <HAL_DMA_IRQHandler+0x418>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <HAL_DMA_IRQHandler+0x41c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_DMA_IRQHandler+0x420>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d018      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a58      	ldr	r2, [pc, #352]	@ (80031c8 <HAL_DMA_IRQHandler+0x424>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_DMA_IRQHandler+0x428>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a55      	ldr	r2, [pc, #340]	@ (80031d0 <HAL_DMA_IRQHandler+0x42c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a54      	ldr	r2, [pc, #336]	@ (80031d4 <HAL_DMA_IRQHandler+0x430>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a52      	ldr	r2, [pc, #328]	@ (80031d8 <HAL_DMA_IRQHandler+0x434>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10a      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x304>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e003      	b.n	80030b0 <HAL_DMA_IRQHandler+0x30c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0202 	orr.w	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2204      	movs	r2, #4
 80030da:	409a      	lsls	r2, r3
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 808f 	beq.w	8003204 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <HAL_DMA_IRQHandler+0x3f8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	@ (80031a0 <HAL_DMA_IRQHandler+0x3fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a29      	ldr	r2, [pc, #164]	@ (80031a4 <HAL_DMA_IRQHandler+0x400>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a27      	ldr	r2, [pc, #156]	@ (80031a8 <HAL_DMA_IRQHandler+0x404>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a26      	ldr	r2, [pc, #152]	@ (80031ac <HAL_DMA_IRQHandler+0x408>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a24      	ldr	r2, [pc, #144]	@ (80031b0 <HAL_DMA_IRQHandler+0x40c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a23      	ldr	r2, [pc, #140]	@ (80031b4 <HAL_DMA_IRQHandler+0x410>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <HAL_DMA_IRQHandler+0x414>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a20      	ldr	r2, [pc, #128]	@ (80031bc <HAL_DMA_IRQHandler+0x418>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1e      	ldr	r2, [pc, #120]	@ (80031c0 <HAL_DMA_IRQHandler+0x41c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <HAL_DMA_IRQHandler+0x420>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <HAL_DMA_IRQHandler+0x424>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1a      	ldr	r2, [pc, #104]	@ (80031cc <HAL_DMA_IRQHandler+0x428>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_DMA_IRQHandler+0x42c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_DMA_IRQHandler+0x430>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <HAL_DMA_IRQHandler+0x434>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12a      	bne.n	80031dc <HAL_DMA_IRQHandler+0x438>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e023      	b.n	80031e4 <HAL_DMA_IRQHandler+0x440>
 800319c:	40020010 	.word	0x40020010
 80031a0:	40020028 	.word	0x40020028
 80031a4:	40020040 	.word	0x40020040
 80031a8:	40020058 	.word	0x40020058
 80031ac:	40020070 	.word	0x40020070
 80031b0:	40020088 	.word	0x40020088
 80031b4:	400200a0 	.word	0x400200a0
 80031b8:	400200b8 	.word	0x400200b8
 80031bc:	40020410 	.word	0x40020410
 80031c0:	40020428 	.word	0x40020428
 80031c4:	40020440 	.word	0x40020440
 80031c8:	40020458 	.word	0x40020458
 80031cc:	40020470 	.word	0x40020470
 80031d0:	40020488 	.word	0x40020488
 80031d4:	400204a0 	.word	0x400204a0
 80031d8:	400204b8 	.word	0x400204b8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2210      	movs	r2, #16
 800320e:	409a      	lsls	r2, r3
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a6 	beq.w	8003366 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a85      	ldr	r2, [pc, #532]	@ (8003434 <HAL_DMA_IRQHandler+0x690>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a83      	ldr	r2, [pc, #524]	@ (8003438 <HAL_DMA_IRQHandler+0x694>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a82      	ldr	r2, [pc, #520]	@ (800343c <HAL_DMA_IRQHandler+0x698>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a80      	ldr	r2, [pc, #512]	@ (8003440 <HAL_DMA_IRQHandler+0x69c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7f      	ldr	r2, [pc, #508]	@ (8003444 <HAL_DMA_IRQHandler+0x6a0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7d      	ldr	r2, [pc, #500]	@ (8003448 <HAL_DMA_IRQHandler+0x6a4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7c      	ldr	r2, [pc, #496]	@ (800344c <HAL_DMA_IRQHandler+0x6a8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7a      	ldr	r2, [pc, #488]	@ (8003450 <HAL_DMA_IRQHandler+0x6ac>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a79      	ldr	r2, [pc, #484]	@ (8003454 <HAL_DMA_IRQHandler+0x6b0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a77      	ldr	r2, [pc, #476]	@ (8003458 <HAL_DMA_IRQHandler+0x6b4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a76      	ldr	r2, [pc, #472]	@ (800345c <HAL_DMA_IRQHandler+0x6b8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	@ (8003460 <HAL_DMA_IRQHandler+0x6bc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	@ (8003464 <HAL_DMA_IRQHandler+0x6c0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a71      	ldr	r2, [pc, #452]	@ (8003468 <HAL_DMA_IRQHandler+0x6c4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a70      	ldr	r2, [pc, #448]	@ (800346c <HAL_DMA_IRQHandler+0x6c8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003470 <HAL_DMA_IRQHandler+0x6cc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10a      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x52c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e009      	b.n	80032e4 <HAL_DMA_IRQHandler+0x540>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03e      	beq.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2210      	movs	r2, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d018      	beq.n	8003338 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d024      	beq.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e01f      	b.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01b      	beq.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
 8003336:	e016      	b.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0208 	bic.w	r2, r2, #8
 8003354:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2220      	movs	r2, #32
 8003370:	409a      	lsls	r2, r3
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8110 	beq.w	800359c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <HAL_DMA_IRQHandler+0x690>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04a      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <HAL_DMA_IRQHandler+0x694>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d045      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a29      	ldr	r2, [pc, #164]	@ (800343c <HAL_DMA_IRQHandler+0x698>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_DMA_IRQHandler+0x69c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d03b      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <HAL_DMA_IRQHandler+0x6a0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d036      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_DMA_IRQHandler+0x6a4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d031      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_DMA_IRQHandler+0x6a8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02c      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <HAL_DMA_IRQHandler+0x6ac>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d027      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <HAL_DMA_IRQHandler+0x6b0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d022      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_DMA_IRQHandler+0x6b4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d01d      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_DMA_IRQHandler+0x6b8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_DMA_IRQHandler+0x6bc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_DMA_IRQHandler+0x6c0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_DMA_IRQHandler+0x6c4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a17      	ldr	r2, [pc, #92]	@ (800346c <HAL_DMA_IRQHandler+0x6c8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <HAL_DMA_IRQHandler+0x6cc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d12b      	bne.n	8003474 <HAL_DMA_IRQHandler+0x6d0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e02a      	b.n	8003488 <HAL_DMA_IRQHandler+0x6e4>
 8003432:	bf00      	nop
 8003434:	40020010 	.word	0x40020010
 8003438:	40020028 	.word	0x40020028
 800343c:	40020040 	.word	0x40020040
 8003440:	40020058 	.word	0x40020058
 8003444:	40020070 	.word	0x40020070
 8003448:	40020088 	.word	0x40020088
 800344c:	400200a0 	.word	0x400200a0
 8003450:	400200b8 	.word	0x400200b8
 8003454:	40020410 	.word	0x40020410
 8003458:	40020428 	.word	0x40020428
 800345c:	40020440 	.word	0x40020440
 8003460:	40020458 	.word	0x40020458
 8003464:	40020470 	.word	0x40020470
 8003468:	40020488 	.word	0x40020488
 800346c:	400204a0 	.word	0x400204a0
 8003470:	400204b8 	.word	0x400204b8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8087 	beq.w	800359c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2220      	movs	r2, #32
 8003498:	409a      	lsls	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d139      	bne.n	800351e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0216 	bic.w	r2, r2, #22
 80034b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_DMA_IRQHandler+0x736>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	223f      	movs	r2, #63	@ 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 834a 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
          }
          return;
 800351c:	e344      	b.n	8003ba8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d018      	beq.n	800355e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d108      	bne.n	800354c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02c      	beq.n	800359c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	e027      	b.n	800359c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
 800355c:	e01e      	b.n	800359c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10f      	bne.n	800358c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0210 	bic.w	r2, r2, #16
 800357a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8306 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8088 	beq.w	80036c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7a      	ldr	r2, [pc, #488]	@ (80037ac <HAL_DMA_IRQHandler+0xa08>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d04a      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a79      	ldr	r2, [pc, #484]	@ (80037b0 <HAL_DMA_IRQHandler+0xa0c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d045      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a77      	ldr	r2, [pc, #476]	@ (80037b4 <HAL_DMA_IRQHandler+0xa10>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d040      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a76      	ldr	r2, [pc, #472]	@ (80037b8 <HAL_DMA_IRQHandler+0xa14>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d03b      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a74      	ldr	r2, [pc, #464]	@ (80037bc <HAL_DMA_IRQHandler+0xa18>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d036      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a73      	ldr	r2, [pc, #460]	@ (80037c0 <HAL_DMA_IRQHandler+0xa1c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d031      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a71      	ldr	r2, [pc, #452]	@ (80037c4 <HAL_DMA_IRQHandler+0xa20>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02c      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a70      	ldr	r2, [pc, #448]	@ (80037c8 <HAL_DMA_IRQHandler+0xa24>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d027      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_DMA_IRQHandler+0xa28>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d022      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6d      	ldr	r2, [pc, #436]	@ (80037d0 <HAL_DMA_IRQHandler+0xa2c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d01d      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6b      	ldr	r2, [pc, #428]	@ (80037d4 <HAL_DMA_IRQHandler+0xa30>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6a      	ldr	r2, [pc, #424]	@ (80037d8 <HAL_DMA_IRQHandler+0xa34>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a68      	ldr	r2, [pc, #416]	@ (80037dc <HAL_DMA_IRQHandler+0xa38>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a67      	ldr	r2, [pc, #412]	@ (80037e0 <HAL_DMA_IRQHandler+0xa3c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a65      	ldr	r2, [pc, #404]	@ (80037e4 <HAL_DMA_IRQHandler+0xa40>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a64      	ldr	r2, [pc, #400]	@ (80037e8 <HAL_DMA_IRQHandler+0xa44>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <HAL_DMA_IRQHandler+0x8ca>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e007      	b.n	800367e <HAL_DMA_IRQHandler+0x8da>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003686:	429a      	cmp	r2, r3
 8003688:	d307      	bcc.n	800369a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f2      	bne.n	800367e <HAL_DMA_IRQHandler+0x8da>
 8003698:	e000      	b.n	800369c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800369a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036b2:	e003      	b.n	80036bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8272 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
 80036d6:	e26c      	b.n	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a43      	ldr	r2, [pc, #268]	@ (80037ec <HAL_DMA_IRQHandler+0xa48>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d022      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a42      	ldr	r2, [pc, #264]	@ (80037f0 <HAL_DMA_IRQHandler+0xa4c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d01d      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a40      	ldr	r2, [pc, #256]	@ (80037f4 <HAL_DMA_IRQHandler+0xa50>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d018      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3f      	ldr	r2, [pc, #252]	@ (80037f8 <HAL_DMA_IRQHandler+0xa54>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a3d      	ldr	r2, [pc, #244]	@ (80037fc <HAL_DMA_IRQHandler+0xa58>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a3c      	ldr	r2, [pc, #240]	@ (8003800 <HAL_DMA_IRQHandler+0xa5c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3a      	ldr	r2, [pc, #232]	@ (8003804 <HAL_DMA_IRQHandler+0xa60>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_DMA_IRQHandler+0x984>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a39      	ldr	r2, [pc, #228]	@ (8003808 <HAL_DMA_IRQHandler+0xa64>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_DMA_IRQHandler+0x988>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_DMA_IRQHandler+0x98a>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 823f 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2204      	movs	r2, #4
 8003746:	409a      	lsls	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80cd 	beq.w	80038ec <HAL_DMA_IRQHandler+0xb48>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80c7 	beq.w	80038ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2204      	movs	r2, #4
 8003768:	409a      	lsls	r2, r3
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d049      	beq.n	800380c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8210 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003794:	e20a      	b.n	8003bac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8206 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a8:	e200      	b.n	8003bac <HAL_DMA_IRQHandler+0xe08>
 80037aa:	bf00      	nop
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	58025408 	.word	0x58025408
 80037f0:	5802541c 	.word	0x5802541c
 80037f4:	58025430 	.word	0x58025430
 80037f8:	58025444 	.word	0x58025444
 80037fc:	58025458 	.word	0x58025458
 8003800:	5802546c 	.word	0x5802546c
 8003804:	58025480 	.word	0x58025480
 8003808:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d160      	bne.n	80038d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a18 <HAL_DMA_IRQHandler+0xc74>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d04a      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7d      	ldr	r2, [pc, #500]	@ (8003a1c <HAL_DMA_IRQHandler+0xc78>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d045      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a20 <HAL_DMA_IRQHandler+0xc7c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d040      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7a      	ldr	r2, [pc, #488]	@ (8003a24 <HAL_DMA_IRQHandler+0xc80>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d03b      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a79      	ldr	r2, [pc, #484]	@ (8003a28 <HAL_DMA_IRQHandler+0xc84>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d036      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a77      	ldr	r2, [pc, #476]	@ (8003a2c <HAL_DMA_IRQHandler+0xc88>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d031      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a76      	ldr	r2, [pc, #472]	@ (8003a30 <HAL_DMA_IRQHandler+0xc8c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d02c      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a74      	ldr	r2, [pc, #464]	@ (8003a34 <HAL_DMA_IRQHandler+0xc90>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d027      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	@ (8003a38 <HAL_DMA_IRQHandler+0xc94>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d022      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a71      	ldr	r2, [pc, #452]	@ (8003a3c <HAL_DMA_IRQHandler+0xc98>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01d      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a70      	ldr	r2, [pc, #448]	@ (8003a40 <HAL_DMA_IRQHandler+0xc9c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d018      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_DMA_IRQHandler+0xca0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6d      	ldr	r2, [pc, #436]	@ (8003a48 <HAL_DMA_IRQHandler+0xca4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6b      	ldr	r2, [pc, #428]	@ (8003a4c <HAL_DMA_IRQHandler+0xca8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a50 <HAL_DMA_IRQHandler+0xcac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	@ (8003a54 <HAL_DMA_IRQHandler+0xcb0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <HAL_DMA_IRQHandler+0xb24>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <HAL_DMA_IRQHandler+0xb34>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8165 	beq.w	8003bac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ea:	e15f      	b.n	8003bac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2202      	movs	r2, #2
 80038f6:	409a      	lsls	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80c5 	beq.w	8003a8c <HAL_DMA_IRQHandler+0xce8>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80bf 	beq.w	8003a8c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2202      	movs	r2, #2
 8003918:	409a      	lsls	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 813a 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003944:	e134      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8130 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003958:	e12a      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	f040 8089 	bne.w	8003a78 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2b      	ldr	r2, [pc, #172]	@ (8003a18 <HAL_DMA_IRQHandler+0xc74>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04a      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a29      	ldr	r2, [pc, #164]	@ (8003a1c <HAL_DMA_IRQHandler+0xc78>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d045      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a28      	ldr	r2, [pc, #160]	@ (8003a20 <HAL_DMA_IRQHandler+0xc7c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d040      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <HAL_DMA_IRQHandler+0xc80>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d03b      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a25      	ldr	r2, [pc, #148]	@ (8003a28 <HAL_DMA_IRQHandler+0xc84>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d036      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a23      	ldr	r2, [pc, #140]	@ (8003a2c <HAL_DMA_IRQHandler+0xc88>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d031      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a22      	ldr	r2, [pc, #136]	@ (8003a30 <HAL_DMA_IRQHandler+0xc8c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d02c      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <HAL_DMA_IRQHandler+0xc90>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d027      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003a38 <HAL_DMA_IRQHandler+0xc94>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d022      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <HAL_DMA_IRQHandler+0xc98>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01d      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003a40 <HAL_DMA_IRQHandler+0xc9c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <HAL_DMA_IRQHandler+0xca0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <HAL_DMA_IRQHandler+0xca4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a17      	ldr	r2, [pc, #92]	@ (8003a4c <HAL_DMA_IRQHandler+0xca8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a16      	ldr	r2, [pc, #88]	@ (8003a50 <HAL_DMA_IRQHandler+0xcac>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xc62>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a14      	ldr	r2, [pc, #80]	@ (8003a54 <HAL_DMA_IRQHandler+0xcb0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d128      	bne.n	8003a58 <HAL_DMA_IRQHandler+0xcb4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0214 	bic.w	r2, r2, #20
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e027      	b.n	8003a68 <HAL_DMA_IRQHandler+0xcc4>
 8003a18:	40020010 	.word	0x40020010
 8003a1c:	40020028 	.word	0x40020028
 8003a20:	40020040 	.word	0x40020040
 8003a24:	40020058 	.word	0x40020058
 8003a28:	40020070 	.word	0x40020070
 8003a2c:	40020088 	.word	0x40020088
 8003a30:	400200a0 	.word	0x400200a0
 8003a34:	400200b8 	.word	0x400200b8
 8003a38:	40020410 	.word	0x40020410
 8003a3c:	40020428 	.word	0x40020428
 8003a40:	40020440 	.word	0x40020440
 8003a44:	40020458 	.word	0x40020458
 8003a48:	40020470 	.word	0x40020470
 8003a4c:	40020488 	.word	0x40020488
 8003a50:	400204a0 	.word	0x400204a0
 8003a54:	400204b8 	.word	0x400204b8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 020a 	bic.w	r2, r2, #10
 8003a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8097 	beq.w	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a8a:	e091      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2208      	movs	r2, #8
 8003a96:	409a      	lsls	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8088 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8082 	beq.w	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	@ (8003bb8 <HAL_DMA_IRQHandler+0xe14>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d04a      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3f      	ldr	r2, [pc, #252]	@ (8003bbc <HAL_DMA_IRQHandler+0xe18>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d045      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d040      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc4 <HAL_DMA_IRQHandler+0xe20>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc8 <HAL_DMA_IRQHandler+0xe24>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a39      	ldr	r2, [pc, #228]	@ (8003bcc <HAL_DMA_IRQHandler+0xe28>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d031      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a38      	ldr	r2, [pc, #224]	@ (8003bd0 <HAL_DMA_IRQHandler+0xe2c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02c      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a36      	ldr	r2, [pc, #216]	@ (8003bd4 <HAL_DMA_IRQHandler+0xe30>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d027      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a35      	ldr	r2, [pc, #212]	@ (8003bd8 <HAL_DMA_IRQHandler+0xe34>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a33      	ldr	r2, [pc, #204]	@ (8003bdc <HAL_DMA_IRQHandler+0xe38>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <HAL_DMA_IRQHandler+0xe3c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a30      	ldr	r2, [pc, #192]	@ (8003be4 <HAL_DMA_IRQHandler+0xe40>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003be8 <HAL_DMA_IRQHandler+0xe44>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2d      	ldr	r2, [pc, #180]	@ (8003bec <HAL_DMA_IRQHandler+0xe48>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf0 <HAL_DMA_IRQHandler+0xe4c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <HAL_DMA_IRQHandler+0xe50>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_DMA_IRQHandler+0xdbc>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 021c 	bic.w	r2, r2, #28
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_DMA_IRQHandler+0xdcc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020e 	bic.w	r2, r2, #14
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
 8003ba6:	e004      	b.n	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40020010 	.word	0x40020010
 8003bbc:	40020028 	.word	0x40020028
 8003bc0:	40020040 	.word	0x40020040
 8003bc4:	40020058 	.word	0x40020058
 8003bc8:	40020070 	.word	0x40020070
 8003bcc:	40020088 	.word	0x40020088
 8003bd0:	400200a0 	.word	0x400200a0
 8003bd4:	400200b8 	.word	0x400200b8
 8003bd8:	40020410 	.word	0x40020410
 8003bdc:	40020428 	.word	0x40020428
 8003be0:	40020440 	.word	0x40020440
 8003be4:	40020458 	.word	0x40020458
 8003be8:	40020470 	.word	0x40020470
 8003bec:	40020488 	.word	0x40020488
 8003bf0:	400204a0 	.word	0x400204a0
 8003bf4:	400204b8 	.word	0x400204b8

08003bf8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	@ (8003e14 <DMA_SetConfig+0x21c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d072      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7d      	ldr	r2, [pc, #500]	@ (8003e18 <DMA_SetConfig+0x220>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d06d      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e1c <DMA_SetConfig+0x224>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d068      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	@ (8003e20 <DMA_SetConfig+0x228>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d063      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a79      	ldr	r2, [pc, #484]	@ (8003e24 <DMA_SetConfig+0x22c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d05e      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a77      	ldr	r2, [pc, #476]	@ (8003e28 <DMA_SetConfig+0x230>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d059      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a76      	ldr	r2, [pc, #472]	@ (8003e2c <DMA_SetConfig+0x234>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d054      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a74      	ldr	r2, [pc, #464]	@ (8003e30 <DMA_SetConfig+0x238>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04f      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	@ (8003e34 <DMA_SetConfig+0x23c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d04a      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	@ (8003e38 <DMA_SetConfig+0x240>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d045      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a70      	ldr	r2, [pc, #448]	@ (8003e3c <DMA_SetConfig+0x244>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d040      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <DMA_SetConfig+0x248>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e44 <DMA_SetConfig+0x24c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d036      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6b      	ldr	r2, [pc, #428]	@ (8003e48 <DMA_SetConfig+0x250>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d031      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8003e4c <DMA_SetConfig+0x254>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d02c      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a68      	ldr	r2, [pc, #416]	@ (8003e50 <DMA_SetConfig+0x258>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d027      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a67      	ldr	r2, [pc, #412]	@ (8003e54 <DMA_SetConfig+0x25c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d022      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a65      	ldr	r2, [pc, #404]	@ (8003e58 <DMA_SetConfig+0x260>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01d      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a64      	ldr	r2, [pc, #400]	@ (8003e5c <DMA_SetConfig+0x264>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d018      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a62      	ldr	r2, [pc, #392]	@ (8003e60 <DMA_SetConfig+0x268>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a61      	ldr	r2, [pc, #388]	@ (8003e64 <DMA_SetConfig+0x26c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8003e68 <DMA_SetConfig+0x270>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e6c <DMA_SetConfig+0x274>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <DMA_SetConfig+0x10a>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5c      	ldr	r2, [pc, #368]	@ (8003e70 <DMA_SetConfig+0x278>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <DMA_SetConfig+0x10e>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <DMA_SetConfig+0x110>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d14:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d26:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	@ (8003e14 <DMA_SetConfig+0x21c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a38      	ldr	r2, [pc, #224]	@ (8003e18 <DMA_SetConfig+0x220>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	@ (8003e1c <DMA_SetConfig+0x224>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	@ (8003e20 <DMA_SetConfig+0x228>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	@ (8003e24 <DMA_SetConfig+0x22c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	@ (8003e28 <DMA_SetConfig+0x230>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	@ (8003e2c <DMA_SetConfig+0x234>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	@ (8003e30 <DMA_SetConfig+0x238>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e34 <DMA_SetConfig+0x23c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	@ (8003e38 <DMA_SetConfig+0x240>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <DMA_SetConfig+0x244>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a29      	ldr	r2, [pc, #164]	@ (8003e40 <DMA_SetConfig+0x248>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a27      	ldr	r2, [pc, #156]	@ (8003e44 <DMA_SetConfig+0x24c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <DMA_SetConfig+0x250>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a24      	ldr	r2, [pc, #144]	@ (8003e4c <DMA_SetConfig+0x254>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <DMA_SetConfig+0x1d0>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a23      	ldr	r2, [pc, #140]	@ (8003e50 <DMA_SetConfig+0x258>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <DMA_SetConfig+0x1d4>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <DMA_SetConfig+0x1d6>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d059      	beq.n	8003e86 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	223f      	movs	r2, #63	@ 0x3f
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003df0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d138      	bne.n	8003e74 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e12:	e086      	b.n	8003f22 <DMA_SetConfig+0x32a>
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
}
 8003e84:	e04d      	b.n	8003f22 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <DMA_SetConfig+0x338>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <DMA_SetConfig+0x33c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <DMA_SetConfig+0x340>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a24      	ldr	r2, [pc, #144]	@ (8003f3c <DMA_SetConfig+0x344>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <DMA_SetConfig+0x348>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <DMA_SetConfig+0x34c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <DMA_SetConfig+0x350>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <DMA_SetConfig+0x2de>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f4c <DMA_SetConfig+0x354>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <DMA_SetConfig+0x2e2>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <DMA_SetConfig+0x2e4>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	d108      	bne.n	8003f12 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	60da      	str	r2, [r3, #12]
}
 8003f10:	e007      	b.n	8003f22 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	58025408 	.word	0x58025408
 8003f34:	5802541c 	.word	0x5802541c
 8003f38:	58025430 	.word	0x58025430
 8003f3c:	58025444 	.word	0x58025444
 8003f40:	58025458 	.word	0x58025458
 8003f44:	5802546c 	.word	0x5802546c
 8003f48:	58025480 	.word	0x58025480
 8003f4c:	58025494 	.word	0x58025494

08003f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a42      	ldr	r2, [pc, #264]	@ (8004068 <DMA_CalcBaseAndBitshift+0x118>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a41      	ldr	r2, [pc, #260]	@ (800406c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3f      	ldr	r2, [pc, #252]	@ (8004070 <DMA_CalcBaseAndBitshift+0x120>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004074 <DMA_CalcBaseAndBitshift+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3c      	ldr	r2, [pc, #240]	@ (8004078 <DMA_CalcBaseAndBitshift+0x128>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800407c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a39      	ldr	r2, [pc, #228]	@ (8004080 <DMA_CalcBaseAndBitshift+0x130>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a38      	ldr	r2, [pc, #224]	@ (8004084 <DMA_CalcBaseAndBitshift+0x134>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a36      	ldr	r2, [pc, #216]	@ (8004088 <DMA_CalcBaseAndBitshift+0x138>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a35      	ldr	r2, [pc, #212]	@ (800408c <DMA_CalcBaseAndBitshift+0x13c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a33      	ldr	r2, [pc, #204]	@ (8004090 <DMA_CalcBaseAndBitshift+0x140>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <DMA_CalcBaseAndBitshift+0x144>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a30      	ldr	r2, [pc, #192]	@ (8004098 <DMA_CalcBaseAndBitshift+0x148>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2f      	ldr	r2, [pc, #188]	@ (800409c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <DMA_CalcBaseAndBitshift+0x150>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2c      	ldr	r2, [pc, #176]	@ (80040a4 <DMA_CalcBaseAndBitshift+0x154>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <DMA_CalcBaseAndBitshift+0xac>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <DMA_CalcBaseAndBitshift+0xae>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d024      	beq.n	800404c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3b10      	subs	r3, #16
 800400a:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <DMA_CalcBaseAndBitshift+0x158>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	4a24      	ldr	r2, [pc, #144]	@ (80040ac <DMA_CalcBaseAndBitshift+0x15c>)
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d908      	bls.n	800403c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004032:	4013      	ands	r3, r2
 8004034:	1d1a      	adds	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	659a      	str	r2, [r3, #88]	@ 0x58
 800403a:	e00d      	b.n	8004058 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004044:	4013      	ands	r3, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6593      	str	r3, [r2, #88]	@ 0x58
 800404a:	e005      	b.n	8004058 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40020010 	.word	0x40020010
 800406c:	40020028 	.word	0x40020028
 8004070:	40020040 	.word	0x40020040
 8004074:	40020058 	.word	0x40020058
 8004078:	40020070 	.word	0x40020070
 800407c:	40020088 	.word	0x40020088
 8004080:	400200a0 	.word	0x400200a0
 8004084:	400200b8 	.word	0x400200b8
 8004088:	40020410 	.word	0x40020410
 800408c:	40020428 	.word	0x40020428
 8004090:	40020440 	.word	0x40020440
 8004094:	40020458 	.word	0x40020458
 8004098:	40020470 	.word	0x40020470
 800409c:	40020488 	.word	0x40020488
 80040a0:	400204a0 	.word	0x400204a0
 80040a4:	400204b8 	.word	0x400204b8
 80040a8:	aaaaaaab 	.word	0xaaaaaaab
 80040ac:	0800b780 	.word	0x0800b780
 80040b0:	fffffc00 	.word	0xfffffc00

080040b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d120      	bne.n	800410a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d858      	bhi.n	8004182 <DMA_CheckFifoParam+0xce>
 80040d0:	a201      	add	r2, pc, #4	@ (adr r2, 80040d8 <DMA_CheckFifoParam+0x24>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040fb 	.word	0x080040fb
 80040e0:	080040e9 	.word	0x080040e9
 80040e4:	08004183 	.word	0x08004183
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d048      	beq.n	8004186 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f8:	e045      	b.n	8004186 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004102:	d142      	bne.n	800418a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004108:	e03f      	b.n	800418a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004112:	d123      	bne.n	800415c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	2b03      	cmp	r3, #3
 800411a:	d838      	bhi.n	800418e <DMA_CheckFifoParam+0xda>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <DMA_CheckFifoParam+0x70>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	0800413b 	.word	0x0800413b
 800412c:	08004135 	.word	0x08004135
 8004130:	0800414d 	.word	0x0800414d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
        break;
 8004138:	e030      	b.n	800419c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d025      	beq.n	8004192 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800414a:	e022      	b.n	8004192 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004154:	d11f      	bne.n	8004196 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800415a:	e01c      	b.n	8004196 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	2b02      	cmp	r3, #2
 8004162:	d902      	bls.n	800416a <DMA_CheckFifoParam+0xb6>
 8004164:	2b03      	cmp	r3, #3
 8004166:	d003      	beq.n	8004170 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004168:	e018      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
        break;
 800416e:	e015      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
    break;
 8004180:	e00b      	b.n	800419a <DMA_CheckFifoParam+0xe6>
        break;
 8004182:	bf00      	nop
 8004184:	e00a      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        break;
 8004186:	bf00      	nop
 8004188:	e008      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        break;
 800418a:	bf00      	nop
 800418c:	e006      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        break;
 800418e:	bf00      	nop
 8004190:	e004      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <DMA_CheckFifoParam+0xe8>
        break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <DMA_CheckFifoParam+0xe8>
    break;
 800419a:	bf00      	nop
    }
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a38      	ldr	r2, [pc, #224]	@ (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a36      	ldr	r2, [pc, #216]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a35      	ldr	r2, [pc, #212]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a33      	ldr	r2, [pc, #204]	@ (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a32      	ldr	r2, [pc, #200]	@ (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a30      	ldr	r2, [pc, #192]	@ (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2f      	ldr	r2, [pc, #188]	@ (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01a      	beq.n	800424a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3b08      	subs	r3, #8
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a24      	ldr	r2, [pc, #144]	@ (80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004238:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004248:	e024      	b.n	8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3b10      	subs	r3, #16
 8004252:	4a1e      	ldr	r2, [pc, #120]	@ (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4a1c      	ldr	r2, [pc, #112]	@ (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d806      	bhi.n	8004272 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a1b      	ldr	r2, [pc, #108]	@ (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d902      	bls.n	8004272 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3308      	adds	r3, #8
 8004270:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4b18      	ldr	r3, [pc, #96]	@ (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004284:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	58025408 	.word	0x58025408
 80042a4:	5802541c 	.word	0x5802541c
 80042a8:	58025430 	.word	0x58025430
 80042ac:	58025444 	.word	0x58025444
 80042b0:	58025458 	.word	0x58025458
 80042b4:	5802546c 	.word	0x5802546c
 80042b8:	58025480 	.word	0x58025480
 80042bc:	58025494 	.word	0x58025494
 80042c0:	cccccccd 	.word	0xcccccccd
 80042c4:	16009600 	.word	0x16009600
 80042c8:	58025880 	.word	0x58025880
 80042cc:	aaaaaaab 	.word	0xaaaaaaab
 80042d0:	400204b8 	.word	0x400204b8
 80042d4:	4002040f 	.word	0x4002040f
 80042d8:	10008200 	.word	0x10008200
 80042dc:	40020880 	.word	0x40020880

080042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04a      	beq.n	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d847      	bhi.n	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d022      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a24      	ldr	r2, [pc, #144]	@ (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d01d      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d018      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d013      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00e      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d009      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4b17      	ldr	r3, [pc, #92]	@ (80043b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a15      	ldr	r2, [pc, #84]	@ (80043bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004368:	671a      	str	r2, [r3, #112]	@ 0x70
 800436a:	e009      	b.n	8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	461a      	mov	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a11      	ldr	r2, [pc, #68]	@ (80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800437e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	2201      	movs	r2, #1
 8004386:	409a      	lsls	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	58025408 	.word	0x58025408
 800439c:	5802541c 	.word	0x5802541c
 80043a0:	58025430 	.word	0x58025430
 80043a4:	58025444 	.word	0x58025444
 80043a8:	58025458 	.word	0x58025458
 80043ac:	5802546c 	.word	0x5802546c
 80043b0:	58025480 	.word	0x58025480
 80043b4:	58025494 	.word	0x58025494
 80043b8:	1600963f 	.word	0x1600963f
 80043bc:	58025940 	.word	0x58025940
 80043c0:	1000823f 	.word	0x1000823f
 80043c4:	40020940 	.word	0x40020940

080043c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0e3      	b.n	80045a2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2223      	movs	r2, #35	@ 0x23
 80043e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fc fae9 	bl	80009c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f2:	4b6e      	ldr	r3, [pc, #440]	@ (80045ac <HAL_ETH_Init+0x1e4>)
 80043f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80043f8:	4a6c      	ldr	r2, [pc, #432]	@ (80045ac <HAL_ETH_Init+0x1e4>)
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004402:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_ETH_Init+0x1e4>)
 8004404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7a1b      	ldrb	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004418:	2000      	movs	r0, #0
 800441a:	f7fd f879 	bl	8001510 <HAL_SYSCFG_ETHInterfaceSelect>
 800441e:	e003      	b.n	8004428 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004420:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004424:	f7fd f874 	bl	8001510 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004428:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <HAL_ETH_Init+0x1e8>)
 800442a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004444:	f7fd f858 	bl	80014f8 <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800444a:	e011      	b.n	8004470 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800444c:	f7fd f854 	bl	80014f8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800445a:	d909      	bls.n	8004470 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2204      	movs	r2, #4
 8004460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	22e0      	movs	r2, #224	@ 0xe0
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e098      	b.n	80045a2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e4      	bne.n	800444c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f89e 	bl	80045c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004488:	f001 fcd8 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 800448c:	4603      	mov	r3, r0
 800448e:	4a49      	ldr	r2, [pc, #292]	@ (80045b4 <HAL_ETH_Init+0x1ec>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	0c9a      	lsrs	r2, r3, #18
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3a01      	subs	r2, #1
 800449c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fa81 	bl	80049a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80044b2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	22e0      	movs	r2, #224	@ 0xe0
 80044de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e05d      	b.n	80045a2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <HAL_ETH_Init+0x1f0>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6952      	ldr	r2, [r2, #20]
 80044fa:	0051      	lsls	r1, r2, #1
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	430b      	orrs	r3, r1
 8004502:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004506:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fae9 	bl	8004ae2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fb2f 	bl	8004b74 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	3305      	adds	r3, #5
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	3303      	adds	r3, #3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	061a      	lsls	r2, r3, #24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	3302      	adds	r3, #2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	3301      	adds	r3, #1
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004554:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004562:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004564:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b11      	ldr	r3, [pc, #68]	@ (80045bc <HAL_ETH_Init+0x1f4>)
 8004576:	430b      	orrs	r3, r1
 8004578:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <HAL_ETH_Init+0x1f8>)
 800458a:	430b      	orrs	r3, r1
 800458c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2210      	movs	r2, #16
 800459c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
 80045b0:	58000400 	.word	0x58000400
 80045b4:	431bde83 	.word	0x431bde83
 80045b8:	ffff8001 	.word	0xffff8001
 80045bc:	0c020060 	.word	0x0c020060
 80045c0:	0c20c000 	.word	0x0c20c000

080045c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80045de:	f001 fc2d 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 80045e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d804      	bhi.n	80045f6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e022      	b.n	800463c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <HAL_ETH_SetMDIOClockRange+0x90>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d204      	bcs.n	8004608 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e019      	b.n	800463c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a13      	ldr	r2, [pc, #76]	@ (8004658 <HAL_ETH_SetMDIOClockRange+0x94>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d915      	bls.n	800463c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <HAL_ETH_SetMDIOClockRange+0x98>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d804      	bhi.n	8004622 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00c      	b.n	800463c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a0e      	ldr	r2, [pc, #56]	@ (8004660 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d804      	bhi.n	8004634 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e003      	b.n	800463c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	02160ebf 	.word	0x02160ebf
 8004654:	03938700 	.word	0x03938700
 8004658:	05f5e0ff 	.word	0x05f5e0ff
 800465c:	08f0d17f 	.word	0x08f0d17f
 8004660:	0ee6b27f 	.word	0x0ee6b27f

08004664 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	791b      	ldrb	r3, [r3, #4]
 800467c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800467e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	7b1b      	ldrb	r3, [r3, #12]
 8004684:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7b5b      	ldrb	r3, [r3, #13]
 800468c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800468e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	7b9b      	ldrb	r3, [r3, #14]
 8004694:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004696:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	7bdb      	ldrb	r3, [r3, #15]
 800469c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800469e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	7c12      	ldrb	r2, [r2, #16]
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	d102      	bne.n	80046ae <ETH_SetMACConfig+0x4a>
 80046a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80046ac:	e000      	b.n	80046b0 <ETH_SetMACConfig+0x4c>
 80046ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80046b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	7c52      	ldrb	r2, [r2, #17]
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	d102      	bne.n	80046c0 <ETH_SetMACConfig+0x5c>
 80046ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046be:	e000      	b.n	80046c2 <ETH_SetMACConfig+0x5e>
 80046c0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80046c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	7c9b      	ldrb	r3, [r3, #18]
 80046c8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80046ca:	431a      	orrs	r2, r3
               macconf->Speed |
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80046d0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80046d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	7f1b      	ldrb	r3, [r3, #28]
 80046dc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80046de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	7f5b      	ldrb	r3, [r3, #29]
 80046e4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80046e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	7f92      	ldrb	r2, [r2, #30]
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d102      	bne.n	80046f6 <ETH_SetMACConfig+0x92>
 80046f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046f4:	e000      	b.n	80046f8 <ETH_SetMACConfig+0x94>
 80046f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80046f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	7fdb      	ldrb	r3, [r3, #31]
 80046fe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004700:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004708:	2a00      	cmp	r2, #0
 800470a:	d102      	bne.n	8004712 <ETH_SetMACConfig+0xae>
 800470c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004710:	e000      	b.n	8004714 <ETH_SetMACConfig+0xb0>
 8004712:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004714:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800471a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004722:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004724:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b56      	ldr	r3, [pc, #344]	@ (8004890 <ETH_SetMACConfig+0x22c>)
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	430b      	orrs	r3, r1
 8004740:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004746:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800474e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004750:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004758:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800475a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004762:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004764:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800476c:	2a00      	cmp	r2, #0
 800476e:	d102      	bne.n	8004776 <ETH_SetMACConfig+0x112>
 8004770:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004774:	e000      	b.n	8004778 <ETH_SetMACConfig+0x114>
 8004776:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004778:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b42      	ldr	r3, [pc, #264]	@ (8004894 <ETH_SetMACConfig+0x230>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	430b      	orrs	r3, r1
 8004794:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004898 <ETH_SetMACConfig+0x234>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d101      	bne.n	80047d6 <ETH_SetMACConfig+0x172>
 80047d2:	2280      	movs	r2, #128	@ 0x80
 80047d4:	e000      	b.n	80047d8 <ETH_SetMACConfig+0x174>
 80047d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80047d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047ea:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80047ee:	4013      	ands	r3, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	430b      	orrs	r3, r1
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004800:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004808:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f023 0103 	bic.w	r1, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	430a      	orrs	r2, r1
 8004822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800482e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800484a:	2a00      	cmp	r2, #0
 800484c:	d101      	bne.n	8004852 <ETH_SetMACConfig+0x1ee>
 800484e:	2240      	movs	r2, #64	@ 0x40
 8004850:	e000      	b.n	8004854 <ETH_SetMACConfig+0x1f0>
 8004852:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004854:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800485c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800485e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004866:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004874:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	430a      	orrs	r2, r1
 8004880:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	00048083 	.word	0x00048083
 8004894:	c0f88000 	.word	0xc0f88000
 8004898:	fffffef0 	.word	0xfffffef0

0800489c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b38      	ldr	r3, [pc, #224]	@ (8004994 <ETH_SetDMAConfig+0xf8>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	6811      	ldr	r1, [r2, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	7b1b      	ldrb	r3, [r3, #12]
 80048d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004998 <ETH_SetDMAConfig+0xfc>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	430b      	orrs	r3, r1
 80048f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048f4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7b5b      	ldrb	r3, [r3, #13]
 80048fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004910:	4b22      	ldr	r3, [pc, #136]	@ (800499c <ETH_SetDMAConfig+0x100>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	430b      	orrs	r3, r1
 800491c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004920:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	7d1b      	ldrb	r3, [r3, #20]
 800492c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800492e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7f5b      	ldrb	r3, [r3, #29]
 8004934:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004942:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004946:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <ETH_SetDMAConfig+0x104>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	430b      	orrs	r3, r1
 8004952:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004956:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7f1b      	ldrb	r3, [r3, #28]
 800495e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004970:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <ETH_SetDMAConfig+0x108>)
 8004976:	4013      	ands	r3, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	430b      	orrs	r3, r1
 8004980:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004984:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	ffff87fd 	.word	0xffff87fd
 8004998:	ffff2ffe 	.word	0xffff2ffe
 800499c:	fffec000 	.word	0xfffec000
 80049a0:	ffc0efef 	.word	0xffc0efef
 80049a4:	7fc0ffff 	.word	0x7fc0ffff

080049a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0a4      	sub	sp, #144	@ 0x90
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80049b6:	2300      	movs	r3, #0
 80049b8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80049e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004a00:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004a04:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004a22:	2300      	movs	r3, #0
 8004a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004a40:	2320      	movs	r3, #32
 8004a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004a52:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a64:	2302      	movs	r3, #2
 8004a66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a82:	2300      	movs	r3, #0
 8004a84:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fde6 	bl	8004664 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ab2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ab6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004abc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ac0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004ac8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff fee1 	bl	800489c <ETH_SetDMAConfig>
}
 8004ada:	bf00      	nop
 8004adc:	3790      	adds	r7, #144	@ 0x90
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e01d      	b.n	8004b2c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68d9      	ldr	r1, [r3, #12]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	3206      	adds	r2, #6
 8004b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d9de      	bls.n	8004af0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b40:	461a      	mov	r2, r3
 8004b42:	2303      	movs	r3, #3
 8004b44:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b54:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b64:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e023      	b.n	8004bca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6919      	ldr	r1, [r3, #16]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	440b      	add	r3, r1
 8004b92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	3212      	adds	r2, #18
 8004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d9d8      	bls.n	8004b82 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c0a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c1e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c3e:	4b86      	ldr	r3, [pc, #536]	@ (8004e58 <HAL_GPIO_Init+0x228>)
 8004c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c42:	e18c      	b.n	8004f5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2101      	movs	r1, #1
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 817e 	beq.w	8004f58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d005      	beq.n	8004c74 <HAL_GPIO_Init+0x44>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d130      	bne.n	8004cd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	2203      	movs	r2, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004caa:	2201      	movs	r2, #1
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 0201 	and.w	r2, r3, #1
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d017      	beq.n	8004d12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	2203      	movs	r2, #3
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d123      	bne.n	8004d66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	08da      	lsrs	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3208      	adds	r2, #8
 8004d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	220f      	movs	r2, #15
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	08da      	lsrs	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3208      	adds	r2, #8
 8004d60:	69b9      	ldr	r1, [r7, #24]
 8004d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	2203      	movs	r2, #3
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80d8 	beq.w	8004f58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da8:	4b2c      	ldr	r3, [pc, #176]	@ (8004e5c <HAL_GPIO_Init+0x22c>)
 8004daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dae:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <HAL_GPIO_Init+0x22c>)
 8004db0:	f043 0302 	orr.w	r3, r3, #2
 8004db4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004db8:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_GPIO_Init+0x22c>)
 8004dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc6:	4a26      	ldr	r2, [pc, #152]	@ (8004e60 <HAL_GPIO_Init+0x230>)
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	3302      	adds	r3, #2
 8004dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	220f      	movs	r2, #15
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	@ (8004e64 <HAL_GPIO_Init+0x234>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <HAL_GPIO_Init+0x258>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e68 <HAL_GPIO_Init+0x238>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d02b      	beq.n	8004e52 <HAL_GPIO_Init+0x222>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e6c <HAL_GPIO_Init+0x23c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d025      	beq.n	8004e4e <HAL_GPIO_Init+0x21e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1a      	ldr	r2, [pc, #104]	@ (8004e70 <HAL_GPIO_Init+0x240>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <HAL_GPIO_Init+0x21a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <HAL_GPIO_Init+0x244>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d019      	beq.n	8004e46 <HAL_GPIO_Init+0x216>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <HAL_GPIO_Init+0x248>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_GPIO_Init+0x212>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <HAL_GPIO_Init+0x24c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00d      	beq.n	8004e3e <HAL_GPIO_Init+0x20e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <HAL_GPIO_Init+0x250>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <HAL_GPIO_Init+0x20a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	@ (8004e84 <HAL_GPIO_Init+0x254>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d101      	bne.n	8004e36 <HAL_GPIO_Init+0x206>
 8004e32:	2309      	movs	r3, #9
 8004e34:	e029      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e36:	230a      	movs	r3, #10
 8004e38:	e027      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e3a:	2307      	movs	r3, #7
 8004e3c:	e025      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e3e:	2306      	movs	r3, #6
 8004e40:	e023      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e42:	2305      	movs	r3, #5
 8004e44:	e021      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e01f      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e01d      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e01b      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e019      	b.n	8004e8a <HAL_GPIO_Init+0x25a>
 8004e56:	bf00      	nop
 8004e58:	58000080 	.word	0x58000080
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	58000400 	.word	0x58000400
 8004e64:	58020000 	.word	0x58020000
 8004e68:	58020400 	.word	0x58020400
 8004e6c:	58020800 	.word	0x58020800
 8004e70:	58020c00 	.word	0x58020c00
 8004e74:	58021000 	.word	0x58021000
 8004e78:	58021400 	.word	0x58021400
 8004e7c:	58021800 	.word	0x58021800
 8004e80:	58021c00 	.word	0x58021c00
 8004e84:	58022400 	.word	0x58022400
 8004e88:	2300      	movs	r3, #0
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	f002 0203 	and.w	r2, r2, #3
 8004e90:	0092      	lsls	r2, r2, #2
 8004e92:	4093      	lsls	r3, r2
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e9a:	4938      	ldr	r1, [pc, #224]	@ (8004f7c <HAL_GPIO_Init+0x34c>)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f ae6b 	bne.w	8004c44 <HAL_GPIO_Init+0x14>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3724      	adds	r7, #36	@ 0x24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	58000400 	.word	0x58000400

08004f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	807b      	strh	r3, [r7, #2]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f90:	787b      	ldrb	r3, [r7, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f9c:	e003      	b.n	8004fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	041a      	lsls	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	619a      	str	r2, [r3, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <HAL_PWREx_ConfigSupply+0x70>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d00a      	beq.n	8004fde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <HAL_PWREx_ConfigSupply+0x70>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d001      	beq.n	8004fda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e01f      	b.n	800501a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e01d      	b.n	800501a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004fde:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_PWREx_ConfigSupply+0x70>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f023 0207 	bic.w	r2, r3, #7
 8004fe6:	490f      	ldr	r1, [pc, #60]	@ (8005024 <HAL_PWREx_ConfigSupply+0x70>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004fee:	f7fc fa83 	bl	80014f8 <HAL_GetTick>
 8004ff2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ff4:	e009      	b.n	800500a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ff6:	f7fc fa7f 	bl	80014f8 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005004:	d901      	bls.n	800500a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e007      	b.n	800501a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_PWREx_ConfigSupply+0x70>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005016:	d1ee      	bne.n	8004ff6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	58024800 	.word	0x58024800

08005028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08c      	sub	sp, #48	@ 0x30
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e3c8      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8087 	beq.w	8005156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005048:	4b88      	ldr	r3, [pc, #544]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005052:	4b86      	ldr	r3, [pc, #536]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	2b10      	cmp	r3, #16
 800505c:	d007      	beq.n	800506e <HAL_RCC_OscConfig+0x46>
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	2b18      	cmp	r3, #24
 8005062:	d110      	bne.n	8005086 <HAL_RCC_OscConfig+0x5e>
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d10b      	bne.n	8005086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506e:	4b7f      	ldr	r3, [pc, #508]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d06c      	beq.n	8005154 <HAL_RCC_OscConfig+0x12c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d168      	bne.n	8005154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e3a2      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508e:	d106      	bne.n	800509e <HAL_RCC_OscConfig+0x76>
 8005090:	4b76      	ldr	r3, [pc, #472]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a75      	ldr	r2, [pc, #468]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e02e      	b.n	80050fc <HAL_RCC_OscConfig+0xd4>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x98>
 80050a6:	4b71      	ldr	r3, [pc, #452]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a70      	ldr	r2, [pc, #448]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4b6e      	ldr	r3, [pc, #440]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6d      	ldr	r2, [pc, #436]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	e01d      	b.n	80050fc <HAL_RCC_OscConfig+0xd4>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050c8:	d10c      	bne.n	80050e4 <HAL_RCC_OscConfig+0xbc>
 80050ca:	4b68      	ldr	r3, [pc, #416]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a67      	ldr	r2, [pc, #412]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	4b65      	ldr	r3, [pc, #404]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a64      	ldr	r2, [pc, #400]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_OscConfig+0xd4>
 80050e4:	4b61      	ldr	r3, [pc, #388]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a60      	ldr	r2, [pc, #384]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	4b5e      	ldr	r3, [pc, #376]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5d      	ldr	r2, [pc, #372]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80050f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc f9f8 	bl	80014f8 <HAL_GetTick>
 8005108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510c:	f7fc f9f4 	bl	80014f8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	@ 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e356      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511e:	4b53      	ldr	r3, [pc, #332]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0xe4>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fc f9e4 	bl	80014f8 <HAL_GetTick>
 8005130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fc f9e0 	bl	80014f8 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	@ 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e342      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005146:	4b49      	ldr	r3, [pc, #292]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x10c>
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 808c 	beq.w	800527c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005164:	4b41      	ldr	r3, [pc, #260]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800516c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800516e:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_RCC_OscConfig+0x162>
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2b18      	cmp	r3, #24
 800517e:	d137      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1c8>
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d132      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518a:	4b38      	ldr	r3, [pc, #224]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x17a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e314      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051a2:	4b32      	ldr	r3, [pc, #200]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 0219 	bic.w	r2, r3, #25
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	492f      	ldr	r1, [pc, #188]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fc f9a0 	bl	80014f8 <HAL_GetTick>
 80051b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051bc:	f7fc f99c 	bl	80014f8 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e2fe      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ce:	4b27      	ldr	r3, [pc, #156]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	4920      	ldr	r1, [pc, #128]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ee:	e045      	b.n	800527c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d026      	beq.n	8005246 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051f8:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 0219 	bic.w	r2, r3, #25
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4919      	ldr	r1, [pc, #100]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fc f975 	bl	80014f8 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005212:	f7fc f971 	bl	80014f8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e2d3      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005224:	4b11      	ldr	r3, [pc, #68]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005230:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	490b      	ldr	r1, [pc, #44]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
 8005244:	e01a      	b.n	800527c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005246:	4b09      	ldr	r3, [pc, #36]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a08      	ldr	r2, [pc, #32]	@ (800526c <HAL_RCC_OscConfig+0x244>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fc f951 	bl	80014f8 <HAL_GetTick>
 8005256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005258:	e00a      	b.n	8005270 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525a:	f7fc f94d 	bl	80014f8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d903      	bls.n	8005270 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e2af      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
 800526c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005270:	4b96      	ldr	r3, [pc, #600]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ee      	bne.n	800525a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d06a      	beq.n	800535e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005288:	4b90      	ldr	r3, [pc, #576]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005290:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005292:	4b8e      	ldr	r3, [pc, #568]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005296:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d007      	beq.n	80052ae <HAL_RCC_OscConfig+0x286>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b18      	cmp	r3, #24
 80052a2:	d11b      	bne.n	80052dc <HAL_RCC_OscConfig+0x2b4>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d116      	bne.n	80052dc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052ae:	4b87      	ldr	r3, [pc, #540]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_RCC_OscConfig+0x29e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	2b80      	cmp	r3, #128	@ 0x80
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e282      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c6:	4b81      	ldr	r3, [pc, #516]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	497d      	ldr	r1, [pc, #500]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052da:	e040      	b.n	800535e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052e4:	4b79      	ldr	r3, [pc, #484]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a78      	ldr	r2, [pc, #480]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80052ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fc f902 	bl	80014f8 <HAL_GetTick>
 80052f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052f8:	f7fc f8fe 	bl	80014f8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e260      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800530a:	4b70      	ldr	r3, [pc, #448]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005316:	4b6d      	ldr	r3, [pc, #436]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	4969      	ldr	r1, [pc, #420]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	60cb      	str	r3, [r1, #12]
 800532a:	e018      	b.n	800535e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800532c:	4b67      	ldr	r3, [pc, #412]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a66      	ldr	r2, [pc, #408]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc f8de 	bl	80014f8 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005340:	f7fc f8da 	bl	80014f8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e23c      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005352:	4b5e      	ldr	r3, [pc, #376]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d036      	beq.n	80053d8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d019      	beq.n	80053a6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005372:	4b56      	ldr	r3, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005376:	4a55      	ldr	r2, [pc, #340]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7fc f8bb 	bl	80014f8 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005386:	f7fc f8b7 	bl	80014f8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e219      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005398:	4b4c      	ldr	r3, [pc, #304]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 800539a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0f0      	beq.n	8005386 <HAL_RCC_OscConfig+0x35e>
 80053a4:	e018      	b.n	80053d8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a6:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80053a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053aa:	4a48      	ldr	r2, [pc, #288]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fc f8a1 	bl	80014f8 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ba:	f7fc f89d 	bl	80014f8 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e1ff      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053cc:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80053ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f0      	bne.n	80053ba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d036      	beq.n	8005452 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053ec:	4b37      	ldr	r3, [pc, #220]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a36      	ldr	r2, [pc, #216]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80053f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053f8:	f7fc f87e 	bl	80014f8 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005400:	f7fc f87a 	bl	80014f8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e1dc      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005412:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x3d8>
 800541e:	e018      	b.n	8005452 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005420:	4b2a      	ldr	r3, [pc, #168]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a29      	ldr	r2, [pc, #164]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800542a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800542c:	f7fc f864 	bl	80014f8 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005434:	f7fc f860 	bl	80014f8 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e1c2      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005446:	4b21      	ldr	r3, [pc, #132]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8086 	beq.w	800556c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <HAL_RCC_OscConfig+0x4a8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1a      	ldr	r2, [pc, #104]	@ (80054d0 <HAL_RCC_OscConfig+0x4a8>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546c:	f7fc f844 	bl	80014f8 <HAL_GetTick>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fc f840 	bl	80014f8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	@ 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1a2      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005486:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <HAL_RCC_OscConfig+0x4a8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d106      	bne.n	80054a8 <HAL_RCC_OscConfig+0x480>
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549e:	4a0b      	ldr	r2, [pc, #44]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054a6:	e032      	b.n	800550e <HAL_RCC_OscConfig+0x4e6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d111      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4ac>
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b4:	4a05      	ldr	r2, [pc, #20]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80054bc:	4b03      	ldr	r3, [pc, #12]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80054be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c0:	4a02      	ldr	r2, [pc, #8]	@ (80054cc <HAL_RCC_OscConfig+0x4a4>)
 80054c2:	f023 0304 	bic.w	r3, r3, #4
 80054c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054c8:	e021      	b.n	800550e <HAL_RCC_OscConfig+0x4e6>
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
 80054d0:	58024800 	.word	0x58024800
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d10c      	bne.n	80054f6 <HAL_RCC_OscConfig+0x4ce>
 80054dc:	4b83      	ldr	r3, [pc, #524]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e0:	4a82      	ldr	r2, [pc, #520]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054e8:	4b80      	ldr	r3, [pc, #512]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	4a7f      	ldr	r2, [pc, #508]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f4:	e00b      	b.n	800550e <HAL_RCC_OscConfig+0x4e6>
 80054f6:	4b7d      	ldr	r3, [pc, #500]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fa:	4a7c      	ldr	r2, [pc, #496]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	@ 0x70
 8005502:	4b7a      	ldr	r3, [pc, #488]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005506:	4a79      	ldr	r2, [pc, #484]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d015      	beq.n	8005542 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fb ffef 	bl	80014f8 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551c:	e00a      	b.n	8005534 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fb ffeb 	bl	80014f8 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e14b      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005534:	4b6d      	ldr	r3, [pc, #436]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ee      	beq.n	800551e <HAL_RCC_OscConfig+0x4f6>
 8005540:	e014      	b.n	800556c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fb ffd9 	bl	80014f8 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005548:	e00a      	b.n	8005560 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554a:	f7fb ffd5 	bl	80014f8 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e135      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005560:	4b62      	ldr	r3, [pc, #392]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1ee      	bne.n	800554a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 812a 	beq.w	80057ca <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005576:	4b5d      	ldr	r3, [pc, #372]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557e:	2b18      	cmp	r3, #24
 8005580:	f000 80ba 	beq.w	80056f8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	2b02      	cmp	r3, #2
 800558a:	f040 8095 	bne.w	80056b8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558e:	4b57      	ldr	r3, [pc, #348]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a56      	ldr	r2, [pc, #344]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fb ffad 	bl	80014f8 <HAL_GetTick>
 800559e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a2:	f7fb ffa9 	bl	80014f8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e10b      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055b4:	4b4d      	ldr	r3, [pc, #308]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f0      	bne.n	80055a2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c0:	4b4a      	ldr	r3, [pc, #296]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80055c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055c4:	4b4a      	ldr	r3, [pc, #296]	@ (80056f0 <HAL_RCC_OscConfig+0x6c8>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055d0:	0112      	lsls	r2, r2, #4
 80055d2:	430a      	orrs	r2, r1
 80055d4:	4945      	ldr	r1, [pc, #276]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	628b      	str	r3, [r1, #40]	@ 0x28
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	3b01      	subs	r3, #1
 80055e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e8:	3b01      	subs	r3, #1
 80055ea:	025b      	lsls	r3, r3, #9
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	3b01      	subs	r3, #1
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	3b01      	subs	r3, #1
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800560a:	4938      	ldr	r1, [pc, #224]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005610:	4b36      	ldr	r3, [pc, #216]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	4a35      	ldr	r2, [pc, #212]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800561c:	4b33      	ldr	r3, [pc, #204]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800561e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005620:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_RCC_OscConfig+0x6cc>)
 8005622:	4013      	ands	r3, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005628:	00d2      	lsls	r2, r2, #3
 800562a:	4930      	ldr	r1, [pc, #192]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005630:	4b2e      	ldr	r3, [pc, #184]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	f023 020c 	bic.w	r2, r3, #12
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	492b      	ldr	r1, [pc, #172]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005642:	4b2a      	ldr	r3, [pc, #168]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	f023 0202 	bic.w	r2, r3, #2
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	4927      	ldr	r1, [pc, #156]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005650:	4313      	orrs	r3, r2
 8005652:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005654:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a24      	ldr	r2, [pc, #144]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800565a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800565e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005660:	4b22      	ldr	r3, [pc, #136]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	4a21      	ldr	r2, [pc, #132]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800566c:	4b1f      	ldr	r3, [pc, #124]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	4a1e      	ldr	r2, [pc, #120]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005678:	4b1c      	ldr	r3, [pc, #112]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005684:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 800568a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800568e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fb ff32 	bl	80014f8 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fb ff2e 	bl	80014f8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e090      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056aa:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x670>
 80056b6:	e088      	b.n	80057ca <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b8:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0b      	ldr	r2, [pc, #44]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fb ff18 	bl	80014f8 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fb ff14 	bl	80014f8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e076      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056de:	4b03      	ldr	r3, [pc, #12]	@ (80056ec <HAL_RCC_OscConfig+0x6c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x6a4>
 80056ea:	e06e      	b.n	80057ca <HAL_RCC_OscConfig+0x7a2>
 80056ec:	58024400 	.word	0x58024400
 80056f0:	fffffc0c 	.word	0xfffffc0c
 80056f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056f8:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056fe:	4b35      	ldr	r3, [pc, #212]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	2b01      	cmp	r3, #1
 800570a:	d031      	beq.n	8005770 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f003 0203 	and.w	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005716:	429a      	cmp	r2, r3
 8005718:	d12a      	bne.n	8005770 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d122      	bne.n	8005770 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d11a      	bne.n	8005770 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005746:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d111      	bne.n	8005770 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d108      	bne.n	8005770 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	0e1b      	lsrs	r3, r3, #24
 8005762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d001      	beq.n	8005774 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e02b      	b.n	80057cc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	429a      	cmp	r2, r3
 8005788:	d01f      	beq.n	80057ca <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800578a:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4a11      	ldr	r2, [pc, #68]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005796:	f7fb feaf 	bl	80014f8 <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800579c:	bf00      	nop
 800579e:	f7fb feab 	bl	80014f8 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d0f9      	beq.n	800579e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057aa:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 80057ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ae:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <HAL_RCC_OscConfig+0x7b0>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057b6:	00d2      	lsls	r2, r2, #3
 80057b8:	4906      	ldr	r1, [pc, #24]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4a04      	ldr	r2, [pc, #16]	@ (80057d4 <HAL_RCC_OscConfig+0x7ac>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3730      	adds	r7, #48	@ 0x30
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	58024400 	.word	0x58024400
 80057d8:	ffff0007 	.word	0xffff0007

080057dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e19c      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b8a      	ldr	r3, [pc, #552]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d910      	bls.n	8005820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b87      	ldr	r3, [pc, #540]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f023 020f 	bic.w	r2, r3, #15
 8005806:	4985      	ldr	r1, [pc, #532]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	4b83      	ldr	r3, [pc, #524]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e184      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d010      	beq.n	800584e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	4b7b      	ldr	r3, [pc, #492]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005838:	429a      	cmp	r2, r3
 800583a:	d908      	bls.n	800584e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800583c:	4b78      	ldr	r3, [pc, #480]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	4975      	ldr	r1, [pc, #468]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800584a:	4313      	orrs	r3, r2
 800584c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	4b70      	ldr	r3, [pc, #448]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005866:	429a      	cmp	r2, r3
 8005868:	d908      	bls.n	800587c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800586a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	496a      	ldr	r1, [pc, #424]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d010      	beq.n	80058aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	4b64      	ldr	r3, [pc, #400]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005894:	429a      	cmp	r2, r3
 8005896:	d908      	bls.n	80058aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005898:	4b61      	ldr	r3, [pc, #388]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	495e      	ldr	r1, [pc, #376]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	4b59      	ldr	r3, [pc, #356]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d908      	bls.n	80058d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058c6:	4b56      	ldr	r3, [pc, #344]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4953      	ldr	r1, [pc, #332]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d908      	bls.n	8005906 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f023 020f 	bic.w	r2, r3, #15
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4947      	ldr	r1, [pc, #284]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005902:	4313      	orrs	r3, r2
 8005904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d055      	beq.n	80059be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005912:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4940      	ldr	r1, [pc, #256]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005920:	4313      	orrs	r3, r2
 8005922:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800592c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d121      	bne.n	800597c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0f6      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d107      	bne.n	8005954 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005944:	4b36      	ldr	r3, [pc, #216]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0ea      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800595c:	4b30      	ldr	r3, [pc, #192]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0de      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800596c:	4b2c      	ldr	r3, [pc, #176]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0d6      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800597c:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f023 0207 	bic.w	r2, r3, #7
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4925      	ldr	r1, [pc, #148]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 800598a:	4313      	orrs	r3, r2
 800598c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598e:	f7fb fdb3 	bl	80014f8 <HAL_GetTick>
 8005992:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005994:	e00a      	b.n	80059ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005996:	f7fb fdaf 	bl	80014f8 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0be      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d1eb      	bne.n	8005996 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d208      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059da:	4b11      	ldr	r3, [pc, #68]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f023 020f 	bic.w	r2, r3, #15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	490e      	ldr	r1, [pc, #56]	@ (8005a20 <HAL_RCC_ClockConfig+0x244>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d214      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 020f 	bic.w	r2, r3, #15
 8005a02:	4906      	ldr	r1, [pc, #24]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <HAL_RCC_ClockConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e086      	b.n	8005b2a <HAL_RCC_ClockConfig+0x34e>
 8005a1c:	52002000 	.word	0x52002000
 8005a20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	4b3f      	ldr	r3, [pc, #252]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d208      	bcs.n	8005a52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a40:	4b3c      	ldr	r3, [pc, #240]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	4939      	ldr	r1, [pc, #228]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d208      	bcs.n	8005a80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a6e:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	492e      	ldr	r1, [pc, #184]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d010      	beq.n	8005aae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	4b28      	ldr	r3, [pc, #160]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d208      	bcs.n	8005aae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a9c:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4922      	ldr	r1, [pc, #136]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d010      	beq.n	8005adc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	4b1d      	ldr	r3, [pc, #116]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d208      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005aca:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4917      	ldr	r1, [pc, #92]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005adc:	f000 f834 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	4912      	ldr	r1, [pc, #72]	@ (8005b38 <HAL_RCC_ClockConfig+0x35c>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005afa:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <HAL_RCC_ClockConfig+0x358>)
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	4a0d      	ldr	r2, [pc, #52]	@ (8005b38 <HAL_RCC_ClockConfig+0x35c>)
 8005b04:	5cd3      	ldrb	r3, [r2, r3]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b10:	4a0a      	ldr	r2, [pc, #40]	@ (8005b3c <HAL_RCC_ClockConfig+0x360>)
 8005b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b14:	4a0a      	ldr	r2, [pc, #40]	@ (8005b40 <HAL_RCC_ClockConfig+0x364>)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_RCC_ClockConfig+0x368>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb fca0 	bl	8001464 <HAL_InitTick>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	58024400 	.word	0x58024400
 8005b38:	0800b770 	.word	0x0800b770
 8005b3c:	24000040 	.word	0x24000040
 8005b40:	2400003c 	.word	0x2400003c
 8005b44:	24000044 	.word	0x24000044

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b089      	sub	sp, #36	@ 0x24
 8005b4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b4e:	4bb3      	ldr	r3, [pc, #716]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b56:	2b18      	cmp	r3, #24
 8005b58:	f200 8155 	bhi.w	8005e06 <HAL_RCC_GetSysClockFreq+0x2be>
 8005b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005bc9 	.word	0x08005bc9
 8005b68:	08005e07 	.word	0x08005e07
 8005b6c:	08005e07 	.word	0x08005e07
 8005b70:	08005e07 	.word	0x08005e07
 8005b74:	08005e07 	.word	0x08005e07
 8005b78:	08005e07 	.word	0x08005e07
 8005b7c:	08005e07 	.word	0x08005e07
 8005b80:	08005e07 	.word	0x08005e07
 8005b84:	08005bef 	.word	0x08005bef
 8005b88:	08005e07 	.word	0x08005e07
 8005b8c:	08005e07 	.word	0x08005e07
 8005b90:	08005e07 	.word	0x08005e07
 8005b94:	08005e07 	.word	0x08005e07
 8005b98:	08005e07 	.word	0x08005e07
 8005b9c:	08005e07 	.word	0x08005e07
 8005ba0:	08005e07 	.word	0x08005e07
 8005ba4:	08005bf5 	.word	0x08005bf5
 8005ba8:	08005e07 	.word	0x08005e07
 8005bac:	08005e07 	.word	0x08005e07
 8005bb0:	08005e07 	.word	0x08005e07
 8005bb4:	08005e07 	.word	0x08005e07
 8005bb8:	08005e07 	.word	0x08005e07
 8005bbc:	08005e07 	.word	0x08005e07
 8005bc0:	08005e07 	.word	0x08005e07
 8005bc4:	08005bfb 	.word	0x08005bfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc8:	4b94      	ldr	r3, [pc, #592]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd4:	4b91      	ldr	r3, [pc, #580]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	4a90      	ldr	r2, [pc, #576]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005be6:	e111      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005be8:	4b8d      	ldr	r3, [pc, #564]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bea:	61bb      	str	r3, [r7, #24]
      break;
 8005bec:	e10e      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005bee:	4b8d      	ldr	r3, [pc, #564]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bf0:	61bb      	str	r3, [r7, #24]
      break;
 8005bf2:	e10b      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005bf6:	61bb      	str	r3, [r7, #24]
      break;
 8005bf8:	e108      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bfa:	4b88      	ldr	r3, [pc, #544]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c04:	4b85      	ldr	r3, [pc, #532]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c10:	4b82      	ldr	r3, [pc, #520]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c1a:	4b80      	ldr	r3, [pc, #512]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	08db      	lsrs	r3, r3, #3
 8005c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80e1 	beq.w	8005e00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	f000 8083 	beq.w	8005d4c <HAL_RCC_GetSysClockFreq+0x204>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	f200 80a1 	bhi.w	8005d90 <HAL_RCC_GetSysClockFreq+0x248>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0x114>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d056      	beq.n	8005d08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c5a:	e099      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02d      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c68:	4b6c      	ldr	r3, [pc, #432]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	08db      	lsrs	r3, r3, #3
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	4a6b      	ldr	r2, [pc, #428]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b62      	ldr	r3, [pc, #392]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005cc2:	e087      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005e30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b51      	ldr	r3, [pc, #324]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d06:	e065      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b40      	ldr	r3, [pc, #256]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d4a:	e043      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d8e:	e021      	b.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005dd4:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	0a5b      	lsrs	r3, r3, #9
 8005dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dde:	3301      	adds	r3, #1
 8005de0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df8:	ee17 3a90 	vmov	r3, s15
 8005dfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005dfe:	e005      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]
      break;
 8005e04:	e002      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e06:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e08:	61bb      	str	r3, [r7, #24]
      break;
 8005e0a:	bf00      	nop
  }

  return sysclockfreq;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	@ 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	03d09000 	.word	0x03d09000
 8005e24:	003d0900 	.word	0x003d0900
 8005e28:	007a1200 	.word	0x007a1200
 8005e2c:	46000000 	.word	0x46000000
 8005e30:	4c742400 	.word	0x4c742400
 8005e34:	4a742400 	.word	0x4a742400
 8005e38:	4af42400 	.word	0x4af42400

08005e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e42:	f7ff fe81 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005e46:	4602      	mov	r2, r0
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <HAL_RCC_GetHCLKFreq+0x50>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	490f      	ldr	r1, [pc, #60]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e54:	5ccb      	ldrb	r3, [r1, r3]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e60:	4b0a      	ldr	r3, [pc, #40]	@ (8005e8c <HAL_RCC_GetHCLKFreq+0x50>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e6a:	5cd3      	ldrb	r3, [r2, r3]
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	fa22 f303 	lsr.w	r3, r2, r3
 8005e76:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e7a:	4a07      	ldr	r2, [pc, #28]	@ (8005e98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	0800b770 	.word	0x0800b770
 8005e94:	24000040 	.word	0x24000040
 8005e98:	2400003c 	.word	0x2400003c

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ea0:	f7ff ffcc 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4904      	ldr	r1, [pc, #16]	@ (8005ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	0800b770 	.word	0x0800b770

08005ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ecc:	f7ff ffb6 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	4904      	ldr	r1, [pc, #16]	@ (8005ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ede:	5ccb      	ldrb	r3, [r1, r3]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	0800b770 	.word	0x0800b770

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b0c6      	sub	sp, #280	@ 0x118
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f06:	2300      	movs	r3, #0
 8005f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005f18:	2500      	movs	r5, #0
 8005f1a:	ea54 0305 	orrs.w	r3, r4, r5
 8005f1e:	d049      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f2a:	d02f      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005f2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f30:	d828      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f36:	d01a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f3c:	d822      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f46:	d007      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f48:	e01c      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4a:	4bab      	ldr	r3, [pc, #684]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	4aaa      	ldr	r2, [pc, #680]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f56:	e01a      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fc25 	bl	80077b0 <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f6c:	e00f      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f72:	3328      	adds	r3, #40	@ 0x28
 8005f74:	2102      	movs	r1, #2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fccc 	bl	8007914 <RCCEx_PLL3_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f82:	e004      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f8a:	e000      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f96:	4b98      	ldr	r3, [pc, #608]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa4:	4a94      	ldr	r2, [pc, #592]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005faa:	e003      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005fc0:	f04f 0900 	mov.w	r9, #0
 8005fc4:	ea58 0309 	orrs.w	r3, r8, r9
 8005fc8:	d047      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d82a      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08005fff 	.word	0x08005fff
 8005fe4:	08006015 	.word	0x08006015
 8005fe8:	08006033 	.word	0x08006033
 8005fec:	08006033 	.word	0x08006033
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b81      	ldr	r3, [pc, #516]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	4a80      	ldr	r2, [pc, #512]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e01a      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006002:	3308      	adds	r3, #8
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fbd2 	bl	80077b0 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006012:	e00f      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006018:	3328      	adds	r3, #40	@ 0x28
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fc79 	bl	8007914 <RCCEx_PLL3_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006028:	e004      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800603c:	4b6e      	ldr	r3, [pc, #440]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006040:	f023 0107 	bic.w	r1, r3, #7
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	4a6b      	ldr	r2, [pc, #428]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006056:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006066:	f04f 0b00 	mov.w	fp, #0
 800606a:	ea5a 030b 	orrs.w	r3, sl, fp
 800606e:	d05b      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006078:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800607c:	d03b      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800607e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006082:	d834      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006084:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006088:	d037      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800608a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800608e:	d82e      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006090:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006094:	d033      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006096:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800609a:	d828      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a0:	d01a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80060a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a6:	d822      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80060ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060b0:	d007      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80060b2:	e01c      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b4:	4b50      	ldr	r3, [pc, #320]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	4a4f      	ldr	r2, [pc, #316]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060c0:	e01e      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	3308      	adds	r3, #8
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fb70 	bl	80077b0 <RCCEx_PLL2_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060d6:	e013      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	3328      	adds	r3, #40	@ 0x28
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fc17 	bl	8007914 <RCCEx_PLL3_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ec:	e008      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060f4:	e004      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80060fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006108:	4b3b      	ldr	r3, [pc, #236]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006118:	4a37      	ldr	r2, [pc, #220]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800611a:	430b      	orrs	r3, r1
 800611c:	6593      	str	r3, [r2, #88]	@ 0x58
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006134:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006138:	2300      	movs	r3, #0
 800613a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800613e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d05d      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006150:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006154:	d03b      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006156:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800615a:	d834      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800615c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006160:	d037      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006162:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006166:	d82e      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006168:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800616c:	d033      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800616e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006172:	d828      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006178:	d01a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800617e:	d822      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006188:	d007      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800618a:	e01c      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006198:	e01e      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	3308      	adds	r3, #8
 80061a0:	2100      	movs	r1, #0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fb04 	bl	80077b0 <RCCEx_PLL2_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061ae:	e013      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	3328      	adds	r3, #40	@ 0x28
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fbab 	bl	8007914 <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10d      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061f0:	4a01      	ldr	r2, [pc, #4]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80061f6:	e005      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80061f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006210:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800621a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d03a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622a:	2b30      	cmp	r3, #48	@ 0x30
 800622c:	d01f      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800622e:	2b30      	cmp	r3, #48	@ 0x30
 8006230:	d819      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d00c      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d815      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d019      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800623e:	2b10      	cmp	r3, #16
 8006240:	d111      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006242:	4baa      	ldr	r3, [pc, #680]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006246:	4aa9      	ldr	r2, [pc, #676]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800624e:	e011      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006254:	3308      	adds	r3, #8
 8006256:	2102      	movs	r1, #2
 8006258:	4618      	mov	r0, r3
 800625a:	f001 faa9 	bl	80077b0 <RCCEx_PLL2_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800627c:	4b9b      	ldr	r3, [pc, #620]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800627e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006280:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628a:	4a98      	ldr	r2, [pc, #608]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800628c:	430b      	orrs	r3, r1
 800628e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006290:	e003      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006296:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80062a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062aa:	2300      	movs	r3, #0
 80062ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80062b4:	460b      	mov	r3, r1
 80062b6:	4313      	orrs	r3, r2
 80062b8:	d051      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c4:	d035      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80062c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ca:	d82e      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062d0:	d031      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80062d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062d6:	d828      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062dc:	d01a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e2:	d822      	bhi.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ec:	d007      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80062ee:	e01c      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f0:	4b7e      	ldr	r3, [pc, #504]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	4a7d      	ldr	r2, [pc, #500]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80062fc:	e01c      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	3308      	adds	r3, #8
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fa52 	bl	80077b0 <RCCEx_PLL2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006312:	e011      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	3328      	adds	r3, #40	@ 0x28
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f001 faf9 	bl	8007914 <RCCEx_PLL3_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006330:	e002      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006332:	bf00      	nop
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006340:	4b6a      	ldr	r3, [pc, #424]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006344:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634e:	4a67      	ldr	r2, [pc, #412]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6513      	str	r3, [r2, #80]	@ 0x50
 8006354:	e003      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800636a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800636e:	2300      	movs	r3, #0
 8006370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006374:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006378:	460b      	mov	r3, r1
 800637a:	4313      	orrs	r3, r2
 800637c:	d053      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006388:	d033      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800638a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800638e:	d82c      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006390:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006394:	d02f      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006396:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800639a:	d826      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800639c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063a0:	d02b      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 80063a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063a6:	d820      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ac:	d012      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80063ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063b2:	d81a      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d022      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d115      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c2:	3308      	adds	r3, #8
 80063c4:	2101      	movs	r1, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f9f2 	bl	80077b0 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063d2:	e015      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	3328      	adds	r3, #40	@ 0x28
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fa99 	bl	8007914 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80063e8:	e00a      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063f2:	bf00      	nop
 80063f4:	e004      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80063fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006408:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800640a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006416:	4a35      	ldr	r2, [pc, #212]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006418:	430b      	orrs	r3, r1
 800641a:	6513      	str	r3, [r2, #80]	@ 0x50
 800641c:	e003      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800643c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006440:	460b      	mov	r3, r1
 8006442:	4313      	orrs	r3, r2
 8006444:	d058      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800644e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006452:	d033      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006458:	d82c      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d02f      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006464:	d826      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800646a:	d02b      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800646c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006470:	d820      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006476:	d012      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800647c:	d81a      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d022      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006486:	d115      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	3308      	adds	r3, #8
 800648e:	2101      	movs	r1, #1
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f98d 	bl	80077b0 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800649c:	e015      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	3328      	adds	r3, #40	@ 0x28
 80064a4:	2101      	movs	r1, #1
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fa34 	bl	8007914 <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80064b2:	e00a      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064bc:	bf00      	nop
 80064be:	e004      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064c0:	bf00      	nop
 80064c2:	e002      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064c4:	bf00      	nop
 80064c6:	e000      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80064c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10e      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064d2:	4b06      	ldr	r3, [pc, #24]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064e2:	4a02      	ldr	r2, [pc, #8]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80064e8:	e006      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800650e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d037      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006522:	d00e      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006528:	d816      	bhi.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800652e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006532:	d111      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006534:	4bc4      	ldr	r3, [pc, #784]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	4ac3      	ldr	r2, [pc, #780]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800653a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800653e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006540:	e00f      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	3308      	adds	r3, #8
 8006548:	2101      	movs	r1, #1
 800654a:	4618      	mov	r0, r3
 800654c:	f001 f930 	bl	80077b0 <RCCEx_PLL2_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006556:	e004      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655e:	e000      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800656a:	4bb7      	ldr	r3, [pc, #732]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800656c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006578:	4ab3      	ldr	r2, [pc, #716]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800657a:	430b      	orrs	r3, r1
 800657c:	6513      	str	r3, [r2, #80]	@ 0x50
 800657e:	e003      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006594:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800659e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80065a2:	460b      	mov	r3, r1
 80065a4:	4313      	orrs	r3, r2
 80065a6:	d039      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d81c      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80065b2:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065c9 	.word	0x080065c9
 80065c0:	080065d7 	.word	0x080065d7
 80065c4:	080065f5 	.word	0x080065f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c8:	4b9f      	ldr	r3, [pc, #636]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	4a9e      	ldr	r2, [pc, #632]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065d4:	e00f      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	3308      	adds	r3, #8
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f8e6 	bl	80077b0 <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80065ea:	e004      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065f2:	e000      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80065f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065fe:	4b92      	ldr	r3, [pc, #584]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006602:	f023 0103 	bic.w	r1, r3, #3
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660c:	4a8e      	ldr	r2, [pc, #568]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660e:	430b      	orrs	r3, r1
 8006610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006612:	e003      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006618:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006628:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800662c:	2300      	movs	r3, #0
 800662e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006632:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	f000 8099 	beq.w	8006770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800663e:	4b83      	ldr	r3, [pc, #524]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a82      	ldr	r2, [pc, #520]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800664a:	f7fa ff55 	bl	80014f8 <HAL_GetTick>
 800664e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006652:	e00b      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006654:	f7fa ff50 	bl	80014f8 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b64      	cmp	r3, #100	@ 0x64
 8006662:	d903      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800666a:	e005      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800666c:	4b77      	ldr	r3, [pc, #476]	@ (800684c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ed      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667c:	2b00      	cmp	r3, #0
 800667e:	d173      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006680:	4b71      	ldr	r3, [pc, #452]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006682:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800668c:	4053      	eors	r3, r2
 800668e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006692:	2b00      	cmp	r3, #0
 8006694:	d015      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006696:	4b6c      	ldr	r3, [pc, #432]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800669e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a2:	4b69      	ldr	r3, [pc, #420]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a6:	4a68      	ldr	r2, [pc, #416]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ae:	4b66      	ldr	r3, [pc, #408]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b2:	4a65      	ldr	r2, [pc, #404]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066ba:	4a63      	ldr	r2, [pc, #396]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ce:	d118      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d0:	f7fa ff12 	bl	80014f8 <HAL_GetTick>
 80066d4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d8:	e00d      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fa ff0d 	bl	80014f8 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80066e4:	1ad2      	subs	r2, r2, r3
 80066e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d903      	bls.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80066f4:	e005      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f6:	4b54      	ldr	r3, [pc, #336]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0eb      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006706:	2b00      	cmp	r3, #0
 8006708:	d129      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671a:	d10e      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800671c:	4b4a      	ldr	r3, [pc, #296]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800672c:	091a      	lsrs	r2, r3, #4
 800672e:	4b48      	ldr	r3, [pc, #288]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006730:	4013      	ands	r3, r2
 8006732:	4a45      	ldr	r2, [pc, #276]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6113      	str	r3, [r2, #16]
 8006738:	e005      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800673a:	4b43      	ldr	r3, [pc, #268]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	4a42      	ldr	r2, [pc, #264]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006740:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006744:	6113      	str	r3, [r2, #16]
 8006746:	4b40      	ldr	r3, [pc, #256]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006748:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006756:	4a3c      	ldr	r2, [pc, #240]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006758:	430b      	orrs	r3, r1
 800675a:	6713      	str	r3, [r2, #112]	@ 0x70
 800675c:	e008      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800675e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006762:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006766:	e003      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 0301 	and.w	r3, r2, #1
 800677c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006786:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	f000 808f 	beq.w	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006798:	2b28      	cmp	r3, #40	@ 0x28
 800679a:	d871      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	08006889 	.word	0x08006889
 80067a8:	08006881 	.word	0x08006881
 80067ac:	08006881 	.word	0x08006881
 80067b0:	08006881 	.word	0x08006881
 80067b4:	08006881 	.word	0x08006881
 80067b8:	08006881 	.word	0x08006881
 80067bc:	08006881 	.word	0x08006881
 80067c0:	08006881 	.word	0x08006881
 80067c4:	08006855 	.word	0x08006855
 80067c8:	08006881 	.word	0x08006881
 80067cc:	08006881 	.word	0x08006881
 80067d0:	08006881 	.word	0x08006881
 80067d4:	08006881 	.word	0x08006881
 80067d8:	08006881 	.word	0x08006881
 80067dc:	08006881 	.word	0x08006881
 80067e0:	08006881 	.word	0x08006881
 80067e4:	0800686b 	.word	0x0800686b
 80067e8:	08006881 	.word	0x08006881
 80067ec:	08006881 	.word	0x08006881
 80067f0:	08006881 	.word	0x08006881
 80067f4:	08006881 	.word	0x08006881
 80067f8:	08006881 	.word	0x08006881
 80067fc:	08006881 	.word	0x08006881
 8006800:	08006881 	.word	0x08006881
 8006804:	08006889 	.word	0x08006889
 8006808:	08006881 	.word	0x08006881
 800680c:	08006881 	.word	0x08006881
 8006810:	08006881 	.word	0x08006881
 8006814:	08006881 	.word	0x08006881
 8006818:	08006881 	.word	0x08006881
 800681c:	08006881 	.word	0x08006881
 8006820:	08006881 	.word	0x08006881
 8006824:	08006889 	.word	0x08006889
 8006828:	08006881 	.word	0x08006881
 800682c:	08006881 	.word	0x08006881
 8006830:	08006881 	.word	0x08006881
 8006834:	08006881 	.word	0x08006881
 8006838:	08006881 	.word	0x08006881
 800683c:	08006881 	.word	0x08006881
 8006840:	08006881 	.word	0x08006881
 8006844:	08006889 	.word	0x08006889
 8006848:	58024400 	.word	0x58024400
 800684c:	58024800 	.word	0x58024800
 8006850:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	3308      	adds	r3, #8
 800685a:	2101      	movs	r1, #1
 800685c:	4618      	mov	r0, r3
 800685e:	f000 ffa7 	bl	80077b0 <RCCEx_PLL2_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006868:	e00f      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	2101      	movs	r1, #1
 8006872:	4618      	mov	r0, r3
 8006874:	f001 f84e 	bl	8007914 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800687e:	e004      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006886:	e000      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800688a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006892:	4bbf      	ldr	r3, [pc, #764]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068a0:	4abb      	ldr	r2, [pc, #748]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 0302 	and.w	r3, r2, #2
 80068bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	d041      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	d824      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80068da:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	0800692d 	.word	0x0800692d
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	0800690f 	.word	0x0800690f
 80068ec:	0800692d 	.word	0x0800692d
 80068f0:	0800692d 	.word	0x0800692d
 80068f4:	0800692d 	.word	0x0800692d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	3308      	adds	r3, #8
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f000 ff55 	bl	80077b0 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800690c:	e00f      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	3328      	adds	r3, #40	@ 0x28
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fffc 	bl	8007914 <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006922:	e004      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800692c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006936:	4b96      	ldr	r3, [pc, #600]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693a:	f023 0107 	bic.w	r1, r3, #7
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006944:	4a92      	ldr	r2, [pc, #584]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6553      	str	r3, [r2, #84]	@ 0x54
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 0304 	and.w	r3, r2, #4
 8006960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800696a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800696e:	460b      	mov	r3, r1
 8006970:	4313      	orrs	r3, r2
 8006972:	d044      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697c:	2b05      	cmp	r3, #5
 800697e:	d825      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069a1 	.word	0x080069a1
 8006990:	080069b7 	.word	0x080069b7
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a4:	3308      	adds	r3, #8
 80069a6:	2101      	movs	r1, #1
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 ff01 	bl	80077b0 <RCCEx_PLL2_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069b4:	e00f      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	3328      	adds	r3, #40	@ 0x28
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ffa8 	bl	8007914 <RCCEx_PLL3_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80069ca:	e004      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069d2:	e000      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80069d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069de:	4b6c      	ldr	r3, [pc, #432]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e2:	f023 0107 	bic.w	r1, r3, #7
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ee:	4a68      	ldr	r2, [pc, #416]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f002 0320 	and.w	r3, r2, #32
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d055      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a2a:	d033      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a30:	d82c      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d02f      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3c:	d826      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a42:	d02b      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006a44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a48:	d820      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a4e:	d012      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a54:	d81a      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d022      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a5e:	d115      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	3308      	adds	r3, #8
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fea1 	bl	80077b0 <RCCEx_PLL2_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a74:	e015      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	3328      	adds	r3, #40	@ 0x28
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 ff48 	bl	8007914 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a92:	e006      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a94:	bf00      	nop
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e002      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aaa:	4b39      	ldr	r3, [pc, #228]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aba:	4a35      	ldr	r2, [pc, #212]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006ad6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ae0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	d058      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006af6:	d033      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006af8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006afc:	d82c      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b02:	d02f      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b08:	d826      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b0e:	d02b      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006b10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b14:	d820      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1a:	d012      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b20:	d81a      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d022      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2a:	d115      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	3308      	adds	r3, #8
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fe3b 	bl	80077b0 <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b40:	e015      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	3328      	adds	r3, #40	@ 0x28
 8006b48:	2102      	movs	r1, #2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fee2 	bl	8007914 <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006b56:	e00a      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b5e:	e006      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b60:	bf00      	nop
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10e      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b86:	4a02      	ldr	r2, [pc, #8]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b8c:	e006      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006b8e:	bf00      	nop
 8006b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	d055      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bc4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bc8:	d033      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006bca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006bce:	d82c      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd4:	d02f      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bda:	d826      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bdc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006be0:	d02b      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006be2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006be6:	d820      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bec:	d012      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf2:	d81a      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d022      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bfc:	d115      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c02:	3308      	adds	r3, #8
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fdd2 	bl	80077b0 <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c12:	e015      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	3328      	adds	r3, #40	@ 0x28
 8006c1a:	2102      	movs	r1, #2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fe79 	bl	8007914 <RCCEx_PLL3_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c28:	e00a      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c30:	e006      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c32:	bf00      	nop
 8006c34:	e004      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c36:	bf00      	nop
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c48:	4ba0      	ldr	r3, [pc, #640]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c58:	4a9c      	ldr	r2, [pc, #624]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c5e:	e003      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f002 0308 	and.w	r3, r2, #8
 8006c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006c82:	460b      	mov	r3, r1
 8006c84:	4313      	orrs	r3, r2
 8006c86:	d01e      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c94:	d10c      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	3328      	adds	r3, #40	@ 0x28
 8006c9c:	2102      	movs	r1, #2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fe38 	bl	8007914 <RCCEx_PLL3_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006cb0:	4b86      	ldr	r3, [pc, #536]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc0:	4a82      	ldr	r2, [pc, #520]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f002 0310 	and.w	r3, r2, #16
 8006cd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cdc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	d01e      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d10c      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	3328      	adds	r3, #40	@ 0x28
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fe09 	bl	8007914 <RCCEx_PLL3_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d32:	2300      	movs	r3, #0
 8006d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d03e      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d4c:	d022      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d52:	d81b      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d5c:	d00b      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006d5e:	e015      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	3308      	adds	r3, #8
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fd21 	bl	80077b0 <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d74:	e00f      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	3328      	adds	r3, #40	@ 0x28
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fdc8 	bl	8007914 <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006d8a:	e004      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d92:	e000      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dae:	4a47      	ldr	r2, [pc, #284]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006db4:	e003      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006dca:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dcc:	2300      	movs	r3, #0
 8006dce:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d03b      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006de6:	d01f      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006de8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dec:	d818      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006df2:	d003      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006df4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006df8:	d007      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006dfa:	e011      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dfc:	4b33      	ldr	r3, [pc, #204]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	4a32      	ldr	r2, [pc, #200]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e08:	e00f      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fd7e 	bl	8007914 <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e1e:	e004      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e32:	4b26      	ldr	r3, [pc, #152]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e42:	4a22      	ldr	r2, [pc, #136]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e60:	2300      	movs	r3, #0
 8006e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e64:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d034      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7c:	d007      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006e7e:	e011      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e80:	4b12      	ldr	r3, [pc, #72]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	4a11      	ldr	r2, [pc, #68]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e8c:	e00e      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e92:	3308      	adds	r3, #8
 8006e94:	2102      	movs	r1, #2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fc8a 	bl	80077b0 <RCCEx_PLL2_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ea2:	e003      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006eb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec2:	4a02      	ldr	r2, [pc, #8]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ec8:	e006      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006eca:	bf00      	nop
 8006ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d00c      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	3328      	adds	r3, #40	@ 0x28
 8006efa:	2102      	movs	r1, #2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fd09 	bl	8007914 <RCCEx_PLL3_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f20:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d036      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f34:	d018      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d811      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	d014      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006f42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f46:	d80b      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d011      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f50:	d106      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f52:	4bb7      	ldr	r3, [pc, #732]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4ab6      	ldr	r2, [pc, #728]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f5e:	e008      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f66:	e004      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f68:	bf00      	nop
 8006f6a:	e002      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f7a:	4bad      	ldr	r3, [pc, #692]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f88:	4aa9      	ldr	r2, [pc, #676]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f8e:	e003      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006faa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fb4:	4b9e      	ldr	r3, [pc, #632]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc2:	4a9b      	ldr	r2, [pc, #620]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fe4:	4b92      	ldr	r3, [pc, #584]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ff2:	4a8f      	ldr	r2, [pc, #572]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007004:	643b      	str	r3, [r7, #64]	@ 0x40
 8007006:	2300      	movs	r3, #0
 8007008:	647b      	str	r3, [r7, #68]	@ 0x44
 800700a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007014:	4b86      	ldr	r3, [pc, #536]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	4a85      	ldr	r2, [pc, #532]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800701a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800701e:	6113      	str	r3, [r2, #16]
 8007020:	4b83      	ldr	r3, [pc, #524]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007022:	6919      	ldr	r1, [r3, #16]
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007028:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800702c:	4a80      	ldr	r2, [pc, #512]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800702e:	430b      	orrs	r3, r1
 8007030:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800703e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007044:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007048:	460b      	mov	r3, r1
 800704a:	4313      	orrs	r3, r2
 800704c:	d009      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800704e:	4b78      	ldr	r3, [pc, #480]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705c:	4a74      	ldr	r2, [pc, #464]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800705e:	430b      	orrs	r3, r1
 8007060:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007070:	2300      	movs	r3, #0
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800707e:	4b6c      	ldr	r3, [pc, #432]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	4a68      	ldr	r2, [pc, #416]	@ (8007230 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007090:	430b      	orrs	r3, r1
 8007092:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	2100      	movs	r1, #0
 800709e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	d011      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b4:	3308      	adds	r3, #8
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fb79 	bl	80077b0 <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	2100      	movs	r1, #0
 80070de:	6239      	str	r1, [r7, #32]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070ea:	460b      	mov	r3, r1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	d011      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	3308      	adds	r3, #8
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fb59 	bl	80077b0 <RCCEx_PLL2_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007110:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	2100      	movs	r1, #0
 800711e:	61b9      	str	r1, [r7, #24]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d011      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	3308      	adds	r3, #8
 8007136:	2102      	movs	r1, #2
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fb39 	bl	80077b0 <RCCEx_PLL2_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	2100      	movs	r1, #0
 800715e:	6139      	str	r1, [r7, #16]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d011      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	3328      	adds	r3, #40	@ 0x28
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fbcb 	bl	8007914 <RCCEx_PLL3_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	2100      	movs	r1, #0
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80071aa:	460b      	mov	r3, r1
 80071ac:	4313      	orrs	r3, r2
 80071ae:	d011      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	3328      	adds	r3, #40	@ 0x28
 80071b6:	2101      	movs	r1, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fbab 	bl	8007914 <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80071c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	2100      	movs	r1, #0
 80071de:	6039      	str	r1, [r7, #0]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	607b      	str	r3, [r7, #4]
 80071e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d011      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	3328      	adds	r3, #40	@ 0x28
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fb8b 	bl	8007914 <RCCEx_PLL3_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007214:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
}
 8007222:	4618      	mov	r0, r3
 8007224:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007228:	46bd      	mov	sp, r7
 800722a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722e:	bf00      	nop
 8007230:	58024400 	.word	0x58024400

08007234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007238:	f7fe fe00 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	091b      	lsrs	r3, r3, #4
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4904      	ldr	r1, [pc, #16]	@ (800725c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	58024400 	.word	0x58024400
 800725c:	0800b770 	.word	0x0800b770

08007260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	@ 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007268:	4ba1      	ldr	r3, [pc, #644]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007272:	4b9f      	ldr	r3, [pc, #636]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	0b1b      	lsrs	r3, r3, #12
 8007278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800727c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800727e:	4b9c      	ldr	r3, [pc, #624]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800728a:	4b99      	ldr	r3, [pc, #612]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728e:	08db      	lsrs	r3, r3, #3
 8007290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8111 	beq.w	80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	f000 8083 	beq.w	80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	f200 80a1 	bhi.w	8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d056      	beq.n	8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072ca:	e099      	b.n	8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072cc:	4b88      	ldr	r3, [pc, #544]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d02d      	beq.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d8:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	08db      	lsrs	r3, r3, #3
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	4a84      	ldr	r2, [pc, #528]	@ (80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b7b      	ldr	r3, [pc, #492]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007332:	e087      	b.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007346:	4b6a      	ldr	r3, [pc, #424]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007356:	ed97 6a03 	vldr	s12, [r7, #12]
 800735a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800735e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800736a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007376:	e065      	b.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738a:	4b59      	ldr	r3, [pc, #356]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	ed97 6a03 	vldr	s12, [r7, #12]
 800739e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ba:	e043      	b.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ce:	4b48      	ldr	r3, [pc, #288]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073de:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fe:	e021      	b.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b37      	ldr	r3, [pc, #220]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a03 	vldr	s12, [r7, #12]
 8007426:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007444:	4b2a      	ldr	r3, [pc, #168]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	0a5b      	lsrs	r3, r3, #9
 800744a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800745a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746a:	ee17 2a90 	vmov	r2, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007472:	4b1f      	ldr	r3, [pc, #124]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800747c:	ee07 3a90 	vmov	s15, r3
 8007480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007498:	ee17 2a90 	vmov	r2, s15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80074a0:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80074be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c6:	ee17 2a90 	vmov	r2, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ce:	e008      	b.n	80074e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	609a      	str	r2, [r3, #8]
}
 80074e2:	bf00      	nop
 80074e4:	3724      	adds	r7, #36	@ 0x24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	03d09000 	.word	0x03d09000
 80074f8:	46000000 	.word	0x46000000
 80074fc:	4c742400 	.word	0x4c742400
 8007500:	4a742400 	.word	0x4a742400
 8007504:	4af42400 	.word	0x4af42400

08007508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	@ 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007510:	4ba1      	ldr	r3, [pc, #644]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800751a:	4b9f      	ldr	r3, [pc, #636]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751e:	0d1b      	lsrs	r3, r3, #20
 8007520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007526:	4b9c      	ldr	r3, [pc, #624]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007532:	4b99      	ldr	r3, [pc, #612]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007536:	08db      	lsrs	r3, r3, #3
 8007538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8111 	beq.w	8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b02      	cmp	r3, #2
 800755a:	f000 8083 	beq.w	8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b02      	cmp	r3, #2
 8007562:	f200 80a1 	bhi.w	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d056      	beq.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007572:	e099      	b.n	80076a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007574:	4b88      	ldr	r3, [pc, #544]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02d      	beq.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007580:	4b85      	ldr	r3, [pc, #532]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	08db      	lsrs	r3, r3, #3
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	4a84      	ldr	r2, [pc, #528]	@ (800779c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80075be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075da:	e087      	b.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007602:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761e:	e065      	b.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b59      	ldr	r3, [pc, #356]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a03 	vldr	s12, [r7, #12]
 8007646:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007662:	e043      	b.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b48      	ldr	r3, [pc, #288]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a03 	vldr	s12, [r7, #12]
 800768a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a6:	e021      	b.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b37      	ldr	r3, [pc, #220]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	0a5b      	lsrs	r3, r3, #9
 80076f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007706:	edd7 6a07 	vldr	s13, [r7, #28]
 800770a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007712:	ee17 2a90 	vmov	r2, s15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800771a:	4b1f      	ldr	r3, [pc, #124]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	0c1b      	lsrs	r3, r3, #16
 8007720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007734:	edd7 6a07 	vldr	s13, [r7, #28]
 8007738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007740:	ee17 2a90 	vmov	r2, s15
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007748:	4b13      	ldr	r3, [pc, #76]	@ (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	0e1b      	lsrs	r3, r3, #24
 800774e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800775e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007762:	edd7 6a07 	vldr	s13, [r7, #28]
 8007766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776e:	ee17 2a90 	vmov	r2, s15
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007776:	e008      	b.n	800778a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	609a      	str	r2, [r3, #8]
}
 800778a:	bf00      	nop
 800778c:	3724      	adds	r7, #36	@ 0x24
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	46000000 	.word	0x46000000
 80077a4:	4c742400 	.word	0x4c742400
 80077a8:	4a742400 	.word	0x4a742400
 80077ac:	4af42400 	.word	0x4af42400

080077b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077be:	4b53      	ldr	r3, [pc, #332]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d101      	bne.n	80077ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e099      	b.n	8007902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ce:	4b4f      	ldr	r3, [pc, #316]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a4e      	ldr	r2, [pc, #312]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80077d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077da:	f7f9 fe8d 	bl	80014f8 <HAL_GetTick>
 80077de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077e0:	e008      	b.n	80077f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077e2:	f7f9 fe89 	bl	80014f8 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e086      	b.n	8007902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077f4:	4b45      	ldr	r3, [pc, #276]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f0      	bne.n	80077e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007800:	4b42      	ldr	r3, [pc, #264]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	031b      	lsls	r3, r3, #12
 800780e:	493f      	ldr	r1, [pc, #252]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	628b      	str	r3, [r1, #40]	@ 0x28
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	3b01      	subs	r3, #1
 800781a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	3b01      	subs	r3, #1
 8007824:	025b      	lsls	r3, r3, #9
 8007826:	b29b      	uxth	r3, r3
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	3b01      	subs	r3, #1
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	3b01      	subs	r3, #1
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007844:	4931      	ldr	r1, [pc, #196]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007846:	4313      	orrs	r3, r2
 8007848:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800784a:	4b30      	ldr	r3, [pc, #192]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	492d      	ldr	r1, [pc, #180]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007858:	4313      	orrs	r3, r2
 800785a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800785c:	4b2b      	ldr	r3, [pc, #172]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	f023 0220 	bic.w	r2, r3, #32
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4928      	ldr	r1, [pc, #160]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 800786a:	4313      	orrs	r3, r2
 800786c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800786e:	4b27      	ldr	r3, [pc, #156]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	4a26      	ldr	r2, [pc, #152]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007874:	f023 0310 	bic.w	r3, r3, #16
 8007878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800787a:	4b24      	ldr	r3, [pc, #144]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 800787c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800787e:	4b24      	ldr	r3, [pc, #144]	@ (8007910 <RCCEx_PLL2_Config+0x160>)
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	69d2      	ldr	r2, [r2, #28]
 8007886:	00d2      	lsls	r2, r2, #3
 8007888:	4920      	ldr	r1, [pc, #128]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800788e:	4b1f      	ldr	r3, [pc, #124]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a1e      	ldr	r2, [pc, #120]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 8007894:	f043 0310 	orr.w	r3, r3, #16
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078a0:	4b1a      	ldr	r3, [pc, #104]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	4a19      	ldr	r2, [pc, #100]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078ac:	e00f      	b.n	80078ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d106      	bne.n	80078c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078b4:	4b15      	ldr	r3, [pc, #84]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	4a14      	ldr	r2, [pc, #80]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078c0:	e005      	b.n	80078ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078c2:	4b12      	ldr	r3, [pc, #72]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4a11      	ldr	r2, [pc, #68]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a0e      	ldr	r2, [pc, #56]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078da:	f7f9 fe0d 	bl	80014f8 <HAL_GetTick>
 80078de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078e0:	e008      	b.n	80078f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078e2:	f7f9 fe09 	bl	80014f8 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <RCCEx_PLL2_Config+0x15c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
 8007910:	ffff0007 	.word	0xffff0007

08007914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007922:	4b53      	ldr	r3, [pc, #332]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d101      	bne.n	8007932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e099      	b.n	8007a66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007932:	4b4f      	ldr	r3, [pc, #316]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a4e      	ldr	r2, [pc, #312]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800793c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793e:	f7f9 fddb 	bl	80014f8 <HAL_GetTick>
 8007942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007944:	e008      	b.n	8007958 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007946:	f7f9 fdd7 	bl	80014f8 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e086      	b.n	8007a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007958:	4b45      	ldr	r3, [pc, #276]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007964:	4b42      	ldr	r3, [pc, #264]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	051b      	lsls	r3, r3, #20
 8007972:	493f      	ldr	r1, [pc, #252]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007974:	4313      	orrs	r3, r2
 8007976:	628b      	str	r3, [r1, #40]	@ 0x28
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	3b01      	subs	r3, #1
 800797e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	3b01      	subs	r3, #1
 8007988:	025b      	lsls	r3, r3, #9
 800798a:	b29b      	uxth	r3, r3
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	3b01      	subs	r3, #1
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	061b      	lsls	r3, r3, #24
 80079a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079a8:	4931      	ldr	r1, [pc, #196]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079ae:	4b30      	ldr	r3, [pc, #192]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	492d      	ldr	r1, [pc, #180]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	4928      	ldr	r1, [pc, #160]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079d2:	4b27      	ldr	r3, [pc, #156]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079de:	4b24      	ldr	r3, [pc, #144]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079e2:	4b24      	ldr	r3, [pc, #144]	@ (8007a74 <RCCEx_PLL3_Config+0x160>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	69d2      	ldr	r2, [r2, #28]
 80079ea:	00d2      	lsls	r2, r2, #3
 80079ec:	4920      	ldr	r1, [pc, #128]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 80079f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	4a19      	ldr	r2, [pc, #100]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a10:	e00f      	b.n	8007a32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d106      	bne.n	8007a26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a18:	4b15      	ldr	r3, [pc, #84]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	4a14      	ldr	r2, [pc, #80]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a24:	e005      	b.n	8007a32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a26:	4b12      	ldr	r3, [pc, #72]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2a:	4a11      	ldr	r2, [pc, #68]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a32:	4b0f      	ldr	r3, [pc, #60]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3e:	f7f9 fd5b 	bl	80014f8 <HAL_GetTick>
 8007a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a44:	e008      	b.n	8007a58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a46:	f7f9 fd57 	bl	80014f8 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d901      	bls.n	8007a58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e006      	b.n	8007a66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <RCCEx_PLL3_Config+0x15c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0f0      	beq.n	8007a46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	58024400 	.word	0x58024400
 8007a74:	ffff0007 	.word	0xffff0007

08007a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e042      	b.n	8007b10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7f9 fbcf 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2224      	movs	r2, #36	@ 0x24
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fbdc 	bl	8009280 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fd6d 	bl	80085a8 <UART_SetConfig>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e01b      	b.n	8007b10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 fc5b 	bl	80093c4 <UART_CheckIdleState>
 8007b0e:	4603      	mov	r3, r0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	@ 0x28
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2e:	2b20      	cmp	r3, #32
 8007b30:	d17b      	bne.n	8007c2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_UART_Transmit+0x26>
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e074      	b.n	8007c2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2221      	movs	r2, #33	@ 0x21
 8007b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b52:	f7f9 fcd1 	bl	80014f8 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b70:	d108      	bne.n	8007b84 <HAL_UART_Transmit+0x6c>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	e003      	b.n	8007b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b8c:	e030      	b.n	8007bf0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2180      	movs	r1, #128	@ 0x80
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f001 fcbd 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e03d      	b.n	8007c2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	3302      	adds	r3, #2
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e007      	b.n	8007bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1c8      	bne.n	8007b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2200      	movs	r2, #0
 8007c04:	2140      	movs	r1, #64	@ 0x40
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 fc86 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e006      	b.n	8007c2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b091      	sub	sp, #68	@ 0x44
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d178      	bne.n	8007d3e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_UART_Transmit_IT+0x24>
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e071      	b.n	8007d40 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2221      	movs	r2, #33	@ 0x21
 8007c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c90:	d12a      	bne.n	8007ce8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9a:	d107      	bne.n	8007cac <HAL_UART_Transmit_IT+0x78>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a29      	ldr	r2, [pc, #164]	@ (8007d4c <HAL_UART_Transmit_IT+0x118>)
 8007ca8:	679a      	str	r2, [r3, #120]	@ 0x78
 8007caa:	e002      	b.n	8007cb2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a28      	ldr	r2, [pc, #160]	@ (8007d50 <HAL_UART_Transmit_IT+0x11c>)
 8007cb0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cd2:	637a      	str	r2, [r7, #52]	@ 0x34
 8007cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e5      	bne.n	8007cb2 <HAL_UART_Transmit_IT+0x7e>
 8007ce6:	e028      	b.n	8007d3a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf0:	d107      	bne.n	8007d02 <HAL_UART_Transmit_IT+0xce>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	@ (8007d54 <HAL_UART_Transmit_IT+0x120>)
 8007cfe:	679a      	str	r2, [r3, #120]	@ 0x78
 8007d00:	e002      	b.n	8007d08 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a14      	ldr	r2, [pc, #80]	@ (8007d58 <HAL_UART_Transmit_IT+0x124>)
 8007d06:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	613b      	str	r3, [r7, #16]
   return(result);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d26:	623b      	str	r3, [r7, #32]
 8007d28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	69f9      	ldr	r1, [r7, #28]
 8007d2c:	6a3a      	ldr	r2, [r7, #32]
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e000      	b.n	8007d40 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007d3e:	2302      	movs	r3, #2
  }
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3744      	adds	r7, #68	@ 0x44
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	08009cfd 	.word	0x08009cfd
 8007d50:	08009c1d 	.word	0x08009c1d
 8007d54:	08009b5b 	.word	0x08009b5b
 8007d58:	08009aa3 	.word	0x08009aa3

08007d5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d137      	bne.n	8007de4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Receive_DMA+0x24>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e030      	b.n	8007de6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	@ (8007df0 <HAL_UART_Receive_DMA+0x94>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d01f      	beq.n	8007dd4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d018      	beq.n	8007dd4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	613b      	str	r3, [r7, #16]
   return(result);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	69f9      	ldr	r1, [r7, #28]
 8007dc6:	6a3a      	ldr	r2, [r7, #32]
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f001 fc0a 	bl	80095f4 <UART_Start_Receive_DMA>
 8007de0:	4603      	mov	r3, r0
 8007de2:	e000      	b.n	8007de6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3728      	adds	r7, #40	@ 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	58000c00 	.word	0x58000c00

08007df4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b0ba      	sub	sp, #232	@ 0xe8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e22:	4013      	ands	r3, r2
 8007e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d11b      	bne.n	8007e68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d015      	beq.n	8007e68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8377 	beq.w	800854c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
      }
      return;
 8007e66:	e371      	b.n	800854c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8123 	beq.w	80080b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e76:	4b8d      	ldr	r3, [pc, #564]	@ (80080ac <HAL_UART_IRQHandler+0x2b8>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d106      	bne.n	8007e8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007e82:	4b8b      	ldr	r3, [pc, #556]	@ (80080b0 <HAL_UART_IRQHandler+0x2bc>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8116 	beq.w	80080b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d011      	beq.n	8007ebc <HAL_UART_IRQHandler+0xc8>
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb2:	f043 0201 	orr.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d011      	beq.n	8007eec <HAL_UART_IRQHandler+0xf8>
 8007ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee2:	f043 0204 	orr.w	r2, r3, #4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d011      	beq.n	8007f1c <HAL_UART_IRQHandler+0x128>
 8007ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	f043 0202 	orr.w	r2, r3, #2
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d017      	beq.n	8007f58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f38:	4b5c      	ldr	r3, [pc, #368]	@ (80080ac <HAL_UART_IRQHandler+0x2b8>)
 8007f3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2208      	movs	r2, #8
 8007f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f4e:	f043 0208 	orr.w	r2, r3, #8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d012      	beq.n	8007f8a <HAL_UART_IRQHandler+0x196>
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 82dd 	beq.w	8008550 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d013      	beq.n	8007fca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d105      	bne.n	8007fba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fde:	2b40      	cmp	r3, #64	@ 0x40
 8007fe0:	d005      	beq.n	8007fee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fe6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d054      	beq.n	8008098 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fbe8 	bl	80097c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffe:	2b40      	cmp	r3, #64	@ 0x40
 8008000:	d146      	bne.n	8008090 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800801c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3308      	adds	r3, #8
 800802a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800802e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800803a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d9      	bne.n	8008002 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008054:	2b00      	cmp	r3, #0
 8008056:	d017      	beq.n	8008088 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800805e:	4a15      	ldr	r2, [pc, #84]	@ (80080b4 <HAL_UART_IRQHandler+0x2c0>)
 8008060:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008068:	4618      	mov	r0, r3
 800806a:	f7fa fc55 	bl	8002918 <HAL_DMA_Abort_IT>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d019      	beq.n	80080a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008082:	4610      	mov	r0, r2
 8008084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008086:	e00f      	b.n	80080a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fa77 	bl	800857c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808e:	e00b      	b.n	80080a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa73 	bl	800857c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008096:	e007      	b.n	80080a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa6f 	bl	800857c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80080a6:	e253      	b.n	8008550 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	bf00      	nop
    return;
 80080aa:	e251      	b.n	8008550 <HAL_UART_IRQHandler+0x75c>
 80080ac:	10000001 	.word	0x10000001
 80080b0:	04000120 	.word	0x04000120
 80080b4:	08009a77 	.word	0x08009a77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 81e7 	bne.w	8008490 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 81e0 	beq.w	8008490 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 81d9 	beq.w	8008490 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2210      	movs	r2, #16
 80080e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f0:	2b40      	cmp	r3, #64	@ 0x40
 80080f2:	f040 8151 	bne.w	8008398 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a96      	ldr	r2, [pc, #600]	@ (8008358 <HAL_UART_IRQHandler+0x564>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d068      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a93      	ldr	r2, [pc, #588]	@ (800835c <HAL_UART_IRQHandler+0x568>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d061      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a91      	ldr	r2, [pc, #580]	@ (8008360 <HAL_UART_IRQHandler+0x56c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d05a      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a8e      	ldr	r2, [pc, #568]	@ (8008364 <HAL_UART_IRQHandler+0x570>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d053      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a8c      	ldr	r2, [pc, #560]	@ (8008368 <HAL_UART_IRQHandler+0x574>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d04c      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a89      	ldr	r2, [pc, #548]	@ (800836c <HAL_UART_IRQHandler+0x578>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d045      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a87      	ldr	r2, [pc, #540]	@ (8008370 <HAL_UART_IRQHandler+0x57c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d03e      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a84      	ldr	r2, [pc, #528]	@ (8008374 <HAL_UART_IRQHandler+0x580>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d037      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a82      	ldr	r2, [pc, #520]	@ (8008378 <HAL_UART_IRQHandler+0x584>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d030      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a7f      	ldr	r2, [pc, #508]	@ (800837c <HAL_UART_IRQHandler+0x588>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d029      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a7d      	ldr	r2, [pc, #500]	@ (8008380 <HAL_UART_IRQHandler+0x58c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d022      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a7a      	ldr	r2, [pc, #488]	@ (8008384 <HAL_UART_IRQHandler+0x590>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01b      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a78      	ldr	r2, [pc, #480]	@ (8008388 <HAL_UART_IRQHandler+0x594>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d014      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a75      	ldr	r2, [pc, #468]	@ (800838c <HAL_UART_IRQHandler+0x598>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00d      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a73      	ldr	r2, [pc, #460]	@ (8008390 <HAL_UART_IRQHandler+0x59c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d006      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3e2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a70      	ldr	r2, [pc, #448]	@ (8008394 <HAL_UART_IRQHandler+0x5a0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d106      	bne.n	80081e4 <HAL_UART_IRQHandler+0x3f0>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	e005      	b.n	80081f0 <HAL_UART_IRQHandler+0x3fc>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 81ab 	beq.w	8008554 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008204:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008208:	429a      	cmp	r2, r3
 800820a:	f080 81a3 	bcs.w	8008554 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008214:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008224:	f000 8087 	beq.w	8008336 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800823c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008256:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800825e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800826a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1da      	bne.n	8008228 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800829a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800829e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e1      	bne.n	8008272 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e3      	bne.n	80082ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008304:	f023 0310 	bic.w	r3, r3, #16
 8008308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008316:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008318:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800831c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e4      	bne.n	80082f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008330:	4618      	mov	r0, r3
 8008332:	f7f9 ffd3 	bl	80022dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2202      	movs	r2, #2
 800833a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008348:	b29b      	uxth	r3, r3
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	b29b      	uxth	r3, r3
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f91d 	bl	8008590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008356:	e0fd      	b.n	8008554 <HAL_UART_IRQHandler+0x760>
 8008358:	40020010 	.word	0x40020010
 800835c:	40020028 	.word	0x40020028
 8008360:	40020040 	.word	0x40020040
 8008364:	40020058 	.word	0x40020058
 8008368:	40020070 	.word	0x40020070
 800836c:	40020088 	.word	0x40020088
 8008370:	400200a0 	.word	0x400200a0
 8008374:	400200b8 	.word	0x400200b8
 8008378:	40020410 	.word	0x40020410
 800837c:	40020428 	.word	0x40020428
 8008380:	40020440 	.word	0x40020440
 8008384:	40020458 	.word	0x40020458
 8008388:	40020470 	.word	0x40020470
 800838c:	40020488 	.word	0x40020488
 8008390:	400204a0 	.word	0x400204a0
 8008394:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80cf 	beq.w	8008558 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80083ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80ca 	beq.w	8008558 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e4      	bne.n	80083c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	623b      	str	r3, [r7, #32]
   return(result);
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	4b55      	ldr	r3, [pc, #340]	@ (8008564 <HAL_UART_IRQHandler+0x770>)
 800840e:	4013      	ands	r3, r2
 8008410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800841e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e3      	bne.n	80083fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	60fb      	str	r3, [r7, #12]
   return(result);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0310 	bic.w	r3, r3, #16
 800845a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	617b      	str	r3, [r7, #20]
   return(result);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e4      	bne.n	8008446 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f881 	bl	8008590 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848e:	e063      	b.n	8008558 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00e      	beq.n	80084ba <HAL_UART_IRQHandler+0x6c6>
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d008      	beq.n	80084ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fcc2 	bl	8009e3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b8:	e051      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d014      	beq.n	80084f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d03a      	beq.n	800855c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
    }
    return;
 80084ee:	e035      	b.n	800855c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <HAL_UART_IRQHandler+0x71c>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 fc6c 	bl	8009de6 <UART_EndTransmit_IT>
    return;
 800850e:	e026      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <HAL_UART_IRQHandler+0x73c>
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008520:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fc9b 	bl	8009e64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800852e:	e016      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d010      	beq.n	800855e <HAL_UART_IRQHandler+0x76a>
 800853c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008540:	2b00      	cmp	r3, #0
 8008542:	da0c      	bge.n	800855e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fc83 	bl	8009e50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800854a:	e008      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
      return;
 800854c:	bf00      	nop
 800854e:	e006      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
    return;
 8008550:	bf00      	nop
 8008552:	e004      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
      return;
 8008554:	bf00      	nop
 8008556:	e002      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
      return;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <HAL_UART_IRQHandler+0x76a>
    return;
 800855c:	bf00      	nop
  }
}
 800855e:	37e8      	adds	r7, #232	@ 0xe8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	effffffe 	.word	0xeffffffe

08008568 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085ac:	b092      	sub	sp, #72	@ 0x48
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	431a      	orrs	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4bbe      	ldr	r3, [pc, #760]	@ (80088d0 <UART_SetConfig+0x328>)
 80085d8:	4013      	ands	r3, r2
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80085e0:	430b      	orrs	r3, r1
 80085e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4ab3      	ldr	r2, [pc, #716]	@ (80088d4 <UART_SetConfig+0x32c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d004      	beq.n	8008614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008610:	4313      	orrs	r3, r2
 8008612:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	4baf      	ldr	r3, [pc, #700]	@ (80088d8 <UART_SetConfig+0x330>)
 800861c:	4013      	ands	r3, r2
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008624:	430b      	orrs	r3, r1
 8008626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	f023 010f 	bic.w	r1, r3, #15
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4aa6      	ldr	r2, [pc, #664]	@ (80088dc <UART_SetConfig+0x334>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d177      	bne.n	8008738 <UART_SetConfig+0x190>
 8008648:	4ba5      	ldr	r3, [pc, #660]	@ (80088e0 <UART_SetConfig+0x338>)
 800864a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008650:	2b28      	cmp	r3, #40	@ 0x28
 8008652:	d86d      	bhi.n	8008730 <UART_SetConfig+0x188>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <UART_SetConfig+0xb4>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008701 	.word	0x08008701
 8008660:	08008731 	.word	0x08008731
 8008664:	08008731 	.word	0x08008731
 8008668:	08008731 	.word	0x08008731
 800866c:	08008731 	.word	0x08008731
 8008670:	08008731 	.word	0x08008731
 8008674:	08008731 	.word	0x08008731
 8008678:	08008731 	.word	0x08008731
 800867c:	08008709 	.word	0x08008709
 8008680:	08008731 	.word	0x08008731
 8008684:	08008731 	.word	0x08008731
 8008688:	08008731 	.word	0x08008731
 800868c:	08008731 	.word	0x08008731
 8008690:	08008731 	.word	0x08008731
 8008694:	08008731 	.word	0x08008731
 8008698:	08008731 	.word	0x08008731
 800869c:	08008711 	.word	0x08008711
 80086a0:	08008731 	.word	0x08008731
 80086a4:	08008731 	.word	0x08008731
 80086a8:	08008731 	.word	0x08008731
 80086ac:	08008731 	.word	0x08008731
 80086b0:	08008731 	.word	0x08008731
 80086b4:	08008731 	.word	0x08008731
 80086b8:	08008731 	.word	0x08008731
 80086bc:	08008719 	.word	0x08008719
 80086c0:	08008731 	.word	0x08008731
 80086c4:	08008731 	.word	0x08008731
 80086c8:	08008731 	.word	0x08008731
 80086cc:	08008731 	.word	0x08008731
 80086d0:	08008731 	.word	0x08008731
 80086d4:	08008731 	.word	0x08008731
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008721 	.word	0x08008721
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008731 	.word	0x08008731
 80086e8:	08008731 	.word	0x08008731
 80086ec:	08008731 	.word	0x08008731
 80086f0:	08008731 	.word	0x08008731
 80086f4:	08008731 	.word	0x08008731
 80086f8:	08008731 	.word	0x08008731
 80086fc:	08008729 	.word	0x08008729
 8008700:	2301      	movs	r3, #1
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e326      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e322      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e31e      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e31a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008720:	2320      	movs	r3, #32
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e316      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008728:	2340      	movs	r3, #64	@ 0x40
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e312      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008730:	2380      	movs	r3, #128	@ 0x80
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e30e      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a69      	ldr	r2, [pc, #420]	@ (80088e4 <UART_SetConfig+0x33c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d130      	bne.n	80087a4 <UART_SetConfig+0x1fc>
 8008742:	4b67      	ldr	r3, [pc, #412]	@ (80088e0 <UART_SetConfig+0x338>)
 8008744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b05      	cmp	r3, #5
 800874c:	d826      	bhi.n	800879c <UART_SetConfig+0x1f4>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x1ac>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	0800876d 	.word	0x0800876d
 8008758:	08008775 	.word	0x08008775
 800875c:	0800877d 	.word	0x0800877d
 8008760:	08008785 	.word	0x08008785
 8008764:	0800878d 	.word	0x0800878d
 8008768:	08008795 	.word	0x08008795
 800876c:	2300      	movs	r3, #0
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e2f0      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e2ec      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e2e8      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e2e4      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800878c:	2320      	movs	r3, #32
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e2e0      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008794:	2340      	movs	r3, #64	@ 0x40
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e2dc      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e2d8      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a4f      	ldr	r2, [pc, #316]	@ (80088e8 <UART_SetConfig+0x340>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d130      	bne.n	8008810 <UART_SetConfig+0x268>
 80087ae:	4b4c      	ldr	r3, [pc, #304]	@ (80088e0 <UART_SetConfig+0x338>)
 80087b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d826      	bhi.n	8008808 <UART_SetConfig+0x260>
 80087ba:	a201      	add	r2, pc, #4	@ (adr r2, 80087c0 <UART_SetConfig+0x218>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087e9 	.word	0x080087e9
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e2ba      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e2b6      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e2b2      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e2ae      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80087f8:	2320      	movs	r3, #32
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e2aa      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008800:	2340      	movs	r3, #64	@ 0x40
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e2a6      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008808:	2380      	movs	r3, #128	@ 0x80
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e2a2      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a35      	ldr	r2, [pc, #212]	@ (80088ec <UART_SetConfig+0x344>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d130      	bne.n	800887c <UART_SetConfig+0x2d4>
 800881a:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <UART_SetConfig+0x338>)
 800881c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	2b05      	cmp	r3, #5
 8008824:	d826      	bhi.n	8008874 <UART_SetConfig+0x2cc>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0x284>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008845 	.word	0x08008845
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008855 	.word	0x08008855
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008865 	.word	0x08008865
 8008840:	0800886d 	.word	0x0800886d
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e284      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e280      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e27c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e278      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008864:	2320      	movs	r3, #32
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e274      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800886c:	2340      	movs	r3, #64	@ 0x40
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e270      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e26c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a1b      	ldr	r2, [pc, #108]	@ (80088f0 <UART_SetConfig+0x348>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d142      	bne.n	800890c <UART_SetConfig+0x364>
 8008886:	4b16      	ldr	r3, [pc, #88]	@ (80088e0 <UART_SetConfig+0x338>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b05      	cmp	r3, #5
 8008890:	d838      	bhi.n	8008904 <UART_SetConfig+0x35c>
 8008892:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <UART_SetConfig+0x2f0>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088c1 	.word	0x080088c1
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088f5 	.word	0x080088f5
 80088ac:	080088fd 	.word	0x080088fd
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e24e      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80088b8:	2304      	movs	r3, #4
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e24a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80088c0:	2308      	movs	r3, #8
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e246      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80088c8:	2310      	movs	r3, #16
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e242      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80088d0:	cfff69f3 	.word	0xcfff69f3
 80088d4:	58000c00 	.word	0x58000c00
 80088d8:	11fff4ff 	.word	0x11fff4ff
 80088dc:	40011000 	.word	0x40011000
 80088e0:	58024400 	.word	0x58024400
 80088e4:	40004400 	.word	0x40004400
 80088e8:	40004800 	.word	0x40004800
 80088ec:	40004c00 	.word	0x40004c00
 80088f0:	40005000 	.word	0x40005000
 80088f4:	2320      	movs	r3, #32
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e22c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80088fc:	2340      	movs	r3, #64	@ 0x40
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e228      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008904:	2380      	movs	r3, #128	@ 0x80
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e224      	b.n	8008d56 <UART_SetConfig+0x7ae>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4ab1      	ldr	r2, [pc, #708]	@ (8008bd8 <UART_SetConfig+0x630>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d176      	bne.n	8008a04 <UART_SetConfig+0x45c>
 8008916:	4bb1      	ldr	r3, [pc, #708]	@ (8008bdc <UART_SetConfig+0x634>)
 8008918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800891e:	2b28      	cmp	r3, #40	@ 0x28
 8008920:	d86c      	bhi.n	80089fc <UART_SetConfig+0x454>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <UART_SetConfig+0x380>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	080089cd 	.word	0x080089cd
 800892c:	080089fd 	.word	0x080089fd
 8008930:	080089fd 	.word	0x080089fd
 8008934:	080089fd 	.word	0x080089fd
 8008938:	080089fd 	.word	0x080089fd
 800893c:	080089fd 	.word	0x080089fd
 8008940:	080089fd 	.word	0x080089fd
 8008944:	080089fd 	.word	0x080089fd
 8008948:	080089d5 	.word	0x080089d5
 800894c:	080089fd 	.word	0x080089fd
 8008950:	080089fd 	.word	0x080089fd
 8008954:	080089fd 	.word	0x080089fd
 8008958:	080089fd 	.word	0x080089fd
 800895c:	080089fd 	.word	0x080089fd
 8008960:	080089fd 	.word	0x080089fd
 8008964:	080089fd 	.word	0x080089fd
 8008968:	080089dd 	.word	0x080089dd
 800896c:	080089fd 	.word	0x080089fd
 8008970:	080089fd 	.word	0x080089fd
 8008974:	080089fd 	.word	0x080089fd
 8008978:	080089fd 	.word	0x080089fd
 800897c:	080089fd 	.word	0x080089fd
 8008980:	080089fd 	.word	0x080089fd
 8008984:	080089fd 	.word	0x080089fd
 8008988:	080089e5 	.word	0x080089e5
 800898c:	080089fd 	.word	0x080089fd
 8008990:	080089fd 	.word	0x080089fd
 8008994:	080089fd 	.word	0x080089fd
 8008998:	080089fd 	.word	0x080089fd
 800899c:	080089fd 	.word	0x080089fd
 80089a0:	080089fd 	.word	0x080089fd
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	080089ed 	.word	0x080089ed
 80089ac:	080089fd 	.word	0x080089fd
 80089b0:	080089fd 	.word	0x080089fd
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	080089fd 	.word	0x080089fd
 80089c0:	080089fd 	.word	0x080089fd
 80089c4:	080089fd 	.word	0x080089fd
 80089c8:	080089f5 	.word	0x080089f5
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e1c0      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e1bc      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e1b8      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e1b4      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089ec:	2320      	movs	r3, #32
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e1b0      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089f4:	2340      	movs	r3, #64	@ 0x40
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e1ac      	b.n	8008d56 <UART_SetConfig+0x7ae>
 80089fc:	2380      	movs	r3, #128	@ 0x80
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e1a8      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a75      	ldr	r2, [pc, #468]	@ (8008be0 <UART_SetConfig+0x638>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d130      	bne.n	8008a70 <UART_SetConfig+0x4c8>
 8008a0e:	4b73      	ldr	r3, [pc, #460]	@ (8008bdc <UART_SetConfig+0x634>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d826      	bhi.n	8008a68 <UART_SetConfig+0x4c0>
 8008a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a20 <UART_SetConfig+0x478>)
 8008a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a20:	08008a39 	.word	0x08008a39
 8008a24:	08008a41 	.word	0x08008a41
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e18a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a46:	e186      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e182      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e17e      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e17a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a60:	2340      	movs	r3, #64	@ 0x40
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e176      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a68:	2380      	movs	r3, #128	@ 0x80
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e172      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a5b      	ldr	r2, [pc, #364]	@ (8008be4 <UART_SetConfig+0x63c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d130      	bne.n	8008adc <UART_SetConfig+0x534>
 8008a7a:	4b58      	ldr	r3, [pc, #352]	@ (8008bdc <UART_SetConfig+0x634>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d826      	bhi.n	8008ad4 <UART_SetConfig+0x52c>
 8008a86:	a201      	add	r2, pc, #4	@ (adr r2, 8008a8c <UART_SetConfig+0x4e4>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aa5 	.word	0x08008aa5
 8008a90:	08008aad 	.word	0x08008aad
 8008a94:	08008ab5 	.word	0x08008ab5
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ac5 	.word	0x08008ac5
 8008aa0:	08008acd 	.word	0x08008acd
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e154      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008aac:	2304      	movs	r3, #4
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e150      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e14c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008abc:	2310      	movs	r3, #16
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e148      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ac4:	2320      	movs	r3, #32
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e144      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008acc:	2340      	movs	r3, #64	@ 0x40
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e140      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e13c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a41      	ldr	r2, [pc, #260]	@ (8008be8 <UART_SetConfig+0x640>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	f040 8082 	bne.w	8008bec <UART_SetConfig+0x644>
 8008ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8008bdc <UART_SetConfig+0x634>)
 8008aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008af0:	2b28      	cmp	r3, #40	@ 0x28
 8008af2:	d86d      	bhi.n	8008bd0 <UART_SetConfig+0x628>
 8008af4:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0x554>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008bd1 	.word	0x08008bd1
 8008b04:	08008bd1 	.word	0x08008bd1
 8008b08:	08008bd1 	.word	0x08008bd1
 8008b0c:	08008bd1 	.word	0x08008bd1
 8008b10:	08008bd1 	.word	0x08008bd1
 8008b14:	08008bd1 	.word	0x08008bd1
 8008b18:	08008bd1 	.word	0x08008bd1
 8008b1c:	08008ba9 	.word	0x08008ba9
 8008b20:	08008bd1 	.word	0x08008bd1
 8008b24:	08008bd1 	.word	0x08008bd1
 8008b28:	08008bd1 	.word	0x08008bd1
 8008b2c:	08008bd1 	.word	0x08008bd1
 8008b30:	08008bd1 	.word	0x08008bd1
 8008b34:	08008bd1 	.word	0x08008bd1
 8008b38:	08008bd1 	.word	0x08008bd1
 8008b3c:	08008bb1 	.word	0x08008bb1
 8008b40:	08008bd1 	.word	0x08008bd1
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bd1 	.word	0x08008bd1
 8008b4c:	08008bd1 	.word	0x08008bd1
 8008b50:	08008bd1 	.word	0x08008bd1
 8008b54:	08008bd1 	.word	0x08008bd1
 8008b58:	08008bd1 	.word	0x08008bd1
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bd1 	.word	0x08008bd1
 8008b64:	08008bd1 	.word	0x08008bd1
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008bd1 	.word	0x08008bd1
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bd1 	.word	0x08008bd1
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bd1 	.word	0x08008bd1
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008bd1 	.word	0x08008bd1
 8008b94:	08008bd1 	.word	0x08008bd1
 8008b98:	08008bd1 	.word	0x08008bd1
 8008b9c:	08008bc9 	.word	0x08008bc9
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e0d6      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ba8:	2304      	movs	r3, #4
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e0d2      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e0ce      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bb8:	2310      	movs	r3, #16
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e0ca      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e0c6      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bc8:	2340      	movs	r3, #64	@ 0x40
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e0c2      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bd0:	2380      	movs	r3, #128	@ 0x80
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e0be      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008bd8:	40011400 	.word	0x40011400
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	40007800 	.word	0x40007800
 8008be4:	40007c00 	.word	0x40007c00
 8008be8:	40011800 	.word	0x40011800
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4aad      	ldr	r2, [pc, #692]	@ (8008ea8 <UART_SetConfig+0x900>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d176      	bne.n	8008ce4 <UART_SetConfig+0x73c>
 8008bf6:	4bad      	ldr	r3, [pc, #692]	@ (8008eac <UART_SetConfig+0x904>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bfe:	2b28      	cmp	r3, #40	@ 0x28
 8008c00:	d86c      	bhi.n	8008cdc <UART_SetConfig+0x734>
 8008c02:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <UART_SetConfig+0x660>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008cad 	.word	0x08008cad
 8008c0c:	08008cdd 	.word	0x08008cdd
 8008c10:	08008cdd 	.word	0x08008cdd
 8008c14:	08008cdd 	.word	0x08008cdd
 8008c18:	08008cdd 	.word	0x08008cdd
 8008c1c:	08008cdd 	.word	0x08008cdd
 8008c20:	08008cdd 	.word	0x08008cdd
 8008c24:	08008cdd 	.word	0x08008cdd
 8008c28:	08008cb5 	.word	0x08008cb5
 8008c2c:	08008cdd 	.word	0x08008cdd
 8008c30:	08008cdd 	.word	0x08008cdd
 8008c34:	08008cdd 	.word	0x08008cdd
 8008c38:	08008cdd 	.word	0x08008cdd
 8008c3c:	08008cdd 	.word	0x08008cdd
 8008c40:	08008cdd 	.word	0x08008cdd
 8008c44:	08008cdd 	.word	0x08008cdd
 8008c48:	08008cbd 	.word	0x08008cbd
 8008c4c:	08008cdd 	.word	0x08008cdd
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008cdd 	.word	0x08008cdd
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008cdd 	.word	0x08008cdd
 8008c60:	08008cdd 	.word	0x08008cdd
 8008c64:	08008cdd 	.word	0x08008cdd
 8008c68:	08008cc5 	.word	0x08008cc5
 8008c6c:	08008cdd 	.word	0x08008cdd
 8008c70:	08008cdd 	.word	0x08008cdd
 8008c74:	08008cdd 	.word	0x08008cdd
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008cdd 	.word	0x08008cdd
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cdd 	.word	0x08008cdd
 8008c88:	08008ccd 	.word	0x08008ccd
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008cdd 	.word	0x08008cdd
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
 8008ca8:	08008cd5 	.word	0x08008cd5
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e050      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008cb4:	2304      	movs	r3, #4
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e04c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e048      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008cc4:	2310      	movs	r3, #16
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e044      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ccc:	2320      	movs	r3, #32
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e040      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008cd4:	2340      	movs	r3, #64	@ 0x40
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e03c      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008cdc:	2380      	movs	r3, #128	@ 0x80
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e038      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a71      	ldr	r2, [pc, #452]	@ (8008eb0 <UART_SetConfig+0x908>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d130      	bne.n	8008d50 <UART_SetConfig+0x7a8>
 8008cee:	4b6f      	ldr	r3, [pc, #444]	@ (8008eac <UART_SetConfig+0x904>)
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d826      	bhi.n	8008d48 <UART_SetConfig+0x7a0>
 8008cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <UART_SetConfig+0x758>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d19 	.word	0x08008d19
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d31 	.word	0x08008d31
 8008d10:	08008d39 	.word	0x08008d39
 8008d14:	08008d41 	.word	0x08008d41
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e01a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e016      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e012      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e00e      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d38:	2320      	movs	r3, #32
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e00a      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d40:	2340      	movs	r3, #64	@ 0x40
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e006      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d48:	2380      	movs	r3, #128	@ 0x80
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e002      	b.n	8008d56 <UART_SetConfig+0x7ae>
 8008d50:	2380      	movs	r3, #128	@ 0x80
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a55      	ldr	r2, [pc, #340]	@ (8008eb0 <UART_SetConfig+0x908>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	f040 80f8 	bne.w	8008f52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	dc46      	bgt.n	8008df8 <UART_SetConfig+0x850>
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	db75      	blt.n	8008e5a <UART_SetConfig+0x8b2>
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	2b1e      	cmp	r3, #30
 8008d72:	d872      	bhi.n	8008e5a <UART_SetConfig+0x8b2>
 8008d74:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <UART_SetConfig+0x7d4>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008dff 	.word	0x08008dff
 8008d80:	08008e5b 	.word	0x08008e5b
 8008d84:	08008e07 	.word	0x08008e07
 8008d88:	08008e5b 	.word	0x08008e5b
 8008d8c:	08008e5b 	.word	0x08008e5b
 8008d90:	08008e5b 	.word	0x08008e5b
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e5b 	.word	0x08008e5b
 8008d9c:	08008e5b 	.word	0x08008e5b
 8008da0:	08008e5b 	.word	0x08008e5b
 8008da4:	08008e5b 	.word	0x08008e5b
 8008da8:	08008e5b 	.word	0x08008e5b
 8008dac:	08008e5b 	.word	0x08008e5b
 8008db0:	08008e5b 	.word	0x08008e5b
 8008db4:	08008e27 	.word	0x08008e27
 8008db8:	08008e5b 	.word	0x08008e5b
 8008dbc:	08008e5b 	.word	0x08008e5b
 8008dc0:	08008e5b 	.word	0x08008e5b
 8008dc4:	08008e5b 	.word	0x08008e5b
 8008dc8:	08008e5b 	.word	0x08008e5b
 8008dcc:	08008e5b 	.word	0x08008e5b
 8008dd0:	08008e5b 	.word	0x08008e5b
 8008dd4:	08008e5b 	.word	0x08008e5b
 8008dd8:	08008e5b 	.word	0x08008e5b
 8008ddc:	08008e5b 	.word	0x08008e5b
 8008de0:	08008e5b 	.word	0x08008e5b
 8008de4:	08008e5b 	.word	0x08008e5b
 8008de8:	08008e5b 	.word	0x08008e5b
 8008dec:	08008e5b 	.word	0x08008e5b
 8008df0:	08008e5b 	.word	0x08008e5b
 8008df4:	08008e4d 	.word	0x08008e4d
 8008df8:	2b40      	cmp	r3, #64	@ 0x40
 8008dfa:	d02a      	beq.n	8008e52 <UART_SetConfig+0x8aa>
 8008dfc:	e02d      	b.n	8008e5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dfe:	f7fe fa19 	bl	8007234 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e04:	e02f      	b.n	8008e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fa28 	bl	8007260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e14:	e027      	b.n	8008e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e16:	f107 0318 	add.w	r3, r7, #24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fb74 	bl	8007508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e24:	e01f      	b.n	8008e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e26:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <UART_SetConfig+0x904>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e32:	4b1e      	ldr	r3, [pc, #120]	@ (8008eac <UART_SetConfig+0x904>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	08db      	lsrs	r3, r3, #3
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb4 <UART_SetConfig+0x90c>)
 8008e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e44:	e00f      	b.n	8008e66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e46:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb4 <UART_SetConfig+0x90c>)
 8008e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4a:	e00c      	b.n	8008e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb8 <UART_SetConfig+0x910>)
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e50:	e009      	b.n	8008e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e58:	e005      	b.n	8008e66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81ee 	beq.w	800924a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e72:	4a12      	ldr	r2, [pc, #72]	@ (8008ebc <UART_SetConfig+0x914>)
 8008e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e80:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	4413      	add	r3, r2
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d305      	bcc.n	8008e9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d910      	bls.n	8008ec0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ea4:	e1d1      	b.n	800924a <UART_SetConfig+0xca2>
 8008ea6:	bf00      	nop
 8008ea8:	40011c00 	.word	0x40011c00
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	58000c00 	.word	0x58000c00
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
 8008ebc:	0800b788 	.word	0x0800b788
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	60fa      	str	r2, [r7, #12]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	4ac0      	ldr	r2, [pc, #768]	@ (80091d0 <UART_SetConfig+0xc28>)
 8008ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ede:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ee2:	f7f7 fa75 	bl	80003d0 <__aeabi_uldivmod>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4610      	mov	r0, r2
 8008eec:	4619      	mov	r1, r3
 8008eee:	f04f 0200 	mov.w	r2, #0
 8008ef2:	f04f 0300 	mov.w	r3, #0
 8008ef6:	020b      	lsls	r3, r1, #8
 8008ef8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008efc:	0202      	lsls	r2, r0, #8
 8008efe:	6979      	ldr	r1, [r7, #20]
 8008f00:	6849      	ldr	r1, [r1, #4]
 8008f02:	0849      	lsrs	r1, r1, #1
 8008f04:	2000      	movs	r0, #0
 8008f06:	460c      	mov	r4, r1
 8008f08:	4605      	mov	r5, r0
 8008f0a:	eb12 0804 	adds.w	r8, r2, r4
 8008f0e:	eb43 0905 	adc.w	r9, r3, r5
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	469a      	mov	sl, r3
 8008f1a:	4693      	mov	fp, r2
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fa54 	bl	80003d0 <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f36:	d308      	bcc.n	8008f4a <UART_SetConfig+0x9a2>
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f3e:	d204      	bcs.n	8008f4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f46:	60da      	str	r2, [r3, #12]
 8008f48:	e17f      	b.n	800924a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f50:	e17b      	b.n	800924a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f5a:	f040 80bd 	bne.w	80090d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008f5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	dc48      	bgt.n	8008ff8 <UART_SetConfig+0xa50>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	db7b      	blt.n	8009062 <UART_SetConfig+0xaba>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d879      	bhi.n	8009062 <UART_SetConfig+0xaba>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <UART_SetConfig+0x9cc>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fff 	.word	0x08008fff
 8008f78:	08009007 	.word	0x08009007
 8008f7c:	08009063 	.word	0x08009063
 8008f80:	08009063 	.word	0x08009063
 8008f84:	0800900f 	.word	0x0800900f
 8008f88:	08009063 	.word	0x08009063
 8008f8c:	08009063 	.word	0x08009063
 8008f90:	08009063 	.word	0x08009063
 8008f94:	0800901f 	.word	0x0800901f
 8008f98:	08009063 	.word	0x08009063
 8008f9c:	08009063 	.word	0x08009063
 8008fa0:	08009063 	.word	0x08009063
 8008fa4:	08009063 	.word	0x08009063
 8008fa8:	08009063 	.word	0x08009063
 8008fac:	08009063 	.word	0x08009063
 8008fb0:	08009063 	.word	0x08009063
 8008fb4:	0800902f 	.word	0x0800902f
 8008fb8:	08009063 	.word	0x08009063
 8008fbc:	08009063 	.word	0x08009063
 8008fc0:	08009063 	.word	0x08009063
 8008fc4:	08009063 	.word	0x08009063
 8008fc8:	08009063 	.word	0x08009063
 8008fcc:	08009063 	.word	0x08009063
 8008fd0:	08009063 	.word	0x08009063
 8008fd4:	08009063 	.word	0x08009063
 8008fd8:	08009063 	.word	0x08009063
 8008fdc:	08009063 	.word	0x08009063
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	08009063 	.word	0x08009063
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	08009063 	.word	0x08009063
 8008ff0:	08009063 	.word	0x08009063
 8008ff4:	08009055 	.word	0x08009055
 8008ff8:	2b40      	cmp	r3, #64	@ 0x40
 8008ffa:	d02e      	beq.n	800905a <UART_SetConfig+0xab2>
 8008ffc:	e031      	b.n	8009062 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ffe:	f7fc ff4d 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8009002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009004:	e033      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009006:	f7fc ff5f 	bl	8005ec8 <HAL_RCC_GetPCLK2Freq>
 800900a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800900c:	e02f      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe f924 	bl	8007260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901c:	e027      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901e:	f107 0318 	add.w	r3, r7, #24
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fa70 	bl	8007508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902c:	e01f      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800902e:	4b69      	ldr	r3, [pc, #420]	@ (80091d4 <UART_SetConfig+0xc2c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d009      	beq.n	800904e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800903a:	4b66      	ldr	r3, [pc, #408]	@ (80091d4 <UART_SetConfig+0xc2c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	4a64      	ldr	r2, [pc, #400]	@ (80091d8 <UART_SetConfig+0xc30>)
 8009046:	fa22 f303 	lsr.w	r3, r2, r3
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800904c:	e00f      	b.n	800906e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800904e:	4b62      	ldr	r3, [pc, #392]	@ (80091d8 <UART_SetConfig+0xc30>)
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009052:	e00c      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009054:	4b61      	ldr	r3, [pc, #388]	@ (80091dc <UART_SetConfig+0xc34>)
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009058:	e009      	b.n	800906e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009060:	e005      	b.n	800906e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800906c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800906e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80ea 	beq.w	800924a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	4a55      	ldr	r2, [pc, #340]	@ (80091d0 <UART_SetConfig+0xc28>)
 800907c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009080:	461a      	mov	r2, r3
 8009082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009084:	fbb3 f3f2 	udiv	r3, r3, r2
 8009088:	005a      	lsls	r2, r3, #1
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	441a      	add	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	fbb2 f3f3 	udiv	r3, r2, r3
 800909a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	2b0f      	cmp	r3, #15
 80090a0:	d916      	bls.n	80090d0 <UART_SetConfig+0xb28>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a8:	d212      	bcs.n	80090d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f023 030f 	bic.w	r3, r3, #15
 80090b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	b29a      	uxth	r2, r3
 80090c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80090c2:	4313      	orrs	r3, r2
 80090c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e0bc      	b.n	800924a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090d6:	e0b8      	b.n	800924a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090dc:	2b20      	cmp	r3, #32
 80090de:	dc4b      	bgt.n	8009178 <UART_SetConfig+0xbd0>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f2c0 8087 	blt.w	80091f4 <UART_SetConfig+0xc4c>
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	f200 8084 	bhi.w	80091f4 <UART_SetConfig+0xc4c>
 80090ec:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <UART_SetConfig+0xb4c>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	0800917f 	.word	0x0800917f
 80090f8:	08009187 	.word	0x08009187
 80090fc:	080091f5 	.word	0x080091f5
 8009100:	080091f5 	.word	0x080091f5
 8009104:	0800918f 	.word	0x0800918f
 8009108:	080091f5 	.word	0x080091f5
 800910c:	080091f5 	.word	0x080091f5
 8009110:	080091f5 	.word	0x080091f5
 8009114:	0800919f 	.word	0x0800919f
 8009118:	080091f5 	.word	0x080091f5
 800911c:	080091f5 	.word	0x080091f5
 8009120:	080091f5 	.word	0x080091f5
 8009124:	080091f5 	.word	0x080091f5
 8009128:	080091f5 	.word	0x080091f5
 800912c:	080091f5 	.word	0x080091f5
 8009130:	080091f5 	.word	0x080091f5
 8009134:	080091af 	.word	0x080091af
 8009138:	080091f5 	.word	0x080091f5
 800913c:	080091f5 	.word	0x080091f5
 8009140:	080091f5 	.word	0x080091f5
 8009144:	080091f5 	.word	0x080091f5
 8009148:	080091f5 	.word	0x080091f5
 800914c:	080091f5 	.word	0x080091f5
 8009150:	080091f5 	.word	0x080091f5
 8009154:	080091f5 	.word	0x080091f5
 8009158:	080091f5 	.word	0x080091f5
 800915c:	080091f5 	.word	0x080091f5
 8009160:	080091f5 	.word	0x080091f5
 8009164:	080091f5 	.word	0x080091f5
 8009168:	080091f5 	.word	0x080091f5
 800916c:	080091f5 	.word	0x080091f5
 8009170:	080091f5 	.word	0x080091f5
 8009174:	080091e7 	.word	0x080091e7
 8009178:	2b40      	cmp	r3, #64	@ 0x40
 800917a:	d037      	beq.n	80091ec <UART_SetConfig+0xc44>
 800917c:	e03a      	b.n	80091f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800917e:	f7fc fe8d 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8009182:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009184:	e03c      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009186:	f7fc fe9f 	bl	8005ec8 <HAL_RCC_GetPCLK2Freq>
 800918a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800918c:	e038      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800918e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f864 	bl	8007260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800919c:	e030      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800919e:	f107 0318 	add.w	r3, r7, #24
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe f9b0 	bl	8007508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ac:	e028      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ae:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <UART_SetConfig+0xc2c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d012      	beq.n	80091e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091ba:	4b06      	ldr	r3, [pc, #24]	@ (80091d4 <UART_SetConfig+0xc2c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	08db      	lsrs	r3, r3, #3
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	4a04      	ldr	r2, [pc, #16]	@ (80091d8 <UART_SetConfig+0xc30>)
 80091c6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091cc:	e018      	b.n	8009200 <UART_SetConfig+0xc58>
 80091ce:	bf00      	nop
 80091d0:	0800b788 	.word	0x0800b788
 80091d4:	58024400 	.word	0x58024400
 80091d8:	03d09000 	.word	0x03d09000
 80091dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80091e0:	4b24      	ldr	r3, [pc, #144]	@ (8009274 <UART_SetConfig+0xccc>)
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e4:	e00c      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091e6:	4b24      	ldr	r3, [pc, #144]	@ (8009278 <UART_SetConfig+0xcd0>)
 80091e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ea:	e009      	b.n	8009200 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f2:	e005      	b.n	8009200 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091fe:	bf00      	nop
    }

    if (pclk != 0U)
 8009200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d021      	beq.n	800924a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	4a1c      	ldr	r2, [pc, #112]	@ (800927c <UART_SetConfig+0xcd4>)
 800920c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009210:	461a      	mov	r2, r3
 8009212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009214:	fbb3 f2f2 	udiv	r2, r3, r2
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	441a      	add	r2, r3
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	fbb2 f3f3 	udiv	r3, r2, r3
 8009228:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	2b0f      	cmp	r3, #15
 800922e:	d909      	bls.n	8009244 <UART_SetConfig+0xc9c>
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009236:	d205      	bcs.n	8009244 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923a:	b29a      	uxth	r2, r3
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	e002      	b.n	800924a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2201      	movs	r2, #1
 800924e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2201      	movs	r2, #1
 8009256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2200      	movs	r2, #0
 800925e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2200      	movs	r2, #0
 8009264:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009266:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800926a:	4618      	mov	r0, r3
 800926c:	3748      	adds	r7, #72	@ 0x48
 800926e:	46bd      	mov	sp, r7
 8009270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009274:	03d09000 	.word	0x03d09000
 8009278:	003d0900 	.word	0x003d0900
 800927c:	0800b788 	.word	0x0800b788

08009280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00a      	beq.n	80092ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009314:	f003 0310 	and.w	r3, r3, #16
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01a      	beq.n	8009396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800937e:	d10a      	bne.n	8009396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  }
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b098      	sub	sp, #96	@ 0x60
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093d4:	f7f8 f890 	bl	80014f8 <HAL_GetTick>
 80093d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d12f      	bne.n	8009448 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093f0:	2200      	movs	r2, #0
 80093f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f88e 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d022      	beq.n	8009448 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940a:	e853 3f00 	ldrex	r3, [r3]
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009416:	653b      	str	r3, [r7, #80]	@ 0x50
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009420:	647b      	str	r3, [r7, #68]	@ 0x44
 8009422:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009428:	e841 2300 	strex	r3, r2, [r1]
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800942e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e6      	bne.n	8009402 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e063      	b.n	8009510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b04      	cmp	r3, #4
 8009454:	d149      	bne.n	80094ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009456:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800945e:	2200      	movs	r2, #0
 8009460:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f857 	bl	8009518 <UART_WaitOnFlagUntilTimeout>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d03c      	beq.n	80094ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	623b      	str	r3, [r7, #32]
   return(result);
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009490:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e6      	bne.n	8009470 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3308      	adds	r3, #8
 80094a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094c2:	61fa      	str	r2, [r7, #28]
 80094c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	69b9      	ldr	r1, [r7, #24]
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	617b      	str	r3, [r7, #20]
   return(result);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e5      	bne.n	80094a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2220      	movs	r2, #32
 80094da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e012      	b.n	8009510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3758      	adds	r7, #88	@ 0x58
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009528:	e04f      	b.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d04b      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009532:	f7f7 ffe1 	bl	80014f8 <HAL_GetTick>
 8009536:	4602      	mov	r2, r0
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	429a      	cmp	r2, r3
 8009540:	d302      	bcc.n	8009548 <UART_WaitOnFlagUntilTimeout+0x30>
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e04e      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d037      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b80      	cmp	r3, #128	@ 0x80
 800955e:	d034      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b40      	cmp	r3, #64	@ 0x40
 8009564:	d031      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b08      	cmp	r3, #8
 8009572:	d110      	bne.n	8009596 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2208      	movs	r2, #8
 800957a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f921 	bl	80097c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2208      	movs	r2, #8
 8009586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e029      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a4:	d111      	bne.n	80095ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f907 	bl	80097c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e00f      	b.n	80095ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4013      	ands	r3, r2
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	bf0c      	ite	eq
 80095da:	2301      	moveq	r3, #1
 80095dc:	2300      	movne	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d0a0      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b096      	sub	sp, #88	@ 0x58
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2222      	movs	r2, #34	@ 0x22
 800961c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009626:	2b00      	cmp	r3, #0
 8009628:	d02d      	beq.n	8009686 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009630:	4a40      	ldr	r2, [pc, #256]	@ (8009734 <UART_Start_Receive_DMA+0x140>)
 8009632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963a:	4a3f      	ldr	r2, [pc, #252]	@ (8009738 <UART_Start_Receive_DMA+0x144>)
 800963c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009644:	4a3d      	ldr	r2, [pc, #244]	@ (800973c <UART_Start_Receive_DMA+0x148>)
 8009646:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964e:	2200      	movs	r2, #0
 8009650:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3324      	adds	r3, #36	@ 0x24
 800965e:	4619      	mov	r1, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009664:	461a      	mov	r2, r3
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	f7f8 fbce 	bl	8001e08 <HAL_DMA_Start_IT>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2210      	movs	r2, #16
 8009676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e051      	b.n	800972a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d018      	beq.n	80096c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80096ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e6      	bne.n	800968e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3308      	adds	r3, #8
 80096c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	e853 3f00 	ldrex	r3, [r3]
 80096ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3308      	adds	r3, #8
 80096de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80096e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80096e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80096ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e5      	bne.n	80096c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3308      	adds	r3, #8
 80096fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	613b      	str	r3, [r7, #16]
   return(result);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009714:	623a      	str	r2, [r7, #32]
 8009716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	69f9      	ldr	r1, [r7, #28]
 800971a:	6a3a      	ldr	r2, [r7, #32]
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	61bb      	str	r3, [r7, #24]
   return(result);
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3758      	adds	r7, #88	@ 0x58
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08009891 	.word	0x08009891
 8009738:	080099b9 	.word	0x080099b9
 800973c:	080099f7 	.word	0x080099f7

08009740 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009740:	b480      	push	{r7}
 8009742:	b08f      	sub	sp, #60	@ 0x3c
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	61fb      	str	r3, [r7, #28]
   return(result);
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800975c:	637b      	str	r3, [r7, #52]	@ 0x34
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009768:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800976c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e6      	bne.n	8009748 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	60bb      	str	r3, [r7, #8]
   return(result);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009790:	633b      	str	r3, [r7, #48]	@ 0x30
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800979a:	61ba      	str	r2, [r7, #24]
 800979c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6979      	ldr	r1, [r7, #20]
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	613b      	str	r3, [r7, #16]
   return(result);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e5      	bne.n	800977a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80097b6:	bf00      	nop
 80097b8:	373c      	adds	r7, #60	@ 0x3c
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
	...

080097c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b095      	sub	sp, #84	@ 0x54
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e6      	bne.n	80097cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	61fb      	str	r3, [r7, #28]
   return(result);
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	4b1e      	ldr	r3, [pc, #120]	@ (800988c <UART_EndRxTransfer+0xc8>)
 8009812:	4013      	ands	r3, r2
 8009814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800981e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800982c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009836:	2b01      	cmp	r3, #1
 8009838:	d118      	bne.n	800986c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	60bb      	str	r3, [r7, #8]
   return(result);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f023 0310 	bic.w	r3, r3, #16
 800984e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	461a      	mov	r2, r3
 8009856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	6979      	ldr	r1, [r7, #20]
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	613b      	str	r3, [r7, #16]
   return(result);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e6      	bne.n	800983a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009880:	bf00      	nop
 8009882:	3754      	adds	r7, #84	@ 0x54
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	effffffe 	.word	0xeffffffe

08009890 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b09c      	sub	sp, #112	@ 0x70
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098a6:	d071      	beq.n	800998c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80098a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80098fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009902:	647a      	str	r2, [r7, #68]	@ 0x44
 8009904:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	623b      	str	r3, [r7, #32]
   return(result);
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800992c:	663b      	str	r3, [r7, #96]	@ 0x60
 800992e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009936:	633a      	str	r2, [r7, #48]	@ 0x30
 8009938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800993c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e5      	bne.n	8009916 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800994a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009956:	2b01      	cmp	r3, #1
 8009958:	d118      	bne.n	800998c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800995a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	60fb      	str	r3, [r7, #12]
   return(result);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0310 	bic.w	r3, r3, #16
 800996e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	69b9      	ldr	r1, [r7, #24]
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	617b      	str	r3, [r7, #20]
   return(result);
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e6      	bne.n	800995a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800998c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800998e:	2200      	movs	r2, #0
 8009990:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009996:	2b01      	cmp	r3, #1
 8009998:	d107      	bne.n	80099aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800999a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800999c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099a0:	4619      	mov	r1, r3
 80099a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099a4:	f7fe fdf4 	bl	8008590 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099a8:	e002      	b.n	80099b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80099aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099ac:	f000 fb68 	bl	800a080 <HAL_UART_RxCpltCallback>
}
 80099b0:	bf00      	nop
 80099b2:	3770      	adds	r7, #112	@ 0x70
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d109      	bne.n	80099e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099da:	085b      	lsrs	r3, r3, #1
 80099dc:	b29b      	uxth	r3, r3
 80099de:	4619      	mov	r1, r3
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f7fe fdd5 	bl	8008590 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099e6:	e002      	b.n	80099ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fe fdbd 	bl	8008568 <HAL_UART_RxHalfCpltCallback>
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b086      	sub	sp, #24
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a1e:	2b80      	cmp	r3, #128	@ 0x80
 8009a20:	d109      	bne.n	8009a36 <UART_DMAError+0x40>
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b21      	cmp	r3, #33	@ 0x21
 8009a26:	d106      	bne.n	8009a36 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009a30:	6978      	ldr	r0, [r7, #20]
 8009a32:	f7ff fe85 	bl	8009740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a40:	2b40      	cmp	r3, #64	@ 0x40
 8009a42:	d109      	bne.n	8009a58 <UART_DMAError+0x62>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b22      	cmp	r3, #34	@ 0x22
 8009a48:	d106      	bne.n	8009a58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009a52:	6978      	ldr	r0, [r7, #20]
 8009a54:	f7ff feb6 	bl	80097c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a5e:	f043 0210 	orr.w	r2, r3, #16
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a68:	6978      	ldr	r0, [r7, #20]
 8009a6a:	f7fe fd87 	bl	800857c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a6e:	bf00      	nop
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7fe fd71 	bl	800857c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b08f      	sub	sp, #60	@ 0x3c
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab0:	2b21      	cmp	r3, #33	@ 0x21
 8009ab2:	d14c      	bne.n	8009b4e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d132      	bne.n	8009b26 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ae0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e6      	bne.n	8009ac0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009b24:	e013      	b.n	8009b4e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009b4e:	bf00      	nop
 8009b50:	373c      	adds	r7, #60	@ 0x3c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b091      	sub	sp, #68	@ 0x44
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b68:	2b21      	cmp	r3, #33	@ 0x21
 8009b6a:	d151      	bne.n	8009c10 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d132      	bne.n	8009bde <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	623b      	str	r3, [r7, #32]
   return(result);
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e6      	bne.n	8009b78 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc8:	61fb      	str	r3, [r7, #28]
 8009bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	69b9      	ldr	r1, [r7, #24]
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e6      	bne.n	8009baa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009bdc:	e018      	b.n	8009c10 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf8:	1c9a      	adds	r2, r3, #2
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009c10:	bf00      	nop
 8009c12:	3744      	adds	r7, #68	@ 0x44
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b091      	sub	sp, #68	@ 0x44
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c2a:	2b21      	cmp	r3, #33	@ 0x21
 8009c2c:	d160      	bne.n	8009cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c36:	e057      	b.n	8009ce8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d133      	bne.n	8009cac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	623b      	str	r3, [r7, #32]
   return(result);
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c64:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e5      	bne.n	8009c44 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	69b9      	ldr	r1, [r7, #24]
 8009c9c:	69fa      	ldr	r2, [r7, #28]
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e6      	bne.n	8009c78 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009caa:	e021      	b.n	8009cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d013      	beq.n	8009ce2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbe:	781a      	ldrb	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ce2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009ce8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1a4      	bne.n	8009c38 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009cee:	e7ff      	b.n	8009cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009cf0:	bf00      	nop
 8009cf2:	3744      	adds	r7, #68	@ 0x44
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b091      	sub	sp, #68	@ 0x44
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d0a:	2b21      	cmp	r3, #33	@ 0x21
 8009d0c:	d165      	bne.n	8009dda <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009d14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009d16:	e05c      	b.n	8009dd2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d133      	bne.n	8009d8c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e5      	bne.n	8009d24 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	e853 3f00 	ldrex	r3, [r3]
 8009d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	61bb      	str	r3, [r7, #24]
 8009d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	6979      	ldr	r1, [r7, #20]
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	613b      	str	r3, [r7, #16]
   return(result);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e6      	bne.n	8009d58 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009d8a:	e026      	b.n	8009dda <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d018      	beq.n	8009dcc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dae:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db4:	1c9a      	adds	r2, r3, #2
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009dcc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009dd2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d19f      	bne.n	8009d18 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009dd8:	e7ff      	b.n	8009dda <UART_TxISR_16BIT_FIFOEN+0xde>
 8009dda:	bf00      	nop
 8009ddc:	3744      	adds	r7, #68	@ 0x44
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b088      	sub	sp, #32
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	61bb      	str	r3, [r7, #24]
 8009e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	6979      	ldr	r1, [r7, #20]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e6      	bne.n	8009dee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f936 	bl	800a0a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e34:	bf00      	nop
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e027      	b.n	8009ede <HAL_UARTEx_DisableFifoMode+0x66>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2224      	movs	r2, #36	@ 0x24
 8009e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0201 	bic.w	r2, r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e02d      	b.n	8009f5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2224      	movs	r2, #36	@ 0x24
 8009f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0201 	bic.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f850 	bl	8009fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e02d      	b.n	8009fda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2224      	movs	r2, #36	@ 0x24
 8009f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f022 0201 	bic.w	r2, r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f812 	bl	8009fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d108      	bne.n	800a006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a004:	e031      	b.n	800a06a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a006:	2310      	movs	r3, #16
 800a008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a00a:	2310      	movs	r3, #16
 800a00c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	0e5b      	lsrs	r3, r3, #25
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0307 	and.w	r3, r3, #7
 800a01c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	0f5b      	lsrs	r3, r3, #29
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 0307 	and.w	r3, r3, #7
 800a02c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	7b3a      	ldrb	r2, [r7, #12]
 800a032:	4911      	ldr	r1, [pc, #68]	@ (800a078 <UARTEx_SetNbDataToProcess+0x94>)
 800a034:	5c8a      	ldrb	r2, [r1, r2]
 800a036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a03a:	7b3a      	ldrb	r2, [r7, #12]
 800a03c:	490f      	ldr	r1, [pc, #60]	@ (800a07c <UARTEx_SetNbDataToProcess+0x98>)
 800a03e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a040:	fb93 f3f2 	sdiv	r3, r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	7b7a      	ldrb	r2, [r7, #13]
 800a050:	4909      	ldr	r1, [pc, #36]	@ (800a078 <UARTEx_SetNbDataToProcess+0x94>)
 800a052:	5c8a      	ldrb	r2, [r1, r2]
 800a054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a058:	7b7a      	ldrb	r2, [r7, #13]
 800a05a:	4908      	ldr	r1, [pc, #32]	@ (800a07c <UARTEx_SetNbDataToProcess+0x98>)
 800a05c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a05e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	0800b7a0 	.word	0x0800b7a0
 800a07c:	0800b7a8 	.word	0x0800b7a8

0800a080 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800a088:	4b04      	ldr	r3, [pc, #16]	@ (800a09c <HAL_UART_RxCpltCallback+0x1c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]

	fptr();
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4798      	blx	r3
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	240007b0 	.word	0x240007b0

0800a0a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]

}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a0bc:	4a04      	ldr	r2, [pc, #16]	@ (800a0d0 <uartInit+0x1c>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6013      	str	r3, [r2, #0]
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	240007b0 	.word	0x240007b0

0800a0d4 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a0dc:	2201      	movs	r2, #1
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4803      	ldr	r0, [pc, #12]	@ (800a0f0 <receptionItrOn+0x1c>)
 800a0e2:	f7fd fe3b 	bl	8007d5c <HAL_UART_Receive_DMA>
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	240006a0 	.word	0x240006a0

0800a0f4 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a0f8:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <debugRxCallback+0x28>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2b0d      	cmp	r3, #13
 800a0fe:	d102      	bne.n	800a106 <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a100:	4b07      	ldr	r3, [pc, #28]	@ (800a120 <debugRxCallback+0x2c>)
 800a102:	2201      	movs	r2, #1
 800a104:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a106:	4b07      	ldr	r3, [pc, #28]	@ (800a124 <debugRxCallback+0x30>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4904      	ldr	r1, [pc, #16]	@ (800a11c <debugRxCallback+0x28>)
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f88a 	bl	800a226 <circularBufferEnqueue>
	receptionItrOn(&data);
 800a112:	4802      	ldr	r0, [pc, #8]	@ (800a11c <debugRxCallback+0x28>)
 800a114:	f7ff ffde 	bl	800a0d4 <receptionItrOn>

}
 800a118:	bf00      	nop
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	240007b4 	.word	0x240007b4
 800a120:	240007bc 	.word	0x240007bc
 800a124:	240007b8 	.word	0x240007b8

0800a128 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800a12e:	4b0a      	ldr	r3, [pc, #40]	@ (800a158 <debugUartInit+0x30>)
 800a130:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800a132:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <debugUartInit+0x34>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2201      	movs	r2, #1
 800a138:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f839 	bl	800a1b4 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff ffb6 	bl	800a0b4 <uartInit>

	receptionItrOn(&data);
 800a148:	4805      	ldr	r0, [pc, #20]	@ (800a160 <debugUartInit+0x38>)
 800a14a:	f7ff ffc3 	bl	800a0d4 <receptionItrOn>
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	0800a0f5 	.word	0x0800a0f5
 800a15c:	240007b8 	.word	0x240007b8
 800a160:	240007b4 	.word	0x240007b4

0800a164 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800a168:	4b03      	ldr	r3, [pc, #12]	@ (800a178 <getCmdReceivedFlag+0x14>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	240007bc 	.word	0x240007bc

0800a17c <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800a186:	4a04      	ldr	r2, [pc, #16]	@ (800a198 <setCmdReceivedFlag+0x1c>)
 800a188:	79fb      	ldrb	r3, [r7, #7]
 800a18a:	7013      	strb	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	240007bc 	.word	0x240007bc

0800a19c <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
	return rxBuffer;
 800a1a0:	4b03      	ldr	r3, [pc, #12]	@ (800a1b0 <getRxBuffer+0x14>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	240007b8 	.word	0x240007b8

0800a1b4 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	807b      	strh	r3, [r7, #2]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	883a      	ldrh	r2, [r7, #0]
 800a1d8:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	887a      	ldrh	r2, [r7, #2]
 800a1de:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	883a      	ldrh	r2, [r7, #0]
 800a1e4:	fb02 f303 	mul.w	r3, r2, r3
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f8a9 	bl	800a340 <malloc>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00b      	beq.n	800a21c <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68d8      	ldr	r0, [r3, #12]
 800a208:	887b      	ldrh	r3, [r7, #2]
 800a20a:	883a      	ldrh	r2, [r7, #0]
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	461a      	mov	r2, r3
 800a212:	2100      	movs	r1, #0
 800a214:	f000 fa83 	bl	800a71e <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800a218:	2300      	movs	r3, #0
 800a21a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800a230:	2303      	movs	r3, #3
 800a232:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	889b      	ldrh	r3, [r3, #4]
 800a240:	89ba      	ldrh	r2, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d301      	bcc.n	800a24a <circularBufferEnqueue+0x24>
    {
        next = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	89ba      	ldrh	r2, [r7, #12]
 800a250:	429a      	cmp	r2, r3
 800a252:	d02b      	beq.n	800a2ac <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	8812      	ldrh	r2, [r2, #0]
 800a25c:	4611      	mov	r1, r2
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	88d2      	ldrh	r2, [r2, #6]
 800a262:	fb01 f202 	mul.w	r2, r1, r2
 800a266:	1898      	adds	r0, r3, r2
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	88db      	ldrh	r3, [r3, #6]
 800a26c:	461a      	mov	r2, r3
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	f000 fb3d 	bl	800a8ee <memcpy>
 800a274:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d017      	beq.n	800a2ac <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	89ba      	ldrh	r2, [r7, #12]
 800a280:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800a282:	2302      	movs	r3, #2
 800a284:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	889b      	ldrh	r3, [r3, #4]
 800a290:	4413      	add	r3, r2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	8852      	ldrh	r2, [r2, #2]
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	8892      	ldrh	r2, [r2, #4]
 800a29c:	fb93 f1f2 	sdiv	r1, r3, r2
 800a2a0:	fb01 f202 	mul.w	r2, r1, r2
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800a2c0:	2305      	movs	r3, #5
 800a2c2:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	885a      	ldrh	r2, [r3, #2]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d032      	beq.n	800a336 <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	885b      	ldrh	r3, [r3, #2]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	889b      	ldrh	r3, [r3, #4]
 800a2dc:	89ba      	ldrh	r2, [r7, #12]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d301      	bcc.n	800a2e6 <circularBufferDequeue+0x30>
        {
            next = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	8852      	ldrh	r2, [r2, #2]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	88d2      	ldrh	r2, [r2, #6]
 800a2f4:	fb01 f202 	mul.w	r2, r1, r2
 800a2f8:	1899      	adds	r1, r3, r2
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	88db      	ldrh	r3, [r3, #6]
 800a2fe:	461a      	mov	r2, r3
 800a300:	6838      	ldr	r0, [r7, #0]
 800a302:	f000 faf4 	bl	800a8ee <memcpy>

        cBuff->tail = next;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	89ba      	ldrh	r2, [r7, #12]
 800a30a:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	889b      	ldrh	r3, [r3, #4]
 800a316:	4413      	add	r3, r2
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	8852      	ldrh	r2, [r2, #2]
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	8892      	ldrh	r2, [r2, #4]
 800a322:	fb93 f1f2 	sdiv	r1, r3, r2
 800a326:	fb01 f202 	mul.w	r2, r1, r2
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800a332:	2304      	movs	r3, #4
 800a334:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <malloc>:
 800a340:	4b02      	ldr	r3, [pc, #8]	@ (800a34c <malloc+0xc>)
 800a342:	4601      	mov	r1, r0
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f000 b825 	b.w	800a394 <_malloc_r>
 800a34a:	bf00      	nop
 800a34c:	24000058 	.word	0x24000058

0800a350 <sbrk_aligned>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	4e0f      	ldr	r6, [pc, #60]	@ (800a390 <sbrk_aligned+0x40>)
 800a354:	460c      	mov	r4, r1
 800a356:	6831      	ldr	r1, [r6, #0]
 800a358:	4605      	mov	r5, r0
 800a35a:	b911      	cbnz	r1, 800a362 <sbrk_aligned+0x12>
 800a35c:	f000 fa78 	bl	800a850 <_sbrk_r>
 800a360:	6030      	str	r0, [r6, #0]
 800a362:	4621      	mov	r1, r4
 800a364:	4628      	mov	r0, r5
 800a366:	f000 fa73 	bl	800a850 <_sbrk_r>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	d103      	bne.n	800a376 <sbrk_aligned+0x26>
 800a36e:	f04f 34ff 	mov.w	r4, #4294967295
 800a372:	4620      	mov	r0, r4
 800a374:	bd70      	pop	{r4, r5, r6, pc}
 800a376:	1cc4      	adds	r4, r0, #3
 800a378:	f024 0403 	bic.w	r4, r4, #3
 800a37c:	42a0      	cmp	r0, r4
 800a37e:	d0f8      	beq.n	800a372 <sbrk_aligned+0x22>
 800a380:	1a21      	subs	r1, r4, r0
 800a382:	4628      	mov	r0, r5
 800a384:	f000 fa64 	bl	800a850 <_sbrk_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	d1f2      	bne.n	800a372 <sbrk_aligned+0x22>
 800a38c:	e7ef      	b.n	800a36e <sbrk_aligned+0x1e>
 800a38e:	bf00      	nop
 800a390:	240007c0 	.word	0x240007c0

0800a394 <_malloc_r>:
 800a394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a398:	1ccd      	adds	r5, r1, #3
 800a39a:	f025 0503 	bic.w	r5, r5, #3
 800a39e:	3508      	adds	r5, #8
 800a3a0:	2d0c      	cmp	r5, #12
 800a3a2:	bf38      	it	cc
 800a3a4:	250c      	movcc	r5, #12
 800a3a6:	2d00      	cmp	r5, #0
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	db01      	blt.n	800a3b0 <_malloc_r+0x1c>
 800a3ac:	42a9      	cmp	r1, r5
 800a3ae:	d904      	bls.n	800a3ba <_malloc_r+0x26>
 800a3b0:	230c      	movs	r3, #12
 800a3b2:	6033      	str	r3, [r6, #0]
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a490 <_malloc_r+0xfc>
 800a3be:	f000 f869 	bl	800a494 <__malloc_lock>
 800a3c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3c6:	461c      	mov	r4, r3
 800a3c8:	bb44      	cbnz	r4, 800a41c <_malloc_r+0x88>
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff ffbf 	bl	800a350 <sbrk_aligned>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	d158      	bne.n	800a48a <_malloc_r+0xf6>
 800a3d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a3dc:	4627      	mov	r7, r4
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	d143      	bne.n	800a46a <_malloc_r+0xd6>
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d04b      	beq.n	800a47e <_malloc_r+0xea>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	4639      	mov	r1, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	eb04 0903 	add.w	r9, r4, r3
 800a3f0:	f000 fa2e 	bl	800a850 <_sbrk_r>
 800a3f4:	4581      	cmp	r9, r0
 800a3f6:	d142      	bne.n	800a47e <_malloc_r+0xea>
 800a3f8:	6821      	ldr	r1, [r4, #0]
 800a3fa:	1a6d      	subs	r5, r5, r1
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7ff ffa6 	bl	800a350 <sbrk_aligned>
 800a404:	3001      	adds	r0, #1
 800a406:	d03a      	beq.n	800a47e <_malloc_r+0xea>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	442b      	add	r3, r5
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	f8d8 3000 	ldr.w	r3, [r8]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	bb62      	cbnz	r2, 800a470 <_malloc_r+0xdc>
 800a416:	f8c8 7000 	str.w	r7, [r8]
 800a41a:	e00f      	b.n	800a43c <_malloc_r+0xa8>
 800a41c:	6822      	ldr	r2, [r4, #0]
 800a41e:	1b52      	subs	r2, r2, r5
 800a420:	d420      	bmi.n	800a464 <_malloc_r+0xd0>
 800a422:	2a0b      	cmp	r2, #11
 800a424:	d917      	bls.n	800a456 <_malloc_r+0xc2>
 800a426:	1961      	adds	r1, r4, r5
 800a428:	42a3      	cmp	r3, r4
 800a42a:	6025      	str	r5, [r4, #0]
 800a42c:	bf18      	it	ne
 800a42e:	6059      	strne	r1, [r3, #4]
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	bf08      	it	eq
 800a434:	f8c8 1000 	streq.w	r1, [r8]
 800a438:	5162      	str	r2, [r4, r5]
 800a43a:	604b      	str	r3, [r1, #4]
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f82f 	bl	800a4a0 <__malloc_unlock>
 800a442:	f104 000b 	add.w	r0, r4, #11
 800a446:	1d23      	adds	r3, r4, #4
 800a448:	f020 0007 	bic.w	r0, r0, #7
 800a44c:	1ac2      	subs	r2, r0, r3
 800a44e:	bf1c      	itt	ne
 800a450:	1a1b      	subne	r3, r3, r0
 800a452:	50a3      	strne	r3, [r4, r2]
 800a454:	e7af      	b.n	800a3b6 <_malloc_r+0x22>
 800a456:	6862      	ldr	r2, [r4, #4]
 800a458:	42a3      	cmp	r3, r4
 800a45a:	bf0c      	ite	eq
 800a45c:	f8c8 2000 	streq.w	r2, [r8]
 800a460:	605a      	strne	r2, [r3, #4]
 800a462:	e7eb      	b.n	800a43c <_malloc_r+0xa8>
 800a464:	4623      	mov	r3, r4
 800a466:	6864      	ldr	r4, [r4, #4]
 800a468:	e7ae      	b.n	800a3c8 <_malloc_r+0x34>
 800a46a:	463c      	mov	r4, r7
 800a46c:	687f      	ldr	r7, [r7, #4]
 800a46e:	e7b6      	b.n	800a3de <_malloc_r+0x4a>
 800a470:	461a      	mov	r2, r3
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	42a3      	cmp	r3, r4
 800a476:	d1fb      	bne.n	800a470 <_malloc_r+0xdc>
 800a478:	2300      	movs	r3, #0
 800a47a:	6053      	str	r3, [r2, #4]
 800a47c:	e7de      	b.n	800a43c <_malloc_r+0xa8>
 800a47e:	230c      	movs	r3, #12
 800a480:	6033      	str	r3, [r6, #0]
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f80c 	bl	800a4a0 <__malloc_unlock>
 800a488:	e794      	b.n	800a3b4 <_malloc_r+0x20>
 800a48a:	6005      	str	r5, [r0, #0]
 800a48c:	e7d6      	b.n	800a43c <_malloc_r+0xa8>
 800a48e:	bf00      	nop
 800a490:	240007c4 	.word	0x240007c4

0800a494 <__malloc_lock>:
 800a494:	4801      	ldr	r0, [pc, #4]	@ (800a49c <__malloc_lock+0x8>)
 800a496:	f000 ba28 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800a49a:	bf00      	nop
 800a49c:	24000908 	.word	0x24000908

0800a4a0 <__malloc_unlock>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	@ (800a4a8 <__malloc_unlock+0x8>)
 800a4a2:	f000 ba23 	b.w	800a8ec <__retarget_lock_release_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	24000908 	.word	0x24000908

0800a4ac <std>:
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	b510      	push	{r4, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ba:	6083      	str	r3, [r0, #8]
 800a4bc:	8181      	strh	r1, [r0, #12]
 800a4be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4c0:	81c2      	strh	r2, [r0, #14]
 800a4c2:	6183      	str	r3, [r0, #24]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	2208      	movs	r2, #8
 800a4c8:	305c      	adds	r0, #92	@ 0x5c
 800a4ca:	f000 f928 	bl	800a71e <memset>
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <std+0x58>)
 800a4d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <std+0x5c>)
 800a4d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a50c <std+0x60>)
 800a4d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4da:	4b0d      	ldr	r3, [pc, #52]	@ (800a510 <std+0x64>)
 800a4dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4de:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <std+0x68>)
 800a4e0:	6224      	str	r4, [r4, #32]
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d006      	beq.n	800a4f4 <std+0x48>
 800a4e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4ea:	4294      	cmp	r4, r2
 800a4ec:	d002      	beq.n	800a4f4 <std+0x48>
 800a4ee:	33d0      	adds	r3, #208	@ 0xd0
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d105      	bne.n	800a500 <std+0x54>
 800a4f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fc:	f000 b9f4 	b.w	800a8e8 <__retarget_lock_init_recursive>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	bf00      	nop
 800a504:	0800a699 	.word	0x0800a699
 800a508:	0800a6bb 	.word	0x0800a6bb
 800a50c:	0800a6f3 	.word	0x0800a6f3
 800a510:	0800a717 	.word	0x0800a717
 800a514:	240007c8 	.word	0x240007c8

0800a518 <stdio_exit_handler>:
 800a518:	4a02      	ldr	r2, [pc, #8]	@ (800a524 <stdio_exit_handler+0xc>)
 800a51a:	4903      	ldr	r1, [pc, #12]	@ (800a528 <stdio_exit_handler+0x10>)
 800a51c:	4803      	ldr	r0, [pc, #12]	@ (800a52c <stdio_exit_handler+0x14>)
 800a51e:	f000 b869 	b.w	800a5f4 <_fwalk_sglue>
 800a522:	bf00      	nop
 800a524:	2400004c 	.word	0x2400004c
 800a528:	0800b0b1 	.word	0x0800b0b1
 800a52c:	2400005c 	.word	0x2400005c

0800a530 <cleanup_stdio>:
 800a530:	6841      	ldr	r1, [r0, #4]
 800a532:	4b0c      	ldr	r3, [pc, #48]	@ (800a564 <cleanup_stdio+0x34>)
 800a534:	4299      	cmp	r1, r3
 800a536:	b510      	push	{r4, lr}
 800a538:	4604      	mov	r4, r0
 800a53a:	d001      	beq.n	800a540 <cleanup_stdio+0x10>
 800a53c:	f000 fdb8 	bl	800b0b0 <_fflush_r>
 800a540:	68a1      	ldr	r1, [r4, #8]
 800a542:	4b09      	ldr	r3, [pc, #36]	@ (800a568 <cleanup_stdio+0x38>)
 800a544:	4299      	cmp	r1, r3
 800a546:	d002      	beq.n	800a54e <cleanup_stdio+0x1e>
 800a548:	4620      	mov	r0, r4
 800a54a:	f000 fdb1 	bl	800b0b0 <_fflush_r>
 800a54e:	68e1      	ldr	r1, [r4, #12]
 800a550:	4b06      	ldr	r3, [pc, #24]	@ (800a56c <cleanup_stdio+0x3c>)
 800a552:	4299      	cmp	r1, r3
 800a554:	d004      	beq.n	800a560 <cleanup_stdio+0x30>
 800a556:	4620      	mov	r0, r4
 800a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55c:	f000 bda8 	b.w	800b0b0 <_fflush_r>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	240007c8 	.word	0x240007c8
 800a568:	24000830 	.word	0x24000830
 800a56c:	24000898 	.word	0x24000898

0800a570 <global_stdio_init.part.0>:
 800a570:	b510      	push	{r4, lr}
 800a572:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a0 <global_stdio_init.part.0+0x30>)
 800a574:	4c0b      	ldr	r4, [pc, #44]	@ (800a5a4 <global_stdio_init.part.0+0x34>)
 800a576:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a8 <global_stdio_init.part.0+0x38>)
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	4620      	mov	r0, r4
 800a57c:	2200      	movs	r2, #0
 800a57e:	2104      	movs	r1, #4
 800a580:	f7ff ff94 	bl	800a4ac <std>
 800a584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a588:	2201      	movs	r2, #1
 800a58a:	2109      	movs	r1, #9
 800a58c:	f7ff ff8e 	bl	800a4ac <std>
 800a590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a594:	2202      	movs	r2, #2
 800a596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a59a:	2112      	movs	r1, #18
 800a59c:	f7ff bf86 	b.w	800a4ac <std>
 800a5a0:	24000900 	.word	0x24000900
 800a5a4:	240007c8 	.word	0x240007c8
 800a5a8:	0800a519 	.word	0x0800a519

0800a5ac <__sfp_lock_acquire>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	@ (800a5b4 <__sfp_lock_acquire+0x8>)
 800a5ae:	f000 b99c 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	24000909 	.word	0x24000909

0800a5b8 <__sfp_lock_release>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	@ (800a5c0 <__sfp_lock_release+0x8>)
 800a5ba:	f000 b997 	b.w	800a8ec <__retarget_lock_release_recursive>
 800a5be:	bf00      	nop
 800a5c0:	24000909 	.word	0x24000909

0800a5c4 <__sinit>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	f7ff fff0 	bl	800a5ac <__sfp_lock_acquire>
 800a5cc:	6a23      	ldr	r3, [r4, #32]
 800a5ce:	b11b      	cbz	r3, 800a5d8 <__sinit+0x14>
 800a5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d4:	f7ff bff0 	b.w	800a5b8 <__sfp_lock_release>
 800a5d8:	4b04      	ldr	r3, [pc, #16]	@ (800a5ec <__sinit+0x28>)
 800a5da:	6223      	str	r3, [r4, #32]
 800a5dc:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <__sinit+0x2c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1f5      	bne.n	800a5d0 <__sinit+0xc>
 800a5e4:	f7ff ffc4 	bl	800a570 <global_stdio_init.part.0>
 800a5e8:	e7f2      	b.n	800a5d0 <__sinit+0xc>
 800a5ea:	bf00      	nop
 800a5ec:	0800a531 	.word	0x0800a531
 800a5f0:	24000900 	.word	0x24000900

0800a5f4 <_fwalk_sglue>:
 800a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	4688      	mov	r8, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	2600      	movs	r6, #0
 800a600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a604:	f1b9 0901 	subs.w	r9, r9, #1
 800a608:	d505      	bpl.n	800a616 <_fwalk_sglue+0x22>
 800a60a:	6824      	ldr	r4, [r4, #0]
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	d1f7      	bne.n	800a600 <_fwalk_sglue+0xc>
 800a610:	4630      	mov	r0, r6
 800a612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d907      	bls.n	800a62c <_fwalk_sglue+0x38>
 800a61c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a620:	3301      	adds	r3, #1
 800a622:	d003      	beq.n	800a62c <_fwalk_sglue+0x38>
 800a624:	4629      	mov	r1, r5
 800a626:	4638      	mov	r0, r7
 800a628:	47c0      	blx	r8
 800a62a:	4306      	orrs	r6, r0
 800a62c:	3568      	adds	r5, #104	@ 0x68
 800a62e:	e7e9      	b.n	800a604 <_fwalk_sglue+0x10>

0800a630 <sniprintf>:
 800a630:	b40c      	push	{r2, r3}
 800a632:	b530      	push	{r4, r5, lr}
 800a634:	4b17      	ldr	r3, [pc, #92]	@ (800a694 <sniprintf+0x64>)
 800a636:	1e0c      	subs	r4, r1, #0
 800a638:	681d      	ldr	r5, [r3, #0]
 800a63a:	b09d      	sub	sp, #116	@ 0x74
 800a63c:	da08      	bge.n	800a650 <sniprintf+0x20>
 800a63e:	238b      	movs	r3, #139	@ 0x8b
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	f04f 30ff 	mov.w	r0, #4294967295
 800a646:	b01d      	add	sp, #116	@ 0x74
 800a648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a64c:	b002      	add	sp, #8
 800a64e:	4770      	bx	lr
 800a650:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a654:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a658:	bf14      	ite	ne
 800a65a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a65e:	4623      	moveq	r3, r4
 800a660:	9304      	str	r3, [sp, #16]
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a668:	9002      	str	r0, [sp, #8]
 800a66a:	9006      	str	r0, [sp, #24]
 800a66c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a670:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a672:	ab21      	add	r3, sp, #132	@ 0x84
 800a674:	a902      	add	r1, sp, #8
 800a676:	4628      	mov	r0, r5
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f000 fa0b 	bl	800aa94 <_svfiprintf_r>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	bfbc      	itt	lt
 800a682:	238b      	movlt	r3, #139	@ 0x8b
 800a684:	602b      	strlt	r3, [r5, #0]
 800a686:	2c00      	cmp	r4, #0
 800a688:	d0dd      	beq.n	800a646 <sniprintf+0x16>
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
 800a690:	e7d9      	b.n	800a646 <sniprintf+0x16>
 800a692:	bf00      	nop
 800a694:	24000058 	.word	0x24000058

0800a698 <__sread>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	460c      	mov	r4, r1
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	f000 f8c4 	bl	800a82c <_read_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	bfab      	itete	ge
 800a6a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a6ac:	181b      	addge	r3, r3, r0
 800a6ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6b2:	bfac      	ite	ge
 800a6b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6b6:	81a3      	strhlt	r3, [r4, #12]
 800a6b8:	bd10      	pop	{r4, pc}

0800a6ba <__swrite>:
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	461f      	mov	r7, r3
 800a6c0:	898b      	ldrh	r3, [r1, #12]
 800a6c2:	05db      	lsls	r3, r3, #23
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	d505      	bpl.n	800a6d8 <__swrite+0x1e>
 800a6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f000 f898 	bl	800a808 <_lseek_r>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	f000 b8bf 	b.w	800a870 <_write_r>

0800a6f2 <__sseek>:
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fa:	f000 f885 	bl	800a808 <_lseek_r>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	bf15      	itete	ne
 800a704:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a70a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a70e:	81a3      	strheq	r3, [r4, #12]
 800a710:	bf18      	it	ne
 800a712:	81a3      	strhne	r3, [r4, #12]
 800a714:	bd10      	pop	{r4, pc}

0800a716 <__sclose>:
 800a716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71a:	f000 b865 	b.w	800a7e8 <_close_r>

0800a71e <memset>:
 800a71e:	4402      	add	r2, r0
 800a720:	4603      	mov	r3, r0
 800a722:	4293      	cmp	r3, r2
 800a724:	d100      	bne.n	800a728 <memset+0xa>
 800a726:	4770      	bx	lr
 800a728:	f803 1b01 	strb.w	r1, [r3], #1
 800a72c:	e7f9      	b.n	800a722 <memset+0x4>
	...

0800a730 <strtok>:
 800a730:	4b16      	ldr	r3, [pc, #88]	@ (800a78c <strtok+0x5c>)
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	681f      	ldr	r7, [r3, #0]
 800a738:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a73a:	4605      	mov	r5, r0
 800a73c:	460e      	mov	r6, r1
 800a73e:	b9ec      	cbnz	r4, 800a77c <strtok+0x4c>
 800a740:	2050      	movs	r0, #80	@ 0x50
 800a742:	f7ff fdfd 	bl	800a340 <malloc>
 800a746:	4602      	mov	r2, r0
 800a748:	6478      	str	r0, [r7, #68]	@ 0x44
 800a74a:	b920      	cbnz	r0, 800a756 <strtok+0x26>
 800a74c:	4b10      	ldr	r3, [pc, #64]	@ (800a790 <strtok+0x60>)
 800a74e:	4811      	ldr	r0, [pc, #68]	@ (800a794 <strtok+0x64>)
 800a750:	215b      	movs	r1, #91	@ 0x5b
 800a752:	f000 f8db 	bl	800a90c <__assert_func>
 800a756:	e9c0 4400 	strd	r4, r4, [r0]
 800a75a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a75e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a762:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a766:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a76a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a76e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a772:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a776:	6184      	str	r4, [r0, #24]
 800a778:	7704      	strb	r4, [r0, #28]
 800a77a:	6244      	str	r4, [r0, #36]	@ 0x24
 800a77c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	2301      	movs	r3, #1
 800a784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	f000 b806 	b.w	800a798 <__strtok_r>
 800a78c:	24000058 	.word	0x24000058
 800a790:	0800b7b0 	.word	0x0800b7b0
 800a794:	0800b7c7 	.word	0x0800b7c7

0800a798 <__strtok_r>:
 800a798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	b908      	cbnz	r0, 800a7a2 <__strtok_r+0xa>
 800a79e:	6814      	ldr	r4, [r2, #0]
 800a7a0:	b144      	cbz	r4, 800a7b4 <__strtok_r+0x1c>
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7ae:	b91e      	cbnz	r6, 800a7b8 <__strtok_r+0x20>
 800a7b0:	b965      	cbnz	r5, 800a7cc <__strtok_r+0x34>
 800a7b2:	6015      	str	r5, [r2, #0]
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e005      	b.n	800a7c4 <__strtok_r+0x2c>
 800a7b8:	42b5      	cmp	r5, r6
 800a7ba:	d1f6      	bne.n	800a7aa <__strtok_r+0x12>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f0      	bne.n	800a7a2 <__strtok_r+0xa>
 800a7c0:	6014      	str	r4, [r2, #0]
 800a7c2:	7003      	strb	r3, [r0, #0]
 800a7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c6:	461c      	mov	r4, r3
 800a7c8:	e00c      	b.n	800a7e4 <__strtok_r+0x4c>
 800a7ca:	b915      	cbnz	r5, 800a7d2 <__strtok_r+0x3a>
 800a7cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a7d6:	42ab      	cmp	r3, r5
 800a7d8:	d1f7      	bne.n	800a7ca <__strtok_r+0x32>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f3      	beq.n	800a7c6 <__strtok_r+0x2e>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a7e4:	6014      	str	r4, [r2, #0]
 800a7e6:	e7ed      	b.n	800a7c4 <__strtok_r+0x2c>

0800a7e8 <_close_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	@ (800a804 <_close_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 fbf6 	bl	8000fe4 <_close>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_close_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_close_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	24000904 	.word	0x24000904

0800a808 <_lseek_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	@ (800a828 <_lseek_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f6 fc0b 	bl	8001032 <_lseek>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_lseek_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_lseek_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	24000904 	.word	0x24000904

0800a82c <_read_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	@ (800a84c <_read_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f6 fb99 	bl	8000f72 <_read>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_read_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_read_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	24000904 	.word	0x24000904

0800a850 <_sbrk_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d06      	ldr	r5, [pc, #24]	@ (800a86c <_sbrk_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f6 fbf6 	bl	800104c <_sbrk>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_sbrk_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_sbrk_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	24000904 	.word	0x24000904

0800a870 <_write_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	@ (800a890 <_write_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f6 fb94 	bl	8000fac <_write>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_write_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_write_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	24000904 	.word	0x24000904

0800a894 <__errno>:
 800a894:	4b01      	ldr	r3, [pc, #4]	@ (800a89c <__errno+0x8>)
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	24000058 	.word	0x24000058

0800a8a0 <__libc_init_array>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a8d8 <__libc_init_array+0x38>)
 800a8a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a8dc <__libc_init_array+0x3c>)
 800a8a6:	1b64      	subs	r4, r4, r5
 800a8a8:	10a4      	asrs	r4, r4, #2
 800a8aa:	2600      	movs	r6, #0
 800a8ac:	42a6      	cmp	r6, r4
 800a8ae:	d109      	bne.n	800a8c4 <__libc_init_array+0x24>
 800a8b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8e0 <__libc_init_array+0x40>)
 800a8b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8e4 <__libc_init_array+0x44>)
 800a8b4:	f000 ff2a 	bl	800b70c <_init>
 800a8b8:	1b64      	subs	r4, r4, r5
 800a8ba:	10a4      	asrs	r4, r4, #2
 800a8bc:	2600      	movs	r6, #0
 800a8be:	42a6      	cmp	r6, r4
 800a8c0:	d105      	bne.n	800a8ce <__libc_init_array+0x2e>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c8:	4798      	blx	r3
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7ee      	b.n	800a8ac <__libc_init_array+0xc>
 800a8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d2:	4798      	blx	r3
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	e7f2      	b.n	800a8be <__libc_init_array+0x1e>
 800a8d8:	0800b898 	.word	0x0800b898
 800a8dc:	0800b898 	.word	0x0800b898
 800a8e0:	0800b898 	.word	0x0800b898
 800a8e4:	0800b89c 	.word	0x0800b89c

0800a8e8 <__retarget_lock_init_recursive>:
 800a8e8:	4770      	bx	lr

0800a8ea <__retarget_lock_acquire_recursive>:
 800a8ea:	4770      	bx	lr

0800a8ec <__retarget_lock_release_recursive>:
 800a8ec:	4770      	bx	lr

0800a8ee <memcpy>:
 800a8ee:	440a      	add	r2, r1
 800a8f0:	4291      	cmp	r1, r2
 800a8f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f6:	d100      	bne.n	800a8fa <memcpy+0xc>
 800a8f8:	4770      	bx	lr
 800a8fa:	b510      	push	{r4, lr}
 800a8fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a900:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a904:	4291      	cmp	r1, r2
 800a906:	d1f9      	bne.n	800a8fc <memcpy+0xe>
 800a908:	bd10      	pop	{r4, pc}
	...

0800a90c <__assert_func>:
 800a90c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a90e:	4614      	mov	r4, r2
 800a910:	461a      	mov	r2, r3
 800a912:	4b09      	ldr	r3, [pc, #36]	@ (800a938 <__assert_func+0x2c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4605      	mov	r5, r0
 800a918:	68d8      	ldr	r0, [r3, #12]
 800a91a:	b954      	cbnz	r4, 800a932 <__assert_func+0x26>
 800a91c:	4b07      	ldr	r3, [pc, #28]	@ (800a93c <__assert_func+0x30>)
 800a91e:	461c      	mov	r4, r3
 800a920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a924:	9100      	str	r1, [sp, #0]
 800a926:	462b      	mov	r3, r5
 800a928:	4905      	ldr	r1, [pc, #20]	@ (800a940 <__assert_func+0x34>)
 800a92a:	f000 fbe9 	bl	800b100 <fiprintf>
 800a92e:	f000 fc13 	bl	800b158 <abort>
 800a932:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <__assert_func+0x38>)
 800a934:	e7f4      	b.n	800a920 <__assert_func+0x14>
 800a936:	bf00      	nop
 800a938:	24000058 	.word	0x24000058
 800a93c:	0800b85c 	.word	0x0800b85c
 800a940:	0800b82e 	.word	0x0800b82e
 800a944:	0800b821 	.word	0x0800b821

0800a948 <_free_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4605      	mov	r5, r0
 800a94c:	2900      	cmp	r1, #0
 800a94e:	d041      	beq.n	800a9d4 <_free_r+0x8c>
 800a950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a954:	1f0c      	subs	r4, r1, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	bfb8      	it	lt
 800a95a:	18e4      	addlt	r4, r4, r3
 800a95c:	f7ff fd9a 	bl	800a494 <__malloc_lock>
 800a960:	4a1d      	ldr	r2, [pc, #116]	@ (800a9d8 <_free_r+0x90>)
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	b933      	cbnz	r3, 800a974 <_free_r+0x2c>
 800a966:	6063      	str	r3, [r4, #4]
 800a968:	6014      	str	r4, [r2, #0]
 800a96a:	4628      	mov	r0, r5
 800a96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a970:	f7ff bd96 	b.w	800a4a0 <__malloc_unlock>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d908      	bls.n	800a98a <_free_r+0x42>
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	1821      	adds	r1, r4, r0
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf01      	itttt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	1809      	addeq	r1, r1, r0
 800a986:	6021      	streq	r1, [r4, #0]
 800a988:	e7ed      	b.n	800a966 <_free_r+0x1e>
 800a98a:	461a      	mov	r2, r3
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	b10b      	cbz	r3, 800a994 <_free_r+0x4c>
 800a990:	42a3      	cmp	r3, r4
 800a992:	d9fa      	bls.n	800a98a <_free_r+0x42>
 800a994:	6811      	ldr	r1, [r2, #0]
 800a996:	1850      	adds	r0, r2, r1
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d10b      	bne.n	800a9b4 <_free_r+0x6c>
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	4401      	add	r1, r0
 800a9a0:	1850      	adds	r0, r2, r1
 800a9a2:	4283      	cmp	r3, r0
 800a9a4:	6011      	str	r1, [r2, #0]
 800a9a6:	d1e0      	bne.n	800a96a <_free_r+0x22>
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	6053      	str	r3, [r2, #4]
 800a9ae:	4408      	add	r0, r1
 800a9b0:	6010      	str	r0, [r2, #0]
 800a9b2:	e7da      	b.n	800a96a <_free_r+0x22>
 800a9b4:	d902      	bls.n	800a9bc <_free_r+0x74>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	e7d6      	b.n	800a96a <_free_r+0x22>
 800a9bc:	6820      	ldr	r0, [r4, #0]
 800a9be:	1821      	adds	r1, r4, r0
 800a9c0:	428b      	cmp	r3, r1
 800a9c2:	bf04      	itt	eq
 800a9c4:	6819      	ldreq	r1, [r3, #0]
 800a9c6:	685b      	ldreq	r3, [r3, #4]
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	bf04      	itt	eq
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	6054      	str	r4, [r2, #4]
 800a9d2:	e7ca      	b.n	800a96a <_free_r+0x22>
 800a9d4:	bd38      	pop	{r3, r4, r5, pc}
 800a9d6:	bf00      	nop
 800a9d8:	240007c4 	.word	0x240007c4

0800a9dc <__ssputs_r>:
 800a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	688e      	ldr	r6, [r1, #8]
 800a9e2:	461f      	mov	r7, r3
 800a9e4:	42be      	cmp	r6, r7
 800a9e6:	680b      	ldr	r3, [r1, #0]
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	d82d      	bhi.n	800aa4c <__ssputs_r+0x70>
 800a9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9f8:	d026      	beq.n	800aa48 <__ssputs_r+0x6c>
 800a9fa:	6965      	ldr	r5, [r4, #20]
 800a9fc:	6909      	ldr	r1, [r1, #16]
 800a9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa02:	eba3 0901 	sub.w	r9, r3, r1
 800aa06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa0a:	1c7b      	adds	r3, r7, #1
 800aa0c:	444b      	add	r3, r9
 800aa0e:	106d      	asrs	r5, r5, #1
 800aa10:	429d      	cmp	r5, r3
 800aa12:	bf38      	it	cc
 800aa14:	461d      	movcc	r5, r3
 800aa16:	0553      	lsls	r3, r2, #21
 800aa18:	d527      	bpl.n	800aa6a <__ssputs_r+0x8e>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7ff fcba 	bl	800a394 <_malloc_r>
 800aa20:	4606      	mov	r6, r0
 800aa22:	b360      	cbz	r0, 800aa7e <__ssputs_r+0xa2>
 800aa24:	6921      	ldr	r1, [r4, #16]
 800aa26:	464a      	mov	r2, r9
 800aa28:	f7ff ff61 	bl	800a8ee <memcpy>
 800aa2c:	89a3      	ldrh	r3, [r4, #12]
 800aa2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	6126      	str	r6, [r4, #16]
 800aa3a:	6165      	str	r5, [r4, #20]
 800aa3c:	444e      	add	r6, r9
 800aa3e:	eba5 0509 	sub.w	r5, r5, r9
 800aa42:	6026      	str	r6, [r4, #0]
 800aa44:	60a5      	str	r5, [r4, #8]
 800aa46:	463e      	mov	r6, r7
 800aa48:	42be      	cmp	r6, r7
 800aa4a:	d900      	bls.n	800aa4e <__ssputs_r+0x72>
 800aa4c:	463e      	mov	r6, r7
 800aa4e:	6820      	ldr	r0, [r4, #0]
 800aa50:	4632      	mov	r2, r6
 800aa52:	4641      	mov	r1, r8
 800aa54:	f000 fb66 	bl	800b124 <memmove>
 800aa58:	68a3      	ldr	r3, [r4, #8]
 800aa5a:	1b9b      	subs	r3, r3, r6
 800aa5c:	60a3      	str	r3, [r4, #8]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	4433      	add	r3, r6
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	2000      	movs	r0, #0
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	f000 fb7b 	bl	800b166 <_realloc_r>
 800aa70:	4606      	mov	r6, r0
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d1e0      	bne.n	800aa38 <__ssputs_r+0x5c>
 800aa76:	6921      	ldr	r1, [r4, #16]
 800aa78:	4650      	mov	r0, sl
 800aa7a:	f7ff ff65 	bl	800a948 <_free_r>
 800aa7e:	230c      	movs	r3, #12
 800aa80:	f8ca 3000 	str.w	r3, [sl]
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa8a:	81a3      	strh	r3, [r4, #12]
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e7e9      	b.n	800aa66 <__ssputs_r+0x8a>
	...

0800aa94 <_svfiprintf_r>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	4698      	mov	r8, r3
 800aa9a:	898b      	ldrh	r3, [r1, #12]
 800aa9c:	061b      	lsls	r3, r3, #24
 800aa9e:	b09d      	sub	sp, #116	@ 0x74
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	4614      	mov	r4, r2
 800aaa6:	d510      	bpl.n	800aaca <_svfiprintf_r+0x36>
 800aaa8:	690b      	ldr	r3, [r1, #16]
 800aaaa:	b973      	cbnz	r3, 800aaca <_svfiprintf_r+0x36>
 800aaac:	2140      	movs	r1, #64	@ 0x40
 800aaae:	f7ff fc71 	bl	800a394 <_malloc_r>
 800aab2:	6028      	str	r0, [r5, #0]
 800aab4:	6128      	str	r0, [r5, #16]
 800aab6:	b930      	cbnz	r0, 800aac6 <_svfiprintf_r+0x32>
 800aab8:	230c      	movs	r3, #12
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	b01d      	add	sp, #116	@ 0x74
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	2340      	movs	r3, #64	@ 0x40
 800aac8:	616b      	str	r3, [r5, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aace:	2320      	movs	r3, #32
 800aad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad8:	2330      	movs	r3, #48	@ 0x30
 800aada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac78 <_svfiprintf_r+0x1e4>
 800aade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aae2:	f04f 0901 	mov.w	r9, #1
 800aae6:	4623      	mov	r3, r4
 800aae8:	469a      	mov	sl, r3
 800aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaee:	b10a      	cbz	r2, 800aaf4 <_svfiprintf_r+0x60>
 800aaf0:	2a25      	cmp	r2, #37	@ 0x25
 800aaf2:	d1f9      	bne.n	800aae8 <_svfiprintf_r+0x54>
 800aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf8:	d00b      	beq.n	800ab12 <_svfiprintf_r+0x7e>
 800aafa:	465b      	mov	r3, fp
 800aafc:	4622      	mov	r2, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ff6b 	bl	800a9dc <__ssputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	f000 80a7 	beq.w	800ac5a <_svfiprintf_r+0x1c6>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab0e:	445a      	add	r2, fp
 800ab10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 809f 	beq.w	800ac5a <_svfiprintf_r+0x1c6>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab26:	f10a 0a01 	add.w	sl, sl, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab34:	4654      	mov	r4, sl
 800ab36:	2205      	movs	r2, #5
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	484e      	ldr	r0, [pc, #312]	@ (800ac78 <_svfiprintf_r+0x1e4>)
 800ab3e:	f7f5 fbf7 	bl	8000330 <memchr>
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_svfiprintf_r+0xea>
 800ab46:	06d0      	lsls	r0, r2, #27
 800ab48:	bf44      	itt	mi
 800ab4a:	2320      	movmi	r3, #32
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab50:	0711      	lsls	r1, r2, #28
 800ab52:	bf44      	itt	mi
 800ab54:	232b      	movmi	r3, #43	@ 0x2b
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab60:	d015      	beq.n	800ab8e <_svfiprintf_r+0xfa>
 800ab62:	9a07      	ldr	r2, [sp, #28]
 800ab64:	4654      	mov	r4, sl
 800ab66:	2000      	movs	r0, #0
 800ab68:	f04f 0c0a 	mov.w	ip, #10
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab72:	3b30      	subs	r3, #48	@ 0x30
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d94b      	bls.n	800ac10 <_svfiprintf_r+0x17c>
 800ab78:	b1b0      	cbz	r0, 800aba8 <_svfiprintf_r+0x114>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e014      	b.n	800aba8 <_svfiprintf_r+0x114>
 800ab7e:	eba0 0308 	sub.w	r3, r0, r8
 800ab82:	fa09 f303 	lsl.w	r3, r9, r3
 800ab86:	4313      	orrs	r3, r2
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	46a2      	mov	sl, r4
 800ab8c:	e7d2      	b.n	800ab34 <_svfiprintf_r+0xa0>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbb      	ittet	lt
 800ab9a:	425b      	neglt	r3, r3
 800ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aba0:	9307      	strge	r3, [sp, #28]
 800aba2:	9307      	strlt	r3, [sp, #28]
 800aba4:	bfb8      	it	lt
 800aba6:	9204      	strlt	r2, [sp, #16]
 800aba8:	7823      	ldrb	r3, [r4, #0]
 800abaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800abac:	d10a      	bne.n	800abc4 <_svfiprintf_r+0x130>
 800abae:	7863      	ldrb	r3, [r4, #1]
 800abb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abb2:	d132      	bne.n	800ac1a <_svfiprintf_r+0x186>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	9203      	str	r2, [sp, #12]
 800abbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abc0:	3402      	adds	r4, #2
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac88 <_svfiprintf_r+0x1f4>
 800abc8:	7821      	ldrb	r1, [r4, #0]
 800abca:	2203      	movs	r2, #3
 800abcc:	4650      	mov	r0, sl
 800abce:	f7f5 fbaf 	bl	8000330 <memchr>
 800abd2:	b138      	cbz	r0, 800abe4 <_svfiprintf_r+0x150>
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	eba0 000a 	sub.w	r0, r0, sl
 800abda:	2240      	movs	r2, #64	@ 0x40
 800abdc:	4082      	lsls	r2, r0
 800abde:	4313      	orrs	r3, r2
 800abe0:	3401      	adds	r4, #1
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe8:	4824      	ldr	r0, [pc, #144]	@ (800ac7c <_svfiprintf_r+0x1e8>)
 800abea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abee:	2206      	movs	r2, #6
 800abf0:	f7f5 fb9e 	bl	8000330 <memchr>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d036      	beq.n	800ac66 <_svfiprintf_r+0x1d2>
 800abf8:	4b21      	ldr	r3, [pc, #132]	@ (800ac80 <_svfiprintf_r+0x1ec>)
 800abfa:	bb1b      	cbnz	r3, 800ac44 <_svfiprintf_r+0x1b0>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	3307      	adds	r3, #7
 800ac00:	f023 0307 	bic.w	r3, r3, #7
 800ac04:	3308      	adds	r3, #8
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0a:	4433      	add	r3, r6
 800ac0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0e:	e76a      	b.n	800aae6 <_svfiprintf_r+0x52>
 800ac10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac14:	460c      	mov	r4, r1
 800ac16:	2001      	movs	r0, #1
 800ac18:	e7a8      	b.n	800ab6c <_svfiprintf_r+0xd8>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	3401      	adds	r4, #1
 800ac1e:	9305      	str	r3, [sp, #20]
 800ac20:	4619      	mov	r1, r3
 800ac22:	f04f 0c0a 	mov.w	ip, #10
 800ac26:	4620      	mov	r0, r4
 800ac28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac2c:	3a30      	subs	r2, #48	@ 0x30
 800ac2e:	2a09      	cmp	r2, #9
 800ac30:	d903      	bls.n	800ac3a <_svfiprintf_r+0x1a6>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0c6      	beq.n	800abc4 <_svfiprintf_r+0x130>
 800ac36:	9105      	str	r1, [sp, #20]
 800ac38:	e7c4      	b.n	800abc4 <_svfiprintf_r+0x130>
 800ac3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac3e:	4604      	mov	r4, r0
 800ac40:	2301      	movs	r3, #1
 800ac42:	e7f0      	b.n	800ac26 <_svfiprintf_r+0x192>
 800ac44:	ab03      	add	r3, sp, #12
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac84 <_svfiprintf_r+0x1f0>)
 800ac4c:	a904      	add	r1, sp, #16
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f3af 8000 	nop.w
 800ac54:	1c42      	adds	r2, r0, #1
 800ac56:	4606      	mov	r6, r0
 800ac58:	d1d6      	bne.n	800ac08 <_svfiprintf_r+0x174>
 800ac5a:	89ab      	ldrh	r3, [r5, #12]
 800ac5c:	065b      	lsls	r3, r3, #25
 800ac5e:	f53f af2d 	bmi.w	800aabc <_svfiprintf_r+0x28>
 800ac62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac64:	e72c      	b.n	800aac0 <_svfiprintf_r+0x2c>
 800ac66:	ab03      	add	r3, sp, #12
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	4b05      	ldr	r3, [pc, #20]	@ (800ac84 <_svfiprintf_r+0x1f0>)
 800ac6e:	a904      	add	r1, sp, #16
 800ac70:	4638      	mov	r0, r7
 800ac72:	f000 f879 	bl	800ad68 <_printf_i>
 800ac76:	e7ed      	b.n	800ac54 <_svfiprintf_r+0x1c0>
 800ac78:	0800b85d 	.word	0x0800b85d
 800ac7c:	0800b867 	.word	0x0800b867
 800ac80:	00000000 	.word	0x00000000
 800ac84:	0800a9dd 	.word	0x0800a9dd
 800ac88:	0800b863 	.word	0x0800b863

0800ac8c <_printf_common>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	4616      	mov	r6, r2
 800ac92:	4698      	mov	r8, r3
 800ac94:	688a      	ldr	r2, [r1, #8]
 800ac96:	690b      	ldr	r3, [r1, #16]
 800ac98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bfb8      	it	lt
 800aca0:	4613      	movlt	r3, r2
 800aca2:	6033      	str	r3, [r6, #0]
 800aca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aca8:	4607      	mov	r7, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	b10a      	cbz	r2, 800acb2 <_printf_common+0x26>
 800acae:	3301      	adds	r3, #1
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	0699      	lsls	r1, r3, #26
 800acb6:	bf42      	ittt	mi
 800acb8:	6833      	ldrmi	r3, [r6, #0]
 800acba:	3302      	addmi	r3, #2
 800acbc:	6033      	strmi	r3, [r6, #0]
 800acbe:	6825      	ldr	r5, [r4, #0]
 800acc0:	f015 0506 	ands.w	r5, r5, #6
 800acc4:	d106      	bne.n	800acd4 <_printf_common+0x48>
 800acc6:	f104 0a19 	add.w	sl, r4, #25
 800acca:	68e3      	ldr	r3, [r4, #12]
 800accc:	6832      	ldr	r2, [r6, #0]
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc26      	bgt.n	800ad22 <_printf_common+0x96>
 800acd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acd8:	6822      	ldr	r2, [r4, #0]
 800acda:	3b00      	subs	r3, #0
 800acdc:	bf18      	it	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	0692      	lsls	r2, r2, #26
 800ace2:	d42b      	bmi.n	800ad3c <_printf_common+0xb0>
 800ace4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ace8:	4641      	mov	r1, r8
 800acea:	4638      	mov	r0, r7
 800acec:	47c8      	blx	r9
 800acee:	3001      	adds	r0, #1
 800acf0:	d01e      	beq.n	800ad30 <_printf_common+0xa4>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	6922      	ldr	r2, [r4, #16]
 800acf6:	f003 0306 	and.w	r3, r3, #6
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	bf02      	ittt	eq
 800acfe:	68e5      	ldreq	r5, [r4, #12]
 800ad00:	6833      	ldreq	r3, [r6, #0]
 800ad02:	1aed      	subeq	r5, r5, r3
 800ad04:	68a3      	ldr	r3, [r4, #8]
 800ad06:	bf0c      	ite	eq
 800ad08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad0c:	2500      	movne	r5, #0
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	bfc4      	itt	gt
 800ad12:	1a9b      	subgt	r3, r3, r2
 800ad14:	18ed      	addgt	r5, r5, r3
 800ad16:	2600      	movs	r6, #0
 800ad18:	341a      	adds	r4, #26
 800ad1a:	42b5      	cmp	r5, r6
 800ad1c:	d11a      	bne.n	800ad54 <_printf_common+0xc8>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	e008      	b.n	800ad34 <_printf_common+0xa8>
 800ad22:	2301      	movs	r3, #1
 800ad24:	4652      	mov	r2, sl
 800ad26:	4641      	mov	r1, r8
 800ad28:	4638      	mov	r0, r7
 800ad2a:	47c8      	blx	r9
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d103      	bne.n	800ad38 <_printf_common+0xac>
 800ad30:	f04f 30ff 	mov.w	r0, #4294967295
 800ad34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad38:	3501      	adds	r5, #1
 800ad3a:	e7c6      	b.n	800acca <_printf_common+0x3e>
 800ad3c:	18e1      	adds	r1, r4, r3
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	2030      	movs	r0, #48	@ 0x30
 800ad42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad46:	4422      	add	r2, r4
 800ad48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad50:	3302      	adds	r3, #2
 800ad52:	e7c7      	b.n	800ace4 <_printf_common+0x58>
 800ad54:	2301      	movs	r3, #1
 800ad56:	4622      	mov	r2, r4
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	47c8      	blx	r9
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d0e6      	beq.n	800ad30 <_printf_common+0xa4>
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7d9      	b.n	800ad1a <_printf_common+0x8e>
	...

0800ad68 <_printf_i>:
 800ad68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	7e0f      	ldrb	r7, [r1, #24]
 800ad6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad70:	2f78      	cmp	r7, #120	@ 0x78
 800ad72:	4691      	mov	r9, r2
 800ad74:	4680      	mov	r8, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad7e:	d807      	bhi.n	800ad90 <_printf_i+0x28>
 800ad80:	2f62      	cmp	r7, #98	@ 0x62
 800ad82:	d80a      	bhi.n	800ad9a <_printf_i+0x32>
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	f000 80d2 	beq.w	800af2e <_printf_i+0x1c6>
 800ad8a:	2f58      	cmp	r7, #88	@ 0x58
 800ad8c:	f000 80b9 	beq.w	800af02 <_printf_i+0x19a>
 800ad90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad98:	e03a      	b.n	800ae10 <_printf_i+0xa8>
 800ad9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad9e:	2b15      	cmp	r3, #21
 800ada0:	d8f6      	bhi.n	800ad90 <_printf_i+0x28>
 800ada2:	a101      	add	r1, pc, #4	@ (adr r1, 800ada8 <_printf_i+0x40>)
 800ada4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada8:	0800ae01 	.word	0x0800ae01
 800adac:	0800ae15 	.word	0x0800ae15
 800adb0:	0800ad91 	.word	0x0800ad91
 800adb4:	0800ad91 	.word	0x0800ad91
 800adb8:	0800ad91 	.word	0x0800ad91
 800adbc:	0800ad91 	.word	0x0800ad91
 800adc0:	0800ae15 	.word	0x0800ae15
 800adc4:	0800ad91 	.word	0x0800ad91
 800adc8:	0800ad91 	.word	0x0800ad91
 800adcc:	0800ad91 	.word	0x0800ad91
 800add0:	0800ad91 	.word	0x0800ad91
 800add4:	0800af15 	.word	0x0800af15
 800add8:	0800ae3f 	.word	0x0800ae3f
 800addc:	0800aecf 	.word	0x0800aecf
 800ade0:	0800ad91 	.word	0x0800ad91
 800ade4:	0800ad91 	.word	0x0800ad91
 800ade8:	0800af37 	.word	0x0800af37
 800adec:	0800ad91 	.word	0x0800ad91
 800adf0:	0800ae3f 	.word	0x0800ae3f
 800adf4:	0800ad91 	.word	0x0800ad91
 800adf8:	0800ad91 	.word	0x0800ad91
 800adfc:	0800aed7 	.word	0x0800aed7
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6032      	str	r2, [r6, #0]
 800ae08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae10:	2301      	movs	r3, #1
 800ae12:	e09d      	b.n	800af50 <_printf_i+0x1e8>
 800ae14:	6833      	ldr	r3, [r6, #0]
 800ae16:	6820      	ldr	r0, [r4, #0]
 800ae18:	1d19      	adds	r1, r3, #4
 800ae1a:	6031      	str	r1, [r6, #0]
 800ae1c:	0606      	lsls	r6, r0, #24
 800ae1e:	d501      	bpl.n	800ae24 <_printf_i+0xbc>
 800ae20:	681d      	ldr	r5, [r3, #0]
 800ae22:	e003      	b.n	800ae2c <_printf_i+0xc4>
 800ae24:	0645      	lsls	r5, r0, #25
 800ae26:	d5fb      	bpl.n	800ae20 <_printf_i+0xb8>
 800ae28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae2c:	2d00      	cmp	r5, #0
 800ae2e:	da03      	bge.n	800ae38 <_printf_i+0xd0>
 800ae30:	232d      	movs	r3, #45	@ 0x2d
 800ae32:	426d      	negs	r5, r5
 800ae34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae38:	4859      	ldr	r0, [pc, #356]	@ (800afa0 <_printf_i+0x238>)
 800ae3a:	230a      	movs	r3, #10
 800ae3c:	e011      	b.n	800ae62 <_printf_i+0xfa>
 800ae3e:	6821      	ldr	r1, [r4, #0]
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	0608      	lsls	r0, r1, #24
 800ae44:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae48:	d402      	bmi.n	800ae50 <_printf_i+0xe8>
 800ae4a:	0649      	lsls	r1, r1, #25
 800ae4c:	bf48      	it	mi
 800ae4e:	b2ad      	uxthmi	r5, r5
 800ae50:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae52:	4853      	ldr	r0, [pc, #332]	@ (800afa0 <_printf_i+0x238>)
 800ae54:	6033      	str	r3, [r6, #0]
 800ae56:	bf14      	ite	ne
 800ae58:	230a      	movne	r3, #10
 800ae5a:	2308      	moveq	r3, #8
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae62:	6866      	ldr	r6, [r4, #4]
 800ae64:	60a6      	str	r6, [r4, #8]
 800ae66:	2e00      	cmp	r6, #0
 800ae68:	bfa2      	ittt	ge
 800ae6a:	6821      	ldrge	r1, [r4, #0]
 800ae6c:	f021 0104 	bicge.w	r1, r1, #4
 800ae70:	6021      	strge	r1, [r4, #0]
 800ae72:	b90d      	cbnz	r5, 800ae78 <_printf_i+0x110>
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d04b      	beq.n	800af10 <_printf_i+0x1a8>
 800ae78:	4616      	mov	r6, r2
 800ae7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae7e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae82:	5dc7      	ldrb	r7, [r0, r7]
 800ae84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae88:	462f      	mov	r7, r5
 800ae8a:	42bb      	cmp	r3, r7
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	d9f4      	bls.n	800ae7a <_printf_i+0x112>
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d10b      	bne.n	800aeac <_printf_i+0x144>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	07df      	lsls	r7, r3, #31
 800ae98:	d508      	bpl.n	800aeac <_printf_i+0x144>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	bfde      	ittt	le
 800aea2:	2330      	movle	r3, #48	@ 0x30
 800aea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aeac:	1b92      	subs	r2, r2, r6
 800aeae:	6122      	str	r2, [r4, #16]
 800aeb0:	f8cd a000 	str.w	sl, [sp]
 800aeb4:	464b      	mov	r3, r9
 800aeb6:	aa03      	add	r2, sp, #12
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4640      	mov	r0, r8
 800aebc:	f7ff fee6 	bl	800ac8c <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	d14a      	bne.n	800af5a <_printf_i+0x1f2>
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b004      	add	sp, #16
 800aeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	f043 0320 	orr.w	r3, r3, #32
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	4833      	ldr	r0, [pc, #204]	@ (800afa4 <_printf_i+0x23c>)
 800aed8:	2778      	movs	r7, #120	@ 0x78
 800aeda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6831      	ldr	r1, [r6, #0]
 800aee2:	061f      	lsls	r7, r3, #24
 800aee4:	f851 5b04 	ldr.w	r5, [r1], #4
 800aee8:	d402      	bmi.n	800aef0 <_printf_i+0x188>
 800aeea:	065f      	lsls	r7, r3, #25
 800aeec:	bf48      	it	mi
 800aeee:	b2ad      	uxthmi	r5, r5
 800aef0:	6031      	str	r1, [r6, #0]
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	bf44      	itt	mi
 800aef6:	f043 0320 	orrmi.w	r3, r3, #32
 800aefa:	6023      	strmi	r3, [r4, #0]
 800aefc:	b11d      	cbz	r5, 800af06 <_printf_i+0x19e>
 800aefe:	2310      	movs	r3, #16
 800af00:	e7ac      	b.n	800ae5c <_printf_i+0xf4>
 800af02:	4827      	ldr	r0, [pc, #156]	@ (800afa0 <_printf_i+0x238>)
 800af04:	e7e9      	b.n	800aeda <_printf_i+0x172>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	f023 0320 	bic.w	r3, r3, #32
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	e7f6      	b.n	800aefe <_printf_i+0x196>
 800af10:	4616      	mov	r6, r2
 800af12:	e7bd      	b.n	800ae90 <_printf_i+0x128>
 800af14:	6833      	ldr	r3, [r6, #0]
 800af16:	6825      	ldr	r5, [r4, #0]
 800af18:	6961      	ldr	r1, [r4, #20]
 800af1a:	1d18      	adds	r0, r3, #4
 800af1c:	6030      	str	r0, [r6, #0]
 800af1e:	062e      	lsls	r6, r5, #24
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	d501      	bpl.n	800af28 <_printf_i+0x1c0>
 800af24:	6019      	str	r1, [r3, #0]
 800af26:	e002      	b.n	800af2e <_printf_i+0x1c6>
 800af28:	0668      	lsls	r0, r5, #25
 800af2a:	d5fb      	bpl.n	800af24 <_printf_i+0x1bc>
 800af2c:	8019      	strh	r1, [r3, #0]
 800af2e:	2300      	movs	r3, #0
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	4616      	mov	r6, r2
 800af34:	e7bc      	b.n	800aeb0 <_printf_i+0x148>
 800af36:	6833      	ldr	r3, [r6, #0]
 800af38:	1d1a      	adds	r2, r3, #4
 800af3a:	6032      	str	r2, [r6, #0]
 800af3c:	681e      	ldr	r6, [r3, #0]
 800af3e:	6862      	ldr	r2, [r4, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	4630      	mov	r0, r6
 800af44:	f7f5 f9f4 	bl	8000330 <memchr>
 800af48:	b108      	cbz	r0, 800af4e <_printf_i+0x1e6>
 800af4a:	1b80      	subs	r0, r0, r6
 800af4c:	6060      	str	r0, [r4, #4]
 800af4e:	6863      	ldr	r3, [r4, #4]
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	2300      	movs	r3, #0
 800af54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af58:	e7aa      	b.n	800aeb0 <_printf_i+0x148>
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	4632      	mov	r2, r6
 800af5e:	4649      	mov	r1, r9
 800af60:	4640      	mov	r0, r8
 800af62:	47d0      	blx	sl
 800af64:	3001      	adds	r0, #1
 800af66:	d0ad      	beq.n	800aec4 <_printf_i+0x15c>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	079b      	lsls	r3, r3, #30
 800af6c:	d413      	bmi.n	800af96 <_printf_i+0x22e>
 800af6e:	68e0      	ldr	r0, [r4, #12]
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	4298      	cmp	r0, r3
 800af74:	bfb8      	it	lt
 800af76:	4618      	movlt	r0, r3
 800af78:	e7a6      	b.n	800aec8 <_printf_i+0x160>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4632      	mov	r2, r6
 800af7e:	4649      	mov	r1, r9
 800af80:	4640      	mov	r0, r8
 800af82:	47d0      	blx	sl
 800af84:	3001      	adds	r0, #1
 800af86:	d09d      	beq.n	800aec4 <_printf_i+0x15c>
 800af88:	3501      	adds	r5, #1
 800af8a:	68e3      	ldr	r3, [r4, #12]
 800af8c:	9903      	ldr	r1, [sp, #12]
 800af8e:	1a5b      	subs	r3, r3, r1
 800af90:	42ab      	cmp	r3, r5
 800af92:	dcf2      	bgt.n	800af7a <_printf_i+0x212>
 800af94:	e7eb      	b.n	800af6e <_printf_i+0x206>
 800af96:	2500      	movs	r5, #0
 800af98:	f104 0619 	add.w	r6, r4, #25
 800af9c:	e7f5      	b.n	800af8a <_printf_i+0x222>
 800af9e:	bf00      	nop
 800afa0:	0800b86e 	.word	0x0800b86e
 800afa4:	0800b87f 	.word	0x0800b87f

0800afa8 <__sflush_r>:
 800afa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb0:	0716      	lsls	r6, r2, #28
 800afb2:	4605      	mov	r5, r0
 800afb4:	460c      	mov	r4, r1
 800afb6:	d454      	bmi.n	800b062 <__sflush_r+0xba>
 800afb8:	684b      	ldr	r3, [r1, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dc02      	bgt.n	800afc4 <__sflush_r+0x1c>
 800afbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dd48      	ble.n	800b056 <__sflush_r+0xae>
 800afc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d045      	beq.n	800b056 <__sflush_r+0xae>
 800afca:	2300      	movs	r3, #0
 800afcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afd0:	682f      	ldr	r7, [r5, #0]
 800afd2:	6a21      	ldr	r1, [r4, #32]
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	d030      	beq.n	800b03a <__sflush_r+0x92>
 800afd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	0759      	lsls	r1, r3, #29
 800afde:	d505      	bpl.n	800afec <__sflush_r+0x44>
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	1ad2      	subs	r2, r2, r3
 800afe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afe6:	b10b      	cbz	r3, 800afec <__sflush_r+0x44>
 800afe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	2300      	movs	r3, #0
 800afee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aff0:	6a21      	ldr	r1, [r4, #32]
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b0      	blx	r6
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	d106      	bne.n	800b00a <__sflush_r+0x62>
 800affc:	6829      	ldr	r1, [r5, #0]
 800affe:	291d      	cmp	r1, #29
 800b000:	d82b      	bhi.n	800b05a <__sflush_r+0xb2>
 800b002:	4a2a      	ldr	r2, [pc, #168]	@ (800b0ac <__sflush_r+0x104>)
 800b004:	410a      	asrs	r2, r1
 800b006:	07d6      	lsls	r6, r2, #31
 800b008:	d427      	bmi.n	800b05a <__sflush_r+0xb2>
 800b00a:	2200      	movs	r2, #0
 800b00c:	6062      	str	r2, [r4, #4]
 800b00e:	04d9      	lsls	r1, r3, #19
 800b010:	6922      	ldr	r2, [r4, #16]
 800b012:	6022      	str	r2, [r4, #0]
 800b014:	d504      	bpl.n	800b020 <__sflush_r+0x78>
 800b016:	1c42      	adds	r2, r0, #1
 800b018:	d101      	bne.n	800b01e <__sflush_r+0x76>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b903      	cbnz	r3, 800b020 <__sflush_r+0x78>
 800b01e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b022:	602f      	str	r7, [r5, #0]
 800b024:	b1b9      	cbz	r1, 800b056 <__sflush_r+0xae>
 800b026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b02a:	4299      	cmp	r1, r3
 800b02c:	d002      	beq.n	800b034 <__sflush_r+0x8c>
 800b02e:	4628      	mov	r0, r5
 800b030:	f7ff fc8a 	bl	800a948 <_free_r>
 800b034:	2300      	movs	r3, #0
 800b036:	6363      	str	r3, [r4, #52]	@ 0x34
 800b038:	e00d      	b.n	800b056 <__sflush_r+0xae>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b0      	blx	r6
 800b040:	4602      	mov	r2, r0
 800b042:	1c50      	adds	r0, r2, #1
 800b044:	d1c9      	bne.n	800afda <__sflush_r+0x32>
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d0c6      	beq.n	800afda <__sflush_r+0x32>
 800b04c:	2b1d      	cmp	r3, #29
 800b04e:	d001      	beq.n	800b054 <__sflush_r+0xac>
 800b050:	2b16      	cmp	r3, #22
 800b052:	d11e      	bne.n	800b092 <__sflush_r+0xea>
 800b054:	602f      	str	r7, [r5, #0]
 800b056:	2000      	movs	r0, #0
 800b058:	e022      	b.n	800b0a0 <__sflush_r+0xf8>
 800b05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05e:	b21b      	sxth	r3, r3
 800b060:	e01b      	b.n	800b09a <__sflush_r+0xf2>
 800b062:	690f      	ldr	r7, [r1, #16]
 800b064:	2f00      	cmp	r7, #0
 800b066:	d0f6      	beq.n	800b056 <__sflush_r+0xae>
 800b068:	0793      	lsls	r3, r2, #30
 800b06a:	680e      	ldr	r6, [r1, #0]
 800b06c:	bf08      	it	eq
 800b06e:	694b      	ldreq	r3, [r1, #20]
 800b070:	600f      	str	r7, [r1, #0]
 800b072:	bf18      	it	ne
 800b074:	2300      	movne	r3, #0
 800b076:	eba6 0807 	sub.w	r8, r6, r7
 800b07a:	608b      	str	r3, [r1, #8]
 800b07c:	f1b8 0f00 	cmp.w	r8, #0
 800b080:	dde9      	ble.n	800b056 <__sflush_r+0xae>
 800b082:	6a21      	ldr	r1, [r4, #32]
 800b084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b086:	4643      	mov	r3, r8
 800b088:	463a      	mov	r2, r7
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b0      	blx	r6
 800b08e:	2800      	cmp	r0, #0
 800b090:	dc08      	bgt.n	800b0a4 <__sflush_r+0xfc>
 800b092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a4:	4407      	add	r7, r0
 800b0a6:	eba8 0800 	sub.w	r8, r8, r0
 800b0aa:	e7e7      	b.n	800b07c <__sflush_r+0xd4>
 800b0ac:	dfbffffe 	.word	0xdfbffffe

0800b0b0 <_fflush_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	690b      	ldr	r3, [r1, #16]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	b913      	cbnz	r3, 800b0c0 <_fflush_r+0x10>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	b118      	cbz	r0, 800b0ca <_fflush_r+0x1a>
 800b0c2:	6a03      	ldr	r3, [r0, #32]
 800b0c4:	b90b      	cbnz	r3, 800b0ca <_fflush_r+0x1a>
 800b0c6:	f7ff fa7d 	bl	800a5c4 <__sinit>
 800b0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f3      	beq.n	800b0ba <_fflush_r+0xa>
 800b0d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0d4:	07d0      	lsls	r0, r2, #31
 800b0d6:	d404      	bmi.n	800b0e2 <_fflush_r+0x32>
 800b0d8:	0599      	lsls	r1, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_fflush_r+0x32>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0de:	f7ff fc04 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7ff ff5f 	bl	800afa8 <__sflush_r>
 800b0ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ec:	07da      	lsls	r2, r3, #31
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	d4e4      	bmi.n	800b0bc <_fflush_r+0xc>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	059b      	lsls	r3, r3, #22
 800b0f6:	d4e1      	bmi.n	800b0bc <_fflush_r+0xc>
 800b0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0fa:	f7ff fbf7 	bl	800a8ec <__retarget_lock_release_recursive>
 800b0fe:	e7dd      	b.n	800b0bc <_fflush_r+0xc>

0800b100 <fiprintf>:
 800b100:	b40e      	push	{r1, r2, r3}
 800b102:	b503      	push	{r0, r1, lr}
 800b104:	4601      	mov	r1, r0
 800b106:	ab03      	add	r3, sp, #12
 800b108:	4805      	ldr	r0, [pc, #20]	@ (800b120 <fiprintf+0x20>)
 800b10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10e:	6800      	ldr	r0, [r0, #0]
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	f000 f87f 	bl	800b214 <_vfiprintf_r>
 800b116:	b002      	add	sp, #8
 800b118:	f85d eb04 	ldr.w	lr, [sp], #4
 800b11c:	b003      	add	sp, #12
 800b11e:	4770      	bx	lr
 800b120:	24000058 	.word	0x24000058

0800b124 <memmove>:
 800b124:	4288      	cmp	r0, r1
 800b126:	b510      	push	{r4, lr}
 800b128:	eb01 0402 	add.w	r4, r1, r2
 800b12c:	d902      	bls.n	800b134 <memmove+0x10>
 800b12e:	4284      	cmp	r4, r0
 800b130:	4623      	mov	r3, r4
 800b132:	d807      	bhi.n	800b144 <memmove+0x20>
 800b134:	1e43      	subs	r3, r0, #1
 800b136:	42a1      	cmp	r1, r4
 800b138:	d008      	beq.n	800b14c <memmove+0x28>
 800b13a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b13e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b142:	e7f8      	b.n	800b136 <memmove+0x12>
 800b144:	4402      	add	r2, r0
 800b146:	4601      	mov	r1, r0
 800b148:	428a      	cmp	r2, r1
 800b14a:	d100      	bne.n	800b14e <memmove+0x2a>
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b156:	e7f7      	b.n	800b148 <memmove+0x24>

0800b158 <abort>:
 800b158:	b508      	push	{r3, lr}
 800b15a:	2006      	movs	r0, #6
 800b15c:	f000 fa2e 	bl	800b5bc <raise>
 800b160:	2001      	movs	r0, #1
 800b162:	f7f5 fefb 	bl	8000f5c <_exit>

0800b166 <_realloc_r>:
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	4680      	mov	r8, r0
 800b16c:	4615      	mov	r5, r2
 800b16e:	460c      	mov	r4, r1
 800b170:	b921      	cbnz	r1, 800b17c <_realloc_r+0x16>
 800b172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	4611      	mov	r1, r2
 800b178:	f7ff b90c 	b.w	800a394 <_malloc_r>
 800b17c:	b92a      	cbnz	r2, 800b18a <_realloc_r+0x24>
 800b17e:	f7ff fbe3 	bl	800a948 <_free_r>
 800b182:	2400      	movs	r4, #0
 800b184:	4620      	mov	r0, r4
 800b186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18a:	f000 fa33 	bl	800b5f4 <_malloc_usable_size_r>
 800b18e:	4285      	cmp	r5, r0
 800b190:	4606      	mov	r6, r0
 800b192:	d802      	bhi.n	800b19a <_realloc_r+0x34>
 800b194:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b198:	d8f4      	bhi.n	800b184 <_realloc_r+0x1e>
 800b19a:	4629      	mov	r1, r5
 800b19c:	4640      	mov	r0, r8
 800b19e:	f7ff f8f9 	bl	800a394 <_malloc_r>
 800b1a2:	4607      	mov	r7, r0
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d0ec      	beq.n	800b182 <_realloc_r+0x1c>
 800b1a8:	42b5      	cmp	r5, r6
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	bf28      	it	cs
 800b1b0:	4632      	movcs	r2, r6
 800b1b2:	f7ff fb9c 	bl	800a8ee <memcpy>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	f7ff fbc5 	bl	800a948 <_free_r>
 800b1be:	463c      	mov	r4, r7
 800b1c0:	e7e0      	b.n	800b184 <_realloc_r+0x1e>

0800b1c2 <__sfputc_r>:
 800b1c2:	6893      	ldr	r3, [r2, #8]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	b410      	push	{r4}
 800b1ca:	6093      	str	r3, [r2, #8]
 800b1cc:	da08      	bge.n	800b1e0 <__sfputc_r+0x1e>
 800b1ce:	6994      	ldr	r4, [r2, #24]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	db01      	blt.n	800b1d8 <__sfputc_r+0x16>
 800b1d4:	290a      	cmp	r1, #10
 800b1d6:	d103      	bne.n	800b1e0 <__sfputc_r+0x1e>
 800b1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1dc:	f000 b932 	b.w	800b444 <__swbuf_r>
 800b1e0:	6813      	ldr	r3, [r2, #0]
 800b1e2:	1c58      	adds	r0, r3, #1
 800b1e4:	6010      	str	r0, [r2, #0]
 800b1e6:	7019      	strb	r1, [r3, #0]
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <__sfputs_r>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	4614      	mov	r4, r2
 800b1f8:	18d5      	adds	r5, r2, r3
 800b1fa:	42ac      	cmp	r4, r5
 800b1fc:	d101      	bne.n	800b202 <__sfputs_r+0x12>
 800b1fe:	2000      	movs	r0, #0
 800b200:	e007      	b.n	800b212 <__sfputs_r+0x22>
 800b202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b206:	463a      	mov	r2, r7
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff ffda 	bl	800b1c2 <__sfputc_r>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d1f3      	bne.n	800b1fa <__sfputs_r+0xa>
 800b212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b214 <_vfiprintf_r>:
 800b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	460d      	mov	r5, r1
 800b21a:	b09d      	sub	sp, #116	@ 0x74
 800b21c:	4614      	mov	r4, r2
 800b21e:	4698      	mov	r8, r3
 800b220:	4606      	mov	r6, r0
 800b222:	b118      	cbz	r0, 800b22c <_vfiprintf_r+0x18>
 800b224:	6a03      	ldr	r3, [r0, #32]
 800b226:	b90b      	cbnz	r3, 800b22c <_vfiprintf_r+0x18>
 800b228:	f7ff f9cc 	bl	800a5c4 <__sinit>
 800b22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b22e:	07d9      	lsls	r1, r3, #31
 800b230:	d405      	bmi.n	800b23e <_vfiprintf_r+0x2a>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	059a      	lsls	r2, r3, #22
 800b236:	d402      	bmi.n	800b23e <_vfiprintf_r+0x2a>
 800b238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b23a:	f7ff fb56 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	071b      	lsls	r3, r3, #28
 800b242:	d501      	bpl.n	800b248 <_vfiprintf_r+0x34>
 800b244:	692b      	ldr	r3, [r5, #16]
 800b246:	b99b      	cbnz	r3, 800b270 <_vfiprintf_r+0x5c>
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f000 f938 	bl	800b4c0 <__swsetup_r>
 800b250:	b170      	cbz	r0, 800b270 <_vfiprintf_r+0x5c>
 800b252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b254:	07dc      	lsls	r4, r3, #31
 800b256:	d504      	bpl.n	800b262 <_vfiprintf_r+0x4e>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	b01d      	add	sp, #116	@ 0x74
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b262:	89ab      	ldrh	r3, [r5, #12]
 800b264:	0598      	lsls	r0, r3, #22
 800b266:	d4f7      	bmi.n	800b258 <_vfiprintf_r+0x44>
 800b268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b26a:	f7ff fb3f 	bl	800a8ec <__retarget_lock_release_recursive>
 800b26e:	e7f3      	b.n	800b258 <_vfiprintf_r+0x44>
 800b270:	2300      	movs	r3, #0
 800b272:	9309      	str	r3, [sp, #36]	@ 0x24
 800b274:	2320      	movs	r3, #32
 800b276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b27a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b27e:	2330      	movs	r3, #48	@ 0x30
 800b280:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b430 <_vfiprintf_r+0x21c>
 800b284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b288:	f04f 0901 	mov.w	r9, #1
 800b28c:	4623      	mov	r3, r4
 800b28e:	469a      	mov	sl, r3
 800b290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b294:	b10a      	cbz	r2, 800b29a <_vfiprintf_r+0x86>
 800b296:	2a25      	cmp	r2, #37	@ 0x25
 800b298:	d1f9      	bne.n	800b28e <_vfiprintf_r+0x7a>
 800b29a:	ebba 0b04 	subs.w	fp, sl, r4
 800b29e:	d00b      	beq.n	800b2b8 <_vfiprintf_r+0xa4>
 800b2a0:	465b      	mov	r3, fp
 800b2a2:	4622      	mov	r2, r4
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff ffa2 	bl	800b1f0 <__sfputs_r>
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	f000 80a7 	beq.w	800b400 <_vfiprintf_r+0x1ec>
 800b2b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2b4:	445a      	add	r2, fp
 800b2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 809f 	beq.w	800b400 <_vfiprintf_r+0x1ec>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2cc:	f10a 0a01 	add.w	sl, sl, #1
 800b2d0:	9304      	str	r3, [sp, #16]
 800b2d2:	9307      	str	r3, [sp, #28]
 800b2d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2da:	4654      	mov	r4, sl
 800b2dc:	2205      	movs	r2, #5
 800b2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e2:	4853      	ldr	r0, [pc, #332]	@ (800b430 <_vfiprintf_r+0x21c>)
 800b2e4:	f7f5 f824 	bl	8000330 <memchr>
 800b2e8:	9a04      	ldr	r2, [sp, #16]
 800b2ea:	b9d8      	cbnz	r0, 800b324 <_vfiprintf_r+0x110>
 800b2ec:	06d1      	lsls	r1, r2, #27
 800b2ee:	bf44      	itt	mi
 800b2f0:	2320      	movmi	r3, #32
 800b2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2f6:	0713      	lsls	r3, r2, #28
 800b2f8:	bf44      	itt	mi
 800b2fa:	232b      	movmi	r3, #43	@ 0x2b
 800b2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b300:	f89a 3000 	ldrb.w	r3, [sl]
 800b304:	2b2a      	cmp	r3, #42	@ 0x2a
 800b306:	d015      	beq.n	800b334 <_vfiprintf_r+0x120>
 800b308:	9a07      	ldr	r2, [sp, #28]
 800b30a:	4654      	mov	r4, sl
 800b30c:	2000      	movs	r0, #0
 800b30e:	f04f 0c0a 	mov.w	ip, #10
 800b312:	4621      	mov	r1, r4
 800b314:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b318:	3b30      	subs	r3, #48	@ 0x30
 800b31a:	2b09      	cmp	r3, #9
 800b31c:	d94b      	bls.n	800b3b6 <_vfiprintf_r+0x1a2>
 800b31e:	b1b0      	cbz	r0, 800b34e <_vfiprintf_r+0x13a>
 800b320:	9207      	str	r2, [sp, #28]
 800b322:	e014      	b.n	800b34e <_vfiprintf_r+0x13a>
 800b324:	eba0 0308 	sub.w	r3, r0, r8
 800b328:	fa09 f303 	lsl.w	r3, r9, r3
 800b32c:	4313      	orrs	r3, r2
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	46a2      	mov	sl, r4
 800b332:	e7d2      	b.n	800b2da <_vfiprintf_r+0xc6>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	1d19      	adds	r1, r3, #4
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	9103      	str	r1, [sp, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	bfbb      	ittet	lt
 800b340:	425b      	neglt	r3, r3
 800b342:	f042 0202 	orrlt.w	r2, r2, #2
 800b346:	9307      	strge	r3, [sp, #28]
 800b348:	9307      	strlt	r3, [sp, #28]
 800b34a:	bfb8      	it	lt
 800b34c:	9204      	strlt	r2, [sp, #16]
 800b34e:	7823      	ldrb	r3, [r4, #0]
 800b350:	2b2e      	cmp	r3, #46	@ 0x2e
 800b352:	d10a      	bne.n	800b36a <_vfiprintf_r+0x156>
 800b354:	7863      	ldrb	r3, [r4, #1]
 800b356:	2b2a      	cmp	r3, #42	@ 0x2a
 800b358:	d132      	bne.n	800b3c0 <_vfiprintf_r+0x1ac>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	1d1a      	adds	r2, r3, #4
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	9203      	str	r2, [sp, #12]
 800b362:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b366:	3402      	adds	r4, #2
 800b368:	9305      	str	r3, [sp, #20]
 800b36a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b440 <_vfiprintf_r+0x22c>
 800b36e:	7821      	ldrb	r1, [r4, #0]
 800b370:	2203      	movs	r2, #3
 800b372:	4650      	mov	r0, sl
 800b374:	f7f4 ffdc 	bl	8000330 <memchr>
 800b378:	b138      	cbz	r0, 800b38a <_vfiprintf_r+0x176>
 800b37a:	9b04      	ldr	r3, [sp, #16]
 800b37c:	eba0 000a 	sub.w	r0, r0, sl
 800b380:	2240      	movs	r2, #64	@ 0x40
 800b382:	4082      	lsls	r2, r0
 800b384:	4313      	orrs	r3, r2
 800b386:	3401      	adds	r4, #1
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38e:	4829      	ldr	r0, [pc, #164]	@ (800b434 <_vfiprintf_r+0x220>)
 800b390:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b394:	2206      	movs	r2, #6
 800b396:	f7f4 ffcb 	bl	8000330 <memchr>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d03f      	beq.n	800b41e <_vfiprintf_r+0x20a>
 800b39e:	4b26      	ldr	r3, [pc, #152]	@ (800b438 <_vfiprintf_r+0x224>)
 800b3a0:	bb1b      	cbnz	r3, 800b3ea <_vfiprintf_r+0x1d6>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	3307      	adds	r3, #7
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	3308      	adds	r3, #8
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b0:	443b      	add	r3, r7
 800b3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3b4:	e76a      	b.n	800b28c <_vfiprintf_r+0x78>
 800b3b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	2001      	movs	r0, #1
 800b3be:	e7a8      	b.n	800b312 <_vfiprintf_r+0xfe>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	3401      	adds	r4, #1
 800b3c4:	9305      	str	r3, [sp, #20]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	f04f 0c0a 	mov.w	ip, #10
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d2:	3a30      	subs	r2, #48	@ 0x30
 800b3d4:	2a09      	cmp	r2, #9
 800b3d6:	d903      	bls.n	800b3e0 <_vfiprintf_r+0x1cc>
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0c6      	beq.n	800b36a <_vfiprintf_r+0x156>
 800b3dc:	9105      	str	r1, [sp, #20]
 800b3de:	e7c4      	b.n	800b36a <_vfiprintf_r+0x156>
 800b3e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e7f0      	b.n	800b3cc <_vfiprintf_r+0x1b8>
 800b3ea:	ab03      	add	r3, sp, #12
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4b12      	ldr	r3, [pc, #72]	@ (800b43c <_vfiprintf_r+0x228>)
 800b3f2:	a904      	add	r1, sp, #16
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	f3af 8000 	nop.w
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	1c78      	adds	r0, r7, #1
 800b3fe:	d1d6      	bne.n	800b3ae <_vfiprintf_r+0x19a>
 800b400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x1fe>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x1fe>
 800b40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40e:	f7ff fa6d 	bl	800a8ec <__retarget_lock_release_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	065b      	lsls	r3, r3, #25
 800b416:	f53f af1f 	bmi.w	800b258 <_vfiprintf_r+0x44>
 800b41a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b41c:	e71e      	b.n	800b25c <_vfiprintf_r+0x48>
 800b41e:	ab03      	add	r3, sp, #12
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	462a      	mov	r2, r5
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <_vfiprintf_r+0x228>)
 800b426:	a904      	add	r1, sp, #16
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff fc9d 	bl	800ad68 <_printf_i>
 800b42e:	e7e4      	b.n	800b3fa <_vfiprintf_r+0x1e6>
 800b430:	0800b85d 	.word	0x0800b85d
 800b434:	0800b867 	.word	0x0800b867
 800b438:	00000000 	.word	0x00000000
 800b43c:	0800b1f1 	.word	0x0800b1f1
 800b440:	0800b863 	.word	0x0800b863

0800b444 <__swbuf_r>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	460e      	mov	r6, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	4605      	mov	r5, r0
 800b44c:	b118      	cbz	r0, 800b456 <__swbuf_r+0x12>
 800b44e:	6a03      	ldr	r3, [r0, #32]
 800b450:	b90b      	cbnz	r3, 800b456 <__swbuf_r+0x12>
 800b452:	f7ff f8b7 	bl	800a5c4 <__sinit>
 800b456:	69a3      	ldr	r3, [r4, #24]
 800b458:	60a3      	str	r3, [r4, #8]
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	071a      	lsls	r2, r3, #28
 800b45e:	d501      	bpl.n	800b464 <__swbuf_r+0x20>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	b943      	cbnz	r3, 800b476 <__swbuf_r+0x32>
 800b464:	4621      	mov	r1, r4
 800b466:	4628      	mov	r0, r5
 800b468:	f000 f82a 	bl	800b4c0 <__swsetup_r>
 800b46c:	b118      	cbz	r0, 800b476 <__swbuf_r+0x32>
 800b46e:	f04f 37ff 	mov.w	r7, #4294967295
 800b472:	4638      	mov	r0, r7
 800b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	6922      	ldr	r2, [r4, #16]
 800b47a:	1a98      	subs	r0, r3, r2
 800b47c:	6963      	ldr	r3, [r4, #20]
 800b47e:	b2f6      	uxtb	r6, r6
 800b480:	4283      	cmp	r3, r0
 800b482:	4637      	mov	r7, r6
 800b484:	dc05      	bgt.n	800b492 <__swbuf_r+0x4e>
 800b486:	4621      	mov	r1, r4
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff fe11 	bl	800b0b0 <_fflush_r>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1ed      	bne.n	800b46e <__swbuf_r+0x2a>
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	3b01      	subs	r3, #1
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	701e      	strb	r6, [r3, #0]
 800b4a0:	6962      	ldr	r2, [r4, #20]
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d004      	beq.n	800b4b2 <__swbuf_r+0x6e>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d5e1      	bpl.n	800b472 <__swbuf_r+0x2e>
 800b4ae:	2e0a      	cmp	r6, #10
 800b4b0:	d1df      	bne.n	800b472 <__swbuf_r+0x2e>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7ff fdfb 	bl	800b0b0 <_fflush_r>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d0d9      	beq.n	800b472 <__swbuf_r+0x2e>
 800b4be:	e7d6      	b.n	800b46e <__swbuf_r+0x2a>

0800b4c0 <__swsetup_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4b29      	ldr	r3, [pc, #164]	@ (800b568 <__swsetup_r+0xa8>)
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	b118      	cbz	r0, 800b4d4 <__swsetup_r+0x14>
 800b4cc:	6a03      	ldr	r3, [r0, #32]
 800b4ce:	b90b      	cbnz	r3, 800b4d4 <__swsetup_r+0x14>
 800b4d0:	f7ff f878 	bl	800a5c4 <__sinit>
 800b4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d8:	0719      	lsls	r1, r3, #28
 800b4da:	d422      	bmi.n	800b522 <__swsetup_r+0x62>
 800b4dc:	06da      	lsls	r2, r3, #27
 800b4de:	d407      	bmi.n	800b4f0 <__swsetup_r+0x30>
 800b4e0:	2209      	movs	r2, #9
 800b4e2:	602a      	str	r2, [r5, #0]
 800b4e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e8:	81a3      	strh	r3, [r4, #12]
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ee:	e033      	b.n	800b558 <__swsetup_r+0x98>
 800b4f0:	0758      	lsls	r0, r3, #29
 800b4f2:	d512      	bpl.n	800b51a <__swsetup_r+0x5a>
 800b4f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4f6:	b141      	cbz	r1, 800b50a <__swsetup_r+0x4a>
 800b4f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	d002      	beq.n	800b506 <__swsetup_r+0x46>
 800b500:	4628      	mov	r0, r5
 800b502:	f7ff fa21 	bl	800a948 <_free_r>
 800b506:	2300      	movs	r3, #0
 800b508:	6363      	str	r3, [r4, #52]	@ 0x34
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	2300      	movs	r3, #0
 800b514:	6063      	str	r3, [r4, #4]
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f043 0308 	orr.w	r3, r3, #8
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	b94b      	cbnz	r3, 800b53a <__swsetup_r+0x7a>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b52c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b530:	d003      	beq.n	800b53a <__swsetup_r+0x7a>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	f000 f88b 	bl	800b650 <__smakebuf_r>
 800b53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53e:	f013 0201 	ands.w	r2, r3, #1
 800b542:	d00a      	beq.n	800b55a <__swsetup_r+0x9a>
 800b544:	2200      	movs	r2, #0
 800b546:	60a2      	str	r2, [r4, #8]
 800b548:	6962      	ldr	r2, [r4, #20]
 800b54a:	4252      	negs	r2, r2
 800b54c:	61a2      	str	r2, [r4, #24]
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	b942      	cbnz	r2, 800b564 <__swsetup_r+0xa4>
 800b552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b556:	d1c5      	bne.n	800b4e4 <__swsetup_r+0x24>
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	0799      	lsls	r1, r3, #30
 800b55c:	bf58      	it	pl
 800b55e:	6962      	ldrpl	r2, [r4, #20]
 800b560:	60a2      	str	r2, [r4, #8]
 800b562:	e7f4      	b.n	800b54e <__swsetup_r+0x8e>
 800b564:	2000      	movs	r0, #0
 800b566:	e7f7      	b.n	800b558 <__swsetup_r+0x98>
 800b568:	24000058 	.word	0x24000058

0800b56c <_raise_r>:
 800b56c:	291f      	cmp	r1, #31
 800b56e:	b538      	push	{r3, r4, r5, lr}
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	d904      	bls.n	800b580 <_raise_r+0x14>
 800b576:	2316      	movs	r3, #22
 800b578:	6003      	str	r3, [r0, #0]
 800b57a:	f04f 30ff 	mov.w	r0, #4294967295
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b582:	b112      	cbz	r2, 800b58a <_raise_r+0x1e>
 800b584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b588:	b94b      	cbnz	r3, 800b59e <_raise_r+0x32>
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f830 	bl	800b5f0 <_getpid_r>
 800b590:	4622      	mov	r2, r4
 800b592:	4601      	mov	r1, r0
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b59a:	f000 b817 	b.w	800b5cc <_kill_r>
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d00a      	beq.n	800b5b8 <_raise_r+0x4c>
 800b5a2:	1c59      	adds	r1, r3, #1
 800b5a4:	d103      	bne.n	800b5ae <_raise_r+0x42>
 800b5a6:	2316      	movs	r3, #22
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7e7      	b.n	800b57e <_raise_r+0x12>
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4798      	blx	r3
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	e7e0      	b.n	800b57e <_raise_r+0x12>

0800b5bc <raise>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	@ (800b5c8 <raise+0xc>)
 800b5be:	4601      	mov	r1, r0
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f7ff bfd3 	b.w	800b56c <_raise_r>
 800b5c6:	bf00      	nop
 800b5c8:	24000058 	.word	0x24000058

0800b5cc <_kill_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d07      	ldr	r5, [pc, #28]	@ (800b5ec <_kill_r+0x20>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	f7f5 fcaf 	bl	8000f3c <_kill>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	d102      	bne.n	800b5e8 <_kill_r+0x1c>
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	b103      	cbz	r3, 800b5e8 <_kill_r+0x1c>
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ea:	bf00      	nop
 800b5ec:	24000904 	.word	0x24000904

0800b5f0 <_getpid_r>:
 800b5f0:	f7f5 bc9c 	b.w	8000f2c <_getpid>

0800b5f4 <_malloc_usable_size_r>:
 800b5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f8:	1f18      	subs	r0, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bfbc      	itt	lt
 800b5fe:	580b      	ldrlt	r3, [r1, r0]
 800b600:	18c0      	addlt	r0, r0, r3
 800b602:	4770      	bx	lr

0800b604 <__swhatbuf_r>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60c:	2900      	cmp	r1, #0
 800b60e:	b096      	sub	sp, #88	@ 0x58
 800b610:	4615      	mov	r5, r2
 800b612:	461e      	mov	r6, r3
 800b614:	da0d      	bge.n	800b632 <__swhatbuf_r+0x2e>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	bf14      	ite	ne
 800b622:	2340      	movne	r3, #64	@ 0x40
 800b624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b628:	2000      	movs	r0, #0
 800b62a:	6031      	str	r1, [r6, #0]
 800b62c:	602b      	str	r3, [r5, #0]
 800b62e:	b016      	add	sp, #88	@ 0x58
 800b630:	bd70      	pop	{r4, r5, r6, pc}
 800b632:	466a      	mov	r2, sp
 800b634:	f000 f848 	bl	800b6c8 <_fstat_r>
 800b638:	2800      	cmp	r0, #0
 800b63a:	dbec      	blt.n	800b616 <__swhatbuf_r+0x12>
 800b63c:	9901      	ldr	r1, [sp, #4]
 800b63e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b646:	4259      	negs	r1, r3
 800b648:	4159      	adcs	r1, r3
 800b64a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b64e:	e7eb      	b.n	800b628 <__swhatbuf_r+0x24>

0800b650 <__smakebuf_r>:
 800b650:	898b      	ldrh	r3, [r1, #12]
 800b652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b654:	079d      	lsls	r5, r3, #30
 800b656:	4606      	mov	r6, r0
 800b658:	460c      	mov	r4, r1
 800b65a:	d507      	bpl.n	800b66c <__smakebuf_r+0x1c>
 800b65c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	6123      	str	r3, [r4, #16]
 800b664:	2301      	movs	r3, #1
 800b666:	6163      	str	r3, [r4, #20]
 800b668:	b003      	add	sp, #12
 800b66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b66c:	ab01      	add	r3, sp, #4
 800b66e:	466a      	mov	r2, sp
 800b670:	f7ff ffc8 	bl	800b604 <__swhatbuf_r>
 800b674:	9f00      	ldr	r7, [sp, #0]
 800b676:	4605      	mov	r5, r0
 800b678:	4639      	mov	r1, r7
 800b67a:	4630      	mov	r0, r6
 800b67c:	f7fe fe8a 	bl	800a394 <_malloc_r>
 800b680:	b948      	cbnz	r0, 800b696 <__smakebuf_r+0x46>
 800b682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b686:	059a      	lsls	r2, r3, #22
 800b688:	d4ee      	bmi.n	800b668 <__smakebuf_r+0x18>
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	f043 0302 	orr.w	r3, r3, #2
 800b692:	81a3      	strh	r3, [r4, #12]
 800b694:	e7e2      	b.n	800b65c <__smakebuf_r+0xc>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	6020      	str	r0, [r4, #0]
 800b69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	9b01      	ldr	r3, [sp, #4]
 800b6a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6a6:	b15b      	cbz	r3, 800b6c0 <__smakebuf_r+0x70>
 800b6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f000 f81d 	bl	800b6ec <_isatty_r>
 800b6b2:	b128      	cbz	r0, 800b6c0 <__smakebuf_r+0x70>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	f043 0301 	orr.w	r3, r3, #1
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	431d      	orrs	r5, r3
 800b6c4:	81a5      	strh	r5, [r4, #12]
 800b6c6:	e7cf      	b.n	800b668 <__smakebuf_r+0x18>

0800b6c8 <_fstat_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	@ (800b6e8 <_fstat_r+0x20>)
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	f7f5 fc91 	bl	8000ffc <_fstat>
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	d102      	bne.n	800b6e4 <_fstat_r+0x1c>
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	b103      	cbz	r3, 800b6e4 <_fstat_r+0x1c>
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	bd38      	pop	{r3, r4, r5, pc}
 800b6e6:	bf00      	nop
 800b6e8:	24000904 	.word	0x24000904

0800b6ec <_isatty_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4d06      	ldr	r5, [pc, #24]	@ (800b708 <_isatty_r+0x1c>)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f5 fc90 	bl	800101c <_isatty>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_isatty_r+0x1a>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_isatty_r+0x1a>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	24000904 	.word	0x24000904

0800b70c <_init>:
 800b70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70e:	bf00      	nop
 800b710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b712:	bc08      	pop	{r3}
 800b714:	469e      	mov	lr, r3
 800b716:	4770      	bx	lr

0800b718 <_fini>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	bf00      	nop
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

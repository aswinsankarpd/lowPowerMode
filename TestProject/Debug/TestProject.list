
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b000  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b42c  0800b42c  0000c42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b434  0800b434  0000c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b438  0800b438  0000c438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a8  24000000  0800b43c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000a8  0800b4e4  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000108  0800b544  0000d108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  24000168  0800b5a4  0000d168  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  24000710  0800b5a4  0000d710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b0  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d7  00000000  00000000  00024a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00027d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b77  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035678  00000000  00000000  000297bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c4  00000000  00000000  0005ee37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00148881  00000000  00000000  000785fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  001c0ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001c546c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b2b8 	.word	0x0800b2b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b2b8 	.word	0x0800b2b8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:
static void parseCommand(void);

static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

	commandRxd = getCmdReceivedFlag();
 80006ca:	f009 fcfd 	bl	800a0c8 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

	if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <debugCLITask+0x2e>
	{
		parseCommand();
 80006e0:	f000 f80a 	bl	80006f8 <parseCommand>

		processCommand();
 80006e4:	f000 f834 	bl	8000750 <processCommand>

		setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f009 fcf9 	bl	800a0e0 <setCmdReceivedFlag>
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <parseCommand>:


static void parseCommand(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	uint16_t pData = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80fb      	strh	r3, [r7, #6]

	static uint16_t cmdIdx = 0;

	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000702:	e011      	b.n	8000728 <parseCommand+0x30>
	{
		commandBuffer[cmdIdx++] = pData;
 8000704:	88f9      	ldrh	r1, [r7, #6]
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <parseCommand+0x50>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	b290      	uxth	r0, r2
 800070e:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <parseCommand+0x50>)
 8000710:	8010      	strh	r0, [r2, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	b2c9      	uxtb	r1, r1
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <parseCommand+0x54>)
 8000718:	5499      	strb	r1, [r3, r2]

		if(pData == 0x0D)
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	2b0d      	cmp	r3, #13
 800071e:	d103      	bne.n	8000728 <parseCommand+0x30>
		{
			cmdIdx = 0;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <parseCommand+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	801a      	strh	r2, [r3, #0]
			break;
 8000726:	e00b      	b.n	8000740 <parseCommand+0x48>
	while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000728:	f009 fcea 	bl	800a100 <getRxBuffer>
 800072c:	4602      	mov	r2, r0
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	4619      	mov	r1, r3
 8000732:	4610      	mov	r0, r2
 8000734:	f009 fd71 	bl	800a21a <circularBufferDequeue>
 8000738:	4603      	mov	r3, r0
 800073a:	2b04      	cmp	r3, #4
 800073c:	d0e2      	beq.n	8000704 <parseCommand+0xc>
		}
	}

}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	240003ac 	.word	0x240003ac
 800074c:	24000184 	.word	0x24000184

08000750 <processCommand>:

static void processCommand(void)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
	uint8_t argIndex = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdIdx = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]

	args[argIndex] = strtok(commandBuffer," ");
 800075e:	79fc      	ldrb	r4, [r7, #7]
 8000760:	4926      	ldr	r1, [pc, #152]	@ (80007fc <processCommand+0xac>)
 8000762:	4827      	ldr	r0, [pc, #156]	@ (8000800 <processCommand+0xb0>)
 8000764:	f009 ff62 	bl	800a62c <strtok>
 8000768:	4603      	mov	r3, r0
 800076a:	4a26      	ldr	r2, [pc, #152]	@ (8000804 <processCommand+0xb4>)
 800076c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	while(args[argIndex] != NULL)
 8000770:	e00b      	b.n	800078a <processCommand+0x3a>
	{
		argIndex++;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3301      	adds	r3, #1
 8000776:	71fb      	strb	r3, [r7, #7]
		args[argIndex] = strtok(NULL, " ");
 8000778:	79fc      	ldrb	r4, [r7, #7]
 800077a:	4920      	ldr	r1, [pc, #128]	@ (80007fc <processCommand+0xac>)
 800077c:	2000      	movs	r0, #0
 800077e:	f009 ff55 	bl	800a62c <strtok>
 8000782:	4603      	mov	r3, r0
 8000784:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <processCommand+0xb4>)
 8000786:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	while(args[argIndex] != NULL)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <processCommand+0xb4>)
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ed      	bne.n	8000772 <processCommand+0x22>
	}

	argIndex = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]

	sCommandStruct_t * commandStruct = mainCommandTable;
 800079a:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <processCommand+0xb8>)
 800079c:	603b      	str	r3, [r7, #0]

	while(commandStruct[cmdIdx].command != NULL)
 800079e:	e01d      	b.n	80007dc <processCommand+0x8c>
	{
		if(strcmp(commandStruct[cmdIdx++].command, args[argIndex]) == 0 )
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	71ba      	strb	r2, [r7, #6]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	461a      	mov	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4912      	ldr	r1, [pc, #72]	@ (8000804 <processCommand+0xb4>)
 80007bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4610      	mov	r0, r2
 80007c4:	f7ff fda4 	bl	8000310 <strcmp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d106      	bne.n	80007dc <processCommand+0x8c>
		{
			HAL_UART_Transmit(&huart3, "mainCmdOK", 7, 100);
 80007ce:	2364      	movs	r3, #100	@ 0x64
 80007d0:	2207      	movs	r2, #7
 80007d2:	490e      	ldr	r1, [pc, #56]	@ (800080c <processCommand+0xbc>)
 80007d4:	480e      	ldr	r0, [pc, #56]	@ (8000810 <processCommand+0xc0>)
 80007d6:	f007 f951 	bl	8007a7c <HAL_UART_Transmit>
			break;
 80007da:	e00b      	b.n	80007f4 <processCommand+0xa4>
	while(commandStruct[cmdIdx].command != NULL)
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	461a      	mov	r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1d6      	bne.n	80007a0 <processCommand+0x50>
		}


	}
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd90      	pop	{r4, r7, pc}
 80007fc:	0800b2e0 	.word	0x0800b2e0
 8000800:	24000184 	.word	0x24000184
 8000804:	24000384 	.word	0x24000384
 8000808:	24000018 	.word	0x24000018
 800080c:	0800b2e4 	.word	0x0800b2e4
 8000810:	240004a4 	.word	0x240004a4

08000814 <sampleGetFunction>:

static void sampleGetFunction(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, "get Cmd", 7, 100);
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	2207      	movs	r2, #7
 800081c:	4902      	ldr	r1, [pc, #8]	@ (8000828 <sampleGetFunction+0x14>)
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <sampleGetFunction+0x18>)
 8000820:	f007 f92c 	bl	8007a7c <HAL_UART_Transmit>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0800b2f0 	.word	0x0800b2f0
 800082c:	240004a4 	.word	0x240004a4

08000830 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000834:	2210      	movs	r2, #16
 8000836:	4904      	ldr	r1, [pc, #16]	@ (8000848 <systemInit+0x18>)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <systemInit+0x1c>)
 800083a:	f007 f9ad 	bl	8007b98 <HAL_UART_Transmit_IT>

	debugUartInit();
 800083e:	f009 fc25 	bl	800a08c <debugUartInit>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	0800b2f8 	.word	0x0800b2f8
 800084c:	240004a4 	.word	0x240004a4

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_DMA_Init+0x3c>)
 8000858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800085c:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <MX_DMA_Init+0x3c>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_DMA_Init+0x3c>)
 8000868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	200b      	movs	r0, #11
 800087a:	f000 feea 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800087e:	200b      	movs	r0, #11
 8000880:	f000 ff01 	bl	8001686 <HAL_NVIC_EnableIRQ>

}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024400 	.word	0x58024400

08000890 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_ETH_Init+0x80>)
 8000896:	4a1f      	ldr	r2, [pc, #124]	@ (8000914 <MX_ETH_Init+0x84>)
 8000898:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_ETH_Init+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_ETH_Init+0x88>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_ETH_Init+0x88>)
 80008a8:	22e1      	movs	r2, #225	@ 0xe1
 80008aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_ETH_Init+0x88>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_ETH_Init+0x88>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_ETH_Init+0x80>)
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_ETH_Init+0x88>)
 80008c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_ETH_Init+0x80>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_ETH_Init+0x80>)
 80008cc:	4a13      	ldr	r2, [pc, #76]	@ (800091c <MX_ETH_Init+0x8c>)
 80008ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_ETH_Init+0x80>)
 80008d2:	4a13      	ldr	r2, [pc, #76]	@ (8000920 <MX_ETH_Init+0x90>)
 80008d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_ETH_Init+0x80>)
 80008d8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008de:	480c      	ldr	r0, [pc, #48]	@ (8000910 <MX_ETH_Init+0x80>)
 80008e0:	f003 fd24 	bl	800432c <HAL_ETH_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008ea:	f000 fa6d 	bl	8000dc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ee:	2238      	movs	r2, #56	@ 0x38
 80008f0:	2100      	movs	r1, #0
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <MX_ETH_Init+0x94>)
 80008f4:	f009 fe91 	bl	800a61a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_ETH_Init+0x94>)
 80008fa:	2221      	movs	r2, #33	@ 0x21
 80008fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_ETH_Init+0x94>)
 8000900:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000904:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_ETH_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	240003e8 	.word	0x240003e8
 8000914:	40028000 	.word	0x40028000
 8000918:	24000498 	.word	0x24000498
 800091c:	24000108 	.word	0x24000108
 8000920:	240000a8 	.word	0x240000a8
 8000924:	240003b0 	.word	0x240003b0

08000928 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	@ 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a59      	ldr	r2, [pc, #356]	@ (8000aac <HAL_ETH_MspInit+0x184>)
 8000946:	4293      	cmp	r3, r2
 8000948:	f040 80ab 	bne.w	8000aa2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800094c:	4b58      	ldr	r3, [pc, #352]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800094e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000952:	4a57      	ldr	r2, [pc, #348]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000958:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800095c:	4b54      	ldr	r3, [pc, #336]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800095e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000966:	623b      	str	r3, [r7, #32]
 8000968:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800096a:	4b51      	ldr	r3, [pc, #324]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800096c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000970:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000976:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800097a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800097c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000988:	4b49      	ldr	r3, [pc, #292]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800098a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800098e:	4a48      	ldr	r2, [pc, #288]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000998:	4b45      	ldr	r3, [pc, #276]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 800099a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800099e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b42      	ldr	r3, [pc, #264]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	4a40      	ldr	r2, [pc, #256]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ca:	4a39      	ldr	r2, [pc, #228]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d4:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a2a      	ldr	r2, [pc, #168]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <HAL_ETH_MspInit+0x188>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a1e:	2332      	movs	r3, #50	@ 0x32
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	481e      	ldr	r0, [pc, #120]	@ (8000ab4 <HAL_ETH_MspInit+0x18c>)
 8000a3a:	f004 f8ab 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a3e:	2386      	movs	r3, #134	@ 0x86
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4e:	230b      	movs	r3, #11
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <HAL_ETH_MspInit+0x190>)
 8000a5a:	f004 f89b 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a70:	230b      	movs	r3, #11
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4810      	ldr	r0, [pc, #64]	@ (8000abc <HAL_ETH_MspInit+0x194>)
 8000a7c:	f004 f88a 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a92:	230b      	movs	r3, #11
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <HAL_ETH_MspInit+0x198>)
 8000a9e:	f004 f879 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	@ 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40028000 	.word	0x40028000
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58020800 	.word	0x58020800
 8000ab8:	58020000 	.word	0x58020000
 8000abc:	58020400 	.word	0x58020400
 8000ac0:	58021800 	.word	0x58021800

08000ac4 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b71      	ldr	r3, [pc, #452]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a6f      	ldr	r2, [pc, #444]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b6d      	ldr	r3, [pc, #436]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af8:	4b69      	ldr	r3, [pc, #420]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a68      	ldr	r2, [pc, #416]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b65      	ldr	r3, [pc, #404]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b62      	ldr	r3, [pc, #392]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a60      	ldr	r2, [pc, #384]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b5e      	ldr	r3, [pc, #376]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a59      	ldr	r2, [pc, #356]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b56      	ldr	r3, [pc, #344]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b53      	ldr	r3, [pc, #332]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a51      	ldr	r2, [pc, #324]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0308 	and.w	r3, r3, #8
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a42      	ldr	r2, [pc, #264]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b40      	ldr	r3, [pc, #256]	@ (8000ca0 <MX_GPIO_Init+0x1dc>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bb2:	483c      	ldr	r0, [pc, #240]	@ (8000ca4 <MX_GPIO_Init+0x1e0>)
 8000bb4:	f004 f996 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bbe:	483a      	ldr	r0, [pc, #232]	@ (8000ca8 <MX_GPIO_Init+0x1e4>)
 8000bc0:	f004 f990 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4838      	ldr	r0, [pc, #224]	@ (8000cac <MX_GPIO_Init+0x1e8>)
 8000bca:	f004 f98b 	bl	8004ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4833      	ldr	r0, [pc, #204]	@ (8000cb0 <MX_GPIO_Init+0x1ec>)
 8000be4:	f003 ffd6 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000be8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4828      	ldr	r0, [pc, #160]	@ (8000ca4 <MX_GPIO_Init+0x1e0>)
 8000c02:	f003 ffc7 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0x1e4>)
 8000c20:	f003 ffb8 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c24:	2380      	movs	r3, #128	@ 0x80
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	481e      	ldr	r0, [pc, #120]	@ (8000cb4 <MX_GPIO_Init+0x1f0>)
 8000c3a:	f003 ffab 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4819      	ldr	r0, [pc, #100]	@ (8000cb8 <MX_GPIO_Init+0x1f4>)
 8000c54:	f003 ff9e 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	@ (8000cb8 <MX_GPIO_Init+0x1f4>)
 8000c76:	f003 ff8d 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4806      	ldr	r0, [pc, #24]	@ (8000cac <MX_GPIO_Init+0x1e8>)
 8000c92:	f003 ff7f 	bl	8004b94 <HAL_GPIO_Init>

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	@ 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58020400 	.word	0x58020400
 8000ca8:	58020c00 	.word	0x58020c00
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58021800 	.word	0x58021800
 8000cb8:	58020000 	.word	0x58020000

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc0:	f000 fb46 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc4:	f000 f810 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc8:	f7ff fefc 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ccc:	f7ff fdc0 	bl	8000850 <MX_DMA_Init>
  MX_ETH_Init();
 8000cd0:	f7ff fdde 	bl	8000890 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000cd4:	f000 fa1a 	bl	800110c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000cd8:	f000 fb08 	bl	80012ec <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000cdc:	f7ff fda8 	bl	8000830 <systemInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000ce0:	f7ff fcee 	bl	80006c0 <debugCLITask>
 8000ce4:	e7fc      	b.n	8000ce0 <main+0x24>
	...

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09c      	sub	sp, #112	@ 0x70
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	224c      	movs	r2, #76	@ 0x4c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f009 fc8f 	bl	800a61a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f009 fc89 	bl	800a61a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f004 f905 	bl	8004f18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc4 <SystemClock_Config+0xdc>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc4 <SystemClock_Config+0xdc>)
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <SystemClock_Config+0xdc>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2a:	bf00      	nop
 8000d2c:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <SystemClock_Config+0xdc>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d38:	d1f8      	bne.n	8000d2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d3a:	2321      	movs	r3, #33	@ 0x21
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d3e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000d54:	f240 1313 	movw	r3, #275	@ 0x113
 8000d58:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 f908 	bl	8004f8c <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d82:	f000 f821 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	233f      	movs	r3, #63	@ 0x3f
 8000d88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d92:	2308      	movs	r3, #8
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d96:	2340      	movs	r3, #64	@ 0x40
 8000d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d9a:	2340      	movs	r3, #64	@ 0x40
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da4:	2340      	movs	r3, #64	@ 0x40
 8000da6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2103      	movs	r1, #3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fcc7 	bl	8005740 <HAL_RCC_ClockConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000db8:	f000 f806 	bl	8000dc8 <Error_Handler>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3770      	adds	r7, #112	@ 0x70
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024800 	.word	0x58024800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de0:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58024400 	.word	0x58024400

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5e:	f000 fae9 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <DMA1_Stream0_IRQHandler+0x10>)
 8000e6e:	f001 ff4b 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000538 	.word	0x24000538

08000e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	f006 ff69 	bl	8007d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	240004a4 	.word	0x240004a4

08000e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_kill>:

int _kill(int pid, int sig)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eaa:	f009 fc71 	bl	800a790 <__errno>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2216      	movs	r2, #22
 8000eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_exit>:

void _exit (int status)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffe7 	bl	8000ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <_exit+0x12>

08000ed6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e00a      	b.n	8000efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee8:	f3af 8000 	nop.w
 8000eec:	4601      	mov	r1, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	60ba      	str	r2, [r7, #8]
 8000ef4:	b2ca      	uxtb	r2, r1
 8000ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf0      	blt.n	8000ee8 <_read+0x12>
  }

  return len;
 8000f06:	687b      	ldr	r3, [r7, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e009      	b.n	8000f36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	60ba      	str	r2, [r7, #8]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbf1      	blt.n	8000f22 <_write+0x12>
  }
  return len;
 8000f3e:	687b      	ldr	r3, [r7, #4]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_close>:

int _close(int file)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f70:	605a      	str	r2, [r3, #4]
  return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_isatty>:

int _isatty(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b085      	sub	sp, #20
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	@ (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f009 fbd6 	bl	800a790 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	24050000 	.word	0x24050000
 8001010:	00000400 	.word	0x00000400
 8001014:	240004a0 	.word	0x240004a0
 8001018:	24000710 	.word	0x24000710

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001020:	4b32      	ldr	r3, [pc, #200]	@ (80010ec <SystemInit+0xd0>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001026:	4a31      	ldr	r2, [pc, #196]	@ (80010ec <SystemInit+0xd0>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <SystemInit+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	2b06      	cmp	r3, #6
 800103a:	d807      	bhi.n	800104c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <SystemInit+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	4a2a      	ldr	r2, [pc, #168]	@ (80010f0 <SystemInit+0xd4>)
 8001046:	f043 0307 	orr.w	r3, r3, #7
 800104a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <SystemInit+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a28      	ldr	r2, [pc, #160]	@ (80010f4 <SystemInit+0xd8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <SystemInit+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <SystemInit+0xd8>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4924      	ldr	r1, [pc, #144]	@ (80010f4 <SystemInit+0xd8>)
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <SystemInit+0xdc>)
 8001066:	4013      	ands	r3, r2
 8001068:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <SystemInit+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <SystemInit+0xd4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <SystemInit+0xd4>)
 8001080:	f043 0307 	orr.w	r3, r3, #7
 8001084:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <SystemInit+0xd8>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <SystemInit+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <SystemInit+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <SystemInit+0xd8>)
 800109a:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <SystemInit+0xe0>)
 800109c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <SystemInit+0xd8>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <SystemInit+0xe4>)
 80010a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <SystemInit+0xd8>)
 80010a6:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <SystemInit+0xe8>)
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <SystemInit+0xd8>)
 80010b2:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <SystemInit+0xe8>)
 80010b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <SystemInit+0xd8>)
 80010be:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <SystemInit+0xe8>)
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <SystemInit+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <SystemInit+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SystemInit+0xd8>)
 80010ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <SystemInit+0xd8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <SystemInit+0xec>)
 80010dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	52002000 	.word	0x52002000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010fc:	02020200 	.word	0x02020200
 8001100:	01ff0000 	.word	0x01ff0000
 8001104:	01010280 	.word	0x01010280
 8001108:	52004000 	.word	0x52004000

0800110c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001112:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <MX_USART3_UART_Init+0x94>)
 8001114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001118:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800111c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_USART3_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_USART3_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001156:	f006 fc41 	bl	80079dc <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f7ff fe32 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	@ (800119c <MX_USART3_UART_Init+0x90>)
 8001168:	f008 fe71 	bl	8009e4e <HAL_UARTEx_SetTxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001172:	f7ff fe29 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <MX_USART3_UART_Init+0x90>)
 800117a:	f008 fea6 	bl	8009eca <HAL_UARTEx_SetRxFifoThreshold>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001184:	f7ff fe20 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_USART3_UART_Init+0x90>)
 800118a:	f008 fe27 	bl	8009ddc <HAL_UARTEx_DisableFifoMode>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001194:	f7ff fe18 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	240004a4 	.word	0x240004a4
 80011a0:	40004800 	.word	0x40004800

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0b8      	sub	sp, #224	@ 0xe0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22b8      	movs	r2, #184	@ 0xb8
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f009 fa28 	bl	800a61a <memset>
  if(uartHandle->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a42      	ldr	r2, [pc, #264]	@ (80012d8 <HAL_UART_MspInit+0x134>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d17c      	bne.n	80012ce <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	f04f 0202 	mov.w	r2, #2
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 fe34 	bl	8005e58 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011f6:	f7ff fde7 	bl	8000dc8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_UART_MspInit+0x138>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001200:	4a36      	ldr	r2, [pc, #216]	@ (80012dc <HAL_UART_MspInit+0x138>)
 8001202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001206:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800120a:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_UART_MspInit+0x138>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <HAL_UART_MspInit+0x138>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	4a2f      	ldr	r2, [pc, #188]	@ (80012dc <HAL_UART_MspInit+0x138>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <HAL_UART_MspInit+0x138>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800123a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001256:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <HAL_UART_MspInit+0x13c>)
 800125e:	f003 fc99 	bl	8004b94 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <HAL_UART_MspInit+0x144>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 800126a:	222d      	movs	r2, #45	@ 0x2d
 800126c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 800127c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001280:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012a0:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 80012a2:	f000 fa0b 	bl	80016bc <HAL_DMA_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012ac:	f7ff fd8c 	bl	8000dc8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 80012b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_UART_MspInit+0x140>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2027      	movs	r0, #39	@ 0x27
 80012c4:	f000 f9c5 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012c8:	2027      	movs	r0, #39	@ 0x27
 80012ca:	f000 f9dc 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	@ 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004800 	.word	0x40004800
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020c00 	.word	0x58020c00
 80012e4:	24000538 	.word	0x24000538
 80012e8:	40020010 	.word	0x40020010

080012ec <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001300:	f7ff fe8c 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	@ (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	@ (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f009 fa37 	bl	800a79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fcc5 	bl	8000cbc <main>
  bx  lr
 8001332:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001334:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001338:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800133c:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8001340:	0800b43c 	.word	0x0800b43c
  ldr r2, =_sbss
 8001344:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001348:	24000710 	.word	0x24000710

0800134c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC3_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001356:	2003      	movs	r0, #3
 8001358:	f000 f970 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800135c:	f004 fba6 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4913      	ldr	r1, [pc, #76]	@ (80013bc <HAL_Init+0x6c>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_Init+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <HAL_Init+0x6c>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <HAL_Init+0x70>)
 8001392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_Init+0x74>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f814 	bl	80013c8 <HAL_InitTick>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e002      	b.n	80013b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013aa:	f7ff fd13 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400
 80013bc:	0800b30c 	.word	0x0800b30c
 80013c0:	24000040 	.word	0x24000040
 80013c4:	2400003c 	.word	0x2400003c

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_InitTick+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e021      	b.n	8001420 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <HAL_InitTick+0x64>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f955 	bl	80016a2 <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f91f 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	@ (8001430 <HAL_InitTick+0x68>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000048 	.word	0x24000048
 800142c:	2400003c 	.word	0x2400003c
 8001430:	24000044 	.word	0x24000044

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	24000048 	.word	0x24000048
 8001458:	240005b0 	.word	0x240005b0

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	240005b0 	.word	0x240005b0

08001474 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001484:	4904      	ldr	r1, [pc, #16]	@ (8001498 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	58000400 	.word	0x58000400

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	05fa0000 	.word	0x05fa0000

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	@ (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff40 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff33 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa4 	bl	80015f8 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff feca 	bl	800145c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e312      	b.n	8001cfa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a66      	ldr	r2, [pc, #408]	@ (8001874 <HAL_DMA_Init+0x1b8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d04a      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a65      	ldr	r2, [pc, #404]	@ (8001878 <HAL_DMA_Init+0x1bc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d045      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a63      	ldr	r2, [pc, #396]	@ (800187c <HAL_DMA_Init+0x1c0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d040      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a62      	ldr	r2, [pc, #392]	@ (8001880 <HAL_DMA_Init+0x1c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d03b      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a60      	ldr	r2, [pc, #384]	@ (8001884 <HAL_DMA_Init+0x1c8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d036      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5f      	ldr	r2, [pc, #380]	@ (8001888 <HAL_DMA_Init+0x1cc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d031      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a5d      	ldr	r2, [pc, #372]	@ (800188c <HAL_DMA_Init+0x1d0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02c      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a5c      	ldr	r2, [pc, #368]	@ (8001890 <HAL_DMA_Init+0x1d4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d027      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5a      	ldr	r2, [pc, #360]	@ (8001894 <HAL_DMA_Init+0x1d8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d022      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a59      	ldr	r2, [pc, #356]	@ (8001898 <HAL_DMA_Init+0x1dc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d01d      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a57      	ldr	r2, [pc, #348]	@ (800189c <HAL_DMA_Init+0x1e0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d018      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a56      	ldr	r2, [pc, #344]	@ (80018a0 <HAL_DMA_Init+0x1e4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <HAL_DMA_Init+0x1e8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00e      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a53      	ldr	r2, [pc, #332]	@ (80018a8 <HAL_DMA_Init+0x1ec>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a51      	ldr	r2, [pc, #324]	@ (80018ac <HAL_DMA_Init+0x1f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_DMA_Init+0xb8>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a50      	ldr	r2, [pc, #320]	@ (80018b0 <HAL_DMA_Init+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_DMA_Init+0xbc>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_DMA_Init+0xbe>
 8001778:	2300      	movs	r3, #0
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 813c 	beq.w	80019f8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a37      	ldr	r2, [pc, #220]	@ (8001874 <HAL_DMA_Init+0x1b8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d04a      	beq.n	8001830 <HAL_DMA_Init+0x174>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a36      	ldr	r2, [pc, #216]	@ (8001878 <HAL_DMA_Init+0x1bc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d045      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a34      	ldr	r2, [pc, #208]	@ (800187c <HAL_DMA_Init+0x1c0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d040      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a33      	ldr	r2, [pc, #204]	@ (8001880 <HAL_DMA_Init+0x1c4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d03b      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <HAL_DMA_Init+0x1c8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d036      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a30      	ldr	r2, [pc, #192]	@ (8001888 <HAL_DMA_Init+0x1cc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d031      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2e      	ldr	r2, [pc, #184]	@ (800188c <HAL_DMA_Init+0x1d0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02c      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <HAL_DMA_Init+0x1d4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d027      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <HAL_DMA_Init+0x1d8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d022      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001898 <HAL_DMA_Init+0x1dc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d01d      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_DMA_Init+0x1e0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d018      	beq.n	8001830 <HAL_DMA_Init+0x174>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <HAL_DMA_Init+0x1e4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d013      	beq.n	8001830 <HAL_DMA_Init+0x174>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <HAL_DMA_Init+0x1e8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00e      	beq.n	8001830 <HAL_DMA_Init+0x174>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a24      	ldr	r2, [pc, #144]	@ (80018a8 <HAL_DMA_Init+0x1ec>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d009      	beq.n	8001830 <HAL_DMA_Init+0x174>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <HAL_DMA_Init+0x1f0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d004      	beq.n	8001830 <HAL_DMA_Init+0x174>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a21      	ldr	r2, [pc, #132]	@ (80018b0 <HAL_DMA_Init+0x1f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d108      	bne.n	8001842 <HAL_DMA_Init+0x186>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_DMA_Init+0x196>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001852:	e02f      	b.n	80018b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001854:	f7ff fe02 	bl	800145c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b05      	cmp	r3, #5
 8001860:	d928      	bls.n	80018b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e242      	b.n	8001cfa <HAL_DMA_Init+0x63e>
 8001874:	40020010 	.word	0x40020010
 8001878:	40020028 	.word	0x40020028
 800187c:	40020040 	.word	0x40020040
 8001880:	40020058 	.word	0x40020058
 8001884:	40020070 	.word	0x40020070
 8001888:	40020088 	.word	0x40020088
 800188c:	400200a0 	.word	0x400200a0
 8001890:	400200b8 	.word	0x400200b8
 8001894:	40020410 	.word	0x40020410
 8001898:	40020428 	.word	0x40020428
 800189c:	40020440 	.word	0x40020440
 80018a0:	40020458 	.word	0x40020458
 80018a4:	40020470 	.word	0x40020470
 80018a8:	40020488 	.word	0x40020488
 80018ac:	400204a0 	.word	0x400204a0
 80018b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1c8      	bne.n	8001854 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4b83      	ldr	r3, [pc, #524]	@ (8001adc <HAL_DMA_Init+0x420>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	2b04      	cmp	r3, #4
 8001906:	d107      	bne.n	8001918 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	4313      	orrs	r3, r2
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b28      	cmp	r3, #40	@ 0x28
 800191e:	d903      	bls.n	8001928 <HAL_DMA_Init+0x26c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b2e      	cmp	r3, #46	@ 0x2e
 8001926:	d91f      	bls.n	8001968 <HAL_DMA_Init+0x2ac>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b3e      	cmp	r3, #62	@ 0x3e
 800192e:	d903      	bls.n	8001938 <HAL_DMA_Init+0x27c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b42      	cmp	r3, #66	@ 0x42
 8001936:	d917      	bls.n	8001968 <HAL_DMA_Init+0x2ac>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b46      	cmp	r3, #70	@ 0x46
 800193e:	d903      	bls.n	8001948 <HAL_DMA_Init+0x28c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b48      	cmp	r3, #72	@ 0x48
 8001946:	d90f      	bls.n	8001968 <HAL_DMA_Init+0x2ac>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b4e      	cmp	r3, #78	@ 0x4e
 800194e:	d903      	bls.n	8001958 <HAL_DMA_Init+0x29c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b52      	cmp	r3, #82	@ 0x52
 8001956:	d907      	bls.n	8001968 <HAL_DMA_Init+0x2ac>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b73      	cmp	r3, #115	@ 0x73
 800195e:	d905      	bls.n	800196c <HAL_DMA_Init+0x2b0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b77      	cmp	r3, #119	@ 0x77
 8001966:	d801      	bhi.n	800196c <HAL_DMA_Init+0x2b0>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_DMA_Init+0x2b2>
 800196c:	2300      	movs	r3, #0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001978:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f023 0307 	bic.w	r3, r3, #7
 8001990:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d117      	bne.n	80019d4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00e      	beq.n	80019d4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f002 fb2e 	bl	8004018 <DMA_CheckFifoParam>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2240      	movs	r2, #64	@ 0x40
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e192      	b.n	8001cfa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f002 fa69 	bl	8003eb4 <DMA_CalcBaseAndBitshift>
 80019e2:	4603      	mov	r3, r0
 80019e4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	223f      	movs	r2, #63	@ 0x3f
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e0c8      	b.n	8001b8a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a38      	ldr	r2, [pc, #224]	@ (8001ae0 <HAL_DMA_Init+0x424>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a37      	ldr	r2, [pc, #220]	@ (8001ae4 <HAL_DMA_Init+0x428>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01d      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a35      	ldr	r2, [pc, #212]	@ (8001ae8 <HAL_DMA_Init+0x42c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a34      	ldr	r2, [pc, #208]	@ (8001aec <HAL_DMA_Init+0x430>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a32      	ldr	r2, [pc, #200]	@ (8001af0 <HAL_DMA_Init+0x434>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a31      	ldr	r2, [pc, #196]	@ (8001af4 <HAL_DMA_Init+0x438>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2f      	ldr	r2, [pc, #188]	@ (8001af8 <HAL_DMA_Init+0x43c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_DMA_Init+0x38c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2e      	ldr	r2, [pc, #184]	@ (8001afc <HAL_DMA_Init+0x440>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_DMA_Init+0x390>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_Init+0x392>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8092 	beq.w	8001b78 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <HAL_DMA_Init+0x424>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d021      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <HAL_DMA_Init+0x428>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d01c      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <HAL_DMA_Init+0x42c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d017      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_DMA_Init+0x430>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_DMA_Init+0x434>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <HAL_DMA_Init+0x438>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a18      	ldr	r2, [pc, #96]	@ (8001af8 <HAL_DMA_Init+0x43c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_DMA_Init+0x3e6>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_DMA_Init+0x440>)
 8001aa0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_DMA_Init+0x444>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b40      	cmp	r3, #64	@ 0x40
 8001ac8:	d01c      	beq.n	8001b04 <HAL_DMA_Init+0x448>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b80      	cmp	r3, #128	@ 0x80
 8001ad0:	d102      	bne.n	8001ad8 <HAL_DMA_Init+0x41c>
 8001ad2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ad6:	e016      	b.n	8001b06 <HAL_DMA_Init+0x44a>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e014      	b.n	8001b06 <HAL_DMA_Init+0x44a>
 8001adc:	fe10803f 	.word	0xfe10803f
 8001ae0:	58025408 	.word	0x58025408
 8001ae4:	5802541c 	.word	0x5802541c
 8001ae8:	58025430 	.word	0x58025430
 8001aec:	58025444 	.word	0x58025444
 8001af0:	58025458 	.word	0x58025458
 8001af4:	5802546c 	.word	0x5802546c
 8001af8:	58025480 	.word	0x58025480
 8001afc:	58025494 	.word	0x58025494
 8001b00:	fffe000f 	.word	0xfffe000f
 8001b04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68d2      	ldr	r2, [r2, #12]
 8001b0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d04 <HAL_DMA_Init+0x648>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d08 <HAL_DMA_Init+0x64c>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	009a      	lsls	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f002 f9a9 	bl	8003eb4 <DMA_CalcBaseAndBitshift>
 8001b62:	4603      	mov	r3, r0
 8001b64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2201      	movs	r2, #1
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	e008      	b.n	8001b8a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0b7      	b.n	8001cfa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d0c <HAL_DMA_Init+0x650>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d072      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_DMA_Init+0x654>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d06d      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d14 <HAL_DMA_Init+0x658>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d068      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5a      	ldr	r2, [pc, #360]	@ (8001d18 <HAL_DMA_Init+0x65c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d063      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a59      	ldr	r2, [pc, #356]	@ (8001d1c <HAL_DMA_Init+0x660>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d05e      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a57      	ldr	r2, [pc, #348]	@ (8001d20 <HAL_DMA_Init+0x664>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d059      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a56      	ldr	r2, [pc, #344]	@ (8001d24 <HAL_DMA_Init+0x668>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d054      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	@ (8001d28 <HAL_DMA_Init+0x66c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d04f      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a53      	ldr	r2, [pc, #332]	@ (8001d2c <HAL_DMA_Init+0x670>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04a      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a51      	ldr	r2, [pc, #324]	@ (8001d30 <HAL_DMA_Init+0x674>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d045      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a50      	ldr	r2, [pc, #320]	@ (8001d34 <HAL_DMA_Init+0x678>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d040      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d38 <HAL_DMA_Init+0x67c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d03b      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4d      	ldr	r2, [pc, #308]	@ (8001d3c <HAL_DMA_Init+0x680>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d036      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	@ (8001d40 <HAL_DMA_Init+0x684>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d44 <HAL_DMA_Init+0x688>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d02c      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a48      	ldr	r2, [pc, #288]	@ (8001d48 <HAL_DMA_Init+0x68c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d027      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a47      	ldr	r2, [pc, #284]	@ (8001d4c <HAL_DMA_Init+0x690>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d022      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a45      	ldr	r2, [pc, #276]	@ (8001d50 <HAL_DMA_Init+0x694>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01d      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a44      	ldr	r2, [pc, #272]	@ (8001d54 <HAL_DMA_Init+0x698>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d018      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_DMA_Init+0x69c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a41      	ldr	r2, [pc, #260]	@ (8001d5c <HAL_DMA_Init+0x6a0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00e      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a3f      	ldr	r2, [pc, #252]	@ (8001d60 <HAL_DMA_Init+0x6a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d64 <HAL_DMA_Init+0x6a8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_DMA_Init+0x5be>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a3c      	ldr	r2, [pc, #240]	@ (8001d68 <HAL_DMA_Init+0x6ac>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Init+0x5c2>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_DMA_Init+0x5c4>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d032      	beq.n	8001cea <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f002 fa43 	bl	8004110 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b80      	cmp	r3, #128	@ 0x80
 8001c90:	d102      	bne.n	8001c98 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <HAL_DMA_Init+0x61c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d80c      	bhi.n	8001cd8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f002 fac0 	bl	8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	e008      	b.n	8001cea <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	a7fdabf8 	.word	0xa7fdabf8
 8001d08:	cccccccd 	.word	0xcccccccd
 8001d0c:	40020010 	.word	0x40020010
 8001d10:	40020028 	.word	0x40020028
 8001d14:	40020040 	.word	0x40020040
 8001d18:	40020058 	.word	0x40020058
 8001d1c:	40020070 	.word	0x40020070
 8001d20:	40020088 	.word	0x40020088
 8001d24:	400200a0 	.word	0x400200a0
 8001d28:	400200b8 	.word	0x400200b8
 8001d2c:	40020410 	.word	0x40020410
 8001d30:	40020428 	.word	0x40020428
 8001d34:	40020440 	.word	0x40020440
 8001d38:	40020458 	.word	0x40020458
 8001d3c:	40020470 	.word	0x40020470
 8001d40:	40020488 	.word	0x40020488
 8001d44:	400204a0 	.word	0x400204a0
 8001d48:	400204b8 	.word	0x400204b8
 8001d4c:	58025408 	.word	0x58025408
 8001d50:	5802541c 	.word	0x5802541c
 8001d54:	58025430 	.word	0x58025430
 8001d58:	58025444 	.word	0x58025444
 8001d5c:	58025458 	.word	0x58025458
 8001d60:	5802546c 	.word	0x5802546c
 8001d64:	58025480 	.word	0x58025480
 8001d68:	58025494 	.word	0x58025494

08001d6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e226      	b.n	80021d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_DMA_Start_IT+0x2a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e21f      	b.n	80021d6 <HAL_DMA_Start_IT+0x46a>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	f040 820a 	bne.w	80021c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a68      	ldr	r2, [pc, #416]	@ (8001f60 <HAL_DMA_Start_IT+0x1f4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04a      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a66      	ldr	r2, [pc, #408]	@ (8001f64 <HAL_DMA_Start_IT+0x1f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d045      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a65      	ldr	r2, [pc, #404]	@ (8001f68 <HAL_DMA_Start_IT+0x1fc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d040      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a63      	ldr	r2, [pc, #396]	@ (8001f6c <HAL_DMA_Start_IT+0x200>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d03b      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a62      	ldr	r2, [pc, #392]	@ (8001f70 <HAL_DMA_Start_IT+0x204>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d036      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a60      	ldr	r2, [pc, #384]	@ (8001f74 <HAL_DMA_Start_IT+0x208>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d031      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8001f78 <HAL_DMA_Start_IT+0x20c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d02c      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	@ (8001f7c <HAL_DMA_Start_IT+0x210>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d027      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001f80 <HAL_DMA_Start_IT+0x214>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_DMA_Start_IT+0x218>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a59      	ldr	r2, [pc, #356]	@ (8001f88 <HAL_DMA_Start_IT+0x21c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a57      	ldr	r2, [pc, #348]	@ (8001f8c <HAL_DMA_Start_IT+0x220>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_DMA_Start_IT+0x224>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a54      	ldr	r2, [pc, #336]	@ (8001f94 <HAL_DMA_Start_IT+0x228>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	@ (8001f98 <HAL_DMA_Start_IT+0x22c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Start_IT+0xee>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a51      	ldr	r2, [pc, #324]	@ (8001f9c <HAL_DMA_Start_IT+0x230>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_Start_IT+0x100>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_DMA_Start_IT+0x110>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f001 fe6a 	bl	8003b5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a34      	ldr	r2, [pc, #208]	@ (8001f60 <HAL_DMA_Start_IT+0x1f4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d04a      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a33      	ldr	r2, [pc, #204]	@ (8001f64 <HAL_DMA_Start_IT+0x1f8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d045      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a31      	ldr	r2, [pc, #196]	@ (8001f68 <HAL_DMA_Start_IT+0x1fc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d040      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_DMA_Start_IT+0x200>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d03b      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8001f70 <HAL_DMA_Start_IT+0x204>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d036      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8001f74 <HAL_DMA_Start_IT+0x208>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d031      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8001f78 <HAL_DMA_Start_IT+0x20c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02c      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <HAL_DMA_Start_IT+0x210>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d027      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a28      	ldr	r2, [pc, #160]	@ (8001f80 <HAL_DMA_Start_IT+0x214>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d022      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <HAL_DMA_Start_IT+0x218>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d01d      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <HAL_DMA_Start_IT+0x21c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a24      	ldr	r2, [pc, #144]	@ (8001f8c <HAL_DMA_Start_IT+0x220>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a22      	ldr	r2, [pc, #136]	@ (8001f90 <HAL_DMA_Start_IT+0x224>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <HAL_DMA_Start_IT+0x228>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_DMA_Start_IT+0x22c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_DMA_Start_IT+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_DMA_Start_IT+0x230>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Start_IT+0x1c0>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_DMA_Start_IT+0x1c2>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d036      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 021e 	bic.w	r2, r3, #30
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0216 	orr.w	r2, r2, #22
 8001f44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d03e      	beq.n	8001fcc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0208 	orr.w	r2, r2, #8
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e035      	b.n	8001fcc <HAL_DMA_Start_IT+0x260>
 8001f60:	40020010 	.word	0x40020010
 8001f64:	40020028 	.word	0x40020028
 8001f68:	40020040 	.word	0x40020040
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	40020070 	.word	0x40020070
 8001f74:	40020088 	.word	0x40020088
 8001f78:	400200a0 	.word	0x400200a0
 8001f7c:	400200b8 	.word	0x400200b8
 8001f80:	40020410 	.word	0x40020410
 8001f84:	40020428 	.word	0x40020428
 8001f88:	40020440 	.word	0x40020440
 8001f8c:	40020458 	.word	0x40020458
 8001f90:	40020470 	.word	0x40020470
 8001f94:	40020488 	.word	0x40020488
 8001f98:	400204a0 	.word	0x400204a0
 8001f9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020e 	bic.w	r2, r3, #14
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 020a 	orr.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0204 	orr.w	r2, r2, #4
 8001fca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a83      	ldr	r2, [pc, #524]	@ (80021e0 <HAL_DMA_Start_IT+0x474>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d072      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a82      	ldr	r2, [pc, #520]	@ (80021e4 <HAL_DMA_Start_IT+0x478>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d06d      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a80      	ldr	r2, [pc, #512]	@ (80021e8 <HAL_DMA_Start_IT+0x47c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d068      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7f      	ldr	r2, [pc, #508]	@ (80021ec <HAL_DMA_Start_IT+0x480>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d063      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7d      	ldr	r2, [pc, #500]	@ (80021f0 <HAL_DMA_Start_IT+0x484>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d05e      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <HAL_DMA_Start_IT+0x488>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d059      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a7a      	ldr	r2, [pc, #488]	@ (80021f8 <HAL_DMA_Start_IT+0x48c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d054      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a79      	ldr	r2, [pc, #484]	@ (80021fc <HAL_DMA_Start_IT+0x490>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04f      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a77      	ldr	r2, [pc, #476]	@ (8002200 <HAL_DMA_Start_IT+0x494>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d04a      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a76      	ldr	r2, [pc, #472]	@ (8002204 <HAL_DMA_Start_IT+0x498>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d045      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a74      	ldr	r2, [pc, #464]	@ (8002208 <HAL_DMA_Start_IT+0x49c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a73      	ldr	r2, [pc, #460]	@ (800220c <HAL_DMA_Start_IT+0x4a0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d03b      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a71      	ldr	r2, [pc, #452]	@ (8002210 <HAL_DMA_Start_IT+0x4a4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d036      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a70      	ldr	r2, [pc, #448]	@ (8002214 <HAL_DMA_Start_IT+0x4a8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d031      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6e      	ldr	r2, [pc, #440]	@ (8002218 <HAL_DMA_Start_IT+0x4ac>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02c      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6d      	ldr	r2, [pc, #436]	@ (800221c <HAL_DMA_Start_IT+0x4b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d027      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6b      	ldr	r2, [pc, #428]	@ (8002220 <HAL_DMA_Start_IT+0x4b4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d022      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6a      	ldr	r2, [pc, #424]	@ (8002224 <HAL_DMA_Start_IT+0x4b8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01d      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a68      	ldr	r2, [pc, #416]	@ (8002228 <HAL_DMA_Start_IT+0x4bc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d018      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a67      	ldr	r2, [pc, #412]	@ (800222c <HAL_DMA_Start_IT+0x4c0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a65      	ldr	r2, [pc, #404]	@ (8002230 <HAL_DMA_Start_IT+0x4c4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a64      	ldr	r2, [pc, #400]	@ (8002234 <HAL_DMA_Start_IT+0x4c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a62      	ldr	r2, [pc, #392]	@ (8002238 <HAL_DMA_Start_IT+0x4cc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_DMA_Start_IT+0x350>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <HAL_DMA_Start_IT+0x4d0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d101      	bne.n	80020c0 <HAL_DMA_Start_IT+0x354>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_DMA_Start_IT+0x356>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01a      	beq.n	80020fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a37      	ldr	r2, [pc, #220]	@ (80021e0 <HAL_DMA_Start_IT+0x474>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d04a      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a36      	ldr	r2, [pc, #216]	@ (80021e4 <HAL_DMA_Start_IT+0x478>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d045      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <HAL_DMA_Start_IT+0x47c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d040      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <HAL_DMA_Start_IT+0x480>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d03b      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a31      	ldr	r2, [pc, #196]	@ (80021f0 <HAL_DMA_Start_IT+0x484>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d036      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a30      	ldr	r2, [pc, #192]	@ (80021f4 <HAL_DMA_Start_IT+0x488>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d031      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2e      	ldr	r2, [pc, #184]	@ (80021f8 <HAL_DMA_Start_IT+0x48c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02c      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <HAL_DMA_Start_IT+0x490>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d027      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2b      	ldr	r2, [pc, #172]	@ (8002200 <HAL_DMA_Start_IT+0x494>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d022      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2a      	ldr	r2, [pc, #168]	@ (8002204 <HAL_DMA_Start_IT+0x498>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d01d      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a28      	ldr	r2, [pc, #160]	@ (8002208 <HAL_DMA_Start_IT+0x49c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d018      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a27      	ldr	r2, [pc, #156]	@ (800220c <HAL_DMA_Start_IT+0x4a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a25      	ldr	r2, [pc, #148]	@ (8002210 <HAL_DMA_Start_IT+0x4a4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00e      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a24      	ldr	r2, [pc, #144]	@ (8002214 <HAL_DMA_Start_IT+0x4a8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a22      	ldr	r2, [pc, #136]	@ (8002218 <HAL_DMA_Start_IT+0x4ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_DMA_Start_IT+0x430>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a21      	ldr	r2, [pc, #132]	@ (800221c <HAL_DMA_Start_IT+0x4b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d108      	bne.n	80021ae <HAL_DMA_Start_IT+0x442>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e012      	b.n	80021d4 <HAL_DMA_Start_IT+0x468>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e009      	b.n	80021d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020010 	.word	0x40020010
 80021e4:	40020028 	.word	0x40020028
 80021e8:	40020040 	.word	0x40020040
 80021ec:	40020058 	.word	0x40020058
 80021f0:	40020070 	.word	0x40020070
 80021f4:	40020088 	.word	0x40020088
 80021f8:	400200a0 	.word	0x400200a0
 80021fc:	400200b8 	.word	0x400200b8
 8002200:	40020410 	.word	0x40020410
 8002204:	40020428 	.word	0x40020428
 8002208:	40020440 	.word	0x40020440
 800220c:	40020458 	.word	0x40020458
 8002210:	40020470 	.word	0x40020470
 8002214:	40020488 	.word	0x40020488
 8002218:	400204a0 	.word	0x400204a0
 800221c:	400204b8 	.word	0x400204b8
 8002220:	58025408 	.word	0x58025408
 8002224:	5802541c 	.word	0x5802541c
 8002228:	58025430 	.word	0x58025430
 800222c:	58025444 	.word	0x58025444
 8002230:	58025458 	.word	0x58025458
 8002234:	5802546c 	.word	0x5802546c
 8002238:	58025480 	.word	0x58025480
 800223c:	58025494 	.word	0x58025494

08002240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff f908 	bl	800145c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e2dc      	b.n	8002812 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e2cd      	b.n	8002812 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a76      	ldr	r2, [pc, #472]	@ (8002454 <HAL_DMA_Abort+0x214>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a74      	ldr	r2, [pc, #464]	@ (8002458 <HAL_DMA_Abort+0x218>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a73      	ldr	r2, [pc, #460]	@ (800245c <HAL_DMA_Abort+0x21c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a71      	ldr	r2, [pc, #452]	@ (8002460 <HAL_DMA_Abort+0x220>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a70      	ldr	r2, [pc, #448]	@ (8002464 <HAL_DMA_Abort+0x224>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002468 <HAL_DMA_Abort+0x228>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6d      	ldr	r2, [pc, #436]	@ (800246c <HAL_DMA_Abort+0x22c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002470 <HAL_DMA_Abort+0x230>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002474 <HAL_DMA_Abort+0x234>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a68      	ldr	r2, [pc, #416]	@ (8002478 <HAL_DMA_Abort+0x238>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a67      	ldr	r2, [pc, #412]	@ (800247c <HAL_DMA_Abort+0x23c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a65      	ldr	r2, [pc, #404]	@ (8002480 <HAL_DMA_Abort+0x240>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a64      	ldr	r2, [pc, #400]	@ (8002484 <HAL_DMA_Abort+0x244>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a62      	ldr	r2, [pc, #392]	@ (8002488 <HAL_DMA_Abort+0x248>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a61      	ldr	r2, [pc, #388]	@ (800248c <HAL_DMA_Abort+0x24c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Abort+0xd6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5f      	ldr	r2, [pc, #380]	@ (8002490 <HAL_DMA_Abort+0x250>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_DMA_Abort+0xda>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_DMA_Abort+0xdc>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 021e 	bic.w	r2, r2, #30
 800232e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800233e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e00a      	b.n	800235e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020e 	bic.w	r2, r2, #14
 8002356:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	@ (8002454 <HAL_DMA_Abort+0x214>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d072      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3a      	ldr	r2, [pc, #232]	@ (8002458 <HAL_DMA_Abort+0x218>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d06d      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a39      	ldr	r2, [pc, #228]	@ (800245c <HAL_DMA_Abort+0x21c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d068      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a37      	ldr	r2, [pc, #220]	@ (8002460 <HAL_DMA_Abort+0x220>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d063      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a36      	ldr	r2, [pc, #216]	@ (8002464 <HAL_DMA_Abort+0x224>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d05e      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a34      	ldr	r2, [pc, #208]	@ (8002468 <HAL_DMA_Abort+0x228>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d059      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a33      	ldr	r2, [pc, #204]	@ (800246c <HAL_DMA_Abort+0x22c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d054      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a31      	ldr	r2, [pc, #196]	@ (8002470 <HAL_DMA_Abort+0x230>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d04f      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_DMA_Abort+0x234>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04a      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <HAL_DMA_Abort+0x238>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d045      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <HAL_DMA_Abort+0x23c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d040      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_DMA_Abort+0x240>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d03b      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_DMA_Abort+0x244>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d036      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a28      	ldr	r2, [pc, #160]	@ (8002488 <HAL_DMA_Abort+0x248>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <HAL_DMA_Abort+0x24c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d02c      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <HAL_DMA_Abort+0x250>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d027      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <HAL_DMA_Abort+0x254>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_DMA_Abort+0x258>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_DMA_Abort+0x25c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d018      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1f      	ldr	r2, [pc, #124]	@ (80024a0 <HAL_DMA_Abort+0x260>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <HAL_DMA_Abort+0x264>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <HAL_DMA_Abort+0x268>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <HAL_DMA_Abort+0x26c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_DMA_Abort+0x20e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <HAL_DMA_Abort+0x270>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d132      	bne.n	80024b4 <HAL_DMA_Abort+0x274>
 800244e:	2301      	movs	r3, #1
 8002450:	e031      	b.n	80024b6 <HAL_DMA_Abort+0x276>
 8002452:	bf00      	nop
 8002454:	40020010 	.word	0x40020010
 8002458:	40020028 	.word	0x40020028
 800245c:	40020040 	.word	0x40020040
 8002460:	40020058 	.word	0x40020058
 8002464:	40020070 	.word	0x40020070
 8002468:	40020088 	.word	0x40020088
 800246c:	400200a0 	.word	0x400200a0
 8002470:	400200b8 	.word	0x400200b8
 8002474:	40020410 	.word	0x40020410
 8002478:	40020428 	.word	0x40020428
 800247c:	40020440 	.word	0x40020440
 8002480:	40020458 	.word	0x40020458
 8002484:	40020470 	.word	0x40020470
 8002488:	40020488 	.word	0x40020488
 800248c:	400204a0 	.word	0x400204a0
 8002490:	400204b8 	.word	0x400204b8
 8002494:	58025408 	.word	0x58025408
 8002498:	5802541c 	.word	0x5802541c
 800249c:	58025430 	.word	0x58025430
 80024a0:	58025444 	.word	0x58025444
 80024a4:	58025458 	.word	0x58025458
 80024a8:	5802546c 	.word	0x5802546c
 80024ac:	58025480 	.word	0x58025480
 80024b0:	58025494 	.word	0x58025494
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002684 <HAL_DMA_Abort+0x444>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <HAL_DMA_Abort+0x448>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6a      	ldr	r2, [pc, #424]	@ (800268c <HAL_DMA_Abort+0x44c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_DMA_Abort+0x450>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a67      	ldr	r2, [pc, #412]	@ (8002694 <HAL_DMA_Abort+0x454>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_DMA_Abort+0x458>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a64      	ldr	r2, [pc, #400]	@ (800269c <HAL_DMA_Abort+0x45c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a62      	ldr	r2, [pc, #392]	@ (80026a0 <HAL_DMA_Abort+0x460>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a61      	ldr	r2, [pc, #388]	@ (80026a4 <HAL_DMA_Abort+0x464>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5f      	ldr	r2, [pc, #380]	@ (80026a8 <HAL_DMA_Abort+0x468>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5e      	ldr	r2, [pc, #376]	@ (80026ac <HAL_DMA_Abort+0x46c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5c      	ldr	r2, [pc, #368]	@ (80026b0 <HAL_DMA_Abort+0x470>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5b      	ldr	r2, [pc, #364]	@ (80026b4 <HAL_DMA_Abort+0x474>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a59      	ldr	r2, [pc, #356]	@ (80026b8 <HAL_DMA_Abort+0x478>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a58      	ldr	r2, [pc, #352]	@ (80026bc <HAL_DMA_Abort+0x47c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Abort+0x32a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a56      	ldr	r2, [pc, #344]	@ (80026c0 <HAL_DMA_Abort+0x480>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d108      	bne.n	800257c <HAL_DMA_Abort+0x33c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e007      	b.n	800258c <HAL_DMA_Abort+0x34c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800258c:	e013      	b.n	80025b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258e:	f7fe ff65 	bl	800145c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b05      	cmp	r3, #5
 800259a:	d90c      	bls.n	80025b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2203      	movs	r2, #3
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e12d      	b.n	8002812 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e5      	bne.n	800258e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <HAL_DMA_Abort+0x444>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d04a      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <HAL_DMA_Abort+0x448>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d045      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <HAL_DMA_Abort+0x44c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d040      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <HAL_DMA_Abort+0x450>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d03b      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a29      	ldr	r2, [pc, #164]	@ (8002694 <HAL_DMA_Abort+0x454>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d036      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a27      	ldr	r2, [pc, #156]	@ (8002698 <HAL_DMA_Abort+0x458>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d031      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_DMA_Abort+0x45c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d02c      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <HAL_DMA_Abort+0x460>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d027      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <HAL_DMA_Abort+0x464>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a21      	ldr	r2, [pc, #132]	@ (80026a8 <HAL_DMA_Abort+0x468>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01d      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a20      	ldr	r2, [pc, #128]	@ (80026ac <HAL_DMA_Abort+0x46c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d018      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1e      	ldr	r2, [pc, #120]	@ (80026b0 <HAL_DMA_Abort+0x470>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_DMA_Abort+0x474>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1b      	ldr	r2, [pc, #108]	@ (80026b8 <HAL_DMA_Abort+0x478>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <HAL_DMA_Abort+0x47c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_Abort+0x422>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_DMA_Abort+0x480>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Abort+0x426>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_DMA_Abort+0x428>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02b      	beq.n	80026c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	223f      	movs	r2, #63	@ 0x3f
 800267c:	409a      	lsls	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	e02a      	b.n	80026da <HAL_DMA_Abort+0x49a>
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a4f      	ldr	r2, [pc, #316]	@ (800281c <HAL_DMA_Abort+0x5dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d072      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002820 <HAL_DMA_Abort+0x5e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d06d      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002824 <HAL_DMA_Abort+0x5e4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d068      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002828 <HAL_DMA_Abort+0x5e8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d063      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a49      	ldr	r2, [pc, #292]	@ (800282c <HAL_DMA_Abort+0x5ec>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d05e      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a47      	ldr	r2, [pc, #284]	@ (8002830 <HAL_DMA_Abort+0x5f0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d059      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a46      	ldr	r2, [pc, #280]	@ (8002834 <HAL_DMA_Abort+0x5f4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d054      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a44      	ldr	r2, [pc, #272]	@ (8002838 <HAL_DMA_Abort+0x5f8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04f      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a43      	ldr	r2, [pc, #268]	@ (800283c <HAL_DMA_Abort+0x5fc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d04a      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a41      	ldr	r2, [pc, #260]	@ (8002840 <HAL_DMA_Abort+0x600>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d045      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a40      	ldr	r2, [pc, #256]	@ (8002844 <HAL_DMA_Abort+0x604>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d040      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3e      	ldr	r2, [pc, #248]	@ (8002848 <HAL_DMA_Abort+0x608>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d03b      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a3d      	ldr	r2, [pc, #244]	@ (800284c <HAL_DMA_Abort+0x60c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d036      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <HAL_DMA_Abort+0x610>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d031      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3a      	ldr	r2, [pc, #232]	@ (8002854 <HAL_DMA_Abort+0x614>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d02c      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a38      	ldr	r2, [pc, #224]	@ (8002858 <HAL_DMA_Abort+0x618>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d027      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a37      	ldr	r2, [pc, #220]	@ (800285c <HAL_DMA_Abort+0x61c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <HAL_DMA_Abort+0x620>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01d      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a34      	ldr	r2, [pc, #208]	@ (8002864 <HAL_DMA_Abort+0x624>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d018      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a32      	ldr	r2, [pc, #200]	@ (8002868 <HAL_DMA_Abort+0x628>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a31      	ldr	r2, [pc, #196]	@ (800286c <HAL_DMA_Abort+0x62c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00e      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002870 <HAL_DMA_Abort+0x630>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <HAL_DMA_Abort+0x634>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_DMA_Abort+0x58a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <HAL_DMA_Abort+0x638>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Abort+0x58e>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_DMA_Abort+0x590>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
 800285c:	58025408 	.word	0x58025408
 8002860:	5802541c 	.word	0x5802541c
 8002864:	58025430 	.word	0x58025430
 8002868:	58025444 	.word	0x58025444
 800286c:	58025458 	.word	0x58025458
 8002870:	5802546c 	.word	0x5802546c
 8002874:	58025480 	.word	0x58025480
 8002878:	58025494 	.word	0x58025494

0800287c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e237      	b.n	8002cfe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e22c      	b.n	8002cfe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a1c <HAL_DMA_Abort_IT+0x1a0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d04a      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a20 <HAL_DMA_Abort_IT+0x1a4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d045      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a59      	ldr	r2, [pc, #356]	@ (8002a24 <HAL_DMA_Abort_IT+0x1a8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d040      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a58      	ldr	r2, [pc, #352]	@ (8002a28 <HAL_DMA_Abort_IT+0x1ac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d03b      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a56      	ldr	r2, [pc, #344]	@ (8002a2c <HAL_DMA_Abort_IT+0x1b0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d036      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a55      	ldr	r2, [pc, #340]	@ (8002a30 <HAL_DMA_Abort_IT+0x1b4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d031      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a53      	ldr	r2, [pc, #332]	@ (8002a34 <HAL_DMA_Abort_IT+0x1b8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02c      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <HAL_DMA_Abort_IT+0x1bc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d027      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a50      	ldr	r2, [pc, #320]	@ (8002a3c <HAL_DMA_Abort_IT+0x1c0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d022      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4f      	ldr	r2, [pc, #316]	@ (8002a40 <HAL_DMA_Abort_IT+0x1c4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01d      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a44 <HAL_DMA_Abort_IT+0x1c8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d018      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a4c      	ldr	r2, [pc, #304]	@ (8002a48 <HAL_DMA_Abort_IT+0x1cc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_DMA_Abort_IT+0x1d0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a49      	ldr	r2, [pc, #292]	@ (8002a50 <HAL_DMA_Abort_IT+0x1d4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a47      	ldr	r2, [pc, #284]	@ (8002a54 <HAL_DMA_Abort_IT+0x1d8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_DMA_Abort_IT+0xc8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a46      	ldr	r2, [pc, #280]	@ (8002a58 <HAL_DMA_Abort_IT+0x1dc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_DMA_Abort_IT+0xcc>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_DMA_Abort_IT+0xce>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8086 	beq.w	8002a5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a1c <HAL_DMA_Abort_IT+0x1a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d04a      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2e      	ldr	r2, [pc, #184]	@ (8002a20 <HAL_DMA_Abort_IT+0x1a4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d045      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2c      	ldr	r2, [pc, #176]	@ (8002a24 <HAL_DMA_Abort_IT+0x1a8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d040      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a28 <HAL_DMA_Abort_IT+0x1ac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d03b      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a29      	ldr	r2, [pc, #164]	@ (8002a2c <HAL_DMA_Abort_IT+0x1b0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d036      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a28      	ldr	r2, [pc, #160]	@ (8002a30 <HAL_DMA_Abort_IT+0x1b4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d031      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <HAL_DMA_Abort_IT+0x1b8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02c      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <HAL_DMA_Abort_IT+0x1bc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d027      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a23      	ldr	r2, [pc, #140]	@ (8002a3c <HAL_DMA_Abort_IT+0x1c0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d022      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a22      	ldr	r2, [pc, #136]	@ (8002a40 <HAL_DMA_Abort_IT+0x1c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d01d      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a20      	ldr	r2, [pc, #128]	@ (8002a44 <HAL_DMA_Abort_IT+0x1c8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d018      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <HAL_DMA_Abort_IT+0x1cc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <HAL_DMA_Abort_IT+0x1d0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1c      	ldr	r2, [pc, #112]	@ (8002a50 <HAL_DMA_Abort_IT+0x1d4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a54 <HAL_DMA_Abort_IT+0x1d8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x17c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <HAL_DMA_Abort_IT+0x1dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <HAL_DMA_Abort_IT+0x18e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e178      	b.n	8002cfc <HAL_DMA_Abort_IT+0x480>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e16f      	b.n	8002cfc <HAL_DMA_Abort_IT+0x480>
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 020e 	bic.w	r2, r2, #14
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6c      	ldr	r2, [pc, #432]	@ (8002c24 <HAL_DMA_Abort_IT+0x3a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d04a      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6b      	ldr	r2, [pc, #428]	@ (8002c28 <HAL_DMA_Abort_IT+0x3ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d045      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a69      	ldr	r2, [pc, #420]	@ (8002c2c <HAL_DMA_Abort_IT+0x3b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d040      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a68      	ldr	r2, [pc, #416]	@ (8002c30 <HAL_DMA_Abort_IT+0x3b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d03b      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a66      	ldr	r2, [pc, #408]	@ (8002c34 <HAL_DMA_Abort_IT+0x3b8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d036      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a65      	ldr	r2, [pc, #404]	@ (8002c38 <HAL_DMA_Abort_IT+0x3bc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d031      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a63      	ldr	r2, [pc, #396]	@ (8002c3c <HAL_DMA_Abort_IT+0x3c0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d02c      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a62      	ldr	r2, [pc, #392]	@ (8002c40 <HAL_DMA_Abort_IT+0x3c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d027      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a60      	ldr	r2, [pc, #384]	@ (8002c44 <HAL_DMA_Abort_IT+0x3c8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d022      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a5f      	ldr	r2, [pc, #380]	@ (8002c48 <HAL_DMA_Abort_IT+0x3cc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01d      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c4c <HAL_DMA_Abort_IT+0x3d0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d018      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5c      	ldr	r2, [pc, #368]	@ (8002c50 <HAL_DMA_Abort_IT+0x3d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c54 <HAL_DMA_Abort_IT+0x3d8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00e      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a59      	ldr	r2, [pc, #356]	@ (8002c58 <HAL_DMA_Abort_IT+0x3dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a57      	ldr	r2, [pc, #348]	@ (8002c5c <HAL_DMA_Abort_IT+0x3e0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x290>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a56      	ldr	r2, [pc, #344]	@ (8002c60 <HAL_DMA_Abort_IT+0x3e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d108      	bne.n	8002b1e <HAL_DMA_Abort_IT+0x2a2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e007      	b.n	8002b2e <HAL_DMA_Abort_IT+0x2b2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3c      	ldr	r2, [pc, #240]	@ (8002c24 <HAL_DMA_Abort_IT+0x3a8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d072      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c28 <HAL_DMA_Abort_IT+0x3ac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d06d      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a39      	ldr	r2, [pc, #228]	@ (8002c2c <HAL_DMA_Abort_IT+0x3b0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d068      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a37      	ldr	r2, [pc, #220]	@ (8002c30 <HAL_DMA_Abort_IT+0x3b4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d063      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a36      	ldr	r2, [pc, #216]	@ (8002c34 <HAL_DMA_Abort_IT+0x3b8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a34      	ldr	r2, [pc, #208]	@ (8002c38 <HAL_DMA_Abort_IT+0x3bc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d059      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a33      	ldr	r2, [pc, #204]	@ (8002c3c <HAL_DMA_Abort_IT+0x3c0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d054      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a31      	ldr	r2, [pc, #196]	@ (8002c40 <HAL_DMA_Abort_IT+0x3c4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04f      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a30      	ldr	r2, [pc, #192]	@ (8002c44 <HAL_DMA_Abort_IT+0x3c8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d04a      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c48 <HAL_DMA_Abort_IT+0x3cc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d045      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2d      	ldr	r2, [pc, #180]	@ (8002c4c <HAL_DMA_Abort_IT+0x3d0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d040      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c50 <HAL_DMA_Abort_IT+0x3d4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d03b      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2a      	ldr	r2, [pc, #168]	@ (8002c54 <HAL_DMA_Abort_IT+0x3d8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d036      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	@ (8002c58 <HAL_DMA_Abort_IT+0x3dc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a27      	ldr	r2, [pc, #156]	@ (8002c5c <HAL_DMA_Abort_IT+0x3e0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d02c      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <HAL_DMA_Abort_IT+0x3e4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d027      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a24      	ldr	r2, [pc, #144]	@ (8002c64 <HAL_DMA_Abort_IT+0x3e8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d022      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <HAL_DMA_Abort_IT+0x3ec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_DMA_Abort_IT+0x3f0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <HAL_DMA_Abort_IT+0x3f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_DMA_Abort_IT+0x3f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_DMA_Abort_IT+0x3fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <HAL_DMA_Abort_IT+0x400>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x3a2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_DMA_Abort_IT+0x404>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d132      	bne.n	8002c84 <HAL_DMA_Abort_IT+0x408>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e031      	b.n	8002c86 <HAL_DMA_Abort_IT+0x40a>
 8002c22:	bf00      	nop
 8002c24:	40020010 	.word	0x40020010
 8002c28:	40020028 	.word	0x40020028
 8002c2c:	40020040 	.word	0x40020040
 8002c30:	40020058 	.word	0x40020058
 8002c34:	40020070 	.word	0x40020070
 8002c38:	40020088 	.word	0x40020088
 8002c3c:	400200a0 	.word	0x400200a0
 8002c40:	400200b8 	.word	0x400200b8
 8002c44:	40020410 	.word	0x40020410
 8002c48:	40020428 	.word	0x40020428
 8002c4c:	40020440 	.word	0x40020440
 8002c50:	40020458 	.word	0x40020458
 8002c54:	40020470 	.word	0x40020470
 8002c58:	40020488 	.word	0x40020488
 8002c5c:	400204a0 	.word	0x400204a0
 8002c60:	400204b8 	.word	0x400204b8
 8002c64:	58025408 	.word	0x58025408
 8002c68:	5802541c 	.word	0x5802541c
 8002c6c:	58025430 	.word	0x58025430
 8002c70:	58025444 	.word	0x58025444
 8002c74:	58025458 	.word	0x58025458
 8002c78:	5802546c 	.word	0x5802546c
 8002c7c:	58025480 	.word	0x58025480
 8002c80:	58025494 	.word	0x58025494
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d14:	4b67      	ldr	r3, [pc, #412]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a67      	ldr	r2, [pc, #412]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1b0>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ebc <HAL_DMA_IRQHandler+0x1b4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a59      	ldr	r2, [pc, #356]	@ (8002ecc <HAL_DMA_IRQHandler+0x1c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a57      	ldr	r2, [pc, #348]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a56      	ldr	r2, [pc, #344]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1cc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a54      	ldr	r2, [pc, #336]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1d0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a53      	ldr	r2, [pc, #332]	@ (8002edc <HAL_DMA_IRQHandler+0x1d4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a51      	ldr	r2, [pc, #324]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1d8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a50      	ldr	r2, [pc, #320]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1dc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1e0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a4d      	ldr	r2, [pc, #308]	@ (8002eec <HAL_DMA_IRQHandler+0x1e4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1ec>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_IRQHandler+0xd2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a48      	ldr	r2, [pc, #288]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1f0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_IRQHandler+0xd6>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 842b 	beq.w	800363c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2208      	movs	r2, #8
 8002df0:	409a      	lsls	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a2 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <HAL_DMA_IRQHandler+0x1b4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d04a      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1b8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d045      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <HAL_DMA_IRQHandler+0x1bc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d040      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec8 <HAL_DMA_IRQHandler+0x1c0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d03b      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a28      	ldr	r2, [pc, #160]	@ (8002ecc <HAL_DMA_IRQHandler+0x1c4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d036      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a27      	ldr	r2, [pc, #156]	@ (8002ed0 <HAL_DMA_IRQHandler+0x1c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d031      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_DMA_IRQHandler+0x1cc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d02c      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a24      	ldr	r2, [pc, #144]	@ (8002ed8 <HAL_DMA_IRQHandler+0x1d0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d027      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_DMA_IRQHandler+0x1d4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d022      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d01d      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_DMA_IRQHandler+0x1dc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d018      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_DMA_IRQHandler+0x1e0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d013      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_DMA_IRQHandler+0x1e4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00e      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_DMA_IRQHandler+0x1e8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d009      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <HAL_DMA_IRQHandler+0x1ec>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d004      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x194>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a18      	ldr	r2, [pc, #96]	@ (8002ef8 <HAL_DMA_IRQHandler+0x1f0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d12f      	bne.n	8002efc <HAL_DMA_IRQHandler+0x1f4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e02e      	b.n	8002f10 <HAL_DMA_IRQHandler+0x208>
 8002eb2:	bf00      	nop
 8002eb4:	2400003c 	.word	0x2400003c
 8002eb8:	1b4e81b5 	.word	0x1b4e81b5
 8002ebc:	40020010 	.word	0x40020010
 8002ec0:	40020028 	.word	0x40020028
 8002ec4:	40020040 	.word	0x40020040
 8002ec8:	40020058 	.word	0x40020058
 8002ecc:	40020070 	.word	0x40020070
 8002ed0:	40020088 	.word	0x40020088
 8002ed4:	400200a0 	.word	0x400200a0
 8002ed8:	400200b8 	.word	0x400200b8
 8002edc:	40020410 	.word	0x40020410
 8002ee0:	40020428 	.word	0x40020428
 8002ee4:	40020440 	.word	0x40020440
 8002ee8:	40020458 	.word	0x40020458
 8002eec:	40020470 	.word	0x40020470
 8002ef0:	40020488 	.word	0x40020488
 8002ef4:	400204a0 	.word	0x400204a0
 8002ef8:	400204b8 	.word	0x400204b8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf14      	ite	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	2300      	moveq	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06e      	beq.n	8003034 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a69      	ldr	r2, [pc, #420]	@ (8003100 <HAL_DMA_IRQHandler+0x3f8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a67      	ldr	r2, [pc, #412]	@ (8003104 <HAL_DMA_IRQHandler+0x3fc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a66      	ldr	r2, [pc, #408]	@ (8003108 <HAL_DMA_IRQHandler+0x400>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a64      	ldr	r2, [pc, #400]	@ (800310c <HAL_DMA_IRQHandler+0x404>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a63      	ldr	r2, [pc, #396]	@ (8003110 <HAL_DMA_IRQHandler+0x408>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a61      	ldr	r2, [pc, #388]	@ (8003114 <HAL_DMA_IRQHandler+0x40c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a60      	ldr	r2, [pc, #384]	@ (8003118 <HAL_DMA_IRQHandler+0x410>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800311c <HAL_DMA_IRQHandler+0x414>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5d      	ldr	r2, [pc, #372]	@ (8003120 <HAL_DMA_IRQHandler+0x418>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5b      	ldr	r2, [pc, #364]	@ (8003124 <HAL_DMA_IRQHandler+0x41c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8003128 <HAL_DMA_IRQHandler+0x420>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	@ (800312c <HAL_DMA_IRQHandler+0x424>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a57      	ldr	r2, [pc, #348]	@ (8003130 <HAL_DMA_IRQHandler+0x428>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a55      	ldr	r2, [pc, #340]	@ (8003134 <HAL_DMA_IRQHandler+0x42c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a54      	ldr	r2, [pc, #336]	@ (8003138 <HAL_DMA_IRQHandler+0x430>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x2ee>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	@ (800313c <HAL_DMA_IRQHandler+0x434>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10a      	bne.n	800300c <HAL_DMA_IRQHandler+0x304>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e003      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2201      	movs	r2, #1
 8003022:	409a      	lsls	r2, r3
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2204      	movs	r2, #4
 800303e:	409a      	lsls	r2, r3
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 808f 	beq.w	8003168 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <HAL_DMA_IRQHandler+0x3f8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04a      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2a      	ldr	r2, [pc, #168]	@ (8003104 <HAL_DMA_IRQHandler+0x3fc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d045      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_DMA_IRQHandler+0x400>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d040      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a27      	ldr	r2, [pc, #156]	@ (800310c <HAL_DMA_IRQHandler+0x404>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d03b      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a26      	ldr	r2, [pc, #152]	@ (8003110 <HAL_DMA_IRQHandler+0x408>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d036      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a24      	ldr	r2, [pc, #144]	@ (8003114 <HAL_DMA_IRQHandler+0x40c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_DMA_IRQHandler+0x410>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d02c      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a21      	ldr	r2, [pc, #132]	@ (800311c <HAL_DMA_IRQHandler+0x414>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d027      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_DMA_IRQHandler+0x418>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003124 <HAL_DMA_IRQHandler+0x41c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_DMA_IRQHandler+0x420>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <HAL_DMA_IRQHandler+0x424>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DMA_IRQHandler+0x428>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_DMA_IRQHandler+0x42c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_DMA_IRQHandler+0x430>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_IRQHandler+0x3e2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a15      	ldr	r2, [pc, #84]	@ (800313c <HAL_DMA_IRQHandler+0x434>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d12a      	bne.n	8003140 <HAL_DMA_IRQHandler+0x438>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e023      	b.n	8003148 <HAL_DMA_IRQHandler+0x440>
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2204      	movs	r2, #4
 8003156:	409a      	lsls	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	2210      	movs	r2, #16
 8003172:	409a      	lsls	r2, r3
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a6 	beq.w	80032ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a85      	ldr	r2, [pc, #532]	@ (8003398 <HAL_DMA_IRQHandler+0x690>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a83      	ldr	r2, [pc, #524]	@ (800339c <HAL_DMA_IRQHandler+0x694>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a82      	ldr	r2, [pc, #520]	@ (80033a0 <HAL_DMA_IRQHandler+0x698>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a80      	ldr	r2, [pc, #512]	@ (80033a4 <HAL_DMA_IRQHandler+0x69c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7f      	ldr	r2, [pc, #508]	@ (80033a8 <HAL_DMA_IRQHandler+0x6a0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7d      	ldr	r2, [pc, #500]	@ (80033ac <HAL_DMA_IRQHandler+0x6a4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7c      	ldr	r2, [pc, #496]	@ (80033b0 <HAL_DMA_IRQHandler+0x6a8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7a      	ldr	r2, [pc, #488]	@ (80033b4 <HAL_DMA_IRQHandler+0x6ac>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a79      	ldr	r2, [pc, #484]	@ (80033b8 <HAL_DMA_IRQHandler+0x6b0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a77      	ldr	r2, [pc, #476]	@ (80033bc <HAL_DMA_IRQHandler+0x6b4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a76      	ldr	r2, [pc, #472]	@ (80033c0 <HAL_DMA_IRQHandler+0x6b8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a74      	ldr	r2, [pc, #464]	@ (80033c4 <HAL_DMA_IRQHandler+0x6bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a73      	ldr	r2, [pc, #460]	@ (80033c8 <HAL_DMA_IRQHandler+0x6c0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a71      	ldr	r2, [pc, #452]	@ (80033cc <HAL_DMA_IRQHandler+0x6c4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a70      	ldr	r2, [pc, #448]	@ (80033d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_IRQHandler+0x516>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6e      	ldr	r2, [pc, #440]	@ (80033d4 <HAL_DMA_IRQHandler+0x6cc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10a      	bne.n	8003234 <HAL_DMA_IRQHandler+0x52c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e009      	b.n	8003248 <HAL_DMA_IRQHandler+0x540>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d03e      	beq.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2210      	movs	r2, #16
 8003256:	409a      	lsls	r2, r3
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d018      	beq.n	800329c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d024      	beq.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e01f      	b.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01b      	beq.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
 800329a:	e016      	b.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0208 	bic.w	r2, r2, #8
 80032b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2220      	movs	r2, #32
 80032d4:	409a      	lsls	r2, r3
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8110 	beq.w	8003500 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <HAL_DMA_IRQHandler+0x690>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d04a      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2b      	ldr	r2, [pc, #172]	@ (800339c <HAL_DMA_IRQHandler+0x694>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d045      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a29      	ldr	r2, [pc, #164]	@ (80033a0 <HAL_DMA_IRQHandler+0x698>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d040      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a28      	ldr	r2, [pc, #160]	@ (80033a4 <HAL_DMA_IRQHandler+0x69c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d03b      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a26      	ldr	r2, [pc, #152]	@ (80033a8 <HAL_DMA_IRQHandler+0x6a0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d036      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a25      	ldr	r2, [pc, #148]	@ (80033ac <HAL_DMA_IRQHandler+0x6a4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d031      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	@ (80033b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02c      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a22      	ldr	r2, [pc, #136]	@ (80033b4 <HAL_DMA_IRQHandler+0x6ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d027      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a20      	ldr	r2, [pc, #128]	@ (80033b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d022      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1f      	ldr	r2, [pc, #124]	@ (80033bc <HAL_DMA_IRQHandler+0x6b4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d01d      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_DMA_IRQHandler+0x6b8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d018      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1a      	ldr	r2, [pc, #104]	@ (80033c8 <HAL_DMA_IRQHandler+0x6c0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <HAL_DMA_IRQHandler+0x6c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a17      	ldr	r2, [pc, #92]	@ (80033d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_DMA_IRQHandler+0x678>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a16      	ldr	r2, [pc, #88]	@ (80033d4 <HAL_DMA_IRQHandler+0x6cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d12b      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x6d0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e02a      	b.n	80033ec <HAL_DMA_IRQHandler+0x6e4>
 8003396:	bf00      	nop
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8087 	beq.w	8003500 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2220      	movs	r2, #32
 80033fc:	409a      	lsls	r2, r3
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d139      	bne.n	8003482 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0216 	bic.w	r2, r2, #22
 800341c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800342c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_DMA_IRQHandler+0x736>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343a:	2b00      	cmp	r3, #0
 800343c:	d007      	beq.n	800344e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0208 	bic.w	r2, r2, #8
 800344c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	223f      	movs	r2, #63	@ 0x3f
 8003458:	409a      	lsls	r2, r3
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 834a 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
          }
          return;
 8003480:	e344      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02c      	beq.n	8003500 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	e027      	b.n	8003500 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e01e      	b.n	8003500 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8306 	beq.w	8003b16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8088 	beq.w	8003628 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2204      	movs	r2, #4
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a7a      	ldr	r2, [pc, #488]	@ (8003710 <HAL_DMA_IRQHandler+0xa08>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a79      	ldr	r2, [pc, #484]	@ (8003714 <HAL_DMA_IRQHandler+0xa0c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d045      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a77      	ldr	r2, [pc, #476]	@ (8003718 <HAL_DMA_IRQHandler+0xa10>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d040      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a76      	ldr	r2, [pc, #472]	@ (800371c <HAL_DMA_IRQHandler+0xa14>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d03b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a74      	ldr	r2, [pc, #464]	@ (8003720 <HAL_DMA_IRQHandler+0xa18>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d036      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a73      	ldr	r2, [pc, #460]	@ (8003724 <HAL_DMA_IRQHandler+0xa1c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d031      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a71      	ldr	r2, [pc, #452]	@ (8003728 <HAL_DMA_IRQHandler+0xa20>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02c      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a70      	ldr	r2, [pc, #448]	@ (800372c <HAL_DMA_IRQHandler+0xa24>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d027      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6e      	ldr	r2, [pc, #440]	@ (8003730 <HAL_DMA_IRQHandler+0xa28>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6d      	ldr	r2, [pc, #436]	@ (8003734 <HAL_DMA_IRQHandler+0xa2c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6b      	ldr	r2, [pc, #428]	@ (8003738 <HAL_DMA_IRQHandler+0xa30>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6a      	ldr	r2, [pc, #424]	@ (800373c <HAL_DMA_IRQHandler+0xa34>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a68      	ldr	r2, [pc, #416]	@ (8003740 <HAL_DMA_IRQHandler+0xa38>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a67      	ldr	r2, [pc, #412]	@ (8003744 <HAL_DMA_IRQHandler+0xa3c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a65      	ldr	r2, [pc, #404]	@ (8003748 <HAL_DMA_IRQHandler+0xa40>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x8b8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a64      	ldr	r2, [pc, #400]	@ (800374c <HAL_DMA_IRQHandler+0xa44>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x8ca>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e007      	b.n	80035e2 <HAL_DMA_IRQHandler+0x8da>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d307      	bcc.n	80035fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f2      	bne.n	80035e2 <HAL_DMA_IRQHandler+0x8da>
 80035fc:	e000      	b.n	8003600 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003616:	e003      	b.n	8003620 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8272 	beq.w	8003b16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e26c      	b.n	8003b16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a43      	ldr	r2, [pc, #268]	@ (8003750 <HAL_DMA_IRQHandler+0xa48>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a42      	ldr	r2, [pc, #264]	@ (8003754 <HAL_DMA_IRQHandler+0xa4c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <HAL_DMA_IRQHandler+0xa50>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3f      	ldr	r2, [pc, #252]	@ (800375c <HAL_DMA_IRQHandler+0xa54>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3d      	ldr	r2, [pc, #244]	@ (8003760 <HAL_DMA_IRQHandler+0xa58>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3c      	ldr	r2, [pc, #240]	@ (8003764 <HAL_DMA_IRQHandler+0xa5c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3a      	ldr	r2, [pc, #232]	@ (8003768 <HAL_DMA_IRQHandler+0xa60>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_IRQHandler+0x984>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a39      	ldr	r2, [pc, #228]	@ (800376c <HAL_DMA_IRQHandler+0xa64>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_IRQHandler+0x988>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_IRQHandler+0x98a>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 823f 	beq.w	8003b16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2204      	movs	r2, #4
 80036aa:	409a      	lsls	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80cd 	beq.w	8003850 <HAL_DMA_IRQHandler+0xb48>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80c7 	beq.w	8003850 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2204      	movs	r2, #4
 80036cc:	409a      	lsls	r2, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d049      	beq.n	8003770 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8210 	beq.w	8003b10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f8:	e20a      	b.n	8003b10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8206 	beq.w	8003b10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800370c:	e200      	b.n	8003b10 <HAL_DMA_IRQHandler+0xe08>
 800370e:	bf00      	nop
 8003710:	40020010 	.word	0x40020010
 8003714:	40020028 	.word	0x40020028
 8003718:	40020040 	.word	0x40020040
 800371c:	40020058 	.word	0x40020058
 8003720:	40020070 	.word	0x40020070
 8003724:	40020088 	.word	0x40020088
 8003728:	400200a0 	.word	0x400200a0
 800372c:	400200b8 	.word	0x400200b8
 8003730:	40020410 	.word	0x40020410
 8003734:	40020428 	.word	0x40020428
 8003738:	40020440 	.word	0x40020440
 800373c:	40020458 	.word	0x40020458
 8003740:	40020470 	.word	0x40020470
 8003744:	40020488 	.word	0x40020488
 8003748:	400204a0 	.word	0x400204a0
 800374c:	400204b8 	.word	0x400204b8
 8003750:	58025408 	.word	0x58025408
 8003754:	5802541c 	.word	0x5802541c
 8003758:	58025430 	.word	0x58025430
 800375c:	58025444 	.word	0x58025444
 8003760:	58025458 	.word	0x58025458
 8003764:	5802546c 	.word	0x5802546c
 8003768:	58025480 	.word	0x58025480
 800376c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d160      	bne.n	800383c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7f      	ldr	r2, [pc, #508]	@ (800397c <HAL_DMA_IRQHandler+0xc74>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7d      	ldr	r2, [pc, #500]	@ (8003980 <HAL_DMA_IRQHandler+0xc78>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7c      	ldr	r2, [pc, #496]	@ (8003984 <HAL_DMA_IRQHandler+0xc7c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7a      	ldr	r2, [pc, #488]	@ (8003988 <HAL_DMA_IRQHandler+0xc80>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a79      	ldr	r2, [pc, #484]	@ (800398c <HAL_DMA_IRQHandler+0xc84>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	@ (8003990 <HAL_DMA_IRQHandler+0xc88>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a76      	ldr	r2, [pc, #472]	@ (8003994 <HAL_DMA_IRQHandler+0xc8c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a74      	ldr	r2, [pc, #464]	@ (8003998 <HAL_DMA_IRQHandler+0xc90>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	@ (800399c <HAL_DMA_IRQHandler+0xc94>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a71      	ldr	r2, [pc, #452]	@ (80039a0 <HAL_DMA_IRQHandler+0xc98>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a70      	ldr	r2, [pc, #448]	@ (80039a4 <HAL_DMA_IRQHandler+0xc9c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	@ (80039a8 <HAL_DMA_IRQHandler+0xca0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6d      	ldr	r2, [pc, #436]	@ (80039ac <HAL_DMA_IRQHandler+0xca4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6b      	ldr	r2, [pc, #428]	@ (80039b0 <HAL_DMA_IRQHandler+0xca8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6a      	ldr	r2, [pc, #424]	@ (80039b4 <HAL_DMA_IRQHandler+0xcac>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_IRQHandler+0xb12>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	@ (80039b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_DMA_IRQHandler+0xb24>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_DMA_IRQHandler+0xb34>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8165 	beq.w	8003b10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384e:	e15f      	b.n	8003b10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2202      	movs	r2, #2
 800385a:	409a      	lsls	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80c5 	beq.w	80039f0 <HAL_DMA_IRQHandler+0xce8>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80bf 	beq.w	80039f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2202      	movs	r2, #2
 800387c:	409a      	lsls	r2, r3
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d018      	beq.n	80038be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 813a 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a8:	e134      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8130 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038bc:	e12a      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 8089 	bne.w	80039dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2b      	ldr	r2, [pc, #172]	@ (800397c <HAL_DMA_IRQHandler+0xc74>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <HAL_DMA_IRQHandler+0xc78>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a28      	ldr	r2, [pc, #160]	@ (8003984 <HAL_DMA_IRQHandler+0xc7c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a26      	ldr	r2, [pc, #152]	@ (8003988 <HAL_DMA_IRQHandler+0xc80>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a25      	ldr	r2, [pc, #148]	@ (800398c <HAL_DMA_IRQHandler+0xc84>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a23      	ldr	r2, [pc, #140]	@ (8003990 <HAL_DMA_IRQHandler+0xc88>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a22      	ldr	r2, [pc, #136]	@ (8003994 <HAL_DMA_IRQHandler+0xc8c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a20      	ldr	r2, [pc, #128]	@ (8003998 <HAL_DMA_IRQHandler+0xc90>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_DMA_IRQHandler+0xc94>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <HAL_DMA_IRQHandler+0xc98>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <HAL_DMA_IRQHandler+0xca0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <HAL_DMA_IRQHandler+0xca4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	@ (80039b0 <HAL_DMA_IRQHandler+0xca8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_DMA_IRQHandler+0xcac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_IRQHandler+0xc62>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d128      	bne.n	80039bc <HAL_DMA_IRQHandler+0xcb4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0214 	bic.w	r2, r2, #20
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e027      	b.n	80039cc <HAL_DMA_IRQHandler+0xcc4>
 800397c:	40020010 	.word	0x40020010
 8003980:	40020028 	.word	0x40020028
 8003984:	40020040 	.word	0x40020040
 8003988:	40020058 	.word	0x40020058
 800398c:	40020070 	.word	0x40020070
 8003990:	40020088 	.word	0x40020088
 8003994:	400200a0 	.word	0x400200a0
 8003998:	400200b8 	.word	0x400200b8
 800399c:	40020410 	.word	0x40020410
 80039a0:	40020428 	.word	0x40020428
 80039a4:	40020440 	.word	0x40020440
 80039a8:	40020458 	.word	0x40020458
 80039ac:	40020470 	.word	0x40020470
 80039b0:	40020488 	.word	0x40020488
 80039b4:	400204a0 	.word	0x400204a0
 80039b8:	400204b8 	.word	0x400204b8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 020a 	bic.w	r2, r2, #10
 80039ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ee:	e091      	b.n	8003b14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2208      	movs	r2, #8
 80039fa:	409a      	lsls	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8088 	beq.w	8003b16 <HAL_DMA_IRQHandler+0xe0e>
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8082 	beq.w	8003b16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a41      	ldr	r2, [pc, #260]	@ (8003b1c <HAL_DMA_IRQHandler+0xe14>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04a      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3f      	ldr	r2, [pc, #252]	@ (8003b20 <HAL_DMA_IRQHandler+0xe18>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d045      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b24 <HAL_DMA_IRQHandler+0xe1c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d040      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3c      	ldr	r2, [pc, #240]	@ (8003b28 <HAL_DMA_IRQHandler+0xe20>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d03b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b2c <HAL_DMA_IRQHandler+0xe24>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d036      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a39      	ldr	r2, [pc, #228]	@ (8003b30 <HAL_DMA_IRQHandler+0xe28>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a38      	ldr	r2, [pc, #224]	@ (8003b34 <HAL_DMA_IRQHandler+0xe2c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d02c      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <HAL_DMA_IRQHandler+0xe30>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d027      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a35      	ldr	r2, [pc, #212]	@ (8003b3c <HAL_DMA_IRQHandler+0xe34>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <HAL_DMA_IRQHandler+0xe38>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <HAL_DMA_IRQHandler+0xe3c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <HAL_DMA_IRQHandler+0xe40>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b4c <HAL_DMA_IRQHandler+0xe44>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	@ (8003b50 <HAL_DMA_IRQHandler+0xe48>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <HAL_DMA_IRQHandler+0xe4c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xdaa>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	@ (8003b58 <HAL_DMA_IRQHandler+0xe50>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xdbc>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 021c 	bic.w	r2, r2, #28
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e007      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xdcc>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 020e 	bic.w	r2, r2, #14
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
 8003b0a:	e004      	b.n	8003b16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b0c:	bf00      	nop
 8003b0e:	e002      	b.n	8003b16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8

08003b5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d78 <DMA_SetConfig+0x21c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d072      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7d      	ldr	r2, [pc, #500]	@ (8003d7c <DMA_SetConfig+0x220>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d06d      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <DMA_SetConfig+0x224>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d068      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7a      	ldr	r2, [pc, #488]	@ (8003d84 <DMA_SetConfig+0x228>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d063      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a79      	ldr	r2, [pc, #484]	@ (8003d88 <DMA_SetConfig+0x22c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d05e      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a77      	ldr	r2, [pc, #476]	@ (8003d8c <DMA_SetConfig+0x230>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d059      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a76      	ldr	r2, [pc, #472]	@ (8003d90 <DMA_SetConfig+0x234>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d054      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a74      	ldr	r2, [pc, #464]	@ (8003d94 <DMA_SetConfig+0x238>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04f      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a73      	ldr	r2, [pc, #460]	@ (8003d98 <DMA_SetConfig+0x23c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a71      	ldr	r2, [pc, #452]	@ (8003d9c <DMA_SetConfig+0x240>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a70      	ldr	r2, [pc, #448]	@ (8003da0 <DMA_SetConfig+0x244>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <DMA_SetConfig+0x248>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8003da8 <DMA_SetConfig+0x24c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8003dac <DMA_SetConfig+0x250>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6a      	ldr	r2, [pc, #424]	@ (8003db0 <DMA_SetConfig+0x254>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	@ (8003db4 <DMA_SetConfig+0x258>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a67      	ldr	r2, [pc, #412]	@ (8003db8 <DMA_SetConfig+0x25c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	@ (8003dbc <DMA_SetConfig+0x260>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a64      	ldr	r2, [pc, #400]	@ (8003dc0 <DMA_SetConfig+0x264>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a62      	ldr	r2, [pc, #392]	@ (8003dc4 <DMA_SetConfig+0x268>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a61      	ldr	r2, [pc, #388]	@ (8003dc8 <DMA_SetConfig+0x26c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8003dcc <DMA_SetConfig+0x270>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd0 <DMA_SetConfig+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <DMA_SetConfig+0x10a>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd4 <DMA_SetConfig+0x278>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <DMA_SetConfig+0x10e>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <DMA_SetConfig+0x110>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a39      	ldr	r2, [pc, #228]	@ (8003d78 <DMA_SetConfig+0x21c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d04a      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a38      	ldr	r2, [pc, #224]	@ (8003d7c <DMA_SetConfig+0x220>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d045      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a36      	ldr	r2, [pc, #216]	@ (8003d80 <DMA_SetConfig+0x224>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d040      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a35      	ldr	r2, [pc, #212]	@ (8003d84 <DMA_SetConfig+0x228>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d03b      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a33      	ldr	r2, [pc, #204]	@ (8003d88 <DMA_SetConfig+0x22c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d036      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a32      	ldr	r2, [pc, #200]	@ (8003d8c <DMA_SetConfig+0x230>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d031      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	@ (8003d90 <DMA_SetConfig+0x234>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d02c      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d94 <DMA_SetConfig+0x238>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d027      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d98 <DMA_SetConfig+0x23c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d022      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <DMA_SetConfig+0x240>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d01d      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8003da0 <DMA_SetConfig+0x244>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d018      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <DMA_SetConfig+0x248>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a27      	ldr	r2, [pc, #156]	@ (8003da8 <DMA_SetConfig+0x24c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00e      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <DMA_SetConfig+0x250>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d009      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a24      	ldr	r2, [pc, #144]	@ (8003db0 <DMA_SetConfig+0x254>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <DMA_SetConfig+0x1d0>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a23      	ldr	r2, [pc, #140]	@ (8003db4 <DMA_SetConfig+0x258>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d101      	bne.n	8003d30 <DMA_SetConfig+0x1d4>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <DMA_SetConfig+0x1d6>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d059      	beq.n	8003dea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	223f      	movs	r2, #63	@ 0x3f
 8003d40:	409a      	lsls	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d138      	bne.n	8003dd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d76:	e086      	b.n	8003e86 <DMA_SetConfig+0x32a>
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
}
 8003de8:	e04d      	b.n	8003e86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a29      	ldr	r2, [pc, #164]	@ (8003e94 <DMA_SetConfig+0x338>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <DMA_SetConfig+0x33c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a26      	ldr	r2, [pc, #152]	@ (8003e9c <DMA_SetConfig+0x340>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ea0 <DMA_SetConfig+0x344>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <DMA_SetConfig+0x348>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a21      	ldr	r2, [pc, #132]	@ (8003ea8 <DMA_SetConfig+0x34c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <DMA_SetConfig+0x350>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <DMA_SetConfig+0x2de>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb0 <DMA_SetConfig+0x354>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <DMA_SetConfig+0x2e2>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <DMA_SetConfig+0x2e4>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	d108      	bne.n	8003e76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	60da      	str	r2, [r3, #12]
}
 8003e74:	e007      	b.n	8003e86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	58025408 	.word	0x58025408
 8003e98:	5802541c 	.word	0x5802541c
 8003e9c:	58025430 	.word	0x58025430
 8003ea0:	58025444 	.word	0x58025444
 8003ea4:	58025458 	.word	0x58025458
 8003ea8:	5802546c 	.word	0x5802546c
 8003eac:	58025480 	.word	0x58025480
 8003eb0:	58025494 	.word	0x58025494

08003eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a42      	ldr	r2, [pc, #264]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x118>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d04a      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a41      	ldr	r2, [pc, #260]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d045      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x120>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d040      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d03b      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x128>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d036      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d031      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a39      	ldr	r2, [pc, #228]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x130>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d02c      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a38      	ldr	r2, [pc, #224]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x134>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d027      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a36      	ldr	r2, [pc, #216]	@ (8003fec <DMA_CalcBaseAndBitshift+0x138>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d01d      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a33      	ldr	r2, [pc, #204]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x140>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ff8 <DMA_CalcBaseAndBitshift+0x144>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a30      	ldr	r2, [pc, #192]	@ (8003ffc <DMA_CalcBaseAndBitshift+0x148>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2f      	ldr	r2, [pc, #188]	@ (8004000 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004004 <DMA_CalcBaseAndBitshift+0x150>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <DMA_CalcBaseAndBitshift+0xa8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2c      	ldr	r2, [pc, #176]	@ (8004008 <DMA_CalcBaseAndBitshift+0x154>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <DMA_CalcBaseAndBitshift+0xac>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <DMA_CalcBaseAndBitshift+0xae>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3b10      	subs	r3, #16
 8003f6e:	4a27      	ldr	r2, [pc, #156]	@ (800400c <DMA_CalcBaseAndBitshift+0x158>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d908      	bls.n	8003fa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <DMA_CalcBaseAndBitshift+0x160>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f9e:	e00d      	b.n	8003fbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <DMA_CalcBaseAndBitshift+0x160>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fae:	e005      	b.n	8003fbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	aaaaaaab 	.word	0xaaaaaaab
 8004010:	0800b31c 	.word	0x0800b31c
 8004014:	fffffc00 	.word	0xfffffc00

08004018 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d120      	bne.n	800406e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	2b03      	cmp	r3, #3
 8004032:	d858      	bhi.n	80040e6 <DMA_CheckFifoParam+0xce>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <DMA_CheckFifoParam+0x24>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800405f 	.word	0x0800405f
 8004044:	0800404d 	.word	0x0800404d
 8004048:	080040e7 	.word	0x080040e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d048      	beq.n	80040ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800405c:	e045      	b.n	80040ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004066:	d142      	bne.n	80040ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800406c:	e03f      	b.n	80040ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004076:	d123      	bne.n	80040c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	2b03      	cmp	r3, #3
 800407e:	d838      	bhi.n	80040f2 <DMA_CheckFifoParam+0xda>
 8004080:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <DMA_CheckFifoParam+0x70>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004099 	.word	0x08004099
 800408c:	0800409f 	.word	0x0800409f
 8004090:	08004099 	.word	0x08004099
 8004094:	080040b1 	.word	0x080040b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
        break;
 800409c:	e030      	b.n	8004100 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d025      	beq.n	80040f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040ae:	e022      	b.n	80040f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040be:	e01c      	b.n	80040fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d902      	bls.n	80040ce <DMA_CheckFifoParam+0xb6>
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040cc:	e018      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
        break;
 80040d2:	e015      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
    break;
 80040e4:	e00b      	b.n	80040fe <DMA_CheckFifoParam+0xe6>
        break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
        break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
    break;
 80040fe:	bf00      	nop
    }
  }

  return status;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a35      	ldr	r2, [pc, #212]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a30      	ldr	r2, [pc, #192]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3b08      	subs	r3, #8
 8004180:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a24      	ldr	r2, [pc, #144]	@ (800422c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800419c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041ac:	e024      	b.n	80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3b10      	subs	r3, #16
 80041b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d806      	bhi.n	80041d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d902      	bls.n	80041d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3308      	adds	r3, #8
 80041d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a16      	ldr	r2, [pc, #88]	@ (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2201      	movs	r2, #1
 80041f2:	409a      	lsls	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	58025444 	.word	0x58025444
 8004214:	58025458 	.word	0x58025458
 8004218:	5802546c 	.word	0x5802546c
 800421c:	58025480 	.word	0x58025480
 8004220:	58025494 	.word	0x58025494
 8004224:	cccccccd 	.word	0xcccccccd
 8004228:	16009600 	.word	0x16009600
 800422c:	58025880 	.word	0x58025880
 8004230:	aaaaaaab 	.word	0xaaaaaaab
 8004234:	400204b8 	.word	0x400204b8
 8004238:	4002040f 	.word	0x4002040f
 800423c:	10008200 	.word	0x10008200
 8004240:	40020880 	.word	0x40020880

08004244 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04a      	beq.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d847      	bhi.n	80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a25      	ldr	r2, [pc, #148]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d022      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a24      	ldr	r2, [pc, #144]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01d      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a22      	ldr	r2, [pc, #136]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a21      	ldr	r2, [pc, #132]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1e      	ldr	r2, [pc, #120]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4b17      	ldr	r3, [pc, #92]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a15      	ldr	r2, [pc, #84]	@ (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80042ce:	e009      	b.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	58025408 	.word	0x58025408
 8004300:	5802541c 	.word	0x5802541c
 8004304:	58025430 	.word	0x58025430
 8004308:	58025444 	.word	0x58025444
 800430c:	58025458 	.word	0x58025458
 8004310:	5802546c 	.word	0x5802546c
 8004314:	58025480 	.word	0x58025480
 8004318:	58025494 	.word	0x58025494
 800431c:	1600963f 	.word	0x1600963f
 8004320:	58025940 	.word	0x58025940
 8004324:	1000823f 	.word	0x1000823f
 8004328:	40020940 	.word	0x40020940

0800432c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0e3      	b.n	8004506 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2223      	movs	r2, #35	@ 0x23
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7fc fae9 	bl	8000928 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b6e      	ldr	r3, [pc, #440]	@ (8004510 <HAL_ETH_Init+0x1e4>)
 8004358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800435c:	4a6c      	ldr	r2, [pc, #432]	@ (8004510 <HAL_ETH_Init+0x1e4>)
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004366:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <HAL_ETH_Init+0x1e4>)
 8004368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7a1b      	ldrb	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800437c:	2000      	movs	r0, #0
 800437e:	f7fd f879 	bl	8001474 <HAL_SYSCFG_ETHInterfaceSelect>
 8004382:	e003      	b.n	800438c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004384:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004388:	f7fd f874 	bl	8001474 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800438c:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <HAL_ETH_Init+0x1e8>)
 800438e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043a8:	f7fd f858 	bl	800145c <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043ae:	e011      	b.n	80043d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80043b0:	f7fd f854 	bl	800145c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80043be:	d909      	bls.n	80043d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	22e0      	movs	r2, #224	@ 0xe0
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e098      	b.n	8004506 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e4      	bne.n	80043b0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f89e 	bl	8004528 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80043ec:	f001 fcd8 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4a49      	ldr	r2, [pc, #292]	@ (8004518 <HAL_ETH_Init+0x1ec>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9a      	lsrs	r2, r3, #18
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3a01      	subs	r2, #1
 8004400:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fa81 	bl	800490c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004412:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004416:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004426:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	22e0      	movs	r2, #224	@ 0xe0
 8004442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e05d      	b.n	8004506 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <HAL_ETH_Init+0x1f0>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6952      	ldr	r2, [r2, #20]
 800445e:	0051      	lsls	r1, r2, #1
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	430b      	orrs	r3, r1
 8004466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800446a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fae9 	bl	8004a46 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb2f 	bl	8004ad8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	3305      	adds	r3, #5
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	3303      	adds	r3, #3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	061a      	lsls	r2, r3, #24
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	3302      	adds	r3, #2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	3301      	adds	r3, #1
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80044c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044c8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_ETH_Init+0x1f4>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <HAL_ETH_Init+0x1f8>)
 80044ee:	430b      	orrs	r3, r1
 80044f0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2210      	movs	r2, #16
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400
 8004514:	58000400 	.word	0x58000400
 8004518:	431bde83 	.word	0x431bde83
 800451c:	ffff8001 	.word	0xffff8001
 8004520:	0c020060 	.word	0x0c020060
 8004524:	0c20c000 	.word	0x0c20c000

08004528 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004538:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004540:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004542:	f001 fc2d 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 8004546:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a1a      	ldr	r2, [pc, #104]	@ (80045b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d804      	bhi.n	800455a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e022      	b.n	80045a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a16      	ldr	r2, [pc, #88]	@ (80045b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d204      	bcs.n	800456c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e019      	b.n	80045a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4a13      	ldr	r2, [pc, #76]	@ (80045bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d915      	bls.n	80045a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d804      	bhi.n	8004586 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e00c      	b.n	80045a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d804      	bhi.n	8004598 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e003      	b.n	80045a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	02160ebf 	.word	0x02160ebf
 80045b8:	03938700 	.word	0x03938700
 80045bc:	05f5e0ff 	.word	0x05f5e0ff
 80045c0:	08f0d17f 	.word	0x08f0d17f
 80045c4:	0ee6b27f 	.word	0x0ee6b27f

080045c8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80045da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80045e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7b1b      	ldrb	r3, [r3, #12]
 80045e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80045ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	7b5b      	ldrb	r3, [r3, #13]
 80045f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80045f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	7b9b      	ldrb	r3, [r3, #14]
 80045f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80045fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	7bdb      	ldrb	r3, [r3, #15]
 8004600:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004602:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	7c12      	ldrb	r2, [r2, #16]
 8004608:	2a00      	cmp	r2, #0
 800460a:	d102      	bne.n	8004612 <ETH_SetMACConfig+0x4a>
 800460c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004610:	e000      	b.n	8004614 <ETH_SetMACConfig+0x4c>
 8004612:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004614:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	7c52      	ldrb	r2, [r2, #17]
 800461a:	2a00      	cmp	r2, #0
 800461c:	d102      	bne.n	8004624 <ETH_SetMACConfig+0x5c>
 800461e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004622:	e000      	b.n	8004626 <ETH_SetMACConfig+0x5e>
 8004624:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	7c9b      	ldrb	r3, [r3, #18]
 800462c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800462e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004634:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800463a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	7f1b      	ldrb	r3, [r3, #28]
 8004640:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	7f5b      	ldrb	r3, [r3, #29]
 8004648:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800464a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	7f92      	ldrb	r2, [r2, #30]
 8004650:	2a00      	cmp	r2, #0
 8004652:	d102      	bne.n	800465a <ETH_SetMACConfig+0x92>
 8004654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004658:	e000      	b.n	800465c <ETH_SetMACConfig+0x94>
 800465a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800465c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	7fdb      	ldrb	r3, [r3, #31]
 8004662:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004664:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	f892 2020 	ldrb.w	r2, [r2, #32]
 800466c:	2a00      	cmp	r2, #0
 800466e:	d102      	bne.n	8004676 <ETH_SetMACConfig+0xae>
 8004670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004674:	e000      	b.n	8004678 <ETH_SetMACConfig+0xb0>
 8004676:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004678:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800467e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004686:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004688:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b56      	ldr	r3, [pc, #344]	@ (80047f4 <ETH_SetMACConfig+0x22c>)
 800469a:	4013      	ands	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	68f9      	ldr	r1, [r7, #12]
 80046a2:	430b      	orrs	r3, r1
 80046a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	d102      	bne.n	80046da <ETH_SetMACConfig+0x112>
 80046d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046d8:	e000      	b.n	80046dc <ETH_SetMACConfig+0x114>
 80046da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <ETH_SetMACConfig+0x230>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004700:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b3a      	ldr	r3, [pc, #232]	@ (80047fc <ETH_SetMACConfig+0x234>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	68f9      	ldr	r1, [r7, #12]
 800471a:	430b      	orrs	r3, r1
 800471c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004724:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800472a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004732:	2a00      	cmp	r2, #0
 8004734:	d101      	bne.n	800473a <ETH_SetMACConfig+0x172>
 8004736:	2280      	movs	r2, #128	@ 0x80
 8004738:	e000      	b.n	800473c <ETH_SetMACConfig+0x174>
 800473a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800473c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004742:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800474e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	430b      	orrs	r3, r1
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004764:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800476c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f023 0103 	bic.w	r1, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	430a      	orrs	r2, r1
 8004786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004792:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	d101      	bne.n	80047b6 <ETH_SetMACConfig+0x1ee>
 80047b2:	2240      	movs	r2, #64	@ 0x40
 80047b4:	e000      	b.n	80047b8 <ETH_SetMACConfig+0x1f0>
 80047b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80047b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80047c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80047ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80047d8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	00048083 	.word	0x00048083
 80047f8:	c0f88000 	.word	0xc0f88000
 80047fc:	fffffef0 	.word	0xfffffef0

08004800 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <ETH_SetDMAConfig+0xf8>)
 8004816:	4013      	ands	r3, r2
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	6811      	ldr	r1, [r2, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	430b      	orrs	r3, r1
 8004822:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004826:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	791b      	ldrb	r3, [r3, #4]
 800482c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004832:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	7b1b      	ldrb	r3, [r3, #12]
 8004838:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4b2c      	ldr	r3, [pc, #176]	@ (80048fc <ETH_SetDMAConfig+0xfc>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	430b      	orrs	r3, r1
 8004854:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004858:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	7b5b      	ldrb	r3, [r3, #13]
 800485e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004870:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004874:	4b22      	ldr	r3, [pc, #136]	@ (8004900 <ETH_SetDMAConfig+0x100>)
 8004876:	4013      	ands	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	430b      	orrs	r3, r1
 8004880:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004884:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	7d1b      	ldrb	r3, [r3, #20]
 8004890:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004892:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	7f5b      	ldrb	r3, [r3, #29]
 8004898:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <ETH_SetDMAConfig+0x104>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ba:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	7f1b      	ldrb	r3, [r3, #28]
 80048c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <ETH_SetDMAConfig+0x108>)
 80048da:	4013      	ands	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	430b      	orrs	r3, r1
 80048e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048e8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	ffff87fd 	.word	0xffff87fd
 80048fc:	ffff2ffe 	.word	0xffff2ffe
 8004900:	fffec000 	.word	0xfffec000
 8004904:	ffc0efef 	.word	0xffc0efef
 8004908:	7fc0ffff 	.word	0x7fc0ffff

0800490c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b0a4      	sub	sp, #144	@ 0x90
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800491a:	2300      	movs	r3, #0
 800491c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004930:	2301      	movs	r3, #1
 8004932:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800494e:	2300      	movs	r3, #0
 8004950:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004954:	2300      	movs	r3, #0
 8004956:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004958:	2300      	movs	r3, #0
 800495a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004964:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004968:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004970:	2300      	movs	r3, #0
 8004972:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004986:	2300      	movs	r3, #0
 8004988:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800498a:	2300      	movs	r3, #0
 800498c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800498e:	2300      	movs	r3, #0
 8004990:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049a4:	2320      	movs	r3, #32
 80049a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80049b6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80049c8:	2302      	movs	r3, #2
 80049ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80049e6:	2300      	movs	r3, #0
 80049e8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80049f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fde6 	bl	80045c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a00:	2301      	movs	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a16:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004a24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a2c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a32:	f107 0308 	add.w	r3, r7, #8
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fee1 	bl	8004800 <ETH_SetDMAConfig>
}
 8004a3e:	bf00      	nop
 8004a40:	3790      	adds	r7, #144	@ 0x90
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e01d      	b.n	8004a90 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68d9      	ldr	r1, [r3, #12]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	440b      	add	r3, r1
 8004a64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	3206      	adds	r2, #6
 8004a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d9de      	bls.n	8004a54 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e023      	b.n	8004b2e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6919      	ldr	r1, [r3, #16]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	4413      	add	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	440b      	add	r3, r1
 8004af6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	3212      	adds	r2, #18
 8004b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d9d8      	bls.n	8004ae6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b6e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b82:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	@ 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ba2:	4b86      	ldr	r3, [pc, #536]	@ (8004dbc <HAL_GPIO_Init+0x228>)
 8004ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ba6:	e18c      	b.n	8004ec2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 817e 	beq.w	8004ebc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d005      	beq.n	8004bd8 <HAL_GPIO_Init+0x44>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d130      	bne.n	8004c3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c0e:	2201      	movs	r2, #1
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 0201 	and.w	r2, r3, #1
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d017      	beq.n	8004c76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	2203      	movs	r2, #3
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d123      	bne.n	8004cca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	08da      	lsrs	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3208      	adds	r2, #8
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	220f      	movs	r2, #15
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	69b9      	ldr	r1, [r7, #24]
 8004cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0203 	and.w	r2, r3, #3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80d8 	beq.w	8004ebc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc0 <HAL_GPIO_Init+0x22c>)
 8004d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d12:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_GPIO_Init+0x22c>)
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <HAL_GPIO_Init+0x22c>)
 8004d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2a:	4a26      	ldr	r2, [pc, #152]	@ (8004dc4 <HAL_GPIO_Init+0x230>)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <HAL_GPIO_Init+0x234>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04a      	beq.n	8004dec <HAL_GPIO_Init+0x258>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1c      	ldr	r2, [pc, #112]	@ (8004dcc <HAL_GPIO_Init+0x238>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02b      	beq.n	8004db6 <HAL_GPIO_Init+0x222>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd0 <HAL_GPIO_Init+0x23c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d025      	beq.n	8004db2 <HAL_GPIO_Init+0x21e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_GPIO_Init+0x240>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01f      	beq.n	8004dae <HAL_GPIO_Init+0x21a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a19      	ldr	r2, [pc, #100]	@ (8004dd8 <HAL_GPIO_Init+0x244>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d019      	beq.n	8004daa <HAL_GPIO_Init+0x216>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <HAL_GPIO_Init+0x248>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_GPIO_Init+0x212>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a17      	ldr	r2, [pc, #92]	@ (8004de0 <HAL_GPIO_Init+0x24c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00d      	beq.n	8004da2 <HAL_GPIO_Init+0x20e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a16      	ldr	r2, [pc, #88]	@ (8004de4 <HAL_GPIO_Init+0x250>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <HAL_GPIO_Init+0x20a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a15      	ldr	r2, [pc, #84]	@ (8004de8 <HAL_GPIO_Init+0x254>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_GPIO_Init+0x206>
 8004d96:	2309      	movs	r3, #9
 8004d98:	e029      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	e027      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004d9e:	2307      	movs	r3, #7
 8004da0:	e025      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004da2:	2306      	movs	r3, #6
 8004da4:	e023      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004da6:	2305      	movs	r3, #5
 8004da8:	e021      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004daa:	2304      	movs	r3, #4
 8004dac:	e01f      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004dae:	2303      	movs	r3, #3
 8004db0:	e01d      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e01b      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e019      	b.n	8004dee <HAL_GPIO_Init+0x25a>
 8004dba:	bf00      	nop
 8004dbc:	58000080 	.word	0x58000080
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	58000400 	.word	0x58000400
 8004dc8:	58020000 	.word	0x58020000
 8004dcc:	58020400 	.word	0x58020400
 8004dd0:	58020800 	.word	0x58020800
 8004dd4:	58020c00 	.word	0x58020c00
 8004dd8:	58021000 	.word	0x58021000
 8004ddc:	58021400 	.word	0x58021400
 8004de0:	58021800 	.word	0x58021800
 8004de4:	58021c00 	.word	0x58021c00
 8004de8:	58022400 	.word	0x58022400
 8004dec:	2300      	movs	r3, #0
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	f002 0203 	and.w	r2, r2, #3
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	4093      	lsls	r3, r2
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dfe:	4938      	ldr	r1, [pc, #224]	@ (8004ee0 <HAL_GPIO_Init+0x34c>)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	3302      	adds	r3, #2
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f ae6b 	bne.w	8004ba8 <HAL_GPIO_Init+0x14>
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	3724      	adds	r7, #36	@ 0x24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	58000400 	.word	0x58000400

08004ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	807b      	strh	r3, [r7, #2]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ef4:	787b      	ldrb	r3, [r7, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f00:	e003      	b.n	8004f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f02:	887b      	ldrh	r3, [r7, #2]
 8004f04:	041a      	lsls	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	619a      	str	r2, [r3, #24]
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f20:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <HAL_PWREx_ConfigSupply+0x70>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d00a      	beq.n	8004f42 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f2c:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <HAL_PWREx_ConfigSupply+0x70>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01f      	b.n	8004f7e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e01d      	b.n	8004f7e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f42:	4b11      	ldr	r3, [pc, #68]	@ (8004f88 <HAL_PWREx_ConfigSupply+0x70>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	490f      	ldr	r1, [pc, #60]	@ (8004f88 <HAL_PWREx_ConfigSupply+0x70>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f52:	f7fc fa83 	bl	800145c <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f58:	e009      	b.n	8004f6e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f5a:	f7fc fa7f 	bl	800145c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f68:	d901      	bls.n	8004f6e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e007      	b.n	8004f7e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_PWREx_ConfigSupply+0x70>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7a:	d1ee      	bne.n	8004f5a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	58024800 	.word	0x58024800

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	@ 0x30
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e3c8      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8087 	beq.w	80050ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fac:	4b88      	ldr	r3, [pc, #544]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fb6:	4b86      	ldr	r3, [pc, #536]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d007      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x46>
 8004fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc4:	2b18      	cmp	r3, #24
 8004fc6:	d110      	bne.n	8004fea <HAL_RCC_OscConfig+0x5e>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d10b      	bne.n	8004fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d06c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x12c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d168      	bne.n	80050b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e3a2      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x76>
 8004ff4:	4b76      	ldr	r3, [pc, #472]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a75      	ldr	r2, [pc, #468]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e02e      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b71      	ldr	r3, [pc, #452]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a70      	ldr	r2, [pc, #448]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b6e      	ldr	r3, [pc, #440]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6d      	ldr	r2, [pc, #436]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800501c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e01d      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0xbc>
 800502e:	4b68      	ldr	r3, [pc, #416]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a67      	ldr	r2, [pc, #412]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b65      	ldr	r3, [pc, #404]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a64      	ldr	r2, [pc, #400]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005048:	4b61      	ldr	r3, [pc, #388]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a60      	ldr	r2, [pc, #384]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b5e      	ldr	r3, [pc, #376]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5d      	ldr	r2, [pc, #372]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800505a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800505e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc f9f8 	bl	800145c <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fc f9f4 	bl	800145c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e356      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005082:	4b53      	ldr	r3, [pc, #332]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0xe4>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc f9e4 	bl	800145c <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fc f9e0 	bl	800145c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	@ 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e342      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050aa:	4b49      	ldr	r3, [pc, #292]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x10c>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 808c 	beq.w	80051e0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c8:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050d2:	4b3f      	ldr	r3, [pc, #252]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_RCC_OscConfig+0x162>
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2b18      	cmp	r3, #24
 80050e2:	d137      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c8>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d132      	bne.n	8005154 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050ee:	4b38      	ldr	r3, [pc, #224]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_RCC_OscConfig+0x17a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e314      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005106:	4b32      	ldr	r3, [pc, #200]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 0219 	bic.w	r2, r3, #25
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	492f      	ldr	r1, [pc, #188]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc f9a0 	bl	800145c <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005120:	f7fc f99c 	bl	800145c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e2fe      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	4920      	ldr	r1, [pc, #128]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005152:	e045      	b.n	80051e0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d026      	beq.n	80051aa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800515c:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 0219 	bic.w	r2, r3, #25
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4919      	ldr	r1, [pc, #100]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800516a:	4313      	orrs	r3, r2
 800516c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fc f975 	bl	800145c <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7fc f971 	bl	800145c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e2d3      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005188:	4b11      	ldr	r3, [pc, #68]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	490b      	ldr	r1, [pc, #44]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
 80051a8:	e01a      	b.n	80051e0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a08      	ldr	r2, [pc, #32]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fc f951 	bl	800145c <HAL_GetTick>
 80051ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051bc:	e00a      	b.n	80051d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7fc f94d 	bl	800145c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d903      	bls.n	80051d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e2af      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
 80051d0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051d4:	4b96      	ldr	r3, [pc, #600]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ee      	bne.n	80051be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d06a      	beq.n	80052c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ec:	4b90      	ldr	r3, [pc, #576]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051f6:	4b8e      	ldr	r3, [pc, #568]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d007      	beq.n	8005212 <HAL_RCC_OscConfig+0x286>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b18      	cmp	r3, #24
 8005206:	d11b      	bne.n	8005240 <HAL_RCC_OscConfig+0x2b4>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d116      	bne.n	8005240 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005212:	4b87      	ldr	r3, [pc, #540]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_RCC_OscConfig+0x29e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	2b80      	cmp	r3, #128	@ 0x80
 8005224:	d001      	beq.n	800522a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e282      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800522a:	4b81      	ldr	r3, [pc, #516]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	497d      	ldr	r1, [pc, #500]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800523e:	e040      	b.n	80052c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d023      	beq.n	8005290 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005248:	4b79      	ldr	r3, [pc, #484]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a78      	ldr	r2, [pc, #480]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800524e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fc f902 	bl	800145c <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800525c:	f7fc f8fe 	bl	800145c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e260      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800526e:	4b70      	ldr	r3, [pc, #448]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800527a:	4b6d      	ldr	r3, [pc, #436]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	4969      	ldr	r1, [pc, #420]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	60cb      	str	r3, [r1, #12]
 800528e:	e018      	b.n	80052c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005290:	4b67      	ldr	r3, [pc, #412]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a66      	ldr	r2, [pc, #408]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fc f8de 	bl	800145c <HAL_GetTick>
 80052a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052a4:	f7fc f8da 	bl	800145c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e23c      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d036      	beq.n	800533c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d019      	beq.n	800530a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d6:	4b56      	ldr	r3, [pc, #344]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80052d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052da:	4a55      	ldr	r2, [pc, #340]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e2:	f7fc f8bb 	bl	800145c <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ea:	f7fc f8b7 	bl	800145c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e219      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80052fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x35e>
 8005308:	e018      	b.n	800533c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530a:	4b49      	ldr	r3, [pc, #292]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800530c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530e:	4a48      	ldr	r2, [pc, #288]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fc f8a1 	bl	800145c <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531e:	f7fc f89d 	bl	800145c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e1ff      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005330:	4b3f      	ldr	r3, [pc, #252]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f0      	bne.n	800531e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d036      	beq.n	80053b6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d019      	beq.n	8005384 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005350:	4b37      	ldr	r3, [pc, #220]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a36      	ldr	r2, [pc, #216]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005356:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800535a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800535c:	f7fc f87e 	bl	800145c <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005364:	f7fc f87a 	bl	800145c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1dc      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005376:	4b2e      	ldr	r3, [pc, #184]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x3d8>
 8005382:	e018      	b.n	80053b6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005384:	4b2a      	ldr	r3, [pc, #168]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a29      	ldr	r2, [pc, #164]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800538a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800538e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005390:	f7fc f864 	bl	800145c <HAL_GetTick>
 8005394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005398:	f7fc f860 	bl	800145c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1c2      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053aa:	4b21      	ldr	r3, [pc, #132]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8086 	beq.w	80054d0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <HAL_RCC_OscConfig+0x4a8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005434 <HAL_RCC_OscConfig+0x4a8>)
 80053ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d0:	f7fc f844 	bl	800145c <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d8:	f7fc f840 	bl	800145c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	@ 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1a2      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCC_OscConfig+0x4a8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d106      	bne.n	800540c <HAL_RCC_OscConfig+0x480>
 80053fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005402:	4a0b      	ldr	r2, [pc, #44]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	6713      	str	r3, [r2, #112]	@ 0x70
 800540a:	e032      	b.n	8005472 <HAL_RCC_OscConfig+0x4e6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d111      	bne.n	8005438 <HAL_RCC_OscConfig+0x4ac>
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	4a05      	ldr	r2, [pc, #20]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005420:	4b03      	ldr	r3, [pc, #12]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	4a02      	ldr	r2, [pc, #8]	@ (8005430 <HAL_RCC_OscConfig+0x4a4>)
 8005426:	f023 0304 	bic.w	r3, r3, #4
 800542a:	6713      	str	r3, [r2, #112]	@ 0x70
 800542c:	e021      	b.n	8005472 <HAL_RCC_OscConfig+0x4e6>
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
 8005434:	58024800 	.word	0x58024800
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x4ce>
 8005440:	4b83      	ldr	r3, [pc, #524]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	4a82      	ldr	r2, [pc, #520]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6713      	str	r3, [r2, #112]	@ 0x70
 800544c:	4b80      	ldr	r3, [pc, #512]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005450:	4a7f      	ldr	r2, [pc, #508]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	@ 0x70
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x4e6>
 800545a:	4b7d      	ldr	r3, [pc, #500]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	4a7c      	ldr	r2, [pc, #496]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	@ 0x70
 8005466:	4b7a      	ldr	r3, [pc, #488]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546a:	4a79      	ldr	r2, [pc, #484]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fb ffef 	bl	800145c <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fb ffeb 	bl	800145c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e14b      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005498:	4b6d      	ldr	r3, [pc, #436]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCC_OscConfig+0x4f6>
 80054a4:	e014      	b.n	80054d0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fb ffd9 	bl	800145c <HAL_GetTick>
 80054aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fb ffd5 	bl	800145c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e135      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054c4:	4b62      	ldr	r3, [pc, #392]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 812a 	beq.w	800572e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054da:	4b5d      	ldr	r3, [pc, #372]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e2:	2b18      	cmp	r3, #24
 80054e4:	f000 80ba 	beq.w	800565c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	f040 8095 	bne.w	800561c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a56      	ldr	r2, [pc, #344]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80054f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fb ffad 	bl	800145c <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005506:	f7fb ffa9 	bl	800145c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e10b      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005518:	4b4d      	ldr	r3, [pc, #308]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f0      	bne.n	8005506 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005524:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005528:	4b4a      	ldr	r3, [pc, #296]	@ (8005654 <HAL_RCC_OscConfig+0x6c8>)
 800552a:	4013      	ands	r3, r2
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005534:	0112      	lsls	r2, r2, #4
 8005536:	430a      	orrs	r2, r1
 8005538:	4945      	ldr	r1, [pc, #276]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	628b      	str	r3, [r1, #40]	@ 0x28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	3b01      	subs	r3, #1
 8005544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554c:	3b01      	subs	r3, #1
 800554e:	025b      	lsls	r3, r3, #9
 8005550:	b29b      	uxth	r3, r3
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	3b01      	subs	r3, #1
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005566:	3b01      	subs	r3, #1
 8005568:	061b      	lsls	r3, r3, #24
 800556a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800556e:	4938      	ldr	r1, [pc, #224]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005570:	4313      	orrs	r3, r2
 8005572:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005574:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	4a35      	ldr	r2, [pc, #212]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005580:	4b33      	ldr	r3, [pc, #204]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005584:	4b34      	ldr	r3, [pc, #208]	@ (8005658 <HAL_RCC_OscConfig+0x6cc>)
 8005586:	4013      	ands	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800558c:	00d2      	lsls	r2, r2, #3
 800558e:	4930      	ldr	r1, [pc, #192]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005594:	4b2e      	ldr	r3, [pc, #184]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	f023 020c 	bic.w	r2, r3, #12
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	492b      	ldr	r1, [pc, #172]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055aa:	f023 0202 	bic.w	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	4927      	ldr	r1, [pc, #156]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055b8:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	4a24      	ldr	r2, [pc, #144]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4b22      	ldr	r3, [pc, #136]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a21      	ldr	r2, [pc, #132]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fb ff32 	bl	800145c <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fb ff2e 	bl	800145c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e090      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x670>
 800561a:	e088      	b.n	800572e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0b      	ldr	r2, [pc, #44]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fb ff18 	bl	800145c <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fb ff14 	bl	800145c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e076      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005642:	4b03      	ldr	r3, [pc, #12]	@ (8005650 <HAL_RCC_OscConfig+0x6c4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x6a4>
 800564e:	e06e      	b.n	800572e <HAL_RCC_OscConfig+0x7a2>
 8005650:	58024400 	.word	0x58024400
 8005654:	fffffc0c 	.word	0xfffffc0c
 8005658:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800565c:	4b36      	ldr	r3, [pc, #216]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005662:	4b35      	ldr	r3, [pc, #212]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005666:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	2b01      	cmp	r3, #1
 800566e:	d031      	beq.n	80056d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d12a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d122      	bne.n	80056d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800569a:	429a      	cmp	r2, r3
 800569c:	d11a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	0a5b      	lsrs	r3, r3, #9
 80056a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d111      	bne.n	80056d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	0c1b      	lsrs	r3, r3, #16
 80056b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d108      	bne.n	80056d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	0e1b      	lsrs	r3, r3, #24
 80056c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e02b      	b.n	8005730 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056d8:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 80056da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d01f      	beq.n	800572e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056ee:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	4a11      	ldr	r2, [pc, #68]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056fa:	f7fb feaf 	bl	800145c <HAL_GetTick>
 80056fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005700:	bf00      	nop
 8005702:	f7fb feab 	bl	800145c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	4293      	cmp	r3, r2
 800570c:	d0f9      	beq.n	8005702 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800570e:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 8005710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <HAL_RCC_OscConfig+0x7b0>)
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800571a:	00d2      	lsls	r2, r2, #3
 800571c:	4906      	ldr	r1, [pc, #24]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 800571e:	4313      	orrs	r3, r2
 8005720:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005722:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a04      	ldr	r2, [pc, #16]	@ (8005738 <HAL_RCC_OscConfig+0x7ac>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	@ 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	58024400 	.word	0x58024400
 800573c:	ffff0007 	.word	0xffff0007

08005740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e19c      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005754:	4b8a      	ldr	r3, [pc, #552]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d910      	bls.n	8005784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005762:	4b87      	ldr	r3, [pc, #540]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 020f 	bic.w	r2, r3, #15
 800576a:	4985      	ldr	r1, [pc, #532]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005772:	4b83      	ldr	r3, [pc, #524]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d001      	beq.n	8005784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e184      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	4b7b      	ldr	r3, [pc, #492]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800579c:	429a      	cmp	r2, r3
 800579e:	d908      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057a0:	4b78      	ldr	r3, [pc, #480]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	4975      	ldr	r1, [pc, #468]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	4b70      	ldr	r3, [pc, #448]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d908      	bls.n	80057e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	496a      	ldr	r1, [pc, #424]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	4b64      	ldr	r3, [pc, #400]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d908      	bls.n	800580e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057fc:	4b61      	ldr	r3, [pc, #388]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	495e      	ldr	r1, [pc, #376]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 800580a:	4313      	orrs	r3, r2
 800580c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d010      	beq.n	800583c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	4b59      	ldr	r3, [pc, #356]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005826:	429a      	cmp	r2, r3
 8005828:	d908      	bls.n	800583c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800582a:	4b56      	ldr	r3, [pc, #344]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	4953      	ldr	r1, [pc, #332]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005838:	4313      	orrs	r3, r2
 800583a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	4b4d      	ldr	r3, [pc, #308]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005858:	4b4a      	ldr	r3, [pc, #296]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f023 020f 	bic.w	r2, r3, #15
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4947      	ldr	r1, [pc, #284]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005866:	4313      	orrs	r3, r2
 8005868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d055      	beq.n	8005922 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005876:	4b43      	ldr	r3, [pc, #268]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4940      	ldr	r1, [pc, #256]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005884:	4313      	orrs	r3, r2
 8005886:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005890:	4b3c      	ldr	r3, [pc, #240]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d121      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0f6      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058a8:	4b36      	ldr	r3, [pc, #216]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d115      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0ea      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058c0:	4b30      	ldr	r3, [pc, #192]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0de      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0d6      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058e0:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f023 0207 	bic.w	r2, r3, #7
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4925      	ldr	r1, [pc, #148]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f2:	f7fb fdb3 	bl	800145c <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058fa:	f7fb fdaf 	bl	800145c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0be      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005910:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	429a      	cmp	r2, r3
 8005920:	d1eb      	bne.n	80058fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d010      	beq.n	8005950 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	429a      	cmp	r2, r3
 800593c:	d208      	bcs.n	8005950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800593e:	4b11      	ldr	r3, [pc, #68]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f023 020f 	bic.w	r2, r3, #15
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	490e      	ldr	r1, [pc, #56]	@ (8005984 <HAL_RCC_ClockConfig+0x244>)
 800594c:	4313      	orrs	r3, r2
 800594e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d214      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 020f 	bic.w	r2, r3, #15
 8005966:	4906      	ldr	r1, [pc, #24]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <HAL_RCC_ClockConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d005      	beq.n	8005988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e086      	b.n	8005a8e <HAL_RCC_ClockConfig+0x34e>
 8005980:	52002000 	.word	0x52002000
 8005984:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	4b3f      	ldr	r3, [pc, #252]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d208      	bcs.n	80059b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	4939      	ldr	r1, [pc, #228]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d010      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	4b34      	ldr	r3, [pc, #208]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d208      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059d2:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	492e      	ldr	r1, [pc, #184]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	4b28      	ldr	r3, [pc, #160]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d208      	bcs.n	8005a12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a00:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	4922      	ldr	r1, [pc, #136]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	4b1d      	ldr	r3, [pc, #116]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d208      	bcs.n	8005a40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	4917      	ldr	r1, [pc, #92]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a40:	f000 f834 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	4912      	ldr	r1, [pc, #72]	@ (8005a9c <HAL_RCC_ClockConfig+0x35c>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a98 <HAL_RCC_ClockConfig+0x358>)
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	4a0d      	ldr	r2, [pc, #52]	@ (8005a9c <HAL_RCC_ClockConfig+0x35c>)
 8005a68:	5cd3      	ldrb	r3, [r2, r3]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa0 <HAL_RCC_ClockConfig+0x360>)
 8005a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a78:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <HAL_RCC_ClockConfig+0x364>)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <HAL_RCC_ClockConfig+0x368>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fb fca0 	bl	80013c8 <HAL_InitTick>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	0800b30c 	.word	0x0800b30c
 8005aa0:	24000040 	.word	0x24000040
 8005aa4:	2400003c 	.word	0x2400003c
 8005aa8:	24000044 	.word	0x24000044

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	@ 0x24
 8005ab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab2:	4bb3      	ldr	r3, [pc, #716]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aba:	2b18      	cmp	r3, #24
 8005abc:	f200 8155 	bhi.w	8005d6a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b2d 	.word	0x08005b2d
 8005acc:	08005d6b 	.word	0x08005d6b
 8005ad0:	08005d6b 	.word	0x08005d6b
 8005ad4:	08005d6b 	.word	0x08005d6b
 8005ad8:	08005d6b 	.word	0x08005d6b
 8005adc:	08005d6b 	.word	0x08005d6b
 8005ae0:	08005d6b 	.word	0x08005d6b
 8005ae4:	08005d6b 	.word	0x08005d6b
 8005ae8:	08005b53 	.word	0x08005b53
 8005aec:	08005d6b 	.word	0x08005d6b
 8005af0:	08005d6b 	.word	0x08005d6b
 8005af4:	08005d6b 	.word	0x08005d6b
 8005af8:	08005d6b 	.word	0x08005d6b
 8005afc:	08005d6b 	.word	0x08005d6b
 8005b00:	08005d6b 	.word	0x08005d6b
 8005b04:	08005d6b 	.word	0x08005d6b
 8005b08:	08005b59 	.word	0x08005b59
 8005b0c:	08005d6b 	.word	0x08005d6b
 8005b10:	08005d6b 	.word	0x08005d6b
 8005b14:	08005d6b 	.word	0x08005d6b
 8005b18:	08005d6b 	.word	0x08005d6b
 8005b1c:	08005d6b 	.word	0x08005d6b
 8005b20:	08005d6b 	.word	0x08005d6b
 8005b24:	08005d6b 	.word	0x08005d6b
 8005b28:	08005b5f 	.word	0x08005b5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b2c:	4b94      	ldr	r3, [pc, #592]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b38:	4b91      	ldr	r3, [pc, #580]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	4a90      	ldr	r2, [pc, #576]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b4a:	e111      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b4e:	61bb      	str	r3, [r7, #24]
      break;
 8005b50:	e10e      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b52:	4b8d      	ldr	r3, [pc, #564]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b54:	61bb      	str	r3, [r7, #24]
      break;
 8005b56:	e10b      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b58:	4b8c      	ldr	r3, [pc, #560]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b5a:	61bb      	str	r3, [r7, #24]
      break;
 8005b5c:	e108      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b5e:	4b88      	ldr	r3, [pc, #544]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b68:	4b85      	ldr	r3, [pc, #532]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b74:	4b82      	ldr	r3, [pc, #520]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b7e:	4b80      	ldr	r3, [pc, #512]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b82:	08db      	lsrs	r3, r3, #3
 8005b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80e1 	beq.w	8005d64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	f000 8083 	beq.w	8005cb0 <HAL_RCC_GetSysClockFreq+0x204>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f200 80a1 	bhi.w	8005cf4 <HAL_RCC_GetSysClockFreq+0x248>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x114>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d056      	beq.n	8005c6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bbe:	e099      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02d      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	08db      	lsrs	r3, r3, #3
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bdc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b62      	ldr	r3, [pc, #392]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c26:	e087      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3a:	4b51      	ldr	r3, [pc, #324]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c6a:	e065      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b40      	ldr	r3, [pc, #256]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cae:	e043      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cf2:	e021      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b1e      	ldr	r3, [pc, #120]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d36:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	0a5b      	lsrs	r3, r3, #9
 8005d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d42:	3301      	adds	r3, #1
 8005d44:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d5c:	ee17 3a90 	vmov	r3, s15
 8005d60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d62:	e005      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
      break;
 8005d68:	e002      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d6a:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d6c:	61bb      	str	r3, [r7, #24]
      break;
 8005d6e:	bf00      	nop
  }

  return sysclockfreq;
 8005d70:	69bb      	ldr	r3, [r7, #24]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3724      	adds	r7, #36	@ 0x24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	03d09000 	.word	0x03d09000
 8005d88:	003d0900 	.word	0x003d0900
 8005d8c:	007a1200 	.word	0x007a1200
 8005d90:	46000000 	.word	0x46000000
 8005d94:	4c742400 	.word	0x4c742400
 8005d98:	4a742400 	.word	0x4a742400
 8005d9c:	4af42400 	.word	0x4af42400

08005da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005da6:	f7ff fe81 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005daa:	4602      	mov	r2, r0
 8005dac:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	490f      	ldr	r1, [pc, #60]	@ (8005df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005db8:	5ccb      	ldrb	r3, [r1, r3]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	4a09      	ldr	r2, [pc, #36]	@ (8005df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	4a07      	ldr	r2, [pc, #28]	@ (8005df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ddc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dde:	4a07      	ldr	r2, [pc, #28]	@ (8005dfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	58024400 	.word	0x58024400
 8005df4:	0800b30c 	.word	0x0800b30c
 8005df8:	24000040 	.word	0x24000040
 8005dfc:	2400003c 	.word	0x2400003c

08005e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e04:	f7ff ffcc 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4904      	ldr	r1, [pc, #16]	@ (8005e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	58024400 	.word	0x58024400
 8005e28:	0800b30c 	.word	0x0800b30c

08005e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e30:	f7ff ffb6 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	4904      	ldr	r1, [pc, #16]	@ (8005e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e42:	5ccb      	ldrb	r3, [r1, r3]
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	58024400 	.word	0x58024400
 8005e54:	0800b30c 	.word	0x0800b30c

08005e58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e5c:	b0c6      	sub	sp, #280	@ 0x118
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e82:	d049      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e8e:	d02f      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e94:	d828      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9a:	d01a      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ea0:	d822      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eaa:	d007      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eae:	4bab      	ldr	r3, [pc, #684]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	4aaa      	ldr	r2, [pc, #680]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005eba:	e01a      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fc25 	bl	8007714 <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ed0:	e00f      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed6:	3328      	adds	r3, #40	@ 0x28
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fccc 	bl	8007878 <RCCEx_PLL3_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ee6:	e004      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005efa:	4b98      	ldr	r3, [pc, #608]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f08:	4a94      	ldr	r2, [pc, #592]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005f24:	f04f 0900 	mov.w	r9, #0
 8005f28:	ea58 0309 	orrs.w	r3, r8, r9
 8005f2c:	d047      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d82a      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f38:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f63 	.word	0x08005f63
 8005f48:	08005f79 	.word	0x08005f79
 8005f4c:	08005f97 	.word	0x08005f97
 8005f50:	08005f97 	.word	0x08005f97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b81      	ldr	r3, [pc, #516]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a80      	ldr	r2, [pc, #512]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f60:	e01a      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f66:	3308      	adds	r3, #8
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 fbd2 	bl	8007714 <RCCEx_PLL2_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f76:	e00f      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7c:	3328      	adds	r3, #40	@ 0x28
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fc79 	bl	8007878 <RCCEx_PLL3_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f8c:	e004      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f94:	e000      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa4:	f023 0107 	bic.w	r1, r3, #7
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fae:	4a6b      	ldr	r2, [pc, #428]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005fca:	f04f 0b00 	mov.w	fp, #0
 8005fce:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fd2:	d05b      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fdc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fe0:	d03b      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005fe2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005fe6:	d834      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005fe8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fec:	d037      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005fee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ff2:	d82e      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ff8:	d033      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ffa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ffe:	d828      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006004:	d01a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800600a:	d822      	bhi.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006014:	d007      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006016:	e01c      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006018:	4b50      	ldr	r3, [pc, #320]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601c:	4a4f      	ldr	r2, [pc, #316]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800601e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006024:	e01e      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	3308      	adds	r3, #8
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f001 fb70 	bl	8007714 <RCCEx_PLL2_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800603a:	e013      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	3328      	adds	r3, #40	@ 0x28
 8006042:	2100      	movs	r1, #0
 8006044:	4618      	mov	r0, r3
 8006046:	f001 fc17 	bl	8007878 <RCCEx_PLL3_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006050:	e008      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800606c:	4b3b      	ldr	r3, [pc, #236]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006070:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800607c:	4a37      	ldr	r2, [pc, #220]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800607e:	430b      	orrs	r3, r1
 8006080:	6593      	str	r3, [r2, #88]	@ 0x58
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006098:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d05d      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060b8:	d03b      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80060be:	d834      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060c4:	d037      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80060c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ca:	d82e      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060d0:	d033      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80060d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060d6:	d828      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060dc:	d01a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80060de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e2:	d822      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80060e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ec:	d007      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80060ee:	e01c      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f0:	4b1a      	ldr	r3, [pc, #104]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	4a19      	ldr	r2, [pc, #100]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060fc:	e01e      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	3308      	adds	r3, #8
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fb04 	bl	8007714 <RCCEx_PLL2_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006112:	e013      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006118:	3328      	adds	r3, #40	@ 0x28
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fbab 	bl	8007878 <RCCEx_PLL3_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006128:	e008      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006130:	e004      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006132:	bf00      	nop
 8006134:	e002      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800613a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10d      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006148:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006150:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006154:	4a01      	ldr	r2, [pc, #4]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006156:	430b      	orrs	r3, r1
 8006158:	6593      	str	r3, [r2, #88]	@ 0x58
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800615c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006174:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800617e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d03a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618e:	2b30      	cmp	r3, #48	@ 0x30
 8006190:	d01f      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006192:	2b30      	cmp	r3, #48	@ 0x30
 8006194:	d819      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006196:	2b20      	cmp	r3, #32
 8006198:	d00c      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d815      	bhi.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x372>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d019      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061a2:	2b10      	cmp	r3, #16
 80061a4:	d111      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a6:	4baa      	ldr	r3, [pc, #680]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	4aa9      	ldr	r2, [pc, #676]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061b2:	e011      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	3308      	adds	r3, #8
 80061ba:	2102      	movs	r1, #2
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 faa9 	bl	8007714 <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80061c8:	e006      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061e0:	4b9b      	ldr	r3, [pc, #620]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	4a98      	ldr	r2, [pc, #608]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061f0:	430b      	orrs	r3, r1
 80061f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f4:	e003      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800620a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800620e:	2300      	movs	r3, #0
 8006210:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006214:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006218:	460b      	mov	r3, r1
 800621a:	4313      	orrs	r3, r2
 800621c:	d051      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006228:	d035      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800622a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800622e:	d82e      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006230:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006234:	d031      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006236:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800623a:	d828      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006240:	d01a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006246:	d822      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800624c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006250:	d007      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006252:	e01c      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006254:	4b7e      	ldr	r3, [pc, #504]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	4a7d      	ldr	r2, [pc, #500]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800625a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006260:	e01c      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006266:	3308      	adds	r3, #8
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f001 fa52 	bl	8007714 <RCCEx_PLL2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006276:	e011      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	3328      	adds	r3, #40	@ 0x28
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f001 faf9 	bl	8007878 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b2:	4a67      	ldr	r2, [pc, #412]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062d8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d053      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062ec:	d033      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80062ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f2:	d82c      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062f8:	d02f      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80062fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062fe:	d826      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006300:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006304:	d02b      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006306:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800630a:	d820      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006310:	d012      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006316:	d81a      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d022      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006320:	d115      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006326:	3308      	adds	r3, #8
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f9f2 	bl	8007714 <RCCEx_PLL2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006336:	e015      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	3328      	adds	r3, #40	@ 0x28
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fa99 	bl	8007878 <RCCEx_PLL3_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800634c:	e00a      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006354:	e006      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006356:	bf00      	nop
 8006358:	e004      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800636c:	4b38      	ldr	r3, [pc, #224]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006370:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637a:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800637c:	430b      	orrs	r3, r1
 800637e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006380:	e003      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006386:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800639a:	2300      	movs	r3, #0
 800639c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063a4:	460b      	mov	r3, r1
 80063a6:	4313      	orrs	r3, r2
 80063a8:	d058      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063b6:	d033      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80063b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063bc:	d82c      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c2:	d02f      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c8:	d826      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063ce:	d02b      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80063d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063d4:	d820      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063da:	d012      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e0:	d81a      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d022      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80063e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ea:	d115      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f0:	3308      	adds	r3, #8
 80063f2:	2101      	movs	r1, #1
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 f98d 	bl	8007714 <RCCEx_PLL2_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006400:	e015      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006406:	3328      	adds	r3, #40	@ 0x28
 8006408:	2101      	movs	r1, #1
 800640a:	4618      	mov	r0, r3
 800640c:	f001 fa34 	bl	8007878 <RCCEx_PLL3_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006416:	e00a      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800641e:	e006      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006420:	bf00      	nop
 8006422:	e004      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006424:	bf00      	nop
 8006426:	e002      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800642c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10e      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006446:	4a02      	ldr	r2, [pc, #8]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006448:	430b      	orrs	r3, r1
 800644a:	6593      	str	r3, [r2, #88]	@ 0x58
 800644c:	e006      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800646c:	2300      	movs	r3, #0
 800646e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006472:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006476:	460b      	mov	r3, r1
 8006478:	4313      	orrs	r3, r2
 800647a:	d037      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006486:	d00e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648c:	d816      	bhi.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d018      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006496:	d111      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4bc4      	ldr	r3, [pc, #784]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4ac3      	ldr	r2, [pc, #780]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064a4:	e00f      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064aa:	3308      	adds	r3, #8
 80064ac:	2101      	movs	r1, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f930 	bl	8007714 <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80064ba:	e004      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064c2:	e000      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80064c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064ce:	4bb7      	ldr	r3, [pc, #732]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064dc:	4ab3      	ldr	r2, [pc, #716]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80064e2:	e003      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80064f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006502:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d039      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006512:	2b03      	cmp	r3, #3
 8006514:	d81c      	bhi.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006559 	.word	0x08006559
 8006520:	0800652d 	.word	0x0800652d
 8006524:	0800653b 	.word	0x0800653b
 8006528:	08006559 	.word	0x08006559
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652c:	4b9f      	ldr	r3, [pc, #636]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	4a9e      	ldr	r2, [pc, #632]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006538:	e00f      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	3308      	adds	r3, #8
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f8e6 	bl	8007714 <RCCEx_PLL2_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800654e:	e004      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006556:	e000      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006562:	4b92      	ldr	r3, [pc, #584]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006566:	f023 0103 	bic.w	r1, r3, #3
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006570:	4a8e      	ldr	r2, [pc, #568]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	430b      	orrs	r3, r1
 8006574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006576:	e003      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800657c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800658c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006590:	2300      	movs	r3, #0
 8006592:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006596:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800659a:	460b      	mov	r3, r1
 800659c:	4313      	orrs	r3, r2
 800659e:	f000 8099 	beq.w	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065a2:	4b83      	ldr	r3, [pc, #524]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a82      	ldr	r2, [pc, #520]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ae:	f7fa ff55 	bl	800145c <HAL_GetTick>
 80065b2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065b6:	e00b      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b8:	f7fa ff50 	bl	800145c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b64      	cmp	r3, #100	@ 0x64
 80065c6:	d903      	bls.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065ce:	e005      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065d0:	4b77      	ldr	r3, [pc, #476]	@ (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0ed      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80065dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d173      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065e4:	4b71      	ldr	r3, [pc, #452]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065f0:	4053      	eors	r3, r2
 80065f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d015      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065fa:	4b6c      	ldr	r3, [pc, #432]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006602:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006606:	4b69      	ldr	r3, [pc, #420]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660a:	4a68      	ldr	r2, [pc, #416]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006610:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006612:	4b66      	ldr	r3, [pc, #408]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006616:	4a65      	ldr	r2, [pc, #404]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800661e:	4a63      	ldr	r2, [pc, #396]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006624:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800662e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006632:	d118      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fa ff12 	bl	800145c <HAL_GetTick>
 8006638:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800663c:	e00d      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fa ff0d 	bl	800145c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800664e:	429a      	cmp	r2, r3
 8006650:	d903      	bls.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006658:	e005      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800665a:	4b54      	ldr	r3, [pc, #336]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0eb      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800666a:	2b00      	cmp	r3, #0
 800666c:	d129      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006672:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800667a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800667e:	d10e      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006680:	4b4a      	ldr	r3, [pc, #296]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006690:	091a      	lsrs	r2, r3, #4
 8006692:	4b48      	ldr	r3, [pc, #288]	@ (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006694:	4013      	ands	r3, r2
 8006696:	4a45      	ldr	r2, [pc, #276]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006698:	430b      	orrs	r3, r1
 800669a:	6113      	str	r3, [r2, #16]
 800669c:	e005      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800669e:	4b43      	ldr	r3, [pc, #268]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	4a42      	ldr	r2, [pc, #264]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066a8:	6113      	str	r3, [r2, #16]
 80066aa:	4b40      	ldr	r3, [pc, #256]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066ac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ba:	4a3c      	ldr	r2, [pc, #240]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066bc:	430b      	orrs	r3, r1
 80066be:	6713      	str	r3, [r2, #112]	@ 0x70
 80066c0:	e008      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80066ca:	e003      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f002 0301 	and.w	r3, r2, #1
 80066e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e4:	2300      	movs	r3, #0
 80066e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f000 808f 	beq.w	8006814 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066fc:	2b28      	cmp	r3, #40	@ 0x28
 80066fe:	d871      	bhi.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006700:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	080067ed 	.word	0x080067ed
 800670c:	080067e5 	.word	0x080067e5
 8006710:	080067e5 	.word	0x080067e5
 8006714:	080067e5 	.word	0x080067e5
 8006718:	080067e5 	.word	0x080067e5
 800671c:	080067e5 	.word	0x080067e5
 8006720:	080067e5 	.word	0x080067e5
 8006724:	080067e5 	.word	0x080067e5
 8006728:	080067b9 	.word	0x080067b9
 800672c:	080067e5 	.word	0x080067e5
 8006730:	080067e5 	.word	0x080067e5
 8006734:	080067e5 	.word	0x080067e5
 8006738:	080067e5 	.word	0x080067e5
 800673c:	080067e5 	.word	0x080067e5
 8006740:	080067e5 	.word	0x080067e5
 8006744:	080067e5 	.word	0x080067e5
 8006748:	080067cf 	.word	0x080067cf
 800674c:	080067e5 	.word	0x080067e5
 8006750:	080067e5 	.word	0x080067e5
 8006754:	080067e5 	.word	0x080067e5
 8006758:	080067e5 	.word	0x080067e5
 800675c:	080067e5 	.word	0x080067e5
 8006760:	080067e5 	.word	0x080067e5
 8006764:	080067e5 	.word	0x080067e5
 8006768:	080067ed 	.word	0x080067ed
 800676c:	080067e5 	.word	0x080067e5
 8006770:	080067e5 	.word	0x080067e5
 8006774:	080067e5 	.word	0x080067e5
 8006778:	080067e5 	.word	0x080067e5
 800677c:	080067e5 	.word	0x080067e5
 8006780:	080067e5 	.word	0x080067e5
 8006784:	080067e5 	.word	0x080067e5
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080067e5 	.word	0x080067e5
 8006790:	080067e5 	.word	0x080067e5
 8006794:	080067e5 	.word	0x080067e5
 8006798:	080067e5 	.word	0x080067e5
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	080067e5 	.word	0x080067e5
 80067a4:	080067e5 	.word	0x080067e5
 80067a8:	080067ed 	.word	0x080067ed
 80067ac:	58024400 	.word	0x58024400
 80067b0:	58024800 	.word	0x58024800
 80067b4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	3308      	adds	r3, #8
 80067be:	2101      	movs	r1, #1
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 ffa7 	bl	8007714 <RCCEx_PLL2_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067cc:	e00f      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	3328      	adds	r3, #40	@ 0x28
 80067d4:	2101      	movs	r1, #1
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f84e 	bl	8007878 <RCCEx_PLL3_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80067ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067f6:	4bbf      	ldr	r3, [pc, #764]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006804:	4abb      	ldr	r2, [pc, #748]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006806:	430b      	orrs	r3, r1
 8006808:	6553      	str	r3, [r2, #84]	@ 0x54
 800680a:	e003      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f002 0302 	and.w	r3, r2, #2
 8006820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006824:	2300      	movs	r3, #0
 8006826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800682a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d041      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800683a:	2b05      	cmp	r3, #5
 800683c:	d824      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800683e:	a201      	add	r2, pc, #4	@ (adr r2, 8006844 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006891 	.word	0x08006891
 8006848:	0800685d 	.word	0x0800685d
 800684c:	08006873 	.word	0x08006873
 8006850:	08006891 	.word	0x08006891
 8006854:	08006891 	.word	0x08006891
 8006858:	08006891 	.word	0x08006891
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	3308      	adds	r3, #8
 8006862:	2101      	movs	r1, #1
 8006864:	4618      	mov	r0, r3
 8006866:	f000 ff55 	bl	8007714 <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006870:	e00f      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006876:	3328      	adds	r3, #40	@ 0x28
 8006878:	2101      	movs	r1, #1
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fffc 	bl	8007878 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006886:	e004      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800688e:	e000      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800689a:	4b96      	ldr	r3, [pc, #600]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f023 0107 	bic.w	r1, r3, #7
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a8:	4a92      	ldr	r2, [pc, #584]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80068ae:	e003      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f002 0304 	and.w	r3, r2, #4
 80068c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d044      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d825      	bhi.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006939 	.word	0x08006939
 80068f0:	08006905 	.word	0x08006905
 80068f4:	0800691b 	.word	0x0800691b
 80068f8:	08006939 	.word	0x08006939
 80068fc:	08006939 	.word	0x08006939
 8006900:	08006939 	.word	0x08006939
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	3308      	adds	r3, #8
 800690a:	2101      	movs	r1, #1
 800690c:	4618      	mov	r0, r3
 800690e:	f000 ff01 	bl	8007714 <RCCEx_PLL2_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006918:	e00f      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	3328      	adds	r3, #40	@ 0x28
 8006920:	2101      	movs	r1, #1
 8006922:	4618      	mov	r0, r3
 8006924:	f000 ffa8 	bl	8007878 <RCCEx_PLL3_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800692e:	e004      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006936:	e000      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006942:	4b6c      	ldr	r3, [pc, #432]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006946:	f023 0107 	bic.w	r1, r3, #7
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	4a68      	ldr	r2, [pc, #416]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006954:	430b      	orrs	r3, r1
 8006956:	6593      	str	r3, [r2, #88]	@ 0x58
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f002 0320 	and.w	r3, r2, #32
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800697c:	460b      	mov	r3, r1
 800697e:	4313      	orrs	r3, r2
 8006980:	d055      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800698a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800698e:	d033      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006994:	d82c      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699a:	d02f      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a0:	d826      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069a6:	d02b      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80069a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069ac:	d820      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b2:	d012      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80069b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b8:	d81a      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80069be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c2:	d115      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	3308      	adds	r3, #8
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fea1 	bl	8007714 <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069d8:	e015      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	3328      	adds	r3, #40	@ 0x28
 80069e0:	2102      	movs	r1, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 ff48 	bl	8007878 <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069ee:	e00a      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069f6:	e006      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069f8:	bf00      	nop
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80069fc:	bf00      	nop
 80069fe:	e002      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a00:	bf00      	nop
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a0e:	4b39      	ldr	r3, [pc, #228]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a1e:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a44:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d058      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a56:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a5a:	d033      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006a5c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a60:	d82c      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a66:	d02f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a6c:	d826      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a72:	d02b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a78:	d820      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7e:	d012      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a84:	d81a      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d022      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8e:	d115      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	3308      	adds	r3, #8
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe3b 	bl	8007714 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006aa4:	e015      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	3328      	adds	r3, #40	@ 0x28
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fee2 	bl	8007878 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006aba:	e00a      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ac2:	e006      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ac4:	bf00      	nop
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10e      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ada:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006aea:	4a02      	ldr	r2, [pc, #8]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d055      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b2c:	d033      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006b2e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b32:	d82c      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b38:	d02f      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b3e:	d826      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b44:	d02b      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006b46:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b4a:	d820      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b50:	d012      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b56:	d81a      	bhi.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d022      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b60:	d115      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	3308      	adds	r3, #8
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fdd2 	bl	8007714 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b76:	e015      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	3328      	adds	r3, #40	@ 0x28
 8006b7e:	2102      	movs	r1, #2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fe79 	bl	8007878 <RCCEx_PLL3_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00a      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b94:	e006      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b96:	bf00      	nop
 8006b98:	e004      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bac:	4ba0      	ldr	r3, [pc, #640]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bbc:	4a9c      	ldr	r2, [pc, #624]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bc2:	e003      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f002 0308 	and.w	r3, r2, #8
 8006bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006be2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d01e      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	3328      	adds	r3, #40	@ 0x28
 8006c00:	2102      	movs	r1, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fe38 	bl	8007878 <RCCEx_PLL3_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006c14:	4b86      	ldr	r3, [pc, #536]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c18:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4a82      	ldr	r2, [pc, #520]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f002 0310 	and.w	r3, r2, #16
 8006c36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c40:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c44:	460b      	mov	r3, r1
 8006c46:	4313      	orrs	r3, r2
 8006c48:	d01e      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c56:	d10c      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5c:	3328      	adds	r3, #40	@ 0x28
 8006c5e:	2102      	movs	r1, #2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fe09 	bl	8007878 <RCCEx_PLL3_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c72:	4b6f      	ldr	r3, [pc, #444]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c82:	4a6b      	ldr	r2, [pc, #428]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c96:	2300      	movs	r3, #0
 8006c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c9a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d03e      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cb0:	d022      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006cb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cb6:	d81b      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc0:	d00b      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006cc2:	e015      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fd21 	bl	8007714 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cd8:	e00f      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	3328      	adds	r3, #40	@ 0x28
 8006ce0:	2102      	movs	r1, #2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fdc8 	bl	8007878 <RCCEx_PLL3_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cee:	e004      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10b      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d02:	4b4b      	ldr	r3, [pc, #300]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d06:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d12:	4a47      	ldr	r2, [pc, #284]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d18:	e003      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d30:	2300      	movs	r3, #0
 8006d32:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	d03b      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d4a:	d01f      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006d4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d50:	d818      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d56:	d003      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006d58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d5c:	d007      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006d5e:	e011      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4b33      	ldr	r3, [pc, #204]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	4a32      	ldr	r2, [pc, #200]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d6c:	e00f      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	3328      	adds	r3, #40	@ 0x28
 8006d74:	2101      	movs	r1, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fd7e 	bl	8007878 <RCCEx_PLL3_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d82:	e004      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d96:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da6:	4a22      	ldr	r2, [pc, #136]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dc8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d034      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de0:	d007      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006de2:	e011      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de4:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006df0:	e00e      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	3308      	adds	r3, #8
 8006df8:	2102      	movs	r1, #2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fc8a 	bl	8007714 <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006e06:	e003      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e18:	4b05      	ldr	r3, [pc, #20]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e26:	4a02      	ldr	r2, [pc, #8]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e2c:	e006      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006e2e:	bf00      	nop
 8006e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e4e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d00c      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	3328      	adds	r3, #40	@ 0x28
 8006e5e:	2102      	movs	r1, #2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fd09 	bl	8007878 <RCCEx_PLL3_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e80:	2300      	movs	r3, #0
 8006e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e84:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	d036      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e98:	d018      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e9e:	d811      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea4:	d014      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eaa:	d80b      	bhi.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d011      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb4:	d106      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	4ab6      	ldr	r2, [pc, #728]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eca:	e004      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ecc:	bf00      	nop
 8006ece:	e002      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ed0:	bf00      	nop
 8006ed2:	e000      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ede:	4bad      	ldr	r3, [pc, #692]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eec:	4aa9      	ldr	r2, [pc, #676]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ef2:	e003      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006f08:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d009      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f18:	4b9e      	ldr	r3, [pc, #632]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f26:	4a9b      	ldr	r2, [pc, #620]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f48:	4b92      	ldr	r3, [pc, #584]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f56:	4a8f      	ldr	r2, [pc, #572]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d00e      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f78:	4b86      	ldr	r3, [pc, #536]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	4a85      	ldr	r2, [pc, #532]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f82:	6113      	str	r3, [r2, #16]
 8006f84:	4b83      	ldr	r3, [pc, #524]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f86:	6919      	ldr	r1, [r3, #16]
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f90:	4a80      	ldr	r2, [pc, #512]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f92:	430b      	orrs	r3, r1
 8006f94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fb2:	4b78      	ldr	r3, [pc, #480]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc0:	4a74      	ldr	r2, [pc, #464]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fc2:	430b      	orrs	r3, r1
 8006fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d00a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff2:	4a68      	ldr	r2, [pc, #416]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	2100      	movs	r1, #0
 8007002:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	d011      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007018:	3308      	adds	r3, #8
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fb79 	bl	8007714 <RCCEx_PLL2_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	2100      	movs	r1, #0
 8007042:	6239      	str	r1, [r7, #32]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
 800704a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d011      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007058:	3308      	adds	r3, #8
 800705a:	2101      	movs	r1, #1
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fb59 	bl	8007714 <RCCEx_PLL2_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	2100      	movs	r1, #0
 8007082:	61b9      	str	r1, [r7, #24]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800708e:	460b      	mov	r3, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	d011      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	3308      	adds	r3, #8
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fb39 	bl	8007714 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	2100      	movs	r1, #0
 80070c2:	6139      	str	r1, [r7, #16]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070ce:	460b      	mov	r3, r1
 80070d0:	4313      	orrs	r3, r2
 80070d2:	d011      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	3328      	adds	r3, #40	@ 0x28
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fbcb 	bl	8007878 <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80070e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	2100      	movs	r1, #0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d011      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	3328      	adds	r3, #40	@ 0x28
 800711a:	2101      	movs	r1, #1
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fbab 	bl	8007878 <RCCEx_PLL3_Config>
 8007122:	4603      	mov	r3, r0
 8007124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	2100      	movs	r1, #0
 8007142:	6039      	str	r1, [r7, #0]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	d011      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	3328      	adds	r3, #40	@ 0x28
 800715a:	2102      	movs	r1, #2
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fb8b 	bl	8007878 <RCCEx_PLL3_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007174:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007178:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
}
 8007186:	4618      	mov	r0, r3
 8007188:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800718c:	46bd      	mov	sp, r7
 800718e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400

08007198 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800719c:	f7fe fe00 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	4904      	ldr	r1, [pc, #16]	@ (80071c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071ae:	5ccb      	ldrb	r3, [r1, r3]
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	58024400 	.word	0x58024400
 80071c0:	0800b30c 	.word	0x0800b30c

080071c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b089      	sub	sp, #36	@ 0x24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071cc:	4ba1      	ldr	r3, [pc, #644]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80071d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071da:	0b1b      	lsrs	r3, r3, #12
 80071dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80071e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80071ee:	4b99      	ldr	r3, [pc, #612]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f2:	08db      	lsrs	r3, r3, #3
 80071f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8111 	beq.w	8007434 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b02      	cmp	r3, #2
 8007216:	f000 8083 	beq.w	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b02      	cmp	r3, #2
 800721e:	f200 80a1 	bhi.w	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d056      	beq.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800722e:	e099      	b.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007230:	4b88      	ldr	r3, [pc, #544]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02d      	beq.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800723c:	4b85      	ldr	r3, [pc, #532]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	08db      	lsrs	r3, r3, #3
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	4a84      	ldr	r2, [pc, #528]	@ (8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
 800724c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b7b      	ldr	r3, [pc, #492]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007296:	e087      	b.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072da:	e065      	b.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b59      	ldr	r3, [pc, #356]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731e:	e043      	b.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b48      	ldr	r3, [pc, #288]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a03 	vldr	s12, [r7, #12]
 8007346:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007362:	e021      	b.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b37      	ldr	r3, [pc, #220]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a03 	vldr	s12, [r7, #12]
 800738a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800745c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073a8:	4b2a      	ldr	r3, [pc, #168]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	0a5b      	lsrs	r3, r3, #9
 80073ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ce:	ee17 2a90 	vmov	r2, s15
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80073d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	0c1b      	lsrs	r3, r3, #16
 80073dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fc:	ee17 2a90 	vmov	r2, s15
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007404:	4b13      	ldr	r3, [pc, #76]	@ (8007454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	0e1b      	lsrs	r3, r3, #24
 800740a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800741a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800742a:	ee17 2a90 	vmov	r2, s15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007432:	e008      	b.n	8007446 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
}
 8007446:	bf00      	nop
 8007448:	3724      	adds	r7, #36	@ 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
 8007458:	03d09000 	.word	0x03d09000
 800745c:	46000000 	.word	0x46000000
 8007460:	4c742400 	.word	0x4c742400
 8007464:	4a742400 	.word	0x4a742400
 8007468:	4af42400 	.word	0x4af42400

0800746c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800746c:	b480      	push	{r7}
 800746e:	b089      	sub	sp, #36	@ 0x24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007474:	4ba1      	ldr	r3, [pc, #644]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800747e:	4b9f      	ldr	r3, [pc, #636]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007482:	0d1b      	lsrs	r3, r3, #20
 8007484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007488:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800748a:	4b9c      	ldr	r3, [pc, #624]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007496:	4b99      	ldr	r3, [pc, #612]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	08db      	lsrs	r3, r3, #3
 800749c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	fb02 f303 	mul.w	r3, r2, r3
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8111 	beq.w	80076dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	f000 8083 	beq.w	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	f200 80a1 	bhi.w	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d056      	beq.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80074d6:	e099      	b.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d8:	4b88      	ldr	r3, [pc, #544]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d02d      	beq.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e4:	4b85      	ldr	r3, [pc, #532]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	08db      	lsrs	r3, r3, #3
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	4a84      	ldr	r2, [pc, #528]	@ (8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b7b      	ldr	r3, [pc, #492]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800753e:	e087      	b.n	8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b6a      	ldr	r3, [pc, #424]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007582:	e065      	b.n	8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800770c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b59      	ldr	r3, [pc, #356]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	e043      	b.n	8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b48      	ldr	r3, [pc, #288]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760a:	e021      	b.n	8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800770c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b37      	ldr	r3, [pc, #220]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007632:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007650:	4b2a      	ldr	r3, [pc, #168]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007654:	0a5b      	lsrs	r3, r3, #9
 8007656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766a:	edd7 6a07 	vldr	s13, [r7, #28]
 800766e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007676:	ee17 2a90 	vmov	r2, s15
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800767e:	4b1f      	ldr	r3, [pc, #124]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	0c1b      	lsrs	r3, r3, #16
 8007684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007698:	edd7 6a07 	vldr	s13, [r7, #28]
 800769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a4:	ee17 2a90 	vmov	r2, s15
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076ac:	4b13      	ldr	r3, [pc, #76]	@ (80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b0:	0e1b      	lsrs	r3, r3, #24
 80076b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d2:	ee17 2a90 	vmov	r2, s15
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80076da:	e008      	b.n	80076ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
}
 80076ee:	bf00      	nop
 80076f0:	3724      	adds	r7, #36	@ 0x24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	58024400 	.word	0x58024400
 8007700:	03d09000 	.word	0x03d09000
 8007704:	46000000 	.word	0x46000000
 8007708:	4c742400 	.word	0x4c742400
 800770c:	4a742400 	.word	0x4a742400
 8007710:	4af42400 	.word	0x4af42400

08007714 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007722:	4b53      	ldr	r3, [pc, #332]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b03      	cmp	r3, #3
 800772c:	d101      	bne.n	8007732 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e099      	b.n	8007866 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007732:	4b4f      	ldr	r3, [pc, #316]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4e      	ldr	r2, [pc, #312]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007738:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800773c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773e:	f7f9 fe8d 	bl	800145c <HAL_GetTick>
 8007742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007744:	e008      	b.n	8007758 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007746:	f7f9 fe89 	bl	800145c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e086      	b.n	8007866 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007758:	4b45      	ldr	r3, [pc, #276]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f0      	bne.n	8007746 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007764:	4b42      	ldr	r3, [pc, #264]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	031b      	lsls	r3, r3, #12
 8007772:	493f      	ldr	r1, [pc, #252]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	628b      	str	r3, [r1, #40]	@ 0x28
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	3b01      	subs	r3, #1
 800777e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	025b      	lsls	r3, r3, #9
 800778a:	b29b      	uxth	r3, r3
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	3b01      	subs	r3, #1
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	061b      	lsls	r3, r3, #24
 80077a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077a8:	4931      	ldr	r1, [pc, #196]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077ae:	4b30      	ldr	r3, [pc, #192]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	492d      	ldr	r1, [pc, #180]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	f023 0220 	bic.w	r2, r3, #32
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	4928      	ldr	r1, [pc, #160]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077d2:	4b27      	ldr	r3, [pc, #156]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d6:	4a26      	ldr	r2, [pc, #152]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077d8:	f023 0310 	bic.w	r3, r3, #16
 80077dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077de:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e2:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <RCCEx_PLL2_Config+0x160>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	69d2      	ldr	r2, [r2, #28]
 80077ea:	00d2      	lsls	r2, r2, #3
 80077ec:	4920      	ldr	r1, [pc, #128]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	f043 0310 	orr.w	r3, r3, #16
 80077fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	4a19      	ldr	r2, [pc, #100]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800780a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800780e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007810:	e00f      	b.n	8007832 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d106      	bne.n	8007826 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007818:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	4a14      	ldr	r2, [pc, #80]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800781e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007824:	e005      	b.n	8007832 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007826:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a11      	ldr	r2, [pc, #68]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800782c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007830:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007832:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a0e      	ldr	r2, [pc, #56]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 8007838:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800783c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783e:	f7f9 fe0d 	bl	800145c <HAL_GetTick>
 8007842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007844:	e008      	b.n	8007858 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007846:	f7f9 fe09 	bl	800145c <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e006      	b.n	8007866 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <RCCEx_PLL2_Config+0x15c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400
 8007874:	ffff0007 	.word	0xffff0007

08007878 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007886:	4b53      	ldr	r3, [pc, #332]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d101      	bne.n	8007896 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e099      	b.n	80079ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007896:	4b4f      	ldr	r3, [pc, #316]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a4e      	ldr	r2, [pc, #312]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800789c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078a2:	f7f9 fddb 	bl	800145c <HAL_GetTick>
 80078a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a8:	e008      	b.n	80078bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078aa:	f7f9 fdd7 	bl	800145c <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d901      	bls.n	80078bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e086      	b.n	80079ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078bc:	4b45      	ldr	r3, [pc, #276]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1f0      	bne.n	80078aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078c8:	4b42      	ldr	r3, [pc, #264]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	051b      	lsls	r3, r3, #20
 80078d6:	493f      	ldr	r1, [pc, #252]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	628b      	str	r3, [r1, #40]	@ 0x28
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	025b      	lsls	r3, r3, #9
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	041b      	lsls	r3, r3, #16
 80078fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	3b01      	subs	r3, #1
 8007906:	061b      	lsls	r3, r3, #24
 8007908:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800790c:	4931      	ldr	r1, [pc, #196]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800790e:	4313      	orrs	r3, r2
 8007910:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007912:	4b30      	ldr	r3, [pc, #192]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	492d      	ldr	r1, [pc, #180]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007920:	4313      	orrs	r3, r2
 8007922:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007924:	4b2b      	ldr	r3, [pc, #172]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	4928      	ldr	r1, [pc, #160]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007932:	4313      	orrs	r3, r2
 8007934:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007936:	4b27      	ldr	r3, [pc, #156]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	4a26      	ldr	r2, [pc, #152]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800793c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007940:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007942:	4b24      	ldr	r3, [pc, #144]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007946:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <RCCEx_PLL3_Config+0x160>)
 8007948:	4013      	ands	r3, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	69d2      	ldr	r2, [r2, #28]
 800794e:	00d2      	lsls	r2, r2, #3
 8007950:	4920      	ldr	r1, [pc, #128]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007952:	4313      	orrs	r3, r2
 8007954:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007956:	4b1f      	ldr	r3, [pc, #124]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795a:	4a1e      	ldr	r2, [pc, #120]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800795c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007968:	4b1a      	ldr	r3, [pc, #104]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	4a19      	ldr	r2, [pc, #100]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800796e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007974:	e00f      	b.n	8007996 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800797c:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	4a14      	ldr	r2, [pc, #80]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007982:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007988:	e005      	b.n	8007996 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800798a:	4b12      	ldr	r3, [pc, #72]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4a11      	ldr	r2, [pc, #68]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007990:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007994:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007996:	4b0f      	ldr	r3, [pc, #60]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a0e      	ldr	r2, [pc, #56]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 800799c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079a2:	f7f9 fd5b 	bl	800145c <HAL_GetTick>
 80079a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a8:	e008      	b.n	80079bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079aa:	f7f9 fd57 	bl	800145c <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e006      	b.n	80079ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079bc:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <RCCEx_PLL3_Config+0x15c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
 80079d8:	ffff0007 	.word	0xffff0007

080079dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e042      	b.n	8007a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fbcf 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2224      	movs	r2, #36	@ 0x24
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fbdc 	bl	80091e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fd6d 	bl	800850c <UART_SetConfig>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e01b      	b.n	8007a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fc5b 	bl	8009328 <UART_CheckIdleState>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08a      	sub	sp, #40	@ 0x28
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d17b      	bne.n	8007b8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <HAL_UART_Transmit+0x26>
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e074      	b.n	8007b90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2221      	movs	r2, #33	@ 0x21
 8007ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ab6:	f7f9 fcd1 	bl	800145c <HAL_GetTick>
 8007aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	88fa      	ldrh	r2, [r7, #6]
 8007ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ad4:	d108      	bne.n	8007ae8 <HAL_UART_Transmit+0x6c>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	e003      	b.n	8007af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007af0:	e030      	b.n	8007b54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2180      	movs	r1, #128	@ 0x80
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fcbd 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e03d      	b.n	8007b90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	3302      	adds	r3, #2
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e007      	b.n	8007b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1c8      	bne.n	8007af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2200      	movs	r2, #0
 8007b68:	2140      	movs	r1, #64	@ 0x40
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fc86 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e006      	b.n	8007b90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b091      	sub	sp, #68	@ 0x44
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d178      	bne.n	8007ca2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_UART_Transmit_IT+0x24>
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e071      	b.n	8007ca4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	88fa      	ldrh	r2, [r7, #6]
 8007bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2221      	movs	r2, #33	@ 0x21
 8007be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf4:	d12a      	bne.n	8007c4c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfe:	d107      	bne.n	8007c10 <HAL_UART_Transmit_IT+0x78>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a29      	ldr	r2, [pc, #164]	@ (8007cb0 <HAL_UART_Transmit_IT+0x118>)
 8007c0c:	679a      	str	r2, [r3, #120]	@ 0x78
 8007c0e:	e002      	b.n	8007c16 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a28      	ldr	r2, [pc, #160]	@ (8007cb4 <HAL_UART_Transmit_IT+0x11c>)
 8007c14:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c36:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c38:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <HAL_UART_Transmit_IT+0x7e>
 8007c4a:	e028      	b.n	8007c9e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c54:	d107      	bne.n	8007c66 <HAL_UART_Transmit_IT+0xce>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4a15      	ldr	r2, [pc, #84]	@ (8007cb8 <HAL_UART_Transmit_IT+0x120>)
 8007c62:	679a      	str	r2, [r3, #120]	@ 0x78
 8007c64:	e002      	b.n	8007c6c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a14      	ldr	r2, [pc, #80]	@ (8007cbc <HAL_UART_Transmit_IT+0x124>)
 8007c6a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	69f9      	ldr	r1, [r7, #28]
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3744      	adds	r7, #68	@ 0x44
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	08009c61 	.word	0x08009c61
 8007cb4:	08009b81 	.word	0x08009b81
 8007cb8:	08009abf 	.word	0x08009abf
 8007cbc:	08009a07 	.word	0x08009a07

08007cc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	@ 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d137      	bne.n	8007d48 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_UART_Receive_DMA+0x24>
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e030      	b.n	8007d4a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <HAL_UART_Receive_DMA+0x94>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d01f      	beq.n	8007d38 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	613b      	str	r3, [r7, #16]
   return(result);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	623b      	str	r3, [r7, #32]
 8007d26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	69f9      	ldr	r1, [r7, #28]
 8007d2a:	6a3a      	ldr	r2, [r7, #32]
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e6      	bne.n	8007d06 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 fc0a 	bl	8009558 <UART_Start_Receive_DMA>
 8007d44:	4603      	mov	r3, r0
 8007d46:	e000      	b.n	8007d4a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3728      	adds	r7, #40	@ 0x28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	58000c00 	.word	0x58000c00

08007d58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d86:	4013      	ands	r3, r2
 8007d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d11b      	bne.n	8007dcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d105      	bne.n	8007db8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8377 	beq.w	80084b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
      }
      return;
 8007dca:	e371      	b.n	80084b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8123 	beq.w	800801c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007dda:	4b8d      	ldr	r3, [pc, #564]	@ (8008010 <HAL_UART_IRQHandler+0x2b8>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007de6:	4b8b      	ldr	r3, [pc, #556]	@ (8008014 <HAL_UART_IRQHandler+0x2bc>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8116 	beq.w	800801c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d011      	beq.n	8007e20 <HAL_UART_IRQHandler+0xc8>
 8007dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e16:	f043 0201 	orr.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d011      	beq.n	8007e50 <HAL_UART_IRQHandler+0xf8>
 8007e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e46:	f043 0204 	orr.w	r2, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d011      	beq.n	8007e80 <HAL_UART_IRQHandler+0x128>
 8007e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e76:	f043 0202 	orr.w	r2, r3, #2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8008010 <HAL_UART_IRQHandler+0x2b8>)
 8007e9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb2:	f043 0208 	orr.w	r2, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d012      	beq.n	8007eee <HAL_UART_IRQHandler+0x196>
 8007ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 82dd 	beq.w	80084b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d013      	beq.n	8007f2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d105      	bne.n	8007f1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f42:	2b40      	cmp	r3, #64	@ 0x40
 8007f44:	d005      	beq.n	8007f52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d054      	beq.n	8007ffc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fbe8 	bl	8009728 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f62:	2b40      	cmp	r3, #64	@ 0x40
 8007f64:	d146      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1d9      	bne.n	8007f66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d017      	beq.n	8007fec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc2:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <HAL_UART_IRQHandler+0x2c0>)
 8007fc4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fa fc55 	bl	800287c <HAL_DMA_Abort_IT>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d019      	beq.n	800800c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fea:	e00f      	b.n	800800c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa77 	bl	80084e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff2:	e00b      	b.n	800800c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa73 	bl	80084e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffa:	e007      	b.n	800800c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa6f 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800800a:	e253      	b.n	80084b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	bf00      	nop
    return;
 800800e:	e251      	b.n	80084b4 <HAL_UART_IRQHandler+0x75c>
 8008010:	10000001 	.word	0x10000001
 8008014:	04000120 	.word	0x04000120
 8008018:	080099db 	.word	0x080099db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 81e7 	bne.w	80083f4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 81e0 	beq.w	80083f4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 81d9 	beq.w	80083f4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2210      	movs	r2, #16
 8008048:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	f040 8151 	bne.w	80082fc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a96      	ldr	r2, [pc, #600]	@ (80082bc <HAL_UART_IRQHandler+0x564>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d068      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a93      	ldr	r2, [pc, #588]	@ (80082c0 <HAL_UART_IRQHandler+0x568>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d061      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a91      	ldr	r2, [pc, #580]	@ (80082c4 <HAL_UART_IRQHandler+0x56c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d05a      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a8e      	ldr	r2, [pc, #568]	@ (80082c8 <HAL_UART_IRQHandler+0x570>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d053      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a8c      	ldr	r2, [pc, #560]	@ (80082cc <HAL_UART_IRQHandler+0x574>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d04c      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a89      	ldr	r2, [pc, #548]	@ (80082d0 <HAL_UART_IRQHandler+0x578>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d045      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a87      	ldr	r2, [pc, #540]	@ (80082d4 <HAL_UART_IRQHandler+0x57c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d03e      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a84      	ldr	r2, [pc, #528]	@ (80082d8 <HAL_UART_IRQHandler+0x580>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d037      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a82      	ldr	r2, [pc, #520]	@ (80082dc <HAL_UART_IRQHandler+0x584>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d030      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a7f      	ldr	r2, [pc, #508]	@ (80082e0 <HAL_UART_IRQHandler+0x588>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d029      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a7d      	ldr	r2, [pc, #500]	@ (80082e4 <HAL_UART_IRQHandler+0x58c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d022      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a7a      	ldr	r2, [pc, #488]	@ (80082e8 <HAL_UART_IRQHandler+0x590>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01b      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a78      	ldr	r2, [pc, #480]	@ (80082ec <HAL_UART_IRQHandler+0x594>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d014      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a75      	ldr	r2, [pc, #468]	@ (80082f0 <HAL_UART_IRQHandler+0x598>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00d      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a73      	ldr	r2, [pc, #460]	@ (80082f4 <HAL_UART_IRQHandler+0x59c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d006      	beq.n	800813a <HAL_UART_IRQHandler+0x3e2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a70      	ldr	r2, [pc, #448]	@ (80082f8 <HAL_UART_IRQHandler+0x5a0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d106      	bne.n	8008148 <HAL_UART_IRQHandler+0x3f0>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	b29b      	uxth	r3, r3
 8008146:	e005      	b.n	8008154 <HAL_UART_IRQHandler+0x3fc>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008158:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 81ab 	beq.w	80084b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008168:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800816c:	429a      	cmp	r2, r3
 800816e:	f080 81a3 	bcs.w	80084b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008188:	f000 8087 	beq.w	800829a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1da      	bne.n	800818c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800820c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e1      	bne.n	80081d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800823c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e3      	bne.n	8008212 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008268:	f023 0310 	bic.w	r3, r3, #16
 800826c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800827c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e4      	bne.n	8008258 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	4618      	mov	r0, r3
 8008296:	f7f9 ffd3 	bl	8002240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f91d 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ba:	e0fd      	b.n	80084b8 <HAL_UART_IRQHandler+0x760>
 80082bc:	40020010 	.word	0x40020010
 80082c0:	40020028 	.word	0x40020028
 80082c4:	40020040 	.word	0x40020040
 80082c8:	40020058 	.word	0x40020058
 80082cc:	40020070 	.word	0x40020070
 80082d0:	40020088 	.word	0x40020088
 80082d4:	400200a0 	.word	0x400200a0
 80082d8:	400200b8 	.word	0x400200b8
 80082dc:	40020410 	.word	0x40020410
 80082e0:	40020428 	.word	0x40020428
 80082e4:	40020440 	.word	0x40020440
 80082e8:	40020458 	.word	0x40020458
 80082ec:	40020470 	.word	0x40020470
 80082f0:	40020488 	.word	0x40020488
 80082f4:	400204a0 	.word	0x400204a0
 80082f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008308:	b29b      	uxth	r3, r3
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80cf 	beq.w	80084bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800831e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80ca 	beq.w	80084bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800833c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800834a:	647b      	str	r3, [r7, #68]	@ 0x44
 800834c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e4      	bne.n	8008328 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	623b      	str	r3, [r7, #32]
   return(result);
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	4b55      	ldr	r3, [pc, #340]	@ (80084c8 <HAL_UART_IRQHandler+0x770>)
 8008372:	4013      	ands	r3, r2
 8008374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008382:	633a      	str	r2, [r7, #48]	@ 0x30
 8008384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e3      	bne.n	800835e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0310 	bic.w	r3, r3, #16
 80083be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69b9      	ldr	r1, [r7, #24]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	617b      	str	r3, [r7, #20]
   return(result);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e4      	bne.n	80083aa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f881 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083f2:	e063      	b.n	80084bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <HAL_UART_IRQHandler+0x6c6>
 8008400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d008      	beq.n	800841e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fcc2 	bl	8009da0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800841c:	e051      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800841e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d014      	beq.n	8008454 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800842a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800843a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008446:	2b00      	cmp	r3, #0
 8008448:	d03a      	beq.n	80084c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
    }
    return;
 8008452:	e035      	b.n	80084c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <HAL_UART_IRQHandler+0x71c>
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fc6c 	bl	8009d4a <UART_EndTransmit_IT>
    return;
 8008472:	e026      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d009      	beq.n	8008494 <HAL_UART_IRQHandler+0x73c>
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008484:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fc9b 	bl	8009dc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008492:	e016      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <HAL_UART_IRQHandler+0x76a>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da0c      	bge.n	80084c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fc83 	bl	8009db4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ae:	e008      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80084b0:	bf00      	nop
 80084b2:	e006      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80084b4:	bf00      	nop
 80084b6:	e004      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80084b8:	bf00      	nop
 80084ba:	e002      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80084bc:	bf00      	nop
 80084be:	e000      	b.n	80084c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80084c0:	bf00      	nop
  }
}
 80084c2:	37e8      	adds	r7, #232	@ 0xe8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	effffffe 	.word	0xeffffffe

080084cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800850c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008510:	b092      	sub	sp, #72	@ 0x48
 8008512:	af00      	add	r7, sp, #0
 8008514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	431a      	orrs	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	431a      	orrs	r2, r3
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	4313      	orrs	r3, r2
 8008532:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4bbe      	ldr	r3, [pc, #760]	@ (8008834 <UART_SetConfig+0x328>)
 800853c:	4013      	ands	r3, r2
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008544:	430b      	orrs	r3, r1
 8008546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4ab3      	ldr	r2, [pc, #716]	@ (8008838 <UART_SetConfig+0x32c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008574:	4313      	orrs	r3, r2
 8008576:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	4baf      	ldr	r3, [pc, #700]	@ (800883c <UART_SetConfig+0x330>)
 8008580:	4013      	ands	r3, r2
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008588:	430b      	orrs	r3, r1
 800858a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008592:	f023 010f 	bic.w	r1, r3, #15
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4aa6      	ldr	r2, [pc, #664]	@ (8008840 <UART_SetConfig+0x334>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d177      	bne.n	800869c <UART_SetConfig+0x190>
 80085ac:	4ba5      	ldr	r3, [pc, #660]	@ (8008844 <UART_SetConfig+0x338>)
 80085ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085b4:	2b28      	cmp	r3, #40	@ 0x28
 80085b6:	d86d      	bhi.n	8008694 <UART_SetConfig+0x188>
 80085b8:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <UART_SetConfig+0xb4>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	08008665 	.word	0x08008665
 80085c4:	08008695 	.word	0x08008695
 80085c8:	08008695 	.word	0x08008695
 80085cc:	08008695 	.word	0x08008695
 80085d0:	08008695 	.word	0x08008695
 80085d4:	08008695 	.word	0x08008695
 80085d8:	08008695 	.word	0x08008695
 80085dc:	08008695 	.word	0x08008695
 80085e0:	0800866d 	.word	0x0800866d
 80085e4:	08008695 	.word	0x08008695
 80085e8:	08008695 	.word	0x08008695
 80085ec:	08008695 	.word	0x08008695
 80085f0:	08008695 	.word	0x08008695
 80085f4:	08008695 	.word	0x08008695
 80085f8:	08008695 	.word	0x08008695
 80085fc:	08008695 	.word	0x08008695
 8008600:	08008675 	.word	0x08008675
 8008604:	08008695 	.word	0x08008695
 8008608:	08008695 	.word	0x08008695
 800860c:	08008695 	.word	0x08008695
 8008610:	08008695 	.word	0x08008695
 8008614:	08008695 	.word	0x08008695
 8008618:	08008695 	.word	0x08008695
 800861c:	08008695 	.word	0x08008695
 8008620:	0800867d 	.word	0x0800867d
 8008624:	08008695 	.word	0x08008695
 8008628:	08008695 	.word	0x08008695
 800862c:	08008695 	.word	0x08008695
 8008630:	08008695 	.word	0x08008695
 8008634:	08008695 	.word	0x08008695
 8008638:	08008695 	.word	0x08008695
 800863c:	08008695 	.word	0x08008695
 8008640:	08008685 	.word	0x08008685
 8008644:	08008695 	.word	0x08008695
 8008648:	08008695 	.word	0x08008695
 800864c:	08008695 	.word	0x08008695
 8008650:	08008695 	.word	0x08008695
 8008654:	08008695 	.word	0x08008695
 8008658:	08008695 	.word	0x08008695
 800865c:	08008695 	.word	0x08008695
 8008660:	0800868d 	.word	0x0800868d
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e326      	b.n	8008cba <UART_SetConfig+0x7ae>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e322      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e31e      	b.n	8008cba <UART_SetConfig+0x7ae>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e31a      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008684:	2320      	movs	r3, #32
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e316      	b.n	8008cba <UART_SetConfig+0x7ae>
 800868c:	2340      	movs	r3, #64	@ 0x40
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e312      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008694:	2380      	movs	r3, #128	@ 0x80
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e30e      	b.n	8008cba <UART_SetConfig+0x7ae>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a69      	ldr	r2, [pc, #420]	@ (8008848 <UART_SetConfig+0x33c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d130      	bne.n	8008708 <UART_SetConfig+0x1fc>
 80086a6:	4b67      	ldr	r3, [pc, #412]	@ (8008844 <UART_SetConfig+0x338>)
 80086a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d826      	bhi.n	8008700 <UART_SetConfig+0x1f4>
 80086b2:	a201      	add	r2, pc, #4	@ (adr r2, 80086b8 <UART_SetConfig+0x1ac>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086d1 	.word	0x080086d1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	080086e1 	.word	0x080086e1
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d6:	e2f0      	b.n	8008cba <UART_SetConfig+0x7ae>
 80086d8:	2304      	movs	r3, #4
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086de:	e2ec      	b.n	8008cba <UART_SetConfig+0x7ae>
 80086e0:	2308      	movs	r3, #8
 80086e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e6:	e2e8      	b.n	8008cba <UART_SetConfig+0x7ae>
 80086e8:	2310      	movs	r3, #16
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e2e4      	b.n	8008cba <UART_SetConfig+0x7ae>
 80086f0:	2320      	movs	r3, #32
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e2e0      	b.n	8008cba <UART_SetConfig+0x7ae>
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e2dc      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008700:	2380      	movs	r3, #128	@ 0x80
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e2d8      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a4f      	ldr	r2, [pc, #316]	@ (800884c <UART_SetConfig+0x340>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d130      	bne.n	8008774 <UART_SetConfig+0x268>
 8008712:	4b4c      	ldr	r3, [pc, #304]	@ (8008844 <UART_SetConfig+0x338>)
 8008714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008716:	f003 0307 	and.w	r3, r3, #7
 800871a:	2b05      	cmp	r3, #5
 800871c:	d826      	bhi.n	800876c <UART_SetConfig+0x260>
 800871e:	a201      	add	r2, pc, #4	@ (adr r2, 8008724 <UART_SetConfig+0x218>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	0800873d 	.word	0x0800873d
 8008728:	08008745 	.word	0x08008745
 800872c:	0800874d 	.word	0x0800874d
 8008730:	08008755 	.word	0x08008755
 8008734:	0800875d 	.word	0x0800875d
 8008738:	08008765 	.word	0x08008765
 800873c:	2300      	movs	r3, #0
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008742:	e2ba      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874a:	e2b6      	b.n	8008cba <UART_SetConfig+0x7ae>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008752:	e2b2      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e2ae      	b.n	8008cba <UART_SetConfig+0x7ae>
 800875c:	2320      	movs	r3, #32
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e2aa      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008764:	2340      	movs	r3, #64	@ 0x40
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e2a6      	b.n	8008cba <UART_SetConfig+0x7ae>
 800876c:	2380      	movs	r3, #128	@ 0x80
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e2a2      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a35      	ldr	r2, [pc, #212]	@ (8008850 <UART_SetConfig+0x344>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d130      	bne.n	80087e0 <UART_SetConfig+0x2d4>
 800877e:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <UART_SetConfig+0x338>)
 8008780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	2b05      	cmp	r3, #5
 8008788:	d826      	bhi.n	80087d8 <UART_SetConfig+0x2cc>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <UART_SetConfig+0x284>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a9 	.word	0x080087a9
 8008794:	080087b1 	.word	0x080087b1
 8008798:	080087b9 	.word	0x080087b9
 800879c:	080087c1 	.word	0x080087c1
 80087a0:	080087c9 	.word	0x080087c9
 80087a4:	080087d1 	.word	0x080087d1
 80087a8:	2300      	movs	r3, #0
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ae:	e284      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087b0:	2304      	movs	r3, #4
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b6:	e280      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087b8:	2308      	movs	r3, #8
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087be:	e27c      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087c0:	2310      	movs	r3, #16
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e278      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087c8:	2320      	movs	r3, #32
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e274      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087d0:	2340      	movs	r3, #64	@ 0x40
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e270      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087d8:	2380      	movs	r3, #128	@ 0x80
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e26c      	b.n	8008cba <UART_SetConfig+0x7ae>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <UART_SetConfig+0x348>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d142      	bne.n	8008870 <UART_SetConfig+0x364>
 80087ea:	4b16      	ldr	r3, [pc, #88]	@ (8008844 <UART_SetConfig+0x338>)
 80087ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d838      	bhi.n	8008868 <UART_SetConfig+0x35c>
 80087f6:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <UART_SetConfig+0x2f0>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008815 	.word	0x08008815
 8008800:	0800881d 	.word	0x0800881d
 8008804:	08008825 	.word	0x08008825
 8008808:	0800882d 	.word	0x0800882d
 800880c:	08008859 	.word	0x08008859
 8008810:	08008861 	.word	0x08008861
 8008814:	2300      	movs	r3, #0
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881a:	e24e      	b.n	8008cba <UART_SetConfig+0x7ae>
 800881c:	2304      	movs	r3, #4
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008822:	e24a      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008824:	2308      	movs	r3, #8
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882a:	e246      	b.n	8008cba <UART_SetConfig+0x7ae>
 800882c:	2310      	movs	r3, #16
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e242      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008834:	cfff69f3 	.word	0xcfff69f3
 8008838:	58000c00 	.word	0x58000c00
 800883c:	11fff4ff 	.word	0x11fff4ff
 8008840:	40011000 	.word	0x40011000
 8008844:	58024400 	.word	0x58024400
 8008848:	40004400 	.word	0x40004400
 800884c:	40004800 	.word	0x40004800
 8008850:	40004c00 	.word	0x40004c00
 8008854:	40005000 	.word	0x40005000
 8008858:	2320      	movs	r3, #32
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885e:	e22c      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008860:	2340      	movs	r3, #64	@ 0x40
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008866:	e228      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008868:	2380      	movs	r3, #128	@ 0x80
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886e:	e224      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4ab1      	ldr	r2, [pc, #708]	@ (8008b3c <UART_SetConfig+0x630>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d176      	bne.n	8008968 <UART_SetConfig+0x45c>
 800887a:	4bb1      	ldr	r3, [pc, #708]	@ (8008b40 <UART_SetConfig+0x634>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800887e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008882:	2b28      	cmp	r3, #40	@ 0x28
 8008884:	d86c      	bhi.n	8008960 <UART_SetConfig+0x454>
 8008886:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <UART_SetConfig+0x380>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	08008931 	.word	0x08008931
 8008890:	08008961 	.word	0x08008961
 8008894:	08008961 	.word	0x08008961
 8008898:	08008961 	.word	0x08008961
 800889c:	08008961 	.word	0x08008961
 80088a0:	08008961 	.word	0x08008961
 80088a4:	08008961 	.word	0x08008961
 80088a8:	08008961 	.word	0x08008961
 80088ac:	08008939 	.word	0x08008939
 80088b0:	08008961 	.word	0x08008961
 80088b4:	08008961 	.word	0x08008961
 80088b8:	08008961 	.word	0x08008961
 80088bc:	08008961 	.word	0x08008961
 80088c0:	08008961 	.word	0x08008961
 80088c4:	08008961 	.word	0x08008961
 80088c8:	08008961 	.word	0x08008961
 80088cc:	08008941 	.word	0x08008941
 80088d0:	08008961 	.word	0x08008961
 80088d4:	08008961 	.word	0x08008961
 80088d8:	08008961 	.word	0x08008961
 80088dc:	08008961 	.word	0x08008961
 80088e0:	08008961 	.word	0x08008961
 80088e4:	08008961 	.word	0x08008961
 80088e8:	08008961 	.word	0x08008961
 80088ec:	08008949 	.word	0x08008949
 80088f0:	08008961 	.word	0x08008961
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008961 	.word	0x08008961
 80088fc:	08008961 	.word	0x08008961
 8008900:	08008961 	.word	0x08008961
 8008904:	08008961 	.word	0x08008961
 8008908:	08008961 	.word	0x08008961
 800890c:	08008951 	.word	0x08008951
 8008910:	08008961 	.word	0x08008961
 8008914:	08008961 	.word	0x08008961
 8008918:	08008961 	.word	0x08008961
 800891c:	08008961 	.word	0x08008961
 8008920:	08008961 	.word	0x08008961
 8008924:	08008961 	.word	0x08008961
 8008928:	08008961 	.word	0x08008961
 800892c:	08008959 	.word	0x08008959
 8008930:	2301      	movs	r3, #1
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008936:	e1c0      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e1bc      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e1b8      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e1b4      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008950:	2320      	movs	r3, #32
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1b0      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008958:	2340      	movs	r3, #64	@ 0x40
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e1ac      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008960:	2380      	movs	r3, #128	@ 0x80
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e1a8      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a75      	ldr	r2, [pc, #468]	@ (8008b44 <UART_SetConfig+0x638>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d130      	bne.n	80089d4 <UART_SetConfig+0x4c8>
 8008972:	4b73      	ldr	r3, [pc, #460]	@ (8008b40 <UART_SetConfig+0x634>)
 8008974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b05      	cmp	r3, #5
 800897c:	d826      	bhi.n	80089cc <UART_SetConfig+0x4c0>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x478>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	0800899d 	.word	0x0800899d
 8008988:	080089a5 	.word	0x080089a5
 800898c:	080089ad 	.word	0x080089ad
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089c5 	.word	0x080089c5
 800899c:	2300      	movs	r3, #0
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a2:	e18a      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089a4:	2304      	movs	r3, #4
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e186      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089ac:	2308      	movs	r3, #8
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e182      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089b4:	2310      	movs	r3, #16
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e17e      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089bc:	2320      	movs	r3, #32
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e17a      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089c4:	2340      	movs	r3, #64	@ 0x40
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ca:	e176      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e172      	b.n	8008cba <UART_SetConfig+0x7ae>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a5b      	ldr	r2, [pc, #364]	@ (8008b48 <UART_SetConfig+0x63c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d130      	bne.n	8008a40 <UART_SetConfig+0x534>
 80089de:	4b58      	ldr	r3, [pc, #352]	@ (8008b40 <UART_SetConfig+0x634>)
 80089e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d826      	bhi.n	8008a38 <UART_SetConfig+0x52c>
 80089ea:	a201      	add	r2, pc, #4	@ (adr r2, 80089f0 <UART_SetConfig+0x4e4>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a09 	.word	0x08008a09
 80089f4:	08008a11 	.word	0x08008a11
 80089f8:	08008a19 	.word	0x08008a19
 80089fc:	08008a21 	.word	0x08008a21
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a31 	.word	0x08008a31
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0e:	e154      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a10:	2304      	movs	r3, #4
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e150      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e14c      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a20:	2310      	movs	r3, #16
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e148      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e144      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a30:	2340      	movs	r3, #64	@ 0x40
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e140      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3e:	e13c      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a41      	ldr	r2, [pc, #260]	@ (8008b4c <UART_SetConfig+0x640>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	f040 8082 	bne.w	8008b50 <UART_SetConfig+0x644>
 8008a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8008b40 <UART_SetConfig+0x634>)
 8008a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a54:	2b28      	cmp	r3, #40	@ 0x28
 8008a56:	d86d      	bhi.n	8008b34 <UART_SetConfig+0x628>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x554>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008b05 	.word	0x08008b05
 8008a64:	08008b35 	.word	0x08008b35
 8008a68:	08008b35 	.word	0x08008b35
 8008a6c:	08008b35 	.word	0x08008b35
 8008a70:	08008b35 	.word	0x08008b35
 8008a74:	08008b35 	.word	0x08008b35
 8008a78:	08008b35 	.word	0x08008b35
 8008a7c:	08008b35 	.word	0x08008b35
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b35 	.word	0x08008b35
 8008a88:	08008b35 	.word	0x08008b35
 8008a8c:	08008b35 	.word	0x08008b35
 8008a90:	08008b35 	.word	0x08008b35
 8008a94:	08008b35 	.word	0x08008b35
 8008a98:	08008b35 	.word	0x08008b35
 8008a9c:	08008b35 	.word	0x08008b35
 8008aa0:	08008b15 	.word	0x08008b15
 8008aa4:	08008b35 	.word	0x08008b35
 8008aa8:	08008b35 	.word	0x08008b35
 8008aac:	08008b35 	.word	0x08008b35
 8008ab0:	08008b35 	.word	0x08008b35
 8008ab4:	08008b35 	.word	0x08008b35
 8008ab8:	08008b35 	.word	0x08008b35
 8008abc:	08008b35 	.word	0x08008b35
 8008ac0:	08008b1d 	.word	0x08008b1d
 8008ac4:	08008b35 	.word	0x08008b35
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008b35 	.word	0x08008b35
 8008ad8:	08008b35 	.word	0x08008b35
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008b25 	.word	0x08008b25
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008b35 	.word	0x08008b35
 8008aec:	08008b35 	.word	0x08008b35
 8008af0:	08008b35 	.word	0x08008b35
 8008af4:	08008b35 	.word	0x08008b35
 8008af8:	08008b35 	.word	0x08008b35
 8008afc:	08008b35 	.word	0x08008b35
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0a:	e0d6      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b12:	e0d2      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b14:	2308      	movs	r3, #8
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	e0ce      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b22:	e0ca      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b24:	2320      	movs	r3, #32
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2a:	e0c6      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b2c:	2340      	movs	r3, #64	@ 0x40
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b32:	e0c2      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b34:	2380      	movs	r3, #128	@ 0x80
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	e0be      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008b3c:	40011400 	.word	0x40011400
 8008b40:	58024400 	.word	0x58024400
 8008b44:	40007800 	.word	0x40007800
 8008b48:	40007c00 	.word	0x40007c00
 8008b4c:	40011800 	.word	0x40011800
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4aad      	ldr	r2, [pc, #692]	@ (8008e0c <UART_SetConfig+0x900>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d176      	bne.n	8008c48 <UART_SetConfig+0x73c>
 8008b5a:	4bad      	ldr	r3, [pc, #692]	@ (8008e10 <UART_SetConfig+0x904>)
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b62:	2b28      	cmp	r3, #40	@ 0x28
 8008b64:	d86c      	bhi.n	8008c40 <UART_SetConfig+0x734>
 8008b66:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <UART_SetConfig+0x660>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008c11 	.word	0x08008c11
 8008b70:	08008c41 	.word	0x08008c41
 8008b74:	08008c41 	.word	0x08008c41
 8008b78:	08008c41 	.word	0x08008c41
 8008b7c:	08008c41 	.word	0x08008c41
 8008b80:	08008c41 	.word	0x08008c41
 8008b84:	08008c41 	.word	0x08008c41
 8008b88:	08008c41 	.word	0x08008c41
 8008b8c:	08008c19 	.word	0x08008c19
 8008b90:	08008c41 	.word	0x08008c41
 8008b94:	08008c41 	.word	0x08008c41
 8008b98:	08008c41 	.word	0x08008c41
 8008b9c:	08008c41 	.word	0x08008c41
 8008ba0:	08008c41 	.word	0x08008c41
 8008ba4:	08008c41 	.word	0x08008c41
 8008ba8:	08008c41 	.word	0x08008c41
 8008bac:	08008c21 	.word	0x08008c21
 8008bb0:	08008c41 	.word	0x08008c41
 8008bb4:	08008c41 	.word	0x08008c41
 8008bb8:	08008c41 	.word	0x08008c41
 8008bbc:	08008c41 	.word	0x08008c41
 8008bc0:	08008c41 	.word	0x08008c41
 8008bc4:	08008c41 	.word	0x08008c41
 8008bc8:	08008c41 	.word	0x08008c41
 8008bcc:	08008c29 	.word	0x08008c29
 8008bd0:	08008c41 	.word	0x08008c41
 8008bd4:	08008c41 	.word	0x08008c41
 8008bd8:	08008c41 	.word	0x08008c41
 8008bdc:	08008c41 	.word	0x08008c41
 8008be0:	08008c41 	.word	0x08008c41
 8008be4:	08008c41 	.word	0x08008c41
 8008be8:	08008c41 	.word	0x08008c41
 8008bec:	08008c31 	.word	0x08008c31
 8008bf0:	08008c41 	.word	0x08008c41
 8008bf4:	08008c41 	.word	0x08008c41
 8008bf8:	08008c41 	.word	0x08008c41
 8008bfc:	08008c41 	.word	0x08008c41
 8008c00:	08008c41 	.word	0x08008c41
 8008c04:	08008c41 	.word	0x08008c41
 8008c08:	08008c41 	.word	0x08008c41
 8008c0c:	08008c39 	.word	0x08008c39
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e050      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e04c      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c20:	2308      	movs	r3, #8
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e048      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e044      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c30:	2320      	movs	r3, #32
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e040      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c38:	2340      	movs	r3, #64	@ 0x40
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e03c      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e038      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a71      	ldr	r2, [pc, #452]	@ (8008e14 <UART_SetConfig+0x908>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d130      	bne.n	8008cb4 <UART_SetConfig+0x7a8>
 8008c52:	4b6f      	ldr	r3, [pc, #444]	@ (8008e10 <UART_SetConfig+0x904>)
 8008c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d826      	bhi.n	8008cac <UART_SetConfig+0x7a0>
 8008c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0x758>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c7d 	.word	0x08008c7d
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c8d 	.word	0x08008c8d
 8008c70:	08008c95 	.word	0x08008c95
 8008c74:	08008c9d 	.word	0x08008c9d
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e01a      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e016      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e012      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e00e      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e00a      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008ca4:	2340      	movs	r3, #64	@ 0x40
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e006      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008cac:	2380      	movs	r3, #128	@ 0x80
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e002      	b.n	8008cba <UART_SetConfig+0x7ae>
 8008cb4:	2380      	movs	r3, #128	@ 0x80
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a55      	ldr	r2, [pc, #340]	@ (8008e14 <UART_SetConfig+0x908>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	f040 80f8 	bne.w	8008eb6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	dc46      	bgt.n	8008d5c <UART_SetConfig+0x850>
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	db75      	blt.n	8008dbe <UART_SetConfig+0x8b2>
 8008cd2:	3b02      	subs	r3, #2
 8008cd4:	2b1e      	cmp	r3, #30
 8008cd6:	d872      	bhi.n	8008dbe <UART_SetConfig+0x8b2>
 8008cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <UART_SetConfig+0x7d4>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d63 	.word	0x08008d63
 8008ce4:	08008dbf 	.word	0x08008dbf
 8008ce8:	08008d6b 	.word	0x08008d6b
 8008cec:	08008dbf 	.word	0x08008dbf
 8008cf0:	08008dbf 	.word	0x08008dbf
 8008cf4:	08008dbf 	.word	0x08008dbf
 8008cf8:	08008d7b 	.word	0x08008d7b
 8008cfc:	08008dbf 	.word	0x08008dbf
 8008d00:	08008dbf 	.word	0x08008dbf
 8008d04:	08008dbf 	.word	0x08008dbf
 8008d08:	08008dbf 	.word	0x08008dbf
 8008d0c:	08008dbf 	.word	0x08008dbf
 8008d10:	08008dbf 	.word	0x08008dbf
 8008d14:	08008dbf 	.word	0x08008dbf
 8008d18:	08008d8b 	.word	0x08008d8b
 8008d1c:	08008dbf 	.word	0x08008dbf
 8008d20:	08008dbf 	.word	0x08008dbf
 8008d24:	08008dbf 	.word	0x08008dbf
 8008d28:	08008dbf 	.word	0x08008dbf
 8008d2c:	08008dbf 	.word	0x08008dbf
 8008d30:	08008dbf 	.word	0x08008dbf
 8008d34:	08008dbf 	.word	0x08008dbf
 8008d38:	08008dbf 	.word	0x08008dbf
 8008d3c:	08008dbf 	.word	0x08008dbf
 8008d40:	08008dbf 	.word	0x08008dbf
 8008d44:	08008dbf 	.word	0x08008dbf
 8008d48:	08008dbf 	.word	0x08008dbf
 8008d4c:	08008dbf 	.word	0x08008dbf
 8008d50:	08008dbf 	.word	0x08008dbf
 8008d54:	08008dbf 	.word	0x08008dbf
 8008d58:	08008db1 	.word	0x08008db1
 8008d5c:	2b40      	cmp	r3, #64	@ 0x40
 8008d5e:	d02a      	beq.n	8008db6 <UART_SetConfig+0x8aa>
 8008d60:	e02d      	b.n	8008dbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d62:	f7fe fa19 	bl	8007198 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d68:	e02f      	b.n	8008dca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fa28 	bl	80071c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e027      	b.n	8008dca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d7a:	f107 0318 	add.w	r3, r7, #24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fb74 	bl	800746c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e01f      	b.n	8008dca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8a:	4b21      	ldr	r3, [pc, #132]	@ (8008e10 <UART_SetConfig+0x904>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d96:	4b1e      	ldr	r3, [pc, #120]	@ (8008e10 <UART_SetConfig+0x904>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	08db      	lsrs	r3, r3, #3
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <UART_SetConfig+0x90c>)
 8008da2:	fa22 f303 	lsr.w	r3, r2, r3
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008da8:	e00f      	b.n	8008dca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008daa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <UART_SetConfig+0x90c>)
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dae:	e00c      	b.n	8008dca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008db0:	4b1a      	ldr	r3, [pc, #104]	@ (8008e1c <UART_SetConfig+0x910>)
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db4:	e009      	b.n	8008dca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e005      	b.n	8008dca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 81ee 	beq.w	80091ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	4a12      	ldr	r2, [pc, #72]	@ (8008e20 <UART_SetConfig+0x914>)
 8008dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	4413      	add	r3, r2
 8008df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d305      	bcc.n	8008e02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d910      	bls.n	8008e24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e08:	e1d1      	b.n	80091ae <UART_SetConfig+0xca2>
 8008e0a:	bf00      	nop
 8008e0c:	40011c00 	.word	0x40011c00
 8008e10:	58024400 	.word	0x58024400
 8008e14:	58000c00 	.word	0x58000c00
 8008e18:	03d09000 	.word	0x03d09000
 8008e1c:	003d0900 	.word	0x003d0900
 8008e20:	0800b324 	.word	0x0800b324
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e26:	2200      	movs	r2, #0
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	60fa      	str	r2, [r7, #12]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e30:	4ac0      	ldr	r2, [pc, #768]	@ (8009134 <UART_SetConfig+0xc28>)
 8008e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2200      	movs	r2, #0
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e46:	f7f7 fac3 	bl	80003d0 <__aeabi_uldivmod>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	020b      	lsls	r3, r1, #8
 8008e5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e60:	0202      	lsls	r2, r0, #8
 8008e62:	6979      	ldr	r1, [r7, #20]
 8008e64:	6849      	ldr	r1, [r1, #4]
 8008e66:	0849      	lsrs	r1, r1, #1
 8008e68:	2000      	movs	r0, #0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	eb12 0804 	adds.w	r8, r2, r4
 8008e72:	eb43 0905 	adc.w	r9, r3, r5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	469a      	mov	sl, r3
 8008e7e:	4693      	mov	fp, r2
 8008e80:	4652      	mov	r2, sl
 8008e82:	465b      	mov	r3, fp
 8008e84:	4640      	mov	r0, r8
 8008e86:	4649      	mov	r1, r9
 8008e88:	f7f7 faa2 	bl	80003d0 <__aeabi_uldivmod>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4613      	mov	r3, r2
 8008e92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e9a:	d308      	bcc.n	8008eae <UART_SetConfig+0x9a2>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ea2:	d204      	bcs.n	8008eae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e17f      	b.n	80091ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008eb4:	e17b      	b.n	80091ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ebe:	f040 80bd 	bne.w	800903c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	dc48      	bgt.n	8008f5c <UART_SetConfig+0xa50>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	db7b      	blt.n	8008fc6 <UART_SetConfig+0xaba>
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d879      	bhi.n	8008fc6 <UART_SetConfig+0xaba>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <UART_SetConfig+0x9cc>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008f63 	.word	0x08008f63
 8008edc:	08008f6b 	.word	0x08008f6b
 8008ee0:	08008fc7 	.word	0x08008fc7
 8008ee4:	08008fc7 	.word	0x08008fc7
 8008ee8:	08008f73 	.word	0x08008f73
 8008eec:	08008fc7 	.word	0x08008fc7
 8008ef0:	08008fc7 	.word	0x08008fc7
 8008ef4:	08008fc7 	.word	0x08008fc7
 8008ef8:	08008f83 	.word	0x08008f83
 8008efc:	08008fc7 	.word	0x08008fc7
 8008f00:	08008fc7 	.word	0x08008fc7
 8008f04:	08008fc7 	.word	0x08008fc7
 8008f08:	08008fc7 	.word	0x08008fc7
 8008f0c:	08008fc7 	.word	0x08008fc7
 8008f10:	08008fc7 	.word	0x08008fc7
 8008f14:	08008fc7 	.word	0x08008fc7
 8008f18:	08008f93 	.word	0x08008f93
 8008f1c:	08008fc7 	.word	0x08008fc7
 8008f20:	08008fc7 	.word	0x08008fc7
 8008f24:	08008fc7 	.word	0x08008fc7
 8008f28:	08008fc7 	.word	0x08008fc7
 8008f2c:	08008fc7 	.word	0x08008fc7
 8008f30:	08008fc7 	.word	0x08008fc7
 8008f34:	08008fc7 	.word	0x08008fc7
 8008f38:	08008fc7 	.word	0x08008fc7
 8008f3c:	08008fc7 	.word	0x08008fc7
 8008f40:	08008fc7 	.word	0x08008fc7
 8008f44:	08008fc7 	.word	0x08008fc7
 8008f48:	08008fc7 	.word	0x08008fc7
 8008f4c:	08008fc7 	.word	0x08008fc7
 8008f50:	08008fc7 	.word	0x08008fc7
 8008f54:	08008fc7 	.word	0x08008fc7
 8008f58:	08008fb9 	.word	0x08008fb9
 8008f5c:	2b40      	cmp	r3, #64	@ 0x40
 8008f5e:	d02e      	beq.n	8008fbe <UART_SetConfig+0xab2>
 8008f60:	e031      	b.n	8008fc6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f62:	f7fc ff4d 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 8008f66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f68:	e033      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f6a:	f7fc ff5f 	bl	8005e2c <HAL_RCC_GetPCLK2Freq>
 8008f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f70:	e02f      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe f924 	bl	80071c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f80:	e027      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f82:	f107 0318 	add.w	r3, r7, #24
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fa70 	bl	800746c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f90:	e01f      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f92:	4b69      	ldr	r3, [pc, #420]	@ (8009138 <UART_SetConfig+0xc2c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f9e:	4b66      	ldr	r3, [pc, #408]	@ (8009138 <UART_SetConfig+0xc2c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	08db      	lsrs	r3, r3, #3
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	4a64      	ldr	r2, [pc, #400]	@ (800913c <UART_SetConfig+0xc30>)
 8008faa:	fa22 f303 	lsr.w	r3, r2, r3
 8008fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fb0:	e00f      	b.n	8008fd2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008fb2:	4b62      	ldr	r3, [pc, #392]	@ (800913c <UART_SetConfig+0xc30>)
 8008fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb6:	e00c      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fb8:	4b61      	ldr	r3, [pc, #388]	@ (8009140 <UART_SetConfig+0xc34>)
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fbc:	e009      	b.n	8008fd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc4:	e005      	b.n	8008fd2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80ea 	beq.w	80091ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	4a55      	ldr	r2, [pc, #340]	@ (8009134 <UART_SetConfig+0xc28>)
 8008fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fec:	005a      	lsls	r2, r3, #1
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	441a      	add	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	2b0f      	cmp	r3, #15
 8009004:	d916      	bls.n	8009034 <UART_SetConfig+0xb28>
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800900c:	d212      	bcs.n	8009034 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800900e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009010:	b29b      	uxth	r3, r3
 8009012:	f023 030f 	bic.w	r3, r3, #15
 8009016:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	b29a      	uxth	r2, r3
 8009024:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009026:	4313      	orrs	r3, r2
 8009028:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	e0bc      	b.n	80091ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800903a:	e0b8      	b.n	80091ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800903c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009040:	2b20      	cmp	r3, #32
 8009042:	dc4b      	bgt.n	80090dc <UART_SetConfig+0xbd0>
 8009044:	2b00      	cmp	r3, #0
 8009046:	f2c0 8087 	blt.w	8009158 <UART_SetConfig+0xc4c>
 800904a:	2b20      	cmp	r3, #32
 800904c:	f200 8084 	bhi.w	8009158 <UART_SetConfig+0xc4c>
 8009050:	a201      	add	r2, pc, #4	@ (adr r2, 8009058 <UART_SetConfig+0xb4c>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	080090e3 	.word	0x080090e3
 800905c:	080090eb 	.word	0x080090eb
 8009060:	08009159 	.word	0x08009159
 8009064:	08009159 	.word	0x08009159
 8009068:	080090f3 	.word	0x080090f3
 800906c:	08009159 	.word	0x08009159
 8009070:	08009159 	.word	0x08009159
 8009074:	08009159 	.word	0x08009159
 8009078:	08009103 	.word	0x08009103
 800907c:	08009159 	.word	0x08009159
 8009080:	08009159 	.word	0x08009159
 8009084:	08009159 	.word	0x08009159
 8009088:	08009159 	.word	0x08009159
 800908c:	08009159 	.word	0x08009159
 8009090:	08009159 	.word	0x08009159
 8009094:	08009159 	.word	0x08009159
 8009098:	08009113 	.word	0x08009113
 800909c:	08009159 	.word	0x08009159
 80090a0:	08009159 	.word	0x08009159
 80090a4:	08009159 	.word	0x08009159
 80090a8:	08009159 	.word	0x08009159
 80090ac:	08009159 	.word	0x08009159
 80090b0:	08009159 	.word	0x08009159
 80090b4:	08009159 	.word	0x08009159
 80090b8:	08009159 	.word	0x08009159
 80090bc:	08009159 	.word	0x08009159
 80090c0:	08009159 	.word	0x08009159
 80090c4:	08009159 	.word	0x08009159
 80090c8:	08009159 	.word	0x08009159
 80090cc:	08009159 	.word	0x08009159
 80090d0:	08009159 	.word	0x08009159
 80090d4:	08009159 	.word	0x08009159
 80090d8:	0800914b 	.word	0x0800914b
 80090dc:	2b40      	cmp	r3, #64	@ 0x40
 80090de:	d037      	beq.n	8009150 <UART_SetConfig+0xc44>
 80090e0:	e03a      	b.n	8009158 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e2:	f7fc fe8d 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 80090e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090e8:	e03c      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090ea:	f7fc fe9f 	bl	8005e2c <HAL_RCC_GetPCLK2Freq>
 80090ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090f0:	e038      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe f864 	bl	80071c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009100:	e030      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009102:	f107 0318 	add.w	r3, r7, #24
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe f9b0 	bl	800746c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009110:	e028      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009112:	4b09      	ldr	r3, [pc, #36]	@ (8009138 <UART_SetConfig+0xc2c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d012      	beq.n	8009144 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800911e:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <UART_SetConfig+0xc2c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	08db      	lsrs	r3, r3, #3
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	4a04      	ldr	r2, [pc, #16]	@ (800913c <UART_SetConfig+0xc30>)
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009130:	e018      	b.n	8009164 <UART_SetConfig+0xc58>
 8009132:	bf00      	nop
 8009134:	0800b324 	.word	0x0800b324
 8009138:	58024400 	.word	0x58024400
 800913c:	03d09000 	.word	0x03d09000
 8009140:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009144:	4b24      	ldr	r3, [pc, #144]	@ (80091d8 <UART_SetConfig+0xccc>)
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009148:	e00c      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800914a:	4b24      	ldr	r3, [pc, #144]	@ (80091dc <UART_SetConfig+0xcd0>)
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914e:	e009      	b.n	8009164 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009156:	e005      	b.n	8009164 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009162:	bf00      	nop
    }

    if (pclk != 0U)
 8009164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d021      	beq.n	80091ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	4a1c      	ldr	r2, [pc, #112]	@ (80091e0 <UART_SetConfig+0xcd4>)
 8009170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009174:	461a      	mov	r2, r3
 8009176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009178:	fbb3 f2f2 	udiv	r2, r3, r2
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	441a      	add	r2, r3
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	fbb2 f3f3 	udiv	r3, r2, r3
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	2b0f      	cmp	r3, #15
 8009192:	d909      	bls.n	80091a8 <UART_SetConfig+0xc9c>
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800919a:	d205      	bcs.n	80091a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	b29a      	uxth	r2, r3
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	e002      	b.n	80091ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2200      	movs	r2, #0
 80091c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2200      	movs	r2, #0
 80091c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3748      	adds	r7, #72	@ 0x48
 80091d2:	46bd      	mov	sp, r7
 80091d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091d8:	03d09000 	.word	0x03d09000
 80091dc:	003d0900 	.word	0x003d0900
 80091e0:	0800b324 	.word	0x0800b324

080091e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009256:	f003 0304 	and.w	r3, r3, #4
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01a      	beq.n	80092fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e2:	d10a      	bne.n	80092fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	430a      	orrs	r2, r1
 800931a:	605a      	str	r2, [r3, #4]
  }
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b098      	sub	sp, #96	@ 0x60
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009338:	f7f8 f890 	bl	800145c <HAL_GetTick>
 800933c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b08      	cmp	r3, #8
 800934a:	d12f      	bne.n	80093ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800934c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009354:	2200      	movs	r2, #0
 8009356:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f88e 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d022      	beq.n	80093ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800937a:	653b      	str	r3, [r7, #80]	@ 0x50
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009384:	647b      	str	r3, [r7, #68]	@ 0x44
 8009386:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800938a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e6      	bne.n	8009366 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e063      	b.n	8009474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0304 	and.w	r3, r3, #4
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d149      	bne.n	800944e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093c2:	2200      	movs	r2, #0
 80093c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f857 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d03c      	beq.n	800944e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	623b      	str	r3, [r7, #32]
   return(result);
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	60fb      	str	r3, [r7, #12]
   return(result);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009426:	61fa      	str	r2, [r7, #28]
 8009428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	69b9      	ldr	r1, [r7, #24]
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	617b      	str	r3, [r7, #20]
   return(result);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e012      	b.n	8009474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3758      	adds	r7, #88	@ 0x58
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	4613      	mov	r3, r2
 800948a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948c:	e04f      	b.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009494:	d04b      	beq.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009496:	f7f7 ffe1 	bl	800145c <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d302      	bcc.n	80094ac <UART_WaitOnFlagUntilTimeout+0x30>
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e04e      	b.n	800954e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d037      	beq.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b80      	cmp	r3, #128	@ 0x80
 80094c2:	d034      	beq.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b40      	cmp	r3, #64	@ 0x40
 80094c8:	d031      	beq.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d110      	bne.n	80094fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2208      	movs	r2, #8
 80094de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f921 	bl	8009728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2208      	movs	r2, #8
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e029      	b.n	800954e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009508:	d111      	bne.n	800952e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f907 	bl	8009728 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e00f      	b.n	800954e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4013      	ands	r3, r2
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	429a      	cmp	r2, r3
 800953c:	bf0c      	ite	eq
 800953e:	2301      	moveq	r3, #1
 8009540:	2300      	movne	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	429a      	cmp	r2, r3
 800954a:	d0a0      	beq.n	800948e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b096      	sub	sp, #88	@ 0x58
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2222      	movs	r2, #34	@ 0x22
 8009580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958a:	2b00      	cmp	r3, #0
 800958c:	d02d      	beq.n	80095ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009594:	4a40      	ldr	r2, [pc, #256]	@ (8009698 <UART_Start_Receive_DMA+0x140>)
 8009596:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800959e:	4a3f      	ldr	r2, [pc, #252]	@ (800969c <UART_Start_Receive_DMA+0x144>)
 80095a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a8:	4a3d      	ldr	r2, [pc, #244]	@ (80096a0 <UART_Start_Receive_DMA+0x148>)
 80095aa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b2:	2200      	movs	r2, #0
 80095b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3324      	adds	r3, #36	@ 0x24
 80095c2:	4619      	mov	r1, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c8:	461a      	mov	r2, r3
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	f7f8 fbce 	bl	8001d6c <HAL_DMA_Start_IT>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2210      	movs	r2, #16
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e051      	b.n	800968e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d018      	beq.n	8009624 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009606:	657b      	str	r3, [r7, #84]	@ 0x54
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009612:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800961e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e6      	bne.n	80095f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	653b      	str	r3, [r7, #80]	@ 0x50
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009644:	637a      	str	r2, [r7, #52]	@ 0x34
 8009646:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800964a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	613b      	str	r3, [r7, #16]
   return(result);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800966e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009678:	623a      	str	r2, [r7, #32]
 800967a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	61bb      	str	r3, [r7, #24]
   return(result);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3758      	adds	r7, #88	@ 0x58
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	080097f5 	.word	0x080097f5
 800969c:	0800991d 	.word	0x0800991d
 80096a0:	0800995b 	.word	0x0800995b

080096a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b08f      	sub	sp, #60	@ 0x3c
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e6      	bne.n	80096ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80096f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fe:	61ba      	str	r2, [r7, #24]
 8009700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6979      	ldr	r1, [r7, #20]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	613b      	str	r3, [r7, #16]
   return(result);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e5      	bne.n	80096de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800971a:	bf00      	nop
 800971c:	373c      	adds	r7, #60	@ 0x3c
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009728:	b480      	push	{r7}
 800972a:	b095      	sub	sp, #84	@ 0x54
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800974e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009750:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800975c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	61fb      	str	r3, [r7, #28]
   return(result);
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	4b1e      	ldr	r3, [pc, #120]	@ (80097f0 <UART_EndRxTransfer+0xc8>)
 8009776:	4013      	ands	r3, r2
 8009778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e5      	bne.n	8009762 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800979a:	2b01      	cmp	r3, #1
 800979c:	d118      	bne.n	80097d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f023 0310 	bic.w	r3, r3, #16
 80097b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e6      	bne.n	800979e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80097e4:	bf00      	nop
 80097e6:	3754      	adds	r7, #84	@ 0x54
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	effffffe 	.word	0xeffffffe

080097f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b09c      	sub	sp, #112	@ 0x70
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009800:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800980a:	d071      	beq.n	80098f0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800980c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800980e:	2200      	movs	r2, #0
 8009810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800982a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009834:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e6      	bne.n	8009814 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3308      	adds	r3, #8
 800984c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009858:	f023 0301 	bic.w	r3, r3, #1
 800985c:	667b      	str	r3, [r7, #100]	@ 0x64
 800985e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009866:	647a      	str	r2, [r7, #68]	@ 0x44
 8009868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800986c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e5      	bne.n	8009846 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800987a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	623b      	str	r3, [r7, #32]
   return(result);
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009890:	663b      	str	r3, [r7, #96]	@ 0x60
 8009892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800989a:	633a      	str	r2, [r7, #48]	@ 0x30
 800989c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d118      	bne.n	80098f0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0310 	bic.w	r3, r3, #16
 80098d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	69b9      	ldr	r1, [r7, #24]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e6      	bne.n	80098be <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f2:	2200      	movs	r2, #0
 80098f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d107      	bne.n	800990e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009904:	4619      	mov	r1, r3
 8009906:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009908:	f7fe fdf4 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800990c:	e002      	b.n	8009914 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800990e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009910:	f000 fb68 	bl	8009fe4 <HAL_UART_RxCpltCallback>
}
 8009914:	bf00      	nop
 8009916:	3770      	adds	r7, #112	@ 0x70
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d109      	bne.n	800994c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800993e:	085b      	lsrs	r3, r3, #1
 8009940:	b29b      	uxth	r3, r3
 8009942:	4619      	mov	r1, r3
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7fe fdd5 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800994a:	e002      	b.n	8009952 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7fe fdbd 	bl	80084cc <HAL_UART_RxHalfCpltCallback>
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009966:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009976:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009982:	2b80      	cmp	r3, #128	@ 0x80
 8009984:	d109      	bne.n	800999a <UART_DMAError+0x40>
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2b21      	cmp	r3, #33	@ 0x21
 800998a:	d106      	bne.n	800999a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2200      	movs	r2, #0
 8009990:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009994:	6978      	ldr	r0, [r7, #20]
 8009996:	f7ff fe85 	bl	80096a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099a4:	2b40      	cmp	r3, #64	@ 0x40
 80099a6:	d109      	bne.n	80099bc <UART_DMAError+0x62>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b22      	cmp	r3, #34	@ 0x22
 80099ac:	d106      	bne.n	80099bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80099b6:	6978      	ldr	r0, [r7, #20]
 80099b8:	f7ff feb6 	bl	8009728 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c2:	f043 0210 	orr.w	r2, r3, #16
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099cc:	6978      	ldr	r0, [r7, #20]
 80099ce:	f7fe fd87 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d2:	bf00      	nop
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f7fe fd71 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b08f      	sub	sp, #60	@ 0x3c
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a14:	2b21      	cmp	r3, #33	@ 0x21
 8009a16:	d14c      	bne.n	8009ab2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d132      	bne.n	8009a8a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e6      	bne.n	8009a24 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6979      	ldr	r1, [r7, #20]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	613b      	str	r3, [r7, #16]
   return(result);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e6      	bne.n	8009a56 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009a88:	e013      	b.n	8009ab2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8e:	781a      	ldrb	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009ab2:	bf00      	nop
 8009ab4:	373c      	adds	r7, #60	@ 0x3c
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b091      	sub	sp, #68	@ 0x44
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009acc:	2b21      	cmp	r3, #33	@ 0x21
 8009ace:	d151      	bne.n	8009b74 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d132      	bne.n	8009b42 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009af0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e6      	bne.n	8009adc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	e853 3f00 	ldrex	r3, [r3]
 8009b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	69b9      	ldr	r1, [r7, #24]
 8009b32:	69fa      	ldr	r2, [r7, #28]
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	617b      	str	r3, [r7, #20]
   return(result);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e6      	bne.n	8009b0e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b40:	e018      	b.n	8009b74 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b56:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b5c:	1c9a      	adds	r2, r3, #2
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009b74:	bf00      	nop
 8009b76:	3744      	adds	r7, #68	@ 0x44
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b091      	sub	sp, #68	@ 0x44
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b8e:	2b21      	cmp	r3, #33	@ 0x21
 8009b90:	d160      	bne.n	8009c54 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b98:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009b9a:	e057      	b.n	8009c4c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d133      	bne.n	8009c10 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3308      	adds	r3, #8
 8009bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e5      	bne.n	8009ba8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	69b9      	ldr	r1, [r7, #24]
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	617b      	str	r3, [r7, #20]
   return(result);
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e6      	bne.n	8009bdc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009c0e:	e021      	b.n	8009c54 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d013      	beq.n	8009c46 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1a4      	bne.n	8009b9c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009c52:	e7ff      	b.n	8009c54 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009c54:	bf00      	nop
 8009c56:	3744      	adds	r7, #68	@ 0x44
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b091      	sub	sp, #68	@ 0x44
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c6e:	2b21      	cmp	r3, #33	@ 0x21
 8009c70:	d165      	bne.n	8009d3e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c7a:	e05c      	b.n	8009d36 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d133      	bne.n	8009cf0 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e5      	bne.n	8009c88 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	61bb      	str	r3, [r7, #24]
 8009cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e6      	bne.n	8009cbc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009cee:	e026      	b.n	8009d3e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d018      	beq.n	8009d30 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d12:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d18:	1c9a      	adds	r2, r3, #2
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009d30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d32:	3b01      	subs	r3, #1
 8009d34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009d36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d19f      	bne.n	8009c7c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009d3c:	e7ff      	b.n	8009d3e <UART_TxISR_16BIT_FIFOEN+0xde>
 8009d3e:	bf00      	nop
 8009d40:	3744      	adds	r7, #68	@ 0x44
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b088      	sub	sp, #32
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	61bb      	str	r3, [r7, #24]
 8009d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6979      	ldr	r1, [r7, #20]
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e6      	bne.n	8009d52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f936 	bl	800a004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d98:	bf00      	nop
 8009d9a:	3720      	adds	r7, #32
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e027      	b.n	8009e42 <HAL_UARTEx_DisableFifoMode+0x66>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2224      	movs	r2, #36	@ 0x24
 8009dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e02d      	b.n	8009ec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2224      	movs	r2, #36	@ 0x24
 8009e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0201 	bic.w	r2, r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f850 	bl	8009f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e02d      	b.n	8009f3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2224      	movs	r2, #36	@ 0x24
 8009eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0201 	bic.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f812 	bl	8009f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f68:	e031      	b.n	8009fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f6a:	2310      	movs	r3, #16
 8009f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f6e:	2310      	movs	r3, #16
 8009f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	0e5b      	lsrs	r3, r3, #25
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0307 	and.w	r3, r3, #7
 8009f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	0f5b      	lsrs	r3, r3, #29
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0307 	and.w	r3, r3, #7
 8009f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	7b3a      	ldrb	r2, [r7, #12]
 8009f96:	4911      	ldr	r1, [pc, #68]	@ (8009fdc <UARTEx_SetNbDataToProcess+0x94>)
 8009f98:	5c8a      	ldrb	r2, [r1, r2]
 8009f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f9e:	7b3a      	ldrb	r2, [r7, #12]
 8009fa0:	490f      	ldr	r1, [pc, #60]	@ (8009fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8009fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	7b7a      	ldrb	r2, [r7, #13]
 8009fb4:	4909      	ldr	r1, [pc, #36]	@ (8009fdc <UARTEx_SetNbDataToProcess+0x94>)
 8009fb6:	5c8a      	ldrb	r2, [r1, r2]
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fbc:	7b7a      	ldrb	r2, [r7, #13]
 8009fbe:	4908      	ldr	r1, [pc, #32]	@ (8009fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8009fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	0800b33c 	.word	0x0800b33c
 8009fe0:	0800b344 	.word	0x0800b344

08009fe4 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 8009fec:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <HAL_UART_RxCpltCallback+0x1c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]

	fptr();
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4798      	blx	r3
}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	240005b4 	.word	0x240005b4

0800a004 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]

}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a020:	4a04      	ldr	r2, [pc, #16]	@ (800a034 <uartInit+0x1c>)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6013      	str	r3, [r2, #0]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	240005b4 	.word	0x240005b4

0800a038 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a040:	2201      	movs	r2, #1
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	4803      	ldr	r0, [pc, #12]	@ (800a054 <receptionItrOn+0x1c>)
 800a046:	f7fd fe3b 	bl	8007cc0 <HAL_UART_Receive_DMA>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	240004a4 	.word	0x240004a4

0800a058 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a05c:	4b08      	ldr	r3, [pc, #32]	@ (800a080 <debugRxCallback+0x28>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	2b0d      	cmp	r3, #13
 800a062:	d102      	bne.n	800a06a <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a064:	4b07      	ldr	r3, [pc, #28]	@ (800a084 <debugRxCallback+0x2c>)
 800a066:	2201      	movs	r2, #1
 800a068:	701a      	strb	r2, [r3, #0]
	}

	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a06a:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <debugRxCallback+0x30>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4904      	ldr	r1, [pc, #16]	@ (800a080 <debugRxCallback+0x28>)
 800a070:	4618      	mov	r0, r3
 800a072:	f000 f88a 	bl	800a18a <circularBufferEnqueue>

	receptionItrOn(&data);
 800a076:	4802      	ldr	r0, [pc, #8]	@ (800a080 <debugRxCallback+0x28>)
 800a078:	f7ff ffde 	bl	800a038 <receptionItrOn>

}
 800a07c:	bf00      	nop
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	240005b8 	.word	0x240005b8
 800a084:	240005c0 	.word	0x240005c0
 800a088:	240005bc 	.word	0x240005bc

0800a08c <debugUartInit>:
{

}

void debugUartInit(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <debugUartInit+0x30>)
 800a094:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800a096:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <debugUartInit+0x34>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f839 	bl	800a118 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff ffb6 	bl	800a018 <uartInit>

	receptionItrOn(&data);
 800a0ac:	4805      	ldr	r0, [pc, #20]	@ (800a0c4 <debugUartInit+0x38>)
 800a0ae:	f7ff ffc3 	bl	800a038 <receptionItrOn>
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800a059 	.word	0x0800a059
 800a0c0:	240005bc 	.word	0x240005bc
 800a0c4:	240005b8 	.word	0x240005b8

0800a0c8 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800a0cc:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <getCmdReceivedFlag+0x14>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	240005c0 	.word	0x240005c0

0800a0e0 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800a0ea:	4a04      	ldr	r2, [pc, #16]	@ (800a0fc <setCmdReceivedFlag+0x1c>)
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	7013      	strb	r3, [r2, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	240005c0 	.word	0x240005c0

0800a100 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
	return rxBuffer;
 800a104:	4b03      	ldr	r3, [pc, #12]	@ (800a114 <getRxBuffer+0x14>)
 800a106:	681b      	ldr	r3, [r3, #0]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	240005bc 	.word	0x240005bc

0800a118 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	807b      	strh	r3, [r7, #2]
 800a124:	4613      	mov	r3, r2
 800a126:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	883a      	ldrh	r2, [r7, #0]
 800a13c:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	887a      	ldrh	r2, [r7, #2]
 800a142:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800a144:	887b      	ldrh	r3, [r7, #2]
 800a146:	883a      	ldrh	r2, [r7, #0]
 800a148:	fb02 f303 	mul.w	r3, r2, r3
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 f8a9 	bl	800a2a4 <malloc>
 800a152:	4603      	mov	r3, r0
 800a154:	461a      	mov	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00b      	beq.n	800a180 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68d8      	ldr	r0, [r3, #12]
 800a16c:	887b      	ldrh	r3, [r7, #2]
 800a16e:	883a      	ldrh	r2, [r7, #0]
 800a170:	fb02 f303 	mul.w	r3, r2, r3
 800a174:	461a      	mov	r2, r3
 800a176:	2100      	movs	r1, #0
 800a178:	f000 fa4f 	bl	800a61a <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800a194:	2303      	movs	r3, #3
 800a196:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	3301      	adds	r3, #1
 800a19e:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	889b      	ldrh	r3, [r3, #4]
 800a1a4:	89ba      	ldrh	r2, [r7, #12]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d301      	bcc.n	800a1ae <circularBufferEnqueue+0x24>
    {
        next = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	89ba      	ldrh	r2, [r7, #12]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d02b      	beq.n	800a210 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	8812      	ldrh	r2, [r2, #0]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	88d2      	ldrh	r2, [r2, #6]
 800a1c6:	fb01 f202 	mul.w	r2, r1, r2
 800a1ca:	1898      	adds	r0, r3, r2
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	88db      	ldrh	r3, [r3, #6]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	f000 fb09 	bl	800a7ea <memcpy>
 800a1d8:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d017      	beq.n	800a210 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	89ba      	ldrh	r2, [r7, #12]
 800a1e4:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	889b      	ldrh	r3, [r3, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	8852      	ldrh	r2, [r2, #2]
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	8892      	ldrh	r2, [r2, #4]
 800a200:	fb93 f1f2 	sdiv	r1, r3, r2
 800a204:	fb01 f202 	mul.w	r2, r1, r2
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800a224:	2305      	movs	r3, #5
 800a226:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	885a      	ldrh	r2, [r3, #2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	429a      	cmp	r2, r3
 800a232:	d032      	beq.n	800a29a <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	885b      	ldrh	r3, [r3, #2]
 800a238:	3301      	adds	r3, #1
 800a23a:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	889b      	ldrh	r3, [r3, #4]
 800a240:	89ba      	ldrh	r2, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d301      	bcc.n	800a24a <circularBufferDequeue+0x30>
        {
            next = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	8852      	ldrh	r2, [r2, #2]
 800a252:	4611      	mov	r1, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	88d2      	ldrh	r2, [r2, #6]
 800a258:	fb01 f202 	mul.w	r2, r1, r2
 800a25c:	1899      	adds	r1, r3, r2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	88db      	ldrh	r3, [r3, #6]
 800a262:	461a      	mov	r2, r3
 800a264:	6838      	ldr	r0, [r7, #0]
 800a266:	f000 fac0 	bl	800a7ea <memcpy>

        cBuff->tail = next;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	89ba      	ldrh	r2, [r7, #12]
 800a26e:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	461a      	mov	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	889b      	ldrh	r3, [r3, #4]
 800a27a:	4413      	add	r3, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	8852      	ldrh	r2, [r2, #2]
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	8892      	ldrh	r2, [r2, #4]
 800a286:	fb93 f1f2 	sdiv	r1, r3, r2
 800a28a:	fb01 f202 	mul.w	r2, r1, r2
 800a28e:	1a9b      	subs	r3, r3, r2
 800a290:	b29a      	uxth	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800a296:	2304      	movs	r3, #4
 800a298:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <malloc>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	@ (800a2b0 <malloc+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f000 b825 	b.w	800a2f8 <_malloc_r>
 800a2ae:	bf00      	nop
 800a2b0:	24000058 	.word	0x24000058

0800a2b4 <sbrk_aligned>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f4 <sbrk_aligned+0x40>)
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	6831      	ldr	r1, [r6, #0]
 800a2bc:	4605      	mov	r5, r0
 800a2be:	b911      	cbnz	r1, 800a2c6 <sbrk_aligned+0x12>
 800a2c0:	f000 fa44 	bl	800a74c <_sbrk_r>
 800a2c4:	6030      	str	r0, [r6, #0]
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 fa3f 	bl	800a74c <_sbrk_r>
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	d103      	bne.n	800a2da <sbrk_aligned+0x26>
 800a2d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	bd70      	pop	{r4, r5, r6, pc}
 800a2da:	1cc4      	adds	r4, r0, #3
 800a2dc:	f024 0403 	bic.w	r4, r4, #3
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	d0f8      	beq.n	800a2d6 <sbrk_aligned+0x22>
 800a2e4:	1a21      	subs	r1, r4, r0
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f000 fa30 	bl	800a74c <_sbrk_r>
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d1f2      	bne.n	800a2d6 <sbrk_aligned+0x22>
 800a2f0:	e7ef      	b.n	800a2d2 <sbrk_aligned+0x1e>
 800a2f2:	bf00      	nop
 800a2f4:	240005c4 	.word	0x240005c4

0800a2f8 <_malloc_r>:
 800a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	1ccd      	adds	r5, r1, #3
 800a2fe:	f025 0503 	bic.w	r5, r5, #3
 800a302:	3508      	adds	r5, #8
 800a304:	2d0c      	cmp	r5, #12
 800a306:	bf38      	it	cc
 800a308:	250c      	movcc	r5, #12
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	4606      	mov	r6, r0
 800a30e:	db01      	blt.n	800a314 <_malloc_r+0x1c>
 800a310:	42a9      	cmp	r1, r5
 800a312:	d904      	bls.n	800a31e <_malloc_r+0x26>
 800a314:	230c      	movs	r3, #12
 800a316:	6033      	str	r3, [r6, #0]
 800a318:	2000      	movs	r0, #0
 800a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f4 <_malloc_r+0xfc>
 800a322:	f000 f869 	bl	800a3f8 <__malloc_lock>
 800a326:	f8d8 3000 	ldr.w	r3, [r8]
 800a32a:	461c      	mov	r4, r3
 800a32c:	bb44      	cbnz	r4, 800a380 <_malloc_r+0x88>
 800a32e:	4629      	mov	r1, r5
 800a330:	4630      	mov	r0, r6
 800a332:	f7ff ffbf 	bl	800a2b4 <sbrk_aligned>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	4604      	mov	r4, r0
 800a33a:	d158      	bne.n	800a3ee <_malloc_r+0xf6>
 800a33c:	f8d8 4000 	ldr.w	r4, [r8]
 800a340:	4627      	mov	r7, r4
 800a342:	2f00      	cmp	r7, #0
 800a344:	d143      	bne.n	800a3ce <_malloc_r+0xd6>
 800a346:	2c00      	cmp	r4, #0
 800a348:	d04b      	beq.n	800a3e2 <_malloc_r+0xea>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	4639      	mov	r1, r7
 800a34e:	4630      	mov	r0, r6
 800a350:	eb04 0903 	add.w	r9, r4, r3
 800a354:	f000 f9fa 	bl	800a74c <_sbrk_r>
 800a358:	4581      	cmp	r9, r0
 800a35a:	d142      	bne.n	800a3e2 <_malloc_r+0xea>
 800a35c:	6821      	ldr	r1, [r4, #0]
 800a35e:	1a6d      	subs	r5, r5, r1
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f7ff ffa6 	bl	800a2b4 <sbrk_aligned>
 800a368:	3001      	adds	r0, #1
 800a36a:	d03a      	beq.n	800a3e2 <_malloc_r+0xea>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	442b      	add	r3, r5
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	f8d8 3000 	ldr.w	r3, [r8]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	bb62      	cbnz	r2, 800a3d4 <_malloc_r+0xdc>
 800a37a:	f8c8 7000 	str.w	r7, [r8]
 800a37e:	e00f      	b.n	800a3a0 <_malloc_r+0xa8>
 800a380:	6822      	ldr	r2, [r4, #0]
 800a382:	1b52      	subs	r2, r2, r5
 800a384:	d420      	bmi.n	800a3c8 <_malloc_r+0xd0>
 800a386:	2a0b      	cmp	r2, #11
 800a388:	d917      	bls.n	800a3ba <_malloc_r+0xc2>
 800a38a:	1961      	adds	r1, r4, r5
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	6025      	str	r5, [r4, #0]
 800a390:	bf18      	it	ne
 800a392:	6059      	strne	r1, [r3, #4]
 800a394:	6863      	ldr	r3, [r4, #4]
 800a396:	bf08      	it	eq
 800a398:	f8c8 1000 	streq.w	r1, [r8]
 800a39c:	5162      	str	r2, [r4, r5]
 800a39e:	604b      	str	r3, [r1, #4]
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f000 f82f 	bl	800a404 <__malloc_unlock>
 800a3a6:	f104 000b 	add.w	r0, r4, #11
 800a3aa:	1d23      	adds	r3, r4, #4
 800a3ac:	f020 0007 	bic.w	r0, r0, #7
 800a3b0:	1ac2      	subs	r2, r0, r3
 800a3b2:	bf1c      	itt	ne
 800a3b4:	1a1b      	subne	r3, r3, r0
 800a3b6:	50a3      	strne	r3, [r4, r2]
 800a3b8:	e7af      	b.n	800a31a <_malloc_r+0x22>
 800a3ba:	6862      	ldr	r2, [r4, #4]
 800a3bc:	42a3      	cmp	r3, r4
 800a3be:	bf0c      	ite	eq
 800a3c0:	f8c8 2000 	streq.w	r2, [r8]
 800a3c4:	605a      	strne	r2, [r3, #4]
 800a3c6:	e7eb      	b.n	800a3a0 <_malloc_r+0xa8>
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	6864      	ldr	r4, [r4, #4]
 800a3cc:	e7ae      	b.n	800a32c <_malloc_r+0x34>
 800a3ce:	463c      	mov	r4, r7
 800a3d0:	687f      	ldr	r7, [r7, #4]
 800a3d2:	e7b6      	b.n	800a342 <_malloc_r+0x4a>
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	d1fb      	bne.n	800a3d4 <_malloc_r+0xdc>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6053      	str	r3, [r2, #4]
 800a3e0:	e7de      	b.n	800a3a0 <_malloc_r+0xa8>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	6033      	str	r3, [r6, #0]
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f000 f80c 	bl	800a404 <__malloc_unlock>
 800a3ec:	e794      	b.n	800a318 <_malloc_r+0x20>
 800a3ee:	6005      	str	r5, [r0, #0]
 800a3f0:	e7d6      	b.n	800a3a0 <_malloc_r+0xa8>
 800a3f2:	bf00      	nop
 800a3f4:	240005c8 	.word	0x240005c8

0800a3f8 <__malloc_lock>:
 800a3f8:	4801      	ldr	r0, [pc, #4]	@ (800a400 <__malloc_lock+0x8>)
 800a3fa:	f000 b9f4 	b.w	800a7e6 <__retarget_lock_acquire_recursive>
 800a3fe:	bf00      	nop
 800a400:	2400070c 	.word	0x2400070c

0800a404 <__malloc_unlock>:
 800a404:	4801      	ldr	r0, [pc, #4]	@ (800a40c <__malloc_unlock+0x8>)
 800a406:	f000 b9ef 	b.w	800a7e8 <__retarget_lock_release_recursive>
 800a40a:	bf00      	nop
 800a40c:	2400070c 	.word	0x2400070c

0800a410 <std>:
 800a410:	2300      	movs	r3, #0
 800a412:	b510      	push	{r4, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	e9c0 3300 	strd	r3, r3, [r0]
 800a41a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41e:	6083      	str	r3, [r0, #8]
 800a420:	8181      	strh	r1, [r0, #12]
 800a422:	6643      	str	r3, [r0, #100]	@ 0x64
 800a424:	81c2      	strh	r2, [r0, #14]
 800a426:	6183      	str	r3, [r0, #24]
 800a428:	4619      	mov	r1, r3
 800a42a:	2208      	movs	r2, #8
 800a42c:	305c      	adds	r0, #92	@ 0x5c
 800a42e:	f000 f8f4 	bl	800a61a <memset>
 800a432:	4b0d      	ldr	r3, [pc, #52]	@ (800a468 <std+0x58>)
 800a434:	6263      	str	r3, [r4, #36]	@ 0x24
 800a436:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <std+0x5c>)
 800a438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <std+0x60>)
 800a43c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x64>)
 800a440:	6323      	str	r3, [r4, #48]	@ 0x30
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x68>)
 800a444:	6224      	str	r4, [r4, #32]
 800a446:	429c      	cmp	r4, r3
 800a448:	d006      	beq.n	800a458 <std+0x48>
 800a44a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a44e:	4294      	cmp	r4, r2
 800a450:	d002      	beq.n	800a458 <std+0x48>
 800a452:	33d0      	adds	r3, #208	@ 0xd0
 800a454:	429c      	cmp	r4, r3
 800a456:	d105      	bne.n	800a464 <std+0x54>
 800a458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a460:	f000 b9c0 	b.w	800a7e4 <__retarget_lock_init_recursive>
 800a464:	bd10      	pop	{r4, pc}
 800a466:	bf00      	nop
 800a468:	0800a595 	.word	0x0800a595
 800a46c:	0800a5b7 	.word	0x0800a5b7
 800a470:	0800a5ef 	.word	0x0800a5ef
 800a474:	0800a613 	.word	0x0800a613
 800a478:	240005cc 	.word	0x240005cc

0800a47c <stdio_exit_handler>:
 800a47c:	4a02      	ldr	r2, [pc, #8]	@ (800a488 <stdio_exit_handler+0xc>)
 800a47e:	4903      	ldr	r1, [pc, #12]	@ (800a48c <stdio_exit_handler+0x10>)
 800a480:	4803      	ldr	r0, [pc, #12]	@ (800a490 <stdio_exit_handler+0x14>)
 800a482:	f000 b869 	b.w	800a558 <_fwalk_sglue>
 800a486:	bf00      	nop
 800a488:	2400004c 	.word	0x2400004c
 800a48c:	0800a9e1 	.word	0x0800a9e1
 800a490:	2400005c 	.word	0x2400005c

0800a494 <cleanup_stdio>:
 800a494:	6841      	ldr	r1, [r0, #4]
 800a496:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c8 <cleanup_stdio+0x34>)
 800a498:	4299      	cmp	r1, r3
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	d001      	beq.n	800a4a4 <cleanup_stdio+0x10>
 800a4a0:	f000 fa9e 	bl	800a9e0 <_fflush_r>
 800a4a4:	68a1      	ldr	r1, [r4, #8]
 800a4a6:	4b09      	ldr	r3, [pc, #36]	@ (800a4cc <cleanup_stdio+0x38>)
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	d002      	beq.n	800a4b2 <cleanup_stdio+0x1e>
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f000 fa97 	bl	800a9e0 <_fflush_r>
 800a4b2:	68e1      	ldr	r1, [r4, #12]
 800a4b4:	4b06      	ldr	r3, [pc, #24]	@ (800a4d0 <cleanup_stdio+0x3c>)
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	d004      	beq.n	800a4c4 <cleanup_stdio+0x30>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c0:	f000 ba8e 	b.w	800a9e0 <_fflush_r>
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	bf00      	nop
 800a4c8:	240005cc 	.word	0x240005cc
 800a4cc:	24000634 	.word	0x24000634
 800a4d0:	2400069c 	.word	0x2400069c

0800a4d4 <global_stdio_init.part.0>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <global_stdio_init.part.0+0x30>)
 800a4d8:	4c0b      	ldr	r4, [pc, #44]	@ (800a508 <global_stdio_init.part.0+0x34>)
 800a4da:	4a0c      	ldr	r2, [pc, #48]	@ (800a50c <global_stdio_init.part.0+0x38>)
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2104      	movs	r1, #4
 800a4e4:	f7ff ff94 	bl	800a410 <std>
 800a4e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	2109      	movs	r1, #9
 800a4f0:	f7ff ff8e 	bl	800a410 <std>
 800a4f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4fe:	2112      	movs	r1, #18
 800a500:	f7ff bf86 	b.w	800a410 <std>
 800a504:	24000704 	.word	0x24000704
 800a508:	240005cc 	.word	0x240005cc
 800a50c:	0800a47d 	.word	0x0800a47d

0800a510 <__sfp_lock_acquire>:
 800a510:	4801      	ldr	r0, [pc, #4]	@ (800a518 <__sfp_lock_acquire+0x8>)
 800a512:	f000 b968 	b.w	800a7e6 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	2400070d 	.word	0x2400070d

0800a51c <__sfp_lock_release>:
 800a51c:	4801      	ldr	r0, [pc, #4]	@ (800a524 <__sfp_lock_release+0x8>)
 800a51e:	f000 b963 	b.w	800a7e8 <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	2400070d 	.word	0x2400070d

0800a528 <__sinit>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	4604      	mov	r4, r0
 800a52c:	f7ff fff0 	bl	800a510 <__sfp_lock_acquire>
 800a530:	6a23      	ldr	r3, [r4, #32]
 800a532:	b11b      	cbz	r3, 800a53c <__sinit+0x14>
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f7ff bff0 	b.w	800a51c <__sfp_lock_release>
 800a53c:	4b04      	ldr	r3, [pc, #16]	@ (800a550 <__sinit+0x28>)
 800a53e:	6223      	str	r3, [r4, #32]
 800a540:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <__sinit+0x2c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1f5      	bne.n	800a534 <__sinit+0xc>
 800a548:	f7ff ffc4 	bl	800a4d4 <global_stdio_init.part.0>
 800a54c:	e7f2      	b.n	800a534 <__sinit+0xc>
 800a54e:	bf00      	nop
 800a550:	0800a495 	.word	0x0800a495
 800a554:	24000704 	.word	0x24000704

0800a558 <_fwalk_sglue>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4607      	mov	r7, r0
 800a55e:	4688      	mov	r8, r1
 800a560:	4614      	mov	r4, r2
 800a562:	2600      	movs	r6, #0
 800a564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a568:	f1b9 0901 	subs.w	r9, r9, #1
 800a56c:	d505      	bpl.n	800a57a <_fwalk_sglue+0x22>
 800a56e:	6824      	ldr	r4, [r4, #0]
 800a570:	2c00      	cmp	r4, #0
 800a572:	d1f7      	bne.n	800a564 <_fwalk_sglue+0xc>
 800a574:	4630      	mov	r0, r6
 800a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d907      	bls.n	800a590 <_fwalk_sglue+0x38>
 800a580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a584:	3301      	adds	r3, #1
 800a586:	d003      	beq.n	800a590 <_fwalk_sglue+0x38>
 800a588:	4629      	mov	r1, r5
 800a58a:	4638      	mov	r0, r7
 800a58c:	47c0      	blx	r8
 800a58e:	4306      	orrs	r6, r0
 800a590:	3568      	adds	r5, #104	@ 0x68
 800a592:	e7e9      	b.n	800a568 <_fwalk_sglue+0x10>

0800a594 <__sread>:
 800a594:	b510      	push	{r4, lr}
 800a596:	460c      	mov	r4, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	f000 f8c4 	bl	800a728 <_read_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	bfab      	itete	ge
 800a5a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5a8:	181b      	addge	r3, r3, r0
 800a5aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5ae:	bfac      	ite	ge
 800a5b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5b2:	81a3      	strhlt	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__swrite>:
 800a5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	461f      	mov	r7, r3
 800a5bc:	898b      	ldrh	r3, [r1, #12]
 800a5be:	05db      	lsls	r3, r3, #23
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	d505      	bpl.n	800a5d4 <__swrite+0x1e>
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f000 f898 	bl	800a704 <_lseek_r>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ea:	f000 b8bf 	b.w	800a76c <_write_r>

0800a5ee <__sseek>:
 800a5ee:	b510      	push	{r4, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f000 f885 	bl	800a704 <_lseek_r>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	bf15      	itete	ne
 800a600:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a60a:	81a3      	strheq	r3, [r4, #12]
 800a60c:	bf18      	it	ne
 800a60e:	81a3      	strhne	r3, [r4, #12]
 800a610:	bd10      	pop	{r4, pc}

0800a612 <__sclose>:
 800a612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a616:	f000 b865 	b.w	800a6e4 <_close_r>

0800a61a <memset>:
 800a61a:	4402      	add	r2, r0
 800a61c:	4603      	mov	r3, r0
 800a61e:	4293      	cmp	r3, r2
 800a620:	d100      	bne.n	800a624 <memset+0xa>
 800a622:	4770      	bx	lr
 800a624:	f803 1b01 	strb.w	r1, [r3], #1
 800a628:	e7f9      	b.n	800a61e <memset+0x4>
	...

0800a62c <strtok>:
 800a62c:	4b16      	ldr	r3, [pc, #88]	@ (800a688 <strtok+0x5c>)
 800a62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a632:	681f      	ldr	r7, [r3, #0]
 800a634:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a636:	4605      	mov	r5, r0
 800a638:	460e      	mov	r6, r1
 800a63a:	b9ec      	cbnz	r4, 800a678 <strtok+0x4c>
 800a63c:	2050      	movs	r0, #80	@ 0x50
 800a63e:	f7ff fe31 	bl	800a2a4 <malloc>
 800a642:	4602      	mov	r2, r0
 800a644:	6478      	str	r0, [r7, #68]	@ 0x44
 800a646:	b920      	cbnz	r0, 800a652 <strtok+0x26>
 800a648:	4b10      	ldr	r3, [pc, #64]	@ (800a68c <strtok+0x60>)
 800a64a:	4811      	ldr	r0, [pc, #68]	@ (800a690 <strtok+0x64>)
 800a64c:	215b      	movs	r1, #91	@ 0x5b
 800a64e:	f000 f8db 	bl	800a808 <__assert_func>
 800a652:	e9c0 4400 	strd	r4, r4, [r0]
 800a656:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a65a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a65e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a662:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a666:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a66a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a66e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a672:	6184      	str	r4, [r0, #24]
 800a674:	7704      	strb	r4, [r0, #28]
 800a676:	6244      	str	r4, [r0, #36]	@ 0x24
 800a678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	2301      	movs	r3, #1
 800a680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	f000 b806 	b.w	800a694 <__strtok_r>
 800a688:	24000058 	.word	0x24000058
 800a68c:	0800b34c 	.word	0x0800b34c
 800a690:	0800b363 	.word	0x0800b363

0800a694 <__strtok_r>:
 800a694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	b908      	cbnz	r0, 800a69e <__strtok_r+0xa>
 800a69a:	6814      	ldr	r4, [r2, #0]
 800a69c:	b144      	cbz	r4, 800a6b0 <__strtok_r+0x1c>
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6aa:	b91e      	cbnz	r6, 800a6b4 <__strtok_r+0x20>
 800a6ac:	b965      	cbnz	r5, 800a6c8 <__strtok_r+0x34>
 800a6ae:	6015      	str	r5, [r2, #0]
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e005      	b.n	800a6c0 <__strtok_r+0x2c>
 800a6b4:	42b5      	cmp	r5, r6
 800a6b6:	d1f6      	bne.n	800a6a6 <__strtok_r+0x12>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f0      	bne.n	800a69e <__strtok_r+0xa>
 800a6bc:	6014      	str	r4, [r2, #0]
 800a6be:	7003      	strb	r3, [r0, #0]
 800a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c2:	461c      	mov	r4, r3
 800a6c4:	e00c      	b.n	800a6e0 <__strtok_r+0x4c>
 800a6c6:	b915      	cbnz	r5, 800a6ce <__strtok_r+0x3a>
 800a6c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6d2:	42ab      	cmp	r3, r5
 800a6d4:	d1f7      	bne.n	800a6c6 <__strtok_r+0x32>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0f3      	beq.n	800a6c2 <__strtok_r+0x2e>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6e0:	6014      	str	r4, [r2, #0]
 800a6e2:	e7ed      	b.n	800a6c0 <__strtok_r+0x2c>

0800a6e4 <_close_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	@ (800a700 <_close_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f6 fc2a 	bl	8000f48 <_close>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_close_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_close_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	24000708 	.word	0x24000708

0800a704 <_lseek_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4d07      	ldr	r5, [pc, #28]	@ (800a724 <_lseek_r+0x20>)
 800a708:	4604      	mov	r4, r0
 800a70a:	4608      	mov	r0, r1
 800a70c:	4611      	mov	r1, r2
 800a70e:	2200      	movs	r2, #0
 800a710:	602a      	str	r2, [r5, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f7f6 fc3f 	bl	8000f96 <_lseek>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_lseek_r+0x1e>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_lseek_r+0x1e>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	24000708 	.word	0x24000708

0800a728 <_read_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	@ (800a748 <_read_r+0x20>)
 800a72c:	4604      	mov	r4, r0
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	2200      	movs	r2, #0
 800a734:	602a      	str	r2, [r5, #0]
 800a736:	461a      	mov	r2, r3
 800a738:	f7f6 fbcd 	bl	8000ed6 <_read>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_read_r+0x1e>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_read_r+0x1e>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	24000708 	.word	0x24000708

0800a74c <_sbrk_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	@ (800a768 <_sbrk_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f6 fc2a 	bl	8000fb0 <_sbrk>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_sbrk_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_sbrk_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	24000708 	.word	0x24000708

0800a76c <_write_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	@ (800a78c <_write_r+0x20>)
 800a770:	4604      	mov	r4, r0
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	2200      	movs	r2, #0
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7f6 fbc8 	bl	8000f10 <_write>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_write_r+0x1e>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_write_r+0x1e>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	24000708 	.word	0x24000708

0800a790 <__errno>:
 800a790:	4b01      	ldr	r3, [pc, #4]	@ (800a798 <__errno+0x8>)
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	24000058 	.word	0x24000058

0800a79c <__libc_init_array>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d4 <__libc_init_array+0x38>)
 800a7a0:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d8 <__libc_init_array+0x3c>)
 800a7a2:	1b64      	subs	r4, r4, r5
 800a7a4:	10a4      	asrs	r4, r4, #2
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	42a6      	cmp	r6, r4
 800a7aa:	d109      	bne.n	800a7c0 <__libc_init_array+0x24>
 800a7ac:	4d0b      	ldr	r5, [pc, #44]	@ (800a7dc <__libc_init_array+0x40>)
 800a7ae:	4c0c      	ldr	r4, [pc, #48]	@ (800a7e0 <__libc_init_array+0x44>)
 800a7b0:	f000 fd82 	bl	800b2b8 <_init>
 800a7b4:	1b64      	subs	r4, r4, r5
 800a7b6:	10a4      	asrs	r4, r4, #2
 800a7b8:	2600      	movs	r6, #0
 800a7ba:	42a6      	cmp	r6, r4
 800a7bc:	d105      	bne.n	800a7ca <__libc_init_array+0x2e>
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c4:	4798      	blx	r3
 800a7c6:	3601      	adds	r6, #1
 800a7c8:	e7ee      	b.n	800a7a8 <__libc_init_array+0xc>
 800a7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ce:	4798      	blx	r3
 800a7d0:	3601      	adds	r6, #1
 800a7d2:	e7f2      	b.n	800a7ba <__libc_init_array+0x1e>
 800a7d4:	0800b434 	.word	0x0800b434
 800a7d8:	0800b434 	.word	0x0800b434
 800a7dc:	0800b434 	.word	0x0800b434
 800a7e0:	0800b438 	.word	0x0800b438

0800a7e4 <__retarget_lock_init_recursive>:
 800a7e4:	4770      	bx	lr

0800a7e6 <__retarget_lock_acquire_recursive>:
 800a7e6:	4770      	bx	lr

0800a7e8 <__retarget_lock_release_recursive>:
 800a7e8:	4770      	bx	lr

0800a7ea <memcpy>:
 800a7ea:	440a      	add	r2, r1
 800a7ec:	4291      	cmp	r1, r2
 800a7ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7f2:	d100      	bne.n	800a7f6 <memcpy+0xc>
 800a7f4:	4770      	bx	lr
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a800:	4291      	cmp	r1, r2
 800a802:	d1f9      	bne.n	800a7f8 <memcpy+0xe>
 800a804:	bd10      	pop	{r4, pc}
	...

0800a808 <__assert_func>:
 800a808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80a:	4614      	mov	r4, r2
 800a80c:	461a      	mov	r2, r3
 800a80e:	4b09      	ldr	r3, [pc, #36]	@ (800a834 <__assert_func+0x2c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4605      	mov	r5, r0
 800a814:	68d8      	ldr	r0, [r3, #12]
 800a816:	b954      	cbnz	r4, 800a82e <__assert_func+0x26>
 800a818:	4b07      	ldr	r3, [pc, #28]	@ (800a838 <__assert_func+0x30>)
 800a81a:	461c      	mov	r4, r3
 800a81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a820:	9100      	str	r1, [sp, #0]
 800a822:	462b      	mov	r3, r5
 800a824:	4905      	ldr	r1, [pc, #20]	@ (800a83c <__assert_func+0x34>)
 800a826:	f000 f903 	bl	800aa30 <fiprintf>
 800a82a:	f000 f913 	bl	800aa54 <abort>
 800a82e:	4b04      	ldr	r3, [pc, #16]	@ (800a840 <__assert_func+0x38>)
 800a830:	e7f4      	b.n	800a81c <__assert_func+0x14>
 800a832:	bf00      	nop
 800a834:	24000058 	.word	0x24000058
 800a838:	0800b3f8 	.word	0x0800b3f8
 800a83c:	0800b3ca 	.word	0x0800b3ca
 800a840:	0800b3bd 	.word	0x0800b3bd

0800a844 <_free_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4605      	mov	r5, r0
 800a848:	2900      	cmp	r1, #0
 800a84a:	d041      	beq.n	800a8d0 <_free_r+0x8c>
 800a84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a850:	1f0c      	subs	r4, r1, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfb8      	it	lt
 800a856:	18e4      	addlt	r4, r4, r3
 800a858:	f7ff fdce 	bl	800a3f8 <__malloc_lock>
 800a85c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d4 <_free_r+0x90>)
 800a85e:	6813      	ldr	r3, [r2, #0]
 800a860:	b933      	cbnz	r3, 800a870 <_free_r+0x2c>
 800a862:	6063      	str	r3, [r4, #4]
 800a864:	6014      	str	r4, [r2, #0]
 800a866:	4628      	mov	r0, r5
 800a868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a86c:	f7ff bdca 	b.w	800a404 <__malloc_unlock>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d908      	bls.n	800a886 <_free_r+0x42>
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	1821      	adds	r1, r4, r0
 800a878:	428b      	cmp	r3, r1
 800a87a:	bf01      	itttt	eq
 800a87c:	6819      	ldreq	r1, [r3, #0]
 800a87e:	685b      	ldreq	r3, [r3, #4]
 800a880:	1809      	addeq	r1, r1, r0
 800a882:	6021      	streq	r1, [r4, #0]
 800a884:	e7ed      	b.n	800a862 <_free_r+0x1e>
 800a886:	461a      	mov	r2, r3
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	b10b      	cbz	r3, 800a890 <_free_r+0x4c>
 800a88c:	42a3      	cmp	r3, r4
 800a88e:	d9fa      	bls.n	800a886 <_free_r+0x42>
 800a890:	6811      	ldr	r1, [r2, #0]
 800a892:	1850      	adds	r0, r2, r1
 800a894:	42a0      	cmp	r0, r4
 800a896:	d10b      	bne.n	800a8b0 <_free_r+0x6c>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	4401      	add	r1, r0
 800a89c:	1850      	adds	r0, r2, r1
 800a89e:	4283      	cmp	r3, r0
 800a8a0:	6011      	str	r1, [r2, #0]
 800a8a2:	d1e0      	bne.n	800a866 <_free_r+0x22>
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	6053      	str	r3, [r2, #4]
 800a8aa:	4408      	add	r0, r1
 800a8ac:	6010      	str	r0, [r2, #0]
 800a8ae:	e7da      	b.n	800a866 <_free_r+0x22>
 800a8b0:	d902      	bls.n	800a8b8 <_free_r+0x74>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	e7d6      	b.n	800a866 <_free_r+0x22>
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	1821      	adds	r1, r4, r0
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf04      	itt	eq
 800a8c0:	6819      	ldreq	r1, [r3, #0]
 800a8c2:	685b      	ldreq	r3, [r3, #4]
 800a8c4:	6063      	str	r3, [r4, #4]
 800a8c6:	bf04      	itt	eq
 800a8c8:	1809      	addeq	r1, r1, r0
 800a8ca:	6021      	streq	r1, [r4, #0]
 800a8cc:	6054      	str	r4, [r2, #4]
 800a8ce:	e7ca      	b.n	800a866 <_free_r+0x22>
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	240005c8 	.word	0x240005c8

0800a8d8 <__sflush_r>:
 800a8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e0:	0716      	lsls	r6, r2, #28
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	d454      	bmi.n	800a992 <__sflush_r+0xba>
 800a8e8:	684b      	ldr	r3, [r1, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dc02      	bgt.n	800a8f4 <__sflush_r+0x1c>
 800a8ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dd48      	ble.n	800a986 <__sflush_r+0xae>
 800a8f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f6:	2e00      	cmp	r6, #0
 800a8f8:	d045      	beq.n	800a986 <__sflush_r+0xae>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a900:	682f      	ldr	r7, [r5, #0]
 800a902:	6a21      	ldr	r1, [r4, #32]
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	d030      	beq.n	800a96a <__sflush_r+0x92>
 800a908:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	0759      	lsls	r1, r3, #29
 800a90e:	d505      	bpl.n	800a91c <__sflush_r+0x44>
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a916:	b10b      	cbz	r3, 800a91c <__sflush_r+0x44>
 800a918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	2300      	movs	r3, #0
 800a91e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a920:	6a21      	ldr	r1, [r4, #32]
 800a922:	4628      	mov	r0, r5
 800a924:	47b0      	blx	r6
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	d106      	bne.n	800a93a <__sflush_r+0x62>
 800a92c:	6829      	ldr	r1, [r5, #0]
 800a92e:	291d      	cmp	r1, #29
 800a930:	d82b      	bhi.n	800a98a <__sflush_r+0xb2>
 800a932:	4a2a      	ldr	r2, [pc, #168]	@ (800a9dc <__sflush_r+0x104>)
 800a934:	410a      	asrs	r2, r1
 800a936:	07d6      	lsls	r6, r2, #31
 800a938:	d427      	bmi.n	800a98a <__sflush_r+0xb2>
 800a93a:	2200      	movs	r2, #0
 800a93c:	6062      	str	r2, [r4, #4]
 800a93e:	04d9      	lsls	r1, r3, #19
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	d504      	bpl.n	800a950 <__sflush_r+0x78>
 800a946:	1c42      	adds	r2, r0, #1
 800a948:	d101      	bne.n	800a94e <__sflush_r+0x76>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	b903      	cbnz	r3, 800a950 <__sflush_r+0x78>
 800a94e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a952:	602f      	str	r7, [r5, #0]
 800a954:	b1b9      	cbz	r1, 800a986 <__sflush_r+0xae>
 800a956:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d002      	beq.n	800a964 <__sflush_r+0x8c>
 800a95e:	4628      	mov	r0, r5
 800a960:	f7ff ff70 	bl	800a844 <_free_r>
 800a964:	2300      	movs	r3, #0
 800a966:	6363      	str	r3, [r4, #52]	@ 0x34
 800a968:	e00d      	b.n	800a986 <__sflush_r+0xae>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b0      	blx	r6
 800a970:	4602      	mov	r2, r0
 800a972:	1c50      	adds	r0, r2, #1
 800a974:	d1c9      	bne.n	800a90a <__sflush_r+0x32>
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0c6      	beq.n	800a90a <__sflush_r+0x32>
 800a97c:	2b1d      	cmp	r3, #29
 800a97e:	d001      	beq.n	800a984 <__sflush_r+0xac>
 800a980:	2b16      	cmp	r3, #22
 800a982:	d11e      	bne.n	800a9c2 <__sflush_r+0xea>
 800a984:	602f      	str	r7, [r5, #0]
 800a986:	2000      	movs	r0, #0
 800a988:	e022      	b.n	800a9d0 <__sflush_r+0xf8>
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	b21b      	sxth	r3, r3
 800a990:	e01b      	b.n	800a9ca <__sflush_r+0xf2>
 800a992:	690f      	ldr	r7, [r1, #16]
 800a994:	2f00      	cmp	r7, #0
 800a996:	d0f6      	beq.n	800a986 <__sflush_r+0xae>
 800a998:	0793      	lsls	r3, r2, #30
 800a99a:	680e      	ldr	r6, [r1, #0]
 800a99c:	bf08      	it	eq
 800a99e:	694b      	ldreq	r3, [r1, #20]
 800a9a0:	600f      	str	r7, [r1, #0]
 800a9a2:	bf18      	it	ne
 800a9a4:	2300      	movne	r3, #0
 800a9a6:	eba6 0807 	sub.w	r8, r6, r7
 800a9aa:	608b      	str	r3, [r1, #8]
 800a9ac:	f1b8 0f00 	cmp.w	r8, #0
 800a9b0:	dde9      	ble.n	800a986 <__sflush_r+0xae>
 800a9b2:	6a21      	ldr	r1, [r4, #32]
 800a9b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9b6:	4643      	mov	r3, r8
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b0      	blx	r6
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	dc08      	bgt.n	800a9d4 <__sflush_r+0xfc>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	4407      	add	r7, r0
 800a9d6:	eba8 0800 	sub.w	r8, r8, r0
 800a9da:	e7e7      	b.n	800a9ac <__sflush_r+0xd4>
 800a9dc:	dfbffffe 	.word	0xdfbffffe

0800a9e0 <_fflush_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	b913      	cbnz	r3, 800a9f0 <_fflush_r+0x10>
 800a9ea:	2500      	movs	r5, #0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	b118      	cbz	r0, 800a9fa <_fflush_r+0x1a>
 800a9f2:	6a03      	ldr	r3, [r0, #32]
 800a9f4:	b90b      	cbnz	r3, 800a9fa <_fflush_r+0x1a>
 800a9f6:	f7ff fd97 	bl	800a528 <__sinit>
 800a9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f3      	beq.n	800a9ea <_fflush_r+0xa>
 800aa02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa04:	07d0      	lsls	r0, r2, #31
 800aa06:	d404      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa08:	0599      	lsls	r1, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa0e:	f7ff feea 	bl	800a7e6 <__retarget_lock_acquire_recursive>
 800aa12:	4628      	mov	r0, r5
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7ff ff5f 	bl	800a8d8 <__sflush_r>
 800aa1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa1c:	07da      	lsls	r2, r3, #31
 800aa1e:	4605      	mov	r5, r0
 800aa20:	d4e4      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	059b      	lsls	r3, r3, #22
 800aa26:	d4e1      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa2a:	f7ff fedd 	bl	800a7e8 <__retarget_lock_release_recursive>
 800aa2e:	e7dd      	b.n	800a9ec <_fflush_r+0xc>

0800aa30 <fiprintf>:
 800aa30:	b40e      	push	{r1, r2, r3}
 800aa32:	b503      	push	{r0, r1, lr}
 800aa34:	4601      	mov	r1, r0
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	4805      	ldr	r0, [pc, #20]	@ (800aa50 <fiprintf+0x20>)
 800aa3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3e:	6800      	ldr	r0, [r0, #0]
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	f000 f837 	bl	800aab4 <_vfiprintf_r>
 800aa46:	b002      	add	sp, #8
 800aa48:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	4770      	bx	lr
 800aa50:	24000058 	.word	0x24000058

0800aa54 <abort>:
 800aa54:	b508      	push	{r3, lr}
 800aa56:	2006      	movs	r0, #6
 800aa58:	f000 fb8e 	bl	800b178 <raise>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	f7f6 fa2f 	bl	8000ec0 <_exit>

0800aa62 <__sfputc_r>:
 800aa62:	6893      	ldr	r3, [r2, #8]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	b410      	push	{r4}
 800aa6a:	6093      	str	r3, [r2, #8]
 800aa6c:	da08      	bge.n	800aa80 <__sfputc_r+0x1e>
 800aa6e:	6994      	ldr	r4, [r2, #24]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	db01      	blt.n	800aa78 <__sfputc_r+0x16>
 800aa74:	290a      	cmp	r1, #10
 800aa76:	d103      	bne.n	800aa80 <__sfputc_r+0x1e>
 800aa78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7c:	f000 bac0 	b.w	800b000 <__swbuf_r>
 800aa80:	6813      	ldr	r3, [r2, #0]
 800aa82:	1c58      	adds	r0, r3, #1
 800aa84:	6010      	str	r0, [r2, #0]
 800aa86:	7019      	strb	r1, [r3, #0]
 800aa88:	4608      	mov	r0, r1
 800aa8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <__sfputs_r>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	4606      	mov	r6, r0
 800aa94:	460f      	mov	r7, r1
 800aa96:	4614      	mov	r4, r2
 800aa98:	18d5      	adds	r5, r2, r3
 800aa9a:	42ac      	cmp	r4, r5
 800aa9c:	d101      	bne.n	800aaa2 <__sfputs_r+0x12>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e007      	b.n	800aab2 <__sfputs_r+0x22>
 800aaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa6:	463a      	mov	r2, r7
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff ffda 	bl	800aa62 <__sfputc_r>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	d1f3      	bne.n	800aa9a <__sfputs_r+0xa>
 800aab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aab4 <_vfiprintf_r>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	460d      	mov	r5, r1
 800aaba:	b09d      	sub	sp, #116	@ 0x74
 800aabc:	4614      	mov	r4, r2
 800aabe:	4698      	mov	r8, r3
 800aac0:	4606      	mov	r6, r0
 800aac2:	b118      	cbz	r0, 800aacc <_vfiprintf_r+0x18>
 800aac4:	6a03      	ldr	r3, [r0, #32]
 800aac6:	b90b      	cbnz	r3, 800aacc <_vfiprintf_r+0x18>
 800aac8:	f7ff fd2e 	bl	800a528 <__sinit>
 800aacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aace:	07d9      	lsls	r1, r3, #31
 800aad0:	d405      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	059a      	lsls	r2, r3, #22
 800aad6:	d402      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aada:	f7ff fe84 	bl	800a7e6 <__retarget_lock_acquire_recursive>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	071b      	lsls	r3, r3, #28
 800aae2:	d501      	bpl.n	800aae8 <_vfiprintf_r+0x34>
 800aae4:	692b      	ldr	r3, [r5, #16]
 800aae6:	b99b      	cbnz	r3, 800ab10 <_vfiprintf_r+0x5c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 fac6 	bl	800b07c <__swsetup_r>
 800aaf0:	b170      	cbz	r0, 800ab10 <_vfiprintf_r+0x5c>
 800aaf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaf4:	07dc      	lsls	r4, r3, #31
 800aaf6:	d504      	bpl.n	800ab02 <_vfiprintf_r+0x4e>
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	b01d      	add	sp, #116	@ 0x74
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	0598      	lsls	r0, r3, #22
 800ab06:	d4f7      	bmi.n	800aaf8 <_vfiprintf_r+0x44>
 800ab08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0a:	f7ff fe6d 	bl	800a7e8 <__retarget_lock_release_recursive>
 800ab0e:	e7f3      	b.n	800aaf8 <_vfiprintf_r+0x44>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab14:	2320      	movs	r3, #32
 800ab16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab1e:	2330      	movs	r3, #48	@ 0x30
 800ab20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acd0 <_vfiprintf_r+0x21c>
 800ab24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab28:	f04f 0901 	mov.w	r9, #1
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	469a      	mov	sl, r3
 800ab30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab34:	b10a      	cbz	r2, 800ab3a <_vfiprintf_r+0x86>
 800ab36:	2a25      	cmp	r2, #37	@ 0x25
 800ab38:	d1f9      	bne.n	800ab2e <_vfiprintf_r+0x7a>
 800ab3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab3e:	d00b      	beq.n	800ab58 <_vfiprintf_r+0xa4>
 800ab40:	465b      	mov	r3, fp
 800ab42:	4622      	mov	r2, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ffa2 	bl	800aa90 <__sfputs_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f000 80a7 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab54:	445a      	add	r2, fp
 800ab56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab58:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 809f 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6c:	f10a 0a01 	add.w	sl, sl, #1
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab7a:	4654      	mov	r4, sl
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab82:	4853      	ldr	r0, [pc, #332]	@ (800acd0 <_vfiprintf_r+0x21c>)
 800ab84:	f7f5 fbd4 	bl	8000330 <memchr>
 800ab88:	9a04      	ldr	r2, [sp, #16]
 800ab8a:	b9d8      	cbnz	r0, 800abc4 <_vfiprintf_r+0x110>
 800ab8c:	06d1      	lsls	r1, r2, #27
 800ab8e:	bf44      	itt	mi
 800ab90:	2320      	movmi	r3, #32
 800ab92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab96:	0713      	lsls	r3, r2, #28
 800ab98:	bf44      	itt	mi
 800ab9a:	232b      	movmi	r3, #43	@ 0x2b
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aba6:	d015      	beq.n	800abd4 <_vfiprintf_r+0x120>
 800aba8:	9a07      	ldr	r2, [sp, #28]
 800abaa:	4654      	mov	r4, sl
 800abac:	2000      	movs	r0, #0
 800abae:	f04f 0c0a 	mov.w	ip, #10
 800abb2:	4621      	mov	r1, r4
 800abb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abb8:	3b30      	subs	r3, #48	@ 0x30
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d94b      	bls.n	800ac56 <_vfiprintf_r+0x1a2>
 800abbe:	b1b0      	cbz	r0, 800abee <_vfiprintf_r+0x13a>
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	e014      	b.n	800abee <_vfiprintf_r+0x13a>
 800abc4:	eba0 0308 	sub.w	r3, r0, r8
 800abc8:	fa09 f303 	lsl.w	r3, r9, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	46a2      	mov	sl, r4
 800abd2:	e7d2      	b.n	800ab7a <_vfiprintf_r+0xc6>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d19      	adds	r1, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfbb      	ittet	lt
 800abe0:	425b      	neglt	r3, r3
 800abe2:	f042 0202 	orrlt.w	r2, r2, #2
 800abe6:	9307      	strge	r3, [sp, #28]
 800abe8:	9307      	strlt	r3, [sp, #28]
 800abea:	bfb8      	it	lt
 800abec:	9204      	strlt	r2, [sp, #16]
 800abee:	7823      	ldrb	r3, [r4, #0]
 800abf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf2:	d10a      	bne.n	800ac0a <_vfiprintf_r+0x156>
 800abf4:	7863      	ldrb	r3, [r4, #1]
 800abf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf8:	d132      	bne.n	800ac60 <_vfiprintf_r+0x1ac>
 800abfa:	9b03      	ldr	r3, [sp, #12]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	9203      	str	r2, [sp, #12]
 800ac02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac06:	3402      	adds	r4, #2
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ace0 <_vfiprintf_r+0x22c>
 800ac0e:	7821      	ldrb	r1, [r4, #0]
 800ac10:	2203      	movs	r2, #3
 800ac12:	4650      	mov	r0, sl
 800ac14:	f7f5 fb8c 	bl	8000330 <memchr>
 800ac18:	b138      	cbz	r0, 800ac2a <_vfiprintf_r+0x176>
 800ac1a:	9b04      	ldr	r3, [sp, #16]
 800ac1c:	eba0 000a 	sub.w	r0, r0, sl
 800ac20:	2240      	movs	r2, #64	@ 0x40
 800ac22:	4082      	lsls	r2, r0
 800ac24:	4313      	orrs	r3, r2
 800ac26:	3401      	adds	r4, #1
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac2e:	4829      	ldr	r0, [pc, #164]	@ (800acd4 <_vfiprintf_r+0x220>)
 800ac30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac34:	2206      	movs	r2, #6
 800ac36:	f7f5 fb7b 	bl	8000330 <memchr>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d03f      	beq.n	800acbe <_vfiprintf_r+0x20a>
 800ac3e:	4b26      	ldr	r3, [pc, #152]	@ (800acd8 <_vfiprintf_r+0x224>)
 800ac40:	bb1b      	cbnz	r3, 800ac8a <_vfiprintf_r+0x1d6>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	3307      	adds	r3, #7
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	9303      	str	r3, [sp, #12]
 800ac4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac50:	443b      	add	r3, r7
 800ac52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac54:	e76a      	b.n	800ab2c <_vfiprintf_r+0x78>
 800ac56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	2001      	movs	r0, #1
 800ac5e:	e7a8      	b.n	800abb2 <_vfiprintf_r+0xfe>
 800ac60:	2300      	movs	r3, #0
 800ac62:	3401      	adds	r4, #1
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	4619      	mov	r1, r3
 800ac68:	f04f 0c0a 	mov.w	ip, #10
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac72:	3a30      	subs	r2, #48	@ 0x30
 800ac74:	2a09      	cmp	r2, #9
 800ac76:	d903      	bls.n	800ac80 <_vfiprintf_r+0x1cc>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0c6      	beq.n	800ac0a <_vfiprintf_r+0x156>
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	e7c4      	b.n	800ac0a <_vfiprintf_r+0x156>
 800ac80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac84:	4604      	mov	r4, r0
 800ac86:	2301      	movs	r3, #1
 800ac88:	e7f0      	b.n	800ac6c <_vfiprintf_r+0x1b8>
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4b12      	ldr	r3, [pc, #72]	@ (800acdc <_vfiprintf_r+0x228>)
 800ac92:	a904      	add	r1, sp, #16
 800ac94:	4630      	mov	r0, r6
 800ac96:	f3af 8000 	nop.w
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	1c78      	adds	r0, r7, #1
 800ac9e:	d1d6      	bne.n	800ac4e <_vfiprintf_r+0x19a>
 800aca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca2:	07d9      	lsls	r1, r3, #31
 800aca4:	d405      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	059a      	lsls	r2, r3, #22
 800acaa:	d402      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800acac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acae:	f7ff fd9b 	bl	800a7e8 <__retarget_lock_release_recursive>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	065b      	lsls	r3, r3, #25
 800acb6:	f53f af1f 	bmi.w	800aaf8 <_vfiprintf_r+0x44>
 800acba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acbc:	e71e      	b.n	800aafc <_vfiprintf_r+0x48>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <_vfiprintf_r+0x228>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4630      	mov	r0, r6
 800acca:	f000 f879 	bl	800adc0 <_printf_i>
 800acce:	e7e4      	b.n	800ac9a <_vfiprintf_r+0x1e6>
 800acd0:	0800b3f9 	.word	0x0800b3f9
 800acd4:	0800b403 	.word	0x0800b403
 800acd8:	00000000 	.word	0x00000000
 800acdc:	0800aa91 	.word	0x0800aa91
 800ace0:	0800b3ff 	.word	0x0800b3ff

0800ace4 <_printf_common>:
 800ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	4616      	mov	r6, r2
 800acea:	4698      	mov	r8, r3
 800acec:	688a      	ldr	r2, [r1, #8]
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	bfb8      	it	lt
 800acf8:	4613      	movlt	r3, r2
 800acfa:	6033      	str	r3, [r6, #0]
 800acfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad00:	4607      	mov	r7, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	b10a      	cbz	r2, 800ad0a <_printf_common+0x26>
 800ad06:	3301      	adds	r3, #1
 800ad08:	6033      	str	r3, [r6, #0]
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	0699      	lsls	r1, r3, #26
 800ad0e:	bf42      	ittt	mi
 800ad10:	6833      	ldrmi	r3, [r6, #0]
 800ad12:	3302      	addmi	r3, #2
 800ad14:	6033      	strmi	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	f015 0506 	ands.w	r5, r5, #6
 800ad1c:	d106      	bne.n	800ad2c <_printf_common+0x48>
 800ad1e:	f104 0a19 	add.w	sl, r4, #25
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	6832      	ldr	r2, [r6, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dc26      	bgt.n	800ad7a <_printf_common+0x96>
 800ad2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	3b00      	subs	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	0692      	lsls	r2, r2, #26
 800ad3a:	d42b      	bmi.n	800ad94 <_printf_common+0xb0>
 800ad3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d01e      	beq.n	800ad88 <_printf_common+0xa4>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	bf02      	ittt	eq
 800ad56:	68e5      	ldreq	r5, [r4, #12]
 800ad58:	6833      	ldreq	r3, [r6, #0]
 800ad5a:	1aed      	subeq	r5, r5, r3
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	bf0c      	ite	eq
 800ad60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad64:	2500      	movne	r5, #0
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bfc4      	itt	gt
 800ad6a:	1a9b      	subgt	r3, r3, r2
 800ad6c:	18ed      	addgt	r5, r5, r3
 800ad6e:	2600      	movs	r6, #0
 800ad70:	341a      	adds	r4, #26
 800ad72:	42b5      	cmp	r5, r6
 800ad74:	d11a      	bne.n	800adac <_printf_common+0xc8>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e008      	b.n	800ad8c <_printf_common+0xa8>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	4641      	mov	r1, r8
 800ad80:	4638      	mov	r0, r7
 800ad82:	47c8      	blx	r9
 800ad84:	3001      	adds	r0, #1
 800ad86:	d103      	bne.n	800ad90 <_printf_common+0xac>
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	3501      	adds	r5, #1
 800ad92:	e7c6      	b.n	800ad22 <_printf_common+0x3e>
 800ad94:	18e1      	adds	r1, r4, r3
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	2030      	movs	r0, #48	@ 0x30
 800ad9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad9e:	4422      	add	r2, r4
 800ada0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ada4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada8:	3302      	adds	r3, #2
 800adaa:	e7c7      	b.n	800ad3c <_printf_common+0x58>
 800adac:	2301      	movs	r3, #1
 800adae:	4622      	mov	r2, r4
 800adb0:	4641      	mov	r1, r8
 800adb2:	4638      	mov	r0, r7
 800adb4:	47c8      	blx	r9
 800adb6:	3001      	adds	r0, #1
 800adb8:	d0e6      	beq.n	800ad88 <_printf_common+0xa4>
 800adba:	3601      	adds	r6, #1
 800adbc:	e7d9      	b.n	800ad72 <_printf_common+0x8e>
	...

0800adc0 <_printf_i>:
 800adc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc4:	7e0f      	ldrb	r7, [r1, #24]
 800adc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc8:	2f78      	cmp	r7, #120	@ 0x78
 800adca:	4691      	mov	r9, r2
 800adcc:	4680      	mov	r8, r0
 800adce:	460c      	mov	r4, r1
 800add0:	469a      	mov	sl, r3
 800add2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800add6:	d807      	bhi.n	800ade8 <_printf_i+0x28>
 800add8:	2f62      	cmp	r7, #98	@ 0x62
 800adda:	d80a      	bhi.n	800adf2 <_printf_i+0x32>
 800addc:	2f00      	cmp	r7, #0
 800adde:	f000 80d2 	beq.w	800af86 <_printf_i+0x1c6>
 800ade2:	2f58      	cmp	r7, #88	@ 0x58
 800ade4:	f000 80b9 	beq.w	800af5a <_printf_i+0x19a>
 800ade8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adf0:	e03a      	b.n	800ae68 <_printf_i+0xa8>
 800adf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adf6:	2b15      	cmp	r3, #21
 800adf8:	d8f6      	bhi.n	800ade8 <_printf_i+0x28>
 800adfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ae00 <_printf_i+0x40>)
 800adfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae6d 	.word	0x0800ae6d
 800ae08:	0800ade9 	.word	0x0800ade9
 800ae0c:	0800ade9 	.word	0x0800ade9
 800ae10:	0800ade9 	.word	0x0800ade9
 800ae14:	0800ade9 	.word	0x0800ade9
 800ae18:	0800ae6d 	.word	0x0800ae6d
 800ae1c:	0800ade9 	.word	0x0800ade9
 800ae20:	0800ade9 	.word	0x0800ade9
 800ae24:	0800ade9 	.word	0x0800ade9
 800ae28:	0800ade9 	.word	0x0800ade9
 800ae2c:	0800af6d 	.word	0x0800af6d
 800ae30:	0800ae97 	.word	0x0800ae97
 800ae34:	0800af27 	.word	0x0800af27
 800ae38:	0800ade9 	.word	0x0800ade9
 800ae3c:	0800ade9 	.word	0x0800ade9
 800ae40:	0800af8f 	.word	0x0800af8f
 800ae44:	0800ade9 	.word	0x0800ade9
 800ae48:	0800ae97 	.word	0x0800ae97
 800ae4c:	0800ade9 	.word	0x0800ade9
 800ae50:	0800ade9 	.word	0x0800ade9
 800ae54:	0800af2f 	.word	0x0800af2f
 800ae58:	6833      	ldr	r3, [r6, #0]
 800ae5a:	1d1a      	adds	r2, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6032      	str	r2, [r6, #0]
 800ae60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e09d      	b.n	800afa8 <_printf_i+0x1e8>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	6031      	str	r1, [r6, #0]
 800ae74:	0606      	lsls	r6, r0, #24
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0xbc>
 800ae78:	681d      	ldr	r5, [r3, #0]
 800ae7a:	e003      	b.n	800ae84 <_printf_i+0xc4>
 800ae7c:	0645      	lsls	r5, r0, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0xb8>
 800ae80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	da03      	bge.n	800ae90 <_printf_i+0xd0>
 800ae88:	232d      	movs	r3, #45	@ 0x2d
 800ae8a:	426d      	negs	r5, r5
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae90:	4859      	ldr	r0, [pc, #356]	@ (800aff8 <_printf_i+0x238>)
 800ae92:	230a      	movs	r3, #10
 800ae94:	e011      	b.n	800aeba <_printf_i+0xfa>
 800ae96:	6821      	ldr	r1, [r4, #0]
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	0608      	lsls	r0, r1, #24
 800ae9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aea0:	d402      	bmi.n	800aea8 <_printf_i+0xe8>
 800aea2:	0649      	lsls	r1, r1, #25
 800aea4:	bf48      	it	mi
 800aea6:	b2ad      	uxthmi	r5, r5
 800aea8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeaa:	4853      	ldr	r0, [pc, #332]	@ (800aff8 <_printf_i+0x238>)
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	bf14      	ite	ne
 800aeb0:	230a      	movne	r3, #10
 800aeb2:	2308      	moveq	r3, #8
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeba:	6866      	ldr	r6, [r4, #4]
 800aebc:	60a6      	str	r6, [r4, #8]
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	bfa2      	ittt	ge
 800aec2:	6821      	ldrge	r1, [r4, #0]
 800aec4:	f021 0104 	bicge.w	r1, r1, #4
 800aec8:	6021      	strge	r1, [r4, #0]
 800aeca:	b90d      	cbnz	r5, 800aed0 <_printf_i+0x110>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	d04b      	beq.n	800af68 <_printf_i+0x1a8>
 800aed0:	4616      	mov	r6, r2
 800aed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aed6:	fb03 5711 	mls	r7, r3, r1, r5
 800aeda:	5dc7      	ldrb	r7, [r0, r7]
 800aedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aee0:	462f      	mov	r7, r5
 800aee2:	42bb      	cmp	r3, r7
 800aee4:	460d      	mov	r5, r1
 800aee6:	d9f4      	bls.n	800aed2 <_printf_i+0x112>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d10b      	bne.n	800af04 <_printf_i+0x144>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07df      	lsls	r7, r3, #31
 800aef0:	d508      	bpl.n	800af04 <_printf_i+0x144>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	6861      	ldr	r1, [r4, #4]
 800aef6:	4299      	cmp	r1, r3
 800aef8:	bfde      	ittt	le
 800aefa:	2330      	movle	r3, #48	@ 0x30
 800aefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af04:	1b92      	subs	r2, r2, r6
 800af06:	6122      	str	r2, [r4, #16]
 800af08:	f8cd a000 	str.w	sl, [sp]
 800af0c:	464b      	mov	r3, r9
 800af0e:	aa03      	add	r2, sp, #12
 800af10:	4621      	mov	r1, r4
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff fee6 	bl	800ace4 <_printf_common>
 800af18:	3001      	adds	r0, #1
 800af1a:	d14a      	bne.n	800afb2 <_printf_i+0x1f2>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b004      	add	sp, #16
 800af22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	f043 0320 	orr.w	r3, r3, #32
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	4833      	ldr	r0, [pc, #204]	@ (800affc <_printf_i+0x23c>)
 800af30:	2778      	movs	r7, #120	@ 0x78
 800af32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	6831      	ldr	r1, [r6, #0]
 800af3a:	061f      	lsls	r7, r3, #24
 800af3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af40:	d402      	bmi.n	800af48 <_printf_i+0x188>
 800af42:	065f      	lsls	r7, r3, #25
 800af44:	bf48      	it	mi
 800af46:	b2ad      	uxthmi	r5, r5
 800af48:	6031      	str	r1, [r6, #0]
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	bf44      	itt	mi
 800af4e:	f043 0320 	orrmi.w	r3, r3, #32
 800af52:	6023      	strmi	r3, [r4, #0]
 800af54:	b11d      	cbz	r5, 800af5e <_printf_i+0x19e>
 800af56:	2310      	movs	r3, #16
 800af58:	e7ac      	b.n	800aeb4 <_printf_i+0xf4>
 800af5a:	4827      	ldr	r0, [pc, #156]	@ (800aff8 <_printf_i+0x238>)
 800af5c:	e7e9      	b.n	800af32 <_printf_i+0x172>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	f023 0320 	bic.w	r3, r3, #32
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	e7f6      	b.n	800af56 <_printf_i+0x196>
 800af68:	4616      	mov	r6, r2
 800af6a:	e7bd      	b.n	800aee8 <_printf_i+0x128>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	6961      	ldr	r1, [r4, #20]
 800af72:	1d18      	adds	r0, r3, #4
 800af74:	6030      	str	r0, [r6, #0]
 800af76:	062e      	lsls	r6, r5, #24
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	d501      	bpl.n	800af80 <_printf_i+0x1c0>
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	e002      	b.n	800af86 <_printf_i+0x1c6>
 800af80:	0668      	lsls	r0, r5, #25
 800af82:	d5fb      	bpl.n	800af7c <_printf_i+0x1bc>
 800af84:	8019      	strh	r1, [r3, #0]
 800af86:	2300      	movs	r3, #0
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	4616      	mov	r6, r2
 800af8c:	e7bc      	b.n	800af08 <_printf_i+0x148>
 800af8e:	6833      	ldr	r3, [r6, #0]
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	6032      	str	r2, [r6, #0]
 800af94:	681e      	ldr	r6, [r3, #0]
 800af96:	6862      	ldr	r2, [r4, #4]
 800af98:	2100      	movs	r1, #0
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7f5 f9c8 	bl	8000330 <memchr>
 800afa0:	b108      	cbz	r0, 800afa6 <_printf_i+0x1e6>
 800afa2:	1b80      	subs	r0, r0, r6
 800afa4:	6060      	str	r0, [r4, #4]
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	2300      	movs	r3, #0
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb0:	e7aa      	b.n	800af08 <_printf_i+0x148>
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d0ad      	beq.n	800af1c <_printf_i+0x15c>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	079b      	lsls	r3, r3, #30
 800afc4:	d413      	bmi.n	800afee <_printf_i+0x22e>
 800afc6:	68e0      	ldr	r0, [r4, #12]
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	4298      	cmp	r0, r3
 800afcc:	bfb8      	it	lt
 800afce:	4618      	movlt	r0, r3
 800afd0:	e7a6      	b.n	800af20 <_printf_i+0x160>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4632      	mov	r2, r6
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	47d0      	blx	sl
 800afdc:	3001      	adds	r0, #1
 800afde:	d09d      	beq.n	800af1c <_printf_i+0x15c>
 800afe0:	3501      	adds	r5, #1
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	9903      	ldr	r1, [sp, #12]
 800afe6:	1a5b      	subs	r3, r3, r1
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dcf2      	bgt.n	800afd2 <_printf_i+0x212>
 800afec:	e7eb      	b.n	800afc6 <_printf_i+0x206>
 800afee:	2500      	movs	r5, #0
 800aff0:	f104 0619 	add.w	r6, r4, #25
 800aff4:	e7f5      	b.n	800afe2 <_printf_i+0x222>
 800aff6:	bf00      	nop
 800aff8:	0800b40a 	.word	0x0800b40a
 800affc:	0800b41b 	.word	0x0800b41b

0800b000 <__swbuf_r>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	460e      	mov	r6, r1
 800b004:	4614      	mov	r4, r2
 800b006:	4605      	mov	r5, r0
 800b008:	b118      	cbz	r0, 800b012 <__swbuf_r+0x12>
 800b00a:	6a03      	ldr	r3, [r0, #32]
 800b00c:	b90b      	cbnz	r3, 800b012 <__swbuf_r+0x12>
 800b00e:	f7ff fa8b 	bl	800a528 <__sinit>
 800b012:	69a3      	ldr	r3, [r4, #24]
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	071a      	lsls	r2, r3, #28
 800b01a:	d501      	bpl.n	800b020 <__swbuf_r+0x20>
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	b943      	cbnz	r3, 800b032 <__swbuf_r+0x32>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f82a 	bl	800b07c <__swsetup_r>
 800b028:	b118      	cbz	r0, 800b032 <__swbuf_r+0x32>
 800b02a:	f04f 37ff 	mov.w	r7, #4294967295
 800b02e:	4638      	mov	r0, r7
 800b030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	6922      	ldr	r2, [r4, #16]
 800b036:	1a98      	subs	r0, r3, r2
 800b038:	6963      	ldr	r3, [r4, #20]
 800b03a:	b2f6      	uxtb	r6, r6
 800b03c:	4283      	cmp	r3, r0
 800b03e:	4637      	mov	r7, r6
 800b040:	dc05      	bgt.n	800b04e <__swbuf_r+0x4e>
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f7ff fccb 	bl	800a9e0 <_fflush_r>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d1ed      	bne.n	800b02a <__swbuf_r+0x2a>
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	3b01      	subs	r3, #1
 800b052:	60a3      	str	r3, [r4, #8]
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	6022      	str	r2, [r4, #0]
 800b05a:	701e      	strb	r6, [r3, #0]
 800b05c:	6962      	ldr	r2, [r4, #20]
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	429a      	cmp	r2, r3
 800b062:	d004      	beq.n	800b06e <__swbuf_r+0x6e>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	07db      	lsls	r3, r3, #31
 800b068:	d5e1      	bpl.n	800b02e <__swbuf_r+0x2e>
 800b06a:	2e0a      	cmp	r6, #10
 800b06c:	d1df      	bne.n	800b02e <__swbuf_r+0x2e>
 800b06e:	4621      	mov	r1, r4
 800b070:	4628      	mov	r0, r5
 800b072:	f7ff fcb5 	bl	800a9e0 <_fflush_r>
 800b076:	2800      	cmp	r0, #0
 800b078:	d0d9      	beq.n	800b02e <__swbuf_r+0x2e>
 800b07a:	e7d6      	b.n	800b02a <__swbuf_r+0x2a>

0800b07c <__swsetup_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4b29      	ldr	r3, [pc, #164]	@ (800b124 <__swsetup_r+0xa8>)
 800b080:	4605      	mov	r5, r0
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	460c      	mov	r4, r1
 800b086:	b118      	cbz	r0, 800b090 <__swsetup_r+0x14>
 800b088:	6a03      	ldr	r3, [r0, #32]
 800b08a:	b90b      	cbnz	r3, 800b090 <__swsetup_r+0x14>
 800b08c:	f7ff fa4c 	bl	800a528 <__sinit>
 800b090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b094:	0719      	lsls	r1, r3, #28
 800b096:	d422      	bmi.n	800b0de <__swsetup_r+0x62>
 800b098:	06da      	lsls	r2, r3, #27
 800b09a:	d407      	bmi.n	800b0ac <__swsetup_r+0x30>
 800b09c:	2209      	movs	r2, #9
 800b09e:	602a      	str	r2, [r5, #0]
 800b0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	e033      	b.n	800b114 <__swsetup_r+0x98>
 800b0ac:	0758      	lsls	r0, r3, #29
 800b0ae:	d512      	bpl.n	800b0d6 <__swsetup_r+0x5a>
 800b0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0b2:	b141      	cbz	r1, 800b0c6 <__swsetup_r+0x4a>
 800b0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	d002      	beq.n	800b0c2 <__swsetup_r+0x46>
 800b0bc:	4628      	mov	r0, r5
 800b0be:	f7ff fbc1 	bl	800a844 <_free_r>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6063      	str	r3, [r4, #4]
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f043 0308 	orr.w	r3, r3, #8
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	b94b      	cbnz	r3, 800b0f6 <__swsetup_r+0x7a>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0ec:	d003      	beq.n	800b0f6 <__swsetup_r+0x7a>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 f883 	bl	800b1fc <__smakebuf_r>
 800b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fa:	f013 0201 	ands.w	r2, r3, #1
 800b0fe:	d00a      	beq.n	800b116 <__swsetup_r+0x9a>
 800b100:	2200      	movs	r2, #0
 800b102:	60a2      	str	r2, [r4, #8]
 800b104:	6962      	ldr	r2, [r4, #20]
 800b106:	4252      	negs	r2, r2
 800b108:	61a2      	str	r2, [r4, #24]
 800b10a:	6922      	ldr	r2, [r4, #16]
 800b10c:	b942      	cbnz	r2, 800b120 <__swsetup_r+0xa4>
 800b10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b112:	d1c5      	bne.n	800b0a0 <__swsetup_r+0x24>
 800b114:	bd38      	pop	{r3, r4, r5, pc}
 800b116:	0799      	lsls	r1, r3, #30
 800b118:	bf58      	it	pl
 800b11a:	6962      	ldrpl	r2, [r4, #20]
 800b11c:	60a2      	str	r2, [r4, #8]
 800b11e:	e7f4      	b.n	800b10a <__swsetup_r+0x8e>
 800b120:	2000      	movs	r0, #0
 800b122:	e7f7      	b.n	800b114 <__swsetup_r+0x98>
 800b124:	24000058 	.word	0x24000058

0800b128 <_raise_r>:
 800b128:	291f      	cmp	r1, #31
 800b12a:	b538      	push	{r3, r4, r5, lr}
 800b12c:	4605      	mov	r5, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	d904      	bls.n	800b13c <_raise_r+0x14>
 800b132:	2316      	movs	r3, #22
 800b134:	6003      	str	r3, [r0, #0]
 800b136:	f04f 30ff 	mov.w	r0, #4294967295
 800b13a:	bd38      	pop	{r3, r4, r5, pc}
 800b13c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b13e:	b112      	cbz	r2, 800b146 <_raise_r+0x1e>
 800b140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b144:	b94b      	cbnz	r3, 800b15a <_raise_r+0x32>
 800b146:	4628      	mov	r0, r5
 800b148:	f000 f830 	bl	800b1ac <_getpid_r>
 800b14c:	4622      	mov	r2, r4
 800b14e:	4601      	mov	r1, r0
 800b150:	4628      	mov	r0, r5
 800b152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b156:	f000 b817 	b.w	800b188 <_kill_r>
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d00a      	beq.n	800b174 <_raise_r+0x4c>
 800b15e:	1c59      	adds	r1, r3, #1
 800b160:	d103      	bne.n	800b16a <_raise_r+0x42>
 800b162:	2316      	movs	r3, #22
 800b164:	6003      	str	r3, [r0, #0]
 800b166:	2001      	movs	r0, #1
 800b168:	e7e7      	b.n	800b13a <_raise_r+0x12>
 800b16a:	2100      	movs	r1, #0
 800b16c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b170:	4620      	mov	r0, r4
 800b172:	4798      	blx	r3
 800b174:	2000      	movs	r0, #0
 800b176:	e7e0      	b.n	800b13a <_raise_r+0x12>

0800b178 <raise>:
 800b178:	4b02      	ldr	r3, [pc, #8]	@ (800b184 <raise+0xc>)
 800b17a:	4601      	mov	r1, r0
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	f7ff bfd3 	b.w	800b128 <_raise_r>
 800b182:	bf00      	nop
 800b184:	24000058 	.word	0x24000058

0800b188 <_kill_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4d07      	ldr	r5, [pc, #28]	@ (800b1a8 <_kill_r+0x20>)
 800b18c:	2300      	movs	r3, #0
 800b18e:	4604      	mov	r4, r0
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	f7f5 fe83 	bl	8000ea0 <_kill>
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	d102      	bne.n	800b1a4 <_kill_r+0x1c>
 800b19e:	682b      	ldr	r3, [r5, #0]
 800b1a0:	b103      	cbz	r3, 800b1a4 <_kill_r+0x1c>
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	bd38      	pop	{r3, r4, r5, pc}
 800b1a6:	bf00      	nop
 800b1a8:	24000708 	.word	0x24000708

0800b1ac <_getpid_r>:
 800b1ac:	f7f5 be70 	b.w	8000e90 <_getpid>

0800b1b0 <__swhatbuf_r>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	b096      	sub	sp, #88	@ 0x58
 800b1bc:	4615      	mov	r5, r2
 800b1be:	461e      	mov	r6, r3
 800b1c0:	da0d      	bge.n	800b1de <__swhatbuf_r+0x2e>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1c8:	f04f 0100 	mov.w	r1, #0
 800b1cc:	bf14      	ite	ne
 800b1ce:	2340      	movne	r3, #64	@ 0x40
 800b1d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	6031      	str	r1, [r6, #0]
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	b016      	add	sp, #88	@ 0x58
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f000 f848 	bl	800b274 <_fstat_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	dbec      	blt.n	800b1c2 <__swhatbuf_r+0x12>
 800b1e8:	9901      	ldr	r1, [sp, #4]
 800b1ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1f2:	4259      	negs	r1, r3
 800b1f4:	4159      	adcs	r1, r3
 800b1f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1fa:	e7eb      	b.n	800b1d4 <__swhatbuf_r+0x24>

0800b1fc <__smakebuf_r>:
 800b1fc:	898b      	ldrh	r3, [r1, #12]
 800b1fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b200:	079d      	lsls	r5, r3, #30
 800b202:	4606      	mov	r6, r0
 800b204:	460c      	mov	r4, r1
 800b206:	d507      	bpl.n	800b218 <__smakebuf_r+0x1c>
 800b208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	2301      	movs	r3, #1
 800b212:	6163      	str	r3, [r4, #20]
 800b214:	b003      	add	sp, #12
 800b216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b218:	ab01      	add	r3, sp, #4
 800b21a:	466a      	mov	r2, sp
 800b21c:	f7ff ffc8 	bl	800b1b0 <__swhatbuf_r>
 800b220:	9f00      	ldr	r7, [sp, #0]
 800b222:	4605      	mov	r5, r0
 800b224:	4639      	mov	r1, r7
 800b226:	4630      	mov	r0, r6
 800b228:	f7ff f866 	bl	800a2f8 <_malloc_r>
 800b22c:	b948      	cbnz	r0, 800b242 <__smakebuf_r+0x46>
 800b22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b232:	059a      	lsls	r2, r3, #22
 800b234:	d4ee      	bmi.n	800b214 <__smakebuf_r+0x18>
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	f043 0302 	orr.w	r3, r3, #2
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	e7e2      	b.n	800b208 <__smakebuf_r+0xc>
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	6020      	str	r0, [r4, #0]
 800b246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	9b01      	ldr	r3, [sp, #4]
 800b24e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b252:	b15b      	cbz	r3, 800b26c <__smakebuf_r+0x70>
 800b254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b258:	4630      	mov	r0, r6
 800b25a:	f000 f81d 	bl	800b298 <_isatty_r>
 800b25e:	b128      	cbz	r0, 800b26c <__smakebuf_r+0x70>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	431d      	orrs	r5, r3
 800b270:	81a5      	strh	r5, [r4, #12]
 800b272:	e7cf      	b.n	800b214 <__smakebuf_r+0x18>

0800b274 <_fstat_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	@ (800b294 <_fstat_r+0x20>)
 800b278:	2300      	movs	r3, #0
 800b27a:	4604      	mov	r4, r0
 800b27c:	4608      	mov	r0, r1
 800b27e:	4611      	mov	r1, r2
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	f7f5 fe6d 	bl	8000f60 <_fstat>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	d102      	bne.n	800b290 <_fstat_r+0x1c>
 800b28a:	682b      	ldr	r3, [r5, #0]
 800b28c:	b103      	cbz	r3, 800b290 <_fstat_r+0x1c>
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	bd38      	pop	{r3, r4, r5, pc}
 800b292:	bf00      	nop
 800b294:	24000708 	.word	0x24000708

0800b298 <_isatty_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d06      	ldr	r5, [pc, #24]	@ (800b2b4 <_isatty_r+0x1c>)
 800b29c:	2300      	movs	r3, #0
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	f7f5 fe6c 	bl	8000f80 <_isatty>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_isatty_r+0x1a>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_isatty_r+0x1a>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	24000708 	.word	0x24000708

0800b2b8 <_init>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr

0800b2c4 <_fini>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr

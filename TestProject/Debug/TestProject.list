
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009da4  08009da4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009dac  08009dac  0000adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009db0  08009db0  0000adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009db4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009dc4  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009e24  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  240000d0  08009e84  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  240002f4  08009e84  0000b2f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161d4  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf5  00000000  00000000  000212d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00023fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8c  00000000  00000000  00024da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034220  00000000  00000000  0002582c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017262  00000000  00000000  00059a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146560  00000000  00000000  00070cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b720e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  001b7254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001ba99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009d38 	.word	0x08009d38

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08009d38 	.word	0x08009d38

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <systemInit>:
#include "usart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000600:	2210      	movs	r2, #16
 8000602:	4904      	ldr	r1, [pc, #16]	@ (8000614 <systemInit+0x18>)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <systemInit+0x1c>)
 8000606:	f007 f8e5 	bl	80077d4 <HAL_UART_Transmit_IT>

	debugUartInit();
 800060a:	f009 fb43 	bl	8009c94 <debugUartInit>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08009d50 	.word	0x08009d50
 8000618:	240001dc 	.word	0x240001dc

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <MX_DMA_Init+0x3c>)
 8000624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <MX_DMA_Init+0x3c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_DMA_Init+0x3c>)
 8000634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	200b      	movs	r0, #11
 8000646:	f000 fe22 	bl	800128e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800064a:	200b      	movs	r0, #11
 800064c:	f000 fe39 	bl	80012c2 <HAL_NVIC_EnableIRQ>

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58024400 	.word	0x58024400

0800065c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_ETH_Init+0x80>)
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <MX_ETH_Init+0x84>)
 8000664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_ETH_Init+0x88>)
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000674:	22e1      	movs	r2, #225	@ 0xe1
 8000676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_ETH_Init+0x88>)
 800067a:	2200      	movs	r2, #0
 800067c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_ETH_Init+0x88>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ETH_Init+0x80>)
 800068c:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <MX_ETH_Init+0x88>)
 800068e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ETH_Init+0x80>)
 8000692:	2201      	movs	r2, #1
 8000694:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ETH_Init+0x80>)
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_ETH_Init+0x8c>)
 800069a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ETH_Init+0x80>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_ETH_Init+0x90>)
 80006a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_ETH_Init+0x80>)
 80006a4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_ETH_Init+0x80>)
 80006ac:	f003 fc5c 	bl	8003f68 <HAL_ETH_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006b6:	f000 fa6b 	bl	8000b90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ba:	2238      	movs	r2, #56	@ 0x38
 80006bc:	2100      	movs	r1, #0
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006c0:	f009 fb0e 	bl	8009ce0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006c6:	2221      	movs	r2, #33	@ 0x21
 80006c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_ETH_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000124 	.word	0x24000124
 80006e0:	40028000 	.word	0x40028000
 80006e4:	240001d4 	.word	0x240001d4
 80006e8:	24000070 	.word	0x24000070
 80006ec:	24000010 	.word	0x24000010
 80006f0:	240000ec 	.word	0x240000ec

080006f4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a59      	ldr	r2, [pc, #356]	@ (8000878 <HAL_ETH_MspInit+0x184>)
 8000712:	4293      	cmp	r3, r2
 8000714:	f040 80ab 	bne.w	800086e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000718:	4b58      	ldr	r3, [pc, #352]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800071e:	4a57      	ldr	r2, [pc, #348]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000724:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000728:	4b54      	ldr	r3, [pc, #336]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800072e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000736:	4b51      	ldr	r3, [pc, #324]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800073c:	4a4f      	ldr	r2, [pc, #316]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800073e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000742:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000746:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800074c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000754:	4b49      	ldr	r3, [pc, #292]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075a:	4a48      	ldr	r2, [pc, #288]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800075c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000760:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000764:	4b45      	ldr	r3, [pc, #276]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b42      	ldr	r3, [pc, #264]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4a40      	ldr	r2, [pc, #256]	@ (800087c <HAL_ETH_MspInit+0x188>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b3a      	ldr	r3, [pc, #232]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a39      	ldr	r2, [pc, #228]	@ (800087c <HAL_ETH_MspInit+0x188>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b36      	ldr	r3, [pc, #216]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a31      	ldr	r2, [pc, #196]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007cc:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <HAL_ETH_MspInit+0x188>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007ea:	2332      	movs	r3, #50	@ 0x32
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fa:	230b      	movs	r3, #11
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	481e      	ldr	r0, [pc, #120]	@ (8000880 <HAL_ETH_MspInit+0x18c>)
 8000806:	f003 ffe3 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800080a:	2386      	movs	r3, #134	@ 0x86
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081a:	230b      	movs	r3, #11
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4817      	ldr	r0, [pc, #92]	@ (8000884 <HAL_ETH_MspInit+0x190>)
 8000826:	f003 ffd3 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800083c:	230b      	movs	r3, #11
 800083e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4810      	ldr	r0, [pc, #64]	@ (8000888 <HAL_ETH_MspInit+0x194>)
 8000848:	f003 ffc2 	bl	80047d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800084c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085e:	230b      	movs	r3, #11
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	4808      	ldr	r0, [pc, #32]	@ (800088c <HAL_ETH_MspInit+0x198>)
 800086a:	f003 ffb1 	bl	80047d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3738      	adds	r7, #56	@ 0x38
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40028000 	.word	0x40028000
 800087c:	58024400 	.word	0x58024400
 8000880:	58020800 	.word	0x58020800
 8000884:	58020000 	.word	0x58020000
 8000888:	58020400 	.word	0x58020400
 800088c:	58021800 	.word	0x58021800

08000890 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b71      	ldr	r3, [pc, #452]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a6f      	ldr	r2, [pc, #444]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c4:	4b69      	ldr	r3, [pc, #420]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	4a68      	ldr	r2, [pc, #416]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d4:	4b65      	ldr	r3, [pc, #404]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b62      	ldr	r3, [pc, #392]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	4a60      	ldr	r2, [pc, #384]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b5a      	ldr	r3, [pc, #360]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	4a59      	ldr	r2, [pc, #356]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000910:	4b56      	ldr	r3, [pc, #344]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a51      	ldr	r2, [pc, #324]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000926:	f043 0308 	orr.w	r3, r3, #8
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0308 	and.w	r3, r3, #8
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a4a      	ldr	r2, [pc, #296]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b47      	ldr	r3, [pc, #284]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a42      	ldr	r2, [pc, #264]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b40      	ldr	r3, [pc, #256]	@ (8000a6c <MX_GPIO_Init+0x1dc>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800097e:	483c      	ldr	r0, [pc, #240]	@ (8000a70 <MX_GPIO_Init+0x1e0>)
 8000980:	f004 f8ce 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098a:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x1e4>)
 800098c:	f004 f8c8 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	4838      	ldr	r0, [pc, #224]	@ (8000a78 <MX_GPIO_Init+0x1e8>)
 8000996:	f004 f8c3 	bl	8004b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4833      	ldr	r0, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0x1ec>)
 80009b0:	f003 ff0e 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4828      	ldr	r0, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0x1e0>)
 80009ce:	f003 feff 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <MX_GPIO_Init+0x1e4>)
 80009ec:	f003 fef0 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a06:	f003 fee3 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <MX_GPIO_Init+0x1f4>)
 8000a20:	f003 fed6 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	@ (8000a84 <MX_GPIO_Init+0x1f4>)
 8000a42:	f003 fec5 	bl	80047d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a5e:	f003 feb7 	bl	80047d0 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	@ 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020400 	.word	0x58020400
 8000a74:	58020c00 	.word	0x58020c00
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	58021800 	.word	0x58021800
 8000a84:	58020000 	.word	0x58020000

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fa7e 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f80e 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f7ff fefc 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f7ff fdc0 	bl	800061c <MX_DMA_Init>
  MX_ETH_Init();
 8000a9c:	f7ff fdde 	bl	800065c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000aa0:	f000 f952 	bl	8000d48 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000aa4:	f000 fa40 	bl	8000f28 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000aa8:	f7ff fda8 	bl	80005fc <systemInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <main+0x24>

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b09c      	sub	sp, #112	@ 0x70
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aba:	224c      	movs	r2, #76	@ 0x4c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 f90e 	bl	8009ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f009 f908 	bl	8009ce0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f004 f83f 	bl	8004b54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b2c      	ldr	r3, [pc, #176]	@ (8000b8c <SystemClock_Config+0xdc>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a2b      	ldr	r2, [pc, #172]	@ (8000b8c <SystemClock_Config+0xdc>)
 8000ae0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <SystemClock_Config+0xdc>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af2:	bf00      	nop
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <SystemClock_Config+0xdc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b00:	d1f8      	bne.n	8000af4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b02:	2321      	movs	r3, #33	@ 0x21
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b06:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b1c:	f240 1313 	movw	r3, #275	@ 0x113
 8000b20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b26:	2304      	movs	r3, #4
 8000b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 f842 	bl	8004bc8 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b4a:	f000 f821 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	233f      	movs	r3, #63	@ 0x3f
 8000b50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5e:	2340      	movs	r3, #64	@ 0x40
 8000b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6c:	2340      	movs	r3, #64	@ 0x40
 8000b6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2103      	movs	r1, #3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 fc01 	bl	800537c <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b80:	f000 f806 	bl	8000b90 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3770      	adds	r7, #112	@ 0x70
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024800 	.word	0x58024800

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x30>)
 8000ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ba8:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x30>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x30>)
 8000bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	58024400 	.word	0x58024400

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 fa23 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <DMA1_Stream0_IRQHandler+0x10>)
 8000c36:	f001 fe85 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	24000270 	.word	0x24000270

08000c44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USART3_IRQHandler+0x10>)
 8000c4a:	f006 fea3 	bl	8007994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240001dc 	.word	0x240001dc

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <SystemInit+0xd0>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a31      	ldr	r2, [pc, #196]	@ (8000d28 <SystemInit+0xd0>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <SystemInit+0xd4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 030f 	and.w	r3, r3, #15
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d807      	bhi.n	8000c88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <SystemInit+0xd4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f023 030f 	bic.w	r3, r3, #15
 8000c80:	4a2a      	ldr	r2, [pc, #168]	@ (8000d2c <SystemInit+0xd4>)
 8000c82:	f043 0307 	orr.w	r3, r3, #7
 8000c86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xd8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <SystemInit+0xd8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <SystemInit+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <SystemInit+0xd8>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4924      	ldr	r1, [pc, #144]	@ (8000d30 <SystemInit+0xd8>)
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <SystemInit+0xdc>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <SystemInit+0xd4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xd4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 030f 	bic.w	r3, r3, #15
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <SystemInit+0xd4>)
 8000cbc:	f043 0307 	orr.w	r3, r3, #7
 8000cc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <SystemInit+0xd8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <SystemInit+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <SystemInit+0xd8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <SystemInit+0xd8>)
 8000cd6:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <SystemInit+0xe0>)
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <SystemInit+0xd8>)
 8000cdc:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <SystemInit+0xe4>)
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <SystemInit+0xd8>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <SystemInit+0xe8>)
 8000ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <SystemInit+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <SystemInit+0xd8>)
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <SystemInit+0xe8>)
 8000cf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <SystemInit+0xd8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <SystemInit+0xd8>)
 8000cfa:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <SystemInit+0xe8>)
 8000cfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <SystemInit+0xd8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <SystemInit+0xd8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <SystemInit+0xd8>)
 8000d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <SystemInit+0xd8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <SystemInit+0xec>)
 8000d18:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00
 8000d2c:	52002000 	.word	0x52002000
 8000d30:	58024400 	.word	0x58024400
 8000d34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d38:	02020200 	.word	0x02020200
 8000d3c:	01ff0000 	.word	0x01ff0000
 8000d40:	01010280 	.word	0x01010280
 8000d44:	52004000 	.word	0x52004000

08000d48 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <MX_USART3_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d92:	f006 fc41 	bl	8007618 <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f7ff fef8 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000da4:	f008 fe71 	bl	8009a8a <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f7ff feef 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f008 fea6 	bl	8009b06 <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f7ff fee6 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000dc6:	f008 fe27 	bl	8009a18 <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f7ff fede 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	240001dc 	.word	0x240001dc
 8000ddc:	40004800 	.word	0x40004800

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0b8      	sub	sp, #224	@ 0xe0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22b8      	movs	r2, #184	@ 0xb8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f008 ff6d 	bl	8009ce0 <memset>
  if(uartHandle->Instance==USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a42      	ldr	r2, [pc, #264]	@ (8000f14 <HAL_UART_MspInit+0x134>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d17c      	bne.n	8000f0a <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e10:	f04f 0202 	mov.w	r2, #2
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 fe34 	bl	8005a94 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e32:	f7ff fead 	bl	8000b90 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e36:	4b38      	ldr	r3, [pc, #224]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3c:	4a36      	ldr	r2, [pc, #216]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e46:	4b34      	ldr	r3, [pc, #208]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e64:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <HAL_UART_MspInit+0x138>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e96:	4619      	mov	r1, r3
 8000e98:	4820      	ldr	r0, [pc, #128]	@ (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e9a:	f003 fc99 	bl	80047d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <HAL_UART_MspInit+0x144>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ea6:	222d      	movs	r2, #45	@ 0x2d
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000edc:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ede:	f000 fa0b 	bl	80012f8 <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000ee8:	f7ff fe52 	bl	8000b90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_UART_MspInit+0x140>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2027      	movs	r0, #39	@ 0x27
 8000f00:	f000 f9c5 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f04:	2027      	movs	r0, #39	@ 0x27
 8000f06:	f000 f9dc 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	37e0      	adds	r7, #224	@ 0xe0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004800 	.word	0x40004800
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	24000270 	.word	0x24000270
 8000f24:	40020010 	.word	0x40020010

08000f28 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f3c:	f7ff fe8c 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f42:	490d      	ldr	r1, [pc, #52]	@ (8000f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f58:	4c0a      	ldr	r4, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f66:	f008 fec3 	bl	8009cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fd8d 	bl	8000a88 <main>
  bx  lr
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f78:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f7c:	08009db4 	.word	0x08009db4
  ldr r2, =_sbss
 8000f80:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f84:	240002f4 	.word	0x240002f4

08000f88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC3_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f92:	2003      	movs	r0, #3
 8000f94:	f000 f970 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f98:	f004 fba6 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	4913      	ldr	r1, [pc, #76]	@ (8000ff8 <HAL_Init+0x6c>)
 8000faa:	5ccb      	ldrb	r3, [r1, r3]
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_Init+0x68>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_Init+0x6c>)
 8000fc0:	5cd3      	ldrb	r3, [r2, r3]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_Init+0x70>)
 8000fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_Init+0x74>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f814 	bl	8001004 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e002      	b.n	8000fec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe6:	f7ff fdd9 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	08009d64 	.word	0x08009d64
 8000ffc:	24000004 	.word	0x24000004
 8001000:	24000000 	.word	0x24000000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800100c:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_InitTick+0x60>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e021      	b.n	800105c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <HAL_InitTick+0x64>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f955 	bl	80012de <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f91f 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	@ (800106c <HAL_InitTick+0x68>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2400000c 	.word	0x2400000c
 8001068:	24000000 	.word	0x24000000
 800106c:	24000008 	.word	0x24000008

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2400000c 	.word	0x2400000c
 8001094:	240002e8 	.word	0x240002e8

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	240002e8 	.word	0x240002e8

080010b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58000400 	.word	0x58000400

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	4313      	orrs	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	05fa0000 	.word	0x05fa0000

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	@ (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	@ (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	@ (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	@ 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff40 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff33 	bl	800113c <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa4 	bl	8001234 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff feca 	bl	8001098 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e312      	b.n	8001936 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a66      	ldr	r2, [pc, #408]	@ (80014b0 <HAL_DMA_Init+0x1b8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d04a      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <HAL_DMA_Init+0x1bc>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d045      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a63      	ldr	r2, [pc, #396]	@ (80014b8 <HAL_DMA_Init+0x1c0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d040      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a62      	ldr	r2, [pc, #392]	@ (80014bc <HAL_DMA_Init+0x1c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d03b      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a60      	ldr	r2, [pc, #384]	@ (80014c0 <HAL_DMA_Init+0x1c8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d036      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5f      	ldr	r2, [pc, #380]	@ (80014c4 <HAL_DMA_Init+0x1cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d031      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a5d      	ldr	r2, [pc, #372]	@ (80014c8 <HAL_DMA_Init+0x1d0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d02c      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5c      	ldr	r2, [pc, #368]	@ (80014cc <HAL_DMA_Init+0x1d4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d027      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5a      	ldr	r2, [pc, #360]	@ (80014d0 <HAL_DMA_Init+0x1d8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d022      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a59      	ldr	r2, [pc, #356]	@ (80014d4 <HAL_DMA_Init+0x1dc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d01d      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a57      	ldr	r2, [pc, #348]	@ (80014d8 <HAL_DMA_Init+0x1e0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d018      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a56      	ldr	r2, [pc, #344]	@ (80014dc <HAL_DMA_Init+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d013      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a54      	ldr	r2, [pc, #336]	@ (80014e0 <HAL_DMA_Init+0x1e8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00e      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a53      	ldr	r2, [pc, #332]	@ (80014e4 <HAL_DMA_Init+0x1ec>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a51      	ldr	r2, [pc, #324]	@ (80014e8 <HAL_DMA_Init+0x1f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Init+0xb8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a50      	ldr	r2, [pc, #320]	@ (80014ec <HAL_DMA_Init+0x1f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0xbc>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <HAL_DMA_Init+0xbe>
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 813c 	beq.w	8001634 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a37      	ldr	r2, [pc, #220]	@ (80014b0 <HAL_DMA_Init+0x1b8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d04a      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <HAL_DMA_Init+0x1bc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d045      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a34      	ldr	r2, [pc, #208]	@ (80014b8 <HAL_DMA_Init+0x1c0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d040      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a33      	ldr	r2, [pc, #204]	@ (80014bc <HAL_DMA_Init+0x1c4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d03b      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <HAL_DMA_Init+0x1c8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d036      	beq.n	800146c <HAL_DMA_Init+0x174>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a30      	ldr	r2, [pc, #192]	@ (80014c4 <HAL_DMA_Init+0x1cc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d031      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <HAL_DMA_Init+0x1d0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02c      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <HAL_DMA_Init+0x1d4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d027      	beq.n	800146c <HAL_DMA_Init+0x174>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a2b      	ldr	r2, [pc, #172]	@ (80014d0 <HAL_DMA_Init+0x1d8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d022      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2a      	ldr	r2, [pc, #168]	@ (80014d4 <HAL_DMA_Init+0x1dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d01d      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <HAL_DMA_Init+0x1e0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d018      	beq.n	800146c <HAL_DMA_Init+0x174>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a27      	ldr	r2, [pc, #156]	@ (80014dc <HAL_DMA_Init+0x1e4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a25      	ldr	r2, [pc, #148]	@ (80014e0 <HAL_DMA_Init+0x1e8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00e      	beq.n	800146c <HAL_DMA_Init+0x174>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a24      	ldr	r2, [pc, #144]	@ (80014e4 <HAL_DMA_Init+0x1ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d009      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a22      	ldr	r2, [pc, #136]	@ (80014e8 <HAL_DMA_Init+0x1f0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d004      	beq.n	800146c <HAL_DMA_Init+0x174>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <HAL_DMA_Init+0x1f4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d108      	bne.n	800147e <HAL_DMA_Init+0x186>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e007      	b.n	800148e <HAL_DMA_Init+0x196>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800148e:	e02f      	b.n	80014f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001490:	f7ff fe02 	bl	8001098 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b05      	cmp	r3, #5
 800149c:	d928      	bls.n	80014f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e242      	b.n	8001936 <HAL_DMA_Init+0x63e>
 80014b0:	40020010 	.word	0x40020010
 80014b4:	40020028 	.word	0x40020028
 80014b8:	40020040 	.word	0x40020040
 80014bc:	40020058 	.word	0x40020058
 80014c0:	40020070 	.word	0x40020070
 80014c4:	40020088 	.word	0x40020088
 80014c8:	400200a0 	.word	0x400200a0
 80014cc:	400200b8 	.word	0x400200b8
 80014d0:	40020410 	.word	0x40020410
 80014d4:	40020428 	.word	0x40020428
 80014d8:	40020440 	.word	0x40020440
 80014dc:	40020458 	.word	0x40020458
 80014e0:	40020470 	.word	0x40020470
 80014e4:	40020488 	.word	0x40020488
 80014e8:	400204a0 	.word	0x400204a0
 80014ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1c8      	bne.n	8001490 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4b83      	ldr	r3, [pc, #524]	@ (8001718 <HAL_DMA_Init+0x420>)
 800150a:	4013      	ands	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001516:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	2b04      	cmp	r3, #4
 8001542:	d107      	bne.n	8001554 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	4313      	orrs	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4313      	orrs	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b28      	cmp	r3, #40	@ 0x28
 800155a:	d903      	bls.n	8001564 <HAL_DMA_Init+0x26c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b2e      	cmp	r3, #46	@ 0x2e
 8001562:	d91f      	bls.n	80015a4 <HAL_DMA_Init+0x2ac>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b3e      	cmp	r3, #62	@ 0x3e
 800156a:	d903      	bls.n	8001574 <HAL_DMA_Init+0x27c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b42      	cmp	r3, #66	@ 0x42
 8001572:	d917      	bls.n	80015a4 <HAL_DMA_Init+0x2ac>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b46      	cmp	r3, #70	@ 0x46
 800157a:	d903      	bls.n	8001584 <HAL_DMA_Init+0x28c>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b48      	cmp	r3, #72	@ 0x48
 8001582:	d90f      	bls.n	80015a4 <HAL_DMA_Init+0x2ac>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b4e      	cmp	r3, #78	@ 0x4e
 800158a:	d903      	bls.n	8001594 <HAL_DMA_Init+0x29c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b52      	cmp	r3, #82	@ 0x52
 8001592:	d907      	bls.n	80015a4 <HAL_DMA_Init+0x2ac>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b73      	cmp	r3, #115	@ 0x73
 800159a:	d905      	bls.n	80015a8 <HAL_DMA_Init+0x2b0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b77      	cmp	r3, #119	@ 0x77
 80015a2:	d801      	bhi.n	80015a8 <HAL_DMA_Init+0x2b0>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_DMA_Init+0x2b2>
 80015a8:	2300      	movs	r3, #0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015b4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f023 0307 	bic.w	r3, r3, #7
 80015cc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d117      	bne.n	8001610 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00e      	beq.n	8001610 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f002 fb2e 	bl	8003c54 <DMA_CheckFifoParam>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2240      	movs	r2, #64	@ 0x40
 8001602:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e192      	b.n	8001936 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f002 fa69 	bl	8003af0 <DMA_CalcBaseAndBitshift>
 800161e:	4603      	mov	r3, r0
 8001620:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	223f      	movs	r2, #63	@ 0x3f
 800162c:	409a      	lsls	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	e0c8      	b.n	80017c6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a38      	ldr	r2, [pc, #224]	@ (800171c <HAL_DMA_Init+0x424>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d022      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a37      	ldr	r2, [pc, #220]	@ (8001720 <HAL_DMA_Init+0x428>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d01d      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a35      	ldr	r2, [pc, #212]	@ (8001724 <HAL_DMA_Init+0x42c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d018      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a34      	ldr	r2, [pc, #208]	@ (8001728 <HAL_DMA_Init+0x430>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_DMA_Init+0x434>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00e      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a31      	ldr	r2, [pc, #196]	@ (8001730 <HAL_DMA_Init+0x438>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <HAL_DMA_Init+0x43c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d004      	beq.n	8001684 <HAL_DMA_Init+0x38c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a2e      	ldr	r2, [pc, #184]	@ (8001738 <HAL_DMA_Init+0x440>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Init+0x390>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_DMA_Init+0x392>
 8001688:	2300      	movs	r3, #0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8092 	beq.w	80017b4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a21      	ldr	r2, [pc, #132]	@ (800171c <HAL_DMA_Init+0x424>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d021      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a20      	ldr	r2, [pc, #128]	@ (8001720 <HAL_DMA_Init+0x428>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d01c      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <HAL_DMA_Init+0x42c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d017      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001728 <HAL_DMA_Init+0x430>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d012      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <HAL_DMA_Init+0x434>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001730 <HAL_DMA_Init+0x438>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <HAL_DMA_Init+0x43c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d003      	beq.n	80016de <HAL_DMA_Init+0x3e6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_DMA_Init+0x440>)
 80016dc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_DMA_Init+0x444>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b40      	cmp	r3, #64	@ 0x40
 8001704:	d01c      	beq.n	8001740 <HAL_DMA_Init+0x448>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b80      	cmp	r3, #128	@ 0x80
 800170c:	d102      	bne.n	8001714 <HAL_DMA_Init+0x41c>
 800170e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001712:	e016      	b.n	8001742 <HAL_DMA_Init+0x44a>
 8001714:	2300      	movs	r3, #0
 8001716:	e014      	b.n	8001742 <HAL_DMA_Init+0x44a>
 8001718:	fe10803f 	.word	0xfe10803f
 800171c:	58025408 	.word	0x58025408
 8001720:	5802541c 	.word	0x5802541c
 8001724:	58025430 	.word	0x58025430
 8001728:	58025444 	.word	0x58025444
 800172c:	58025458 	.word	0x58025458
 8001730:	5802546c 	.word	0x5802546c
 8001734:	58025480 	.word	0x58025480
 8001738:	58025494 	.word	0x58025494
 800173c:	fffe000f 	.word	0xfffe000f
 8001740:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68d2      	ldr	r2, [r2, #12]
 8001746:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001748:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001750:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001758:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001770:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b6e      	ldr	r3, [pc, #440]	@ (8001940 <HAL_DMA_Init+0x648>)
 8001788:	4413      	add	r3, r2
 800178a:	4a6e      	ldr	r2, [pc, #440]	@ (8001944 <HAL_DMA_Init+0x64c>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	009a      	lsls	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f002 f9a9 	bl	8003af0 <DMA_CalcBaseAndBitshift>
 800179e:	4603      	mov	r3, r0
 80017a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	2201      	movs	r2, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	e008      	b.n	80017c6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	@ 0x40
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0b7      	b.n	8001936 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001948 <HAL_DMA_Init+0x650>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d072      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a5d      	ldr	r2, [pc, #372]	@ (800194c <HAL_DMA_Init+0x654>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d06d      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5c      	ldr	r2, [pc, #368]	@ (8001950 <HAL_DMA_Init+0x658>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d068      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001954 <HAL_DMA_Init+0x65c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d063      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a59      	ldr	r2, [pc, #356]	@ (8001958 <HAL_DMA_Init+0x660>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a57      	ldr	r2, [pc, #348]	@ (800195c <HAL_DMA_Init+0x664>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d059      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a56      	ldr	r2, [pc, #344]	@ (8001960 <HAL_DMA_Init+0x668>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d054      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a54      	ldr	r2, [pc, #336]	@ (8001964 <HAL_DMA_Init+0x66c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d04f      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a53      	ldr	r2, [pc, #332]	@ (8001968 <HAL_DMA_Init+0x670>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04a      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a51      	ldr	r2, [pc, #324]	@ (800196c <HAL_DMA_Init+0x674>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d045      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a50      	ldr	r2, [pc, #320]	@ (8001970 <HAL_DMA_Init+0x678>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d040      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a4e      	ldr	r2, [pc, #312]	@ (8001974 <HAL_DMA_Init+0x67c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d03b      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <HAL_DMA_Init+0x680>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d036      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a4b      	ldr	r2, [pc, #300]	@ (800197c <HAL_DMA_Init+0x684>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d031      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a4a      	ldr	r2, [pc, #296]	@ (8001980 <HAL_DMA_Init+0x688>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d02c      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a48      	ldr	r2, [pc, #288]	@ (8001984 <HAL_DMA_Init+0x68c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d027      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a47      	ldr	r2, [pc, #284]	@ (8001988 <HAL_DMA_Init+0x690>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a45      	ldr	r2, [pc, #276]	@ (800198c <HAL_DMA_Init+0x694>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01d      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a44      	ldr	r2, [pc, #272]	@ (8001990 <HAL_DMA_Init+0x698>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d018      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a42      	ldr	r2, [pc, #264]	@ (8001994 <HAL_DMA_Init+0x69c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a41      	ldr	r2, [pc, #260]	@ (8001998 <HAL_DMA_Init+0x6a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00e      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3f      	ldr	r2, [pc, #252]	@ (800199c <HAL_DMA_Init+0x6a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d009      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a3e      	ldr	r2, [pc, #248]	@ (80019a0 <HAL_DMA_Init+0x6a8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d004      	beq.n	80018b6 <HAL_DMA_Init+0x5be>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HAL_DMA_Init+0x6ac>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_DMA_Init+0x5c2>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_DMA_Init+0x5c4>
 80018ba:	2300      	movs	r3, #0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d032      	beq.n	8001926 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f002 fa43 	bl	8003d4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b80      	cmp	r3, #128	@ 0x80
 80018cc:	d102      	bne.n	80018d4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80018e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <HAL_DMA_Init+0x61c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d80c      	bhi.n	8001914 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f002 fac0 	bl	8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e008      	b.n	8001926 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	a7fdabf8 	.word	0xa7fdabf8
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	40020010 	.word	0x40020010
 800194c:	40020028 	.word	0x40020028
 8001950:	40020040 	.word	0x40020040
 8001954:	40020058 	.word	0x40020058
 8001958:	40020070 	.word	0x40020070
 800195c:	40020088 	.word	0x40020088
 8001960:	400200a0 	.word	0x400200a0
 8001964:	400200b8 	.word	0x400200b8
 8001968:	40020410 	.word	0x40020410
 800196c:	40020428 	.word	0x40020428
 8001970:	40020440 	.word	0x40020440
 8001974:	40020458 	.word	0x40020458
 8001978:	40020470 	.word	0x40020470
 800197c:	40020488 	.word	0x40020488
 8001980:	400204a0 	.word	0x400204a0
 8001984:	400204b8 	.word	0x400204b8
 8001988:	58025408 	.word	0x58025408
 800198c:	5802541c 	.word	0x5802541c
 8001990:	58025430 	.word	0x58025430
 8001994:	58025444 	.word	0x58025444
 8001998:	58025458 	.word	0x58025458
 800199c:	5802546c 	.word	0x5802546c
 80019a0:	58025480 	.word	0x58025480
 80019a4:	58025494 	.word	0x58025494

080019a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e226      	b.n	8001e12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_DMA_Start_IT+0x2a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e21f      	b.n	8001e12 <HAL_DMA_Start_IT+0x46a>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f040 820a 	bne.w	8001dfc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a68      	ldr	r2, [pc, #416]	@ (8001b9c <HAL_DMA_Start_IT+0x1f4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d04a      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a66      	ldr	r2, [pc, #408]	@ (8001ba0 <HAL_DMA_Start_IT+0x1f8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d045      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ba4 <HAL_DMA_Start_IT+0x1fc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d040      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a63      	ldr	r2, [pc, #396]	@ (8001ba8 <HAL_DMA_Start_IT+0x200>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d03b      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a62      	ldr	r2, [pc, #392]	@ (8001bac <HAL_DMA_Start_IT+0x204>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d036      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_DMA_Start_IT+0x208>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb4 <HAL_DMA_Start_IT+0x20c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d02c      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb8 <HAL_DMA_Start_IT+0x210>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d027      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bbc <HAL_DMA_Start_IT+0x214>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d022      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc0 <HAL_DMA_Start_IT+0x218>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d01d      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a59      	ldr	r2, [pc, #356]	@ (8001bc4 <HAL_DMA_Start_IT+0x21c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d018      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a57      	ldr	r2, [pc, #348]	@ (8001bc8 <HAL_DMA_Start_IT+0x220>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a56      	ldr	r2, [pc, #344]	@ (8001bcc <HAL_DMA_Start_IT+0x224>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a54      	ldr	r2, [pc, #336]	@ (8001bd0 <HAL_DMA_Start_IT+0x228>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d009      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a53      	ldr	r2, [pc, #332]	@ (8001bd4 <HAL_DMA_Start_IT+0x22c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d004      	beq.n	8001a96 <HAL_DMA_Start_IT+0xee>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a51      	ldr	r2, [pc, #324]	@ (8001bd8 <HAL_DMA_Start_IT+0x230>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d108      	bne.n	8001aa8 <HAL_DMA_Start_IT+0x100>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_DMA_Start_IT+0x110>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f001 fe6a 	bl	8003798 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a34      	ldr	r2, [pc, #208]	@ (8001b9c <HAL_DMA_Start_IT+0x1f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d04a      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a33      	ldr	r2, [pc, #204]	@ (8001ba0 <HAL_DMA_Start_IT+0x1f8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d045      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a31      	ldr	r2, [pc, #196]	@ (8001ba4 <HAL_DMA_Start_IT+0x1fc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d040      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_DMA_Start_IT+0x200>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d03b      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2e      	ldr	r2, [pc, #184]	@ (8001bac <HAL_DMA_Start_IT+0x204>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d036      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb0 <HAL_DMA_Start_IT+0x208>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d031      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb4 <HAL_DMA_Start_IT+0x20c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d02c      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_DMA_Start_IT+0x210>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d027      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a28      	ldr	r2, [pc, #160]	@ (8001bbc <HAL_DMA_Start_IT+0x214>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d022      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a27      	ldr	r2, [pc, #156]	@ (8001bc0 <HAL_DMA_Start_IT+0x218>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d01d      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a25      	ldr	r2, [pc, #148]	@ (8001bc4 <HAL_DMA_Start_IT+0x21c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d018      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <HAL_DMA_Start_IT+0x220>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d013      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_DMA_Start_IT+0x224>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00e      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <HAL_DMA_Start_IT+0x228>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd4 <HAL_DMA_Start_IT+0x22c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_DMA_Start_IT+0x1bc>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_DMA_Start_IT+0x230>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_DMA_Start_IT+0x1c0>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_DMA_Start_IT+0x1c2>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 021e 	bic.w	r2, r3, #30
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0216 	orr.w	r2, r2, #22
 8001b80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03e      	beq.n	8001c08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0208 	orr.w	r2, r2, #8
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e035      	b.n	8001c08 <HAL_DMA_Start_IT+0x260>
 8001b9c:	40020010 	.word	0x40020010
 8001ba0:	40020028 	.word	0x40020028
 8001ba4:	40020040 	.word	0x40020040
 8001ba8:	40020058 	.word	0x40020058
 8001bac:	40020070 	.word	0x40020070
 8001bb0:	40020088 	.word	0x40020088
 8001bb4:	400200a0 	.word	0x400200a0
 8001bb8:	400200b8 	.word	0x400200b8
 8001bbc:	40020410 	.word	0x40020410
 8001bc0:	40020428 	.word	0x40020428
 8001bc4:	40020440 	.word	0x40020440
 8001bc8:	40020458 	.word	0x40020458
 8001bcc:	40020470 	.word	0x40020470
 8001bd0:	40020488 	.word	0x40020488
 8001bd4:	400204a0 	.word	0x400204a0
 8001bd8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 020e 	bic.w	r2, r3, #14
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 020a 	orr.w	r2, r2, #10
 8001bee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0204 	orr.w	r2, r2, #4
 8001c06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a83      	ldr	r2, [pc, #524]	@ (8001e1c <HAL_DMA_Start_IT+0x474>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d072      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a82      	ldr	r2, [pc, #520]	@ (8001e20 <HAL_DMA_Start_IT+0x478>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d06d      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a80      	ldr	r2, [pc, #512]	@ (8001e24 <HAL_DMA_Start_IT+0x47c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d068      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7f      	ldr	r2, [pc, #508]	@ (8001e28 <HAL_DMA_Start_IT+0x480>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d063      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a7d      	ldr	r2, [pc, #500]	@ (8001e2c <HAL_DMA_Start_IT+0x484>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d05e      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e30 <HAL_DMA_Start_IT+0x488>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d059      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7a      	ldr	r2, [pc, #488]	@ (8001e34 <HAL_DMA_Start_IT+0x48c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d054      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a79      	ldr	r2, [pc, #484]	@ (8001e38 <HAL_DMA_Start_IT+0x490>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04f      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a77      	ldr	r2, [pc, #476]	@ (8001e3c <HAL_DMA_Start_IT+0x494>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04a      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a76      	ldr	r2, [pc, #472]	@ (8001e40 <HAL_DMA_Start_IT+0x498>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d045      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a74      	ldr	r2, [pc, #464]	@ (8001e44 <HAL_DMA_Start_IT+0x49c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d040      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a73      	ldr	r2, [pc, #460]	@ (8001e48 <HAL_DMA_Start_IT+0x4a0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d03b      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a71      	ldr	r2, [pc, #452]	@ (8001e4c <HAL_DMA_Start_IT+0x4a4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d036      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a70      	ldr	r2, [pc, #448]	@ (8001e50 <HAL_DMA_Start_IT+0x4a8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d031      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_DMA_Start_IT+0x4ac>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02c      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8001e58 <HAL_DMA_Start_IT+0x4b0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d027      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6b      	ldr	r2, [pc, #428]	@ (8001e5c <HAL_DMA_Start_IT+0x4b4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8001e60 <HAL_DMA_Start_IT+0x4b8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d01d      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	@ (8001e64 <HAL_DMA_Start_IT+0x4bc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a67      	ldr	r2, [pc, #412]	@ (8001e68 <HAL_DMA_Start_IT+0x4c0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a65      	ldr	r2, [pc, #404]	@ (8001e6c <HAL_DMA_Start_IT+0x4c4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a64      	ldr	r2, [pc, #400]	@ (8001e70 <HAL_DMA_Start_IT+0x4c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a62      	ldr	r2, [pc, #392]	@ (8001e74 <HAL_DMA_Start_IT+0x4cc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x350>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a61      	ldr	r2, [pc, #388]	@ (8001e78 <HAL_DMA_Start_IT+0x4d0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Start_IT+0x354>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_DMA_Start_IT+0x356>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01a      	beq.n	8001d38 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d1e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <HAL_DMA_Start_IT+0x474>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04a      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a36      	ldr	r2, [pc, #216]	@ (8001e20 <HAL_DMA_Start_IT+0x478>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d045      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	@ (8001e24 <HAL_DMA_Start_IT+0x47c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d040      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a33      	ldr	r2, [pc, #204]	@ (8001e28 <HAL_DMA_Start_IT+0x480>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d03b      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a31      	ldr	r2, [pc, #196]	@ (8001e2c <HAL_DMA_Start_IT+0x484>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d036      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a30      	ldr	r2, [pc, #192]	@ (8001e30 <HAL_DMA_Start_IT+0x488>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d031      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2e      	ldr	r2, [pc, #184]	@ (8001e34 <HAL_DMA_Start_IT+0x48c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02c      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_DMA_Start_IT+0x490>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d027      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <HAL_DMA_Start_IT+0x494>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d022      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_DMA_Start_IT+0x498>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <HAL_DMA_Start_IT+0x49c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d018      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_DMA_Start_IT+0x4a0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <HAL_DMA_Start_IT+0x4a4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_DMA_Start_IT+0x4a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_DMA_Start_IT+0x4ac>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x430>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_DMA_Start_IT+0x4b0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <HAL_DMA_Start_IT+0x442>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e012      	b.n	8001e10 <HAL_DMA_Start_IT+0x468>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e009      	b.n	8001e10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40020010 	.word	0x40020010
 8001e20:	40020028 	.word	0x40020028
 8001e24:	40020040 	.word	0x40020040
 8001e28:	40020058 	.word	0x40020058
 8001e2c:	40020070 	.word	0x40020070
 8001e30:	40020088 	.word	0x40020088
 8001e34:	400200a0 	.word	0x400200a0
 8001e38:	400200b8 	.word	0x400200b8
 8001e3c:	40020410 	.word	0x40020410
 8001e40:	40020428 	.word	0x40020428
 8001e44:	40020440 	.word	0x40020440
 8001e48:	40020458 	.word	0x40020458
 8001e4c:	40020470 	.word	0x40020470
 8001e50:	40020488 	.word	0x40020488
 8001e54:	400204a0 	.word	0x400204a0
 8001e58:	400204b8 	.word	0x400204b8
 8001e5c:	58025408 	.word	0x58025408
 8001e60:	5802541c 	.word	0x5802541c
 8001e64:	58025430 	.word	0x58025430
 8001e68:	58025444 	.word	0x58025444
 8001e6c:	58025458 	.word	0x58025458
 8001e70:	5802546c 	.word	0x5802546c
 8001e74:	58025480 	.word	0x58025480
 8001e78:	58025494 	.word	0x58025494

08001e7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff f908 	bl	8001098 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e2dc      	b.n	800244e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2280      	movs	r2, #128	@ 0x80
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e2cd      	b.n	800244e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a76      	ldr	r2, [pc, #472]	@ (8002090 <HAL_DMA_Abort+0x214>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a74      	ldr	r2, [pc, #464]	@ (8002094 <HAL_DMA_Abort+0x218>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a73      	ldr	r2, [pc, #460]	@ (8002098 <HAL_DMA_Abort+0x21c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a71      	ldr	r2, [pc, #452]	@ (800209c <HAL_DMA_Abort+0x220>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a70      	ldr	r2, [pc, #448]	@ (80020a0 <HAL_DMA_Abort+0x224>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_DMA_Abort+0x228>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6d      	ldr	r2, [pc, #436]	@ (80020a8 <HAL_DMA_Abort+0x22c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6b      	ldr	r2, [pc, #428]	@ (80020ac <HAL_DMA_Abort+0x230>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6a      	ldr	r2, [pc, #424]	@ (80020b0 <HAL_DMA_Abort+0x234>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a68      	ldr	r2, [pc, #416]	@ (80020b4 <HAL_DMA_Abort+0x238>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a67      	ldr	r2, [pc, #412]	@ (80020b8 <HAL_DMA_Abort+0x23c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a65      	ldr	r2, [pc, #404]	@ (80020bc <HAL_DMA_Abort+0x240>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a64      	ldr	r2, [pc, #400]	@ (80020c0 <HAL_DMA_Abort+0x244>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a62      	ldr	r2, [pc, #392]	@ (80020c4 <HAL_DMA_Abort+0x248>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a61      	ldr	r2, [pc, #388]	@ (80020c8 <HAL_DMA_Abort+0x24c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Abort+0xd6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5f      	ldr	r2, [pc, #380]	@ (80020cc <HAL_DMA_Abort+0x250>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Abort+0xda>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_Abort+0xdc>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 021e 	bic.w	r2, r2, #30
 8001f6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e00a      	b.n	8001f9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 020e 	bic.w	r2, r2, #14
 8001f92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002090 <HAL_DMA_Abort+0x214>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d072      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8002094 <HAL_DMA_Abort+0x218>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d06d      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a39      	ldr	r2, [pc, #228]	@ (8002098 <HAL_DMA_Abort+0x21c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d068      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a37      	ldr	r2, [pc, #220]	@ (800209c <HAL_DMA_Abort+0x220>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d063      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <HAL_DMA_Abort+0x224>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d05e      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_DMA_Abort+0x228>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d059      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a33      	ldr	r2, [pc, #204]	@ (80020a8 <HAL_DMA_Abort+0x22c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d054      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a31      	ldr	r2, [pc, #196]	@ (80020ac <HAL_DMA_Abort+0x230>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04f      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a30      	ldr	r2, [pc, #192]	@ (80020b0 <HAL_DMA_Abort+0x234>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04a      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_DMA_Abort+0x238>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d045      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2d      	ldr	r2, [pc, #180]	@ (80020b8 <HAL_DMA_Abort+0x23c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d040      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2b      	ldr	r2, [pc, #172]	@ (80020bc <HAL_DMA_Abort+0x240>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d03b      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2a      	ldr	r2, [pc, #168]	@ (80020c0 <HAL_DMA_Abort+0x244>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d036      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <HAL_DMA_Abort+0x248>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a27      	ldr	r2, [pc, #156]	@ (80020c8 <HAL_DMA_Abort+0x24c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d02c      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <HAL_DMA_Abort+0x250>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d027      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a24      	ldr	r2, [pc, #144]	@ (80020d0 <HAL_DMA_Abort+0x254>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a22      	ldr	r2, [pc, #136]	@ (80020d4 <HAL_DMA_Abort+0x258>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <HAL_DMA_Abort+0x25c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <HAL_DMA_Abort+0x260>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <HAL_DMA_Abort+0x264>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <HAL_DMA_Abort+0x268>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <HAL_DMA_Abort+0x26c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Abort+0x20e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	@ (80020ec <HAL_DMA_Abort+0x270>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d132      	bne.n	80020f0 <HAL_DMA_Abort+0x274>
 800208a:	2301      	movs	r3, #1
 800208c:	e031      	b.n	80020f2 <HAL_DMA_Abort+0x276>
 800208e:	bf00      	nop
 8002090:	40020010 	.word	0x40020010
 8002094:	40020028 	.word	0x40020028
 8002098:	40020040 	.word	0x40020040
 800209c:	40020058 	.word	0x40020058
 80020a0:	40020070 	.word	0x40020070
 80020a4:	40020088 	.word	0x40020088
 80020a8:	400200a0 	.word	0x400200a0
 80020ac:	400200b8 	.word	0x400200b8
 80020b0:	40020410 	.word	0x40020410
 80020b4:	40020428 	.word	0x40020428
 80020b8:	40020440 	.word	0x40020440
 80020bc:	40020458 	.word	0x40020458
 80020c0:	40020470 	.word	0x40020470
 80020c4:	40020488 	.word	0x40020488
 80020c8:	400204a0 	.word	0x400204a0
 80020cc:	400204b8 	.word	0x400204b8
 80020d0:	58025408 	.word	0x58025408
 80020d4:	5802541c 	.word	0x5802541c
 80020d8:	58025430 	.word	0x58025430
 80020dc:	58025444 	.word	0x58025444
 80020e0:	58025458 	.word	0x58025458
 80020e4:	5802546c 	.word	0x5802546c
 80020e8:	58025480 	.word	0x58025480
 80020ec:	58025494 	.word	0x58025494
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6d      	ldr	r2, [pc, #436]	@ (80022c0 <HAL_DMA_Abort+0x444>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6b      	ldr	r2, [pc, #428]	@ (80022c4 <HAL_DMA_Abort+0x448>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6a      	ldr	r2, [pc, #424]	@ (80022c8 <HAL_DMA_Abort+0x44c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a68      	ldr	r2, [pc, #416]	@ (80022cc <HAL_DMA_Abort+0x450>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a67      	ldr	r2, [pc, #412]	@ (80022d0 <HAL_DMA_Abort+0x454>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a65      	ldr	r2, [pc, #404]	@ (80022d4 <HAL_DMA_Abort+0x458>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a64      	ldr	r2, [pc, #400]	@ (80022d8 <HAL_DMA_Abort+0x45c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a62      	ldr	r2, [pc, #392]	@ (80022dc <HAL_DMA_Abort+0x460>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a61      	ldr	r2, [pc, #388]	@ (80022e0 <HAL_DMA_Abort+0x464>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5f      	ldr	r2, [pc, #380]	@ (80022e4 <HAL_DMA_Abort+0x468>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5e      	ldr	r2, [pc, #376]	@ (80022e8 <HAL_DMA_Abort+0x46c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5c      	ldr	r2, [pc, #368]	@ (80022ec <HAL_DMA_Abort+0x470>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5b      	ldr	r2, [pc, #364]	@ (80022f0 <HAL_DMA_Abort+0x474>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a59      	ldr	r2, [pc, #356]	@ (80022f4 <HAL_DMA_Abort+0x478>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a58      	ldr	r2, [pc, #352]	@ (80022f8 <HAL_DMA_Abort+0x47c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_Abort+0x32a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a56      	ldr	r2, [pc, #344]	@ (80022fc <HAL_DMA_Abort+0x480>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <HAL_DMA_Abort+0x33c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_DMA_Abort+0x34c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021c8:	e013      	b.n	80021f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ca:	f7fe ff65 	bl	8001098 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d90c      	bls.n	80021f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12d      	b.n	800244e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e5      	bne.n	80021ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2f      	ldr	r2, [pc, #188]	@ (80022c0 <HAL_DMA_Abort+0x444>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04a      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <HAL_DMA_Abort+0x448>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d045      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2c      	ldr	r2, [pc, #176]	@ (80022c8 <HAL_DMA_Abort+0x44c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d040      	beq.n	800229e <HAL_DMA_Abort+0x422>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <HAL_DMA_Abort+0x450>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d03b      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a29      	ldr	r2, [pc, #164]	@ (80022d0 <HAL_DMA_Abort+0x454>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_DMA_Abort+0x458>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_DMA_Abort+0x422>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a26      	ldr	r2, [pc, #152]	@ (80022d8 <HAL_DMA_Abort+0x45c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d02c      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a24      	ldr	r2, [pc, #144]	@ (80022dc <HAL_DMA_Abort+0x460>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d027      	beq.n	800229e <HAL_DMA_Abort+0x422>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_DMA_Abort+0x464>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <HAL_DMA_Abort+0x468>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a20      	ldr	r2, [pc, #128]	@ (80022e8 <HAL_DMA_Abort+0x46c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d018      	beq.n	800229e <HAL_DMA_Abort+0x422>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <HAL_DMA_Abort+0x470>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_DMA_Abort+0x474>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_DMA_Abort+0x478>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_DMA_Abort+0x422>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <HAL_DMA_Abort+0x47c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_DMA_Abort+0x422>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_DMA_Abort+0x480>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_Abort+0x426>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_Abort+0x428>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02b      	beq.n	8002300 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	223f      	movs	r2, #63	@ 0x3f
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	e02a      	b.n	8002316 <HAL_DMA_Abort+0x49a>
 80022c0:	40020010 	.word	0x40020010
 80022c4:	40020028 	.word	0x40020028
 80022c8:	40020040 	.word	0x40020040
 80022cc:	40020058 	.word	0x40020058
 80022d0:	40020070 	.word	0x40020070
 80022d4:	40020088 	.word	0x40020088
 80022d8:	400200a0 	.word	0x400200a0
 80022dc:	400200b8 	.word	0x400200b8
 80022e0:	40020410 	.word	0x40020410
 80022e4:	40020428 	.word	0x40020428
 80022e8:	40020440 	.word	0x40020440
 80022ec:	40020458 	.word	0x40020458
 80022f0:	40020470 	.word	0x40020470
 80022f4:	40020488 	.word	0x40020488
 80022f8:	400204a0 	.word	0x400204a0
 80022fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2201      	movs	r2, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a4f      	ldr	r2, [pc, #316]	@ (8002458 <HAL_DMA_Abort+0x5dc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d072      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_DMA_Abort+0x5e0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d06d      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4c      	ldr	r2, [pc, #304]	@ (8002460 <HAL_DMA_Abort+0x5e4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d068      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4a      	ldr	r2, [pc, #296]	@ (8002464 <HAL_DMA_Abort+0x5e8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d063      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a49      	ldr	r2, [pc, #292]	@ (8002468 <HAL_DMA_Abort+0x5ec>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d05e      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a47      	ldr	r2, [pc, #284]	@ (800246c <HAL_DMA_Abort+0x5f0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d059      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a46      	ldr	r2, [pc, #280]	@ (8002470 <HAL_DMA_Abort+0x5f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d054      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a44      	ldr	r2, [pc, #272]	@ (8002474 <HAL_DMA_Abort+0x5f8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04f      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a43      	ldr	r2, [pc, #268]	@ (8002478 <HAL_DMA_Abort+0x5fc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04a      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a41      	ldr	r2, [pc, #260]	@ (800247c <HAL_DMA_Abort+0x600>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d045      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a40      	ldr	r2, [pc, #256]	@ (8002480 <HAL_DMA_Abort+0x604>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d040      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3e      	ldr	r2, [pc, #248]	@ (8002484 <HAL_DMA_Abort+0x608>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03b      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a3d      	ldr	r2, [pc, #244]	@ (8002488 <HAL_DMA_Abort+0x60c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3b      	ldr	r2, [pc, #236]	@ (800248c <HAL_DMA_Abort+0x610>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002490 <HAL_DMA_Abort+0x614>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02c      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <HAL_DMA_Abort+0x618>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d027      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a37      	ldr	r2, [pc, #220]	@ (8002498 <HAL_DMA_Abort+0x61c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a35      	ldr	r2, [pc, #212]	@ (800249c <HAL_DMA_Abort+0x620>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a34      	ldr	r2, [pc, #208]	@ (80024a0 <HAL_DMA_Abort+0x624>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a32      	ldr	r2, [pc, #200]	@ (80024a4 <HAL_DMA_Abort+0x628>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a31      	ldr	r2, [pc, #196]	@ (80024a8 <HAL_DMA_Abort+0x62c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2f      	ldr	r2, [pc, #188]	@ (80024ac <HAL_DMA_Abort+0x630>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_DMA_Abort+0x634>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Abort+0x58a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2c      	ldr	r2, [pc, #176]	@ (80024b4 <HAL_DMA_Abort+0x638>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_DMA_Abort+0x58e>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_DMA_Abort+0x590>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002418:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00c      	beq.n	800243c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002430:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800243a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
 8002498:	58025408 	.word	0x58025408
 800249c:	5802541c 	.word	0x5802541c
 80024a0:	58025430 	.word	0x58025430
 80024a4:	58025444 	.word	0x58025444
 80024a8:	58025458 	.word	0x58025458
 80024ac:	5802546c 	.word	0x5802546c
 80024b0:	58025480 	.word	0x58025480
 80024b4:	58025494 	.word	0x58025494

080024b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e237      	b.n	800293a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e22c      	b.n	800293a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002658 <HAL_DMA_Abort_IT+0x1a0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_DMA_Abort_IT+0x1a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a59      	ldr	r2, [pc, #356]	@ (8002660 <HAL_DMA_Abort_IT+0x1a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <HAL_DMA_Abort_IT+0x1ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <HAL_DMA_Abort_IT+0x1b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a55      	ldr	r2, [pc, #340]	@ (800266c <HAL_DMA_Abort_IT+0x1b4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a53      	ldr	r2, [pc, #332]	@ (8002670 <HAL_DMA_Abort_IT+0x1b8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a52      	ldr	r2, [pc, #328]	@ (8002674 <HAL_DMA_Abort_IT+0x1bc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a50      	ldr	r2, [pc, #320]	@ (8002678 <HAL_DMA_Abort_IT+0x1c0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4f      	ldr	r2, [pc, #316]	@ (800267c <HAL_DMA_Abort_IT+0x1c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4d      	ldr	r2, [pc, #308]	@ (8002680 <HAL_DMA_Abort_IT+0x1c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a4c      	ldr	r2, [pc, #304]	@ (8002684 <HAL_DMA_Abort_IT+0x1cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <HAL_DMA_Abort_IT+0x1d0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a49      	ldr	r2, [pc, #292]	@ (800268c <HAL_DMA_Abort_IT+0x1d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a47      	ldr	r2, [pc, #284]	@ (8002690 <HAL_DMA_Abort_IT+0x1d8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Abort_IT+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a46      	ldr	r2, [pc, #280]	@ (8002694 <HAL_DMA_Abort_IT+0x1dc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Abort_IT+0xcc>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_DMA_Abort_IT+0xce>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8086 	beq.w	8002698 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2204      	movs	r2, #4
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <HAL_DMA_Abort_IT+0x1a0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d04a      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2e      	ldr	r2, [pc, #184]	@ (800265c <HAL_DMA_Abort_IT+0x1a4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d045      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002660 <HAL_DMA_Abort_IT+0x1a8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d040      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002664 <HAL_DMA_Abort_IT+0x1ac>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d03b      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a29      	ldr	r2, [pc, #164]	@ (8002668 <HAL_DMA_Abort_IT+0x1b0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d036      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a28      	ldr	r2, [pc, #160]	@ (800266c <HAL_DMA_Abort_IT+0x1b4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d031      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <HAL_DMA_Abort_IT+0x1b8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02c      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a25      	ldr	r2, [pc, #148]	@ (8002674 <HAL_DMA_Abort_IT+0x1bc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d027      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <HAL_DMA_Abort_IT+0x1c0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d022      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a22      	ldr	r2, [pc, #136]	@ (800267c <HAL_DMA_Abort_IT+0x1c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d01d      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a20      	ldr	r2, [pc, #128]	@ (8002680 <HAL_DMA_Abort_IT+0x1c8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d018      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <HAL_DMA_Abort_IT+0x1cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_DMA_Abort_IT+0x1d0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00e      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	@ (800268c <HAL_DMA_Abort_IT+0x1d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <HAL_DMA_Abort_IT+0x1d8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_Abort_IT+0x17c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_DMA_Abort_IT+0x1dc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d108      	bne.n	8002646 <HAL_DMA_Abort_IT+0x18e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e178      	b.n	8002938 <HAL_DMA_Abort_IT+0x480>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e16f      	b.n	8002938 <HAL_DMA_Abort_IT+0x480>
 8002658:	40020010 	.word	0x40020010
 800265c:	40020028 	.word	0x40020028
 8002660:	40020040 	.word	0x40020040
 8002664:	40020058 	.word	0x40020058
 8002668:	40020070 	.word	0x40020070
 800266c:	40020088 	.word	0x40020088
 8002670:	400200a0 	.word	0x400200a0
 8002674:	400200b8 	.word	0x400200b8
 8002678:	40020410 	.word	0x40020410
 800267c:	40020428 	.word	0x40020428
 8002680:	40020440 	.word	0x40020440
 8002684:	40020458 	.word	0x40020458
 8002688:	40020470 	.word	0x40020470
 800268c:	40020488 	.word	0x40020488
 8002690:	400204a0 	.word	0x400204a0
 8002694:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020e 	bic.w	r2, r2, #14
 80026a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002860 <HAL_DMA_Abort_IT+0x3a8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d04a      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002864 <HAL_DMA_Abort_IT+0x3ac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d045      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a69      	ldr	r2, [pc, #420]	@ (8002868 <HAL_DMA_Abort_IT+0x3b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d040      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a68      	ldr	r2, [pc, #416]	@ (800286c <HAL_DMA_Abort_IT+0x3b4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d03b      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a66      	ldr	r2, [pc, #408]	@ (8002870 <HAL_DMA_Abort_IT+0x3b8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_DMA_Abort_IT+0x3bc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a63      	ldr	r2, [pc, #396]	@ (8002878 <HAL_DMA_Abort_IT+0x3c0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02c      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a62      	ldr	r2, [pc, #392]	@ (800287c <HAL_DMA_Abort_IT+0x3c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d027      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a60      	ldr	r2, [pc, #384]	@ (8002880 <HAL_DMA_Abort_IT+0x3c8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5f      	ldr	r2, [pc, #380]	@ (8002884 <HAL_DMA_Abort_IT+0x3cc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d01d      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5d      	ldr	r2, [pc, #372]	@ (8002888 <HAL_DMA_Abort_IT+0x3d0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5c      	ldr	r2, [pc, #368]	@ (800288c <HAL_DMA_Abort_IT+0x3d4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5a      	ldr	r2, [pc, #360]	@ (8002890 <HAL_DMA_Abort_IT+0x3d8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a59      	ldr	r2, [pc, #356]	@ (8002894 <HAL_DMA_Abort_IT+0x3dc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a57      	ldr	r2, [pc, #348]	@ (8002898 <HAL_DMA_Abort_IT+0x3e0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_Abort_IT+0x290>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a56      	ldr	r2, [pc, #344]	@ (800289c <HAL_DMA_Abort_IT+0x3e4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <HAL_DMA_Abort_IT+0x2a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e007      	b.n	800276a <HAL_DMA_Abort_IT+0x2b2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_DMA_Abort_IT+0x3a8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d072      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	@ (8002864 <HAL_DMA_Abort_IT+0x3ac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d06d      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a39      	ldr	r2, [pc, #228]	@ (8002868 <HAL_DMA_Abort_IT+0x3b0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d068      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a37      	ldr	r2, [pc, #220]	@ (800286c <HAL_DMA_Abort_IT+0x3b4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d063      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a36      	ldr	r2, [pc, #216]	@ (8002870 <HAL_DMA_Abort_IT+0x3b8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d05e      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a34      	ldr	r2, [pc, #208]	@ (8002874 <HAL_DMA_Abort_IT+0x3bc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d059      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <HAL_DMA_Abort_IT+0x3c0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d054      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_DMA_Abort_IT+0x3c4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d04f      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <HAL_DMA_Abort_IT+0x3c8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d04a      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002884 <HAL_DMA_Abort_IT+0x3cc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d045      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <HAL_DMA_Abort_IT+0x3d0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d040      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2b      	ldr	r2, [pc, #172]	@ (800288c <HAL_DMA_Abort_IT+0x3d4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d03b      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <HAL_DMA_Abort_IT+0x3d8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d036      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a28      	ldr	r2, [pc, #160]	@ (8002894 <HAL_DMA_Abort_IT+0x3dc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d031      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <HAL_DMA_Abort_IT+0x3e0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d02c      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a25      	ldr	r2, [pc, #148]	@ (800289c <HAL_DMA_Abort_IT+0x3e4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d027      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a24      	ldr	r2, [pc, #144]	@ (80028a0 <HAL_DMA_Abort_IT+0x3e8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <HAL_DMA_Abort_IT+0x3ec>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01d      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a21      	ldr	r2, [pc, #132]	@ (80028a8 <HAL_DMA_Abort_IT+0x3f0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_DMA_Abort_IT+0x3f4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <HAL_DMA_Abort_IT+0x3f8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_DMA_Abort_IT+0x3fc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1b      	ldr	r2, [pc, #108]	@ (80028b8 <HAL_DMA_Abort_IT+0x400>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_DMA_Abort_IT+0x3a2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a19      	ldr	r2, [pc, #100]	@ (80028bc <HAL_DMA_Abort_IT+0x404>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d132      	bne.n	80028c0 <HAL_DMA_Abort_IT+0x408>
 800285a:	2301      	movs	r3, #1
 800285c:	e031      	b.n	80028c2 <HAL_DMA_Abort_IT+0x40a>
 800285e:	bf00      	nop
 8002860:	40020010 	.word	0x40020010
 8002864:	40020028 	.word	0x40020028
 8002868:	40020040 	.word	0x40020040
 800286c:	40020058 	.word	0x40020058
 8002870:	40020070 	.word	0x40020070
 8002874:	40020088 	.word	0x40020088
 8002878:	400200a0 	.word	0x400200a0
 800287c:	400200b8 	.word	0x400200b8
 8002880:	40020410 	.word	0x40020410
 8002884:	40020428 	.word	0x40020428
 8002888:	40020440 	.word	0x40020440
 800288c:	40020458 	.word	0x40020458
 8002890:	40020470 	.word	0x40020470
 8002894:	40020488 	.word	0x40020488
 8002898:	400204a0 	.word	0x400204a0
 800289c:	400204b8 	.word	0x400204b8
 80028a0:	58025408 	.word	0x58025408
 80028a4:	5802541c 	.word	0x5802541c
 80028a8:	58025430 	.word	0x58025430
 80028ac:	58025444 	.word	0x58025444
 80028b0:	58025458 	.word	0x58025458
 80028b4:	5802546c 	.word	0x5802546c
 80028b8:	58025480 	.word	0x58025480
 80028bc:	58025494 	.word	0x58025494
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d028      	beq.n	8002918 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2201      	movs	r2, #1
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800290c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002916:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop

08002944 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002950:	4b67      	ldr	r3, [pc, #412]	@ (8002af0 <HAL_DMA_IRQHandler+0x1ac>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a67      	ldr	r2, [pc, #412]	@ (8002af4 <HAL_DMA_IRQHandler+0x1b0>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5f      	ldr	r2, [pc, #380]	@ (8002af8 <HAL_DMA_IRQHandler+0x1b4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <HAL_DMA_IRQHandler+0x1b8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_DMA_IRQHandler+0x1bc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5a      	ldr	r2, [pc, #360]	@ (8002b04 <HAL_DMA_IRQHandler+0x1c0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a59      	ldr	r2, [pc, #356]	@ (8002b08 <HAL_DMA_IRQHandler+0x1c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_DMA_IRQHandler+0x1c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_DMA_IRQHandler+0x1cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a54      	ldr	r2, [pc, #336]	@ (8002b14 <HAL_DMA_IRQHandler+0x1d0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	@ (8002b18 <HAL_DMA_IRQHandler+0x1d4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_DMA_IRQHandler+0x1d8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a50      	ldr	r2, [pc, #320]	@ (8002b20 <HAL_DMA_IRQHandler+0x1dc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_DMA_IRQHandler+0x1e0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b28 <HAL_DMA_IRQHandler+0x1e4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b2c <HAL_DMA_IRQHandler+0x1e8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a4a      	ldr	r2, [pc, #296]	@ (8002b30 <HAL_DMA_IRQHandler+0x1ec>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xd2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a48      	ldr	r2, [pc, #288]	@ (8002b34 <HAL_DMA_IRQHandler+0x1f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_IRQHandler+0xd6>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_IRQHandler+0xd8>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 842b 	beq.w	8003278 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80a2 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002af8 <HAL_DMA_IRQHandler+0x1b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d04a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <HAL_DMA_IRQHandler+0x1b8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d045      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <HAL_DMA_IRQHandler+0x1bc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d040      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <HAL_DMA_IRQHandler+0x1c0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d03b      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a28      	ldr	r2, [pc, #160]	@ (8002b08 <HAL_DMA_IRQHandler+0x1c4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d036      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a27      	ldr	r2, [pc, #156]	@ (8002b0c <HAL_DMA_IRQHandler+0x1c8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d031      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_DMA_IRQHandler+0x1cc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d02c      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a24      	ldr	r2, [pc, #144]	@ (8002b14 <HAL_DMA_IRQHandler+0x1d0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d027      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <HAL_DMA_IRQHandler+0x1d4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d022      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_DMA_IRQHandler+0x1d8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d01d      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b20 <HAL_DMA_IRQHandler+0x1dc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d018      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8002b24 <HAL_DMA_IRQHandler+0x1e0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <HAL_DMA_IRQHandler+0x1e4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_DMA_IRQHandler+0x1e8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_DMA_IRQHandler+0x1ec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x194>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_DMA_IRQHandler+0x1f0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d12f      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x1f4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e02e      	b.n	8002b4c <HAL_DMA_IRQHandler+0x208>
 8002aee:	bf00      	nop
 8002af0:	24000000 	.word	0x24000000
 8002af4:	1b4e81b5 	.word	0x1b4e81b5
 8002af8:	40020010 	.word	0x40020010
 8002afc:	40020028 	.word	0x40020028
 8002b00:	40020040 	.word	0x40020040
 8002b04:	40020058 	.word	0x40020058
 8002b08:	40020070 	.word	0x40020070
 8002b0c:	40020088 	.word	0x40020088
 8002b10:	400200a0 	.word	0x400200a0
 8002b14:	400200b8 	.word	0x400200b8
 8002b18:	40020410 	.word	0x40020410
 8002b1c:	40020428 	.word	0x40020428
 8002b20:	40020440 	.word	0x40020440
 8002b24:	40020458 	.word	0x40020458
 8002b28:	40020470 	.word	0x40020470
 8002b2c:	40020488 	.word	0x40020488
 8002b30:	400204a0 	.word	0x400204a0
 8002b34:	400204b8 	.word	0x400204b8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0204 	bic.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2208      	movs	r2, #8
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06e      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a69      	ldr	r2, [pc, #420]	@ (8002d3c <HAL_DMA_IRQHandler+0x3f8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a67      	ldr	r2, [pc, #412]	@ (8002d40 <HAL_DMA_IRQHandler+0x3fc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_DMA_IRQHandler+0x400>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a64      	ldr	r2, [pc, #400]	@ (8002d48 <HAL_DMA_IRQHandler+0x404>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a63      	ldr	r2, [pc, #396]	@ (8002d4c <HAL_DMA_IRQHandler+0x408>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a61      	ldr	r2, [pc, #388]	@ (8002d50 <HAL_DMA_IRQHandler+0x40c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a60      	ldr	r2, [pc, #384]	@ (8002d54 <HAL_DMA_IRQHandler+0x410>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5e      	ldr	r2, [pc, #376]	@ (8002d58 <HAL_DMA_IRQHandler+0x414>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5d      	ldr	r2, [pc, #372]	@ (8002d5c <HAL_DMA_IRQHandler+0x418>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5b      	ldr	r2, [pc, #364]	@ (8002d60 <HAL_DMA_IRQHandler+0x41c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002d64 <HAL_DMA_IRQHandler+0x420>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a58      	ldr	r2, [pc, #352]	@ (8002d68 <HAL_DMA_IRQHandler+0x424>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a57      	ldr	r2, [pc, #348]	@ (8002d6c <HAL_DMA_IRQHandler+0x428>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a55      	ldr	r2, [pc, #340]	@ (8002d70 <HAL_DMA_IRQHandler+0x42c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a54      	ldr	r2, [pc, #336]	@ (8002d74 <HAL_DMA_IRQHandler+0x430>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x2ee>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	@ (8002d78 <HAL_DMA_IRQHandler+0x434>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10a      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x304>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e003      	b.n	8002c50 <HAL_DMA_IRQHandler+0x30c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	f043 0202 	orr.w	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2204      	movs	r2, #4
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 808f 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <HAL_DMA_IRQHandler+0x3f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <HAL_DMA_IRQHandler+0x3fc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a29      	ldr	r2, [pc, #164]	@ (8002d44 <HAL_DMA_IRQHandler+0x400>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a27      	ldr	r2, [pc, #156]	@ (8002d48 <HAL_DMA_IRQHandler+0x404>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <HAL_DMA_IRQHandler+0x408>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a24      	ldr	r2, [pc, #144]	@ (8002d50 <HAL_DMA_IRQHandler+0x40c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a23      	ldr	r2, [pc, #140]	@ (8002d54 <HAL_DMA_IRQHandler+0x410>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <HAL_DMA_IRQHandler+0x414>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <HAL_DMA_IRQHandler+0x418>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <HAL_DMA_IRQHandler+0x41c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_DMA_IRQHandler+0x420>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <HAL_DMA_IRQHandler+0x424>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	@ (8002d6c <HAL_DMA_IRQHandler+0x428>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	@ (8002d70 <HAL_DMA_IRQHandler+0x42c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_DMA_IRQHandler+0x430>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x3e2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <HAL_DMA_IRQHandler+0x434>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12a      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x438>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e023      	b.n	8002d84 <HAL_DMA_IRQHandler+0x440>
 8002d3c:	40020010 	.word	0x40020010
 8002d40:	40020028 	.word	0x40020028
 8002d44:	40020040 	.word	0x40020040
 8002d48:	40020058 	.word	0x40020058
 8002d4c:	40020070 	.word	0x40020070
 8002d50:	40020088 	.word	0x40020088
 8002d54:	400200a0 	.word	0x400200a0
 8002d58:	400200b8 	.word	0x400200b8
 8002d5c:	40020410 	.word	0x40020410
 8002d60:	40020428 	.word	0x40020428
 8002d64:	40020440 	.word	0x40020440
 8002d68:	40020458 	.word	0x40020458
 8002d6c:	40020470 	.word	0x40020470
 8002d70:	40020488 	.word	0x40020488
 8002d74:	400204a0 	.word	0x400204a0
 8002d78:	400204b8 	.word	0x400204b8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2204      	movs	r2, #4
 8002d92:	409a      	lsls	r2, r3
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2210      	movs	r2, #16
 8002dae:	409a      	lsls	r2, r3
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a6 	beq.w	8002f06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a85      	ldr	r2, [pc, #532]	@ (8002fd4 <HAL_DMA_IRQHandler+0x690>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04a      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a83      	ldr	r2, [pc, #524]	@ (8002fd8 <HAL_DMA_IRQHandler+0x694>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d045      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a82      	ldr	r2, [pc, #520]	@ (8002fdc <HAL_DMA_IRQHandler+0x698>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d040      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a80      	ldr	r2, [pc, #512]	@ (8002fe0 <HAL_DMA_IRQHandler+0x69c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d03b      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7f      	ldr	r2, [pc, #508]	@ (8002fe4 <HAL_DMA_IRQHandler+0x6a0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d036      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe8 <HAL_DMA_IRQHandler+0x6a4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d031      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8002fec <HAL_DMA_IRQHandler+0x6a8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d02c      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff0 <HAL_DMA_IRQHandler+0x6ac>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d027      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a79      	ldr	r2, [pc, #484]	@ (8002ff4 <HAL_DMA_IRQHandler+0x6b0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a77      	ldr	r2, [pc, #476]	@ (8002ff8 <HAL_DMA_IRQHandler+0x6b4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01d      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a76      	ldr	r2, [pc, #472]	@ (8002ffc <HAL_DMA_IRQHandler+0x6b8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d018      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a74      	ldr	r2, [pc, #464]	@ (8003000 <HAL_DMA_IRQHandler+0x6bc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a73      	ldr	r2, [pc, #460]	@ (8003004 <HAL_DMA_IRQHandler+0x6c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00e      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a71      	ldr	r2, [pc, #452]	@ (8003008 <HAL_DMA_IRQHandler+0x6c4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d009      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a70      	ldr	r2, [pc, #448]	@ (800300c <HAL_DMA_IRQHandler+0x6c8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x516>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_DMA_IRQHandler+0x6cc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d10a      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x52c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e009      	b.n	8002e84 <HAL_DMA_IRQHandler+0x540>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03e      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2210      	movs	r2, #16
 8002e92:	409a      	lsls	r2, r3
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d024      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e01f      	b.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01b      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
 8002ed6:	e016      	b.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0208 	bic.w	r2, r2, #8
 8002ef4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2220      	movs	r2, #32
 8002f10:	409a      	lsls	r2, r3
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8110 	beq.w	800313c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <HAL_DMA_IRQHandler+0x690>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d04a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <HAL_DMA_IRQHandler+0x694>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d045      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <HAL_DMA_IRQHandler+0x698>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d040      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a28      	ldr	r2, [pc, #160]	@ (8002fe0 <HAL_DMA_IRQHandler+0x69c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d03b      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a26      	ldr	r2, [pc, #152]	@ (8002fe4 <HAL_DMA_IRQHandler+0x6a0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d036      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a25      	ldr	r2, [pc, #148]	@ (8002fe8 <HAL_DMA_IRQHandler+0x6a4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d031      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_DMA_IRQHandler+0x6a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02c      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_DMA_IRQHandler+0x6ac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d027      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a20      	ldr	r2, [pc, #128]	@ (8002ff4 <HAL_DMA_IRQHandler+0x6b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d022      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_DMA_IRQHandler+0x6b4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d01d      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <HAL_DMA_IRQHandler+0x6b8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_DMA_IRQHandler+0x6bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <HAL_DMA_IRQHandler+0x6c0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_DMA_IRQHandler+0x6c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a17      	ldr	r2, [pc, #92]	@ (800300c <HAL_DMA_IRQHandler+0x6c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x678>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a16      	ldr	r2, [pc, #88]	@ (8003010 <HAL_DMA_IRQHandler+0x6cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d12b      	bne.n	8003014 <HAL_DMA_IRQHandler+0x6d0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e02a      	b.n	8003028 <HAL_DMA_IRQHandler+0x6e4>
 8002fd2:	bf00      	nop
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8087 	beq.w	800313c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2220      	movs	r2, #32
 8003038:	409a      	lsls	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b04      	cmp	r3, #4
 8003048:	d139      	bne.n	80030be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0216 	bic.w	r2, r2, #22
 8003058:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003068:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <HAL_DMA_IRQHandler+0x736>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	223f      	movs	r2, #63	@ 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 834a 	beq.w	8003748 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
          }
          return;
 80030bc:	e344      	b.n	8003748 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02c      	beq.n	800313c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
 80030ea:	e027      	b.n	800313c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
 80030fc:	e01e      	b.n	800313c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10f      	bne.n	800312c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8306 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8088 	beq.w	8003264 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a7a      	ldr	r2, [pc, #488]	@ (800334c <HAL_DMA_IRQHandler+0xa08>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d04a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a79      	ldr	r2, [pc, #484]	@ (8003350 <HAL_DMA_IRQHandler+0xa0c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d045      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a77      	ldr	r2, [pc, #476]	@ (8003354 <HAL_DMA_IRQHandler+0xa10>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d040      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a76      	ldr	r2, [pc, #472]	@ (8003358 <HAL_DMA_IRQHandler+0xa14>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d03b      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a74      	ldr	r2, [pc, #464]	@ (800335c <HAL_DMA_IRQHandler+0xa18>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d036      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a73      	ldr	r2, [pc, #460]	@ (8003360 <HAL_DMA_IRQHandler+0xa1c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d031      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a71      	ldr	r2, [pc, #452]	@ (8003364 <HAL_DMA_IRQHandler+0xa20>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a70      	ldr	r2, [pc, #448]	@ (8003368 <HAL_DMA_IRQHandler+0xa24>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d027      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	@ (800336c <HAL_DMA_IRQHandler+0xa28>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003370 <HAL_DMA_IRQHandler+0xa2c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003374 <HAL_DMA_IRQHandler+0xa30>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_DMA_IRQHandler+0xa34>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_DMA_IRQHandler+0xa38>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a67      	ldr	r2, [pc, #412]	@ (8003380 <HAL_DMA_IRQHandler+0xa3c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a65      	ldr	r2, [pc, #404]	@ (8003384 <HAL_DMA_IRQHandler+0xa40>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_IRQHandler+0x8b8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a64      	ldr	r2, [pc, #400]	@ (8003388 <HAL_DMA_IRQHandler+0xa44>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <HAL_DMA_IRQHandler+0x8ca>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <HAL_DMA_IRQHandler+0x8da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003226:	429a      	cmp	r2, r3
 8003228:	d307      	bcc.n	800323a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f2      	bne.n	800321e <HAL_DMA_IRQHandler+0x8da>
 8003238:	e000      	b.n	800323c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800323a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003252:	e003      	b.n	800325c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8272 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
 8003276:	e26c      	b.n	8003752 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a43      	ldr	r2, [pc, #268]	@ (800338c <HAL_DMA_IRQHandler+0xa48>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d022      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a42      	ldr	r2, [pc, #264]	@ (8003390 <HAL_DMA_IRQHandler+0xa4c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d01d      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a40      	ldr	r2, [pc, #256]	@ (8003394 <HAL_DMA_IRQHandler+0xa50>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3f      	ldr	r2, [pc, #252]	@ (8003398 <HAL_DMA_IRQHandler+0xa54>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a3d      	ldr	r2, [pc, #244]	@ (800339c <HAL_DMA_IRQHandler+0xa58>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3c      	ldr	r2, [pc, #240]	@ (80033a0 <HAL_DMA_IRQHandler+0xa5c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3a      	ldr	r2, [pc, #232]	@ (80033a4 <HAL_DMA_IRQHandler+0xa60>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x984>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a39      	ldr	r2, [pc, #228]	@ (80033a8 <HAL_DMA_IRQHandler+0xa64>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_IRQHandler+0x988>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_DMA_IRQHandler+0x98a>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 823f 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2204      	movs	r2, #4
 80032e6:	409a      	lsls	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80cd 	beq.w	800348c <HAL_DMA_IRQHandler+0xb48>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80c7 	beq.w	800348c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d049      	beq.n	80033ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8210 	beq.w	800374c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003334:	e20a      	b.n	800374c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8206 	beq.w	800374c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003348:	e200      	b.n	800374c <HAL_DMA_IRQHandler+0xe08>
 800334a:	bf00      	nop
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8
 800338c:	58025408 	.word	0x58025408
 8003390:	5802541c 	.word	0x5802541c
 8003394:	58025430 	.word	0x58025430
 8003398:	58025444 	.word	0x58025444
 800339c:	58025458 	.word	0x58025458
 80033a0:	5802546c 	.word	0x5802546c
 80033a4:	58025480 	.word	0x58025480
 80033a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d160      	bne.n	8003478 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7f      	ldr	r2, [pc, #508]	@ (80035b8 <HAL_DMA_IRQHandler+0xc74>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7d      	ldr	r2, [pc, #500]	@ (80035bc <HAL_DMA_IRQHandler+0xc78>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7c      	ldr	r2, [pc, #496]	@ (80035c0 <HAL_DMA_IRQHandler+0xc7c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	@ (80035c4 <HAL_DMA_IRQHandler+0xc80>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	@ (80035c8 <HAL_DMA_IRQHandler+0xc84>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a77      	ldr	r2, [pc, #476]	@ (80035cc <HAL_DMA_IRQHandler+0xc88>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	@ (80035d0 <HAL_DMA_IRQHandler+0xc8c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	@ (80035d4 <HAL_DMA_IRQHandler+0xc90>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	@ (80035d8 <HAL_DMA_IRQHandler+0xc94>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a71      	ldr	r2, [pc, #452]	@ (80035dc <HAL_DMA_IRQHandler+0xc98>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	@ (80035e0 <HAL_DMA_IRQHandler+0xc9c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6e      	ldr	r2, [pc, #440]	@ (80035e4 <HAL_DMA_IRQHandler+0xca0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6d      	ldr	r2, [pc, #436]	@ (80035e8 <HAL_DMA_IRQHandler+0xca4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6b      	ldr	r2, [pc, #428]	@ (80035ec <HAL_DMA_IRQHandler+0xca8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6a      	ldr	r2, [pc, #424]	@ (80035f0 <HAL_DMA_IRQHandler+0xcac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_IRQHandler+0xb12>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	@ (80035f4 <HAL_DMA_IRQHandler+0xcb0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d108      	bne.n	8003468 <HAL_DMA_IRQHandler+0xb24>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0208 	bic.w	r2, r2, #8
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e007      	b.n	8003478 <HAL_DMA_IRQHandler+0xb34>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0204 	bic.w	r2, r2, #4
 8003476:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8165 	beq.w	800374c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800348a:	e15f      	b.n	800374c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2202      	movs	r2, #2
 8003496:	409a      	lsls	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80c5 	beq.w	800362c <HAL_DMA_IRQHandler+0xce8>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80bf 	beq.w	800362c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2202      	movs	r2, #2
 80034b8:	409a      	lsls	r2, r3
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 813a 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e4:	e134      	b.n	8003750 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8130 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f8:	e12a      	b.n	8003750 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8089 	bne.w	8003618 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <HAL_DMA_IRQHandler+0xc74>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <HAL_DMA_IRQHandler+0xc78>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	@ (80035c0 <HAL_DMA_IRQHandler+0xc7c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	@ (80035c4 <HAL_DMA_IRQHandler+0xc80>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_DMA_IRQHandler+0xc84>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a23      	ldr	r2, [pc, #140]	@ (80035cc <HAL_DMA_IRQHandler+0xc88>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a22      	ldr	r2, [pc, #136]	@ (80035d0 <HAL_DMA_IRQHandler+0xc8c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <HAL_DMA_IRQHandler+0xc90>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1f      	ldr	r2, [pc, #124]	@ (80035d8 <HAL_DMA_IRQHandler+0xc94>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <HAL_DMA_IRQHandler+0xc98>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <HAL_DMA_IRQHandler+0xc9c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <HAL_DMA_IRQHandler+0xca0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <HAL_DMA_IRQHandler+0xca4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_DMA_IRQHandler+0xca8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <HAL_DMA_IRQHandler+0xcac>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xc62>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <HAL_DMA_IRQHandler+0xcb0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d128      	bne.n	80035f8 <HAL_DMA_IRQHandler+0xcb4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0214 	bic.w	r2, r2, #20
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e027      	b.n	8003608 <HAL_DMA_IRQHandler+0xcc4>
 80035b8:	40020010 	.word	0x40020010
 80035bc:	40020028 	.word	0x40020028
 80035c0:	40020040 	.word	0x40020040
 80035c4:	40020058 	.word	0x40020058
 80035c8:	40020070 	.word	0x40020070
 80035cc:	40020088 	.word	0x40020088
 80035d0:	400200a0 	.word	0x400200a0
 80035d4:	400200b8 	.word	0x400200b8
 80035d8:	40020410 	.word	0x40020410
 80035dc:	40020428 	.word	0x40020428
 80035e0:	40020440 	.word	0x40020440
 80035e4:	40020458 	.word	0x40020458
 80035e8:	40020470 	.word	0x40020470
 80035ec:	40020488 	.word	0x40020488
 80035f0:	400204a0 	.word	0x400204a0
 80035f4:	400204b8 	.word	0x400204b8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 020a 	bic.w	r2, r2, #10
 8003606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800362a:	e091      	b.n	8003750 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2208      	movs	r2, #8
 8003636:	409a      	lsls	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8088 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe0e>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8082 	beq.w	8003752 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a41      	ldr	r2, [pc, #260]	@ (8003758 <HAL_DMA_IRQHandler+0xe14>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d04a      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a3f      	ldr	r2, [pc, #252]	@ (800375c <HAL_DMA_IRQHandler+0xe18>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d045      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3e      	ldr	r2, [pc, #248]	@ (8003760 <HAL_DMA_IRQHandler+0xe1c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d040      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	@ (8003764 <HAL_DMA_IRQHandler+0xe20>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d03b      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <HAL_DMA_IRQHandler+0xe24>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d036      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a39      	ldr	r2, [pc, #228]	@ (800376c <HAL_DMA_IRQHandler+0xe28>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d031      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a38      	ldr	r2, [pc, #224]	@ (8003770 <HAL_DMA_IRQHandler+0xe2c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d02c      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a36      	ldr	r2, [pc, #216]	@ (8003774 <HAL_DMA_IRQHandler+0xe30>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d027      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a35      	ldr	r2, [pc, #212]	@ (8003778 <HAL_DMA_IRQHandler+0xe34>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a33      	ldr	r2, [pc, #204]	@ (800377c <HAL_DMA_IRQHandler+0xe38>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01d      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a32      	ldr	r2, [pc, #200]	@ (8003780 <HAL_DMA_IRQHandler+0xe3c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d018      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a30      	ldr	r2, [pc, #192]	@ (8003784 <HAL_DMA_IRQHandler+0xe40>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003788 <HAL_DMA_IRQHandler+0xe44>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00e      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	@ (800378c <HAL_DMA_IRQHandler+0xe48>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <HAL_DMA_IRQHandler+0xe4c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_DMA_IRQHandler+0xdaa>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <HAL_DMA_IRQHandler+0xe50>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <HAL_DMA_IRQHandler+0xdbc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 021c 	bic.w	r2, r2, #28
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <HAL_DMA_IRQHandler+0xdcc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 020e 	bic.w	r2, r2, #14
 800370e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2201      	movs	r2, #1
 800371a:	409a      	lsls	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
 8003746:	e004      	b.n	8003752 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003748:	bf00      	nop
 800374a:	e002      	b.n	8003752 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003750:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003752:	3728      	adds	r7, #40	@ 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40020010 	.word	0x40020010
 800375c:	40020028 	.word	0x40020028
 8003760:	40020040 	.word	0x40020040
 8003764:	40020058 	.word	0x40020058
 8003768:	40020070 	.word	0x40020070
 800376c:	40020088 	.word	0x40020088
 8003770:	400200a0 	.word	0x400200a0
 8003774:	400200b8 	.word	0x400200b8
 8003778:	40020410 	.word	0x40020410
 800377c:	40020428 	.word	0x40020428
 8003780:	40020440 	.word	0x40020440
 8003784:	40020458 	.word	0x40020458
 8003788:	40020470 	.word	0x40020470
 800378c:	40020488 	.word	0x40020488
 8003790:	400204a0 	.word	0x400204a0
 8003794:	400204b8 	.word	0x400204b8

08003798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7f      	ldr	r2, [pc, #508]	@ (80039b4 <DMA_SetConfig+0x21c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d072      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7d      	ldr	r2, [pc, #500]	@ (80039b8 <DMA_SetConfig+0x220>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d06d      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7c      	ldr	r2, [pc, #496]	@ (80039bc <DMA_SetConfig+0x224>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d068      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7a      	ldr	r2, [pc, #488]	@ (80039c0 <DMA_SetConfig+0x228>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d063      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a79      	ldr	r2, [pc, #484]	@ (80039c4 <DMA_SetConfig+0x22c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d05e      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a77      	ldr	r2, [pc, #476]	@ (80039c8 <DMA_SetConfig+0x230>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d059      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a76      	ldr	r2, [pc, #472]	@ (80039cc <DMA_SetConfig+0x234>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d054      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	@ (80039d0 <DMA_SetConfig+0x238>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04f      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	@ (80039d4 <DMA_SetConfig+0x23c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d04a      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a71      	ldr	r2, [pc, #452]	@ (80039d8 <DMA_SetConfig+0x240>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d045      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a70      	ldr	r2, [pc, #448]	@ (80039dc <DMA_SetConfig+0x244>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d040      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	@ (80039e0 <DMA_SetConfig+0x248>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d03b      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6d      	ldr	r2, [pc, #436]	@ (80039e4 <DMA_SetConfig+0x24c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d036      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6b      	ldr	r2, [pc, #428]	@ (80039e8 <DMA_SetConfig+0x250>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d031      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <DMA_SetConfig+0x254>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d02c      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <DMA_SetConfig+0x258>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d027      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a67      	ldr	r2, [pc, #412]	@ (80039f4 <DMA_SetConfig+0x25c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a65      	ldr	r2, [pc, #404]	@ (80039f8 <DMA_SetConfig+0x260>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a64      	ldr	r2, [pc, #400]	@ (80039fc <DMA_SetConfig+0x264>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a62      	ldr	r2, [pc, #392]	@ (8003a00 <DMA_SetConfig+0x268>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a61      	ldr	r2, [pc, #388]	@ (8003a04 <DMA_SetConfig+0x26c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5f      	ldr	r2, [pc, #380]	@ (8003a08 <DMA_SetConfig+0x270>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5e      	ldr	r2, [pc, #376]	@ (8003a0c <DMA_SetConfig+0x274>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5c      	ldr	r2, [pc, #368]	@ (8003a10 <DMA_SetConfig+0x278>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <DMA_SetConfig+0x10e>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <DMA_SetConfig+0x110>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a39      	ldr	r2, [pc, #228]	@ (80039b4 <DMA_SetConfig+0x21c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d04a      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a38      	ldr	r2, [pc, #224]	@ (80039b8 <DMA_SetConfig+0x220>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d045      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a36      	ldr	r2, [pc, #216]	@ (80039bc <DMA_SetConfig+0x224>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d040      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a35      	ldr	r2, [pc, #212]	@ (80039c0 <DMA_SetConfig+0x228>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d03b      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a33      	ldr	r2, [pc, #204]	@ (80039c4 <DMA_SetConfig+0x22c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d036      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a32      	ldr	r2, [pc, #200]	@ (80039c8 <DMA_SetConfig+0x230>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d031      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a30      	ldr	r2, [pc, #192]	@ (80039cc <DMA_SetConfig+0x234>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02c      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2f      	ldr	r2, [pc, #188]	@ (80039d0 <DMA_SetConfig+0x238>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d027      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2d      	ldr	r2, [pc, #180]	@ (80039d4 <DMA_SetConfig+0x23c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	@ (80039d8 <DMA_SetConfig+0x240>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2a      	ldr	r2, [pc, #168]	@ (80039dc <DMA_SetConfig+0x244>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a29      	ldr	r2, [pc, #164]	@ (80039e0 <DMA_SetConfig+0x248>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <DMA_SetConfig+0x24c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a26      	ldr	r2, [pc, #152]	@ (80039e8 <DMA_SetConfig+0x250>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a24      	ldr	r2, [pc, #144]	@ (80039ec <DMA_SetConfig+0x254>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <DMA_SetConfig+0x1d0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a23      	ldr	r2, [pc, #140]	@ (80039f0 <DMA_SetConfig+0x258>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <DMA_SetConfig+0x1d4>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <DMA_SetConfig+0x1d6>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d059      	beq.n	8003a26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	223f      	movs	r2, #63	@ 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003990:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d138      	bne.n	8003a14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80039b2:	e086      	b.n	8003ac2 <DMA_SetConfig+0x32a>
 80039b4:	40020010 	.word	0x40020010
 80039b8:	40020028 	.word	0x40020028
 80039bc:	40020040 	.word	0x40020040
 80039c0:	40020058 	.word	0x40020058
 80039c4:	40020070 	.word	0x40020070
 80039c8:	40020088 	.word	0x40020088
 80039cc:	400200a0 	.word	0x400200a0
 80039d0:	400200b8 	.word	0x400200b8
 80039d4:	40020410 	.word	0x40020410
 80039d8:	40020428 	.word	0x40020428
 80039dc:	40020440 	.word	0x40020440
 80039e0:	40020458 	.word	0x40020458
 80039e4:	40020470 	.word	0x40020470
 80039e8:	40020488 	.word	0x40020488
 80039ec:	400204a0 	.word	0x400204a0
 80039f0:	400204b8 	.word	0x400204b8
 80039f4:	58025408 	.word	0x58025408
 80039f8:	5802541c 	.word	0x5802541c
 80039fc:	58025430 	.word	0x58025430
 8003a00:	58025444 	.word	0x58025444
 8003a04:	58025458 	.word	0x58025458
 8003a08:	5802546c 	.word	0x5802546c
 8003a0c:	58025480 	.word	0x58025480
 8003a10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	e04d      	b.n	8003ac2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a29      	ldr	r2, [pc, #164]	@ (8003ad0 <DMA_SetConfig+0x338>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a27      	ldr	r2, [pc, #156]	@ (8003ad4 <DMA_SetConfig+0x33c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <DMA_SetConfig+0x340>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <DMA_SetConfig+0x344>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <DMA_SetConfig+0x348>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <DMA_SetConfig+0x34c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a20      	ldr	r2, [pc, #128]	@ (8003ae8 <DMA_SetConfig+0x350>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <DMA_SetConfig+0x2de>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <DMA_SetConfig+0x354>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <DMA_SetConfig+0x2e2>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <DMA_SetConfig+0x2e4>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d108      	bne.n	8003ab2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	60da      	str	r2, [r3, #12]
}
 8003ab0:	e007      	b.n	8003ac2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	60da      	str	r2, [r3, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	58025408 	.word	0x58025408
 8003ad4:	5802541c 	.word	0x5802541c
 8003ad8:	58025430 	.word	0x58025430
 8003adc:	58025444 	.word	0x58025444
 8003ae0:	58025458 	.word	0x58025458
 8003ae4:	5802546c 	.word	0x5802546c
 8003ae8:	58025480 	.word	0x58025480
 8003aec:	58025494 	.word	0x58025494

08003af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	@ (8003c08 <DMA_CalcBaseAndBitshift+0x118>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a41      	ldr	r2, [pc, #260]	@ (8003c0c <DMA_CalcBaseAndBitshift+0x11c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a3f      	ldr	r2, [pc, #252]	@ (8003c10 <DMA_CalcBaseAndBitshift+0x120>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c14 <DMA_CalcBaseAndBitshift+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3c      	ldr	r2, [pc, #240]	@ (8003c18 <DMA_CalcBaseAndBitshift+0x128>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c1c <DMA_CalcBaseAndBitshift+0x12c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a39      	ldr	r2, [pc, #228]	@ (8003c20 <DMA_CalcBaseAndBitshift+0x130>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a38      	ldr	r2, [pc, #224]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x134>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a36      	ldr	r2, [pc, #216]	@ (8003c28 <DMA_CalcBaseAndBitshift+0x138>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a35      	ldr	r2, [pc, #212]	@ (8003c2c <DMA_CalcBaseAndBitshift+0x13c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a33      	ldr	r2, [pc, #204]	@ (8003c30 <DMA_CalcBaseAndBitshift+0x140>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a32      	ldr	r2, [pc, #200]	@ (8003c34 <DMA_CalcBaseAndBitshift+0x144>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a30      	ldr	r2, [pc, #192]	@ (8003c38 <DMA_CalcBaseAndBitshift+0x148>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c3c <DMA_CalcBaseAndBitshift+0x14c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	@ (8003c40 <DMA_CalcBaseAndBitshift+0x150>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <DMA_CalcBaseAndBitshift+0x154>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <DMA_CalcBaseAndBitshift+0xac>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <DMA_CalcBaseAndBitshift+0xae>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d024      	beq.n	8003bec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3b10      	subs	r3, #16
 8003baa:	4a27      	ldr	r2, [pc, #156]	@ (8003c48 <DMA_CalcBaseAndBitshift+0x158>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	4a24      	ldr	r2, [pc, #144]	@ (8003c4c <DMA_CalcBaseAndBitshift+0x15c>)
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d908      	bls.n	8003bdc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x160>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bda:	e00d      	b.n	8003bf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <DMA_CalcBaseAndBitshift+0x160>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bea:	e005      	b.n	8003bf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40020010 	.word	0x40020010
 8003c0c:	40020028 	.word	0x40020028
 8003c10:	40020040 	.word	0x40020040
 8003c14:	40020058 	.word	0x40020058
 8003c18:	40020070 	.word	0x40020070
 8003c1c:	40020088 	.word	0x40020088
 8003c20:	400200a0 	.word	0x400200a0
 8003c24:	400200b8 	.word	0x400200b8
 8003c28:	40020410 	.word	0x40020410
 8003c2c:	40020428 	.word	0x40020428
 8003c30:	40020440 	.word	0x40020440
 8003c34:	40020458 	.word	0x40020458
 8003c38:	40020470 	.word	0x40020470
 8003c3c:	40020488 	.word	0x40020488
 8003c40:	400204a0 	.word	0x400204a0
 8003c44:	400204b8 	.word	0x400204b8
 8003c48:	aaaaaaab 	.word	0xaaaaaaab
 8003c4c:	08009d74 	.word	0x08009d74
 8003c50:	fffffc00 	.word	0xfffffc00

08003c54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d120      	bne.n	8003caa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d858      	bhi.n	8003d22 <DMA_CheckFifoParam+0xce>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <DMA_CheckFifoParam+0x24>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c9b 	.word	0x08003c9b
 8003c80:	08003c89 	.word	0x08003c89
 8003c84:	08003d23 	.word	0x08003d23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d048      	beq.n	8003d26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c98:	e045      	b.n	8003d26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ca2:	d142      	bne.n	8003d2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ca8:	e03f      	b.n	8003d2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb2:	d123      	bne.n	8003cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d838      	bhi.n	8003d2e <DMA_CheckFifoParam+0xda>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <DMA_CheckFifoParam+0x70>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003cdb 	.word	0x08003cdb
 8003ccc:	08003cd5 	.word	0x08003cd5
 8003cd0:	08003ced 	.word	0x08003ced
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd8:	e030      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d025      	beq.n	8003d32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cea:	e022      	b.n	8003d32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cf4:	d11f      	bne.n	8003d36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cfa:	e01c      	b.n	8003d36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d902      	bls.n	8003d0a <DMA_CheckFifoParam+0xb6>
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d003      	beq.n	8003d10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d08:	e018      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d0e:	e015      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8003d20:	e00b      	b.n	8003d3a <DMA_CheckFifoParam+0xe6>
        break;
 8003d22:	bf00      	nop
 8003d24:	e00a      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        break;
 8003d26:	bf00      	nop
 8003d28:	e008      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        break;
 8003d2a:	bf00      	nop
 8003d2c:	e006      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e004      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <DMA_CheckFifoParam+0xe8>
    break;
 8003d3a:	bf00      	nop
    }
  }

  return status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop

08003d4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a38      	ldr	r2, [pc, #224]	@ (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a36      	ldr	r2, [pc, #216]	@ (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a35      	ldr	r2, [pc, #212]	@ (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a33      	ldr	r2, [pc, #204]	@ (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a32      	ldr	r2, [pc, #200]	@ (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a30      	ldr	r2, [pc, #192]	@ (8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2d      	ldr	r2, [pc, #180]	@ (8003e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01a      	beq.n	8003dea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3b08      	subs	r3, #8
 8003dbc:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4b26      	ldr	r3, [pc, #152]	@ (8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	@ (8003e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2201      	movs	r2, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003de8:	e024      	b.n	8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3b10      	subs	r3, #16
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d806      	bhi.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d902      	bls.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4b18      	ldr	r3, [pc, #96]	@ (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a16      	ldr	r2, [pc, #88]	@ (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494
 8003e60:	cccccccd 	.word	0xcccccccd
 8003e64:	16009600 	.word	0x16009600
 8003e68:	58025880 	.word	0x58025880
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	400204b8 	.word	0x400204b8
 8003e74:	4002040f 	.word	0x4002040f
 8003e78:	10008200 	.word	0x10008200
 8003e7c:	40020880 	.word	0x40020880

08003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04a      	beq.n	8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d847      	bhi.n	8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	@ (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a24      	ldr	r2, [pc, #144]	@ (8003f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	@ (8003f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f08:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f0a:	e009      	b.n	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	58025408 	.word	0x58025408
 8003f3c:	5802541c 	.word	0x5802541c
 8003f40:	58025430 	.word	0x58025430
 8003f44:	58025444 	.word	0x58025444
 8003f48:	58025458 	.word	0x58025458
 8003f4c:	5802546c 	.word	0x5802546c
 8003f50:	58025480 	.word	0x58025480
 8003f54:	58025494 	.word	0x58025494
 8003f58:	1600963f 	.word	0x1600963f
 8003f5c:	58025940 	.word	0x58025940
 8003f60:	1000823f 	.word	0x1000823f
 8003f64:	40020940 	.word	0x40020940

08003f68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0e3      	b.n	8004142 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2223      	movs	r2, #35	@ 0x23
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fc fbb1 	bl	80006f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f92:	4b6e      	ldr	r3, [pc, #440]	@ (800414c <HAL_ETH_Init+0x1e4>)
 8003f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f98:	4a6c      	ldr	r2, [pc, #432]	@ (800414c <HAL_ETH_Init+0x1e4>)
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800414c <HAL_ETH_Init+0x1e4>)
 8003fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7a1b      	ldrb	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7fd f879 	bl	80010b0 <HAL_SYSCFG_ETHInterfaceSelect>
 8003fbe:	e003      	b.n	8003fc8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003fc0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003fc4:	f7fd f874 	bl	80010b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003fc8:	4b61      	ldr	r3, [pc, #388]	@ (8004150 <HAL_ETH_Init+0x1e8>)
 8003fca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe4:	f7fd f858 	bl	8001098 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fea:	e011      	b.n	8004010 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fec:	f7fd f854 	bl	8001098 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003ffa:	d909      	bls.n	8004010 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	22e0      	movs	r2, #224	@ 0xe0
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e098      	b.n	8004142 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e4      	bne.n	8003fec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f89e 	bl	8004164 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004028:	f001 fcd8 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 800402c:	4603      	mov	r3, r0
 800402e:	4a49      	ldr	r2, [pc, #292]	@ (8004154 <HAL_ETH_Init+0x1ec>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	0c9a      	lsrs	r2, r3, #18
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3a01      	subs	r2, #1
 800403c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa81 	bl	8004548 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800404e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004052:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800405e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004062:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	22e0      	movs	r2, #224	@ 0xe0
 800407e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e05d      	b.n	8004142 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004092:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <HAL_ETH_Init+0x1f0>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6952      	ldr	r2, [r2, #20]
 800409a:	0051      	lsls	r1, r2, #1
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040a6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fae9 	bl	8004682 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fb2f 	bl	8004714 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	3305      	adds	r3, #5
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	3303      	adds	r3, #3
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	061a      	lsls	r2, r3, #24
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	3302      	adds	r3, #2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004102:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004104:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b11      	ldr	r3, [pc, #68]	@ (800415c <HAL_ETH_Init+0x1f4>)
 8004116:	430b      	orrs	r3, r1
 8004118:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_ETH_Init+0x1f8>)
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2210      	movs	r2, #16
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	58000400 	.word	0x58000400
 8004154:	431bde83 	.word	0x431bde83
 8004158:	ffff8001 	.word	0xffff8001
 800415c:	0c020060 	.word	0x0c020060
 8004160:	0c20c000 	.word	0x0c20c000

08004164 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004174:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800417c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800417e:	f001 fc2d 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8004182:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d804      	bhi.n	8004196 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e022      	b.n	80041dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d204      	bcs.n	80041a8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e019      	b.n	80041dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a13      	ldr	r2, [pc, #76]	@ (80041f8 <HAL_ETH_SetMDIOClockRange+0x94>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d915      	bls.n	80041dc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a12      	ldr	r2, [pc, #72]	@ (80041fc <HAL_ETH_SetMDIOClockRange+0x98>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d804      	bhi.n	80041c2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e00c      	b.n	80041dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d804      	bhi.n	80041d4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e003      	b.n	80041dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	02160ebf 	.word	0x02160ebf
 80041f4:	03938700 	.word	0x03938700
 80041f8:	05f5e0ff 	.word	0x05f5e0ff
 80041fc:	08f0d17f 	.word	0x08f0d17f
 8004200:	0ee6b27f 	.word	0x0ee6b27f

08004204 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800421e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	7b1b      	ldrb	r3, [r3, #12]
 8004224:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	7b5b      	ldrb	r3, [r3, #13]
 800422c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800422e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7b9b      	ldrb	r3, [r3, #14]
 8004234:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7bdb      	ldrb	r3, [r3, #15]
 800423c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800423e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	7c12      	ldrb	r2, [r2, #16]
 8004244:	2a00      	cmp	r2, #0
 8004246:	d102      	bne.n	800424e <ETH_SetMACConfig+0x4a>
 8004248:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800424c:	e000      	b.n	8004250 <ETH_SetMACConfig+0x4c>
 800424e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004250:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	7c52      	ldrb	r2, [r2, #17]
 8004256:	2a00      	cmp	r2, #0
 8004258:	d102      	bne.n	8004260 <ETH_SetMACConfig+0x5c>
 800425a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800425e:	e000      	b.n	8004262 <ETH_SetMACConfig+0x5e>
 8004260:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	7c9b      	ldrb	r3, [r3, #18]
 8004268:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800426a:	431a      	orrs	r2, r3
               macconf->Speed |
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004270:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	7f1b      	ldrb	r3, [r3, #28]
 800427c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800427e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	7f5b      	ldrb	r3, [r3, #29]
 8004284:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004286:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	7f92      	ldrb	r2, [r2, #30]
 800428c:	2a00      	cmp	r2, #0
 800428e:	d102      	bne.n	8004296 <ETH_SetMACConfig+0x92>
 8004290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004294:	e000      	b.n	8004298 <ETH_SetMACConfig+0x94>
 8004296:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004298:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	7fdb      	ldrb	r3, [r3, #31]
 800429e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80042a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80042a8:	2a00      	cmp	r2, #0
 80042aa:	d102      	bne.n	80042b2 <ETH_SetMACConfig+0xae>
 80042ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042b0:	e000      	b.n	80042b4 <ETH_SetMACConfig+0xb0>
 80042b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80042b4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80042ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80042c4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b56      	ldr	r3, [pc, #344]	@ (8004430 <ETH_SetMACConfig+0x22c>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	430b      	orrs	r3, r1
 80042e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80042f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80042fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004302:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004304:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800430c:	2a00      	cmp	r2, #0
 800430e:	d102      	bne.n	8004316 <ETH_SetMACConfig+0x112>
 8004310:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004314:	e000      	b.n	8004318 <ETH_SetMACConfig+0x114>
 8004316:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004318:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <ETH_SetMACConfig+0x230>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	430b      	orrs	r3, r1
 8004334:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800433c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	4b3a      	ldr	r3, [pc, #232]	@ (8004438 <ETH_SetMACConfig+0x234>)
 800434e:	4013      	ands	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	430b      	orrs	r3, r1
 8004358:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004360:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004366:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800436e:	2a00      	cmp	r2, #0
 8004370:	d101      	bne.n	8004376 <ETH_SetMACConfig+0x172>
 8004372:	2280      	movs	r2, #128	@ 0x80
 8004374:	e000      	b.n	8004378 <ETH_SetMACConfig+0x174>
 8004376:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004378:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800438a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	430b      	orrs	r3, r1
 8004398:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80043a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80043a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f023 0103 	bic.w	r1, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80043ce:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	d101      	bne.n	80043f2 <ETH_SetMACConfig+0x1ee>
 80043ee:	2240      	movs	r2, #64	@ 0x40
 80043f0:	e000      	b.n	80043f4 <ETH_SetMACConfig+0x1f0>
 80043f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80043fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004406:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004414:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	430a      	orrs	r2, r1
 8004420:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	00048083 	.word	0x00048083
 8004434:	c0f88000 	.word	0xc0f88000
 8004438:	fffffef0 	.word	0xfffffef0

0800443c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b38      	ldr	r3, [pc, #224]	@ (8004534 <ETH_SetDMAConfig+0xf8>)
 8004452:	4013      	ands	r3, r2
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	6811      	ldr	r1, [r2, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004462:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	791b      	ldrb	r3, [r3, #4]
 8004468:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800446e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	7b1b      	ldrb	r3, [r3, #12]
 8004474:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	4b2c      	ldr	r3, [pc, #176]	@ (8004538 <ETH_SetDMAConfig+0xfc>)
 8004486:	4013      	ands	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	430b      	orrs	r3, r1
 8004490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004494:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	7b5b      	ldrb	r3, [r3, #13]
 800449a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80044b0:	4b22      	ldr	r3, [pc, #136]	@ (800453c <ETH_SetDMAConfig+0x100>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	430b      	orrs	r3, r1
 80044bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044c0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	7d1b      	ldrb	r3, [r3, #20]
 80044cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80044ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	7f5b      	ldrb	r3, [r3, #29]
 80044d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80044e6:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <ETH_SetDMAConfig+0x104>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044f6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	7f1b      	ldrb	r3, [r3, #28]
 80044fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004510:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <ETH_SetDMAConfig+0x108>)
 8004516:	4013      	ands	r3, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	430b      	orrs	r3, r1
 8004520:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004524:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	ffff87fd 	.word	0xffff87fd
 8004538:	ffff2ffe 	.word	0xffff2ffe
 800453c:	fffec000 	.word	0xfffec000
 8004540:	ffc0efef 	.word	0xffc0efef
 8004544:	7fc0ffff 	.word	0x7fc0ffff

08004548 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b0a4      	sub	sp, #144	@ 0x90
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004556:	2300      	movs	r3, #0
 8004558:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004560:	2300      	movs	r3, #0
 8004562:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004588:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004590:	2300      	movs	r3, #0
 8004592:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80045a0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80045a4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80045ac:	2300      	movs	r3, #0
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80045c2:	2300      	movs	r3, #0
 80045c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80045ca:	2300      	movs	r3, #0
 80045cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80045e0:	2320      	movs	r3, #32
 80045e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045f2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045fc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004604:	2302      	movs	r3, #2
 8004606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004622:	2300      	movs	r3, #0
 8004624:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800462c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fde6 	bl	8004204 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004638:	2301      	movs	r3, #1
 800463a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800463c:	2301      	movs	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800464e:	2300      	movs	r3, #0
 8004650:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004652:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800465c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004660:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004662:	2300      	movs	r3, #0
 8004664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004668:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fee1 	bl	800443c <ETH_SetDMAConfig>
}
 800467a:	bf00      	nop
 800467c:	3790      	adds	r7, #144	@ 0x90
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e01d      	b.n	80046cc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68d9      	ldr	r1, [r3, #12]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4613      	mov	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4413      	add	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	440b      	add	r3, r1
 80046a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	3206      	adds	r2, #6
 80046c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d9de      	bls.n	8004690 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e0:	461a      	mov	r2, r3
 80046e2:	2303      	movs	r3, #3
 80046e4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004704:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e023      	b.n	800476a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	3212      	adds	r2, #18
 8004760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d9d8      	bls.n	8004722 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004796:	461a      	mov	r2, r3
 8004798:	2303      	movs	r3, #3
 800479a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047aa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047be:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047de:	4b86      	ldr	r3, [pc, #536]	@ (80049f8 <HAL_GPIO_Init+0x228>)
 80047e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047e2:	e18c      	b.n	8004afe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	2101      	movs	r1, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 817e 	beq.w	8004af8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d005      	beq.n	8004814 <HAL_GPIO_Init+0x44>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d130      	bne.n	8004876 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800484a:	2201      	movs	r2, #1
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0201 	and.w	r2, r3, #1
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d017      	beq.n	80048b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	2203      	movs	r2, #3
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d123      	bne.n	8004906 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	08da      	lsrs	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3208      	adds	r2, #8
 80048c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	220f      	movs	r2, #15
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2203      	movs	r2, #3
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 0203 	and.w	r2, r3, #3
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80d8 	beq.w	8004af8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004948:	4b2c      	ldr	r3, [pc, #176]	@ (80049fc <HAL_GPIO_Init+0x22c>)
 800494a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800494e:	4a2b      	ldr	r2, [pc, #172]	@ (80049fc <HAL_GPIO_Init+0x22c>)
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004958:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <HAL_GPIO_Init+0x22c>)
 800495a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004966:	4a26      	ldr	r2, [pc, #152]	@ (8004a00 <HAL_GPIO_Init+0x230>)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	089b      	lsrs	r3, r3, #2
 800496c:	3302      	adds	r3, #2
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	220f      	movs	r2, #15
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a04 <HAL_GPIO_Init+0x234>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d04a      	beq.n	8004a28 <HAL_GPIO_Init+0x258>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_GPIO_Init+0x238>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02b      	beq.n	80049f2 <HAL_GPIO_Init+0x222>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a0c <HAL_GPIO_Init+0x23c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d025      	beq.n	80049ee <HAL_GPIO_Init+0x21e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a10 <HAL_GPIO_Init+0x240>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <HAL_GPIO_Init+0x21a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a19      	ldr	r2, [pc, #100]	@ (8004a14 <HAL_GPIO_Init+0x244>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d019      	beq.n	80049e6 <HAL_GPIO_Init+0x216>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <HAL_GPIO_Init+0x248>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_GPIO_Init+0x212>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_GPIO_Init+0x24c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00d      	beq.n	80049de <HAL_GPIO_Init+0x20e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_GPIO_Init+0x250>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <HAL_GPIO_Init+0x20a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a15      	ldr	r2, [pc, #84]	@ (8004a24 <HAL_GPIO_Init+0x254>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_GPIO_Init+0x206>
 80049d2:	2309      	movs	r3, #9
 80049d4:	e029      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049d6:	230a      	movs	r3, #10
 80049d8:	e027      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049da:	2307      	movs	r3, #7
 80049dc:	e025      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049de:	2306      	movs	r3, #6
 80049e0:	e023      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049e2:	2305      	movs	r3, #5
 80049e4:	e021      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e01f      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e01d      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e01b      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e019      	b.n	8004a2a <HAL_GPIO_Init+0x25a>
 80049f6:	bf00      	nop
 80049f8:	58000080 	.word	0x58000080
 80049fc:	58024400 	.word	0x58024400
 8004a00:	58000400 	.word	0x58000400
 8004a04:	58020000 	.word	0x58020000
 8004a08:	58020400 	.word	0x58020400
 8004a0c:	58020800 	.word	0x58020800
 8004a10:	58020c00 	.word	0x58020c00
 8004a14:	58021000 	.word	0x58021000
 8004a18:	58021400 	.word	0x58021400
 8004a1c:	58021800 	.word	0x58021800
 8004a20:	58021c00 	.word	0x58021c00
 8004a24:	58022400 	.word	0x58022400
 8004a28:	2300      	movs	r3, #0
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	f002 0203 	and.w	r2, r2, #3
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	4093      	lsls	r3, r2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3a:	4938      	ldr	r1, [pc, #224]	@ (8004b1c <HAL_GPIO_Init+0x34c>)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	3302      	adds	r3, #2
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f47f ae6b 	bne.w	80047e4 <HAL_GPIO_Init+0x14>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	3724      	adds	r7, #36	@ 0x24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	58000400 	.word	0x58000400

08004b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b30:	787b      	ldrb	r3, [r7, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b3c:	e003      	b.n	8004b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	041a      	lsls	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	619a      	str	r2, [r3, #24]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d00a      	beq.n	8004b7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b68:	4b16      	ldr	r3, [pc, #88]	@ (8004bc4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d001      	beq.n	8004b7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e01f      	b.n	8004bba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e01d      	b.n	8004bba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 0207 	bic.w	r2, r3, #7
 8004b86:	490f      	ldr	r1, [pc, #60]	@ (8004bc4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b8e:	f7fc fa83 	bl	8001098 <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b94:	e009      	b.n	8004baa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b96:	f7fc fa7f 	bl	8001098 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ba4:	d901      	bls.n	8004baa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e007      	b.n	8004bba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004baa:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb6:	d1ee      	bne.n	8004b96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	58024800 	.word	0x58024800

08004bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	@ 0x30
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e3c8      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8087 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be8:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf2:	4b86      	ldr	r3, [pc, #536]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d007      	beq.n	8004c0e <HAL_RCC_OscConfig+0x46>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	2b18      	cmp	r3, #24
 8004c02:	d110      	bne.n	8004c26 <HAL_RCC_OscConfig+0x5e>
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d10b      	bne.n	8004c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d06c      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x12c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d168      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e3a2      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_OscConfig+0x76>
 8004c30:	4b76      	ldr	r3, [pc, #472]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a75      	ldr	r2, [pc, #468]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e02e      	b.n	8004c9c <HAL_RCC_OscConfig+0xd4>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x98>
 8004c46:	4b71      	ldr	r3, [pc, #452]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a70      	ldr	r2, [pc, #448]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b6e      	ldr	r3, [pc, #440]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6d      	ldr	r2, [pc, #436]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e01d      	b.n	8004c9c <HAL_RCC_OscConfig+0xd4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0xbc>
 8004c6a:	4b68      	ldr	r3, [pc, #416]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a67      	ldr	r2, [pc, #412]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b65      	ldr	r3, [pc, #404]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a64      	ldr	r2, [pc, #400]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0xd4>
 8004c84:	4b61      	ldr	r3, [pc, #388]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a60      	ldr	r2, [pc, #384]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b5e      	ldr	r3, [pc, #376]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5d      	ldr	r2, [pc, #372]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d013      	beq.n	8004ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fc f9f8 	bl	8001098 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fc f9f4 	bl	8001098 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e356      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cbe:	4b53      	ldr	r3, [pc, #332]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0xe4>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fc f9e4 	bl	8001098 <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fc f9e0 	bl	8001098 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e342      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ce6:	4b49      	ldr	r3, [pc, #292]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x10c>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 808c 	beq.w	8004e1c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d04:	4b41      	ldr	r3, [pc, #260]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_RCC_OscConfig+0x162>
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2b18      	cmp	r3, #24
 8004d1e:	d137      	bne.n	8004d90 <HAL_RCC_OscConfig+0x1c8>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d132      	bne.n	8004d90 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d2a:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e314      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d42:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 0219 	bic.w	r2, r3, #25
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	492f      	ldr	r1, [pc, #188]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc f9a0 	bl	8001098 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fc f99c 	bl	8001098 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e2fe      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6e:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	4920      	ldr	r1, [pc, #128]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d8e:	e045      	b.n	8004e1c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d026      	beq.n	8004de6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d98:	4b1c      	ldr	r3, [pc, #112]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 0219 	bic.w	r2, r3, #25
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4919      	ldr	r1, [pc, #100]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fc f975 	bl	8001098 <HAL_GetTick>
 8004dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fc f971 	bl	8001098 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e2d3      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc4:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	490b      	ldr	r1, [pc, #44]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
 8004de4:	e01a      	b.n	8004e1c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de6:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fc f951 	bl	8001098 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fc f94d 	bl	8001098 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d903      	bls.n	8004e10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e2af      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
 8004e0c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e10:	4b96      	ldr	r3, [pc, #600]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ee      	bne.n	8004dfa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d06a      	beq.n	8004efe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e28:	4b90      	ldr	r3, [pc, #576]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e30:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e32:	4b8e      	ldr	r3, [pc, #568]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d007      	beq.n	8004e4e <HAL_RCC_OscConfig+0x286>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b18      	cmp	r3, #24
 8004e42:	d11b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2b4>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d116      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e4e:	4b87      	ldr	r3, [pc, #540]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_RCC_OscConfig+0x29e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b80      	cmp	r3, #128	@ 0x80
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e282      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e66:	4b81      	ldr	r3, [pc, #516]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	497d      	ldr	r1, [pc, #500]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e7a:	e040      	b.n	8004efe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e84:	4b79      	ldr	r3, [pc, #484]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a78      	ldr	r2, [pc, #480]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fc f902 	bl	8001098 <HAL_GetTick>
 8004e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e98:	f7fc f8fe 	bl	8001098 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e260      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eaa:	4b70      	ldr	r3, [pc, #448]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	4969      	ldr	r1, [pc, #420]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60cb      	str	r3, [r1, #12]
 8004eca:	e018      	b.n	8004efe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ecc:	4b67      	ldr	r3, [pc, #412]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a66      	ldr	r2, [pc, #408]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc f8de 	bl	8001098 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ee0:	f7fc f8da 	bl	8001098 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e23c      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d036      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d019      	beq.n	8004f46 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f12:	4b56      	ldr	r3, [pc, #344]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f16:	4a55      	ldr	r2, [pc, #340]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fc f8bb 	bl	8001098 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f26:	f7fc f8b7 	bl	8001098 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e219      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f38:	4b4c      	ldr	r3, [pc, #304]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x35e>
 8004f44:	e018      	b.n	8004f78 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f46:	4b49      	ldr	r3, [pc, #292]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4a:	4a48      	ldr	r2, [pc, #288]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fc f8a1 	bl	8001098 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fc f89d 	bl	8001098 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1ff      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d036      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f8c:	4b37      	ldr	r3, [pc, #220]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a36      	ldr	r2, [pc, #216]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f98:	f7fc f87e 	bl	8001098 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa0:	f7fc f87a 	bl	8001098 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1dc      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x3d8>
 8004fbe:	e018      	b.n	8004ff2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fcc:	f7fc f864 	bl	8001098 <HAL_GetTick>
 8004fd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd4:	f7fc f860 	bl	8001098 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1c2      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fe6:	4b21      	ldr	r3, [pc, #132]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8086 	beq.w	800510c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4a8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1a      	ldr	r2, [pc, #104]	@ (8005070 <HAL_RCC_OscConfig+0x4a8>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500c:	f7fc f844 	bl	8001098 <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fc f840 	bl	8001098 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b64      	cmp	r3, #100	@ 0x64
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1a2      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <HAL_RCC_OscConfig+0x4a8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d106      	bne.n	8005048 <HAL_RCC_OscConfig+0x480>
 800503a:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a0b      	ldr	r2, [pc, #44]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
 8005046:	e032      	b.n	80050ae <HAL_RCC_OscConfig+0x4e6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d111      	bne.n	8005074 <HAL_RCC_OscConfig+0x4ac>
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005054:	4a05      	ldr	r2, [pc, #20]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6713      	str	r3, [r2, #112]	@ 0x70
 800505c:	4b03      	ldr	r3, [pc, #12]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4a02      	ldr	r2, [pc, #8]	@ (800506c <HAL_RCC_OscConfig+0x4a4>)
 8005062:	f023 0304 	bic.w	r3, r3, #4
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
 8005068:	e021      	b.n	80050ae <HAL_RCC_OscConfig+0x4e6>
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	58024800 	.word	0x58024800
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b05      	cmp	r3, #5
 800507a:	d10c      	bne.n	8005096 <HAL_RCC_OscConfig+0x4ce>
 800507c:	4b83      	ldr	r3, [pc, #524]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a82      	ldr	r2, [pc, #520]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005082:	f043 0304 	orr.w	r3, r3, #4
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
 8005088:	4b80      	ldr	r3, [pc, #512]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a7f      	ldr	r2, [pc, #508]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	e00b      	b.n	80050ae <HAL_RCC_OscConfig+0x4e6>
 8005096:	4b7d      	ldr	r3, [pc, #500]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a7c      	ldr	r2, [pc, #496]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a2:	4b7a      	ldr	r3, [pc, #488]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a6:	4a79      	ldr	r2, [pc, #484]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d015      	beq.n	80050e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fb ffef 	bl	8001098 <HAL_GetTick>
 80050ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fb ffeb 	bl	8001098 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e14b      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d4:	4b6d      	ldr	r3, [pc, #436]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ee      	beq.n	80050be <HAL_RCC_OscConfig+0x4f6>
 80050e0:	e014      	b.n	800510c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fb ffd9 	bl	8001098 <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fb ffd5 	bl	8001098 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e135      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005100:	4b62      	ldr	r3, [pc, #392]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ee      	bne.n	80050ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 812a 	beq.w	800536a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005116:	4b5d      	ldr	r3, [pc, #372]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800511e:	2b18      	cmp	r3, #24
 8005120:	f000 80ba 	beq.w	8005298 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	2b02      	cmp	r3, #2
 800512a:	f040 8095 	bne.w	8005258 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b57      	ldr	r3, [pc, #348]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a56      	ldr	r2, [pc, #344]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513a:	f7fb ffad 	bl	8001098 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005142:	f7fb ffa9 	bl	8001098 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e10b      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005154:	4b4d      	ldr	r3, [pc, #308]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005160:	4b4a      	ldr	r3, [pc, #296]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005162:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005164:	4b4a      	ldr	r3, [pc, #296]	@ (8005290 <HAL_RCC_OscConfig+0x6c8>)
 8005166:	4013      	ands	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005170:	0112      	lsls	r2, r2, #4
 8005172:	430a      	orrs	r2, r1
 8005174:	4945      	ldr	r1, [pc, #276]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	628b      	str	r3, [r1, #40]	@ 0x28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	3b01      	subs	r3, #1
 8005180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005188:	3b01      	subs	r3, #1
 800518a:	025b      	lsls	r3, r3, #9
 800518c:	b29b      	uxth	r3, r3
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	3b01      	subs	r3, #1
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	3b01      	subs	r3, #1
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051aa:	4938      	ldr	r1, [pc, #224]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051b0:	4b36      	ldr	r3, [pc, #216]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4a35      	ldr	r2, [pc, #212]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051bc:	4b33      	ldr	r3, [pc, #204]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <HAL_RCC_OscConfig+0x6cc>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051c8:	00d2      	lsls	r2, r2, #3
 80051ca:	4930      	ldr	r1, [pc, #192]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051d0:	4b2e      	ldr	r3, [pc, #184]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	f023 020c 	bic.w	r2, r3, #12
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	492b      	ldr	r1, [pc, #172]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051e2:	4b2a      	ldr	r3, [pc, #168]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	f023 0202 	bic.w	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	4927      	ldr	r1, [pc, #156]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051f4:	4b25      	ldr	r3, [pc, #148]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4a24      	ldr	r2, [pc, #144]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005200:	4b22      	ldr	r3, [pc, #136]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	4a21      	ldr	r2, [pc, #132]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800520a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005212:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005218:	4b1c      	ldr	r3, [pc, #112]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	4a1b      	ldr	r2, [pc, #108]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005224:	4b19      	ldr	r3, [pc, #100]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a18      	ldr	r2, [pc, #96]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fb ff32 	bl	8001098 <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fb ff2e 	bl	8001098 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e090      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800524a:	4b10      	ldr	r3, [pc, #64]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x670>
 8005256:	e088      	b.n	800536a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a0b      	ldr	r2, [pc, #44]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 800525e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fb ff18 	bl	8001098 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fb ff14 	bl	8001098 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e076      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527e:	4b03      	ldr	r3, [pc, #12]	@ (800528c <HAL_RCC_OscConfig+0x6c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x6a4>
 800528a:	e06e      	b.n	800536a <HAL_RCC_OscConfig+0x7a2>
 800528c:	58024400 	.word	0x58024400
 8005290:	fffffc0c 	.word	0xfffffc0c
 8005294:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005298:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800529e:	4b35      	ldr	r3, [pc, #212]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d031      	beq.n	8005310 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f003 0203 	and.w	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d12a      	bne.n	8005310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d122      	bne.n	8005310 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d11a      	bne.n	8005310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0a5b      	lsrs	r3, r3, #9
 80052de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d111      	bne.n	8005310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d108      	bne.n	8005310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	0e1b      	lsrs	r3, r3, #24
 8005302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e02b      	b.n	800536c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005314:	4b17      	ldr	r3, [pc, #92]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 8005316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800531e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	429a      	cmp	r2, r3
 8005328:	d01f      	beq.n	800536a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800532a:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	4a11      	ldr	r2, [pc, #68]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005336:	f7fb feaf 	bl	8001098 <HAL_GetTick>
 800533a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800533c:	bf00      	nop
 800533e:	f7fb feab 	bl	8001098 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	4293      	cmp	r3, r2
 8005348:	d0f9      	beq.n	800533e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800534a:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 800534c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <HAL_RCC_OscConfig+0x7b0>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	4906      	ldr	r1, [pc, #24]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 800535a:	4313      	orrs	r3, r2
 800535c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <HAL_RCC_OscConfig+0x7ac>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3730      	adds	r7, #48	@ 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	58024400 	.word	0x58024400
 8005378:	ffff0007 	.word	0xffff0007

0800537c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e19c      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b8a      	ldr	r3, [pc, #552]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b87      	ldr	r3, [pc, #540]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 020f 	bic.w	r2, r3, #15
 80053a6:	4985      	ldr	r1, [pc, #532]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b83      	ldr	r3, [pc, #524]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e184      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053d8:	429a      	cmp	r2, r3
 80053da:	d908      	bls.n	80053ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053dc:	4b78      	ldr	r3, [pc, #480]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	4975      	ldr	r1, [pc, #468]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d010      	beq.n	800541c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005406:	429a      	cmp	r2, r3
 8005408:	d908      	bls.n	800541c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	496a      	ldr	r1, [pc, #424]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	4b64      	ldr	r3, [pc, #400]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005434:	429a      	cmp	r2, r3
 8005436:	d908      	bls.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005438:	4b61      	ldr	r3, [pc, #388]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	495e      	ldr	r1, [pc, #376]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005446:	4313      	orrs	r3, r2
 8005448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	4b59      	ldr	r3, [pc, #356]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d908      	bls.n	8005478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005466:	4b56      	ldr	r3, [pc, #344]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4953      	ldr	r1, [pc, #332]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005474:	4313      	orrs	r3, r2
 8005476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4b4d      	ldr	r3, [pc, #308]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	429a      	cmp	r2, r3
 8005492:	d908      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005494:	4b4a      	ldr	r3, [pc, #296]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f023 020f 	bic.w	r2, r3, #15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4947      	ldr	r1, [pc, #284]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d055      	beq.n	800555e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054b2:	4b43      	ldr	r3, [pc, #268]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4940      	ldr	r1, [pc, #256]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054cc:	4b3c      	ldr	r3, [pc, #240]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d121      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0f6      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054e4:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0ea      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054fc:	4b30      	ldr	r3, [pc, #192]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0de      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550c:	4b2c      	ldr	r3, [pc, #176]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0d6      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800551c:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f023 0207 	bic.w	r2, r3, #7
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4925      	ldr	r1, [pc, #148]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552e:	f7fb fdb3 	bl	8001098 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005534:	e00a      	b.n	800554c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005536:	f7fb fdaf 	bl	8001098 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e0be      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554c:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	429a      	cmp	r2, r3
 800555c:	d1eb      	bne.n	8005536 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d010      	beq.n	800558c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	429a      	cmp	r2, r3
 8005578:	d208      	bcs.n	800558c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557a:	4b11      	ldr	r3, [pc, #68]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	490e      	ldr	r1, [pc, #56]	@ (80055c0 <HAL_RCC_ClockConfig+0x244>)
 8005588:	4313      	orrs	r3, r2
 800558a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d214      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 020f 	bic.w	r2, r3, #15
 80055a2:	4906      	ldr	r1, [pc, #24]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <HAL_RCC_ClockConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e086      	b.n	80056ca <HAL_RCC_ClockConfig+0x34e>
 80055bc:	52002000 	.word	0x52002000
 80055c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	4b3f      	ldr	r3, [pc, #252]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055dc:	429a      	cmp	r2, r3
 80055de:	d208      	bcs.n	80055f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055e0:	4b3c      	ldr	r3, [pc, #240]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4939      	ldr	r1, [pc, #228]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d010      	beq.n	8005620 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	4b34      	ldr	r3, [pc, #208]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800560a:	429a      	cmp	r2, r3
 800560c:	d208      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800560e:	4b31      	ldr	r3, [pc, #196]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	492e      	ldr	r1, [pc, #184]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	4b28      	ldr	r3, [pc, #160]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005638:	429a      	cmp	r2, r3
 800563a:	d208      	bcs.n	800564e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	4922      	ldr	r1, [pc, #136]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800564a:	4313      	orrs	r3, r2
 800564c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69da      	ldr	r2, [r3, #28]
 800565e:	4b1d      	ldr	r3, [pc, #116]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005666:	429a      	cmp	r2, r3
 8005668:	d208      	bcs.n	800567c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800566a:	4b1a      	ldr	r3, [pc, #104]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	4917      	ldr	r1, [pc, #92]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005678:	4313      	orrs	r3, r2
 800567a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800567c:	f000 f834 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b14      	ldr	r3, [pc, #80]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	4912      	ldr	r1, [pc, #72]	@ (80056d8 <HAL_RCC_ClockConfig+0x35c>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800569a:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <HAL_RCC_ClockConfig+0x358>)
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	4a0d      	ldr	r2, [pc, #52]	@ (80056d8 <HAL_RCC_ClockConfig+0x35c>)
 80056a4:	5cd3      	ldrb	r3, [r2, r3]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	4a0a      	ldr	r2, [pc, #40]	@ (80056dc <HAL_RCC_ClockConfig+0x360>)
 80056b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056b4:	4a0a      	ldr	r2, [pc, #40]	@ (80056e0 <HAL_RCC_ClockConfig+0x364>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_RCC_ClockConfig+0x368>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb fca0 	bl	8001004 <HAL_InitTick>
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	08009d64 	.word	0x08009d64
 80056dc:	24000004 	.word	0x24000004
 80056e0:	24000000 	.word	0x24000000
 80056e4:	24000008 	.word	0x24000008

080056e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	@ 0x24
 80056ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ee:	4bb3      	ldr	r3, [pc, #716]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056f6:	2b18      	cmp	r3, #24
 80056f8:	f200 8155 	bhi.w	80059a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80056fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005769 	.word	0x08005769
 8005708:	080059a7 	.word	0x080059a7
 800570c:	080059a7 	.word	0x080059a7
 8005710:	080059a7 	.word	0x080059a7
 8005714:	080059a7 	.word	0x080059a7
 8005718:	080059a7 	.word	0x080059a7
 800571c:	080059a7 	.word	0x080059a7
 8005720:	080059a7 	.word	0x080059a7
 8005724:	0800578f 	.word	0x0800578f
 8005728:	080059a7 	.word	0x080059a7
 800572c:	080059a7 	.word	0x080059a7
 8005730:	080059a7 	.word	0x080059a7
 8005734:	080059a7 	.word	0x080059a7
 8005738:	080059a7 	.word	0x080059a7
 800573c:	080059a7 	.word	0x080059a7
 8005740:	080059a7 	.word	0x080059a7
 8005744:	08005795 	.word	0x08005795
 8005748:	080059a7 	.word	0x080059a7
 800574c:	080059a7 	.word	0x080059a7
 8005750:	080059a7 	.word	0x080059a7
 8005754:	080059a7 	.word	0x080059a7
 8005758:	080059a7 	.word	0x080059a7
 800575c:	080059a7 	.word	0x080059a7
 8005760:	080059a7 	.word	0x080059a7
 8005764:	0800579b 	.word	0x0800579b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005768:	4b94      	ldr	r3, [pc, #592]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005774:	4b91      	ldr	r3, [pc, #580]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	4a90      	ldr	r2, [pc, #576]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005786:	e111      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005788:	4b8d      	ldr	r3, [pc, #564]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800578a:	61bb      	str	r3, [r7, #24]
      break;
 800578c:	e10e      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800578e:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005790:	61bb      	str	r3, [r7, #24]
      break;
 8005792:	e10b      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005794:	4b8c      	ldr	r3, [pc, #560]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005796:	61bb      	str	r3, [r7, #24]
      break;
 8005798:	e108      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800579a:	4b88      	ldr	r3, [pc, #544]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057a4:	4b85      	ldr	r3, [pc, #532]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057b0:	4b82      	ldr	r3, [pc, #520]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ba:	4b80      	ldr	r3, [pc, #512]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80e1 	beq.w	80059a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	f000 8083 	beq.w	80058ec <HAL_RCC_GetSysClockFreq+0x204>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f200 80a1 	bhi.w	8005930 <HAL_RCC_GetSysClockFreq+0x248>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x114>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d056      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057fa:	e099      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fc:	4b6f      	ldr	r3, [pc, #444]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02d      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005808:	4b6c      	ldr	r3, [pc, #432]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	4a6b      	ldr	r2, [pc, #428]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b62      	ldr	r3, [pc, #392]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a02 	vldr	s12, [r7, #8]
 8005846:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005862:	e087      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b51      	ldr	r3, [pc, #324]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a02 	vldr	s12, [r7, #8]
 800588a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058a6:	e065      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b40      	ldr	r3, [pc, #256]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ea:	e043      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005912:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592e:	e021      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b1e      	ldr	r3, [pc, #120]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a02 	vldr	s12, [r7, #8]
 8005956:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005972:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005974:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	0a5b      	lsrs	r3, r3, #9
 800597a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597e:	3301      	adds	r3, #1
 8005980:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800598c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005998:	ee17 3a90 	vmov	r3, s15
 800599c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800599e:	e005      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61bb      	str	r3, [r7, #24]
      break;
 80059a4:	e002      	b.n	80059ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059a6:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059a8:	61bb      	str	r3, [r7, #24]
      break;
 80059aa:	bf00      	nop
  }

  return sysclockfreq;
 80059ac:	69bb      	ldr	r3, [r7, #24]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3724      	adds	r7, #36	@ 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	003d0900 	.word	0x003d0900
 80059c8:	007a1200 	.word	0x007a1200
 80059cc:	46000000 	.word	0x46000000
 80059d0:	4c742400 	.word	0x4c742400
 80059d4:	4a742400 	.word	0x4a742400
 80059d8:	4af42400 	.word	0x4af42400

080059dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059e2:	f7ff fe81 	bl	80056e8 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b10      	ldr	r3, [pc, #64]	@ (8005a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490f      	ldr	r1, [pc, #60]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a00:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	4a09      	ldr	r2, [pc, #36]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	4a07      	ldr	r2, [pc, #28]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a1a:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a20:	4b04      	ldr	r3, [pc, #16]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	08009d64 	.word	0x08009d64
 8005a34:	24000004 	.word	0x24000004
 8005a38:	24000000 	.word	0x24000000

08005a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a40:	f7ff ffcc 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4904      	ldr	r1, [pc, #16]	@ (8005a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024400 	.word	0x58024400
 8005a64:	08009d64 	.word	0x08009d64

08005a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a6c:	f7ff ffb6 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4904      	ldr	r1, [pc, #16]	@ (8005a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	08009d64 	.word	0x08009d64

08005a94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a98:	b0c6      	sub	sp, #280	@ 0x118
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ab8:	2500      	movs	r5, #0
 8005aba:	ea54 0305 	orrs.w	r3, r4, r5
 8005abe:	d049      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aca:	d02f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ad0:	d828      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ad6:	d01a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005adc:	d822      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ae6:	d007      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ae8:	e01c      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aea:	4bab      	ldr	r3, [pc, #684]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	4aaa      	ldr	r2, [pc, #680]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005af6:	e01a      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afc:	3308      	adds	r3, #8
 8005afe:	2102      	movs	r1, #2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fc25 	bl	8007350 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b0c:	e00f      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b12:	3328      	adds	r3, #40	@ 0x28
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fccc 	bl	80074b4 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b22:	e004      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b36:	4b98      	ldr	r3, [pc, #608]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b44:	4a94      	ldr	r2, [pc, #592]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b4a:	e003      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	ea58 0309 	orrs.w	r3, r8, r9
 8005b68:	d047      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d82a      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b74:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005b91 	.word	0x08005b91
 8005b80:	08005b9f 	.word	0x08005b9f
 8005b84:	08005bb5 	.word	0x08005bb5
 8005b88:	08005bd3 	.word	0x08005bd3
 8005b8c:	08005bd3 	.word	0x08005bd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b90:	4b81      	ldr	r3, [pc, #516]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	4a80      	ldr	r2, [pc, #512]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b9c:	e01a      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fbd2 	bl	8007350 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb2:	e00f      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb8:	3328      	adds	r3, #40	@ 0x28
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fc79 	bl	80074b4 <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be0:	f023 0107 	bic.w	r1, r3, #7
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	4a6b      	ldr	r2, [pc, #428]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bf0:	e003      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c06:	f04f 0b00 	mov.w	fp, #0
 8005c0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c0e:	d05b      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c18:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c1c:	d03b      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c1e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c22:	d834      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c28:	d037      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c2e:	d82e      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c34:	d033      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c3a:	d828      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c40:	d01a      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c46:	d822      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c50:	d007      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c52:	e01c      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c54:	4b50      	ldr	r3, [pc, #320]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	4a4f      	ldr	r2, [pc, #316]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c60:	e01e      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c66:	3308      	adds	r3, #8
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fb70 	bl	8007350 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c76:	e013      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	3328      	adds	r3, #40	@ 0x28
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fc17 	bl	80074b4 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c94:	e004      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cb8:	4a37      	ldr	r2, [pc, #220]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cde:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	d05d      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cf0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cf4:	d03b      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005cf6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005cfa:	d834      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d00:	d037      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d06:	d82e      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d0c:	d033      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d12:	d828      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d18:	d01a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d1e:	d822      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d28:	d007      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	4a19      	ldr	r2, [pc, #100]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d38:	e01e      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fb04 	bl	8007350 <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e013      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fbab 	bl	80074b4 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d64:	e008      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d6c:	e004      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10d      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d80:	4b05      	ldr	r3, [pc, #20]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d90:	4a01      	ldr	r2, [pc, #4]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d92:	430b      	orrs	r3, r1
 8005d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d96:	e005      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005db0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	d03a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	2b30      	cmp	r3, #48	@ 0x30
 8005dcc:	d01f      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005dce:	2b30      	cmp	r3, #48	@ 0x30
 8005dd0:	d819      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d00c      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d815      	bhi.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d019      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d111      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de2:	4baa      	ldr	r3, [pc, #680]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	4aa9      	ldr	r2, [pc, #676]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dee:	e011      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df4:	3308      	adds	r3, #8
 8005df6:	2102      	movs	r1, #2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 faa9 	bl	8007350 <RCCEx_PLL2_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e04:	e006      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e0c:	e002      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e1c:	4b9b      	ldr	r3, [pc, #620]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2a:	4a98      	ldr	r2, [pc, #608]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e30:	e003      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d051      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e64:	d035      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e6a:	d82e      	bhi.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e70:	d031      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e76:	d828      	bhi.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e7c:	d01a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e82:	d822      	bhi.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e8c:	d007      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e8e:	e01c      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e90:	4b7e      	ldr	r3, [pc, #504]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	4a7d      	ldr	r2, [pc, #500]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 fa52 	bl	8007350 <RCCEx_PLL2_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e011      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb8:	3328      	adds	r3, #40	@ 0x28
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 faf9 	bl	80074b4 <RCCEx_PLL3_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec8:	e006      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed0:	e002      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ed2:	bf00      	nop
 8005ed4:	e000      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	4a67      	ldr	r2, [pc, #412]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005efa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d053      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f28:	d033      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f2e:	d82c      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f34:	d02f      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f3a:	d826      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f40:	d02b      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f46:	d820      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4c:	d012      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f52:	d81a      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d022      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5c:	d115      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	3308      	adds	r3, #8
 8005f64:	2101      	movs	r1, #1
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f9f2 	bl	8007350 <RCCEx_PLL2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f72:	e015      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f78:	3328      	adds	r3, #40	@ 0x28
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 fa99 	bl	80074b4 <RCCEx_PLL3_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f90:	e006      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f92:	bf00      	nop
 8005f94:	e004      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f96:	bf00      	nop
 8005f98:	e002      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fa8:	4b38      	ldr	r3, [pc, #224]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb6:	4a35      	ldr	r2, [pc, #212]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fbc:	e003      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fdc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	d058      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff2:	d033      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ff8:	d82c      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffe:	d02f      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006004:	d826      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800600a:	d02b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800600c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006010:	d820      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006016:	d012      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601c:	d81a      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d022      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006026:	d115      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	3308      	adds	r3, #8
 800602e:	2101      	movs	r1, #1
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f98d 	bl	8007350 <RCCEx_PLL2_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800603c:	e015      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006042:	3328      	adds	r3, #40	@ 0x28
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fa34 	bl	80074b4 <RCCEx_PLL3_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006052:	e00a      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800605a:	e006      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800605c:	bf00      	nop
 800605e:	e004      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10e      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006076:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006082:	4a02      	ldr	r2, [pc, #8]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6593      	str	r3, [r2, #88]	@ 0x58
 8006088:	e006      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800608a:	bf00      	nop
 800608c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d037      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c2:	d00e      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c8:	d816      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80060ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d2:	d111      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4bc4      	ldr	r3, [pc, #784]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	4ac3      	ldr	r2, [pc, #780]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060e0:	e00f      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	3308      	adds	r3, #8
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f930 	bl	8007350 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800610a:	4bb7      	ldr	r3, [pc, #732]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006118:	4ab3      	ldr	r2, [pc, #716]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611a:	430b      	orrs	r3, r1
 800611c:	6513      	str	r3, [r2, #80]	@ 0x50
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006138:	2300      	movs	r3, #0
 800613a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800613e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d039      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614e:	2b03      	cmp	r3, #3
 8006150:	d81c      	bhi.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006152:	a201      	add	r2, pc, #4	@ (adr r2, 8006158 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006195 	.word	0x08006195
 800615c:	08006169 	.word	0x08006169
 8006160:	08006177 	.word	0x08006177
 8006164:	08006195 	.word	0x08006195
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006168:	4b9f      	ldr	r3, [pc, #636]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	4a9e      	ldr	r2, [pc, #632]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006174:	e00f      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	3308      	adds	r3, #8
 800617c:	2102      	movs	r1, #2
 800617e:	4618      	mov	r0, r3
 8006180:	f001 f8e6 	bl	8007350 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800618a:	e004      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800619e:	4b92      	ldr	r3, [pc, #584]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a2:	f023 0103 	bic.w	r1, r3, #3
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ac:	4a8e      	ldr	r2, [pc, #568]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ae:	430b      	orrs	r3, r1
 80061b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061b2:	e003      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061cc:	2300      	movs	r3, #0
 80061ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	f000 8099 	beq.w	8006310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061de:	4b83      	ldr	r3, [pc, #524]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a82      	ldr	r2, [pc, #520]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ea:	f7fa ff55 	bl	8001098 <HAL_GetTick>
 80061ee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f2:	e00b      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f4:	f7fa ff50 	bl	8001098 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b64      	cmp	r3, #100	@ 0x64
 8006202:	d903      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800620a:	e005      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620c:	4b77      	ldr	r3, [pc, #476]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ed      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800621c:	2b00      	cmp	r3, #0
 800621e:	d173      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006220:	4b71      	ldr	r3, [pc, #452]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006222:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800622c:	4053      	eors	r3, r2
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d015      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006236:	4b6c      	ldr	r3, [pc, #432]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006242:	4b69      	ldr	r3, [pc, #420]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006246:	4a68      	ldr	r2, [pc, #416]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800624e:	4b66      	ldr	r3, [pc, #408]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	4a65      	ldr	r2, [pc, #404]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006258:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800625a:	4a63      	ldr	r2, [pc, #396]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006260:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800626a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800626e:	d118      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fa ff12 	bl	8001098 <HAL_GetTick>
 8006274:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006278:	e00d      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627a:	f7fa ff0d 	bl	8001098 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	f241 3388 	movw	r3, #5000	@ 0x1388
 800628a:	429a      	cmp	r2, r3
 800628c:	d903      	bls.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006294:	e005      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006296:	4b54      	ldr	r3, [pc, #336]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0eb      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d129      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ba:	d10e      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062bc:	4b4a      	ldr	r3, [pc, #296]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062cc:	091a      	lsrs	r2, r3, #4
 80062ce:	4b48      	ldr	r3, [pc, #288]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	4a45      	ldr	r2, [pc, #276]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6113      	str	r3, [r2, #16]
 80062d8:	e005      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80062da:	4b43      	ldr	r3, [pc, #268]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	4a42      	ldr	r2, [pc, #264]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e4:	6113      	str	r3, [r2, #16]
 80062e6:	4b40      	ldr	r3, [pc, #256]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f6:	4a3c      	ldr	r2, [pc, #240]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fc:	e008      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006302:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006306:	e003      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800630c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f002 0301 	and.w	r3, r2, #1
 800631c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006320:	2300      	movs	r3, #0
 8006322:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006326:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	f000 808f 	beq.w	8006450 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006338:	2b28      	cmp	r3, #40	@ 0x28
 800633a:	d871      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800633c:	a201      	add	r2, pc, #4	@ (adr r2, 8006344 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006429 	.word	0x08006429
 8006348:	08006421 	.word	0x08006421
 800634c:	08006421 	.word	0x08006421
 8006350:	08006421 	.word	0x08006421
 8006354:	08006421 	.word	0x08006421
 8006358:	08006421 	.word	0x08006421
 800635c:	08006421 	.word	0x08006421
 8006360:	08006421 	.word	0x08006421
 8006364:	080063f5 	.word	0x080063f5
 8006368:	08006421 	.word	0x08006421
 800636c:	08006421 	.word	0x08006421
 8006370:	08006421 	.word	0x08006421
 8006374:	08006421 	.word	0x08006421
 8006378:	08006421 	.word	0x08006421
 800637c:	08006421 	.word	0x08006421
 8006380:	08006421 	.word	0x08006421
 8006384:	0800640b 	.word	0x0800640b
 8006388:	08006421 	.word	0x08006421
 800638c:	08006421 	.word	0x08006421
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006421 	.word	0x08006421
 80063a4:	08006429 	.word	0x08006429
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006421 	.word	0x08006421
 80063b0:	08006421 	.word	0x08006421
 80063b4:	08006421 	.word	0x08006421
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	08006429 	.word	0x08006429
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006421 	.word	0x08006421
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006421 	.word	0x08006421
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006421 	.word	0x08006421
 80063e4:	08006429 	.word	0x08006429
 80063e8:	58024400 	.word	0x58024400
 80063ec:	58024800 	.word	0x58024800
 80063f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	3308      	adds	r3, #8
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 ffa7 	bl	8007350 <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f84e 	bl	80074b4 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800641e:	e004      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006432:	4bbf      	ldr	r3, [pc, #764]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006440:	4abb      	ldr	r2, [pc, #748]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006442:	430b      	orrs	r3, r1
 8006444:	6553      	str	r3, [r2, #84]	@ 0x54
 8006446:	e003      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800644c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f002 0302 	and.w	r3, r2, #2
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006466:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d041      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006476:	2b05      	cmp	r3, #5
 8006478:	d824      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064cd 	.word	0x080064cd
 8006484:	08006499 	.word	0x08006499
 8006488:	080064af 	.word	0x080064af
 800648c:	080064cd 	.word	0x080064cd
 8006490:	080064cd 	.word	0x080064cd
 8006494:	080064cd 	.word	0x080064cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	3308      	adds	r3, #8
 800649e:	2101      	movs	r1, #1
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 ff55 	bl	8007350 <RCCEx_PLL2_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ac:	e00f      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b2:	3328      	adds	r3, #40	@ 0x28
 80064b4:	2101      	movs	r1, #1
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fffc 	bl	80074b4 <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ca:	e000      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80064cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064d6:	4b96      	ldr	r3, [pc, #600]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	f023 0107 	bic.w	r1, r3, #7
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e4:	4a92      	ldr	r2, [pc, #584]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ea:	e003      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f002 0304 	and.w	r3, r2, #4
 8006500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800650a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800650e:	460b      	mov	r3, r1
 8006510:	4313      	orrs	r3, r2
 8006512:	d044      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651c:	2b05      	cmp	r3, #5
 800651e:	d825      	bhi.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006520:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006575 	.word	0x08006575
 800652c:	08006541 	.word	0x08006541
 8006530:	08006557 	.word	0x08006557
 8006534:	08006575 	.word	0x08006575
 8006538:	08006575 	.word	0x08006575
 800653c:	08006575 	.word	0x08006575
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006544:	3308      	adds	r3, #8
 8006546:	2101      	movs	r1, #1
 8006548:	4618      	mov	r0, r3
 800654a:	f000 ff01 	bl	8007350 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006554:	e00f      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	3328      	adds	r3, #40	@ 0x28
 800655c:	2101      	movs	r1, #1
 800655e:	4618      	mov	r0, r3
 8006560:	f000 ffa8 	bl	80074b4 <RCCEx_PLL3_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800656a:	e004      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006572:	e000      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657e:	4b6c      	ldr	r3, [pc, #432]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006582:	f023 0107 	bic.w	r1, r3, #7
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658e:	4a68      	ldr	r2, [pc, #416]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006590:	430b      	orrs	r3, r1
 8006592:	6593      	str	r3, [r2, #88]	@ 0x58
 8006594:	e003      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f002 0320 	and.w	r3, r2, #32
 80065aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065ae:	2300      	movs	r3, #0
 80065b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4313      	orrs	r3, r2
 80065bc:	d055      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ca:	d033      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80065cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d0:	d82c      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d6:	d02f      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065dc:	d826      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e2:	d02b      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80065e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065e8:	d820      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ee:	d012      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80065f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065f4:	d81a      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d022      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065fe:	d115      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	3308      	adds	r3, #8
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fea1 	bl	8007350 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006614:	e015      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	3328      	adds	r3, #40	@ 0x28
 800661c:	2102      	movs	r1, #2
 800661e:	4618      	mov	r0, r3
 8006620:	f000 ff48 	bl	80074b4 <RCCEx_PLL3_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800662a:	e00a      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006632:	e006      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006634:	bf00      	nop
 8006636:	e004      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006638:	bf00      	nop
 800663a:	e002      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800664a:	4b39      	ldr	r3, [pc, #228]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800665a:	4a35      	ldr	r2, [pc, #212]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800665c:	430b      	orrs	r3, r1
 800665e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006666:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006676:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800667a:	2300      	movs	r3, #0
 800667c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006680:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d058      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006692:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006696:	d033      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006698:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800669c:	d82c      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a2:	d02f      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a8:	d826      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ae:	d02b      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066b4:	d820      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ba:	d012      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c0:	d81a      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d022      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ca:	d115      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	3308      	adds	r3, #8
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fe3b 	bl	8007350 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066e0:	e015      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	3328      	adds	r3, #40	@ 0x28
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fee2 	bl	80074b4 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066f6:	e00a      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066fe:	e006      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006700:	bf00      	nop
 8006702:	e004      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006704:	bf00      	nop
 8006706:	e002      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800670c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10e      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006726:	4a02      	ldr	r2, [pc, #8]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6593      	str	r3, [r2, #88]	@ 0x58
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800672e:	bf00      	nop
 8006730:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800674c:	2300      	movs	r3, #0
 800674e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006752:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006756:	460b      	mov	r3, r1
 8006758:	4313      	orrs	r3, r2
 800675a:	d055      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006764:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006768:	d033      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800676a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800676e:	d82c      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006774:	d02f      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800677a:	d826      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800677c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006780:	d02b      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006782:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006786:	d820      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800678c:	d012      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800678e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006792:	d81a      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d022      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800679c:	d115      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	3308      	adds	r3, #8
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fdd2 	bl	8007350 <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067b2:	e015      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b8:	3328      	adds	r3, #40	@ 0x28
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fe79 	bl	80074b4 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067c8:	e00a      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067d0:	e006      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067d2:	bf00      	nop
 80067d4:	e004      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067d6:	bf00      	nop
 80067d8:	e002      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80067de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10b      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067e8:	4ba0      	ldr	r3, [pc, #640]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067f8:	4a9c      	ldr	r2, [pc, #624]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 0308 	and.w	r3, r2, #8
 8006814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800681e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d01e      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006834:	d10c      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	3328      	adds	r3, #40	@ 0x28
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fe38 	bl	80074b4 <RCCEx_PLL3_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006850:	4b86      	ldr	r3, [pc, #536]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006854:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006860:	4a82      	ldr	r2, [pc, #520]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006862:	430b      	orrs	r3, r1
 8006864:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f002 0310 	and.w	r3, r2, #16
 8006872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800687c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d01e      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006892:	d10c      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	3328      	adds	r3, #40	@ 0x28
 800689a:	2102      	movs	r1, #2
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fe09 	bl	80074b4 <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068ae:	4b6f      	ldr	r3, [pc, #444]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068be:	4a6b      	ldr	r2, [pc, #428]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068d2:	2300      	movs	r3, #0
 80068d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068da:	460b      	mov	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	d03e      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ec:	d022      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f2:	d81b      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068fc:	d00b      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068fe:	e015      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	3308      	adds	r3, #8
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fd21 	bl	8007350 <RCCEx_PLL2_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006914:	e00f      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	3328      	adds	r3, #40	@ 0x28
 800691c:	2102      	movs	r1, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fdc8 	bl	80074b4 <RCCEx_PLL3_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800692a:	e004      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800693e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800694e:	4a47      	ldr	r2, [pc, #284]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6593      	str	r3, [r2, #88]	@ 0x58
 8006954:	e003      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800696a:	673b      	str	r3, [r7, #112]	@ 0x70
 800696c:	2300      	movs	r3, #0
 800696e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006970:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d03b      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006982:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006986:	d01f      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006988:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800698c:	d818      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006992:	d003      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006998:	d007      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800699a:	e011      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b33      	ldr	r3, [pc, #204]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	4a32      	ldr	r2, [pc, #200]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069a8:	e00f      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ae:	3328      	adds	r3, #40	@ 0x28
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fd7e 	bl	80074b4 <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d2:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069e2:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80069e8:	e003      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a00:	2300      	movs	r3, #0
 8006a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d034      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1c:	d007      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a1e:	e011      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4b12      	ldr	r3, [pc, #72]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a11      	ldr	r2, [pc, #68]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a2c:	e00e      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	3308      	adds	r3, #8
 8006a34:	2102      	movs	r1, #2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fc8a 	bl	8007350 <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a42:	e003      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a54:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	4a02      	ldr	r2, [pc, #8]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a6a:	bf00      	nop
 8006a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a86:	2300      	movs	r3, #0
 8006a88:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d00c      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	3328      	adds	r3, #40	@ 0x28
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fd09 	bl	80074b4 <RCCEx_PLL3_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006abc:	2300      	movs	r3, #0
 8006abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ac0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d036      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad4:	d018      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ada:	d811      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae0:	d014      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae6:	d80b      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af0:	d106      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af2:	4bb7      	ldr	r3, [pc, #732]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	4ab6      	ldr	r2, [pc, #728]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006afe:	e008      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b06:	e004      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b1a:	4bad      	ldr	r3, [pc, #692]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b28:	4aa9      	ldr	r2, [pc, #676]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b2e:	e003      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b46:	2300      	movs	r3, #0
 8006b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4313      	orrs	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b54:	4b9e      	ldr	r3, [pc, #632]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b62:	4a9b      	ldr	r2, [pc, #620]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b76:	2300      	movs	r3, #0
 8006b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b84:	4b92      	ldr	r3, [pc, #584]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b88:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b92:	4a8f      	ldr	r2, [pc, #572]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006baa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb4:	4b86      	ldr	r3, [pc, #536]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	4a85      	ldr	r2, [pc, #532]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bbe:	6113      	str	r3, [r2, #16]
 8006bc0:	4b83      	ldr	r3, [pc, #524]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc2:	6919      	ldr	r1, [r3, #16]
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006bcc:	4a80      	ldr	r2, [pc, #512]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006be0:	2300      	movs	r3, #0
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006be8:	460b      	mov	r3, r1
 8006bea:	4313      	orrs	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bee:	4b78      	ldr	r3, [pc, #480]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfc:	4a74      	ldr	r2, [pc, #464]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	d00a      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c22:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	4a68      	ldr	r2, [pc, #416]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d011      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	3308      	adds	r3, #8
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fb79 	bl	8007350 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	6239      	str	r1, [r7, #32]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	d011      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	3308      	adds	r3, #8
 8006c96:	2101      	movs	r1, #1
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fb59 	bl	8007350 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	61b9      	str	r1, [r7, #24]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d011      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fb39 	bl	8007350 <RCCEx_PLL2_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6139      	str	r1, [r7, #16]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d011      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	3328      	adds	r3, #40	@ 0x28
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fbcb 	bl	80074b4 <RCCEx_PLL3_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	d011      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	3328      	adds	r3, #40	@ 0x28
 8006d56:	2101      	movs	r1, #1
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fbab 	bl	80074b4 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6039      	str	r1, [r7, #0]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d011      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fb8b 	bl	80074b4 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006db4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400

08006dd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006dd8:	f7fe fe00 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	091b      	lsrs	r3, r3, #4
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	4904      	ldr	r1, [pc, #16]	@ (8006dfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006dea:	5ccb      	ldrb	r3, [r1, r3]
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	08009d64 	.word	0x08009d64

08006e00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	@ 0x24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e08:	4ba1      	ldr	r3, [pc, #644]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e12:	4b9f      	ldr	r3, [pc, #636]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	0b1b      	lsrs	r3, r3, #12
 8006e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e2a:	4b99      	ldr	r3, [pc, #612]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2e:	08db      	lsrs	r3, r3, #3
 8006e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8111 	beq.w	8007070 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	f000 8083 	beq.w	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	f200 80a1 	bhi.w	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d056      	beq.n	8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e6a:	e099      	b.n	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e6c:	4b88      	ldr	r3, [pc, #544]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d02d      	beq.n	8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e78:	4b85      	ldr	r3, [pc, #532]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	4a84      	ldr	r2, [pc, #528]	@ (8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
 8006e88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ed2:	e087      	b.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800709c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f16:	e065      	b.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b59      	ldr	r3, [pc, #356]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5a:	e043      	b.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b48      	ldr	r3, [pc, #288]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9e:	e021      	b.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b37      	ldr	r3, [pc, #220]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe8:	0a5b      	lsrs	r3, r3, #9
 8006fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ffe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800700a:	ee17 2a90 	vmov	r2, s15
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007012:	4b1f      	ldr	r3, [pc, #124]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800702c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007038:	ee17 2a90 	vmov	r2, s15
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007040:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	0e1b      	lsrs	r3, r3, #24
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800705a:	edd7 6a07 	vldr	s13, [r7, #28]
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800706e:	e008      	b.n	8007082 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	609a      	str	r2, [r3, #8]
}
 8007082:	bf00      	nop
 8007084:	3724      	adds	r7, #36	@ 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	58024400 	.word	0x58024400
 8007094:	03d09000 	.word	0x03d09000
 8007098:	46000000 	.word	0x46000000
 800709c:	4c742400 	.word	0x4c742400
 80070a0:	4a742400 	.word	0x4a742400
 80070a4:	4af42400 	.word	0x4af42400

080070a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b089      	sub	sp, #36	@ 0x24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070b0:	4ba1      	ldr	r3, [pc, #644]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070ba:	4b9f      	ldr	r3, [pc, #636]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070d2:	4b99      	ldr	r3, [pc, #612]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	08db      	lsrs	r3, r3, #3
 80070d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	fb02 f303 	mul.w	r3, r2, r3
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8111 	beq.w	8007318 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	f000 8083 	beq.w	8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b02      	cmp	r3, #2
 8007102:	f200 80a1 	bhi.w	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d056      	beq.n	80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007112:	e099      	b.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007114:	4b88      	ldr	r3, [pc, #544]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02d      	beq.n	800717c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007120:	4b85      	ldr	r3, [pc, #532]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	4a84      	ldr	r2, [pc, #528]	@ (800733c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714a:	4b7b      	ldr	r3, [pc, #492]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a03 	vldr	s12, [r7, #12]
 800715e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800716e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007176:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800717a:	e087      	b.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007344 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800718a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718e:	4b6a      	ldr	r3, [pc, #424]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719e:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071be:	e065      	b.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b59      	ldr	r3, [pc, #356]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007202:	e043      	b.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800734c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b48      	ldr	r3, [pc, #288]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a03 	vldr	s12, [r7, #12]
 800722a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007246:	e021      	b.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b37      	ldr	r3, [pc, #220]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	0a5b      	lsrs	r3, r3, #9
 8007292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b2:	ee17 2a90 	vmov	r2, s15
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e0:	ee17 2a90 	vmov	r2, s15
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80072e8:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ec:	0e1b      	lsrs	r3, r3, #24
 80072ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007302:	edd7 6a07 	vldr	s13, [r7, #28]
 8007306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730e:	ee17 2a90 	vmov	r2, s15
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007316:	e008      	b.n	800732a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
}
 800732a:	bf00      	nop
 800732c:	3724      	adds	r7, #36	@ 0x24
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	58024400 	.word	0x58024400
 800733c:	03d09000 	.word	0x03d09000
 8007340:	46000000 	.word	0x46000000
 8007344:	4c742400 	.word	0x4c742400
 8007348:	4a742400 	.word	0x4a742400
 800734c:	4af42400 	.word	0x4af42400

08007350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800735e:	4b53      	ldr	r3, [pc, #332]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d101      	bne.n	800736e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e099      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800736e:	4b4f      	ldr	r3, [pc, #316]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a4e      	ldr	r2, [pc, #312]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007374:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7f9 fe8d 	bl	8001098 <HAL_GetTick>
 800737e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007380:	e008      	b.n	8007394 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007382:	f7f9 fe89 	bl	8001098 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e086      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073a0:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	493f      	ldr	r1, [pc, #252]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	025b      	lsls	r3, r3, #9
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	3b01      	subs	r3, #1
 80073de:	061b      	lsls	r3, r3, #24
 80073e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073e4:	4931      	ldr	r1, [pc, #196]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073ea:	4b30      	ldr	r3, [pc, #192]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	492d      	ldr	r1, [pc, #180]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	f023 0220 	bic.w	r2, r3, #32
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4928      	ldr	r1, [pc, #160]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800740e:	4b27      	ldr	r3, [pc, #156]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4a26      	ldr	r2, [pc, #152]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007414:	f023 0310 	bic.w	r3, r3, #16
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800741a:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800741c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800741e:	4b24      	ldr	r3, [pc, #144]	@ (80074b0 <RCCEx_PLL2_Config+0x160>)
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	69d2      	ldr	r2, [r2, #28]
 8007426:	00d2      	lsls	r2, r2, #3
 8007428:	4920      	ldr	r1, [pc, #128]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800742e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007434:	f043 0310 	orr.w	r3, r3, #16
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007440:	4b1a      	ldr	r3, [pc, #104]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a19      	ldr	r2, [pc, #100]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007446:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800744c:	e00f      	b.n	800746e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007454:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 800745a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e005      	b.n	800746e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800746c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a0e      	ldr	r2, [pc, #56]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7f9 fe0d 	bl	8001098 <HAL_GetTick>
 800747e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007480:	e008      	b.n	8007494 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007482:	f7f9 fe09 	bl	8001098 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e006      	b.n	80074a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <RCCEx_PLL2_Config+0x15c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0f0      	beq.n	8007482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
 80074b0:	ffff0007 	.word	0xffff0007

080074b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074c2:	4b53      	ldr	r3, [pc, #332]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d101      	bne.n	80074d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e099      	b.n	8007606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074de:	f7f9 fddb 	bl	8001098 <HAL_GetTick>
 80074e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e4:	e008      	b.n	80074f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074e6:	f7f9 fdd7 	bl	8001098 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e086      	b.n	8007606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074f8:	4b45      	ldr	r3, [pc, #276]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f0      	bne.n	80074e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007504:	4b42      	ldr	r3, [pc, #264]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007508:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	051b      	lsls	r3, r3, #20
 8007512:	493f      	ldr	r1, [pc, #252]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007514:	4313      	orrs	r3, r2
 8007516:	628b      	str	r3, [r1, #40]	@ 0x28
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	3b01      	subs	r3, #1
 800751e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	3b01      	subs	r3, #1
 8007528:	025b      	lsls	r3, r3, #9
 800752a:	b29b      	uxth	r3, r3
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	3b01      	subs	r3, #1
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007548:	4931      	ldr	r1, [pc, #196]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800754a:	4313      	orrs	r3, r2
 800754c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800754e:	4b30      	ldr	r3, [pc, #192]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	492d      	ldr	r1, [pc, #180]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800755c:	4313      	orrs	r3, r2
 800755e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007560:	4b2b      	ldr	r3, [pc, #172]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007564:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	4928      	ldr	r1, [pc, #160]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800756e:	4313      	orrs	r3, r2
 8007570:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007572:	4b27      	ldr	r3, [pc, #156]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007576:	4a26      	ldr	r2, [pc, #152]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800757c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800757e:	4b24      	ldr	r3, [pc, #144]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007582:	4b24      	ldr	r3, [pc, #144]	@ (8007614 <RCCEx_PLL3_Config+0x160>)
 8007584:	4013      	ands	r3, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	69d2      	ldr	r2, [r2, #28]
 800758a:	00d2      	lsls	r2, r2, #3
 800758c:	4920      	ldr	r1, [pc, #128]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007592:	4b1f      	ldr	r3, [pc, #124]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	4a1e      	ldr	r2, [pc, #120]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 8007598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a19      	ldr	r2, [pc, #100]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b0:	e00f      	b.n	80075d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d106      	bne.n	80075c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075b8:	4b15      	ldr	r3, [pc, #84]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	4a14      	ldr	r2, [pc, #80]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075c4:	e005      	b.n	80075d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075c6:	4b12      	ldr	r3, [pc, #72]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a11      	ldr	r2, [pc, #68]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075de:	f7f9 fd5b 	bl	8001098 <HAL_GetTick>
 80075e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e4:	e008      	b.n	80075f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075e6:	f7f9 fd57 	bl	8001098 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e006      	b.n	8007606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	58024400 	.word	0x58024400
 8007614:	ffff0007 	.word	0xffff0007

08007618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e042      	b.n	80076b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7f9 fbcf 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2224      	movs	r2, #36	@ 0x24
 8007646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0201 	bic.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fbdc 	bl	8008e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fd6d 	bl	8008148 <UART_SetConfig>
 800766e:	4603      	mov	r3, r0
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e01b      	b.n	80076b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fc5b 	bl	8008f64 <UART_CheckIdleState>
 80076ae:	4603      	mov	r3, r0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	@ 0x28
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d17b      	bne.n	80077ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_UART_Transmit+0x26>
 80076d8:	88fb      	ldrh	r3, [r7, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e074      	b.n	80077cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2221      	movs	r2, #33	@ 0x21
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076f2:	f7f9 fcd1 	bl	8001098 <HAL_GetTick>
 80076f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007710:	d108      	bne.n	8007724 <HAL_UART_Transmit+0x6c>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e003      	b.n	800772c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800772c:	e030      	b.n	8007790 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	2180      	movs	r1, #128	@ 0x80
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f001 fcbd 	bl	80090b8 <UART_WaitOnFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e03d      	b.n	80077cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007764:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3302      	adds	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e007      	b.n	800777e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1c8      	bne.n	800772e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2200      	movs	r2, #0
 80077a4:	2140      	movs	r1, #64	@ 0x40
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f001 fc86 	bl	80090b8 <UART_WaitOnFlagUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e006      	b.n	80077cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e000      	b.n	80077cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3720      	adds	r7, #32
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b091      	sub	sp, #68	@ 0x44
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d178      	bne.n	80078de <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_UART_Transmit_IT+0x24>
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e071      	b.n	80078e0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	88fa      	ldrh	r2, [r7, #6]
 8007806:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2221      	movs	r2, #33	@ 0x21
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800782c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007830:	d12a      	bne.n	8007888 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783a:	d107      	bne.n	800784c <HAL_UART_Transmit_IT+0x78>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4a29      	ldr	r2, [pc, #164]	@ (80078ec <HAL_UART_Transmit_IT+0x118>)
 8007848:	679a      	str	r2, [r3, #120]	@ 0x78
 800784a:	e002      	b.n	8007852 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a28      	ldr	r2, [pc, #160]	@ (80078f0 <HAL_UART_Transmit_IT+0x11c>)
 8007850:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007872:	637a      	str	r2, [r7, #52]	@ 0x34
 8007874:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <HAL_UART_Transmit_IT+0x7e>
 8007886:	e028      	b.n	80078da <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007890:	d107      	bne.n	80078a2 <HAL_UART_Transmit_IT+0xce>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	4a15      	ldr	r2, [pc, #84]	@ (80078f4 <HAL_UART_Transmit_IT+0x120>)
 800789e:	679a      	str	r2, [r3, #120]	@ 0x78
 80078a0:	e002      	b.n	80078a8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a14      	ldr	r2, [pc, #80]	@ (80078f8 <HAL_UART_Transmit_IT+0x124>)
 80078a6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	613b      	str	r3, [r7, #16]
   return(result);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e000      	b.n	80078e0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3744      	adds	r7, #68	@ 0x44
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	0800989d 	.word	0x0800989d
 80078f0:	080097bd 	.word	0x080097bd
 80078f4:	080096fb 	.word	0x080096fb
 80078f8:	08009643 	.word	0x08009643

080078fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	@ 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007910:	2b20      	cmp	r3, #32
 8007912:	d137      	bne.n	8007984 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <HAL_UART_Receive_DMA+0x24>
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e030      	b.n	8007986 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a18      	ldr	r2, [pc, #96]	@ (8007990 <HAL_UART_Receive_DMA+0x94>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01f      	beq.n	8007974 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d018      	beq.n	8007974 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	613b      	str	r3, [r7, #16]
   return(result);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	623b      	str	r3, [r7, #32]
 8007962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	69f9      	ldr	r1, [r7, #28]
 8007966:	6a3a      	ldr	r2, [r7, #32]
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	61bb      	str	r3, [r7, #24]
   return(result);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e6      	bne.n	8007942 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	461a      	mov	r2, r3
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f001 fc0a 	bl	8009194 <UART_Start_Receive_DMA>
 8007980:	4603      	mov	r3, r0
 8007982:	e000      	b.n	8007986 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3728      	adds	r7, #40	@ 0x28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	58000c00 	.word	0x58000c00

08007994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b0ba      	sub	sp, #232	@ 0xe8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80079be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80079c2:	4013      	ands	r3, r2
 80079c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80079c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d11b      	bne.n	8007a08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8377 	beq.w	80080ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
      }
      return;
 8007a06:	e371      	b.n	80080ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 8123 	beq.w	8007c58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a16:	4b8d      	ldr	r3, [pc, #564]	@ (8007c4c <HAL_UART_IRQHandler+0x2b8>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a22:	4b8b      	ldr	r3, [pc, #556]	@ (8007c50 <HAL_UART_IRQHandler+0x2bc>)
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8116 	beq.w	8007c58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d011      	beq.n	8007a5c <HAL_UART_IRQHandler+0xc8>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d011      	beq.n	8007a8c <HAL_UART_IRQHandler+0xf8>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a82:	f043 0204 	orr.w	r2, r3, #4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d011      	beq.n	8007abc <HAL_UART_IRQHandler+0x128>
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d105      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ad4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8007c4c <HAL_UART_IRQHandler+0x2b8>)
 8007ada:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <HAL_UART_IRQHandler+0x196>
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 82dd 	beq.w	80080f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7e:	2b40      	cmp	r3, #64	@ 0x40
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d054      	beq.n	8007c38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fbe8 	bl	8009364 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ba0:	d146      	bne.n	8007c30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1d9      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d017      	beq.n	8007c28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfe:	4a15      	ldr	r2, [pc, #84]	@ (8007c54 <HAL_UART_IRQHandler+0x2c0>)
 8007c00:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fa fc55 	bl	80024b8 <HAL_DMA_Abort_IT>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d019      	beq.n	8007c48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007c22:	4610      	mov	r0, r2
 8007c24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c26:	e00f      	b.n	8007c48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa77 	bl	800811c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2e:	e00b      	b.n	8007c48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fa73 	bl	800811c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c36:	e007      	b.n	8007c48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa6f 	bl	800811c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c46:	e253      	b.n	80080f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	bf00      	nop
    return;
 8007c4a:	e251      	b.n	80080f0 <HAL_UART_IRQHandler+0x75c>
 8007c4c:	10000001 	.word	0x10000001
 8007c50:	04000120 	.word	0x04000120
 8007c54:	08009617 	.word	0x08009617

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 81e7 	bne.w	8008030 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 81e0 	beq.w	8008030 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81d9 	beq.w	8008030 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2210      	movs	r2, #16
 8007c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	f040 8151 	bne.w	8007f38 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a96      	ldr	r2, [pc, #600]	@ (8007ef8 <HAL_UART_IRQHandler+0x564>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d068      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a93      	ldr	r2, [pc, #588]	@ (8007efc <HAL_UART_IRQHandler+0x568>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d061      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a91      	ldr	r2, [pc, #580]	@ (8007f00 <HAL_UART_IRQHandler+0x56c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d05a      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8007f04 <HAL_UART_IRQHandler+0x570>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d053      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a8c      	ldr	r2, [pc, #560]	@ (8007f08 <HAL_UART_IRQHandler+0x574>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d04c      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a89      	ldr	r2, [pc, #548]	@ (8007f0c <HAL_UART_IRQHandler+0x578>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d045      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a87      	ldr	r2, [pc, #540]	@ (8007f10 <HAL_UART_IRQHandler+0x57c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d03e      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a84      	ldr	r2, [pc, #528]	@ (8007f14 <HAL_UART_IRQHandler+0x580>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d037      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a82      	ldr	r2, [pc, #520]	@ (8007f18 <HAL_UART_IRQHandler+0x584>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d030      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a7f      	ldr	r2, [pc, #508]	@ (8007f1c <HAL_UART_IRQHandler+0x588>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d029      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8007f20 <HAL_UART_IRQHandler+0x58c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d022      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a7a      	ldr	r2, [pc, #488]	@ (8007f24 <HAL_UART_IRQHandler+0x590>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01b      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a78      	ldr	r2, [pc, #480]	@ (8007f28 <HAL_UART_IRQHandler+0x594>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d014      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a75      	ldr	r2, [pc, #468]	@ (8007f2c <HAL_UART_IRQHandler+0x598>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00d      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a73      	ldr	r2, [pc, #460]	@ (8007f30 <HAL_UART_IRQHandler+0x59c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d006      	beq.n	8007d76 <HAL_UART_IRQHandler+0x3e2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a70      	ldr	r2, [pc, #448]	@ (8007f34 <HAL_UART_IRQHandler+0x5a0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d106      	bne.n	8007d84 <HAL_UART_IRQHandler+0x3f0>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	e005      	b.n	8007d90 <HAL_UART_IRQHandler+0x3fc>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 81ab 	beq.w	80080f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f080 81a3 	bcs.w	80080f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007db4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc4:	f000 8087 	beq.w	8007ed6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007df2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007df6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1da      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e1      	bne.n	8007e12 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3308      	adds	r3, #8
 8007e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e3      	bne.n	8007e4e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ea4:	f023 0310 	bic.w	r3, r3, #16
 8007ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007eb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e4      	bne.n	8007e94 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7f9 ffd3 	bl	8001e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f91d 	bl	8008130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ef6:	e0fd      	b.n	80080f4 <HAL_UART_IRQHandler+0x760>
 8007ef8:	40020010 	.word	0x40020010
 8007efc:	40020028 	.word	0x40020028
 8007f00:	40020040 	.word	0x40020040
 8007f04:	40020058 	.word	0x40020058
 8007f08:	40020070 	.word	0x40020070
 8007f0c:	40020088 	.word	0x40020088
 8007f10:	400200a0 	.word	0x400200a0
 8007f14:	400200b8 	.word	0x400200b8
 8007f18:	40020410 	.word	0x40020410
 8007f1c:	40020428 	.word	0x40020428
 8007f20:	40020440 	.word	0x40020440
 8007f24:	40020458 	.word	0x40020458
 8007f28:	40020470 	.word	0x40020470
 8007f2c:	40020488 	.word	0x40020488
 8007f30:	400204a0 	.word	0x400204a0
 8007f34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80cf 	beq.w	80080f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007f5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80ca 	beq.w	80080f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f88:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e4      	bne.n	8007f64 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	4b55      	ldr	r3, [pc, #340]	@ (8008104 <HAL_UART_IRQHandler+0x770>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	69b9      	ldr	r1, [r7, #24]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	617b      	str	r3, [r7, #20]
   return(result);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e4      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f881 	bl	8008130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800802e:	e063      	b.n	80080f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00e      	beq.n	800805a <HAL_UART_IRQHandler+0x6c6>
 800803c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fcc2 	bl	80099dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008058:	e051      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b00      	cmp	r3, #0
 8008064:	d014      	beq.n	8008090 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008082:	2b00      	cmp	r3, #0
 8008084:	d03a      	beq.n	80080fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
    }
    return;
 800808e:	e035      	b.n	80080fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d009      	beq.n	80080b0 <HAL_UART_IRQHandler+0x71c>
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 fc6c 	bl	8009986 <UART_EndTransmit_IT>
    return;
 80080ae:	e026      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <HAL_UART_IRQHandler+0x73c>
 80080bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fc9b 	bl	8009a04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ce:	e016      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d010      	beq.n	80080fe <HAL_UART_IRQHandler+0x76a>
 80080dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	da0c      	bge.n	80080fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fc83 	bl	80099f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ea:	e008      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
      return;
 80080ec:	bf00      	nop
 80080ee:	e006      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
    return;
 80080f0:	bf00      	nop
 80080f2:	e004      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
      return;
 80080f4:	bf00      	nop
 80080f6:	e002      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
      return;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HAL_UART_IRQHandler+0x76a>
    return;
 80080fc:	bf00      	nop
  }
}
 80080fe:	37e8      	adds	r7, #232	@ 0xe8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	effffffe 	.word	0xeffffffe

08008108 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800814c:	b092      	sub	sp, #72	@ 0x48
 800814e:	af00      	add	r7, sp, #0
 8008150:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	431a      	orrs	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	431a      	orrs	r2, r3
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	4313      	orrs	r3, r2
 800816e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4bbe      	ldr	r3, [pc, #760]	@ (8008470 <UART_SetConfig+0x328>)
 8008178:	4013      	ands	r3, r2
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008180:	430b      	orrs	r3, r1
 8008182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4ab3      	ldr	r2, [pc, #716]	@ (8008474 <UART_SetConfig+0x32c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081b0:	4313      	orrs	r3, r2
 80081b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	4baf      	ldr	r3, [pc, #700]	@ (8008478 <UART_SetConfig+0x330>)
 80081bc:	4013      	ands	r3, r2
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	f023 010f 	bic.w	r1, r3, #15
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4aa6      	ldr	r2, [pc, #664]	@ (800847c <UART_SetConfig+0x334>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d177      	bne.n	80082d8 <UART_SetConfig+0x190>
 80081e8:	4ba5      	ldr	r3, [pc, #660]	@ (8008480 <UART_SetConfig+0x338>)
 80081ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081f0:	2b28      	cmp	r3, #40	@ 0x28
 80081f2:	d86d      	bhi.n	80082d0 <UART_SetConfig+0x188>
 80081f4:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <UART_SetConfig+0xb4>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	080082a1 	.word	0x080082a1
 8008200:	080082d1 	.word	0x080082d1
 8008204:	080082d1 	.word	0x080082d1
 8008208:	080082d1 	.word	0x080082d1
 800820c:	080082d1 	.word	0x080082d1
 8008210:	080082d1 	.word	0x080082d1
 8008214:	080082d1 	.word	0x080082d1
 8008218:	080082d1 	.word	0x080082d1
 800821c:	080082a9 	.word	0x080082a9
 8008220:	080082d1 	.word	0x080082d1
 8008224:	080082d1 	.word	0x080082d1
 8008228:	080082d1 	.word	0x080082d1
 800822c:	080082d1 	.word	0x080082d1
 8008230:	080082d1 	.word	0x080082d1
 8008234:	080082d1 	.word	0x080082d1
 8008238:	080082d1 	.word	0x080082d1
 800823c:	080082b1 	.word	0x080082b1
 8008240:	080082d1 	.word	0x080082d1
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082d1 	.word	0x080082d1
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082d1 	.word	0x080082d1
 8008258:	080082d1 	.word	0x080082d1
 800825c:	080082b9 	.word	0x080082b9
 8008260:	080082d1 	.word	0x080082d1
 8008264:	080082d1 	.word	0x080082d1
 8008268:	080082d1 	.word	0x080082d1
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082d1 	.word	0x080082d1
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082d1 	.word	0x080082d1
 800827c:	080082c1 	.word	0x080082c1
 8008280:	080082d1 	.word	0x080082d1
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082d1 	.word	0x080082d1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e326      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e322      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e31e      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e31a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e316      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082c8:	2340      	movs	r3, #64	@ 0x40
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e312      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e30e      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a69      	ldr	r2, [pc, #420]	@ (8008484 <UART_SetConfig+0x33c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d130      	bne.n	8008344 <UART_SetConfig+0x1fc>
 80082e2:	4b67      	ldr	r3, [pc, #412]	@ (8008480 <UART_SetConfig+0x338>)
 80082e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d826      	bhi.n	800833c <UART_SetConfig+0x1f4>
 80082ee:	a201      	add	r2, pc, #4	@ (adr r2, 80082f4 <UART_SetConfig+0x1ac>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	08008325 	.word	0x08008325
 8008304:	0800832d 	.word	0x0800832d
 8008308:	08008335 	.word	0x08008335
 800830c:	2300      	movs	r3, #0
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008312:	e2f0      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008314:	2304      	movs	r3, #4
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831a:	e2ec      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800831c:	2308      	movs	r3, #8
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e2e8      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008324:	2310      	movs	r3, #16
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e2e4      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800832c:	2320      	movs	r3, #32
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e2e0      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008334:	2340      	movs	r3, #64	@ 0x40
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e2dc      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800833c:	2380      	movs	r3, #128	@ 0x80
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e2d8      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a4f      	ldr	r2, [pc, #316]	@ (8008488 <UART_SetConfig+0x340>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d130      	bne.n	80083b0 <UART_SetConfig+0x268>
 800834e:	4b4c      	ldr	r3, [pc, #304]	@ (8008480 <UART_SetConfig+0x338>)
 8008350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b05      	cmp	r3, #5
 8008358:	d826      	bhi.n	80083a8 <UART_SetConfig+0x260>
 800835a:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <UART_SetConfig+0x218>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008379 	.word	0x08008379
 8008364:	08008381 	.word	0x08008381
 8008368:	08008389 	.word	0x08008389
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	2300      	movs	r3, #0
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837e:	e2ba      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008380:	2304      	movs	r3, #4
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e2b6      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008388:	2308      	movs	r3, #8
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e2b2      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008390:	2310      	movs	r3, #16
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e2ae      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008398:	2320      	movs	r3, #32
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839e:	e2aa      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083a0:	2340      	movs	r3, #64	@ 0x40
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e2a6      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083a8:	2380      	movs	r3, #128	@ 0x80
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e2a2      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a35      	ldr	r2, [pc, #212]	@ (800848c <UART_SetConfig+0x344>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d130      	bne.n	800841c <UART_SetConfig+0x2d4>
 80083ba:	4b31      	ldr	r3, [pc, #196]	@ (8008480 <UART_SetConfig+0x338>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d826      	bhi.n	8008414 <UART_SetConfig+0x2cc>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <UART_SetConfig+0x284>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	080083fd 	.word	0x080083fd
 80083dc:	08008405 	.word	0x08008405
 80083e0:	0800840d 	.word	0x0800840d
 80083e4:	2300      	movs	r3, #0
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ea:	e284      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083ec:	2304      	movs	r3, #4
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f2:	e280      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083f4:	2308      	movs	r3, #8
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fa:	e27c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80083fc:	2310      	movs	r3, #16
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008402:	e278      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008404:	2320      	movs	r3, #32
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840a:	e274      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800840c:	2340      	movs	r3, #64	@ 0x40
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e270      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008414:	2380      	movs	r3, #128	@ 0x80
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e26c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <UART_SetConfig+0x348>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d142      	bne.n	80084ac <UART_SetConfig+0x364>
 8008426:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <UART_SetConfig+0x338>)
 8008428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b05      	cmp	r3, #5
 8008430:	d838      	bhi.n	80084a4 <UART_SetConfig+0x35c>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <UART_SetConfig+0x2f0>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008451 	.word	0x08008451
 800843c:	08008459 	.word	0x08008459
 8008440:	08008461 	.word	0x08008461
 8008444:	08008469 	.word	0x08008469
 8008448:	08008495 	.word	0x08008495
 800844c:	0800849d 	.word	0x0800849d
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e24e      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008458:	2304      	movs	r3, #4
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e24a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008460:	2308      	movs	r3, #8
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008466:	e246      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008468:	2310      	movs	r3, #16
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846e:	e242      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008470:	cfff69f3 	.word	0xcfff69f3
 8008474:	58000c00 	.word	0x58000c00
 8008478:	11fff4ff 	.word	0x11fff4ff
 800847c:	40011000 	.word	0x40011000
 8008480:	58024400 	.word	0x58024400
 8008484:	40004400 	.word	0x40004400
 8008488:	40004800 	.word	0x40004800
 800848c:	40004c00 	.word	0x40004c00
 8008490:	40005000 	.word	0x40005000
 8008494:	2320      	movs	r3, #32
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e22c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800849c:	2340      	movs	r3, #64	@ 0x40
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e228      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80084a4:	2380      	movs	r3, #128	@ 0x80
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e224      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4ab1      	ldr	r2, [pc, #708]	@ (8008778 <UART_SetConfig+0x630>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d176      	bne.n	80085a4 <UART_SetConfig+0x45c>
 80084b6:	4bb1      	ldr	r3, [pc, #708]	@ (800877c <UART_SetConfig+0x634>)
 80084b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084be:	2b28      	cmp	r3, #40	@ 0x28
 80084c0:	d86c      	bhi.n	800859c <UART_SetConfig+0x454>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <UART_SetConfig+0x380>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	0800856d 	.word	0x0800856d
 80084cc:	0800859d 	.word	0x0800859d
 80084d0:	0800859d 	.word	0x0800859d
 80084d4:	0800859d 	.word	0x0800859d
 80084d8:	0800859d 	.word	0x0800859d
 80084dc:	0800859d 	.word	0x0800859d
 80084e0:	0800859d 	.word	0x0800859d
 80084e4:	0800859d 	.word	0x0800859d
 80084e8:	08008575 	.word	0x08008575
 80084ec:	0800859d 	.word	0x0800859d
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	0800859d 	.word	0x0800859d
 80084fc:	0800859d 	.word	0x0800859d
 8008500:	0800859d 	.word	0x0800859d
 8008504:	0800859d 	.word	0x0800859d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	08008585 	.word	0x08008585
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	08008595 	.word	0x08008595
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008572:	e1c0      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e1bc      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e1b8      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e1b4      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800858c:	2320      	movs	r3, #32
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e1b0      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008594:	2340      	movs	r3, #64	@ 0x40
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e1ac      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800859c:	2380      	movs	r3, #128	@ 0x80
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e1a8      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a75      	ldr	r2, [pc, #468]	@ (8008780 <UART_SetConfig+0x638>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d130      	bne.n	8008610 <UART_SetConfig+0x4c8>
 80085ae:	4b73      	ldr	r3, [pc, #460]	@ (800877c <UART_SetConfig+0x634>)
 80085b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d826      	bhi.n	8008608 <UART_SetConfig+0x4c0>
 80085ba:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <UART_SetConfig+0x478>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	080085f1 	.word	0x080085f1
 80085d0:	080085f9 	.word	0x080085f9
 80085d4:	08008601 	.word	0x08008601
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085de:	e18a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80085e0:	2304      	movs	r3, #4
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e6:	e186      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ee:	e182      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f6:	e17e      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80085f8:	2320      	movs	r3, #32
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e17a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008600:	2340      	movs	r3, #64	@ 0x40
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e176      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008608:	2380      	movs	r3, #128	@ 0x80
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e172      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a5b      	ldr	r2, [pc, #364]	@ (8008784 <UART_SetConfig+0x63c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d130      	bne.n	800867c <UART_SetConfig+0x534>
 800861a:	4b58      	ldr	r3, [pc, #352]	@ (800877c <UART_SetConfig+0x634>)
 800861c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b05      	cmp	r3, #5
 8008624:	d826      	bhi.n	8008674 <UART_SetConfig+0x52c>
 8008626:	a201      	add	r2, pc, #4	@ (adr r2, 800862c <UART_SetConfig+0x4e4>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008645 	.word	0x08008645
 8008630:	0800864d 	.word	0x0800864d
 8008634:	08008655 	.word	0x08008655
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008665 	.word	0x08008665
 8008640:	0800866d 	.word	0x0800866d
 8008644:	2300      	movs	r3, #0
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864a:	e154      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800864c:	2304      	movs	r3, #4
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008652:	e150      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008654:	2308      	movs	r3, #8
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865a:	e14c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800865c:	2310      	movs	r3, #16
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008662:	e148      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008664:	2320      	movs	r3, #32
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e144      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800866c:	2340      	movs	r3, #64	@ 0x40
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e140      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e13c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a41      	ldr	r2, [pc, #260]	@ (8008788 <UART_SetConfig+0x640>)
 8008682:	4293      	cmp	r3, r2
 8008684:	f040 8082 	bne.w	800878c <UART_SetConfig+0x644>
 8008688:	4b3c      	ldr	r3, [pc, #240]	@ (800877c <UART_SetConfig+0x634>)
 800868a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800868c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008690:	2b28      	cmp	r3, #40	@ 0x28
 8008692:	d86d      	bhi.n	8008770 <UART_SetConfig+0x628>
 8008694:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <UART_SetConfig+0x554>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	08008741 	.word	0x08008741
 80086a0:	08008771 	.word	0x08008771
 80086a4:	08008771 	.word	0x08008771
 80086a8:	08008771 	.word	0x08008771
 80086ac:	08008771 	.word	0x08008771
 80086b0:	08008771 	.word	0x08008771
 80086b4:	08008771 	.word	0x08008771
 80086b8:	08008771 	.word	0x08008771
 80086bc:	08008749 	.word	0x08008749
 80086c0:	08008771 	.word	0x08008771
 80086c4:	08008771 	.word	0x08008771
 80086c8:	08008771 	.word	0x08008771
 80086cc:	08008771 	.word	0x08008771
 80086d0:	08008771 	.word	0x08008771
 80086d4:	08008771 	.word	0x08008771
 80086d8:	08008771 	.word	0x08008771
 80086dc:	08008751 	.word	0x08008751
 80086e0:	08008771 	.word	0x08008771
 80086e4:	08008771 	.word	0x08008771
 80086e8:	08008771 	.word	0x08008771
 80086ec:	08008771 	.word	0x08008771
 80086f0:	08008771 	.word	0x08008771
 80086f4:	08008771 	.word	0x08008771
 80086f8:	08008771 	.word	0x08008771
 80086fc:	08008759 	.word	0x08008759
 8008700:	08008771 	.word	0x08008771
 8008704:	08008771 	.word	0x08008771
 8008708:	08008771 	.word	0x08008771
 800870c:	08008771 	.word	0x08008771
 8008710:	08008771 	.word	0x08008771
 8008714:	08008771 	.word	0x08008771
 8008718:	08008771 	.word	0x08008771
 800871c:	08008761 	.word	0x08008761
 8008720:	08008771 	.word	0x08008771
 8008724:	08008771 	.word	0x08008771
 8008728:	08008771 	.word	0x08008771
 800872c:	08008771 	.word	0x08008771
 8008730:	08008771 	.word	0x08008771
 8008734:	08008771 	.word	0x08008771
 8008738:	08008771 	.word	0x08008771
 800873c:	08008769 	.word	0x08008769
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e0d6      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008748:	2304      	movs	r3, #4
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e0d2      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008750:	2308      	movs	r3, #8
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e0ce      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008758:	2310      	movs	r3, #16
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e0ca      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008760:	2320      	movs	r3, #32
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e0c6      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008768:	2340      	movs	r3, #64	@ 0x40
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e0c2      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008770:	2380      	movs	r3, #128	@ 0x80
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e0be      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008778:	40011400 	.word	0x40011400
 800877c:	58024400 	.word	0x58024400
 8008780:	40007800 	.word	0x40007800
 8008784:	40007c00 	.word	0x40007c00
 8008788:	40011800 	.word	0x40011800
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4aad      	ldr	r2, [pc, #692]	@ (8008a48 <UART_SetConfig+0x900>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d176      	bne.n	8008884 <UART_SetConfig+0x73c>
 8008796:	4bad      	ldr	r3, [pc, #692]	@ (8008a4c <UART_SetConfig+0x904>)
 8008798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800879e:	2b28      	cmp	r3, #40	@ 0x28
 80087a0:	d86c      	bhi.n	800887c <UART_SetConfig+0x734>
 80087a2:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <UART_SetConfig+0x660>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	0800884d 	.word	0x0800884d
 80087ac:	0800887d 	.word	0x0800887d
 80087b0:	0800887d 	.word	0x0800887d
 80087b4:	0800887d 	.word	0x0800887d
 80087b8:	0800887d 	.word	0x0800887d
 80087bc:	0800887d 	.word	0x0800887d
 80087c0:	0800887d 	.word	0x0800887d
 80087c4:	0800887d 	.word	0x0800887d
 80087c8:	08008855 	.word	0x08008855
 80087cc:	0800887d 	.word	0x0800887d
 80087d0:	0800887d 	.word	0x0800887d
 80087d4:	0800887d 	.word	0x0800887d
 80087d8:	0800887d 	.word	0x0800887d
 80087dc:	0800887d 	.word	0x0800887d
 80087e0:	0800887d 	.word	0x0800887d
 80087e4:	0800887d 	.word	0x0800887d
 80087e8:	0800885d 	.word	0x0800885d
 80087ec:	0800887d 	.word	0x0800887d
 80087f0:	0800887d 	.word	0x0800887d
 80087f4:	0800887d 	.word	0x0800887d
 80087f8:	0800887d 	.word	0x0800887d
 80087fc:	0800887d 	.word	0x0800887d
 8008800:	0800887d 	.word	0x0800887d
 8008804:	0800887d 	.word	0x0800887d
 8008808:	08008865 	.word	0x08008865
 800880c:	0800887d 	.word	0x0800887d
 8008810:	0800887d 	.word	0x0800887d
 8008814:	0800887d 	.word	0x0800887d
 8008818:	0800887d 	.word	0x0800887d
 800881c:	0800887d 	.word	0x0800887d
 8008820:	0800887d 	.word	0x0800887d
 8008824:	0800887d 	.word	0x0800887d
 8008828:	0800886d 	.word	0x0800886d
 800882c:	0800887d 	.word	0x0800887d
 8008830:	0800887d 	.word	0x0800887d
 8008834:	0800887d 	.word	0x0800887d
 8008838:	0800887d 	.word	0x0800887d
 800883c:	0800887d 	.word	0x0800887d
 8008840:	0800887d 	.word	0x0800887d
 8008844:	0800887d 	.word	0x0800887d
 8008848:	08008875 	.word	0x08008875
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e050      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008854:	2304      	movs	r3, #4
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e04c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800885c:	2308      	movs	r3, #8
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e048      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e044      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800886c:	2320      	movs	r3, #32
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e040      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008874:	2340      	movs	r3, #64	@ 0x40
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e03c      	b.n	80088f6 <UART_SetConfig+0x7ae>
 800887c:	2380      	movs	r3, #128	@ 0x80
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e038      	b.n	80088f6 <UART_SetConfig+0x7ae>
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a71      	ldr	r2, [pc, #452]	@ (8008a50 <UART_SetConfig+0x908>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d130      	bne.n	80088f0 <UART_SetConfig+0x7a8>
 800888e:	4b6f      	ldr	r3, [pc, #444]	@ (8008a4c <UART_SetConfig+0x904>)
 8008890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	2b05      	cmp	r3, #5
 8008898:	d826      	bhi.n	80088e8 <UART_SetConfig+0x7a0>
 800889a:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <UART_SetConfig+0x758>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088c1 	.word	0x080088c1
 80088a8:	080088c9 	.word	0x080088c9
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	2302      	movs	r3, #2
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e01a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e016      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e012      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e00e      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088d8:	2320      	movs	r3, #32
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e00a      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088e0:	2340      	movs	r3, #64	@ 0x40
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e006      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088e8:	2380      	movs	r3, #128	@ 0x80
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e002      	b.n	80088f6 <UART_SetConfig+0x7ae>
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a55      	ldr	r2, [pc, #340]	@ (8008a50 <UART_SetConfig+0x908>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	f040 80f8 	bne.w	8008af2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008902:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008906:	2b20      	cmp	r3, #32
 8008908:	dc46      	bgt.n	8008998 <UART_SetConfig+0x850>
 800890a:	2b02      	cmp	r3, #2
 800890c:	db75      	blt.n	80089fa <UART_SetConfig+0x8b2>
 800890e:	3b02      	subs	r3, #2
 8008910:	2b1e      	cmp	r3, #30
 8008912:	d872      	bhi.n	80089fa <UART_SetConfig+0x8b2>
 8008914:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x7d4>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800899f 	.word	0x0800899f
 8008920:	080089fb 	.word	0x080089fb
 8008924:	080089a7 	.word	0x080089a7
 8008928:	080089fb 	.word	0x080089fb
 800892c:	080089fb 	.word	0x080089fb
 8008930:	080089fb 	.word	0x080089fb
 8008934:	080089b7 	.word	0x080089b7
 8008938:	080089fb 	.word	0x080089fb
 800893c:	080089fb 	.word	0x080089fb
 8008940:	080089fb 	.word	0x080089fb
 8008944:	080089fb 	.word	0x080089fb
 8008948:	080089fb 	.word	0x080089fb
 800894c:	080089fb 	.word	0x080089fb
 8008950:	080089fb 	.word	0x080089fb
 8008954:	080089c7 	.word	0x080089c7
 8008958:	080089fb 	.word	0x080089fb
 800895c:	080089fb 	.word	0x080089fb
 8008960:	080089fb 	.word	0x080089fb
 8008964:	080089fb 	.word	0x080089fb
 8008968:	080089fb 	.word	0x080089fb
 800896c:	080089fb 	.word	0x080089fb
 8008970:	080089fb 	.word	0x080089fb
 8008974:	080089fb 	.word	0x080089fb
 8008978:	080089fb 	.word	0x080089fb
 800897c:	080089fb 	.word	0x080089fb
 8008980:	080089fb 	.word	0x080089fb
 8008984:	080089fb 	.word	0x080089fb
 8008988:	080089fb 	.word	0x080089fb
 800898c:	080089fb 	.word	0x080089fb
 8008990:	080089fb 	.word	0x080089fb
 8008994:	080089ed 	.word	0x080089ed
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d02a      	beq.n	80089f2 <UART_SetConfig+0x8aa>
 800899c:	e02d      	b.n	80089fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800899e:	f7fe fa19 	bl	8006dd4 <HAL_RCCEx_GetD3PCLK1Freq>
 80089a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089a4:	e02f      	b.n	8008a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fa28 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b4:	e027      	b.n	8008a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b6:	f107 0318 	add.w	r3, r7, #24
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fb74 	bl	80070a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c4:	e01f      	b.n	8008a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c6:	4b21      	ldr	r3, [pc, #132]	@ (8008a4c <UART_SetConfig+0x904>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089d2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a4c <UART_SetConfig+0x904>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a54 <UART_SetConfig+0x90c>)
 80089de:	fa22 f303 	lsr.w	r3, r2, r3
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089e4:	e00f      	b.n	8008a06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80089e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a54 <UART_SetConfig+0x90c>)
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ea:	e00c      	b.n	8008a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <UART_SetConfig+0x910>)
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f0:	e009      	b.n	8008a06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f8:	e005      	b.n	8008a06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 81ee 	beq.w	8008dea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a12:	4a12      	ldr	r2, [pc, #72]	@ (8008a5c <UART_SetConfig+0x914>)
 8008a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a20:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d305      	bcc.n	8008a3e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d910      	bls.n	8008a60 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a44:	e1d1      	b.n	8008dea <UART_SetConfig+0xca2>
 8008a46:	bf00      	nop
 8008a48:	40011c00 	.word	0x40011c00
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	58000c00 	.word	0x58000c00
 8008a54:	03d09000 	.word	0x03d09000
 8008a58:	003d0900 	.word	0x003d0900
 8008a5c:	08009d7c 	.word	0x08009d7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a62:	2200      	movs	r2, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	60fa      	str	r2, [r7, #12]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	4ac0      	ldr	r2, [pc, #768]	@ (8008d70 <UART_SetConfig+0xc28>)
 8008a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2200      	movs	r2, #0
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a82:	f7f7 fc43 	bl	800030c <__aeabi_uldivmod>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	020b      	lsls	r3, r1, #8
 8008a98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a9c:	0202      	lsls	r2, r0, #8
 8008a9e:	6979      	ldr	r1, [r7, #20]
 8008aa0:	6849      	ldr	r1, [r1, #4]
 8008aa2:	0849      	lsrs	r1, r1, #1
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	eb12 0804 	adds.w	r8, r2, r4
 8008aae:	eb43 0905 	adc.w	r9, r3, r5
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	469a      	mov	sl, r3
 8008aba:	4693      	mov	fp, r2
 8008abc:	4652      	mov	r2, sl
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	f7f7 fc22 	bl	800030c <__aeabi_uldivmod>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4613      	mov	r3, r2
 8008ace:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ad6:	d308      	bcc.n	8008aea <UART_SetConfig+0x9a2>
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ade:	d204      	bcs.n	8008aea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ae6:	60da      	str	r2, [r3, #12]
 8008ae8:	e17f      	b.n	8008dea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008af0:	e17b      	b.n	8008dea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008afa:	f040 80bd 	bne.w	8008c78 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008afe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	dc48      	bgt.n	8008b98 <UART_SetConfig+0xa50>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db7b      	blt.n	8008c02 <UART_SetConfig+0xaba>
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d879      	bhi.n	8008c02 <UART_SetConfig+0xaba>
 8008b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <UART_SetConfig+0x9cc>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b9f 	.word	0x08008b9f
 8008b18:	08008ba7 	.word	0x08008ba7
 8008b1c:	08008c03 	.word	0x08008c03
 8008b20:	08008c03 	.word	0x08008c03
 8008b24:	08008baf 	.word	0x08008baf
 8008b28:	08008c03 	.word	0x08008c03
 8008b2c:	08008c03 	.word	0x08008c03
 8008b30:	08008c03 	.word	0x08008c03
 8008b34:	08008bbf 	.word	0x08008bbf
 8008b38:	08008c03 	.word	0x08008c03
 8008b3c:	08008c03 	.word	0x08008c03
 8008b40:	08008c03 	.word	0x08008c03
 8008b44:	08008c03 	.word	0x08008c03
 8008b48:	08008c03 	.word	0x08008c03
 8008b4c:	08008c03 	.word	0x08008c03
 8008b50:	08008c03 	.word	0x08008c03
 8008b54:	08008bcf 	.word	0x08008bcf
 8008b58:	08008c03 	.word	0x08008c03
 8008b5c:	08008c03 	.word	0x08008c03
 8008b60:	08008c03 	.word	0x08008c03
 8008b64:	08008c03 	.word	0x08008c03
 8008b68:	08008c03 	.word	0x08008c03
 8008b6c:	08008c03 	.word	0x08008c03
 8008b70:	08008c03 	.word	0x08008c03
 8008b74:	08008c03 	.word	0x08008c03
 8008b78:	08008c03 	.word	0x08008c03
 8008b7c:	08008c03 	.word	0x08008c03
 8008b80:	08008c03 	.word	0x08008c03
 8008b84:	08008c03 	.word	0x08008c03
 8008b88:	08008c03 	.word	0x08008c03
 8008b8c:	08008c03 	.word	0x08008c03
 8008b90:	08008c03 	.word	0x08008c03
 8008b94:	08008bf5 	.word	0x08008bf5
 8008b98:	2b40      	cmp	r3, #64	@ 0x40
 8008b9a:	d02e      	beq.n	8008bfa <UART_SetConfig+0xab2>
 8008b9c:	e031      	b.n	8008c02 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b9e:	f7fc ff4d 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8008ba2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ba4:	e033      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba6:	f7fc ff5f 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008baa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bac:	e02f      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe f924 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bbc:	e027      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bbe:	f107 0318 	add.w	r3, r7, #24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fa70 	bl	80070a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bcc:	e01f      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bce:	4b69      	ldr	r3, [pc, #420]	@ (8008d74 <UART_SetConfig+0xc2c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bda:	4b66      	ldr	r3, [pc, #408]	@ (8008d74 <UART_SetConfig+0xc2c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	08db      	lsrs	r3, r3, #3
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	4a64      	ldr	r2, [pc, #400]	@ (8008d78 <UART_SetConfig+0xc30>)
 8008be6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bec:	e00f      	b.n	8008c0e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008bee:	4b62      	ldr	r3, [pc, #392]	@ (8008d78 <UART_SetConfig+0xc30>)
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf2:	e00c      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bf4:	4b61      	ldr	r3, [pc, #388]	@ (8008d7c <UART_SetConfig+0xc34>)
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	e009      	b.n	8008c0e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c00:	e005      	b.n	8008c0e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80ea 	beq.w	8008dea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1a:	4a55      	ldr	r2, [pc, #340]	@ (8008d70 <UART_SetConfig+0xc28>)
 8008c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c28:	005a      	lsls	r2, r3, #1
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	441a      	add	r2, r3
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	2b0f      	cmp	r3, #15
 8008c40:	d916      	bls.n	8008c70 <UART_SetConfig+0xb28>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c48:	d212      	bcs.n	8008c70 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f023 030f 	bic.w	r3, r3, #15
 8008c52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	085b      	lsrs	r3, r3, #1
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c62:	4313      	orrs	r3, r2
 8008c64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c6c:	60da      	str	r2, [r3, #12]
 8008c6e:	e0bc      	b.n	8008dea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c76:	e0b8      	b.n	8008dea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	dc4b      	bgt.n	8008d18 <UART_SetConfig+0xbd0>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f2c0 8087 	blt.w	8008d94 <UART_SetConfig+0xc4c>
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	f200 8084 	bhi.w	8008d94 <UART_SetConfig+0xc4c>
 8008c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c94 <UART_SetConfig+0xb4c>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008d1f 	.word	0x08008d1f
 8008c98:	08008d27 	.word	0x08008d27
 8008c9c:	08008d95 	.word	0x08008d95
 8008ca0:	08008d95 	.word	0x08008d95
 8008ca4:	08008d2f 	.word	0x08008d2f
 8008ca8:	08008d95 	.word	0x08008d95
 8008cac:	08008d95 	.word	0x08008d95
 8008cb0:	08008d95 	.word	0x08008d95
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d95 	.word	0x08008d95
 8008cbc:	08008d95 	.word	0x08008d95
 8008cc0:	08008d95 	.word	0x08008d95
 8008cc4:	08008d95 	.word	0x08008d95
 8008cc8:	08008d95 	.word	0x08008d95
 8008ccc:	08008d95 	.word	0x08008d95
 8008cd0:	08008d95 	.word	0x08008d95
 8008cd4:	08008d4f 	.word	0x08008d4f
 8008cd8:	08008d95 	.word	0x08008d95
 8008cdc:	08008d95 	.word	0x08008d95
 8008ce0:	08008d95 	.word	0x08008d95
 8008ce4:	08008d95 	.word	0x08008d95
 8008ce8:	08008d95 	.word	0x08008d95
 8008cec:	08008d95 	.word	0x08008d95
 8008cf0:	08008d95 	.word	0x08008d95
 8008cf4:	08008d95 	.word	0x08008d95
 8008cf8:	08008d95 	.word	0x08008d95
 8008cfc:	08008d95 	.word	0x08008d95
 8008d00:	08008d95 	.word	0x08008d95
 8008d04:	08008d95 	.word	0x08008d95
 8008d08:	08008d95 	.word	0x08008d95
 8008d0c:	08008d95 	.word	0x08008d95
 8008d10:	08008d95 	.word	0x08008d95
 8008d14:	08008d87 	.word	0x08008d87
 8008d18:	2b40      	cmp	r3, #64	@ 0x40
 8008d1a:	d037      	beq.n	8008d8c <UART_SetConfig+0xc44>
 8008d1c:	e03a      	b.n	8008d94 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d1e:	f7fc fe8d 	bl	8005a3c <HAL_RCC_GetPCLK1Freq>
 8008d22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d24:	e03c      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d26:	f7fc fe9f 	bl	8005a68 <HAL_RCC_GetPCLK2Freq>
 8008d2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d2c:	e038      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe f864 	bl	8006e00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e030      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3e:	f107 0318 	add.w	r3, r7, #24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe f9b0 	bl	80070a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4c:	e028      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <UART_SetConfig+0xc2c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d012      	beq.n	8008d80 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d5a:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <UART_SetConfig+0xc2c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	08db      	lsrs	r3, r3, #3
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	4a04      	ldr	r2, [pc, #16]	@ (8008d78 <UART_SetConfig+0xc30>)
 8008d66:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d6c:	e018      	b.n	8008da0 <UART_SetConfig+0xc58>
 8008d6e:	bf00      	nop
 8008d70:	08009d7c 	.word	0x08009d7c
 8008d74:	58024400 	.word	0x58024400
 8008d78:	03d09000 	.word	0x03d09000
 8008d7c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008d80:	4b24      	ldr	r3, [pc, #144]	@ (8008e14 <UART_SetConfig+0xccc>)
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d84:	e00c      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d86:	4b24      	ldr	r3, [pc, #144]	@ (8008e18 <UART_SetConfig+0xcd0>)
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8a:	e009      	b.n	8008da0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d92:	e005      	b.n	8008da0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8008da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d021      	beq.n	8008dea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	4a1c      	ldr	r2, [pc, #112]	@ (8008e1c <UART_SetConfig+0xcd4>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	441a      	add	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	2b0f      	cmp	r3, #15
 8008dce:	d909      	bls.n	8008de4 <UART_SetConfig+0xc9c>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd6:	d205      	bcs.n	8008de4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	e002      	b.n	8008dea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e06:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3748      	adds	r7, #72	@ 0x48
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	08009d7c 	.word	0x08009d7c

08008e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01a      	beq.n	8008f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1e:	d10a      	bne.n	8008f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	605a      	str	r2, [r3, #4]
  }
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b098      	sub	sp, #96	@ 0x60
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f74:	f7f8 f890 	bl	8001098 <HAL_GetTick>
 8008f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d12f      	bne.n	8008fe8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f90:	2200      	movs	r2, #0
 8008f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f88e 	bl	80090b8 <UART_WaitOnFlagUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d022      	beq.n	8008fe8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e063      	b.n	80090b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d149      	bne.n	800908a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ffe:	2200      	movs	r2, #0
 8009000:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f857 	bl	80090b8 <UART_WaitOnFlagUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d03c      	beq.n	800908a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	623b      	str	r3, [r7, #32]
   return(result);
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800902e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009030:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e6      	bne.n	8009010 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3308      	adds	r3, #8
 8009048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	60fb      	str	r3, [r7, #12]
   return(result);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009062:	61fa      	str	r2, [r7, #28]
 8009064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	69b9      	ldr	r1, [r7, #24]
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	617b      	str	r3, [r7, #20]
   return(result);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e5      	bne.n	8009042 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e012      	b.n	80090b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3758      	adds	r7, #88	@ 0x58
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	603b      	str	r3, [r7, #0]
 80090c4:	4613      	mov	r3, r2
 80090c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c8:	e04f      	b.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d04b      	beq.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090d2:	f7f7 ffe1 	bl	8001098 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d302      	bcc.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e04e      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d037      	beq.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b80      	cmp	r3, #128	@ 0x80
 80090fe:	d034      	beq.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b40      	cmp	r3, #64	@ 0x40
 8009104:	d031      	beq.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b08      	cmp	r3, #8
 8009112:	d110      	bne.n	8009136 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2208      	movs	r2, #8
 800911a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f921 	bl	8009364 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2208      	movs	r2, #8
 8009126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e029      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009144:	d111      	bne.n	800916a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800914e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f907 	bl	8009364 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e00f      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4013      	ands	r3, r2
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	bf0c      	ite	eq
 800917a:	2301      	moveq	r3, #1
 800917c:	2300      	movne	r3, #0
 800917e:	b2db      	uxtb	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	429a      	cmp	r2, r3
 8009186:	d0a0      	beq.n	80090ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b096      	sub	sp, #88	@ 0x58
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2222      	movs	r2, #34	@ 0x22
 80091bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d02d      	beq.n	8009226 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091d0:	4a40      	ldr	r2, [pc, #256]	@ (80092d4 <UART_Start_Receive_DMA+0x140>)
 80091d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091da:	4a3f      	ldr	r2, [pc, #252]	@ (80092d8 <UART_Start_Receive_DMA+0x144>)
 80091dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e4:	4a3d      	ldr	r2, [pc, #244]	@ (80092dc <UART_Start_Receive_DMA+0x148>)
 80091e6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ee:	2200      	movs	r2, #0
 80091f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3324      	adds	r3, #36	@ 0x24
 80091fe:	4619      	mov	r1, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009204:	461a      	mov	r2, r3
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	f7f8 fbce 	bl	80019a8 <HAL_DMA_Start_IT>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2210      	movs	r2, #16
 8009216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e051      	b.n	80092ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d018      	beq.n	8009260 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009242:	657b      	str	r3, [r7, #84]	@ 0x54
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800924c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800924e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800925a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e6      	bne.n	800922e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	f043 0301 	orr.w	r3, r3, #1
 8009276:	653b      	str	r3, [r7, #80]	@ 0x50
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009280:	637a      	str	r2, [r7, #52]	@ 0x34
 8009282:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009286:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800928e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e5      	bne.n	8009260 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3308      	adds	r3, #8
 800929a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	613b      	str	r3, [r7, #16]
   return(result);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3308      	adds	r3, #8
 80092b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092b4:	623a      	str	r2, [r7, #32]
 80092b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69f9      	ldr	r1, [r7, #28]
 80092ba:	6a3a      	ldr	r2, [r7, #32]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e5      	bne.n	8009294 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3758      	adds	r7, #88	@ 0x58
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08009431 	.word	0x08009431
 80092d8:	08009559 	.word	0x08009559
 80092dc:	08009597 	.word	0x08009597

080092e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b08f      	sub	sp, #60	@ 0x3c
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009308:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800930c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	60bb      	str	r3, [r7, #8]
   return(result);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009330:	633b      	str	r3, [r7, #48]	@ 0x30
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933a:	61ba      	str	r2, [r7, #24]
 800933c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6979      	ldr	r1, [r7, #20]
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	613b      	str	r3, [r7, #16]
   return(result);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009356:	bf00      	nop
 8009358:	373c      	adds	r7, #60	@ 0x3c
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
	...

08009364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b095      	sub	sp, #84	@ 0x54
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009380:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800938a:	643b      	str	r3, [r7, #64]	@ 0x40
 800938c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009390:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e6      	bne.n	800936c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3308      	adds	r3, #8
 80093a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ae:	69fa      	ldr	r2, [r7, #28]
 80093b0:	4b1e      	ldr	r3, [pc, #120]	@ (800942c <UART_EndRxTransfer+0xc8>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e5      	bne.n	800939e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d118      	bne.n	800940c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f023 0310 	bic.w	r3, r3, #16
 80093ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6979      	ldr	r1, [r7, #20]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	613b      	str	r3, [r7, #16]
   return(result);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009420:	bf00      	nop
 8009422:	3754      	adds	r7, #84	@ 0x54
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	effffffe 	.word	0xeffffffe

08009430 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b09c      	sub	sp, #112	@ 0x70
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009446:	d071      	beq.n	800952c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800944a:	2200      	movs	r2, #0
 800944c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800945e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800946e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009470:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800947c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e6      	bne.n	8009450 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	667b      	str	r3, [r7, #100]	@ 0x64
 800949a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3308      	adds	r3, #8
 80094a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80094a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e5      	bne.n	8009482 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80094ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80094d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ec:	2220      	movs	r2, #32
 80094ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d118      	bne.n	800952c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	60fb      	str	r3, [r7, #12]
   return(result);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0310 	bic.w	r3, r3, #16
 800950e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009518:	61fb      	str	r3, [r7, #28]
 800951a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69b9      	ldr	r1, [r7, #24]
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	617b      	str	r3, [r7, #20]
   return(result);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800952c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800952e:	2200      	movs	r2, #0
 8009530:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009536:	2b01      	cmp	r3, #1
 8009538:	d107      	bne.n	800954a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800953a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800953c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009540:	4619      	mov	r1, r3
 8009542:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009544:	f7fe fdf4 	bl	8008130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009548:	e002      	b.n	8009550 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800954a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800954c:	f000 fb68 	bl	8009c20 <HAL_UART_RxCpltCallback>
}
 8009550:	bf00      	nop
 8009552:	3770      	adds	r7, #112	@ 0x70
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d109      	bne.n	8009588 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800957a:	085b      	lsrs	r3, r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7fe fdd5 	bl	8008130 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009586:	e002      	b.n	800958e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7fe fdbd 	bl	8008108 <HAL_UART_RxHalfCpltCallback>
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b086      	sub	sp, #24
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	d109      	bne.n	80095d6 <UART_DMAError+0x40>
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b21      	cmp	r3, #33	@ 0x21
 80095c6:	d106      	bne.n	80095d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80095d0:	6978      	ldr	r0, [r7, #20]
 80095d2:	f7ff fe85 	bl	80092e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e0:	2b40      	cmp	r3, #64	@ 0x40
 80095e2:	d109      	bne.n	80095f8 <UART_DMAError+0x62>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b22      	cmp	r3, #34	@ 0x22
 80095e8:	d106      	bne.n	80095f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80095f2:	6978      	ldr	r0, [r7, #20]
 80095f4:	f7ff feb6 	bl	8009364 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f043 0210 	orr.w	r2, r3, #16
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009608:	6978      	ldr	r0, [r7, #20]
 800960a:	f7fe fd87 	bl	800811c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800960e:	bf00      	nop
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7fe fd71 	bl	800811c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009642:	b480      	push	{r7}
 8009644:	b08f      	sub	sp, #60	@ 0x3c
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009650:	2b21      	cmp	r3, #33	@ 0x21
 8009652:	d14c      	bne.n	80096ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d132      	bne.n	80096c6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	61fb      	str	r3, [r7, #28]
   return(result);
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009680:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e6      	bne.n	8009660 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	60bb      	str	r3, [r7, #8]
   return(result);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	6979      	ldr	r1, [r7, #20]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	613b      	str	r3, [r7, #16]
   return(result);
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e6      	bne.n	8009692 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80096c4:	e013      	b.n	80096ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80096ee:	bf00      	nop
 80096f0:	373c      	adds	r7, #60	@ 0x3c
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b091      	sub	sp, #68	@ 0x44
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009708:	2b21      	cmp	r3, #33	@ 0x21
 800970a:	d151      	bne.n	80097b0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d132      	bne.n	800977e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	623b      	str	r3, [r7, #32]
   return(result);
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800972c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	633b      	str	r3, [r7, #48]	@ 0x30
 8009738:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800973c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e6      	bne.n	8009718 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	60fb      	str	r3, [r7, #12]
   return(result);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	69b9      	ldr	r1, [r7, #24]
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	617b      	str	r3, [r7, #20]
   return(result);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e6      	bne.n	800974a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800977c:	e018      	b.n	80097b0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009792:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009798:	1c9a      	adds	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	3b01      	subs	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80097b0:	bf00      	nop
 80097b2:	3744      	adds	r7, #68	@ 0x44
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b091      	sub	sp, #68	@ 0x44
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ca:	2b21      	cmp	r3, #33	@ 0x21
 80097cc:	d160      	bne.n	8009890 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80097d6:	e057      	b.n	8009888 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d133      	bne.n	800984c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3308      	adds	r3, #8
 80097ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	623b      	str	r3, [r7, #32]
   return(result);
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80097fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3308      	adds	r3, #8
 8009802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009804:	633a      	str	r2, [r7, #48]	@ 0x30
 8009806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800980a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e5      	bne.n	80097e4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	60fb      	str	r3, [r7, #12]
   return(result);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	69b9      	ldr	r1, [r7, #24]
 800983c:	69fa      	ldr	r2, [r7, #28]
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	617b      	str	r3, [r7, #20]
   return(result);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800984a:	e021      	b.n	8009890 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009856:	2b00      	cmp	r3, #0
 8009858:	d013      	beq.n	8009882 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800985e:	781a      	ldrb	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009882:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009884:	3b01      	subs	r3, #1
 8009886:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009888:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1a4      	bne.n	80097d8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800988e:	e7ff      	b.n	8009890 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009890:	bf00      	nop
 8009892:	3744      	adds	r7, #68	@ 0x44
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b091      	sub	sp, #68	@ 0x44
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098aa:	2b21      	cmp	r3, #33	@ 0x21
 80098ac:	d165      	bne.n	800997a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80098b6:	e05c      	b.n	8009972 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d133      	bne.n	800992c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3308      	adds	r3, #8
 80098ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3308      	adds	r3, #8
 80098e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e5      	bne.n	80098c4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	60bb      	str	r3, [r7, #8]
   return(result);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800990c:	633b      	str	r3, [r7, #48]	@ 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6979      	ldr	r1, [r7, #20]
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	613b      	str	r3, [r7, #16]
   return(result);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800992a:	e026      	b.n	800997a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800993e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800994e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009954:	1c9a      	adds	r2, r3, #2
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800996c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800996e:	3b01      	subs	r3, #1
 8009970:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009972:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009974:	2b00      	cmp	r3, #0
 8009976:	d19f      	bne.n	80098b8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009978:	e7ff      	b.n	800997a <UART_TxISR_16BIT_FIFOEN+0xde>
 800997a:	bf00      	nop
 800997c:	3744      	adds	r7, #68	@ 0x44
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b088      	sub	sp, #32
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	60bb      	str	r3, [r7, #8]
   return(result);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6979      	ldr	r1, [r7, #20]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e6      	bne.n	800998e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f936 	bl	8009c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d4:	bf00      	nop
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e027      	b.n	8009a7e <HAL_UARTEx_DisableFifoMode+0x66>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2224      	movs	r2, #36	@ 0x24
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009a5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d101      	bne.n	8009aa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e02d      	b.n	8009afe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2224      	movs	r2, #36	@ 0x24
 8009aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f022 0201 	bic.w	r2, r2, #1
 8009ac8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	430a      	orrs	r2, r1
 8009adc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f850 	bl	8009b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d101      	bne.n	8009b1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e02d      	b.n	8009b7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2224      	movs	r2, #36	@ 0x24
 8009b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0201 	bic.w	r2, r2, #1
 8009b44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f812 	bl	8009b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d108      	bne.n	8009ba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ba4:	e031      	b.n	8009c0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ba6:	2310      	movs	r3, #16
 8009ba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009baa:	2310      	movs	r3, #16
 8009bac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	0e5b      	lsrs	r3, r3, #25
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0f5b      	lsrs	r3, r3, #29
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	7b3a      	ldrb	r2, [r7, #12]
 8009bd2:	4911      	ldr	r1, [pc, #68]	@ (8009c18 <UARTEx_SetNbDataToProcess+0x94>)
 8009bd4:	5c8a      	ldrb	r2, [r1, r2]
 8009bd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bda:	7b3a      	ldrb	r2, [r7, #12]
 8009bdc:	490f      	ldr	r1, [pc, #60]	@ (8009c1c <UARTEx_SetNbDataToProcess+0x98>)
 8009bde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009be0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	7b7a      	ldrb	r2, [r7, #13]
 8009bf0:	4909      	ldr	r1, [pc, #36]	@ (8009c18 <UARTEx_SetNbDataToProcess+0x94>)
 8009bf2:	5c8a      	ldrb	r2, [r1, r2]
 8009bf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bf8:	7b7a      	ldrb	r2, [r7, #13]
 8009bfa:	4908      	ldr	r1, [pc, #32]	@ (8009c1c <UARTEx_SetNbDataToProcess+0x98>)
 8009bfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	08009d94 	.word	0x08009d94
 8009c1c:	08009d9c 	.word	0x08009d9c

08009c20 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 8009c28:	4b04      	ldr	r3, [pc, #16]	@ (8009c3c <HAL_UART_RxCpltCallback+0x1c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

	fptr();
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4798      	blx	r3
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	240002ec 	.word	0x240002ec

08009c40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 8009c5c:	4a04      	ldr	r2, [pc, #16]	@ (8009c70 <uartInit+0x1c>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	240002ec 	.word	0x240002ec

08009c74 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4803      	ldr	r0, [pc, #12]	@ (8009c90 <receptionItrOn+0x1c>)
 8009c82:	f7fd fe3b 	bl	80078fc <HAL_UART_Receive_DMA>
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	240001dc 	.word	0x240001dc

08009c94 <debugUartInit>:
#include "commonDefines.h"
#include "uart.h"
uint8_t data = 0;

void debugUartInit(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 8009c9a:	4b06      	ldr	r3, [pc, #24]	@ (8009cb4 <debugUartInit+0x20>)
 8009c9c:	607b      	str	r3, [r7, #4]

	uartInit(rxCallbackFptr);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ffd8 	bl	8009c54 <uartInit>
	receptionItrOn(&data);
 8009ca4:	4804      	ldr	r0, [pc, #16]	@ (8009cb8 <debugUartInit+0x24>)
 8009ca6:	f7ff ffe5 	bl	8009c74 <receptionItrOn>
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	08009cbd 	.word	0x08009cbd
 8009cb8:	240002f0 	.word	0x240002f0

08009cbc <debugRxCallback>:

void debugRxCallback(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, &data, 1, 100);
 8009cc0:	2364      	movs	r3, #100	@ 0x64
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4904      	ldr	r1, [pc, #16]	@ (8009cd8 <debugRxCallback+0x1c>)
 8009cc6:	4805      	ldr	r0, [pc, #20]	@ (8009cdc <debugRxCallback+0x20>)
 8009cc8:	f7fd fcf6 	bl	80076b8 <HAL_UART_Transmit>
	receptionItrOn(&data);
 8009ccc:	4802      	ldr	r0, [pc, #8]	@ (8009cd8 <debugRxCallback+0x1c>)
 8009cce:	f7ff ffd1 	bl	8009c74 <receptionItrOn>
}
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	240002f0 	.word	0x240002f0
 8009cdc:	240001dc 	.word	0x240001dc

08009ce0 <memset>:
 8009ce0:	4402      	add	r2, r0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d100      	bne.n	8009cea <memset+0xa>
 8009ce8:	4770      	bx	lr
 8009cea:	f803 1b01 	strb.w	r1, [r3], #1
 8009cee:	e7f9      	b.n	8009ce4 <memset+0x4>

08009cf0 <__libc_init_array>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8009d28 <__libc_init_array+0x38>)
 8009cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8009d2c <__libc_init_array+0x3c>)
 8009cf6:	1b64      	subs	r4, r4, r5
 8009cf8:	10a4      	asrs	r4, r4, #2
 8009cfa:	2600      	movs	r6, #0
 8009cfc:	42a6      	cmp	r6, r4
 8009cfe:	d109      	bne.n	8009d14 <__libc_init_array+0x24>
 8009d00:	4d0b      	ldr	r5, [pc, #44]	@ (8009d30 <__libc_init_array+0x40>)
 8009d02:	4c0c      	ldr	r4, [pc, #48]	@ (8009d34 <__libc_init_array+0x44>)
 8009d04:	f000 f818 	bl	8009d38 <_init>
 8009d08:	1b64      	subs	r4, r4, r5
 8009d0a:	10a4      	asrs	r4, r4, #2
 8009d0c:	2600      	movs	r6, #0
 8009d0e:	42a6      	cmp	r6, r4
 8009d10:	d105      	bne.n	8009d1e <__libc_init_array+0x2e>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d18:	4798      	blx	r3
 8009d1a:	3601      	adds	r6, #1
 8009d1c:	e7ee      	b.n	8009cfc <__libc_init_array+0xc>
 8009d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d22:	4798      	blx	r3
 8009d24:	3601      	adds	r6, #1
 8009d26:	e7f2      	b.n	8009d0e <__libc_init_array+0x1e>
 8009d28:	08009dac 	.word	0x08009dac
 8009d2c:	08009dac 	.word	0x08009dac
 8009d30:	08009dac 	.word	0x08009dac
 8009d34:	08009db0 	.word	0x08009db0

08009d38 <_init>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr

08009d44 <_fini>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	bf00      	nop
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr

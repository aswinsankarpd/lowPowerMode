
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800c580  0800c580  0000d580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c840  0800c840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c848  0800c848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c84c  0800c84c  0000d84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000c8  24000000  0800c850  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000c8  0800c918  0000e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000128  0800c978  0000e128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  24000188  0800c9d8  0000e188  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  24000950  0800c9d8  0000e950  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8b3  00000000  00000000  0000e1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1a  00000000  00000000  0002aa69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0002e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddd  00000000  00000000  0002f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037532  00000000  00000000  000307bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f089  00000000  00000000  00067cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001500ff  00000000  00000000  00086d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d6e77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000545c  00000000  00000000  001d6ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001dc318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000188 	.word	0x24000188
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c568 	.word	0x0800c568

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400018c 	.word	0x2400018c
 800030c:	0800c568 	.word	0x0800c568

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fbf1 	bl	800aeb0 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <debugCLITask+0x2e>
    {
        parseCommand();
 80006e0:	f000 f80a 	bl	80006f8 <parseCommand>
        processCommand();
 80006e4:	f000 f830 	bl	8000748 <processCommand>
        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fbed 	bl	800aec8 <setCmdReceivedFlag>
    }
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <parseCommand>:

static void parseCommand(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	80fb      	strh	r3, [r7, #6]

    // Dequeue data from circular buffer until end of command (0x0D) is detected
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000706:	e00d      	b.n	8000724 <parseCommand+0x2c>
    {


        // Reset index if end of command is detected
        if(pData == 0x0D)
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	2b0d      	cmp	r3, #13
 800070c:	d102      	bne.n	8000714 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	80fb      	strh	r3, [r7, #6]
            break;
 8000712:	e013      	b.n	800073c <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000714:	88b9      	ldrh	r1, [r7, #4]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	80fa      	strh	r2, [r7, #6]
 800071c:	461a      	mov	r2, r3
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <parseCommand+0x4c>)
 8000722:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000724:	f00a fbe0 	bl	800aee8 <getRxBuffer>
 8000728:	4602      	mov	r2, r0
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4610      	mov	r0, r2
 8000730:	f00a fc67 	bl	800b002 <circularBufferDequeue>
 8000734:	4603      	mov	r3, r0
 8000736:	2b04      	cmp	r3, #4
 8000738:	d0e6      	beq.n	8000708 <parseCommand+0x10>
        }
    }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	240001a4 	.word	0x240001a4

08000748 <processCommand>:

static void processCommand(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 8000752:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <processCommand+0x13c>)
 8000754:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]

    args[argIndex] = strtok((char *)commandBuffer, " ");
 800075e:	7bfc      	ldrb	r4, [r7, #15]
 8000760:	4949      	ldr	r1, [pc, #292]	@ (8000888 <processCommand+0x140>)
 8000762:	484a      	ldr	r0, [pc, #296]	@ (800088c <processCommand+0x144>)
 8000764:	f00a ff12 	bl	800b58c <strtok>
 8000768:	4603      	mov	r3, r0
 800076a:	4a49      	ldr	r2, [pc, #292]	@ (8000890 <processCommand+0x148>)
 800076c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 8000770:	e00b      	b.n	800078a <processCommand+0x42>
    {
        argIndex++;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3301      	adds	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000778:	7bfc      	ldrb	r4, [r7, #15]
 800077a:	4943      	ldr	r1, [pc, #268]	@ (8000888 <processCommand+0x140>)
 800077c:	2000      	movs	r0, #0
 800077e:	f00a ff05 	bl	800b58c <strtok>
 8000782:	4603      	mov	r3, r0
 8000784:	4a42      	ldr	r2, [pc, #264]	@ (8000890 <processCommand+0x148>)
 8000786:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4a40      	ldr	r2, [pc, #256]	@ (8000890 <processCommand+0x148>)
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ed      	bne.n	8000772 <processCommand+0x2a>
    }

    cmdIdx = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 800079e:	e04b      	b.n	8000838 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	461a      	mov	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	4936      	ldr	r1, [pc, #216]	@ (8000890 <processCommand+0x148>)
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4610      	mov	r0, r2
 80007be:	f7ff fda7 	bl	8000310 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d134      	bne.n	8000832 <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	461a      	mov	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	461a      	mov	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	4928      	ldr	r1, [pc, #160]	@ (8000894 <processCommand+0x14c>)
 80007f2:	4827      	ldr	r0, [pc, #156]	@ (8000890 <processCommand+0x148>)
 80007f4:	4798      	blx	r3
    			cmdSucessFlag = true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	71bb      	strb	r3, [r7, #6]
				break;
 80007fa:	e028      	b.n	800084e <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	461a      	mov	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d012      	beq.n	8000838 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	461a      	mov	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3301      	adds	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	e002      	b.n	8000838 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3301      	adds	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	461a      	mov	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4413      	add	r3, r2
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1a8      	bne.n	80007a0 <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00f      	beq.n	800087a <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <processCommand+0x150>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <processCommand+0x154>)
 800085e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <processCommand+0x14c>)
 8000864:	f00a fe12 	bl	800b48c <sniprintf>
 8000868:	4603      	mov	r3, r0
 800086a:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	b29a      	uxth	r2, r3
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	4908      	ldr	r1, [pc, #32]	@ (8000894 <processCommand+0x14c>)
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <processCommand+0x158>)
 8000876:	f007 ff4b 	bl	8008710 <HAL_UART_Transmit>
    }
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	24000030 	.word	0x24000030
 8000888:	0800c594 	.word	0x0800c594
 800088c:	240001a4 	.word	0x240001a4
 8000890:	240003a4 	.word	0x240003a4
 8000894:	240003cc 	.word	0x240003cc
 8000898:	0800c598 	.word	0x0800c598
 800089c:	0800c5ac 	.word	0x0800c5ac
 80008a0:	240006e4 	.word	0x240006e4

080008a4 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4618      	mov	r0, r3
 80008c0:	f00a fa56 	bl	800ad70 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs);
 80008c4:	7b3b      	ldrb	r3, [r7, #12]
 80008c6:	4619      	mov	r1, r3
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	7bba      	ldrb	r2, [r7, #14]
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	460b      	mov	r3, r1
 80008d2:	4a09      	ldr	r2, [pc, #36]	@ (80008f8 <getDateTime+0x54>)
 80008d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d8:	6838      	ldr	r0, [r7, #0]
 80008da:	f00a fdd7 	bl	800b48c <sniprintf>
 80008de:	4603      	mov	r3, r0
 80008e0:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 80008e2:	8afa      	ldrh	r2, [r7, #22]
 80008e4:	2364      	movs	r3, #100	@ 0x64
 80008e6:	6839      	ldr	r1, [r7, #0]
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <getDateTime+0x58>)
 80008ea:	f007 ff11 	bl	8008710 <HAL_UART_Transmit>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	0800c5b0 	.word	0x0800c5b0
 80008fc:	240006e4 	.word	0x240006e4

08000900 <setTime>:

static void setTime(char ** args, char *response)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <setTime+0xa0>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	823b      	strh	r3, [r7, #16]
 8000910:	2300      	movs	r3, #0
 8000912:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	f8c3 2003 	str.w	r2, [r3, #3]

    char *token = strtok(args[2], ",");
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3308      	adds	r3, #8
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	491e      	ldr	r1, [pc, #120]	@ (80009a4 <setTime+0xa4>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00a fe2d 	bl	800b58c <strtok>
 8000932:	61b8      	str	r0, [r7, #24]


    while (token != NULL && tokenIdx < 3)
 8000934:	e011      	b.n	800095a <setTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000936:	69b8      	ldr	r0, [r7, #24]
 8000938:	f00a fba8 	bl	800b08c <atoi>
 800093c:	4602      	mov	r2, r0
 800093e:	7ffb      	ldrb	r3, [r7, #31]
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	3320      	adds	r3, #32
 8000944:	443b      	add	r3, r7
 8000946:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 800094a:	7ffb      	ldrb	r3, [r7, #31]
 800094c:	3301      	adds	r3, #1
 800094e:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ",");
 8000950:	4914      	ldr	r1, [pc, #80]	@ (80009a4 <setTime+0xa4>)
 8000952:	2000      	movs	r0, #0
 8000954:	f00a fe1a 	bl	800b58c <strtok>
 8000958:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <setTime+0x66>
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d9e7      	bls.n	8000936 <setTime+0x36>
    }

    dateTime.hours = dateTimeArray[0];
 8000966:	7c3b      	ldrb	r3, [r7, #16]
 8000968:	723b      	strb	r3, [r7, #8]
    dateTime.mins = dateTimeArray[1];
 800096a:	7c7b      	ldrb	r3, [r7, #17]
 800096c:	727b      	strb	r3, [r7, #9]
    dateTime.secs = dateTimeArray[2];
 800096e:	7cbb      	ldrb	r3, [r7, #18]
 8000970:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f00a f9a8 	bl	800accc <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <setTime+0xa8>)
 800097e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000982:	6838      	ldr	r0, [r7, #0]
 8000984:	f00a fd82 	bl	800b48c <sniprintf>
 8000988:	4603      	mov	r3, r0
 800098a:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800098c:	8afa      	ldrh	r2, [r7, #22]
 800098e:	2364      	movs	r3, #100	@ 0x64
 8000990:	6839      	ldr	r1, [r7, #0]
 8000992:	4806      	ldr	r0, [pc, #24]	@ (80009ac <setTime+0xac>)
 8000994:	f007 febc 	bl	8008710 <HAL_UART_Transmit>
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800c5dc 	.word	0x0800c5dc
 80009a4:	0800c5c8 	.word	0x0800c5c8
 80009a8:	0800c5cc 	.word	0x0800c5cc
 80009ac:	240006e4 	.word	0x240006e4

080009b0 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	debugUartInit();
 80009b4:	f00a fa5e 	bl	800ae74 <debugUartInit>

	RTCInit();
 80009b8:	f00a f96a 	bl	800ac90 <RTCInit>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 80009bc:	2210      	movs	r2, #16
 80009be:	4903      	ldr	r1, [pc, #12]	@ (80009cc <systemInit+0x1c>)
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <systemInit+0x20>)
 80009c2:	f007 ff33 	bl	800882c <HAL_UART_Transmit_IT>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	0800c5e0 	.word	0x0800c5e0
 80009d0:	240006e4 	.word	0x240006e4

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_DMA_Init+0x3c>)
 80009ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	200b      	movs	r0, #11
 80009fe:	f000 ffca 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a02:	200b      	movs	r0, #11
 8000a04:	f000 ffe1 	bl	80019ca <HAL_NVIC_EnableIRQ>

}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024400 	.word	0x58024400

08000a14 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a2c:	22e1      	movs	r2, #225	@ 0xe1
 8000a2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a44:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a50:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	@ (8000aa4 <MX_ETH_Init+0x90>)
 8000a58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a5c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_ETH_Init+0x80>)
 8000a64:	f003 fe04 	bl	8004670 <HAL_ETH_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a6e:	f000 fa83 	bl	8000f78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a72:	2238      	movs	r2, #56	@ 0x38
 8000a74:	2100      	movs	r1, #0
 8000a76:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_ETH_Init+0x94>)
 8000a78:	f00a fd7f 	bl	800b57a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_ETH_Init+0x94>)
 8000a7e:	2221      	movs	r2, #33	@ 0x21
 8000a80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_ETH_Init+0x94>)
 8000a84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_ETH_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000604 	.word	0x24000604
 8000a98:	40028000 	.word	0x40028000
 8000a9c:	240006b4 	.word	0x240006b4
 8000aa0:	24000128 	.word	0x24000128
 8000aa4:	240000c8 	.word	0x240000c8
 8000aa8:	240005cc 	.word	0x240005cc

08000aac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	@ 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a59      	ldr	r2, [pc, #356]	@ (8000c30 <HAL_ETH_MspInit+0x184>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	f040 80ab 	bne.w	8000c26 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ad0:	4b58      	ldr	r3, [pc, #352]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ad6:	4a57      	ldr	r2, [pc, #348]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000adc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae0:	4b54      	ldr	r3, [pc, #336]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000ae2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000aee:	4b51      	ldr	r3, [pc, #324]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af4:	4a4f      	ldr	r2, [pc, #316]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000afa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000afe:	4b4d      	ldr	r3, [pc, #308]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b0c:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b12:	4a48      	ldr	r2, [pc, #288]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b1c:	4b45      	ldr	r3, [pc, #276]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b42      	ldr	r3, [pc, #264]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b3a      	ldr	r3, [pc, #232]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	4a39      	ldr	r2, [pc, #228]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b58:	4b36      	ldr	r3, [pc, #216]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a31      	ldr	r2, [pc, #196]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b94:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ba2:	2332      	movs	r3, #50	@ 0x32
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481e      	ldr	r0, [pc, #120]	@ (8000c38 <HAL_ETH_MspInit+0x18c>)
 8000bbe:	f004 f98b 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bc2:	2386      	movs	r3, #134	@ 0x86
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <HAL_ETH_MspInit+0x190>)
 8000bde:	f004 f97b 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <HAL_ETH_MspInit+0x194>)
 8000c00:	f004 f96a 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c04:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <HAL_ETH_MspInit+0x198>)
 8000c22:	f004 f959 	bl	8004ed8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3738      	adds	r7, #56	@ 0x38
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40028000 	.word	0x40028000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020800 	.word	0x58020800
 8000c3c:	58020000 	.word	0x58020000
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58021800 	.word	0x58021800

08000c48 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b75      	ldr	r3, [pc, #468]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a73      	ldr	r2, [pc, #460]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b71      	ldr	r3, [pc, #452]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a6c      	ldr	r2, [pc, #432]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b69      	ldr	r3, [pc, #420]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b66      	ldr	r3, [pc, #408]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a64      	ldr	r2, [pc, #400]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b62      	ldr	r3, [pc, #392]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	4b57      	ldr	r3, [pc, #348]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	4a55      	ldr	r2, [pc, #340]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce6:	4b53      	ldr	r3, [pc, #332]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d04:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d12:	4b48      	ldr	r3, [pc, #288]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	4a46      	ldr	r2, [pc, #280]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d22:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <MX_GPIO_Init+0x1ec>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d36:	4840      	ldr	r0, [pc, #256]	@ (8000e38 <MX_GPIO_Init+0x1f0>)
 8000d38:	f004 fa76 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d42:	483e      	ldr	r0, [pc, #248]	@ (8000e3c <MX_GPIO_Init+0x1f4>)
 8000d44:	f004 fa70 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	483c      	ldr	r0, [pc, #240]	@ (8000e40 <MX_GPIO_Init+0x1f8>)
 8000d4e:	f004 fa6b 	bl	8005228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4836      	ldr	r0, [pc, #216]	@ (8000e44 <MX_GPIO_Init+0x1fc>)
 8000d6a:	f004 f8b5 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d6e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	482c      	ldr	r0, [pc, #176]	@ (8000e38 <MX_GPIO_Init+0x1f0>)
 8000d88:	f004 f8a6 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4825      	ldr	r0, [pc, #148]	@ (8000e3c <MX_GPIO_Init+0x1f4>)
 8000da6:	f004 f897 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4822      	ldr	r0, [pc, #136]	@ (8000e48 <MX_GPIO_Init+0x200>)
 8000dc0:	f004 f88a 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <MX_GPIO_Init+0x204>)
 8000dda:	f004 f87d 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000df0:	230a      	movs	r3, #10
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_GPIO_Init+0x204>)
 8000dfc:	f004 f86c 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	480a      	ldr	r0, [pc, #40]	@ (8000e40 <MX_GPIO_Init+0x1f8>)
 8000e18:	f004 f85e 	bl	8004ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2028      	movs	r0, #40	@ 0x28
 8000e22:	f000 fdb8 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e26:	2028      	movs	r0, #40	@ 0x28
 8000e28:	f000 fdcf 	bl	80019ca <HAL_NVIC_EnableIRQ>

}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	@ 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58020c00 	.word	0x58020c00
 8000e40:	58021000 	.word	0x58021000
 8000e44:	58020800 	.word	0x58020800
 8000e48:	58021800 	.word	0x58021800
 8000e4c:	58020000 	.word	0x58020000

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fc1e 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f812 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f7ff fef4 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e60:	f7ff fdb8 	bl	80009d4 <MX_DMA_Init>
  MX_ETH_Init();
 8000e64:	f7ff fdd6 	bl	8000a14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e68:	f000 faf2 	bl	8001450 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000e6c:	f000 fbe0 	bl	8001630 <MX_USB_OTG_HS_USB_Init>
  MX_RTC_Init();
 8000e70:	f000 f888 	bl	8000f84 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000e74:	f7ff fd9c 	bl	80009b0 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000e78:	f7ff fc22 	bl	80006c0 <debugCLITask>
 8000e7c:	e7fc      	b.n	8000e78 <main+0x28>
	...

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09c      	sub	sp, #112	@ 0x70
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	224c      	movs	r2, #76	@ 0x4c
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f00a fb73 	bl	800b57a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fb6d 	bl	800b57a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f004 fa05 	bl	80052b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <SystemClock_Config+0xf0>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a30      	ldr	r2, [pc, #192]	@ (8000f70 <SystemClock_Config+0xf0>)
 8000eb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <SystemClock_Config+0xf0>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec2:	bf00      	nop
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <SystemClock_Config+0xf0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed0:	d1f8      	bne.n	8000ec4 <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed2:	f004 f9dd 	bl	8005290 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <SystemClock_Config+0xf4>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eda:	4a26      	ldr	r2, [pc, #152]	@ (8000f74 <SystemClock_Config+0xf4>)
 8000edc:	f023 0318 	bic.w	r3, r3, #24
 8000ee0:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000ee2:	2325      	movs	r3, #37	@ 0x25
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000f00:	f240 1313 	movw	r3, #275	@ 0x113
 8000f04:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f12:	2304      	movs	r3, #4
 8000f14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 f9fe 	bl	8005324 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f2e:	f000 f823 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	233f      	movs	r3, #63	@ 0x3f
 8000f34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2303      	movs	r3, #3
 8000f38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2103      	movs	r1, #3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fdbd 	bl	8005ad8 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f64:	f000 f808 	bl	8000f78 <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3770      	adds	r7, #112	@ 0x70
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024800 	.word	0x58024800
 8000f74:	58024400 	.word	0x58024400

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	@ 0x40
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2228      	movs	r2, #40	@ 0x28
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a fae8 	bl	800b57a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000faa:	4b3c      	ldr	r3, [pc, #240]	@ (800109c <MX_RTC_Init+0x118>)
 8000fac:	4a3c      	ldr	r2, [pc, #240]	@ (80010a0 <MX_RTC_Init+0x11c>)
 8000fae:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800109c <MX_RTC_Init+0x118>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <MX_RTC_Init+0x118>)
 8000fb8:	227f      	movs	r2, #127	@ 0x7f
 8000fba:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fbc:	4b37      	ldr	r3, [pc, #220]	@ (800109c <MX_RTC_Init+0x118>)
 8000fbe:	22ff      	movs	r2, #255	@ 0xff
 8000fc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <MX_RTC_Init+0x118>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc8:	4b34      	ldr	r3, [pc, #208]	@ (800109c <MX_RTC_Init+0x118>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fce:	4b33      	ldr	r3, [pc, #204]	@ (800109c <MX_RTC_Init+0x118>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	@ (800109c <MX_RTC_Init+0x118>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fda:	4830      	ldr	r0, [pc, #192]	@ (800109c <MX_RTC_Init+0x118>)
 8000fdc:	f006 feca 	bl	8007d74 <HAL_RTC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000fe6:	f7ff ffc7 	bl	8000f78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x10;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	4823      	ldr	r0, [pc, #140]	@ (800109c <MX_RTC_Init+0x118>)
 800100e:	f006 ff33 	bl	8007e78 <HAL_RTC_SetTime>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001018:	f7ff ffae 	bl	8000f78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800101c:	2307      	movs	r3, #7
 800101e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 8001022:	2311      	movs	r3, #17
 8001024:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x11;
 8001028:	2311      	movs	r3, #17
 800102a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x24;
 800102e:	2324      	movs	r3, #36	@ 0x24
 8001030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	4817      	ldr	r0, [pc, #92]	@ (800109c <MX_RTC_Init+0x118>)
 800103e:	f007 f815 	bl	800806c <HAL_RTC_SetDate>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001048:	f7ff ff96 	bl	8000f78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800104c:	2300      	movs	r3, #0
 800104e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001050:	2300      	movs	r3, #0
 8001052:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001054:	2300      	movs	r3, #0
 8001056:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001070:	2301      	movs	r3, #1
 8001072:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <MX_RTC_Init+0x118>)
 8001084:	f007 f8c8 	bl	8008218 <HAL_RTC_SetAlarm>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800108e:	f7ff ff73 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3740      	adds	r7, #64	@ 0x40
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240006bc 	.word	0x240006bc
 80010a0:	58004000 	.word	0x58004000

080010a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b0      	sub	sp, #192	@ 0xc0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	22b8      	movs	r2, #184	@ 0xb8
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a fa60 	bl	800b57a <memset>
  if(rtcHandle->Instance==RTC)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_RTC_MspInit+0x5c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d119      	bne.n	80010f8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 f887 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80010e8:	f7ff ff46 	bl	8000f78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_RTC_MspInit+0x60>)
 80010ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_RTC_MspInit+0x60>)
 80010f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010f6:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	37c0      	adds	r7, #192	@ 0xc0
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58004000 	.word	0x58004000
 8001104:	58024400 	.word	0x58024400

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_MspInit+0x30>)
 8001110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <HAL_MspInit+0x30>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_MspInit+0x30>)
 8001120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	58024400 	.word	0x58024400

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <NMI_Handler+0x4>

08001144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <MemManage_Handler+0x4>

08001154 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <UsageFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 faf1 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <DMA1_Stream0_IRQHandler+0x10>)
 80011a2:	f001 ff53 	bl	800304c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000778 	.word	0x24000778

080011b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <USART3_IRQHandler+0x10>)
 80011b6:	f007 fc19 	bl	80089ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240006e4 	.word	0x240006e4

080011c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011cc:	f004 f845 	bl	800525a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_kill>:

int _kill(int pid, int sig)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ee:	f00a fa7f 	bl	800b6f0 <__errno>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2216      	movs	r2, #22
 80011f6:	601a      	str	r2, [r3, #0]
  return -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_exit>:

void _exit (int status)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffe7 	bl	80011e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <_exit+0x12>

0800121a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00a      	b.n	8001242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122c:	f3af 8000 	nop.w
 8001230:	4601      	mov	r1, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	60ba      	str	r2, [r7, #8]
 8001238:	b2ca      	uxtb	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbf0      	blt.n	800122c <_read+0x12>
  }

  return len;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e009      	b.n	800127a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf1      	blt.n	8001266 <_write+0x12>
  }
  return len;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_close>:

int _close(int file)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b4:	605a      	str	r2, [r3, #4]
  return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_isatty>:

int _isatty(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f00a f9e4 	bl	800b6f0 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24050000 	.word	0x24050000
 8001354:	00000400 	.word	0x00000400
 8001358:	240006e0 	.word	0x240006e0
 800135c:	24000950 	.word	0x24000950

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001364:	4b32      	ldr	r3, [pc, #200]	@ (8001430 <SystemInit+0xd0>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a31      	ldr	r2, [pc, #196]	@ (8001430 <SystemInit+0xd0>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <SystemInit+0xd4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	2b06      	cmp	r3, #6
 800137e:	d807      	bhi.n	8001390 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <SystemInit+0xd4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 030f 	bic.w	r3, r3, #15
 8001388:	4a2a      	ldr	r2, [pc, #168]	@ (8001434 <SystemInit+0xd4>)
 800138a:	f043 0307 	orr.w	r3, r3, #7
 800138e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <SystemInit+0xd8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <SystemInit+0xd8>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <SystemInit+0xd8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013a2:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <SystemInit+0xd8>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4924      	ldr	r1, [pc, #144]	@ (8001438 <SystemInit+0xd8>)
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <SystemInit+0xdc>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <SystemInit+0xd4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <SystemInit+0xd4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 030f 	bic.w	r3, r3, #15
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <SystemInit+0xd4>)
 80013c4:	f043 0307 	orr.w	r3, r3, #7
 80013c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <SystemInit+0xd8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <SystemInit+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <SystemInit+0xd8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <SystemInit+0xd8>)
 80013de:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <SystemInit+0xe0>)
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <SystemInit+0xd8>)
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <SystemInit+0xe4>)
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <SystemInit+0xd8>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <SystemInit+0xe8>)
 80013ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <SystemInit+0xd8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <SystemInit+0xd8>)
 80013f6:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <SystemInit+0xe8>)
 80013f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SystemInit+0xd8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <SystemInit+0xd8>)
 8001402:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <SystemInit+0xe8>)
 8001404:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <SystemInit+0xd8>)
 8001408:	2200      	movs	r2, #0
 800140a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <SystemInit+0xd8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <SystemInit+0xd8>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <SystemInit+0xd8>)
 800141a:	2200      	movs	r2, #0
 800141c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <SystemInit+0xec>)
 8001420:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001424:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	52002000 	.word	0x52002000
 8001438:	58024400 	.word	0x58024400
 800143c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001440:	02020200 	.word	0x02020200
 8001444:	01ff0000 	.word	0x01ff0000
 8001448:	01010280 	.word	0x01010280
 800144c:	52004000 	.word	0x52004000

08001450 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <MX_USART3_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800145c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001498:	4811      	ldr	r0, [pc, #68]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 800149a:	f007 f8e9 	bl	8008670 <HAL_UART_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014a4:	f7ff fd68 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ac:	f009 fb19 	bl	800aae2 <HAL_UARTEx_SetTxFifoThreshold>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014b6:	f7ff fd5f 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014be:	f009 fb4e 	bl	800ab5e <HAL_UARTEx_SetRxFifoThreshold>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f7ff fd56 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_USART3_UART_Init+0x90>)
 80014ce:	f009 facf 	bl	800aa70 <HAL_UARTEx_DisableFifoMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f7ff fd4e 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	240006e4 	.word	0x240006e4
 80014e4:	40004800 	.word	0x40004800

080014e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0b8      	sub	sp, #224	@ 0xe0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	22b8      	movs	r2, #184	@ 0xb8
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f00a f836 	bl	800b57a <memset>
  if(uartHandle->Instance==USART3)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a42      	ldr	r2, [pc, #264]	@ (800161c <HAL_UART_MspInit+0x134>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d17c      	bne.n	8001612 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001518:	f04f 0202 	mov.w	r2, #2
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fe5e 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800153a:	f7ff fd1d 	bl	8000f78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <HAL_UART_MspInit+0x138>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001544:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <HAL_UART_MspInit+0x138>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154e:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_UART_MspInit+0x138>)
 8001550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <HAL_UART_MspInit+0x138>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <HAL_UART_MspInit+0x138>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <HAL_UART_MspInit+0x138>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800159e:	4619      	mov	r1, r3
 80015a0:	4820      	ldr	r0, [pc, #128]	@ (8001624 <HAL_UART_MspInit+0x13c>)
 80015a2:	f003 fc99 	bl	8004ed8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015a8:	4a20      	ldr	r2, [pc, #128]	@ (800162c <HAL_UART_MspInit+0x144>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015ae:	222d      	movs	r2, #45	@ 0x2d
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015e4:	4810      	ldr	r0, [pc, #64]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015e6:	f000 fa0b 	bl	8001a00 <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80015f0:	f7ff fcc2 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <HAL_UART_MspInit+0x140>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2027      	movs	r0, #39	@ 0x27
 8001608:	f000 f9c5 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800160c:	2027      	movs	r0, #39	@ 0x27
 800160e:	f000 f9dc 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	37e0      	adds	r7, #224	@ 0xe0
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004800 	.word	0x40004800
 8001620:	58024400 	.word	0x58024400
 8001624:	58020c00 	.word	0x58020c00
 8001628:	24000778 	.word	0x24000778
 800162c:	40020010 	.word	0x40020010

08001630 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001644:	f7ff fe8c 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f00a f845 	bl	800b6fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff fbed 	bl	8000e50 <main>
  bx  lr
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800167c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001680:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8001684:	0800c850 	.word	0x0800c850
  ldr r2, =_sbss
 8001688:	24000188 	.word	0x24000188
  ldr r4, =_ebss
 800168c:	24000950 	.word	0x24000950

08001690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f970 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a0:	f004 fbd0 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4913      	ldr	r1, [pc, #76]	@ (8001700 <HAL_Init+0x6c>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_Init+0x6c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_Init+0x70>)
 80016d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_Init+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f814 	bl	800170c <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e002      	b.n	80016f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fd0b 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	0800c61c 	.word	0x0800c61c
 8001704:	24000058 	.word	0x24000058
 8001708:	24000054 	.word	0x24000054

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_InitTick+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e021      	b.n	8001764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HAL_InitTick+0x64>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f955 	bl	80019e6 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f91f 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x68>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	24000060 	.word	0x24000060
 8001770:	24000054 	.word	0x24000054
 8001774:	2400005c 	.word	0x2400005c

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	24000060 	.word	0x24000060
 800179c:	240007f0 	.word	0x240007f0

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	240007f0 	.word	0x240007f0

080017b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80017c8:	4904      	ldr	r1, [pc, #16]	@ (80017dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	58000400 	.word	0x58000400

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <__NVIC_SetPriorityGrouping+0x40>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 800180a:	4313      	orrs	r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x40>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00
 8001824:	05fa0000 	.word	0x05fa0000

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4907      	ldr	r1, [pc, #28]	@ (800187c <__NVIC_EnableIRQ+0x38>)
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	@ (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff8e 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff29 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff40 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff90 	bl	80018d4 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5f 	bl	8001880 <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff33 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa4 	bl	800193c <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff feca 	bl	80017a0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e312      	b.n	800203e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a66      	ldr	r2, [pc, #408]	@ (8001bb8 <HAL_DMA_Init+0x1b8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d04a      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a65      	ldr	r2, [pc, #404]	@ (8001bbc <HAL_DMA_Init+0x1bc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d045      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a63      	ldr	r2, [pc, #396]	@ (8001bc0 <HAL_DMA_Init+0x1c0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d040      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a62      	ldr	r2, [pc, #392]	@ (8001bc4 <HAL_DMA_Init+0x1c4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d03b      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a60      	ldr	r2, [pc, #384]	@ (8001bc8 <HAL_DMA_Init+0x1c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d036      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bcc <HAL_DMA_Init+0x1cc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d031      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd0 <HAL_DMA_Init+0x1d0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02c      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd4 <HAL_DMA_Init+0x1d4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d027      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd8 <HAL_DMA_Init+0x1d8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d022      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a59      	ldr	r2, [pc, #356]	@ (8001bdc <HAL_DMA_Init+0x1dc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a57      	ldr	r2, [pc, #348]	@ (8001be0 <HAL_DMA_Init+0x1e0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d018      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a56      	ldr	r2, [pc, #344]	@ (8001be4 <HAL_DMA_Init+0x1e4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a54      	ldr	r2, [pc, #336]	@ (8001be8 <HAL_DMA_Init+0x1e8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00e      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a53      	ldr	r2, [pc, #332]	@ (8001bec <HAL_DMA_Init+0x1ec>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	@ (8001bf0 <HAL_DMA_Init+0x1f0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_DMA_Init+0xb8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_DMA_Init+0x1f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Init+0xbc>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_DMA_Init+0xbe>
 8001abc:	2300      	movs	r3, #0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 813c 	beq.w	8001d3c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a37      	ldr	r2, [pc, #220]	@ (8001bb8 <HAL_DMA_Init+0x1b8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d04a      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a36      	ldr	r2, [pc, #216]	@ (8001bbc <HAL_DMA_Init+0x1bc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d045      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a34      	ldr	r2, [pc, #208]	@ (8001bc0 <HAL_DMA_Init+0x1c0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d040      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a33      	ldr	r2, [pc, #204]	@ (8001bc4 <HAL_DMA_Init+0x1c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d03b      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <HAL_DMA_Init+0x1c8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d036      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a30      	ldr	r2, [pc, #192]	@ (8001bcc <HAL_DMA_Init+0x1cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d031      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd0 <HAL_DMA_Init+0x1d0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d02c      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd4 <HAL_DMA_Init+0x1d4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d027      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd8 <HAL_DMA_Init+0x1d8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d022      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <HAL_DMA_Init+0x1dc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d01d      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a28      	ldr	r2, [pc, #160]	@ (8001be0 <HAL_DMA_Init+0x1e0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d018      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a27      	ldr	r2, [pc, #156]	@ (8001be4 <HAL_DMA_Init+0x1e4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a25      	ldr	r2, [pc, #148]	@ (8001be8 <HAL_DMA_Init+0x1e8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00e      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a24      	ldr	r2, [pc, #144]	@ (8001bec <HAL_DMA_Init+0x1ec>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d009      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a22      	ldr	r2, [pc, #136]	@ (8001bf0 <HAL_DMA_Init+0x1f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d004      	beq.n	8001b74 <HAL_DMA_Init+0x174>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <HAL_DMA_Init+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d108      	bne.n	8001b86 <HAL_DMA_Init+0x186>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e007      	b.n	8001b96 <HAL_DMA_Init+0x196>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b96:	e02f      	b.n	8001bf8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b98:	f7ff fe02 	bl	80017a0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d928      	bls.n	8001bf8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e242      	b.n	800203e <HAL_DMA_Init+0x63e>
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1c8      	bne.n	8001b98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4b83      	ldr	r3, [pc, #524]	@ (8001e20 <HAL_DMA_Init+0x420>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d107      	bne.n	8001c5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4313      	orrs	r3, r2
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b28      	cmp	r3, #40	@ 0x28
 8001c62:	d903      	bls.n	8001c6c <HAL_DMA_Init+0x26c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c6a:	d91f      	bls.n	8001cac <HAL_DMA_Init+0x2ac>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c72:	d903      	bls.n	8001c7c <HAL_DMA_Init+0x27c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b42      	cmp	r3, #66	@ 0x42
 8001c7a:	d917      	bls.n	8001cac <HAL_DMA_Init+0x2ac>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b46      	cmp	r3, #70	@ 0x46
 8001c82:	d903      	bls.n	8001c8c <HAL_DMA_Init+0x28c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b48      	cmp	r3, #72	@ 0x48
 8001c8a:	d90f      	bls.n	8001cac <HAL_DMA_Init+0x2ac>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c92:	d903      	bls.n	8001c9c <HAL_DMA_Init+0x29c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b52      	cmp	r3, #82	@ 0x52
 8001c9a:	d907      	bls.n	8001cac <HAL_DMA_Init+0x2ac>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b73      	cmp	r3, #115	@ 0x73
 8001ca2:	d905      	bls.n	8001cb0 <HAL_DMA_Init+0x2b0>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b77      	cmp	r3, #119	@ 0x77
 8001caa:	d801      	bhi.n	8001cb0 <HAL_DMA_Init+0x2b0>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_DMA_Init+0x2b2>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cbc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f023 0307 	bic.w	r3, r3, #7
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d117      	bne.n	8001d18 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f002 fb2e 	bl	800435c <DMA_CheckFifoParam>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2240      	movs	r2, #64	@ 0x40
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e192      	b.n	800203e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f002 fa69 	bl	80041f8 <DMA_CalcBaseAndBitshift>
 8001d26:	4603      	mov	r3, r0
 8001d28:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	223f      	movs	r2, #63	@ 0x3f
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	e0c8      	b.n	8001ece <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a38      	ldr	r2, [pc, #224]	@ (8001e24 <HAL_DMA_Init+0x424>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	@ (8001e28 <HAL_DMA_Init+0x428>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d01d      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a35      	ldr	r2, [pc, #212]	@ (8001e2c <HAL_DMA_Init+0x42c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a34      	ldr	r2, [pc, #208]	@ (8001e30 <HAL_DMA_Init+0x430>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <HAL_DMA_Init+0x434>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a31      	ldr	r2, [pc, #196]	@ (8001e38 <HAL_DMA_Init+0x438>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e3c <HAL_DMA_Init+0x43c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Init+0x38c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2e      	ldr	r2, [pc, #184]	@ (8001e40 <HAL_DMA_Init+0x440>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0x390>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_Init+0x392>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8092 	beq.w	8001ebc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	@ (8001e24 <HAL_DMA_Init+0x424>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d021      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_DMA_Init+0x428>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d01c      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_DMA_Init+0x42c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d017      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1d      	ldr	r2, [pc, #116]	@ (8001e30 <HAL_DMA_Init+0x430>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d012      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_DMA_Init+0x434>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1a      	ldr	r2, [pc, #104]	@ (8001e38 <HAL_DMA_Init+0x438>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_DMA_Init+0x43c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA_Init+0x3e6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a17      	ldr	r2, [pc, #92]	@ (8001e40 <HAL_DMA_Init+0x440>)
 8001de4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_DMA_Init+0x444>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b40      	cmp	r3, #64	@ 0x40
 8001e0c:	d01c      	beq.n	8001e48 <HAL_DMA_Init+0x448>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b80      	cmp	r3, #128	@ 0x80
 8001e14:	d102      	bne.n	8001e1c <HAL_DMA_Init+0x41c>
 8001e16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e1a:	e016      	b.n	8001e4a <HAL_DMA_Init+0x44a>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e014      	b.n	8001e4a <HAL_DMA_Init+0x44a>
 8001e20:	fe10803f 	.word	0xfe10803f
 8001e24:	58025408 	.word	0x58025408
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025430 	.word	0x58025430
 8001e30:	58025444 	.word	0x58025444
 8001e34:	58025458 	.word	0x58025458
 8001e38:	5802546c 	.word	0x5802546c
 8001e3c:	58025480 	.word	0x58025480
 8001e40:	58025494 	.word	0x58025494
 8001e44:	fffe000f 	.word	0xfffe000f
 8001e48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002048 <HAL_DMA_Init+0x648>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4a6e      	ldr	r2, [pc, #440]	@ (800204c <HAL_DMA_Init+0x64c>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	009a      	lsls	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 f9a9 	bl	80041f8 <DMA_CalcBaseAndBitshift>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e008      	b.n	8001ece <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0b7      	b.n	800203e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8002050 <HAL_DMA_Init+0x650>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d072      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_DMA_Init+0x654>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d06d      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8002058 <HAL_DMA_Init+0x658>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d068      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800205c <HAL_DMA_Init+0x65c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d063      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a59      	ldr	r2, [pc, #356]	@ (8002060 <HAL_DMA_Init+0x660>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <HAL_DMA_Init+0x664>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d059      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a56      	ldr	r2, [pc, #344]	@ (8002068 <HAL_DMA_Init+0x668>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d054      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a54      	ldr	r2, [pc, #336]	@ (800206c <HAL_DMA_Init+0x66c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04f      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a53      	ldr	r2, [pc, #332]	@ (8002070 <HAL_DMA_Init+0x670>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04a      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a51      	ldr	r2, [pc, #324]	@ (8002074 <HAL_DMA_Init+0x674>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d045      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a50      	ldr	r2, [pc, #320]	@ (8002078 <HAL_DMA_Init+0x678>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_DMA_Init+0x67c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d03b      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002080 <HAL_DMA_Init+0x680>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d036      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_DMA_Init+0x684>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d031      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_DMA_Init+0x688>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d02c      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a48      	ldr	r2, [pc, #288]	@ (800208c <HAL_DMA_Init+0x68c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d027      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a47      	ldr	r2, [pc, #284]	@ (8002090 <HAL_DMA_Init+0x690>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a45      	ldr	r2, [pc, #276]	@ (8002094 <HAL_DMA_Init+0x694>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01d      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a44      	ldr	r2, [pc, #272]	@ (8002098 <HAL_DMA_Init+0x698>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a42      	ldr	r2, [pc, #264]	@ (800209c <HAL_DMA_Init+0x69c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a41      	ldr	r2, [pc, #260]	@ (80020a0 <HAL_DMA_Init+0x6a0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80020a4 <HAL_DMA_Init+0x6a4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	@ (80020a8 <HAL_DMA_Init+0x6a8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Init+0x5be>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ac <HAL_DMA_Init+0x6ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Init+0x5c2>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_Init+0x5c4>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f002 fa43 	bl	8004454 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b80      	cmp	r3, #128	@ 0x80
 8001fd4:	d102      	bne.n	8001fdc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ff0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_DMA_Init+0x61c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d80c      	bhi.n	800201c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f002 fac0 	bl	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e008      	b.n	800202e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	a7fdabf8 	.word	0xa7fdabf8
 800204c:	cccccccd 	.word	0xcccccccd
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	40020040 	.word	0x40020040
 800205c:	40020058 	.word	0x40020058
 8002060:	40020070 	.word	0x40020070
 8002064:	40020088 	.word	0x40020088
 8002068:	400200a0 	.word	0x400200a0
 800206c:	400200b8 	.word	0x400200b8
 8002070:	40020410 	.word	0x40020410
 8002074:	40020428 	.word	0x40020428
 8002078:	40020440 	.word	0x40020440
 800207c:	40020458 	.word	0x40020458
 8002080:	40020470 	.word	0x40020470
 8002084:	40020488 	.word	0x40020488
 8002088:	400204a0 	.word	0x400204a0
 800208c:	400204b8 	.word	0x400204b8
 8002090:	58025408 	.word	0x58025408
 8002094:	5802541c 	.word	0x5802541c
 8002098:	58025430 	.word	0x58025430
 800209c:	58025444 	.word	0x58025444
 80020a0:	58025458 	.word	0x58025458
 80020a4:	5802546c 	.word	0x5802546c
 80020a8:	58025480 	.word	0x58025480
 80020ac:	58025494 	.word	0x58025494

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e226      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_DMA_Start_IT+0x2a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e21f      	b.n	800251a <HAL_DMA_Start_IT+0x46a>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	f040 820a 	bne.w	8002504 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a68      	ldr	r2, [pc, #416]	@ (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a66      	ldr	r2, [pc, #408]	@ (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a65      	ldr	r2, [pc, #404]	@ (80022ac <HAL_DMA_Start_IT+0x1fc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a63      	ldr	r2, [pc, #396]	@ (80022b0 <HAL_DMA_Start_IT+0x200>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a62      	ldr	r2, [pc, #392]	@ (80022b4 <HAL_DMA_Start_IT+0x204>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a60      	ldr	r2, [pc, #384]	@ (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_DMA_Start_IT+0x20c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	@ (80022c0 <HAL_DMA_Start_IT+0x210>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	@ (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	@ (80022c8 <HAL_DMA_Start_IT+0x218>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	@ (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_DMA_Start_IT+0x224>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a54      	ldr	r2, [pc, #336]	@ (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a53      	ldr	r2, [pc, #332]	@ (80022dc <HAL_DMA_Start_IT+0x22c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Start_IT+0xee>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a51      	ldr	r2, [pc, #324]	@ (80022e0 <HAL_DMA_Start_IT+0x230>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_Start_IT+0x100>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_DMA_Start_IT+0x110>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 fe6a 	bl	8003ea0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	@ (80022a4 <HAL_DMA_Start_IT+0x1f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d04a      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a33      	ldr	r2, [pc, #204]	@ (80022a8 <HAL_DMA_Start_IT+0x1f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d045      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a31      	ldr	r2, [pc, #196]	@ (80022ac <HAL_DMA_Start_IT+0x1fc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d040      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a30      	ldr	r2, [pc, #192]	@ (80022b0 <HAL_DMA_Start_IT+0x200>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d03b      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2e      	ldr	r2, [pc, #184]	@ (80022b4 <HAL_DMA_Start_IT+0x204>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d036      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	@ (80022b8 <HAL_DMA_Start_IT+0x208>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d031      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <HAL_DMA_Start_IT+0x20c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02c      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <HAL_DMA_Start_IT+0x210>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d027      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a28      	ldr	r2, [pc, #160]	@ (80022c4 <HAL_DMA_Start_IT+0x214>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d022      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a27      	ldr	r2, [pc, #156]	@ (80022c8 <HAL_DMA_Start_IT+0x218>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d01d      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a25      	ldr	r2, [pc, #148]	@ (80022cc <HAL_DMA_Start_IT+0x21c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d018      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a24      	ldr	r2, [pc, #144]	@ (80022d0 <HAL_DMA_Start_IT+0x220>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <HAL_DMA_Start_IT+0x224>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00e      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_DMA_Start_IT+0x228>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1f      	ldr	r2, [pc, #124]	@ (80022dc <HAL_DMA_Start_IT+0x22c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Start_IT+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_DMA_Start_IT+0x230>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Start_IT+0x1c0>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_DMA_Start_IT+0x1c2>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 021e 	bic.w	r2, r3, #30
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0216 	orr.w	r2, r2, #22
 8002288:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d03e      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0208 	orr.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e035      	b.n	8002310 <HAL_DMA_Start_IT+0x260>
 80022a4:	40020010 	.word	0x40020010
 80022a8:	40020028 	.word	0x40020028
 80022ac:	40020040 	.word	0x40020040
 80022b0:	40020058 	.word	0x40020058
 80022b4:	40020070 	.word	0x40020070
 80022b8:	40020088 	.word	0x40020088
 80022bc:	400200a0 	.word	0x400200a0
 80022c0:	400200b8 	.word	0x400200b8
 80022c4:	40020410 	.word	0x40020410
 80022c8:	40020428 	.word	0x40020428
 80022cc:	40020440 	.word	0x40020440
 80022d0:	40020458 	.word	0x40020458
 80022d4:	40020470 	.word	0x40020470
 80022d8:	40020488 	.word	0x40020488
 80022dc:	400204a0 	.word	0x400204a0
 80022e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 020e 	bic.w	r2, r3, #14
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 020a 	orr.w	r2, r2, #10
 80022f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0204 	orr.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	@ (8002524 <HAL_DMA_Start_IT+0x474>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d072      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a82      	ldr	r2, [pc, #520]	@ (8002528 <HAL_DMA_Start_IT+0x478>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d06d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a80      	ldr	r2, [pc, #512]	@ (800252c <HAL_DMA_Start_IT+0x47c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d068      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7f      	ldr	r2, [pc, #508]	@ (8002530 <HAL_DMA_Start_IT+0x480>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d063      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a7d      	ldr	r2, [pc, #500]	@ (8002534 <HAL_DMA_Start_IT+0x484>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d05e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7c      	ldr	r2, [pc, #496]	@ (8002538 <HAL_DMA_Start_IT+0x488>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d059      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7a      	ldr	r2, [pc, #488]	@ (800253c <HAL_DMA_Start_IT+0x48c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d054      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a79      	ldr	r2, [pc, #484]	@ (8002540 <HAL_DMA_Start_IT+0x490>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04f      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a77      	ldr	r2, [pc, #476]	@ (8002544 <HAL_DMA_Start_IT+0x494>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d04a      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a76      	ldr	r2, [pc, #472]	@ (8002548 <HAL_DMA_Start_IT+0x498>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d045      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a74      	ldr	r2, [pc, #464]	@ (800254c <HAL_DMA_Start_IT+0x49c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d040      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a73      	ldr	r2, [pc, #460]	@ (8002550 <HAL_DMA_Start_IT+0x4a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d03b      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a71      	ldr	r2, [pc, #452]	@ (8002554 <HAL_DMA_Start_IT+0x4a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d036      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a70      	ldr	r2, [pc, #448]	@ (8002558 <HAL_DMA_Start_IT+0x4a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d031      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	@ (800255c <HAL_DMA_Start_IT+0x4ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02c      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d027      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002564 <HAL_DMA_Start_IT+0x4b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d022      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6a      	ldr	r2, [pc, #424]	@ (8002568 <HAL_DMA_Start_IT+0x4b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d01d      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a68      	ldr	r2, [pc, #416]	@ (800256c <HAL_DMA_Start_IT+0x4bc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d018      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a67      	ldr	r2, [pc, #412]	@ (8002570 <HAL_DMA_Start_IT+0x4c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a65      	ldr	r2, [pc, #404]	@ (8002574 <HAL_DMA_Start_IT+0x4c4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a64      	ldr	r2, [pc, #400]	@ (8002578 <HAL_DMA_Start_IT+0x4c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a62      	ldr	r2, [pc, #392]	@ (800257c <HAL_DMA_Start_IT+0x4cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <HAL_DMA_Start_IT+0x4d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_DMA_Start_IT+0x354>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_DMA_Start_IT+0x356>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002426:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d007      	beq.n	8002440 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800243a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_DMA_Start_IT+0x474>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d04a      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a36      	ldr	r2, [pc, #216]	@ (8002528 <HAL_DMA_Start_IT+0x478>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d045      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a34      	ldr	r2, [pc, #208]	@ (800252c <HAL_DMA_Start_IT+0x47c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d040      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a33      	ldr	r2, [pc, #204]	@ (8002530 <HAL_DMA_Start_IT+0x480>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d03b      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a31      	ldr	r2, [pc, #196]	@ (8002534 <HAL_DMA_Start_IT+0x484>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d036      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a30      	ldr	r2, [pc, #192]	@ (8002538 <HAL_DMA_Start_IT+0x488>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d031      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2e      	ldr	r2, [pc, #184]	@ (800253c <HAL_DMA_Start_IT+0x48c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02c      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	@ (8002540 <HAL_DMA_Start_IT+0x490>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d027      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2b      	ldr	r2, [pc, #172]	@ (8002544 <HAL_DMA_Start_IT+0x494>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <HAL_DMA_Start_IT+0x498>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a28      	ldr	r2, [pc, #160]	@ (800254c <HAL_DMA_Start_IT+0x49c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <HAL_DMA_Start_IT+0x4a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <HAL_DMA_Start_IT+0x4a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a24      	ldr	r2, [pc, #144]	@ (8002558 <HAL_DMA_Start_IT+0x4a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_DMA_Start_IT+0x4ac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Start_IT+0x430>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a21      	ldr	r2, [pc, #132]	@ (8002560 <HAL_DMA_Start_IT+0x4b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d108      	bne.n	80024f2 <HAL_DMA_Start_IT+0x442>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e012      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e009      	b.n	8002518 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494

08002584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff f908 	bl	80017a0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e2dc      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e2cd      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a76      	ldr	r2, [pc, #472]	@ (8002798 <HAL_DMA_Abort+0x214>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d04a      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a74      	ldr	r2, [pc, #464]	@ (800279c <HAL_DMA_Abort+0x218>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d045      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a73      	ldr	r2, [pc, #460]	@ (80027a0 <HAL_DMA_Abort+0x21c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d040      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a71      	ldr	r2, [pc, #452]	@ (80027a4 <HAL_DMA_Abort+0x220>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d03b      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a70      	ldr	r2, [pc, #448]	@ (80027a8 <HAL_DMA_Abort+0x224>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d036      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6e      	ldr	r2, [pc, #440]	@ (80027ac <HAL_DMA_Abort+0x228>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6d      	ldr	r2, [pc, #436]	@ (80027b0 <HAL_DMA_Abort+0x22c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d02c      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6b      	ldr	r2, [pc, #428]	@ (80027b4 <HAL_DMA_Abort+0x230>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d027      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6a      	ldr	r2, [pc, #424]	@ (80027b8 <HAL_DMA_Abort+0x234>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a68      	ldr	r2, [pc, #416]	@ (80027bc <HAL_DMA_Abort+0x238>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a67      	ldr	r2, [pc, #412]	@ (80027c0 <HAL_DMA_Abort+0x23c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d018      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	@ (80027c4 <HAL_DMA_Abort+0x240>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a64      	ldr	r2, [pc, #400]	@ (80027c8 <HAL_DMA_Abort+0x244>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a62      	ldr	r2, [pc, #392]	@ (80027cc <HAL_DMA_Abort+0x248>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d009      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a61      	ldr	r2, [pc, #388]	@ (80027d0 <HAL_DMA_Abort+0x24c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d004      	beq.n	800265a <HAL_DMA_Abort+0xd6>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5f      	ldr	r2, [pc, #380]	@ (80027d4 <HAL_DMA_Abort+0x250>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_DMA_Abort+0xda>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort+0xdc>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 021e 	bic.w	r2, r2, #30
 8002672:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002682:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e00a      	b.n	80026a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002798 <HAL_DMA_Abort+0x214>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	@ (800279c <HAL_DMA_Abort+0x218>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a39      	ldr	r2, [pc, #228]	@ (80027a0 <HAL_DMA_Abort+0x21c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	@ (80027a4 <HAL_DMA_Abort+0x220>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a36      	ldr	r2, [pc, #216]	@ (80027a8 <HAL_DMA_Abort+0x224>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a34      	ldr	r2, [pc, #208]	@ (80027ac <HAL_DMA_Abort+0x228>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	@ (80027b0 <HAL_DMA_Abort+0x22c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	@ (80027b4 <HAL_DMA_Abort+0x230>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a30      	ldr	r2, [pc, #192]	@ (80027b8 <HAL_DMA_Abort+0x234>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2e      	ldr	r2, [pc, #184]	@ (80027bc <HAL_DMA_Abort+0x238>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <HAL_DMA_Abort+0x23c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	@ (80027c4 <HAL_DMA_Abort+0x240>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_DMA_Abort+0x244>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <HAL_DMA_Abort+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_DMA_Abort+0x24c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	@ (80027d4 <HAL_DMA_Abort+0x250>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <HAL_DMA_Abort+0x254>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	@ (80027dc <HAL_DMA_Abort+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	@ (80027e0 <HAL_DMA_Abort+0x25c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <HAL_DMA_Abort+0x260>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	@ (80027e8 <HAL_DMA_Abort+0x264>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_DMA_Abort+0x268>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <HAL_DMA_Abort+0x26c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <HAL_DMA_Abort+0x270>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d132      	bne.n	80027f8 <HAL_DMA_Abort+0x274>
 8002792:	2301      	movs	r3, #1
 8002794:	e031      	b.n	80027fa <HAL_DMA_Abort+0x276>
 8002796:	bf00      	nop
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
 80027d8:	58025408 	.word	0x58025408
 80027dc:	5802541c 	.word	0x5802541c
 80027e0:	58025430 	.word	0x58025430
 80027e4:	58025444 	.word	0x58025444
 80027e8:	58025458 	.word	0x58025458
 80027ec:	5802546c 	.word	0x5802546c
 80027f0:	58025480 	.word	0x58025480
 80027f4:	58025494 	.word	0x58025494
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	@ (80029c8 <HAL_DMA_Abort+0x444>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04a      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	@ (80029cc <HAL_DMA_Abort+0x448>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d045      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_DMA_Abort+0x44c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d040      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	@ (80029d4 <HAL_DMA_Abort+0x450>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d03b      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_DMA_Abort+0x454>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d036      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_DMA_Abort+0x458>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	@ (80029e0 <HAL_DMA_Abort+0x45c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d02c      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	@ (80029e4 <HAL_DMA_Abort+0x460>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d027      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	@ (80029e8 <HAL_DMA_Abort+0x464>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5f      	ldr	r2, [pc, #380]	@ (80029ec <HAL_DMA_Abort+0x468>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01d      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5e      	ldr	r2, [pc, #376]	@ (80029f0 <HAL_DMA_Abort+0x46c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d018      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5c      	ldr	r2, [pc, #368]	@ (80029f4 <HAL_DMA_Abort+0x470>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5b      	ldr	r2, [pc, #364]	@ (80029f8 <HAL_DMA_Abort+0x474>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00e      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a59      	ldr	r2, [pc, #356]	@ (80029fc <HAL_DMA_Abort+0x478>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d009      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a58      	ldr	r2, [pc, #352]	@ (8002a00 <HAL_DMA_Abort+0x47c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_DMA_Abort+0x32a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a56      	ldr	r2, [pc, #344]	@ (8002a04 <HAL_DMA_Abort+0x480>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d108      	bne.n	80028c0 <HAL_DMA_Abort+0x33c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e007      	b.n	80028d0 <HAL_DMA_Abort+0x34c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028d0:	e013      	b.n	80028fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7fe ff65 	bl	80017a0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d90c      	bls.n	80028fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12d      	b.n	8002b56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <HAL_DMA_Abort+0x444>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04a      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2d      	ldr	r2, [pc, #180]	@ (80029cc <HAL_DMA_Abort+0x448>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	@ (80029d0 <HAL_DMA_Abort+0x44c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d040      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2a      	ldr	r2, [pc, #168]	@ (80029d4 <HAL_DMA_Abort+0x450>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d03b      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <HAL_DMA_Abort+0x454>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d036      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a27      	ldr	r2, [pc, #156]	@ (80029dc <HAL_DMA_Abort+0x458>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a26      	ldr	r2, [pc, #152]	@ (80029e0 <HAL_DMA_Abort+0x45c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d02c      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a24      	ldr	r2, [pc, #144]	@ (80029e4 <HAL_DMA_Abort+0x460>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d027      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a23      	ldr	r2, [pc, #140]	@ (80029e8 <HAL_DMA_Abort+0x464>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <HAL_DMA_Abort+0x468>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a20      	ldr	r2, [pc, #128]	@ (80029f0 <HAL_DMA_Abort+0x46c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <HAL_DMA_Abort+0x470>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1d      	ldr	r2, [pc, #116]	@ (80029f8 <HAL_DMA_Abort+0x474>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <HAL_DMA_Abort+0x478>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <HAL_DMA_Abort+0x47c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_DMA_Abort+0x422>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <HAL_DMA_Abort+0x480>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Abort+0x426>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_DMA_Abort+0x428>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	223f      	movs	r2, #63	@ 0x3f
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	e02a      	b.n	8002a1e <HAL_DMA_Abort+0x49a>
 80029c8:	40020010 	.word	0x40020010
 80029cc:	40020028 	.word	0x40020028
 80029d0:	40020040 	.word	0x40020040
 80029d4:	40020058 	.word	0x40020058
 80029d8:	40020070 	.word	0x40020070
 80029dc:	40020088 	.word	0x40020088
 80029e0:	400200a0 	.word	0x400200a0
 80029e4:	400200b8 	.word	0x400200b8
 80029e8:	40020410 	.word	0x40020410
 80029ec:	40020428 	.word	0x40020428
 80029f0:	40020440 	.word	0x40020440
 80029f4:	40020458 	.word	0x40020458
 80029f8:	40020470 	.word	0x40020470
 80029fc:	40020488 	.word	0x40020488
 8002a00:	400204a0 	.word	0x400204a0
 8002a04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4f      	ldr	r2, [pc, #316]	@ (8002b60 <HAL_DMA_Abort+0x5dc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d072      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b64 <HAL_DMA_Abort+0x5e0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d06d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	@ (8002b68 <HAL_DMA_Abort+0x5e4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d068      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <HAL_DMA_Abort+0x5e8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d063      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a49      	ldr	r2, [pc, #292]	@ (8002b70 <HAL_DMA_Abort+0x5ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d05e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a47      	ldr	r2, [pc, #284]	@ (8002b74 <HAL_DMA_Abort+0x5f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d059      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a46      	ldr	r2, [pc, #280]	@ (8002b78 <HAL_DMA_Abort+0x5f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d054      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a44      	ldr	r2, [pc, #272]	@ (8002b7c <HAL_DMA_Abort+0x5f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04f      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a43      	ldr	r2, [pc, #268]	@ (8002b80 <HAL_DMA_Abort+0x5fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04a      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a41      	ldr	r2, [pc, #260]	@ (8002b84 <HAL_DMA_Abort+0x600>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d045      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a40      	ldr	r2, [pc, #256]	@ (8002b88 <HAL_DMA_Abort+0x604>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d040      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3e      	ldr	r2, [pc, #248]	@ (8002b8c <HAL_DMA_Abort+0x608>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d03b      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <HAL_DMA_Abort+0x60c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8002b94 <HAL_DMA_Abort+0x610>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_DMA_Abort+0x614>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02c      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a38      	ldr	r2, [pc, #224]	@ (8002b9c <HAL_DMA_Abort+0x618>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a37      	ldr	r2, [pc, #220]	@ (8002ba0 <HAL_DMA_Abort+0x61c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a35      	ldr	r2, [pc, #212]	@ (8002ba4 <HAL_DMA_Abort+0x620>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a34      	ldr	r2, [pc, #208]	@ (8002ba8 <HAL_DMA_Abort+0x624>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <HAL_DMA_Abort+0x628>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a31      	ldr	r2, [pc, #196]	@ (8002bb0 <HAL_DMA_Abort+0x62c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb4 <HAL_DMA_Abort+0x630>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb8 <HAL_DMA_Abort+0x634>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <HAL_DMA_Abort+0x638>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_Abort+0x58e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_Abort+0x590>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
 8002ba0:	58025408 	.word	0x58025408
 8002ba4:	5802541c 	.word	0x5802541c
 8002ba8:	58025430 	.word	0x58025430
 8002bac:	58025444 	.word	0x58025444
 8002bb0:	58025458 	.word	0x58025458
 8002bb4:	5802546c 	.word	0x5802546c
 8002bb8:	58025480 	.word	0x58025480
 8002bbc:	58025494 	.word	0x58025494

08002bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e237      	b.n	8003042 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	@ 0x80
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e22c      	b.n	8003042 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5c      	ldr	r2, [pc, #368]	@ (8002d60 <HAL_DMA_Abort_IT+0x1a0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d64 <HAL_DMA_Abort_IT+0x1a4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a59      	ldr	r2, [pc, #356]	@ (8002d68 <HAL_DMA_Abort_IT+0x1a8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a58      	ldr	r2, [pc, #352]	@ (8002d6c <HAL_DMA_Abort_IT+0x1ac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a56      	ldr	r2, [pc, #344]	@ (8002d70 <HAL_DMA_Abort_IT+0x1b0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a55      	ldr	r2, [pc, #340]	@ (8002d74 <HAL_DMA_Abort_IT+0x1b4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a53      	ldr	r2, [pc, #332]	@ (8002d78 <HAL_DMA_Abort_IT+0x1b8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a52      	ldr	r2, [pc, #328]	@ (8002d7c <HAL_DMA_Abort_IT+0x1bc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	@ (8002d80 <HAL_DMA_Abort_IT+0x1c0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a4f      	ldr	r2, [pc, #316]	@ (8002d84 <HAL_DMA_Abort_IT+0x1c4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a4d      	ldr	r2, [pc, #308]	@ (8002d88 <HAL_DMA_Abort_IT+0x1c8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <HAL_DMA_Abort_IT+0x1cc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4a      	ldr	r2, [pc, #296]	@ (8002d90 <HAL_DMA_Abort_IT+0x1d0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a49      	ldr	r2, [pc, #292]	@ (8002d94 <HAL_DMA_Abort_IT+0x1d4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <HAL_DMA_Abort_IT+0x1d8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xc8>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <HAL_DMA_Abort_IT+0x1dc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Abort_IT+0xcc>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_DMA_Abort_IT+0xce>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8086 	beq.w	8002da0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2204      	movs	r2, #4
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <HAL_DMA_Abort_IT+0x1a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d04a      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_DMA_Abort_IT+0x1a4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d045      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <HAL_DMA_Abort_IT+0x1a8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d040      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8002d6c <HAL_DMA_Abort_IT+0x1ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d03b      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	@ (8002d70 <HAL_DMA_Abort_IT+0x1b0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d036      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a28      	ldr	r2, [pc, #160]	@ (8002d74 <HAL_DMA_Abort_IT+0x1b4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d031      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	@ (8002d78 <HAL_DMA_Abort_IT+0x1b8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a25      	ldr	r2, [pc, #148]	@ (8002d7c <HAL_DMA_Abort_IT+0x1bc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d027      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <HAL_DMA_Abort_IT+0x1c0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_DMA_Abort_IT+0x1c4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <HAL_DMA_Abort_IT+0x1c8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_DMA_Abort_IT+0x1cc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <HAL_DMA_Abort_IT+0x1d0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_DMA_Abort_IT+0x1d4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002d98 <HAL_DMA_Abort_IT+0x1d8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x17c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a19      	ldr	r2, [pc, #100]	@ (8002d9c <HAL_DMA_Abort_IT+0x1dc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <HAL_DMA_Abort_IT+0x18e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e178      	b.n	8003040 <HAL_DMA_Abort_IT+0x480>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e16f      	b.n	8003040 <HAL_DMA_Abort_IT+0x480>
 8002d60:	40020010 	.word	0x40020010
 8002d64:	40020028 	.word	0x40020028
 8002d68:	40020040 	.word	0x40020040
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	40020070 	.word	0x40020070
 8002d74:	40020088 	.word	0x40020088
 8002d78:	400200a0 	.word	0x400200a0
 8002d7c:	400200b8 	.word	0x400200b8
 8002d80:	40020410 	.word	0x40020410
 8002d84:	40020428 	.word	0x40020428
 8002d88:	40020440 	.word	0x40020440
 8002d8c:	40020458 	.word	0x40020458
 8002d90:	40020470 	.word	0x40020470
 8002d94:	40020488 	.word	0x40020488
 8002d98:	400204a0 	.word	0x400204a0
 8002d9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6c      	ldr	r2, [pc, #432]	@ (8002f68 <HAL_DMA_Abort_IT+0x3a8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04a      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002f6c <HAL_DMA_Abort_IT+0x3ac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d045      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a69      	ldr	r2, [pc, #420]	@ (8002f70 <HAL_DMA_Abort_IT+0x3b0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a68      	ldr	r2, [pc, #416]	@ (8002f74 <HAL_DMA_Abort_IT+0x3b4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03b      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a66      	ldr	r2, [pc, #408]	@ (8002f78 <HAL_DMA_Abort_IT+0x3b8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d036      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a65      	ldr	r2, [pc, #404]	@ (8002f7c <HAL_DMA_Abort_IT+0x3bc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d031      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a63      	ldr	r2, [pc, #396]	@ (8002f80 <HAL_DMA_Abort_IT+0x3c0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02c      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a62      	ldr	r2, [pc, #392]	@ (8002f84 <HAL_DMA_Abort_IT+0x3c4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d027      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a60      	ldr	r2, [pc, #384]	@ (8002f88 <HAL_DMA_Abort_IT+0x3c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d022      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002f8c <HAL_DMA_Abort_IT+0x3cc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d01d      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <HAL_DMA_Abort_IT+0x3d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5c      	ldr	r2, [pc, #368]	@ (8002f94 <HAL_DMA_Abort_IT+0x3d4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002f98 <HAL_DMA_Abort_IT+0x3d8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a59      	ldr	r2, [pc, #356]	@ (8002f9c <HAL_DMA_Abort_IT+0x3dc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a57      	ldr	r2, [pc, #348]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3e0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Abort_IT+0x290>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a56      	ldr	r2, [pc, #344]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3e4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_Abort_IT+0x2a2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e007      	b.n	8002e72 <HAL_DMA_Abort_IT+0x2b2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3c      	ldr	r2, [pc, #240]	@ (8002f68 <HAL_DMA_Abort_IT+0x3a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d072      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3a      	ldr	r2, [pc, #232]	@ (8002f6c <HAL_DMA_Abort_IT+0x3ac>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d06d      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a39      	ldr	r2, [pc, #228]	@ (8002f70 <HAL_DMA_Abort_IT+0x3b0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d068      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a37      	ldr	r2, [pc, #220]	@ (8002f74 <HAL_DMA_Abort_IT+0x3b4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d063      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a36      	ldr	r2, [pc, #216]	@ (8002f78 <HAL_DMA_Abort_IT+0x3b8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d05e      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a34      	ldr	r2, [pc, #208]	@ (8002f7c <HAL_DMA_Abort_IT+0x3bc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d059      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a33      	ldr	r2, [pc, #204]	@ (8002f80 <HAL_DMA_Abort_IT+0x3c0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d054      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <HAL_DMA_Abort_IT+0x3c4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04f      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a30      	ldr	r2, [pc, #192]	@ (8002f88 <HAL_DMA_Abort_IT+0x3c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d04a      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8002f8c <HAL_DMA_Abort_IT+0x3cc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d045      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2d      	ldr	r2, [pc, #180]	@ (8002f90 <HAL_DMA_Abort_IT+0x3d0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d040      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f94 <HAL_DMA_Abort_IT+0x3d4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d03b      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2a      	ldr	r2, [pc, #168]	@ (8002f98 <HAL_DMA_Abort_IT+0x3d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d036      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	@ (8002f9c <HAL_DMA_Abort_IT+0x3dc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d031      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a27      	ldr	r2, [pc, #156]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3e0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d02c      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a25      	ldr	r2, [pc, #148]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3e4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d027      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a24      	ldr	r2, [pc, #144]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3e8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <HAL_DMA_Abort_IT+0x3ec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01d      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3f0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3f4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3f8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	@ (8002fbc <HAL_DMA_Abort_IT+0x3fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc0 <HAL_DMA_Abort_IT+0x400>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x3a2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_DMA_Abort_IT+0x404>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d132      	bne.n	8002fc8 <HAL_DMA_Abort_IT+0x408>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e031      	b.n	8002fca <HAL_DMA_Abort_IT+0x40a>
 8002f66:	bf00      	nop
 8002f68:	40020010 	.word	0x40020010
 8002f6c:	40020028 	.word	0x40020028
 8002f70:	40020040 	.word	0x40020040
 8002f74:	40020058 	.word	0x40020058
 8002f78:	40020070 	.word	0x40020070
 8002f7c:	40020088 	.word	0x40020088
 8002f80:	400200a0 	.word	0x400200a0
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	40020410 	.word	0x40020410
 8002f8c:	40020428 	.word	0x40020428
 8002f90:	40020440 	.word	0x40020440
 8002f94:	40020458 	.word	0x40020458
 8002f98:	40020470 	.word	0x40020470
 8002f9c:	40020488 	.word	0x40020488
 8002fa0:	400204a0 	.word	0x400204a0
 8002fa4:	400204b8 	.word	0x400204b8
 8002fa8:	58025408 	.word	0x58025408
 8002fac:	5802541c 	.word	0x5802541c
 8002fb0:	58025430 	.word	0x58025430
 8002fb4:	58025444 	.word	0x58025444
 8002fb8:	58025458 	.word	0x58025458
 8002fbc:	5802546c 	.word	0x5802546c
 8002fc0:	58025480 	.word	0x58025480
 8002fc4:	58025494 	.word	0x58025494
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ffc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003014:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800301e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop

0800304c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003058:	4b67      	ldr	r3, [pc, #412]	@ (80031f8 <HAL_DMA_IRQHandler+0x1ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a67      	ldr	r2, [pc, #412]	@ (80031fc <HAL_DMA_IRQHandler+0x1b0>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a5f      	ldr	r2, [pc, #380]	@ (8003200 <HAL_DMA_IRQHandler+0x1b4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5d      	ldr	r2, [pc, #372]	@ (8003204 <HAL_DMA_IRQHandler+0x1b8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a5c      	ldr	r2, [pc, #368]	@ (8003208 <HAL_DMA_IRQHandler+0x1bc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5a      	ldr	r2, [pc, #360]	@ (800320c <HAL_DMA_IRQHandler+0x1c0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a59      	ldr	r2, [pc, #356]	@ (8003210 <HAL_DMA_IRQHandler+0x1c4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_DMA_IRQHandler+0x1c8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a56      	ldr	r2, [pc, #344]	@ (8003218 <HAL_DMA_IRQHandler+0x1cc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a54      	ldr	r2, [pc, #336]	@ (800321c <HAL_DMA_IRQHandler+0x1d0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a53      	ldr	r2, [pc, #332]	@ (8003220 <HAL_DMA_IRQHandler+0x1d4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a51      	ldr	r2, [pc, #324]	@ (8003224 <HAL_DMA_IRQHandler+0x1d8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <HAL_DMA_IRQHandler+0x1dc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4e      	ldr	r2, [pc, #312]	@ (800322c <HAL_DMA_IRQHandler+0x1e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4d      	ldr	r2, [pc, #308]	@ (8003230 <HAL_DMA_IRQHandler+0x1e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a4b      	ldr	r2, [pc, #300]	@ (8003234 <HAL_DMA_IRQHandler+0x1e8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <HAL_DMA_IRQHandler+0x1ec>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_IRQHandler+0xd2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a48      	ldr	r2, [pc, #288]	@ (800323c <HAL_DMA_IRQHandler+0x1f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_DMA_IRQHandler+0xd6>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_DMA_IRQHandler+0xd8>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 842b 	beq.w	8003980 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2208      	movs	r2, #8
 8003134:	409a      	lsls	r2, r3
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a2 	beq.w	8003284 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_DMA_IRQHandler+0x1b4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d04a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2d      	ldr	r2, [pc, #180]	@ (8003204 <HAL_DMA_IRQHandler+0x1b8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d045      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <HAL_DMA_IRQHandler+0x1bc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d040      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2a      	ldr	r2, [pc, #168]	@ (800320c <HAL_DMA_IRQHandler+0x1c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d03b      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a28      	ldr	r2, [pc, #160]	@ (8003210 <HAL_DMA_IRQHandler+0x1c4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d036      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a27      	ldr	r2, [pc, #156]	@ (8003214 <HAL_DMA_IRQHandler+0x1c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d031      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a25      	ldr	r2, [pc, #148]	@ (8003218 <HAL_DMA_IRQHandler+0x1cc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02c      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a24      	ldr	r2, [pc, #144]	@ (800321c <HAL_DMA_IRQHandler+0x1d0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d027      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <HAL_DMA_IRQHandler+0x1d4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d022      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	@ (8003224 <HAL_DMA_IRQHandler+0x1d8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01d      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_DMA_IRQHandler+0x1dc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	@ (800322c <HAL_DMA_IRQHandler+0x1e0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003230 <HAL_DMA_IRQHandler+0x1e4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_DMA_IRQHandler+0x1e8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_DMA_IRQHandler+0x1ec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x194>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <HAL_DMA_IRQHandler+0x1f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d12f      	bne.n	8003240 <HAL_DMA_IRQHandler+0x1f4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e02e      	b.n	8003254 <HAL_DMA_IRQHandler+0x208>
 80031f6:	bf00      	nop
 80031f8:	24000054 	.word	0x24000054
 80031fc:	1b4e81b5 	.word	0x1b4e81b5
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2208      	movs	r2, #8
 8003272:	409a      	lsls	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d06e      	beq.n	8003378 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a69      	ldr	r2, [pc, #420]	@ (8003444 <HAL_DMA_IRQHandler+0x3f8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d04a      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a67      	ldr	r2, [pc, #412]	@ (8003448 <HAL_DMA_IRQHandler+0x3fc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d045      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a66      	ldr	r2, [pc, #408]	@ (800344c <HAL_DMA_IRQHandler+0x400>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d040      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a64      	ldr	r2, [pc, #400]	@ (8003450 <HAL_DMA_IRQHandler+0x404>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d03b      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a63      	ldr	r2, [pc, #396]	@ (8003454 <HAL_DMA_IRQHandler+0x408>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d036      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a61      	ldr	r2, [pc, #388]	@ (8003458 <HAL_DMA_IRQHandler+0x40c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d031      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a60      	ldr	r2, [pc, #384]	@ (800345c <HAL_DMA_IRQHandler+0x410>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d02c      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003460 <HAL_DMA_IRQHandler+0x414>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d027      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003464 <HAL_DMA_IRQHandler+0x418>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5b      	ldr	r2, [pc, #364]	@ (8003468 <HAL_DMA_IRQHandler+0x41c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01d      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5a      	ldr	r2, [pc, #360]	@ (800346c <HAL_DMA_IRQHandler+0x420>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d018      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_DMA_IRQHandler+0x424>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a57      	ldr	r2, [pc, #348]	@ (8003474 <HAL_DMA_IRQHandler+0x428>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00e      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a55      	ldr	r2, [pc, #340]	@ (8003478 <HAL_DMA_IRQHandler+0x42c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a54      	ldr	r2, [pc, #336]	@ (800347c <HAL_DMA_IRQHandler+0x430>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_DMA_IRQHandler+0x2ee>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a52      	ldr	r2, [pc, #328]	@ (8003480 <HAL_DMA_IRQHandler+0x434>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10a      	bne.n	8003350 <HAL_DMA_IRQHandler+0x304>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e003      	b.n	8003358 <HAL_DMA_IRQHandler+0x30c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2201      	movs	r2, #1
 8003366:	409a      	lsls	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2204      	movs	r2, #4
 8003382:	409a      	lsls	r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808f 	beq.w	80034ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2c      	ldr	r2, [pc, #176]	@ (8003444 <HAL_DMA_IRQHandler+0x3f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2a      	ldr	r2, [pc, #168]	@ (8003448 <HAL_DMA_IRQHandler+0x3fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_DMA_IRQHandler+0x400>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a27      	ldr	r2, [pc, #156]	@ (8003450 <HAL_DMA_IRQHandler+0x404>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_DMA_IRQHandler+0x408>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a24      	ldr	r2, [pc, #144]	@ (8003458 <HAL_DMA_IRQHandler+0x40c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a23      	ldr	r2, [pc, #140]	@ (800345c <HAL_DMA_IRQHandler+0x410>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <HAL_DMA_IRQHandler+0x414>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a20      	ldr	r2, [pc, #128]	@ (8003464 <HAL_DMA_IRQHandler+0x418>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003468 <HAL_DMA_IRQHandler+0x41c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1d      	ldr	r2, [pc, #116]	@ (800346c <HAL_DMA_IRQHandler+0x420>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <HAL_DMA_IRQHandler+0x424>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1a      	ldr	r2, [pc, #104]	@ (8003474 <HAL_DMA_IRQHandler+0x428>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <HAL_DMA_IRQHandler+0x42c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a17      	ldr	r2, [pc, #92]	@ (800347c <HAL_DMA_IRQHandler+0x430>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_IRQHandler+0x3e2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <HAL_DMA_IRQHandler+0x434>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12a      	bne.n	8003484 <HAL_DMA_IRQHandler+0x438>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e023      	b.n	800348c <HAL_DMA_IRQHandler+0x440>
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00d      	beq.n	80034ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2204      	movs	r2, #4
 800349a:	409a      	lsls	r2, r3
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a6 	beq.w	800360e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a85      	ldr	r2, [pc, #532]	@ (80036dc <HAL_DMA_IRQHandler+0x690>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d04a      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a83      	ldr	r2, [pc, #524]	@ (80036e0 <HAL_DMA_IRQHandler+0x694>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d045      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a82      	ldr	r2, [pc, #520]	@ (80036e4 <HAL_DMA_IRQHandler+0x698>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a80      	ldr	r2, [pc, #512]	@ (80036e8 <HAL_DMA_IRQHandler+0x69c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d03b      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7f      	ldr	r2, [pc, #508]	@ (80036ec <HAL_DMA_IRQHandler+0x6a0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d036      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7d      	ldr	r2, [pc, #500]	@ (80036f0 <HAL_DMA_IRQHandler+0x6a4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d031      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7c      	ldr	r2, [pc, #496]	@ (80036f4 <HAL_DMA_IRQHandler+0x6a8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02c      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7a      	ldr	r2, [pc, #488]	@ (80036f8 <HAL_DMA_IRQHandler+0x6ac>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d027      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a79      	ldr	r2, [pc, #484]	@ (80036fc <HAL_DMA_IRQHandler+0x6b0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a77      	ldr	r2, [pc, #476]	@ (8003700 <HAL_DMA_IRQHandler+0x6b4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a76      	ldr	r2, [pc, #472]	@ (8003704 <HAL_DMA_IRQHandler+0x6b8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a74      	ldr	r2, [pc, #464]	@ (8003708 <HAL_DMA_IRQHandler+0x6bc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a73      	ldr	r2, [pc, #460]	@ (800370c <HAL_DMA_IRQHandler+0x6c0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a71      	ldr	r2, [pc, #452]	@ (8003710 <HAL_DMA_IRQHandler+0x6c4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a70      	ldr	r2, [pc, #448]	@ (8003714 <HAL_DMA_IRQHandler+0x6c8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_DMA_IRQHandler+0x516>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	@ (8003718 <HAL_DMA_IRQHandler+0x6cc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10a      	bne.n	8003578 <HAL_DMA_IRQHandler+0x52c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e009      	b.n	800358c <HAL_DMA_IRQHandler+0x540>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d03e      	beq.n	800360e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2210      	movs	r2, #16
 800359a:	409a      	lsls	r2, r3
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d024      	beq.n	800360e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e01f      	b.n	800360e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01b      	beq.n	800360e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
 80035de:	e016      	b.n	800360e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0208 	bic.w	r2, r2, #8
 80035fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2220      	movs	r2, #32
 8003618:	409a      	lsls	r2, r3
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8110 	beq.w	8003844 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <HAL_DMA_IRQHandler+0x690>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d04a      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_DMA_IRQHandler+0x694>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d045      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_DMA_IRQHandler+0x698>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d040      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_DMA_IRQHandler+0x69c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d03b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_DMA_IRQHandler+0x6a0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d036      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_DMA_IRQHandler+0x6a4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d031      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_DMA_IRQHandler+0x6a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_DMA_IRQHandler+0x6ac>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d027      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_DMA_IRQHandler+0x6b0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_DMA_IRQHandler+0x6b4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_DMA_IRQHandler+0x6b8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_DMA_IRQHandler+0x6bc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_DMA_IRQHandler+0x6c0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_DMA_IRQHandler+0x6c4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <HAL_DMA_IRQHandler+0x6c8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x678>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a16      	ldr	r2, [pc, #88]	@ (8003718 <HAL_DMA_IRQHandler+0x6cc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d12b      	bne.n	800371c <HAL_DMA_IRQHandler+0x6d0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e02a      	b.n	8003730 <HAL_DMA_IRQHandler+0x6e4>
 80036da:	bf00      	nop
 80036dc:	40020010 	.word	0x40020010
 80036e0:	40020028 	.word	0x40020028
 80036e4:	40020040 	.word	0x40020040
 80036e8:	40020058 	.word	0x40020058
 80036ec:	40020070 	.word	0x40020070
 80036f0:	40020088 	.word	0x40020088
 80036f4:	400200a0 	.word	0x400200a0
 80036f8:	400200b8 	.word	0x400200b8
 80036fc:	40020410 	.word	0x40020410
 8003700:	40020428 	.word	0x40020428
 8003704:	40020440 	.word	0x40020440
 8003708:	40020458 	.word	0x40020458
 800370c:	40020470 	.word	0x40020470
 8003710:	40020488 	.word	0x40020488
 8003714:	400204a0 	.word	0x400204a0
 8003718:	400204b8 	.word	0x400204b8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf14      	ite	ne
 800372a:	2301      	movne	r3, #1
 800372c:	2300      	moveq	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8087 	beq.w	8003844 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2220      	movs	r2, #32
 8003740:	409a      	lsls	r2, r3
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b04      	cmp	r3, #4
 8003750:	d139      	bne.n	80037c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0216 	bic.w	r2, r2, #22
 8003760:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003770:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <HAL_DMA_IRQHandler+0x736>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0208 	bic.w	r2, r2, #8
 8003790:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	223f      	movs	r2, #63	@ 0x3f
 800379c:	409a      	lsls	r2, r3
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 834a 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
          }
          return;
 80037c4:	e344      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e027      	b.n	8003844 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d023      	beq.n	8003844 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e01e      	b.n	8003844 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0210 	bic.w	r2, r2, #16
 8003822:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8306 	beq.w	8003e5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8088 	beq.w	800396c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a7a      	ldr	r2, [pc, #488]	@ (8003a54 <HAL_DMA_IRQHandler+0xa08>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a79      	ldr	r2, [pc, #484]	@ (8003a58 <HAL_DMA_IRQHandler+0xa0c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d045      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a77      	ldr	r2, [pc, #476]	@ (8003a5c <HAL_DMA_IRQHandler+0xa10>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d040      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a76      	ldr	r2, [pc, #472]	@ (8003a60 <HAL_DMA_IRQHandler+0xa14>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d03b      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a74      	ldr	r2, [pc, #464]	@ (8003a64 <HAL_DMA_IRQHandler+0xa18>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d036      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a73      	ldr	r2, [pc, #460]	@ (8003a68 <HAL_DMA_IRQHandler+0xa1c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d031      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a71      	ldr	r2, [pc, #452]	@ (8003a6c <HAL_DMA_IRQHandler+0xa20>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02c      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a70      	ldr	r2, [pc, #448]	@ (8003a70 <HAL_DMA_IRQHandler+0xa24>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d027      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a74 <HAL_DMA_IRQHandler+0xa28>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a78 <HAL_DMA_IRQHandler+0xa2c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a7c <HAL_DMA_IRQHandler+0xa30>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <HAL_DMA_IRQHandler+0xa34>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	@ (8003a84 <HAL_DMA_IRQHandler+0xa38>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a67      	ldr	r2, [pc, #412]	@ (8003a88 <HAL_DMA_IRQHandler+0xa3c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_DMA_IRQHandler+0xa40>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_IRQHandler+0x8b8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a64      	ldr	r2, [pc, #400]	@ (8003a90 <HAL_DMA_IRQHandler+0xa44>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d108      	bne.n	8003916 <HAL_DMA_IRQHandler+0x8ca>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e007      	b.n	8003926 <HAL_DMA_IRQHandler+0x8da>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3301      	adds	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392e:	429a      	cmp	r2, r3
 8003930:	d307      	bcc.n	8003942 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f2      	bne.n	8003926 <HAL_DMA_IRQHandler+0x8da>
 8003940:	e000      	b.n	8003944 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003942:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800395a:	e003      	b.n	8003964 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8272 	beq.w	8003e5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e26c      	b.n	8003e5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a43      	ldr	r2, [pc, #268]	@ (8003a94 <HAL_DMA_IRQHandler+0xa48>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d022      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a42      	ldr	r2, [pc, #264]	@ (8003a98 <HAL_DMA_IRQHandler+0xa4c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d01d      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a40      	ldr	r2, [pc, #256]	@ (8003a9c <HAL_DMA_IRQHandler+0xa50>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d018      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3f      	ldr	r2, [pc, #252]	@ (8003aa0 <HAL_DMA_IRQHandler+0xa54>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a3d      	ldr	r2, [pc, #244]	@ (8003aa4 <HAL_DMA_IRQHandler+0xa58>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00e      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa8 <HAL_DMA_IRQHandler+0xa5c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a3a      	ldr	r2, [pc, #232]	@ (8003aac <HAL_DMA_IRQHandler+0xa60>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x984>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a39      	ldr	r2, [pc, #228]	@ (8003ab0 <HAL_DMA_IRQHandler+0xa64>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d101      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x988>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_DMA_IRQHandler+0x98a>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 823f 	beq.w	8003e5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2204      	movs	r2, #4
 80039ee:	409a      	lsls	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80cd 	beq.w	8003b94 <HAL_DMA_IRQHandler+0xb48>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80c7 	beq.w	8003b94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2204      	movs	r2, #4
 8003a10:	409a      	lsls	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d049      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8210 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3c:	e20a      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8206 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a50:	e200      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe08>
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d160      	bne.n	8003b80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a7f      	ldr	r2, [pc, #508]	@ (8003cc0 <HAL_DMA_IRQHandler+0xc74>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc4 <HAL_DMA_IRQHandler+0xc78>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cc8 <HAL_DMA_IRQHandler+0xc7c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7a      	ldr	r2, [pc, #488]	@ (8003ccc <HAL_DMA_IRQHandler+0xc80>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a79      	ldr	r2, [pc, #484]	@ (8003cd0 <HAL_DMA_IRQHandler+0xc84>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a77      	ldr	r2, [pc, #476]	@ (8003cd4 <HAL_DMA_IRQHandler+0xc88>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a76      	ldr	r2, [pc, #472]	@ (8003cd8 <HAL_DMA_IRQHandler+0xc8c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a74      	ldr	r2, [pc, #464]	@ (8003cdc <HAL_DMA_IRQHandler+0xc90>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a73      	ldr	r2, [pc, #460]	@ (8003ce0 <HAL_DMA_IRQHandler+0xc94>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a71      	ldr	r2, [pc, #452]	@ (8003ce4 <HAL_DMA_IRQHandler+0xc98>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a70      	ldr	r2, [pc, #448]	@ (8003ce8 <HAL_DMA_IRQHandler+0xc9c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6e      	ldr	r2, [pc, #440]	@ (8003cec <HAL_DMA_IRQHandler+0xca0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cf0 <HAL_DMA_IRQHandler+0xca4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_DMA_IRQHandler+0xca8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf8 <HAL_DMA_IRQHandler+0xcac>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xb12>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	@ (8003cfc <HAL_DMA_IRQHandler+0xcb0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xb24>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0208 	bic.w	r2, r2, #8
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_DMA_IRQHandler+0xb34>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8165 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b92:	e15f      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80c5 	beq.w	8003d34 <HAL_DMA_IRQHandler+0xce8>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80bf 	beq.w	8003d34 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 813a 	beq.w	8003e58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bec:	e134      	b.n	8003e58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8130 	beq.w	8003e58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c00:	e12a      	b.n	8003e58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 8089 	bne.w	8003d20 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <HAL_DMA_IRQHandler+0xc74>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04a      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	@ (8003cc4 <HAL_DMA_IRQHandler+0xc78>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d045      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a28      	ldr	r2, [pc, #160]	@ (8003cc8 <HAL_DMA_IRQHandler+0xc7c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d040      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a26      	ldr	r2, [pc, #152]	@ (8003ccc <HAL_DMA_IRQHandler+0xc80>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d03b      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a25      	ldr	r2, [pc, #148]	@ (8003cd0 <HAL_DMA_IRQHandler+0xc84>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d036      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a23      	ldr	r2, [pc, #140]	@ (8003cd4 <HAL_DMA_IRQHandler+0xc88>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d031      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <HAL_DMA_IRQHandler+0xc8c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d02c      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a20      	ldr	r2, [pc, #128]	@ (8003cdc <HAL_DMA_IRQHandler+0xc90>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d027      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce0 <HAL_DMA_IRQHandler+0xc94>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <HAL_DMA_IRQHandler+0xc98>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <HAL_DMA_IRQHandler+0xc9c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1a      	ldr	r2, [pc, #104]	@ (8003cec <HAL_DMA_IRQHandler+0xca0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <HAL_DMA_IRQHandler+0xca4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <HAL_DMA_IRQHandler+0xca8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <HAL_DMA_IRQHandler+0xcac>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_DMA_IRQHandler+0xc62>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <HAL_DMA_IRQHandler+0xcb0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d128      	bne.n	8003d00 <HAL_DMA_IRQHandler+0xcb4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0214 	bic.w	r2, r2, #20
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e027      	b.n	8003d10 <HAL_DMA_IRQHandler+0xcc4>
 8003cc0:	40020010 	.word	0x40020010
 8003cc4:	40020028 	.word	0x40020028
 8003cc8:	40020040 	.word	0x40020040
 8003ccc:	40020058 	.word	0x40020058
 8003cd0:	40020070 	.word	0x40020070
 8003cd4:	40020088 	.word	0x40020088
 8003cd8:	400200a0 	.word	0x400200a0
 8003cdc:	400200b8 	.word	0x400200b8
 8003ce0:	40020410 	.word	0x40020410
 8003ce4:	40020428 	.word	0x40020428
 8003ce8:	40020440 	.word	0x40020440
 8003cec:	40020458 	.word	0x40020458
 8003cf0:	40020470 	.word	0x40020470
 8003cf4:	40020488 	.word	0x40020488
 8003cf8:	400204a0 	.word	0x400204a0
 8003cfc:	400204b8 	.word	0x400204b8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 020a 	bic.w	r2, r2, #10
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d32:	e091      	b.n	8003e58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8088 	beq.w	8003e5a <HAL_DMA_IRQHandler+0xe0e>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8082 	beq.w	8003e5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a41      	ldr	r2, [pc, #260]	@ (8003e60 <HAL_DMA_IRQHandler+0xe14>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a3f      	ldr	r2, [pc, #252]	@ (8003e64 <HAL_DMA_IRQHandler+0xe18>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e68 <HAL_DMA_IRQHandler+0xe1c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <HAL_DMA_IRQHandler+0xe20>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	@ (8003e70 <HAL_DMA_IRQHandler+0xe24>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_DMA_IRQHandler+0xe28>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a38      	ldr	r2, [pc, #224]	@ (8003e78 <HAL_DMA_IRQHandler+0xe2c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a36      	ldr	r2, [pc, #216]	@ (8003e7c <HAL_DMA_IRQHandler+0xe30>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a35      	ldr	r2, [pc, #212]	@ (8003e80 <HAL_DMA_IRQHandler+0xe34>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a33      	ldr	r2, [pc, #204]	@ (8003e84 <HAL_DMA_IRQHandler+0xe38>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a32      	ldr	r2, [pc, #200]	@ (8003e88 <HAL_DMA_IRQHandler+0xe3c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a30      	ldr	r2, [pc, #192]	@ (8003e8c <HAL_DMA_IRQHandler+0xe40>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e90 <HAL_DMA_IRQHandler+0xe44>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e94 <HAL_DMA_IRQHandler+0xe48>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e98 <HAL_DMA_IRQHandler+0xe4c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xdaa>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e9c <HAL_DMA_IRQHandler+0xe50>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <HAL_DMA_IRQHandler+0xdbc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 021c 	bic.w	r2, r2, #28
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e007      	b.n	8003e18 <HAL_DMA_IRQHandler+0xdcc>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 020e 	bic.w	r2, r2, #14
 8003e16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2201      	movs	r2, #1
 8003e22:	409a      	lsls	r2, r3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e004      	b.n	8003e5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e50:	bf00      	nop
 8003e52:	e002      	b.n	8003e5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e5a:	3728      	adds	r7, #40	@ 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020010 	.word	0x40020010
 8003e64:	40020028 	.word	0x40020028
 8003e68:	40020040 	.word	0x40020040
 8003e6c:	40020058 	.word	0x40020058
 8003e70:	40020070 	.word	0x40020070
 8003e74:	40020088 	.word	0x40020088
 8003e78:	400200a0 	.word	0x400200a0
 8003e7c:	400200b8 	.word	0x400200b8
 8003e80:	40020410 	.word	0x40020410
 8003e84:	40020428 	.word	0x40020428
 8003e88:	40020440 	.word	0x40020440
 8003e8c:	40020458 	.word	0x40020458
 8003e90:	40020470 	.word	0x40020470
 8003e94:	40020488 	.word	0x40020488
 8003e98:	400204a0 	.word	0x400204a0
 8003e9c:	400204b8 	.word	0x400204b8

08003ea0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7f      	ldr	r2, [pc, #508]	@ (80040bc <DMA_SetConfig+0x21c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d072      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80040c0 <DMA_SetConfig+0x220>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d06d      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80040c4 <DMA_SetConfig+0x224>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d068      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a7a      	ldr	r2, [pc, #488]	@ (80040c8 <DMA_SetConfig+0x228>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d063      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a79      	ldr	r2, [pc, #484]	@ (80040cc <DMA_SetConfig+0x22c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d05e      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a77      	ldr	r2, [pc, #476]	@ (80040d0 <DMA_SetConfig+0x230>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d059      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a76      	ldr	r2, [pc, #472]	@ (80040d4 <DMA_SetConfig+0x234>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d054      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a74      	ldr	r2, [pc, #464]	@ (80040d8 <DMA_SetConfig+0x238>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d04f      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a73      	ldr	r2, [pc, #460]	@ (80040dc <DMA_SetConfig+0x23c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d04a      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a71      	ldr	r2, [pc, #452]	@ (80040e0 <DMA_SetConfig+0x240>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d045      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a70      	ldr	r2, [pc, #448]	@ (80040e4 <DMA_SetConfig+0x244>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d040      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80040e8 <DMA_SetConfig+0x248>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d03b      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6d      	ldr	r2, [pc, #436]	@ (80040ec <DMA_SetConfig+0x24c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d036      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a6b      	ldr	r2, [pc, #428]	@ (80040f0 <DMA_SetConfig+0x250>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d031      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80040f4 <DMA_SetConfig+0x254>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d02c      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a68      	ldr	r2, [pc, #416]	@ (80040f8 <DMA_SetConfig+0x258>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d027      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a67      	ldr	r2, [pc, #412]	@ (80040fc <DMA_SetConfig+0x25c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a65      	ldr	r2, [pc, #404]	@ (8004100 <DMA_SetConfig+0x260>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a64      	ldr	r2, [pc, #400]	@ (8004104 <DMA_SetConfig+0x264>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a62      	ldr	r2, [pc, #392]	@ (8004108 <DMA_SetConfig+0x268>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a61      	ldr	r2, [pc, #388]	@ (800410c <DMA_SetConfig+0x26c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a5f      	ldr	r2, [pc, #380]	@ (8004110 <DMA_SetConfig+0x270>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8004114 <DMA_SetConfig+0x274>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <DMA_SetConfig+0x10a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5c      	ldr	r2, [pc, #368]	@ (8004118 <DMA_SetConfig+0x278>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <DMA_SetConfig+0x10e>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <DMA_SetConfig+0x110>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a39      	ldr	r2, [pc, #228]	@ (80040bc <DMA_SetConfig+0x21c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d04a      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a38      	ldr	r2, [pc, #224]	@ (80040c0 <DMA_SetConfig+0x220>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d045      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a36      	ldr	r2, [pc, #216]	@ (80040c4 <DMA_SetConfig+0x224>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d040      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a35      	ldr	r2, [pc, #212]	@ (80040c8 <DMA_SetConfig+0x228>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d03b      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <DMA_SetConfig+0x22c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d036      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a32      	ldr	r2, [pc, #200]	@ (80040d0 <DMA_SetConfig+0x230>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d031      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a30      	ldr	r2, [pc, #192]	@ (80040d4 <DMA_SetConfig+0x234>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d02c      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2f      	ldr	r2, [pc, #188]	@ (80040d8 <DMA_SetConfig+0x238>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d027      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2d      	ldr	r2, [pc, #180]	@ (80040dc <DMA_SetConfig+0x23c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d022      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <DMA_SetConfig+0x240>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d01d      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <DMA_SetConfig+0x244>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d018      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <DMA_SetConfig+0x248>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d013      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <DMA_SetConfig+0x24c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00e      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <DMA_SetConfig+0x250>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d009      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <DMA_SetConfig+0x254>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <DMA_SetConfig+0x1d0>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <DMA_SetConfig+0x258>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <DMA_SetConfig+0x1d4>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <DMA_SetConfig+0x1d6>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d059      	beq.n	800412e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	223f      	movs	r2, #63	@ 0x3f
 8004084:	409a      	lsls	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004098:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d138      	bne.n	800411c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040ba:	e086      	b.n	80041ca <DMA_SetConfig+0x32a>
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
 80040fc:	58025408 	.word	0x58025408
 8004100:	5802541c 	.word	0x5802541c
 8004104:	58025430 	.word	0x58025430
 8004108:	58025444 	.word	0x58025444
 800410c:	58025458 	.word	0x58025458
 8004110:	5802546c 	.word	0x5802546c
 8004114:	58025480 	.word	0x58025480
 8004118:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
}
 800412c:	e04d      	b.n	80041ca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <DMA_SetConfig+0x338>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <DMA_SetConfig+0x2de>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a27      	ldr	r2, [pc, #156]	@ (80041dc <DMA_SetConfig+0x33c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <DMA_SetConfig+0x2de>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <DMA_SetConfig+0x340>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <DMA_SetConfig+0x2de>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a24      	ldr	r2, [pc, #144]	@ (80041e4 <DMA_SetConfig+0x344>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <DMA_SetConfig+0x2de>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <DMA_SetConfig+0x348>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <DMA_SetConfig+0x2de>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a21      	ldr	r2, [pc, #132]	@ (80041ec <DMA_SetConfig+0x34c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <DMA_SetConfig+0x2de>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a20      	ldr	r2, [pc, #128]	@ (80041f0 <DMA_SetConfig+0x350>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <DMA_SetConfig+0x2de>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1e      	ldr	r2, [pc, #120]	@ (80041f4 <DMA_SetConfig+0x354>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <DMA_SetConfig+0x2e2>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <DMA_SetConfig+0x2e4>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2201      	movs	r2, #1
 8004192:	409a      	lsls	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b40      	cmp	r3, #64	@ 0x40
 80041a6:	d108      	bne.n	80041ba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	60da      	str	r2, [r3, #12]
}
 80041b8:	e007      	b.n	80041ca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58025408 	.word	0x58025408
 80041dc:	5802541c 	.word	0x5802541c
 80041e0:	58025430 	.word	0x58025430
 80041e4:	58025444 	.word	0x58025444
 80041e8:	58025458 	.word	0x58025458
 80041ec:	5802546c 	.word	0x5802546c
 80041f0:	58025480 	.word	0x58025480
 80041f4:	58025494 	.word	0x58025494

080041f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a42      	ldr	r2, [pc, #264]	@ (8004310 <DMA_CalcBaseAndBitshift+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a41      	ldr	r2, [pc, #260]	@ (8004314 <DMA_CalcBaseAndBitshift+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	@ (8004318 <DMA_CalcBaseAndBitshift+0x120>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3e      	ldr	r2, [pc, #248]	@ (800431c <DMA_CalcBaseAndBitshift+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3c      	ldr	r2, [pc, #240]	@ (8004320 <DMA_CalcBaseAndBitshift+0x128>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <DMA_CalcBaseAndBitshift+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a39      	ldr	r2, [pc, #228]	@ (8004328 <DMA_CalcBaseAndBitshift+0x130>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a38      	ldr	r2, [pc, #224]	@ (800432c <DMA_CalcBaseAndBitshift+0x134>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	@ (8004330 <DMA_CalcBaseAndBitshift+0x138>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a35      	ldr	r2, [pc, #212]	@ (8004334 <DMA_CalcBaseAndBitshift+0x13c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <DMA_CalcBaseAndBitshift+0x140>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a32      	ldr	r2, [pc, #200]	@ (800433c <DMA_CalcBaseAndBitshift+0x144>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	@ (8004340 <DMA_CalcBaseAndBitshift+0x148>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	@ (8004344 <DMA_CalcBaseAndBitshift+0x14c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	@ (8004348 <DMA_CalcBaseAndBitshift+0x150>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <DMA_CalcBaseAndBitshift+0xa8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <DMA_CalcBaseAndBitshift+0x154>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <DMA_CalcBaseAndBitshift+0xac>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <DMA_CalcBaseAndBitshift+0xae>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d024      	beq.n	80042f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3b10      	subs	r3, #16
 80042b2:	4a27      	ldr	r2, [pc, #156]	@ (8004350 <DMA_CalcBaseAndBitshift+0x158>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	4a24      	ldr	r2, [pc, #144]	@ (8004354 <DMA_CalcBaseAndBitshift+0x15c>)
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d908      	bls.n	80042e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <DMA_CalcBaseAndBitshift+0x160>)
 80042da:	4013      	ands	r3, r2
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042e2:	e00d      	b.n	8004300 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <DMA_CalcBaseAndBitshift+0x160>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f2:	e005      	b.n	8004300 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	aaaaaaab 	.word	0xaaaaaaab
 8004354:	0800c62c 	.word	0x0800c62c
 8004358:	fffffc00 	.word	0xfffffc00

0800435c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d120      	bne.n	80043b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2b03      	cmp	r3, #3
 8004376:	d858      	bhi.n	800442a <DMA_CheckFifoParam+0xce>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <DMA_CheckFifoParam+0x24>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a3 	.word	0x080043a3
 8004388:	08004391 	.word	0x08004391
 800438c:	0800442b 	.word	0x0800442b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d048      	beq.n	800442e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a0:	e045      	b.n	800442e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043aa:	d142      	bne.n	8004432 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b0:	e03f      	b.n	8004432 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ba:	d123      	bne.n	8004404 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d838      	bhi.n	8004436 <DMA_CheckFifoParam+0xda>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <DMA_CheckFifoParam+0x70>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043e3 	.word	0x080043e3
 80043d4:	080043dd 	.word	0x080043dd
 80043d8:	080043f5 	.word	0x080043f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
        break;
 80043e0:	e030      	b.n	8004444 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d025      	beq.n	800443a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f2:	e022      	b.n	800443a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043fc:	d11f      	bne.n	800443e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004402:	e01c      	b.n	800443e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	2b02      	cmp	r3, #2
 800440a:	d902      	bls.n	8004412 <DMA_CheckFifoParam+0xb6>
 800440c:	2b03      	cmp	r3, #3
 800440e:	d003      	beq.n	8004418 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004410:	e018      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
        break;
 8004416:	e015      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
    break;
 8004428:	e00b      	b.n	8004442 <DMA_CheckFifoParam+0xe6>
        break;
 800442a:	bf00      	nop
 800442c:	e00a      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800442e:	bf00      	nop
 8004430:	e008      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 8004432:	bf00      	nop
 8004434:	e006      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 8004436:	bf00      	nop
 8004438:	e004      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800443a:	bf00      	nop
 800443c:	e002      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
        break;
 800443e:	bf00      	nop
 8004440:	e000      	b.n	8004444 <DMA_CheckFifoParam+0xe8>
    break;
 8004442:	bf00      	nop
    }
  }

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a38      	ldr	r2, [pc, #224]	@ (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a36      	ldr	r2, [pc, #216]	@ (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01d      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a35      	ldr	r2, [pc, #212]	@ (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a33      	ldr	r2, [pc, #204]	@ (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01a      	beq.n	80044f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3b08      	subs	r3, #8
 80044c4:	4a28      	ldr	r2, [pc, #160]	@ (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4b26      	ldr	r3, [pc, #152]	@ (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a24      	ldr	r2, [pc, #144]	@ (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044f0:	e024      	b.n	800453c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3b10      	subs	r3, #16
 80044fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d806      	bhi.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d902      	bls.n	800451a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3308      	adds	r3, #8
 8004518:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a16      	ldr	r2, [pc, #88]	@ (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800452c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2201      	movs	r2, #1
 8004536:	409a      	lsls	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	58025408 	.word	0x58025408
 800454c:	5802541c 	.word	0x5802541c
 8004550:	58025430 	.word	0x58025430
 8004554:	58025444 	.word	0x58025444
 8004558:	58025458 	.word	0x58025458
 800455c:	5802546c 	.word	0x5802546c
 8004560:	58025480 	.word	0x58025480
 8004564:	58025494 	.word	0x58025494
 8004568:	cccccccd 	.word	0xcccccccd
 800456c:	16009600 	.word	0x16009600
 8004570:	58025880 	.word	0x58025880
 8004574:	aaaaaaab 	.word	0xaaaaaaab
 8004578:	400204b8 	.word	0x400204b8
 800457c:	4002040f 	.word	0x4002040f
 8004580:	10008200 	.word	0x10008200
 8004584:	40020880 	.word	0x40020880

08004588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d04a      	beq.n	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d847      	bhi.n	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a25      	ldr	r2, [pc, #148]	@ (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d022      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a24      	ldr	r2, [pc, #144]	@ (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d01d      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a22      	ldr	r2, [pc, #136]	@ (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d018      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a21      	ldr	r2, [pc, #132]	@ (800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00e      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1e      	ldr	r2, [pc, #120]	@ (8004654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d009      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1b      	ldr	r2, [pc, #108]	@ (800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d101      	bne.n	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045f8:	2300      	movs	r3, #0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a15      	ldr	r2, [pc, #84]	@ (8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004610:	671a      	str	r2, [r3, #112]	@ 0x70
 8004612:	e009      	b.n	8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a11      	ldr	r2, [pc, #68]	@ (800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004626:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3b01      	subs	r3, #1
 800462c:	2201      	movs	r2, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494
 8004660:	1600963f 	.word	0x1600963f
 8004664:	58025940 	.word	0x58025940
 8004668:	1000823f 	.word	0x1000823f
 800466c:	40020940 	.word	0x40020940

08004670 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0e3      	b.n	800484a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2223      	movs	r2, #35	@ 0x23
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fc fa09 	bl	8000aac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469a:	4b6e      	ldr	r3, [pc, #440]	@ (8004854 <HAL_ETH_Init+0x1e4>)
 800469c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004854 <HAL_ETH_Init+0x1e4>)
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <HAL_ETH_Init+0x1e4>)
 80046ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7a1b      	ldrb	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fd f879 	bl	80017b8 <HAL_SYSCFG_ETHInterfaceSelect>
 80046c6:	e003      	b.n	80046d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80046c8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80046cc:	f7fd f874 	bl	80017b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80046d0:	4b61      	ldr	r3, [pc, #388]	@ (8004858 <HAL_ETH_Init+0x1e8>)
 80046d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ec:	f7fd f858 	bl	80017a0 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80046f2:	e011      	b.n	8004718 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80046f4:	f7fd f854 	bl	80017a0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004702:	d909      	bls.n	8004718 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2204      	movs	r2, #4
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	22e0      	movs	r2, #224	@ 0xe0
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e098      	b.n	800484a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e4      	bne.n	80046f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f89e 	bl	800486c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004730:	f001 fd02 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8004734:	4603      	mov	r3, r0
 8004736:	4a49      	ldr	r2, [pc, #292]	@ (800485c <HAL_ETH_Init+0x1ec>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	0c9a      	lsrs	r2, r3, #18
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3a01      	subs	r2, #1
 8004744:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa81 	bl	8004c50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004756:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800475a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800476a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	22e0      	movs	r2, #224	@ 0xe0
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e05d      	b.n	800484a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004796:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800479a:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <HAL_ETH_Init+0x1f0>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6952      	ldr	r2, [r2, #20]
 80047a2:	0051      	lsls	r1, r2, #1
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fae9 	bl	8004d8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb2f 	bl	8004e1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	3305      	adds	r3, #5
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	3303      	adds	r3, #3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	061a      	lsls	r2, r3, #24
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	3302      	adds	r3, #2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800480a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800480c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_ETH_Init+0x1f4>)
 800481e:	430b      	orrs	r3, r1
 8004820:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <HAL_ETH_Init+0x1f8>)
 8004832:	430b      	orrs	r3, r1
 8004834:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2210      	movs	r2, #16
 8004844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
 8004858:	58000400 	.word	0x58000400
 800485c:	431bde83 	.word	0x431bde83
 8004860:	ffff8001 	.word	0xffff8001
 8004864:	0c020060 	.word	0x0c020060
 8004868:	0c20c000 	.word	0x0c20c000

0800486c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800487c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004884:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004886:	f001 fc57 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 800488a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4a1a      	ldr	r2, [pc, #104]	@ (80048f8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d804      	bhi.n	800489e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e022      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <HAL_ETH_SetMDIOClockRange+0x90>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d204      	bcs.n	80048b0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e019      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <HAL_ETH_SetMDIOClockRange+0x94>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d915      	bls.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a12      	ldr	r2, [pc, #72]	@ (8004904 <HAL_ETH_SetMDIOClockRange+0x98>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d804      	bhi.n	80048ca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e00c      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004908 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d804      	bhi.n	80048dc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e003      	b.n	80048e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	02160ebf 	.word	0x02160ebf
 80048fc:	03938700 	.word	0x03938700
 8004900:	05f5e0ff 	.word	0x05f5e0ff
 8004904:	08f0d17f 	.word	0x08f0d17f
 8004908:	0ee6b27f 	.word	0x0ee6b27f

0800490c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800491e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	791b      	ldrb	r3, [r3, #4]
 8004924:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	7b1b      	ldrb	r3, [r3, #12]
 800492c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800492e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7b5b      	ldrb	r3, [r3, #13]
 8004934:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004936:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	7b9b      	ldrb	r3, [r3, #14]
 800493c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800493e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7bdb      	ldrb	r3, [r3, #15]
 8004944:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004946:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	7c12      	ldrb	r2, [r2, #16]
 800494c:	2a00      	cmp	r2, #0
 800494e:	d102      	bne.n	8004956 <ETH_SetMACConfig+0x4a>
 8004950:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004954:	e000      	b.n	8004958 <ETH_SetMACConfig+0x4c>
 8004956:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004958:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	7c52      	ldrb	r2, [r2, #17]
 800495e:	2a00      	cmp	r2, #0
 8004960:	d102      	bne.n	8004968 <ETH_SetMACConfig+0x5c>
 8004962:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004966:	e000      	b.n	800496a <ETH_SetMACConfig+0x5e>
 8004968:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800496a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	7c9b      	ldrb	r3, [r3, #18]
 8004970:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004972:	431a      	orrs	r2, r3
               macconf->Speed |
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004978:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800497e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	7f1b      	ldrb	r3, [r3, #28]
 8004984:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	7f5b      	ldrb	r3, [r3, #29]
 800498c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800498e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	7f92      	ldrb	r2, [r2, #30]
 8004994:	2a00      	cmp	r2, #0
 8004996:	d102      	bne.n	800499e <ETH_SetMACConfig+0x92>
 8004998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800499c:	e000      	b.n	80049a0 <ETH_SetMACConfig+0x94>
 800499e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80049a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	7fdb      	ldrb	r3, [r3, #31]
 80049a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80049a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	d102      	bne.n	80049ba <ETH_SetMACConfig+0xae>
 80049b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049b8:	e000      	b.n	80049bc <ETH_SetMACConfig+0xb0>
 80049ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80049bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80049c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80049cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b56      	ldr	r3, [pc, #344]	@ (8004b38 <ETH_SetMACConfig+0x22c>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80049f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a0a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004a0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d102      	bne.n	8004a1e <ETH_SetMACConfig+0x112>
 8004a18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a1c:	e000      	b.n	8004a20 <ETH_SetMACConfig+0x114>
 8004a1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004a20:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <ETH_SetMACConfig+0x230>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	68f9      	ldr	r1, [r7, #12]
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	4b3a      	ldr	r3, [pc, #232]	@ (8004b40 <ETH_SetMACConfig+0x234>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004a68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	d101      	bne.n	8004a7e <ETH_SetMACConfig+0x172>
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	e000      	b.n	8004a80 <ETH_SetMACConfig+0x174>
 8004a7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004a80:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a92:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004aa8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004ab0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	f023 0103 	bic.w	r1, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004ad6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	d101      	bne.n	8004afa <ETH_SetMACConfig+0x1ee>
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	e000      	b.n	8004afc <ETH_SetMACConfig+0x1f0>
 8004afa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004afc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004b04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004b0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004b1c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	00048083 	.word	0x00048083
 8004b3c:	c0f88000 	.word	0xc0f88000
 8004b40:	fffffef0 	.word	0xfffffef0

08004b44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <ETH_SetDMAConfig+0xf8>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	6811      	ldr	r1, [r2, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	791b      	ldrb	r3, [r3, #4]
 8004b70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	7b1b      	ldrb	r3, [r3, #12]
 8004b7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004c40 <ETH_SetDMAConfig+0xfc>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	430b      	orrs	r3, r1
 8004b98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004bb8:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <ETH_SetDMAConfig+0x100>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bc8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	7d1b      	ldrb	r3, [r3, #20]
 8004bd4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004bd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	7f5b      	ldrb	r3, [r3, #29]
 8004bdc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bea:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004bee:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <ETH_SetDMAConfig+0x104>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bfe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	7f1b      	ldrb	r3, [r3, #28]
 8004c06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c18:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <ETH_SetDMAConfig+0x108>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	430b      	orrs	r3, r1
 8004c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c2c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	ffff87fd 	.word	0xffff87fd
 8004c40:	ffff2ffe 	.word	0xffff2ffe
 8004c44:	fffec000 	.word	0xfffec000
 8004c48:	ffc0efef 	.word	0xffc0efef
 8004c4c:	7fc0ffff 	.word	0x7fc0ffff

08004c50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0a4      	sub	sp, #144	@ 0x90
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c90:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004ca8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004cac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004cfa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d04:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fde6 	bl	800490c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004d44:	2301      	movs	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d5a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004d64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004d70:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff fee1 	bl	8004b44 <ETH_SetDMAConfig>
}
 8004d82:	bf00      	nop
 8004d84:	3790      	adds	r7, #144	@ 0x90
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e01d      	b.n	8004dd4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68d9      	ldr	r1, [r3, #12]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	440b      	add	r3, r1
 8004da8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	3206      	adds	r2, #6
 8004dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d9de      	bls.n	8004d98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de8:	461a      	mov	r2, r3
 8004dea:	2303      	movs	r3, #3
 8004dec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dfc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e023      	b.n	8004e72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2200      	movs	r2, #0
 8004e52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	3212      	adds	r2, #18
 8004e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d9d8      	bls.n	8004e2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	@ 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ee6:	4b86      	ldr	r3, [pc, #536]	@ (8005100 <HAL_GPIO_Init+0x228>)
 8004ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eea:	e18c      	b.n	8005206 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 817e 	beq.w	8005200 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d005      	beq.n	8004f1c <HAL_GPIO_Init+0x44>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d130      	bne.n	8004f7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f52:	2201      	movs	r2, #1
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0201 	and.w	r2, r3, #1
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d017      	beq.n	8004fba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	2203      	movs	r2, #3
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d123      	bne.n	800500e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	08da      	lsrs	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3208      	adds	r2, #8
 8004fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	08da      	lsrs	r2, r3, #3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3208      	adds	r2, #8
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0203 	and.w	r2, r3, #3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80d8 	beq.w	8005200 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005050:	4b2c      	ldr	r3, [pc, #176]	@ (8005104 <HAL_GPIO_Init+0x22c>)
 8005052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005056:	4a2b      	ldr	r2, [pc, #172]	@ (8005104 <HAL_GPIO_Init+0x22c>)
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005060:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_GPIO_Init+0x22c>)
 8005062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800506e:	4a26      	ldr	r2, [pc, #152]	@ (8005108 <HAL_GPIO_Init+0x230>)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	3302      	adds	r3, #2
 8005076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <HAL_GPIO_Init+0x234>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d04a      	beq.n	8005130 <HAL_GPIO_Init+0x258>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_GPIO_Init+0x238>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02b      	beq.n	80050fa <HAL_GPIO_Init+0x222>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <HAL_GPIO_Init+0x23c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d025      	beq.n	80050f6 <HAL_GPIO_Init+0x21e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <HAL_GPIO_Init+0x240>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <HAL_GPIO_Init+0x21a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a19      	ldr	r2, [pc, #100]	@ (800511c <HAL_GPIO_Init+0x244>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d019      	beq.n	80050ee <HAL_GPIO_Init+0x216>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <HAL_GPIO_Init+0x248>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_GPIO_Init+0x212>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <HAL_GPIO_Init+0x24c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00d      	beq.n	80050e6 <HAL_GPIO_Init+0x20e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <HAL_GPIO_Init+0x250>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <HAL_GPIO_Init+0x20a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <HAL_GPIO_Init+0x254>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_GPIO_Init+0x206>
 80050da:	2309      	movs	r3, #9
 80050dc:	e029      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050de:	230a      	movs	r3, #10
 80050e0:	e027      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050e2:	2307      	movs	r3, #7
 80050e4:	e025      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050e6:	2306      	movs	r3, #6
 80050e8:	e023      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050ea:	2305      	movs	r3, #5
 80050ec:	e021      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e01f      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050f2:	2303      	movs	r3, #3
 80050f4:	e01d      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e01b      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e019      	b.n	8005132 <HAL_GPIO_Init+0x25a>
 80050fe:	bf00      	nop
 8005100:	58000080 	.word	0x58000080
 8005104:	58024400 	.word	0x58024400
 8005108:	58000400 	.word	0x58000400
 800510c:	58020000 	.word	0x58020000
 8005110:	58020400 	.word	0x58020400
 8005114:	58020800 	.word	0x58020800
 8005118:	58020c00 	.word	0x58020c00
 800511c:	58021000 	.word	0x58021000
 8005120:	58021400 	.word	0x58021400
 8005124:	58021800 	.word	0x58021800
 8005128:	58021c00 	.word	0x58021c00
 800512c:	58022400 	.word	0x58022400
 8005130:	2300      	movs	r3, #0
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	f002 0203 	and.w	r2, r2, #3
 8005138:	0092      	lsls	r2, r2, #2
 800513a:	4093      	lsls	r3, r2
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005142:	4938      	ldr	r1, [pc, #224]	@ (8005224 <HAL_GPIO_Init+0x34c>)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	f47f ae6b 	bne.w	8004eec <HAL_GPIO_Init+0x14>
  }
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	3724      	adds	r7, #36	@ 0x24
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	58000400 	.word	0x58000400

08005228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
 8005234:	4613      	mov	r3, r2
 8005236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005238:	787b      	ldrb	r3, [r7, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800523e:	887a      	ldrh	r2, [r7, #2]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005244:	e003      	b.n	800524e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	041a      	lsls	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	619a      	str	r2, [r3, #24]
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	4603      	mov	r3, r0
 8005262:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005268:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	4618      	mov	r0, r3
 8005282:	f005 fcf9 	bl	800ac78 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800529a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800529e:	6013      	str	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	58024800 	.word	0x58024800

080052b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <HAL_PWREx_ConfigSupply+0x70>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d00a      	beq.n	80052da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052c4:	4b16      	ldr	r3, [pc, #88]	@ (8005320 <HAL_PWREx_ConfigSupply+0x70>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d001      	beq.n	80052d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e01f      	b.n	8005316 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e01d      	b.n	8005316 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052da:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_PWREx_ConfigSupply+0x70>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 0207 	bic.w	r2, r3, #7
 80052e2:	490f      	ldr	r1, [pc, #60]	@ (8005320 <HAL_PWREx_ConfigSupply+0x70>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052ea:	f7fc fa59 	bl	80017a0 <HAL_GetTick>
 80052ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052f0:	e009      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052f2:	f7fc fa55 	bl	80017a0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005300:	d901      	bls.n	8005306 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_PWREx_ConfigSupply+0x70>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005312:	d1ee      	bne.n	80052f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	58024800 	.word	0x58024800

08005324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	@ 0x30
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e3c8      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8087 	beq.w	8005452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005344:	4b88      	ldr	r3, [pc, #544]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800534e:	4b86      	ldr	r3, [pc, #536]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005356:	2b10      	cmp	r3, #16
 8005358:	d007      	beq.n	800536a <HAL_RCC_OscConfig+0x46>
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	2b18      	cmp	r3, #24
 800535e:	d110      	bne.n	8005382 <HAL_RCC_OscConfig+0x5e>
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d10b      	bne.n	8005382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536a:	4b7f      	ldr	r3, [pc, #508]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d06c      	beq.n	8005450 <HAL_RCC_OscConfig+0x12c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d168      	bne.n	8005450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e3a2      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x76>
 800538c:	4b76      	ldr	r3, [pc, #472]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a75      	ldr	r2, [pc, #468]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e02e      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x98>
 80053a2:	4b71      	ldr	r3, [pc, #452]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a70      	ldr	r2, [pc, #448]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6d      	ldr	r2, [pc, #436]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e01d      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCC_OscConfig+0xbc>
 80053c6:	4b68      	ldr	r3, [pc, #416]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a67      	ldr	r2, [pc, #412]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b65      	ldr	r3, [pc, #404]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a64      	ldr	r2, [pc, #400]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_OscConfig+0xd4>
 80053e0:	4b61      	ldr	r3, [pc, #388]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a60      	ldr	r2, [pc, #384]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80053f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fc f9ce 	bl	80017a0 <HAL_GetTick>
 8005404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005408:	f7fc f9ca 	bl	80017a0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	@ 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e356      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800541a:	4b53      	ldr	r3, [pc, #332]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCC_OscConfig+0xe4>
 8005426:	e014      	b.n	8005452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fc f9ba 	bl	80017a0 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005430:	f7fc f9b6 	bl	80017a0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	@ 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e342      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005442:	4b49      	ldr	r3, [pc, #292]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x10c>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 808c 	beq.w	8005578 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	4b41      	ldr	r3, [pc, #260]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546a:	4b3f      	ldr	r3, [pc, #252]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_RCC_OscConfig+0x162>
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	2b18      	cmp	r3, #24
 800547a:	d137      	bne.n	80054ec <HAL_RCC_OscConfig+0x1c8>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d132      	bne.n	80054ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005486:	4b38      	ldr	r3, [pc, #224]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_RCC_OscConfig+0x17a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e314      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800549e:	4b32      	ldr	r3, [pc, #200]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0219 	bic.w	r2, r3, #25
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	492f      	ldr	r1, [pc, #188]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc f976 	bl	80017a0 <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b8:	f7fc f972 	bl	80017a0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e2fe      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ca:	4b27      	ldr	r3, [pc, #156]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	4920      	ldr	r1, [pc, #128]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ea:	e045      	b.n	8005578 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d026      	beq.n	8005542 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 0219 	bic.w	r2, r3, #25
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	4919      	ldr	r1, [pc, #100]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fc f94b 	bl	80017a0 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fc f947 	bl	80017a0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e2d3      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005520:	4b11      	ldr	r3, [pc, #68]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	490b      	ldr	r1, [pc, #44]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 800553c:	4313      	orrs	r3, r2
 800553e:	604b      	str	r3, [r1, #4]
 8005540:	e01a      	b.n	8005578 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005542:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fc f927 	bl	80017a0 <HAL_GetTick>
 8005552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005554:	e00a      	b.n	800556c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005556:	f7fc f923 	bl	80017a0 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d903      	bls.n	800556c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e2af      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
 8005568:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800556c:	4b96      	ldr	r3, [pc, #600]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ee      	bne.n	8005556 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b00      	cmp	r3, #0
 8005582:	d06a      	beq.n	800565a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005584:	4b90      	ldr	r3, [pc, #576]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800558c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800558e:	4b8e      	ldr	r3, [pc, #568]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d007      	beq.n	80055aa <HAL_RCC_OscConfig+0x286>
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b18      	cmp	r3, #24
 800559e:	d11b      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2b4>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d116      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055aa:	4b87      	ldr	r3, [pc, #540]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_RCC_OscConfig+0x29e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b80      	cmp	r3, #128	@ 0x80
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e282      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c2:	4b81      	ldr	r3, [pc, #516]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	497d      	ldr	r1, [pc, #500]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d6:	e040      	b.n	800565a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d023      	beq.n	8005628 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055e0:	4b79      	ldr	r3, [pc, #484]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a78      	ldr	r2, [pc, #480]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80055e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc f8d8 	bl	80017a0 <HAL_GetTick>
 80055f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055f4:	f7fc f8d4 	bl	80017a0 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e260      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005606:	4b70      	ldr	r3, [pc, #448]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005612:	4b6d      	ldr	r3, [pc, #436]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	4969      	ldr	r1, [pc, #420]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	60cb      	str	r3, [r1, #12]
 8005626:	e018      	b.n	800565a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005628:	4b67      	ldr	r3, [pc, #412]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a66      	ldr	r2, [pc, #408]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 800562e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fc f8b4 	bl	80017a0 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800563c:	f7fc f8b0 	bl	80017a0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e23c      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800564e:	4b5e      	ldr	r3, [pc, #376]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d036      	beq.n	80056d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d019      	beq.n	80056a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566e:	4b56      	ldr	r3, [pc, #344]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	4a55      	ldr	r2, [pc, #340]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fc f891 	bl	80017a0 <HAL_GetTick>
 800567e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005682:	f7fc f88d 	bl	80017a0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e219      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005694:	4b4c      	ldr	r3, [pc, #304]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x35e>
 80056a0:	e018      	b.n	80056d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a2:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80056a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a6:	4a48      	ldr	r2, [pc, #288]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fc f877 	bl	80017a0 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b6:	f7fc f873 	bl	80017a0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e1ff      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056c8:	4b3f      	ldr	r3, [pc, #252]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d036      	beq.n	800574e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d019      	beq.n	800571c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e8:	4b37      	ldr	r3, [pc, #220]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a36      	ldr	r2, [pc, #216]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80056ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f4:	f7fc f854 	bl	80017a0 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056fc:	f7fc f850 	bl	80017a0 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1dc      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800570e:	4b2e      	ldr	r3, [pc, #184]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x3d8>
 800571a:	e018      	b.n	800574e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571c:	4b2a      	ldr	r3, [pc, #168]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a29      	ldr	r2, [pc, #164]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005726:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005728:	f7fc f83a 	bl	80017a0 <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005730:	f7fc f836 	bl	80017a0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e1c2      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005742:	4b21      	ldr	r3, [pc, #132]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8086 	beq.w	8005868 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800575c:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <HAL_RCC_OscConfig+0x4a8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1a      	ldr	r2, [pc, #104]	@ (80057cc <HAL_RCC_OscConfig+0x4a8>)
 8005762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005768:	f7fc f81a 	bl	80017a0 <HAL_GetTick>
 800576c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005770:	f7fc f816 	bl	80017a0 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	@ 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1a2      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005782:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <HAL_RCC_OscConfig+0x4a8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_OscConfig+0x480>
 8005796:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579a:	4a0b      	ldr	r2, [pc, #44]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a2:	e032      	b.n	800580a <HAL_RCC_OscConfig+0x4e6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d111      	bne.n	80057d0 <HAL_RCC_OscConfig+0x4ac>
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b0:	4a05      	ldr	r2, [pc, #20]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b8:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	4a02      	ldr	r2, [pc, #8]	@ (80057c8 <HAL_RCC_OscConfig+0x4a4>)
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c4:	e021      	b.n	800580a <HAL_RCC_OscConfig+0x4e6>
 80057c6:	bf00      	nop
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58024800 	.word	0x58024800
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d10c      	bne.n	80057f2 <HAL_RCC_OscConfig+0x4ce>
 80057d8:	4b83      	ldr	r3, [pc, #524]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057dc:	4a82      	ldr	r2, [pc, #520]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057de:	f043 0304 	orr.w	r3, r3, #4
 80057e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e4:	4b80      	ldr	r3, [pc, #512]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e8:	4a7f      	ldr	r2, [pc, #508]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f0:	e00b      	b.n	800580a <HAL_RCC_OscConfig+0x4e6>
 80057f2:	4b7d      	ldr	r3, [pc, #500]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f6:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fe:	4b7a      	ldr	r3, [pc, #488]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005802:	4a79      	ldr	r2, [pc, #484]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005804:	f023 0304 	bic.w	r3, r3, #4
 8005808:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d015      	beq.n	800583e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fb ffc5 	bl	80017a0 <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fb ffc1 	bl	80017a0 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e14b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005830:	4b6d      	ldr	r3, [pc, #436]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ee      	beq.n	800581a <HAL_RCC_OscConfig+0x4f6>
 800583c:	e014      	b.n	8005868 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fb ffaf 	bl	80017a0 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005844:	e00a      	b.n	800585c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fb ffab 	bl	80017a0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e135      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800585c:	4b62      	ldr	r3, [pc, #392]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1ee      	bne.n	8005846 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 812a 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005872:	4b5d      	ldr	r3, [pc, #372]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587a:	2b18      	cmp	r3, #24
 800587c:	f000 80ba 	beq.w	80059f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	2b02      	cmp	r3, #2
 8005886:	f040 8095 	bne.w	80059b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588a:	4b57      	ldr	r3, [pc, #348]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a56      	ldr	r2, [pc, #344]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005890:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fb ff83 	bl	80017a0 <HAL_GetTick>
 800589a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589e:	f7fb ff7f 	bl	80017a0 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e10b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b0:	4b4d      	ldr	r3, [pc, #308]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	4b4a      	ldr	r3, [pc, #296]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80058be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058c0:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <HAL_RCC_OscConfig+0x6c8>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058cc:	0112      	lsls	r2, r2, #4
 80058ce:	430a      	orrs	r2, r1
 80058d0:	4945      	ldr	r1, [pc, #276]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	3b01      	subs	r3, #1
 80058dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e4:	3b01      	subs	r3, #1
 80058e6:	025b      	lsls	r3, r3, #9
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	3b01      	subs	r3, #1
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	3b01      	subs	r3, #1
 8005900:	061b      	lsls	r3, r3, #24
 8005902:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005906:	4938      	ldr	r1, [pc, #224]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005908:	4313      	orrs	r3, r2
 800590a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800590c:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005918:	4b33      	ldr	r3, [pc, #204]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800591a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800591c:	4b34      	ldr	r3, [pc, #208]	@ (80059f0 <HAL_RCC_OscConfig+0x6cc>)
 800591e:	4013      	ands	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005924:	00d2      	lsls	r2, r2, #3
 8005926:	4930      	ldr	r1, [pc, #192]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800592c:	4b2e      	ldr	r3, [pc, #184]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	f023 020c 	bic.w	r2, r3, #12
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	492b      	ldr	r1, [pc, #172]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800593a:	4313      	orrs	r3, r2
 800593c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800593e:	4b2a      	ldr	r3, [pc, #168]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f023 0202 	bic.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594a:	4927      	ldr	r1, [pc, #156]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005950:	4b25      	ldr	r3, [pc, #148]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	4a24      	ldr	r2, [pc, #144]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4b22      	ldr	r3, [pc, #136]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	4a21      	ldr	r2, [pc, #132]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005968:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800596e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005974:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005980:	4b19      	ldr	r3, [pc, #100]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 8005986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800598a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fb ff08 	bl	80017a0 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005994:	f7fb ff04 	bl	80017a0 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e090      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a6:	4b10      	ldr	r3, [pc, #64]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x670>
 80059b2:	e088      	b.n	8005ac6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a0b      	ldr	r2, [pc, #44]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fb feee 	bl	80017a0 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fb feea 	bl	80017a0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e076      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059da:	4b03      	ldr	r3, [pc, #12]	@ (80059e8 <HAL_RCC_OscConfig+0x6c4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x6a4>
 80059e6:	e06e      	b.n	8005ac6 <HAL_RCC_OscConfig+0x7a2>
 80059e8:	58024400 	.word	0x58024400
 80059ec:	fffffc0c 	.word	0xfffffc0c
 80059f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059fa:	4b35      	ldr	r3, [pc, #212]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d031      	beq.n	8005a6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f003 0203 	and.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d12a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d122      	bne.n	8005a6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d11a      	bne.n	8005a6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0a5b      	lsrs	r3, r3, #9
 8005a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d111      	bne.n	8005a6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d108      	bne.n	8005a6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e02b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a70:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d01f      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a92:	f7fb fe85 	bl	80017a0 <HAL_GetTick>
 8005a96:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005a98:	bf00      	nop
 8005a9a:	f7fb fe81 	bl	80017a0 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d0f9      	beq.n	8005a9a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad4 <HAL_RCC_OscConfig+0x7b0>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ab2:	00d2      	lsls	r2, r2, #3
 8005ab4:	4906      	ldr	r1, [pc, #24]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	4a04      	ldr	r2, [pc, #16]	@ (8005ad0 <HAL_RCC_OscConfig+0x7ac>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	@ 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	ffff0007 	.word	0xffff0007

08005ad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e19c      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aec:	4b8a      	ldr	r3, [pc, #552]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d910      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b87      	ldr	r3, [pc, #540]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 020f 	bic.w	r2, r3, #15
 8005b02:	4985      	ldr	r1, [pc, #532]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b83      	ldr	r3, [pc, #524]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e184      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d908      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b38:	4b78      	ldr	r3, [pc, #480]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4975      	ldr	r1, [pc, #468]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	4b70      	ldr	r3, [pc, #448]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d908      	bls.n	8005b78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b66:	4b6d      	ldr	r3, [pc, #436]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	496a      	ldr	r1, [pc, #424]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d010      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	4b64      	ldr	r3, [pc, #400]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d908      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b94:	4b61      	ldr	r3, [pc, #388]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	495e      	ldr	r1, [pc, #376]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	4b59      	ldr	r3, [pc, #356]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d908      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bc2:	4b56      	ldr	r3, [pc, #344]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4953      	ldr	r1, [pc, #332]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4b4d      	ldr	r3, [pc, #308]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d908      	bls.n	8005c02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f023 020f 	bic.w	r2, r3, #15
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4947      	ldr	r1, [pc, #284]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d055      	beq.n	8005cba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c0e:	4b43      	ldr	r3, [pc, #268]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4940      	ldr	r1, [pc, #256]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c28:	4b3c      	ldr	r3, [pc, #240]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d121      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0f6      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c40:	4b36      	ldr	r3, [pc, #216]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d115      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0ea      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0de      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c68:	4b2c      	ldr	r3, [pc, #176]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0d6      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c78:	4b28      	ldr	r3, [pc, #160]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f023 0207 	bic.w	r2, r3, #7
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4925      	ldr	r1, [pc, #148]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8a:	f7fb fd89 	bl	80017a0 <HAL_GetTick>
 8005c8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c92:	f7fb fd85 	bl	80017a0 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e0be      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1eb      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	4b14      	ldr	r3, [pc, #80]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d208      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd6:	4b11      	ldr	r3, [pc, #68]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f023 020f 	bic.w	r2, r3, #15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	490e      	ldr	r1, [pc, #56]	@ (8005d1c <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d214      	bcs.n	8005d20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	4906      	ldr	r1, [pc, #24]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <HAL_RCC_ClockConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e086      	b.n	8005e26 <HAL_RCC_ClockConfig+0x34e>
 8005d18:	52002000 	.word	0x52002000
 8005d1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	4b3f      	ldr	r3, [pc, #252]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d208      	bcs.n	8005d4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4939      	ldr	r1, [pc, #228]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	4b34      	ldr	r3, [pc, #208]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d208      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d6a:	4b31      	ldr	r3, [pc, #196]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	492e      	ldr	r1, [pc, #184]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699a      	ldr	r2, [r3, #24]
 8005d8c:	4b28      	ldr	r3, [pc, #160]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d208      	bcs.n	8005daa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d98:	4b25      	ldr	r3, [pc, #148]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	4922      	ldr	r1, [pc, #136]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d010      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d208      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4917      	ldr	r1, [pc, #92]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dd8:	f000 f834 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b14      	ldr	r3, [pc, #80]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	4912      	ldr	r1, [pc, #72]	@ (8005e34 <HAL_RCC_ClockConfig+0x35c>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e30 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005e34 <HAL_RCC_ClockConfig+0x35c>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e38 <HAL_RCC_ClockConfig+0x360>)
 8005e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e10:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <HAL_RCC_ClockConfig+0x364>)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <HAL_RCC_ClockConfig+0x368>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fb fc76 	bl	800170c <HAL_InitTick>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	58024400 	.word	0x58024400
 8005e34:	0800c61c 	.word	0x0800c61c
 8005e38:	24000058 	.word	0x24000058
 8005e3c:	24000054 	.word	0x24000054
 8005e40:	2400005c 	.word	0x2400005c

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	@ 0x24
 8005e48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e4a:	4bb3      	ldr	r3, [pc, #716]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e52:	2b18      	cmp	r3, #24
 8005e54:	f200 8155 	bhi.w	8006102 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08006103 	.word	0x08006103
 8005e68:	08006103 	.word	0x08006103
 8005e6c:	08006103 	.word	0x08006103
 8005e70:	08006103 	.word	0x08006103
 8005e74:	08006103 	.word	0x08006103
 8005e78:	08006103 	.word	0x08006103
 8005e7c:	08006103 	.word	0x08006103
 8005e80:	08005eeb 	.word	0x08005eeb
 8005e84:	08006103 	.word	0x08006103
 8005e88:	08006103 	.word	0x08006103
 8005e8c:	08006103 	.word	0x08006103
 8005e90:	08006103 	.word	0x08006103
 8005e94:	08006103 	.word	0x08006103
 8005e98:	08006103 	.word	0x08006103
 8005e9c:	08006103 	.word	0x08006103
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08006103 	.word	0x08006103
 8005ea8:	08006103 	.word	0x08006103
 8005eac:	08006103 	.word	0x08006103
 8005eb0:	08006103 	.word	0x08006103
 8005eb4:	08006103 	.word	0x08006103
 8005eb8:	08006103 	.word	0x08006103
 8005ebc:	08006103 	.word	0x08006103
 8005ec0:	08005ef7 	.word	0x08005ef7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec4:	4b94      	ldr	r3, [pc, #592]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ed0:	4b91      	ldr	r3, [pc, #580]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	4a90      	ldr	r2, [pc, #576]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ee2:	e111      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee6:	61bb      	str	r3, [r7, #24]
      break;
 8005ee8:	e10e      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005eea:	4b8d      	ldr	r3, [pc, #564]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eec:	61bb      	str	r3, [r7, #24]
      break;
 8005eee:	e10b      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ef2:	61bb      	str	r3, [r7, #24]
      break;
 8005ef4:	e108      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef6:	4b88      	ldr	r3, [pc, #544]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f00:	4b85      	ldr	r3, [pc, #532]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f0c:	4b82      	ldr	r3, [pc, #520]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f16:	4b80      	ldr	r3, [pc, #512]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80e1 	beq.w	80060fc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f000 8083 	beq.w	8006048 <HAL_RCC_GetSysClockFreq+0x204>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f200 80a1 	bhi.w	800608c <HAL_RCC_GetSysClockFreq+0x248>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x114>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d056      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f56:	e099      	b.n	800608c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f58:	4b6f      	ldr	r3, [pc, #444]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02d      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f64:	4b6c      	ldr	r3, [pc, #432]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800611c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b62      	ldr	r3, [pc, #392]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fbe:	e087      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800612c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b51      	ldr	r3, [pc, #324]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fe6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006002:	e065      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006130 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b40      	ldr	r3, [pc, #256]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a02 	vldr	s12, [r7, #8]
 800602a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006046:	e043      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b2f      	ldr	r3, [pc, #188]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a02 	vldr	s12, [r7, #8]
 800606e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800608a:	e021      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b1e      	ldr	r3, [pc, #120]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006128 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060d0:	4b11      	ldr	r3, [pc, #68]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060da:	3301      	adds	r3, #1
 80060dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f4:	ee17 3a90 	vmov	r3, s15
 80060f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80060fa:	e005      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
      break;
 8006100:	e002      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006102:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006104:	61bb      	str	r3, [r7, #24]
      break;
 8006106:	bf00      	nop
  }

  return sysclockfreq;
 8006108:	69bb      	ldr	r3, [r7, #24]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3724      	adds	r7, #36	@ 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
 800611c:	03d09000 	.word	0x03d09000
 8006120:	003d0900 	.word	0x003d0900
 8006124:	007a1200 	.word	0x007a1200
 8006128:	46000000 	.word	0x46000000
 800612c:	4c742400 	.word	0x4c742400
 8006130:	4a742400 	.word	0x4a742400
 8006134:	4af42400 	.word	0x4af42400

08006138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800613e:	f7ff fe81 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b10      	ldr	r3, [pc, #64]	@ (8006188 <HAL_RCC_GetHCLKFreq+0x50>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490f      	ldr	r1, [pc, #60]	@ (800618c <HAL_RCC_GetHCLKFreq+0x54>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <HAL_RCC_GetHCLKFreq+0x50>)
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	4a09      	ldr	r2, [pc, #36]	@ (800618c <HAL_RCC_GetHCLKFreq+0x54>)
 8006166:	5cd3      	ldrb	r3, [r2, r3]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x58>)
 8006174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006176:	4a07      	ldr	r2, [pc, #28]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x58>)
 800617e:	681b      	ldr	r3, [r3, #0]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	58024400 	.word	0x58024400
 800618c:	0800c61c 	.word	0x0800c61c
 8006190:	24000058 	.word	0x24000058
 8006194:	24000054 	.word	0x24000054

08006198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800619c:	f7ff ffcc 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4904      	ldr	r1, [pc, #16]	@ (80061c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	58024400 	.word	0x58024400
 80061c0:	0800c61c 	.word	0x0800c61c

080061c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061c8:	f7ff ffb6 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	4904      	ldr	r1, [pc, #16]	@ (80061ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	58024400 	.word	0x58024400
 80061ec:	0800c61c 	.word	0x0800c61c

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f4:	b0c6      	sub	sp, #280	@ 0x118
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006202:	2300      	movs	r3, #0
 8006204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006214:	2500      	movs	r5, #0
 8006216:	ea54 0305 	orrs.w	r3, r4, r5
 800621a:	d049      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006222:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006226:	d02f      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800622c:	d828      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800622e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006232:	d01a      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006238:	d822      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006242:	d007      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006244:	e01c      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006246:	4bab      	ldr	r3, [pc, #684]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	4aaa      	ldr	r2, [pc, #680]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800624c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006252:	e01a      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	3308      	adds	r3, #8
 800625a:	2102      	movs	r1, #2
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fc25 	bl	8007aac <RCCEx_PLL2_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006268:	e00f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800626a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626e:	3328      	adds	r3, #40	@ 0x28
 8006270:	2102      	movs	r1, #2
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fccc 	bl	8007c10 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800627e:	e004      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006292:	4b98      	ldr	r3, [pc, #608]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006296:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a0:	4a94      	ldr	r2, [pc, #592]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062bc:	f04f 0900 	mov.w	r9, #0
 80062c0:	ea58 0309 	orrs.w	r3, r8, r9
 80062c4:	d047      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d82a      	bhi.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062d0:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062ed 	.word	0x080062ed
 80062dc:	080062fb 	.word	0x080062fb
 80062e0:	08006311 	.word	0x08006311
 80062e4:	0800632f 	.word	0x0800632f
 80062e8:	0800632f 	.word	0x0800632f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ec:	4b81      	ldr	r3, [pc, #516]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a80      	ldr	r2, [pc, #512]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f8:	e01a      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fe:	3308      	adds	r3, #8
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fbd2 	bl	8007aac <RCCEx_PLL2_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630e:	e00f      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	3328      	adds	r3, #40	@ 0x28
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fc79 	bl	8007c10 <RCCEx_PLL3_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006324:	e004      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800632c:	e000      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800632e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10a      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006338:	4b6e      	ldr	r3, [pc, #440]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800633a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633c:	f023 0107 	bic.w	r1, r3, #7
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006346:	4a6b      	ldr	r2, [pc, #428]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006348:	430b      	orrs	r3, r1
 800634a:	6513      	str	r3, [r2, #80]	@ 0x50
 800634c:	e003      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006352:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006362:	f04f 0b00 	mov.w	fp, #0
 8006366:	ea5a 030b 	orrs.w	r3, sl, fp
 800636a:	d05b      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006374:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006378:	d03b      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800637a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800637e:	d834      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006380:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006384:	d037      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006386:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800638a:	d82e      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800638c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006390:	d033      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006392:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006396:	d828      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800639c:	d01a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800639e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a2:	d822      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80063a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ac:	d007      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80063ae:	e01c      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b50      	ldr	r3, [pc, #320]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	4a4f      	ldr	r2, [pc, #316]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063bc:	e01e      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c2:	3308      	adds	r3, #8
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fb70 	bl	8007aac <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063d2:	e013      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	3328      	adds	r3, #40	@ 0x28
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fc17 	bl	8007c10 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063e8:	e008      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80063fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006404:	4b3b      	ldr	r3, [pc, #236]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006414:	4a37      	ldr	r2, [pc, #220]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006416:	430b      	orrs	r3, r1
 8006418:	6593      	str	r3, [r2, #88]	@ 0x58
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800643a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d05d      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800644c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006450:	d03b      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006452:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006456:	d834      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006458:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800645c:	d037      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800645e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006462:	d82e      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006464:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006468:	d033      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800646a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800646e:	d828      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006474:	d01a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800647a:	d822      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006484:	d007      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006486:	e01c      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006488:	4b1a      	ldr	r3, [pc, #104]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	4a19      	ldr	r2, [pc, #100]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800648e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006494:	e01e      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	3308      	adds	r3, #8
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 fb04 	bl	8007aac <RCCEx_PLL2_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064aa:	e013      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b0:	3328      	adds	r3, #40	@ 0x28
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fbab 	bl	8007c10 <RCCEx_PLL3_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064c0:	e008      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064c8:	e004      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064ca:	bf00      	nop
 80064cc:	e002      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10d      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064dc:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064ec:	4a01      	ldr	r2, [pc, #4]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f2:	e005      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80064f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800650c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006510:	2300      	movs	r3, #0
 8006512:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006516:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800651a:	460b      	mov	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	d03a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006526:	2b30      	cmp	r3, #48	@ 0x30
 8006528:	d01f      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800652a:	2b30      	cmp	r3, #48	@ 0x30
 800652c:	d819      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d00c      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006532:	2b20      	cmp	r3, #32
 8006534:	d815      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800653a:	2b10      	cmp	r3, #16
 800653c:	d111      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653e:	4baa      	ldr	r3, [pc, #680]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	4aa9      	ldr	r2, [pc, #676]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800654a:	e011      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	3308      	adds	r3, #8
 8006552:	2102      	movs	r1, #2
 8006554:	4618      	mov	r0, r3
 8006556:	f001 faa9 	bl	8007aac <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006568:	e002      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006578:	4b9b      	ldr	r3, [pc, #620]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006586:	4a98      	ldr	r2, [pc, #608]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006588:	430b      	orrs	r3, r1
 800658a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006592:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80065a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065b0:	460b      	mov	r3, r1
 80065b2:	4313      	orrs	r3, r2
 80065b4:	d051      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c0:	d035      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80065c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c6:	d82e      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065cc:	d031      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80065ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065d2:	d828      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d8:	d01a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065de:	d822      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e8:	d007      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065ea:	e01c      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b7e      	ldr	r3, [pc, #504]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a7d      	ldr	r2, [pc, #500]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065f8:	e01c      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	3308      	adds	r3, #8
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f001 fa52 	bl	8007aac <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800660e:	e011      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006614:	3328      	adds	r3, #40	@ 0x28
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f001 faf9 	bl	8007c10 <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006624:	e006      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800662c:	e002      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800662e:	bf00      	nop
 8006630:	e000      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800663c:	4b6a      	ldr	r3, [pc, #424]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800663e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006640:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664a:	4a67      	ldr	r2, [pc, #412]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800664c:	430b      	orrs	r3, r1
 800664e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006650:	e003      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006652:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006656:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006666:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006670:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d053      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006684:	d033      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006686:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800668a:	d82c      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800668c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006690:	d02f      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006692:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006696:	d826      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800669c:	d02b      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800669e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066a2:	d820      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a8:	d012      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80066aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ae:	d81a      	bhi.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d022      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b8:	d115      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	3308      	adds	r3, #8
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f9f2 	bl	8007aac <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066ce:	e015      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	3328      	adds	r3, #40	@ 0x28
 80066d6:	2101      	movs	r1, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 fa99 	bl	8007c10 <RCCEx_PLL3_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066e4:	e00a      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ec:	e006      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066ee:	bf00      	nop
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066f2:	bf00      	nop
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066f6:	bf00      	nop
 80066f8:	e000      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006704:	4b38      	ldr	r3, [pc, #224]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006708:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006712:	4a35      	ldr	r2, [pc, #212]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6513      	str	r3, [r2, #80]	@ 0x50
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800672e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006732:	2300      	movs	r3, #0
 8006734:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006738:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d058      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800674a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800674e:	d033      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006754:	d82c      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675a:	d02f      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006760:	d826      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006762:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006766:	d02b      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006768:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800676c:	d820      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800676e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006772:	d012      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006778:	d81a      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d022      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800677e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006782:	d115      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	3308      	adds	r3, #8
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f001 f98d 	bl	8007aac <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006798:	e015      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679e:	3328      	adds	r3, #40	@ 0x28
 80067a0:	2101      	movs	r1, #1
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fa34 	bl	8007c10 <RCCEx_PLL3_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067ae:	e00a      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067b6:	e006      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067b8:	bf00      	nop
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067bc:	bf00      	nop
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c0:	bf00      	nop
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10e      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067ce:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067de:	4a02      	ldr	r2, [pc, #8]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800680a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d037      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800681e:	d00e      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006824:	d816      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d018      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800682e:	d111      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006830:	4bc4      	ldr	r3, [pc, #784]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	4ac3      	ldr	r2, [pc, #780]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800683c:	e00f      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	3308      	adds	r3, #8
 8006844:	2101      	movs	r1, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f001 f930 	bl	8007aac <RCCEx_PLL2_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006852:	e004      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800685a:	e000      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800685c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006866:	4bb7      	ldr	r3, [pc, #732]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800686a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800686e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006874:	4ab3      	ldr	r2, [pc, #716]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006876:	430b      	orrs	r3, r1
 8006878:	6513      	str	r3, [r2, #80]	@ 0x50
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006894:	2300      	movs	r3, #0
 8006896:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800689a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800689e:	460b      	mov	r3, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d039      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d81c      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80068ae:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068f1 	.word	0x080068f1
 80068b8:	080068c5 	.word	0x080068c5
 80068bc:	080068d3 	.word	0x080068d3
 80068c0:	080068f1 	.word	0x080068f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a9e      	ldr	r2, [pc, #632]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068d0:	e00f      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d6:	3308      	adds	r3, #8
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f8e6 	bl	8007aac <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068e6:	e004      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068ee:	e000      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068fa:	4b92      	ldr	r3, [pc, #584]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fe:	f023 0103 	bic.w	r1, r3, #3
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006908:	4a8e      	ldr	r2, [pc, #568]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800690a:	430b      	orrs	r3, r1
 800690c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006914:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006928:	2300      	movs	r3, #0
 800692a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800692e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	f000 8099 	beq.w	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800693a:	4b83      	ldr	r3, [pc, #524]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a82      	ldr	r2, [pc, #520]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006946:	f7fa ff2b 	bl	80017a0 <HAL_GetTick>
 800694a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694e:	e00b      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006950:	f7fa ff26 	bl	80017a0 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b64      	cmp	r3, #100	@ 0x64
 800695e:	d903      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006968:	4b77      	ldr	r3, [pc, #476]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ed      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006978:	2b00      	cmp	r3, #0
 800697a:	d173      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800697c:	4b71      	ldr	r3, [pc, #452]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006988:	4053      	eors	r3, r2
 800698a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698e:	2b00      	cmp	r3, #0
 8006990:	d015      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b6c      	ldr	r3, [pc, #432]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800699a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800699e:	4b69      	ldr	r3, [pc, #420]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a2:	4a68      	ldr	r2, [pc, #416]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069aa:	4b66      	ldr	r3, [pc, #408]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a65      	ldr	r2, [pc, #404]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069b6:	4a63      	ldr	r2, [pc, #396]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ca:	d118      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fa fee8 	bl	80017a0 <HAL_GetTick>
 80069d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069d4:	e00d      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d6:	f7fa fee3 	bl	80017a0 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80069f0:	e005      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069f2:	4b54      	ldr	r3, [pc, #336]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0eb      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d129      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a16:	d10e      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a18:	4b4a      	ldr	r3, [pc, #296]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a28:	091a      	lsrs	r2, r3, #4
 8006a2a:	4b48      	ldr	r3, [pc, #288]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	4a45      	ldr	r2, [pc, #276]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6113      	str	r3, [r2, #16]
 8006a34:	e005      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a36:	4b43      	ldr	r3, [pc, #268]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4a42      	ldr	r2, [pc, #264]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a40:	6113      	str	r3, [r2, #16]
 8006a42:	4b40      	ldr	r3, [pc, #256]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a52:	4a3c      	ldr	r2, [pc, #240]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a58:	e008      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f002 0301 	and.w	r3, r2, #1
 8006a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f000 808f 	beq.w	8006bac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a94:	2b28      	cmp	r3, #40	@ 0x28
 8006a96:	d871      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a98:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006b85 	.word	0x08006b85
 8006aa4:	08006b7d 	.word	0x08006b7d
 8006aa8:	08006b7d 	.word	0x08006b7d
 8006aac:	08006b7d 	.word	0x08006b7d
 8006ab0:	08006b7d 	.word	0x08006b7d
 8006ab4:	08006b7d 	.word	0x08006b7d
 8006ab8:	08006b7d 	.word	0x08006b7d
 8006abc:	08006b7d 	.word	0x08006b7d
 8006ac0:	08006b51 	.word	0x08006b51
 8006ac4:	08006b7d 	.word	0x08006b7d
 8006ac8:	08006b7d 	.word	0x08006b7d
 8006acc:	08006b7d 	.word	0x08006b7d
 8006ad0:	08006b7d 	.word	0x08006b7d
 8006ad4:	08006b7d 	.word	0x08006b7d
 8006ad8:	08006b7d 	.word	0x08006b7d
 8006adc:	08006b7d 	.word	0x08006b7d
 8006ae0:	08006b67 	.word	0x08006b67
 8006ae4:	08006b7d 	.word	0x08006b7d
 8006ae8:	08006b7d 	.word	0x08006b7d
 8006aec:	08006b7d 	.word	0x08006b7d
 8006af0:	08006b7d 	.word	0x08006b7d
 8006af4:	08006b7d 	.word	0x08006b7d
 8006af8:	08006b7d 	.word	0x08006b7d
 8006afc:	08006b7d 	.word	0x08006b7d
 8006b00:	08006b85 	.word	0x08006b85
 8006b04:	08006b7d 	.word	0x08006b7d
 8006b08:	08006b7d 	.word	0x08006b7d
 8006b0c:	08006b7d 	.word	0x08006b7d
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	08006b7d 	.word	0x08006b7d
 8006b1c:	08006b7d 	.word	0x08006b7d
 8006b20:	08006b85 	.word	0x08006b85
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006b7d 	.word	0x08006b7d
 8006b30:	08006b7d 	.word	0x08006b7d
 8006b34:	08006b7d 	.word	0x08006b7d
 8006b38:	08006b7d 	.word	0x08006b7d
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b85 	.word	0x08006b85
 8006b44:	58024400 	.word	0x58024400
 8006b48:	58024800 	.word	0x58024800
 8006b4c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	3308      	adds	r3, #8
 8006b56:	2101      	movs	r1, #1
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 ffa7 	bl	8007aac <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	3328      	adds	r3, #40	@ 0x28
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f84e 	bl	8007c10 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b8e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b9c:	4abb      	ldr	r2, [pc, #748]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f002 0302 	and.w	r3, r2, #2
 8006bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	d041      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	d824      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c29 	.word	0x08006c29
 8006be0:	08006bf5 	.word	0x08006bf5
 8006be4:	08006c0b 	.word	0x08006c0b
 8006be8:	08006c29 	.word	0x08006c29
 8006bec:	08006c29 	.word	0x08006c29
 8006bf0:	08006c29 	.word	0x08006c29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 ff55 	bl	8007aac <RCCEx_PLL2_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c08:	e00f      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	3328      	adds	r3, #40	@ 0x28
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fffc 	bl	8007c10 <RCCEx_PLL3_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c1e:	e004      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c32:	4b96      	ldr	r3, [pc, #600]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c36:	f023 0107 	bic.w	r1, r3, #7
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c40:	4a92      	ldr	r2, [pc, #584]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c46:	e003      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f002 0304 	and.w	r3, r2, #4
 8006c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c66:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d044      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d825      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006cd1 	.word	0x08006cd1
 8006c88:	08006c9d 	.word	0x08006c9d
 8006c8c:	08006cb3 	.word	0x08006cb3
 8006c90:	08006cd1 	.word	0x08006cd1
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006cd1 	.word	0x08006cd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ff01 	bl	8007aac <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb6:	3328      	adds	r3, #40	@ 0x28
 8006cb8:	2101      	movs	r1, #1
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 ffa8 	bl	8007c10 <RCCEx_PLL3_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cda:	4b6c      	ldr	r3, [pc, #432]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	f023 0107 	bic.w	r1, r3, #7
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cea:	4a68      	ldr	r2, [pc, #416]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f002 0320 	and.w	r3, r2, #32
 8006d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4313      	orrs	r3, r2
 8006d18:	d055      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d26:	d033      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d2c:	d82c      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d32:	d02f      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d826      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d3e:	d02b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d44:	d820      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4a:	d012      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d50:	d81a      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d022      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d5a:	d115      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	3308      	adds	r3, #8
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fea1 	bl	8007aac <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d70:	e015      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	3328      	adds	r3, #40	@ 0x28
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 ff48 	bl	8007c10 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d86:	e00a      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d8e:	e006      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d90:	bf00      	nop
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d94:	bf00      	nop
 8006d96:	e002      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da6:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006daa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db6:	4a35      	ldr	r2, [pc, #212]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ddc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d058      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006df2:	d033      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006df4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006df8:	d82c      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfe:	d02f      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e04:	d826      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e0a:	d02b      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e10:	d820      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e16:	d012      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e1c:	d81a      	bhi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d022      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e26:	d115      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fe3b 	bl	8007aac <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e3c:	e015      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	3328      	adds	r3, #40	@ 0x28
 8006e44:	2102      	movs	r1, #2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fee2 	bl	8007c10 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e52:	e00a      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e5a:	e006      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e5c:	bf00      	nop
 8006e5e:	e004      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e60:	bf00      	nop
 8006e62:	e002      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10e      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e72:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e82:	4a02      	ldr	r2, [pc, #8]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e84:	430b      	orrs	r3, r1
 8006e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e88:	e006      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e8a:	bf00      	nop
 8006e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d055      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ec0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ec4:	d033      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006ec6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eca:	d82c      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed0:	d02f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed6:	d826      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ed8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006edc:	d02b      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006ede:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ee2:	d820      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ee4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ee8:	d012      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006eea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eee:	d81a      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d022      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef8:	d115      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efe:	3308      	adds	r3, #8
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fdd2 	bl	8007aac <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e015      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	2102      	movs	r1, #2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fe79 	bl	8007c10 <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f24:	e00a      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f2c:	e006      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e004      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f44:	4ba0      	ldr	r3, [pc, #640]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f54:	4a9c      	ldr	r2, [pc, #624]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f56:	430b      	orrs	r3, r1
 8006f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f5a:	e003      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f002 0308 	and.w	r3, r2, #8
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f74:	2300      	movs	r3, #0
 8006f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4313      	orrs	r3, r2
 8006f82:	d01e      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f90:	d10c      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f96:	3328      	adds	r3, #40	@ 0x28
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fe38 	bl	8007c10 <RCCEx_PLL3_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006fac:	4b86      	ldr	r3, [pc, #536]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fbc:	4a82      	ldr	r2, [pc, #520]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f002 0310 	and.w	r3, r2, #16
 8006fce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fd8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d01e      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fee:	d10c      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	3328      	adds	r3, #40	@ 0x28
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fe09 	bl	8007c10 <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800700a:	4b6f      	ldr	r3, [pc, #444]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800701a:	4a6b      	ldr	r2, [pc, #428]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800702c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800702e:	2300      	movs	r3, #0
 8007030:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007032:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d03e      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007048:	d022      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800704a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800704e:	d81b      	bhi.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007058:	d00b      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800705a:	e015      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007060:	3308      	adds	r3, #8
 8007062:	2100      	movs	r1, #0
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd21 	bl	8007aac <RCCEx_PLL2_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007070:	e00f      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	3328      	adds	r3, #40	@ 0x28
 8007078:	2102      	movs	r1, #2
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fdc8 	bl	8007c10 <RCCEx_PLL3_Config>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007086:	e004      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800708e:	e000      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800709a:	4b4b      	ldr	r3, [pc, #300]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070aa:	4a47      	ldr	r2, [pc, #284]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80070c8:	2300      	movs	r3, #0
 80070ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80070cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070d0:	460b      	mov	r3, r1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	d03b      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e2:	d01f      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070e8:	d818      	bhi.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80070f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070f4:	d007      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b33      	ldr	r3, [pc, #204]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	4a32      	ldr	r2, [pc, #200]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007104:	e00f      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	3328      	adds	r3, #40	@ 0x28
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd7e 	bl	8007c10 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800711a:	e004      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800712e:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007132:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800713e:	4a22      	ldr	r2, [pc, #136]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6553      	str	r3, [r2, #84]	@ 0x54
 8007144:	e003      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800714a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800715a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800715c:	2300      	movs	r3, #0
 800715e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007160:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007164:	460b      	mov	r3, r1
 8007166:	4313      	orrs	r3, r2
 8007168:	d034      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007178:	d007      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800717a:	e011      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007188:	e00e      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	3308      	adds	r3, #8
 8007190:	2102      	movs	r1, #2
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fc8a 	bl	8007aac <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800719e:	e003      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10d      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071be:	4a02      	ldr	r2, [pc, #8]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071c0:	430b      	orrs	r3, r1
 80071c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071e2:	2300      	movs	r3, #0
 80071e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d00c      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	3328      	adds	r3, #40	@ 0x28
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fd09 	bl	8007c10 <RCCEx_PLL3_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007216:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007218:	2300      	movs	r3, #0
 800721a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800721c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d036      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800722c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007230:	d018      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007236:	d811      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723c:	d014      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800723e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007242:	d80b      	bhi.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d011      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724c:	d106      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724e:	4bb7      	ldr	r3, [pc, #732]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4ab6      	ldr	r2, [pc, #728]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800725a:	e008      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007276:	4bad      	ldr	r3, [pc, #692]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800727e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007284:	4aa9      	ldr	r2, [pc, #676]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6553      	str	r3, [r2, #84]	@ 0x54
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a2:	2300      	movs	r3, #0
 80072a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80072a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072aa:	460b      	mov	r3, r1
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072b0:	4b9e      	ldr	r3, [pc, #632]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	4a9b      	ldr	r2, [pc, #620]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072d2:	2300      	movs	r3, #0
 80072d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80072da:	460b      	mov	r3, r1
 80072dc:	4313      	orrs	r3, r2
 80072de:	d009      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072e0:	4b92      	ldr	r3, [pc, #584]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ee:	4a8f      	ldr	r2, [pc, #572]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
 8007302:	2300      	movs	r3, #0
 8007304:	647b      	str	r3, [r7, #68]	@ 0x44
 8007306:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800730a:	460b      	mov	r3, r1
 800730c:	4313      	orrs	r3, r2
 800730e:	d00e      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007310:	4b86      	ldr	r3, [pc, #536]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	4a85      	ldr	r2, [pc, #532]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800731a:	6113      	str	r3, [r2, #16]
 800731c:	4b83      	ldr	r3, [pc, #524]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800731e:	6919      	ldr	r1, [r3, #16]
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007328:	4a80      	ldr	r2, [pc, #512]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732a:	430b      	orrs	r3, r1
 800732c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800733a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007340:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d009      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800734a:	4b78      	ldr	r3, [pc, #480]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007358:	4a74      	ldr	r2, [pc, #464]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735a:	430b      	orrs	r3, r1
 800735c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800736a:	633b      	str	r3, [r7, #48]	@ 0x30
 800736c:	2300      	movs	r3, #0
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007370:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800737a:	4b6c      	ldr	r3, [pc, #432]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	4a68      	ldr	r2, [pc, #416]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800738c:	430b      	orrs	r3, r1
 800738e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	2100      	movs	r1, #0
 800739a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073a6:	460b      	mov	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d011      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	3308      	adds	r3, #8
 80073b2:	2100      	movs	r1, #0
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fb79 	bl	8007aac <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	2100      	movs	r1, #0
 80073da:	6239      	str	r1, [r7, #32]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d011      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	3308      	adds	r3, #8
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fb59 	bl	8007aac <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800740c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	2100      	movs	r1, #0
 800741a:	61b9      	str	r1, [r7, #24]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007426:	460b      	mov	r3, r1
 8007428:	4313      	orrs	r3, r2
 800742a:	d011      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	3308      	adds	r3, #8
 8007432:	2102      	movs	r1, #2
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fb39 	bl	8007aac <RCCEx_PLL2_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	2100      	movs	r1, #0
 800745a:	6139      	str	r1, [r7, #16]
 800745c:	f003 0308 	and.w	r3, r3, #8
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007466:	460b      	mov	r3, r1
 8007468:	4313      	orrs	r3, r2
 800746a:	d011      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	3328      	adds	r3, #40	@ 0x28
 8007472:	2100      	movs	r1, #0
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fbcb 	bl	8007c10 <RCCEx_PLL3_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800748c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	2100      	movs	r1, #0
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074a6:	460b      	mov	r3, r1
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d011      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	3328      	adds	r3, #40	@ 0x28
 80074b2:	2101      	movs	r1, #1
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fbab 	bl	8007c10 <RCCEx_PLL3_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	2100      	movs	r1, #0
 80074da:	6039      	str	r1, [r7, #0]
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074e6:	460b      	mov	r3, r1
 80074e8:	4313      	orrs	r3, r2
 80074ea:	d011      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	3328      	adds	r3, #40	@ 0x28
 80074f2:	2102      	movs	r1, #2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fb8b 	bl	8007c10 <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800750c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007510:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
}
 800751e:	4618      	mov	r0, r3
 8007520:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007524:	46bd      	mov	sp, r7
 8007526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400

08007530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007534:	f7fe fe00 	bl	8006138 <HAL_RCC_GetHCLKFreq>
 8007538:	4602      	mov	r2, r0
 800753a:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	4904      	ldr	r1, [pc, #16]	@ (8007558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007546:	5ccb      	ldrb	r3, [r1, r3]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}
 8007554:	58024400 	.word	0x58024400
 8007558:	0800c61c 	.word	0x0800c61c

0800755c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800755c:	b480      	push	{r7}
 800755e:	b089      	sub	sp, #36	@ 0x24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007564:	4ba1      	ldr	r3, [pc, #644]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800756e:	4b9f      	ldr	r3, [pc, #636]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007572:	0b1b      	lsrs	r3, r3, #12
 8007574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800757a:	4b9c      	ldr	r3, [pc, #624]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007586:	4b99      	ldr	r3, [pc, #612]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8111 	beq.w	80077cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f000 8083 	beq.w	80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	f200 80a1 	bhi.w	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d056      	beq.n	8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075c6:	e099      	b.n	80076fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c8:	4b88      	ldr	r3, [pc, #544]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02d      	beq.n	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d4:	4b85      	ldr	r3, [pc, #532]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	08db      	lsrs	r3, r3, #3
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	4a84      	ldr	r2, [pc, #528]	@ (80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
 80075e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fe:	4b7b      	ldr	r3, [pc, #492]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007612:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800762e:	e087      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800763e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007642:	4b6a      	ldr	r3, [pc, #424]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007652:	ed97 6a03 	vldr	s12, [r7, #12]
 8007656:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007672:	e065      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007686:	4b59      	ldr	r3, [pc, #356]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007696:	ed97 6a03 	vldr	s12, [r7, #12]
 800769a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800769e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b6:	e043      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ca:	4b48      	ldr	r3, [pc, #288]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076da:	ed97 6a03 	vldr	s12, [r7, #12]
 80076de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fa:	e021      	b.n	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b37      	ldr	r3, [pc, #220]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800773e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007740:	4b2a      	ldr	r3, [pc, #168]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	0a5b      	lsrs	r3, r3, #9
 8007746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775a:	edd7 6a07 	vldr	s13, [r7, #28]
 800775e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007766:	ee17 2a90 	vmov	r2, s15
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800776e:	4b1f      	ldr	r3, [pc, #124]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007788:	edd7 6a07 	vldr	s13, [r7, #28]
 800778c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007794:	ee17 2a90 	vmov	r2, s15
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800779c:	4b13      	ldr	r3, [pc, #76]	@ (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c2:	ee17 2a90 	vmov	r2, s15
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077ca:	e008      	b.n	80077de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
}
 80077de:	bf00      	nop
 80077e0:	3724      	adds	r7, #36	@ 0x24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	46000000 	.word	0x46000000
 80077f8:	4c742400 	.word	0x4c742400
 80077fc:	4a742400 	.word	0x4a742400
 8007800:	4af42400 	.word	0x4af42400

08007804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007804:	b480      	push	{r7}
 8007806:	b089      	sub	sp, #36	@ 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800780c:	4ba1      	ldr	r3, [pc, #644]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007816:	4b9f      	ldr	r3, [pc, #636]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	0d1b      	lsrs	r3, r3, #20
 800781c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007822:	4b9c      	ldr	r3, [pc, #624]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800782e:	4b99      	ldr	r3, [pc, #612]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007832:	08db      	lsrs	r3, r3, #3
 8007834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8111 	beq.w	8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	f000 8083 	beq.w	8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b02      	cmp	r3, #2
 800785e:	f200 80a1 	bhi.w	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d056      	beq.n	800791c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800786e:	e099      	b.n	80079a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007870:	4b88      	ldr	r3, [pc, #544]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d02d      	beq.n	80078d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800787c:	4b85      	ldr	r3, [pc, #532]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	08db      	lsrs	r3, r3, #3
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	4a84      	ldr	r2, [pc, #528]	@ (8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
 800788c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078d6:	e087      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e065      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b59      	ldr	r3, [pc, #356]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	e043      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b48      	ldr	r3, [pc, #288]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a03 	vldr	s12, [r7, #12]
 8007986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a2:	e021      	b.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b37      	ldr	r3, [pc, #220]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a0e:	ee17 2a90 	vmov	r2, s15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a16:	4b1f      	ldr	r3, [pc, #124]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3c:	ee17 2a90 	vmov	r2, s15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a6a:	ee17 2a90 	vmov	r2, s15
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a72:	e008      	b.n	8007a86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	609a      	str	r2, [r3, #8]
}
 8007a86:	bf00      	nop
 8007a88:	3724      	adds	r7, #36	@ 0x24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	03d09000 	.word	0x03d09000
 8007a9c:	46000000 	.word	0x46000000
 8007aa0:	4c742400 	.word	0x4c742400
 8007aa4:	4a742400 	.word	0x4a742400
 8007aa8:	4af42400 	.word	0x4af42400

08007aac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aba:	4b53      	ldr	r3, [pc, #332]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d101      	bne.n	8007aca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e099      	b.n	8007bfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007aca:	4b4f      	ldr	r3, [pc, #316]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a4e      	ldr	r2, [pc, #312]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad6:	f7f9 fe63 	bl	80017a0 <HAL_GetTick>
 8007ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007adc:	e008      	b.n	8007af0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ade:	f7f9 fe5f 	bl	80017a0 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e086      	b.n	8007bfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af0:	4b45      	ldr	r3, [pc, #276]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f0      	bne.n	8007ade <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007afc:	4b42      	ldr	r3, [pc, #264]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b00:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	031b      	lsls	r3, r3, #12
 8007b0a:	493f      	ldr	r1, [pc, #252]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	025b      	lsls	r3, r3, #9
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	061b      	lsls	r3, r3, #24
 8007b3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b40:	4931      	ldr	r1, [pc, #196]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b46:	4b30      	ldr	r3, [pc, #192]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	492d      	ldr	r1, [pc, #180]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	f023 0220 	bic.w	r2, r3, #32
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	4928      	ldr	r1, [pc, #160]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b6a:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	4a26      	ldr	r2, [pc, #152]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b76:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b7a:	4b24      	ldr	r3, [pc, #144]	@ (8007c0c <RCCEx_PLL2_Config+0x160>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	69d2      	ldr	r2, [r2, #28]
 8007b82:	00d2      	lsls	r2, r2, #3
 8007b84:	4920      	ldr	r1, [pc, #128]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b90:	f043 0310 	orr.w	r3, r3, #16
 8007b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ba8:	e00f      	b.n	8007bca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d106      	bne.n	8007bbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bb0:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	4a14      	ldr	r2, [pc, #80]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bbc:	e005      	b.n	8007bca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bbe:	4b12      	ldr	r3, [pc, #72]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	4a11      	ldr	r2, [pc, #68]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bca:	4b0f      	ldr	r3, [pc, #60]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a0e      	ldr	r2, [pc, #56]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd6:	f7f9 fde3 	bl	80017a0 <HAL_GetTick>
 8007bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bdc:	e008      	b.n	8007bf0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bde:	f7f9 fddf 	bl	80017a0 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d901      	bls.n	8007bf0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e006      	b.n	8007bfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0f0      	beq.n	8007bde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	ffff0007 	.word	0xffff0007

08007c10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c1e:	4b53      	ldr	r3, [pc, #332]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d101      	bne.n	8007c2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e099      	b.n	8007d62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a4e      	ldr	r2, [pc, #312]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c3a:	f7f9 fdb1 	bl	80017a0 <HAL_GetTick>
 8007c3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c40:	e008      	b.n	8007c54 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c42:	f7f9 fdad 	bl	80017a0 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e086      	b.n	8007d62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c54:	4b45      	ldr	r3, [pc, #276]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c60:	4b42      	ldr	r3, [pc, #264]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	051b      	lsls	r3, r3, #20
 8007c6e:	493f      	ldr	r1, [pc, #252]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	025b      	lsls	r3, r3, #9
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ca4:	4931      	ldr	r1, [pc, #196]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007caa:	4b30      	ldr	r3, [pc, #192]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	492d      	ldr	r1, [pc, #180]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4928      	ldr	r1, [pc, #160]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cce:	4b27      	ldr	r3, [pc, #156]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	4a26      	ldr	r2, [pc, #152]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cda:	4b24      	ldr	r3, [pc, #144]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cde:	4b24      	ldr	r3, [pc, #144]	@ (8007d70 <RCCEx_PLL3_Config+0x160>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	69d2      	ldr	r2, [r2, #28]
 8007ce6:	00d2      	lsls	r2, r2, #3
 8007ce8:	4920      	ldr	r1, [pc, #128]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cee:	4b1f      	ldr	r3, [pc, #124]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d00:	4b1a      	ldr	r3, [pc, #104]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	4a19      	ldr	r2, [pc, #100]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d0c:	e00f      	b.n	8007d2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d106      	bne.n	8007d22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d14:	4b15      	ldr	r3, [pc, #84]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	4a14      	ldr	r2, [pc, #80]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d20:	e005      	b.n	8007d2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d22:	4b12      	ldr	r3, [pc, #72]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	4a11      	ldr	r2, [pc, #68]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a0e      	ldr	r2, [pc, #56]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7f9 fd31 	bl	80017a0 <HAL_GetTick>
 8007d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d40:	e008      	b.n	8007d54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d42:	f7f9 fd2d 	bl	80017a0 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d901      	bls.n	8007d54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e006      	b.n	8007d62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d54:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <RCCEx_PLL3_Config+0x15c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400
 8007d70:	ffff0007 	.word	0xffff0007

08007d74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d071      	beq.n	8007e6a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7f9 f982 	bl	80010a4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d050      	beq.n	8007e58 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	22ca      	movs	r2, #202	@ 0xca
 8007dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2253      	movs	r2, #83	@ 0x53
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb78 	bl	80084bc <RTC_EnterInitMode>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d124      	bne.n	8007e20 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6899      	ldr	r1, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4b24      	ldr	r3, [pc, #144]	@ (8007e74 <HAL_RTC_Init+0x100>)
 8007de2:	400b      	ands	r3, r1
 8007de4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6899      	ldr	r1, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	0419      	lsls	r1, r3, #16
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fb84 	bl	8008524 <RTC_ExitInitMode>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d113      	bne.n	8007e4e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0203 	bic.w	r2, r2, #3
 8007e34:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	22ff      	movs	r2, #255	@ 0xff
 8007e54:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e56:	e001      	b.n	8007e5c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d103      	bne.n	8007e6a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	ff8fffbf 	.word	0xff8fffbf

08007e78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_RTC_SetTime+0x1a>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e089      	b.n	8007fa6 <HAL_RTC_SetTime+0x12e>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	22ca      	movs	r2, #202	@ 0xca
 8007ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2253      	movs	r2, #83	@ 0x53
 8007eb0:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fb02 	bl	80084bc <RTC_EnterInitMode>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007ebc:	7cfb      	ldrb	r3, [r7, #19]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d161      	bne.n	8007f86 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d126      	bne.n	8007f16 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fb5d 	bl	80085a0 <RTC_ByteToBcd2>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fb56 	bl	80085a0 <RTC_ByteToBcd2>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ef8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	789b      	ldrb	r3, [r3, #2]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fb4e 	bl	80085a0 <RTC_ByteToBcd2>
 8007f04:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f06:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	e018      	b.n	8007f48 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f36:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f3c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	78db      	ldrb	r3, [r3, #3]
 8007f42:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	6979      	ldr	r1, [r7, #20]
 8007f4e:	4b18      	ldr	r3, [pc, #96]	@ (8007fb0 <HAL_RTC_SetTime+0x138>)
 8007f50:	400b      	ands	r3, r1
 8007f52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6899      	ldr	r1, [r3, #8]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fad1 	bl	8008524 <RTC_ExitInitMode>
 8007f82:	4603      	mov	r3, r0
 8007f84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	22ff      	movs	r2, #255	@ 0xff
 8007f8c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007f8e:	7cfb      	ldrb	r3, [r7, #19]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	007f7f7f 	.word	0x007f7f7f

08007fb4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <HAL_RTC_GetTime+0xb4>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	0a1b      	lsrs	r3, r3, #8
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800800c:	b2da      	uxtb	r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	0d9b      	lsrs	r3, r3, #22
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	b2da      	uxtb	r2, r3
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11a      	bne.n	800805e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fad7 	bl	80085e0 <RTC_Bcd2ToByte>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 face 	bl	80085e0 <RTC_Bcd2ToByte>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	789b      	ldrb	r3, [r3, #2]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fac5 	bl	80085e0 <RTC_Bcd2ToByte>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	007f7f7f 	.word	0x007f7f7f

0800806c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800806c:	b590      	push	{r4, r7, lr}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_RTC_SetDate+0x1a>
 8008082:	2302      	movs	r3, #2
 8008084:	e073      	b.n	800816e <HAL_RTC_SetDate+0x102>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10e      	bne.n	80080ba <HAL_RTC_SetDate+0x4e>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	f023 0310 	bic.w	r3, r3, #16
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	330a      	adds	r3, #10
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11c      	bne.n	80080fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	78db      	ldrb	r3, [r3, #3]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fa6b 	bl	80085a0 <RTC_ByteToBcd2>
 80080ca:	4603      	mov	r3, r0
 80080cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fa64 	bl	80085a0 <RTC_ByteToBcd2>
 80080d8:	4603      	mov	r3, r0
 80080da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	789b      	ldrb	r3, [r3, #2]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fa5c 	bl	80085a0 <RTC_ByteToBcd2>
 80080e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80080ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e00e      	b.n	8008118 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	78db      	ldrb	r3, [r3, #3]
 80080fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008106:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800810c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	22ca      	movs	r2, #202	@ 0xca
 800811e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2253      	movs	r2, #83	@ 0x53
 8008126:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f9c7 	bl	80084bc <RTC_EnterInitMode>
 800812e:	4603      	mov	r3, r0
 8008130:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008132:	7cfb      	ldrb	r3, [r7, #19]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	6979      	ldr	r1, [r7, #20]
 800813e:	4b0e      	ldr	r3, [pc, #56]	@ (8008178 <HAL_RTC_SetDate+0x10c>)
 8008140:	400b      	ands	r3, r1
 8008142:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f9ed 	bl	8008524 <RTC_ExitInitMode>
 800814a:	4603      	mov	r3, r0
 800814c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	22ff      	movs	r2, #255	@ 0xff
 8008154:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008156:	7cfb      	ldrb	r3, [r7, #19]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d103      	bne.n	8008164 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800816c:	7cfb      	ldrb	r3, [r7, #19]


}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd90      	pop	{r4, r7, pc}
 8008176:	bf00      	nop
 8008178:	00ffff3f 	.word	0x00ffff3f

0800817c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	4b21      	ldr	r3, [pc, #132]	@ (8008214 <HAL_RTC_GetDate+0x98>)
 8008190:	4013      	ands	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	b2da      	uxtb	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	0b5b      	lsrs	r3, r3, #13
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d11a      	bne.n	8008208 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	78db      	ldrb	r3, [r3, #3]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fa02 	bl	80085e0 <RTC_Bcd2ToByte>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f9f9 	bl	80085e0 <RTC_Bcd2ToByte>
 80081ee:	4603      	mov	r3, r0
 80081f0:	461a      	mov	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	789b      	ldrb	r3, [r3, #2]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f9f0 	bl	80085e0 <RTC_Bcd2ToByte>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	00ffff3f 	.word	0x00ffff3f

08008218 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b089      	sub	sp, #36	@ 0x24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_RTC_SetAlarm+0x1a>
 800822e:	2302      	movs	r3, #2
 8008230:	e11b      	b.n	800846a <HAL_RTC_SetAlarm+0x252>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d137      	bne.n	80082b8 <HAL_RTC_SetAlarm+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f000 f99d 	bl	80085a0 <RTC_ByteToBcd2>
 8008266:	4603      	mov	r3, r0
 8008268:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f996 	bl	80085a0 <RTC_ByteToBcd2>
 8008274:	4603      	mov	r3, r0
 8008276:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008278:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	789b      	ldrb	r3, [r3, #2]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f98e 	bl	80085a0 <RTC_ByteToBcd2>
 8008284:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008286:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8008290:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f980 	bl	80085a0 <RTC_ByteToBcd2>
 80082a0:	4603      	mov	r3, r0
 80082a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80082a4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80082ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	e023      	b.n	8008300 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2200      	movs	r2, #0
 80082ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80082d8:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 80082de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 80082e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 80082f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 80082f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	4313      	orrs	r3, r2
 800830a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	22ca      	movs	r2, #202	@ 0xca
 8008312:	625a      	str	r2, [r3, #36]	@ 0x24
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2253      	movs	r2, #83	@ 0x53
 800831a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008324:	d14a      	bne.n	80083bc <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008334:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	b2da      	uxtb	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008346:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008356:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008358:	f7f9 fa22 	bl	80017a0 <HAL_GetTick>
 800835c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800835e:	e015      	b.n	800838c <HAL_RTC_SetAlarm+0x174>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008360:	f7f9 fa1e 	bl	80017a0 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800836e:	d90d      	bls.n	800838c <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	@ 0xff
 8008376:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2203      	movs	r2, #3
 800837c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e06e      	b.n	800846a <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0e2      	beq.n	8008360 <HAL_RTC_SetAlarm+0x148>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083b8:	609a      	str	r2, [r3, #8]
 80083ba:	e049      	b.n	8008450 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80083ca:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80083dc:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083ec:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80083ee:	f7f9 f9d7 	bl	80017a0 <HAL_GetTick>
 80083f2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80083f4:	e015      	b.n	8008422 <HAL_RTC_SetAlarm+0x20a>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083f6:	f7f9 f9d3 	bl	80017a0 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008404:	d90d      	bls.n	8008422 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	22ff      	movs	r2, #255	@ 0xff
 800840c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2203      	movs	r2, #3
 8008412:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e023      	b.n	800846a <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0e2      	beq.n	80083f6 <HAL_RTC_SetAlarm+0x1de>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800844e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	22ff      	movs	r2, #255	@ 0xff
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3724      	adds	r7, #36	@ 0x24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
	...

08008474 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0d      	ldr	r2, [pc, #52]	@ (80084b8 <HAL_RTC_WaitForSynchro+0x44>)
 8008482:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8008484:	f7f9 f98c 	bl	80017a0 <HAL_GetTick>
 8008488:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800848a:	e009      	b.n	80084a0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800848c:	f7f9 f988 	bl	80017a0 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800849a:	d901      	bls.n	80084a0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e007      	b.n	80084b0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0ee      	beq.n	800848c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	0003ff5f 	.word	0x0003ff5f

080084bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d120      	bne.n	8008518 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80084e0:	f7f9 f95e 	bl	80017a0 <HAL_GetTick>
 80084e4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084e6:	e00d      	b.n	8008504 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084e8:	f7f9 f95a 	bl	80017a0 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084f6:	d905      	bls.n	8008504 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2203      	movs	r2, #3
 8008500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <RTC_EnterInitMode+0x5c>
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d1e7      	bne.n	80084e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008530:	4b1a      	ldr	r3, [pc, #104]	@ (800859c <RTC_ExitInitMode+0x78>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	4a19      	ldr	r2, [pc, #100]	@ (800859c <RTC_ExitInitMode+0x78>)
 8008536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800853a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800853c:	4b17      	ldr	r3, [pc, #92]	@ (800859c <RTC_ExitInitMode+0x78>)
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10c      	bne.n	8008562 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff ff93 	bl	8008474 <HAL_RTC_WaitForSynchro>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01e      	beq.n	8008592 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2203      	movs	r2, #3
 8008558:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	73fb      	strb	r3, [r7, #15]
 8008560:	e017      	b.n	8008592 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008562:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <RTC_ExitInitMode+0x78>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	4a0d      	ldr	r2, [pc, #52]	@ (800859c <RTC_ExitInitMode+0x78>)
 8008568:	f023 0320 	bic.w	r3, r3, #32
 800856c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff ff80 	bl	8008474 <HAL_RTC_WaitForSynchro>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2203      	movs	r2, #3
 800857e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008586:	4b05      	ldr	r3, [pc, #20]	@ (800859c <RTC_ExitInitMode+0x78>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	4a04      	ldr	r2, [pc, #16]	@ (800859c <RTC_ExitInitMode+0x78>)
 800858c:	f043 0320 	orr.w	r3, r3, #32
 8008590:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	58004000 	.word	0x58004000

080085a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80085b2:	e005      	b.n	80085c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	3b0a      	subs	r3, #10
 80085be:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80085c0:	7afb      	ldrb	r3, [r7, #11]
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d8f6      	bhi.n	80085b4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	b2db      	uxtb	r3, r3
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	091b      	lsrs	r3, r3, #4
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	461a      	mov	r2, r3
 80085f2:	0092      	lsls	r2, r2, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	b2da      	uxtb	r2, r3
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	4413      	add	r3, r2
 8008606:	b2db      	uxtb	r3, r3
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3350      	adds	r3, #80	@ 0x50
 8008626:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4413      	add	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3350      	adds	r3, #80	@ 0x50
 8008654:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4413      	add	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e042      	b.n	8008708 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7f8 ff27 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2224      	movs	r2, #36	@ 0x24
 800869e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0201 	bic.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fbdc 	bl	8009e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fd6d 	bl	80091a0 <UART_SetConfig>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e01b      	b.n	8008708 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 fc5b 	bl	8009fbc <UART_CheckIdleState>
 8008706:	4603      	mov	r3, r0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	@ 0x28
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	2b20      	cmp	r3, #32
 8008728:	d17b      	bne.n	8008822 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <HAL_UART_Transmit+0x26>
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e074      	b.n	8008824 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2221      	movs	r2, #33	@ 0x21
 8008746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800874a:	f7f9 f829 	bl	80017a0 <HAL_GetTick>
 800874e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008768:	d108      	bne.n	800877c <HAL_UART_Transmit+0x6c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e003      	b.n	8008784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008784:	e030      	b.n	80087e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2180      	movs	r1, #128	@ 0x80
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f001 fcbd 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e03d      	b.n	8008824 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3302      	adds	r3, #2
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	e007      	b.n	80087d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	3301      	adds	r3, #1
 80087d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1c8      	bne.n	8008786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	2140      	movs	r1, #64	@ 0x40
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f001 fc86 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e006      	b.n	8008824 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e000      	b.n	8008824 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800882c:	b480      	push	{r7}
 800882e:	b091      	sub	sp, #68	@ 0x44
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008840:	2b20      	cmp	r3, #32
 8008842:	d178      	bne.n	8008936 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <HAL_UART_Transmit_IT+0x24>
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e071      	b.n	8008938 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2221      	movs	r2, #33	@ 0x21
 800887c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008888:	d12a      	bne.n	80088e0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008892:	d107      	bne.n	80088a4 <HAL_UART_Transmit_IT+0x78>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a29      	ldr	r2, [pc, #164]	@ (8008944 <HAL_UART_Transmit_IT+0x118>)
 80088a0:	679a      	str	r2, [r3, #120]	@ 0x78
 80088a2:	e002      	b.n	80088aa <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a28      	ldr	r2, [pc, #160]	@ (8008948 <HAL_UART_Transmit_IT+0x11c>)
 80088a8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80088cc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e5      	bne.n	80088aa <HAL_UART_Transmit_IT+0x7e>
 80088de:	e028      	b.n	8008932 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088e8:	d107      	bne.n	80088fa <HAL_UART_Transmit_IT+0xce>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4a15      	ldr	r2, [pc, #84]	@ (800894c <HAL_UART_Transmit_IT+0x120>)
 80088f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80088f8:	e002      	b.n	8008900 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <HAL_UART_Transmit_IT+0x124>)
 80088fe:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	613b      	str	r3, [r7, #16]
   return(result);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891e:	623b      	str	r3, [r7, #32]
 8008920:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	69f9      	ldr	r1, [r7, #28]
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	61bb      	str	r3, [r7, #24]
   return(result);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e6      	bne.n	8008900 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	e000      	b.n	8008938 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008936:	2302      	movs	r3, #2
  }
}
 8008938:	4618      	mov	r0, r3
 800893a:	3744      	adds	r7, #68	@ 0x44
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	0800a8f5 	.word	0x0800a8f5
 8008948:	0800a815 	.word	0x0800a815
 800894c:	0800a753 	.word	0x0800a753
 8008950:	0800a69b 	.word	0x0800a69b

08008954 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	@ 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008968:	2b20      	cmp	r3, #32
 800896a:	d137      	bne.n	80089dc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_UART_Receive_DMA+0x24>
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e030      	b.n	80089de <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a18      	ldr	r2, [pc, #96]	@ (80089e8 <HAL_UART_Receive_DMA+0x94>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d01f      	beq.n	80089cc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d018      	beq.n	80089cc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	613b      	str	r3, [r7, #16]
   return(result);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	623b      	str	r3, [r7, #32]
 80089ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	69f9      	ldr	r1, [r7, #28]
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e6      	bne.n	800899a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	461a      	mov	r2, r3
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f001 fc0a 	bl	800a1ec <UART_Start_Receive_DMA>
 80089d8:	4603      	mov	r3, r0
 80089da:	e000      	b.n	80089de <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089dc:	2302      	movs	r3, #2
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3728      	adds	r7, #40	@ 0x28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	58000c00 	.word	0x58000c00

080089ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b0ba      	sub	sp, #232	@ 0xe8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11b      	bne.n	8008a60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d015      	beq.n	8008a60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8377 	beq.w	8009144 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	4798      	blx	r3
      }
      return;
 8008a5e:	e371      	b.n	8009144 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8123 	beq.w	8008cb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008ca4 <HAL_UART_IRQHandler+0x2b8>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8008ca8 <HAL_UART_IRQHandler+0x2bc>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 8116 	beq.w	8008cb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d011      	beq.n	8008ab4 <HAL_UART_IRQHandler+0xc8>
 8008a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aaa:	f043 0201 	orr.w	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d011      	beq.n	8008ae4 <HAL_UART_IRQHandler+0xf8>
 8008ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ada:	f043 0204 	orr.w	r2, r3, #4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d011      	beq.n	8008b14 <HAL_UART_IRQHandler+0x128>
 8008af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2204      	movs	r2, #4
 8008b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0a:	f043 0202 	orr.w	r2, r3, #2
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b18:	f003 0308 	and.w	r3, r3, #8
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d017      	beq.n	8008b50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b30:	4b5c      	ldr	r3, [pc, #368]	@ (8008ca4 <HAL_UART_IRQHandler+0x2b8>)
 8008b32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2208      	movs	r2, #8
 8008b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b46:	f043 0208 	orr.w	r2, r3, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d012      	beq.n	8008b82 <HAL_UART_IRQHandler+0x196>
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00c      	beq.n	8008b82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b78:	f043 0220 	orr.w	r2, r3, #32
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 82dd 	beq.w	8009148 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d013      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	d005      	beq.n	8008be6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d054      	beq.n	8008c90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f001 fbe8 	bl	800a3bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b40      	cmp	r3, #64	@ 0x40
 8008bf8:	d146      	bne.n	8008c88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1d9      	bne.n	8008bfa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d017      	beq.n	8008c80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c56:	4a15      	ldr	r2, [pc, #84]	@ (8008cac <HAL_UART_IRQHandler+0x2c0>)
 8008c58:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7f9 ffad 	bl	8002bc0 <HAL_DMA_Abort_IT>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d019      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7e:	e00f      	b.n	8008ca0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fa77 	bl	8009174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c86:	e00b      	b.n	8008ca0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa73 	bl	8009174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8e:	e007      	b.n	8008ca0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa6f 	bl	8009174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008c9e:	e253      	b.n	8009148 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca0:	bf00      	nop
    return;
 8008ca2:	e251      	b.n	8009148 <HAL_UART_IRQHandler+0x75c>
 8008ca4:	10000001 	.word	0x10000001
 8008ca8:	04000120 	.word	0x04000120
 8008cac:	0800a66f 	.word	0x0800a66f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	f040 81e7 	bne.w	8009088 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cbe:	f003 0310 	and.w	r3, r3, #16
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 81e0 	beq.w	8009088 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ccc:	f003 0310 	and.w	r3, r3, #16
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 81d9 	beq.w	8009088 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2210      	movs	r2, #16
 8008cdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce8:	2b40      	cmp	r3, #64	@ 0x40
 8008cea:	f040 8151 	bne.w	8008f90 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a96      	ldr	r2, [pc, #600]	@ (8008f50 <HAL_UART_IRQHandler+0x564>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d068      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a93      	ldr	r2, [pc, #588]	@ (8008f54 <HAL_UART_IRQHandler+0x568>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d061      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a91      	ldr	r2, [pc, #580]	@ (8008f58 <HAL_UART_IRQHandler+0x56c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d05a      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a8e      	ldr	r2, [pc, #568]	@ (8008f5c <HAL_UART_IRQHandler+0x570>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d053      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a8c      	ldr	r2, [pc, #560]	@ (8008f60 <HAL_UART_IRQHandler+0x574>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d04c      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a89      	ldr	r2, [pc, #548]	@ (8008f64 <HAL_UART_IRQHandler+0x578>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d045      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a87      	ldr	r2, [pc, #540]	@ (8008f68 <HAL_UART_IRQHandler+0x57c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d03e      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a84      	ldr	r2, [pc, #528]	@ (8008f6c <HAL_UART_IRQHandler+0x580>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d037      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a82      	ldr	r2, [pc, #520]	@ (8008f70 <HAL_UART_IRQHandler+0x584>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d030      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a7f      	ldr	r2, [pc, #508]	@ (8008f74 <HAL_UART_IRQHandler+0x588>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d029      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a7d      	ldr	r2, [pc, #500]	@ (8008f78 <HAL_UART_IRQHandler+0x58c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d022      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a7a      	ldr	r2, [pc, #488]	@ (8008f7c <HAL_UART_IRQHandler+0x590>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01b      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a78      	ldr	r2, [pc, #480]	@ (8008f80 <HAL_UART_IRQHandler+0x594>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d014      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a75      	ldr	r2, [pc, #468]	@ (8008f84 <HAL_UART_IRQHandler+0x598>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00d      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a73      	ldr	r2, [pc, #460]	@ (8008f88 <HAL_UART_IRQHandler+0x59c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d006      	beq.n	8008dce <HAL_UART_IRQHandler+0x3e2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a70      	ldr	r2, [pc, #448]	@ (8008f8c <HAL_UART_IRQHandler+0x5a0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d106      	bne.n	8008ddc <HAL_UART_IRQHandler+0x3f0>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	e005      	b.n	8008de8 <HAL_UART_IRQHandler+0x3fc>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008dec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 81ab 	beq.w	800914c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e00:	429a      	cmp	r2, r3
 8008e02:	f080 81a3 	bcs.w	800914c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e1c:	f000 8087 	beq.w	8008f2e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1da      	bne.n	8008e20 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e1      	bne.n	8008e6a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008eca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ed0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e3      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e4      	bne.n	8008eec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7f9 fb2b 	bl	8002584 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f91d 	bl	8009188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f4e:	e0fd      	b.n	800914c <HAL_UART_IRQHandler+0x760>
 8008f50:	40020010 	.word	0x40020010
 8008f54:	40020028 	.word	0x40020028
 8008f58:	40020040 	.word	0x40020040
 8008f5c:	40020058 	.word	0x40020058
 8008f60:	40020070 	.word	0x40020070
 8008f64:	40020088 	.word	0x40020088
 8008f68:	400200a0 	.word	0x400200a0
 8008f6c:	400200b8 	.word	0x400200b8
 8008f70:	40020410 	.word	0x40020410
 8008f74:	40020428 	.word	0x40020428
 8008f78:	40020440 	.word	0x40020440
 8008f7c:	40020458 	.word	0x40020458
 8008f80:	40020470 	.word	0x40020470
 8008f84:	40020488 	.word	0x40020488
 8008f88:	400204a0 	.word	0x400204a0
 8008f8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80cf 	beq.w	8009150 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80ca 	beq.w	8009150 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e4      	bne.n	8008fbc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	623b      	str	r3, [r7, #32]
   return(result);
 8009002:	6a3a      	ldr	r2, [r7, #32]
 8009004:	4b55      	ldr	r3, [pc, #340]	@ (800915c <HAL_UART_IRQHandler+0x770>)
 8009006:	4013      	ands	r3, r2
 8009008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009016:	633a      	str	r2, [r7, #48]	@ 0x30
 8009018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e3      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	60fb      	str	r3, [r7, #12]
   return(result);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 0310 	bic.w	r3, r3, #16
 8009052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	69b9      	ldr	r1, [r7, #24]
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	617b      	str	r3, [r7, #20]
   return(result);
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e4      	bne.n	800903e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800907a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f881 	bl	8009188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009086:	e063      	b.n	8009150 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00e      	beq.n	80090b2 <HAL_UART_IRQHandler+0x6c6>
 8009094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d008      	beq.n	80090b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fcc2 	bl	800aa34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090b0:	e051      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d008      	beq.n	80090e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d03a      	beq.n	8009154 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
    }
    return;
 80090e6:	e035      	b.n	8009154 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <HAL_UART_IRQHandler+0x71c>
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fc6c 	bl	800a9de <UART_EndTransmit_IT>
    return;
 8009106:	e026      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800910c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <HAL_UART_IRQHandler+0x73c>
 8009114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009118:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 fc9b 	bl	800aa5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009126:	e016      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d010      	beq.n	8009156 <HAL_UART_IRQHandler+0x76a>
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009138:	2b00      	cmp	r3, #0
 800913a:	da0c      	bge.n	8009156 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 fc83 	bl	800aa48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009142:	e008      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
      return;
 8009144:	bf00      	nop
 8009146:	e006      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
    return;
 8009148:	bf00      	nop
 800914a:	e004      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
      return;
 800914c:	bf00      	nop
 800914e:	e002      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
      return;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <HAL_UART_IRQHandler+0x76a>
    return;
 8009154:	bf00      	nop
  }
}
 8009156:	37e8      	adds	r7, #232	@ 0xe8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	effffffe 	.word	0xeffffffe

08009160 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a4:	b092      	sub	sp, #72	@ 0x48
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	431a      	orrs	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	431a      	orrs	r2, r3
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4bbe      	ldr	r3, [pc, #760]	@ (80094c8 <UART_SetConfig+0x328>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091d8:	430b      	orrs	r3, r1
 80091da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4ab3      	ldr	r2, [pc, #716]	@ (80094cc <UART_SetConfig+0x32c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d004      	beq.n	800920c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009208:	4313      	orrs	r3, r2
 800920a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	4baf      	ldr	r3, [pc, #700]	@ (80094d0 <UART_SetConfig+0x330>)
 8009214:	4013      	ands	r3, r2
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800921c:	430b      	orrs	r3, r1
 800921e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	f023 010f 	bic.w	r1, r3, #15
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4aa6      	ldr	r2, [pc, #664]	@ (80094d4 <UART_SetConfig+0x334>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d177      	bne.n	8009330 <UART_SetConfig+0x190>
 8009240:	4ba5      	ldr	r3, [pc, #660]	@ (80094d8 <UART_SetConfig+0x338>)
 8009242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009248:	2b28      	cmp	r3, #40	@ 0x28
 800924a:	d86d      	bhi.n	8009328 <UART_SetConfig+0x188>
 800924c:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <UART_SetConfig+0xb4>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	080092f9 	.word	0x080092f9
 8009258:	08009329 	.word	0x08009329
 800925c:	08009329 	.word	0x08009329
 8009260:	08009329 	.word	0x08009329
 8009264:	08009329 	.word	0x08009329
 8009268:	08009329 	.word	0x08009329
 800926c:	08009329 	.word	0x08009329
 8009270:	08009329 	.word	0x08009329
 8009274:	08009301 	.word	0x08009301
 8009278:	08009329 	.word	0x08009329
 800927c:	08009329 	.word	0x08009329
 8009280:	08009329 	.word	0x08009329
 8009284:	08009329 	.word	0x08009329
 8009288:	08009329 	.word	0x08009329
 800928c:	08009329 	.word	0x08009329
 8009290:	08009329 	.word	0x08009329
 8009294:	08009309 	.word	0x08009309
 8009298:	08009329 	.word	0x08009329
 800929c:	08009329 	.word	0x08009329
 80092a0:	08009329 	.word	0x08009329
 80092a4:	08009329 	.word	0x08009329
 80092a8:	08009329 	.word	0x08009329
 80092ac:	08009329 	.word	0x08009329
 80092b0:	08009329 	.word	0x08009329
 80092b4:	08009311 	.word	0x08009311
 80092b8:	08009329 	.word	0x08009329
 80092bc:	08009329 	.word	0x08009329
 80092c0:	08009329 	.word	0x08009329
 80092c4:	08009329 	.word	0x08009329
 80092c8:	08009329 	.word	0x08009329
 80092cc:	08009329 	.word	0x08009329
 80092d0:	08009329 	.word	0x08009329
 80092d4:	08009319 	.word	0x08009319
 80092d8:	08009329 	.word	0x08009329
 80092dc:	08009329 	.word	0x08009329
 80092e0:	08009329 	.word	0x08009329
 80092e4:	08009329 	.word	0x08009329
 80092e8:	08009329 	.word	0x08009329
 80092ec:	08009329 	.word	0x08009329
 80092f0:	08009329 	.word	0x08009329
 80092f4:	08009321 	.word	0x08009321
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fe:	e326      	b.n	800994e <UART_SetConfig+0x7ae>
 8009300:	2304      	movs	r3, #4
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e322      	b.n	800994e <UART_SetConfig+0x7ae>
 8009308:	2308      	movs	r3, #8
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e31e      	b.n	800994e <UART_SetConfig+0x7ae>
 8009310:	2310      	movs	r3, #16
 8009312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009316:	e31a      	b.n	800994e <UART_SetConfig+0x7ae>
 8009318:	2320      	movs	r3, #32
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931e:	e316      	b.n	800994e <UART_SetConfig+0x7ae>
 8009320:	2340      	movs	r3, #64	@ 0x40
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009326:	e312      	b.n	800994e <UART_SetConfig+0x7ae>
 8009328:	2380      	movs	r3, #128	@ 0x80
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932e:	e30e      	b.n	800994e <UART_SetConfig+0x7ae>
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a69      	ldr	r2, [pc, #420]	@ (80094dc <UART_SetConfig+0x33c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d130      	bne.n	800939c <UART_SetConfig+0x1fc>
 800933a:	4b67      	ldr	r3, [pc, #412]	@ (80094d8 <UART_SetConfig+0x338>)
 800933c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	2b05      	cmp	r3, #5
 8009344:	d826      	bhi.n	8009394 <UART_SetConfig+0x1f4>
 8009346:	a201      	add	r2, pc, #4	@ (adr r2, 800934c <UART_SetConfig+0x1ac>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009365 	.word	0x08009365
 8009350:	0800936d 	.word	0x0800936d
 8009354:	08009375 	.word	0x08009375
 8009358:	0800937d 	.word	0x0800937d
 800935c:	08009385 	.word	0x08009385
 8009360:	0800938d 	.word	0x0800938d
 8009364:	2300      	movs	r3, #0
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e2f0      	b.n	800994e <UART_SetConfig+0x7ae>
 800936c:	2304      	movs	r3, #4
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e2ec      	b.n	800994e <UART_SetConfig+0x7ae>
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e2e8      	b.n	800994e <UART_SetConfig+0x7ae>
 800937c:	2310      	movs	r3, #16
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e2e4      	b.n	800994e <UART_SetConfig+0x7ae>
 8009384:	2320      	movs	r3, #32
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e2e0      	b.n	800994e <UART_SetConfig+0x7ae>
 800938c:	2340      	movs	r3, #64	@ 0x40
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e2dc      	b.n	800994e <UART_SetConfig+0x7ae>
 8009394:	2380      	movs	r3, #128	@ 0x80
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e2d8      	b.n	800994e <UART_SetConfig+0x7ae>
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a4f      	ldr	r2, [pc, #316]	@ (80094e0 <UART_SetConfig+0x340>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d130      	bne.n	8009408 <UART_SetConfig+0x268>
 80093a6:	4b4c      	ldr	r3, [pc, #304]	@ (80094d8 <UART_SetConfig+0x338>)
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d826      	bhi.n	8009400 <UART_SetConfig+0x260>
 80093b2:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <UART_SetConfig+0x218>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093d1 	.word	0x080093d1
 80093bc:	080093d9 	.word	0x080093d9
 80093c0:	080093e1 	.word	0x080093e1
 80093c4:	080093e9 	.word	0x080093e9
 80093c8:	080093f1 	.word	0x080093f1
 80093cc:	080093f9 	.word	0x080093f9
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e2ba      	b.n	800994e <UART_SetConfig+0x7ae>
 80093d8:	2304      	movs	r3, #4
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e2b6      	b.n	800994e <UART_SetConfig+0x7ae>
 80093e0:	2308      	movs	r3, #8
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e2b2      	b.n	800994e <UART_SetConfig+0x7ae>
 80093e8:	2310      	movs	r3, #16
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e2ae      	b.n	800994e <UART_SetConfig+0x7ae>
 80093f0:	2320      	movs	r3, #32
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e2aa      	b.n	800994e <UART_SetConfig+0x7ae>
 80093f8:	2340      	movs	r3, #64	@ 0x40
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e2a6      	b.n	800994e <UART_SetConfig+0x7ae>
 8009400:	2380      	movs	r3, #128	@ 0x80
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e2a2      	b.n	800994e <UART_SetConfig+0x7ae>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a35      	ldr	r2, [pc, #212]	@ (80094e4 <UART_SetConfig+0x344>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d130      	bne.n	8009474 <UART_SetConfig+0x2d4>
 8009412:	4b31      	ldr	r3, [pc, #196]	@ (80094d8 <UART_SetConfig+0x338>)
 8009414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b05      	cmp	r3, #5
 800941c:	d826      	bhi.n	800946c <UART_SetConfig+0x2cc>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <UART_SetConfig+0x284>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	0800943d 	.word	0x0800943d
 8009428:	08009445 	.word	0x08009445
 800942c:	0800944d 	.word	0x0800944d
 8009430:	08009455 	.word	0x08009455
 8009434:	0800945d 	.word	0x0800945d
 8009438:	08009465 	.word	0x08009465
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e284      	b.n	800994e <UART_SetConfig+0x7ae>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e280      	b.n	800994e <UART_SetConfig+0x7ae>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e27c      	b.n	800994e <UART_SetConfig+0x7ae>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e278      	b.n	800994e <UART_SetConfig+0x7ae>
 800945c:	2320      	movs	r3, #32
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e274      	b.n	800994e <UART_SetConfig+0x7ae>
 8009464:	2340      	movs	r3, #64	@ 0x40
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e270      	b.n	800994e <UART_SetConfig+0x7ae>
 800946c:	2380      	movs	r3, #128	@ 0x80
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e26c      	b.n	800994e <UART_SetConfig+0x7ae>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a1b      	ldr	r2, [pc, #108]	@ (80094e8 <UART_SetConfig+0x348>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d142      	bne.n	8009504 <UART_SetConfig+0x364>
 800947e:	4b16      	ldr	r3, [pc, #88]	@ (80094d8 <UART_SetConfig+0x338>)
 8009480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	2b05      	cmp	r3, #5
 8009488:	d838      	bhi.n	80094fc <UART_SetConfig+0x35c>
 800948a:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <UART_SetConfig+0x2f0>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094a9 	.word	0x080094a9
 8009494:	080094b1 	.word	0x080094b1
 8009498:	080094b9 	.word	0x080094b9
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094ed 	.word	0x080094ed
 80094a4:	080094f5 	.word	0x080094f5
 80094a8:	2300      	movs	r3, #0
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e24e      	b.n	800994e <UART_SetConfig+0x7ae>
 80094b0:	2304      	movs	r3, #4
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e24a      	b.n	800994e <UART_SetConfig+0x7ae>
 80094b8:	2308      	movs	r3, #8
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e246      	b.n	800994e <UART_SetConfig+0x7ae>
 80094c0:	2310      	movs	r3, #16
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e242      	b.n	800994e <UART_SetConfig+0x7ae>
 80094c8:	cfff69f3 	.word	0xcfff69f3
 80094cc:	58000c00 	.word	0x58000c00
 80094d0:	11fff4ff 	.word	0x11fff4ff
 80094d4:	40011000 	.word	0x40011000
 80094d8:	58024400 	.word	0x58024400
 80094dc:	40004400 	.word	0x40004400
 80094e0:	40004800 	.word	0x40004800
 80094e4:	40004c00 	.word	0x40004c00
 80094e8:	40005000 	.word	0x40005000
 80094ec:	2320      	movs	r3, #32
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e22c      	b.n	800994e <UART_SetConfig+0x7ae>
 80094f4:	2340      	movs	r3, #64	@ 0x40
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fa:	e228      	b.n	800994e <UART_SetConfig+0x7ae>
 80094fc:	2380      	movs	r3, #128	@ 0x80
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009502:	e224      	b.n	800994e <UART_SetConfig+0x7ae>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4ab1      	ldr	r2, [pc, #708]	@ (80097d0 <UART_SetConfig+0x630>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d176      	bne.n	80095fc <UART_SetConfig+0x45c>
 800950e:	4bb1      	ldr	r3, [pc, #708]	@ (80097d4 <UART_SetConfig+0x634>)
 8009510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009516:	2b28      	cmp	r3, #40	@ 0x28
 8009518:	d86c      	bhi.n	80095f4 <UART_SetConfig+0x454>
 800951a:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <UART_SetConfig+0x380>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	080095c5 	.word	0x080095c5
 8009524:	080095f5 	.word	0x080095f5
 8009528:	080095f5 	.word	0x080095f5
 800952c:	080095f5 	.word	0x080095f5
 8009530:	080095f5 	.word	0x080095f5
 8009534:	080095f5 	.word	0x080095f5
 8009538:	080095f5 	.word	0x080095f5
 800953c:	080095f5 	.word	0x080095f5
 8009540:	080095cd 	.word	0x080095cd
 8009544:	080095f5 	.word	0x080095f5
 8009548:	080095f5 	.word	0x080095f5
 800954c:	080095f5 	.word	0x080095f5
 8009550:	080095f5 	.word	0x080095f5
 8009554:	080095f5 	.word	0x080095f5
 8009558:	080095f5 	.word	0x080095f5
 800955c:	080095f5 	.word	0x080095f5
 8009560:	080095d5 	.word	0x080095d5
 8009564:	080095f5 	.word	0x080095f5
 8009568:	080095f5 	.word	0x080095f5
 800956c:	080095f5 	.word	0x080095f5
 8009570:	080095f5 	.word	0x080095f5
 8009574:	080095f5 	.word	0x080095f5
 8009578:	080095f5 	.word	0x080095f5
 800957c:	080095f5 	.word	0x080095f5
 8009580:	080095dd 	.word	0x080095dd
 8009584:	080095f5 	.word	0x080095f5
 8009588:	080095f5 	.word	0x080095f5
 800958c:	080095f5 	.word	0x080095f5
 8009590:	080095f5 	.word	0x080095f5
 8009594:	080095f5 	.word	0x080095f5
 8009598:	080095f5 	.word	0x080095f5
 800959c:	080095f5 	.word	0x080095f5
 80095a0:	080095e5 	.word	0x080095e5
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	080095f5 	.word	0x080095f5
 80095ac:	080095f5 	.word	0x080095f5
 80095b0:	080095f5 	.word	0x080095f5
 80095b4:	080095f5 	.word	0x080095f5
 80095b8:	080095f5 	.word	0x080095f5
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095ed 	.word	0x080095ed
 80095c4:	2301      	movs	r3, #1
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e1c0      	b.n	800994e <UART_SetConfig+0x7ae>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e1bc      	b.n	800994e <UART_SetConfig+0x7ae>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e1b8      	b.n	800994e <UART_SetConfig+0x7ae>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e1b4      	b.n	800994e <UART_SetConfig+0x7ae>
 80095e4:	2320      	movs	r3, #32
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e1b0      	b.n	800994e <UART_SetConfig+0x7ae>
 80095ec:	2340      	movs	r3, #64	@ 0x40
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e1ac      	b.n	800994e <UART_SetConfig+0x7ae>
 80095f4:	2380      	movs	r3, #128	@ 0x80
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e1a8      	b.n	800994e <UART_SetConfig+0x7ae>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a75      	ldr	r2, [pc, #468]	@ (80097d8 <UART_SetConfig+0x638>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d130      	bne.n	8009668 <UART_SetConfig+0x4c8>
 8009606:	4b73      	ldr	r3, [pc, #460]	@ (80097d4 <UART_SetConfig+0x634>)
 8009608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	2b05      	cmp	r3, #5
 8009610:	d826      	bhi.n	8009660 <UART_SetConfig+0x4c0>
 8009612:	a201      	add	r2, pc, #4	@ (adr r2, 8009618 <UART_SetConfig+0x478>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009631 	.word	0x08009631
 800961c:	08009639 	.word	0x08009639
 8009620:	08009641 	.word	0x08009641
 8009624:	08009649 	.word	0x08009649
 8009628:	08009651 	.word	0x08009651
 800962c:	08009659 	.word	0x08009659
 8009630:	2300      	movs	r3, #0
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e18a      	b.n	800994e <UART_SetConfig+0x7ae>
 8009638:	2304      	movs	r3, #4
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e186      	b.n	800994e <UART_SetConfig+0x7ae>
 8009640:	2308      	movs	r3, #8
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e182      	b.n	800994e <UART_SetConfig+0x7ae>
 8009648:	2310      	movs	r3, #16
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e17e      	b.n	800994e <UART_SetConfig+0x7ae>
 8009650:	2320      	movs	r3, #32
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e17a      	b.n	800994e <UART_SetConfig+0x7ae>
 8009658:	2340      	movs	r3, #64	@ 0x40
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e176      	b.n	800994e <UART_SetConfig+0x7ae>
 8009660:	2380      	movs	r3, #128	@ 0x80
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e172      	b.n	800994e <UART_SetConfig+0x7ae>
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a5b      	ldr	r2, [pc, #364]	@ (80097dc <UART_SetConfig+0x63c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d130      	bne.n	80096d4 <UART_SetConfig+0x534>
 8009672:	4b58      	ldr	r3, [pc, #352]	@ (80097d4 <UART_SetConfig+0x634>)
 8009674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b05      	cmp	r3, #5
 800967c:	d826      	bhi.n	80096cc <UART_SetConfig+0x52c>
 800967e:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <UART_SetConfig+0x4e4>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	0800969d 	.word	0x0800969d
 8009688:	080096a5 	.word	0x080096a5
 800968c:	080096ad 	.word	0x080096ad
 8009690:	080096b5 	.word	0x080096b5
 8009694:	080096bd 	.word	0x080096bd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	2300      	movs	r3, #0
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e154      	b.n	800994e <UART_SetConfig+0x7ae>
 80096a4:	2304      	movs	r3, #4
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e150      	b.n	800994e <UART_SetConfig+0x7ae>
 80096ac:	2308      	movs	r3, #8
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e14c      	b.n	800994e <UART_SetConfig+0x7ae>
 80096b4:	2310      	movs	r3, #16
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e148      	b.n	800994e <UART_SetConfig+0x7ae>
 80096bc:	2320      	movs	r3, #32
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e144      	b.n	800994e <UART_SetConfig+0x7ae>
 80096c4:	2340      	movs	r3, #64	@ 0x40
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e140      	b.n	800994e <UART_SetConfig+0x7ae>
 80096cc:	2380      	movs	r3, #128	@ 0x80
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e13c      	b.n	800994e <UART_SetConfig+0x7ae>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a41      	ldr	r2, [pc, #260]	@ (80097e0 <UART_SetConfig+0x640>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	f040 8082 	bne.w	80097e4 <UART_SetConfig+0x644>
 80096e0:	4b3c      	ldr	r3, [pc, #240]	@ (80097d4 <UART_SetConfig+0x634>)
 80096e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096e8:	2b28      	cmp	r3, #40	@ 0x28
 80096ea:	d86d      	bhi.n	80097c8 <UART_SetConfig+0x628>
 80096ec:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <UART_SetConfig+0x554>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	08009799 	.word	0x08009799
 80096f8:	080097c9 	.word	0x080097c9
 80096fc:	080097c9 	.word	0x080097c9
 8009700:	080097c9 	.word	0x080097c9
 8009704:	080097c9 	.word	0x080097c9
 8009708:	080097c9 	.word	0x080097c9
 800970c:	080097c9 	.word	0x080097c9
 8009710:	080097c9 	.word	0x080097c9
 8009714:	080097a1 	.word	0x080097a1
 8009718:	080097c9 	.word	0x080097c9
 800971c:	080097c9 	.word	0x080097c9
 8009720:	080097c9 	.word	0x080097c9
 8009724:	080097c9 	.word	0x080097c9
 8009728:	080097c9 	.word	0x080097c9
 800972c:	080097c9 	.word	0x080097c9
 8009730:	080097c9 	.word	0x080097c9
 8009734:	080097a9 	.word	0x080097a9
 8009738:	080097c9 	.word	0x080097c9
 800973c:	080097c9 	.word	0x080097c9
 8009740:	080097c9 	.word	0x080097c9
 8009744:	080097c9 	.word	0x080097c9
 8009748:	080097c9 	.word	0x080097c9
 800974c:	080097c9 	.word	0x080097c9
 8009750:	080097c9 	.word	0x080097c9
 8009754:	080097b1 	.word	0x080097b1
 8009758:	080097c9 	.word	0x080097c9
 800975c:	080097c9 	.word	0x080097c9
 8009760:	080097c9 	.word	0x080097c9
 8009764:	080097c9 	.word	0x080097c9
 8009768:	080097c9 	.word	0x080097c9
 800976c:	080097c9 	.word	0x080097c9
 8009770:	080097c9 	.word	0x080097c9
 8009774:	080097b9 	.word	0x080097b9
 8009778:	080097c9 	.word	0x080097c9
 800977c:	080097c9 	.word	0x080097c9
 8009780:	080097c9 	.word	0x080097c9
 8009784:	080097c9 	.word	0x080097c9
 8009788:	080097c9 	.word	0x080097c9
 800978c:	080097c9 	.word	0x080097c9
 8009790:	080097c9 	.word	0x080097c9
 8009794:	080097c1 	.word	0x080097c1
 8009798:	2301      	movs	r3, #1
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e0d6      	b.n	800994e <UART_SetConfig+0x7ae>
 80097a0:	2304      	movs	r3, #4
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a6:	e0d2      	b.n	800994e <UART_SetConfig+0x7ae>
 80097a8:	2308      	movs	r3, #8
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ae:	e0ce      	b.n	800994e <UART_SetConfig+0x7ae>
 80097b0:	2310      	movs	r3, #16
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b6:	e0ca      	b.n	800994e <UART_SetConfig+0x7ae>
 80097b8:	2320      	movs	r3, #32
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e0c6      	b.n	800994e <UART_SetConfig+0x7ae>
 80097c0:	2340      	movs	r3, #64	@ 0x40
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c6:	e0c2      	b.n	800994e <UART_SetConfig+0x7ae>
 80097c8:	2380      	movs	r3, #128	@ 0x80
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ce:	e0be      	b.n	800994e <UART_SetConfig+0x7ae>
 80097d0:	40011400 	.word	0x40011400
 80097d4:	58024400 	.word	0x58024400
 80097d8:	40007800 	.word	0x40007800
 80097dc:	40007c00 	.word	0x40007c00
 80097e0:	40011800 	.word	0x40011800
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4aad      	ldr	r2, [pc, #692]	@ (8009aa0 <UART_SetConfig+0x900>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d176      	bne.n	80098dc <UART_SetConfig+0x73c>
 80097ee:	4bad      	ldr	r3, [pc, #692]	@ (8009aa4 <UART_SetConfig+0x904>)
 80097f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097f6:	2b28      	cmp	r3, #40	@ 0x28
 80097f8:	d86c      	bhi.n	80098d4 <UART_SetConfig+0x734>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <UART_SetConfig+0x660>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	080098a5 	.word	0x080098a5
 8009804:	080098d5 	.word	0x080098d5
 8009808:	080098d5 	.word	0x080098d5
 800980c:	080098d5 	.word	0x080098d5
 8009810:	080098d5 	.word	0x080098d5
 8009814:	080098d5 	.word	0x080098d5
 8009818:	080098d5 	.word	0x080098d5
 800981c:	080098d5 	.word	0x080098d5
 8009820:	080098ad 	.word	0x080098ad
 8009824:	080098d5 	.word	0x080098d5
 8009828:	080098d5 	.word	0x080098d5
 800982c:	080098d5 	.word	0x080098d5
 8009830:	080098d5 	.word	0x080098d5
 8009834:	080098d5 	.word	0x080098d5
 8009838:	080098d5 	.word	0x080098d5
 800983c:	080098d5 	.word	0x080098d5
 8009840:	080098b5 	.word	0x080098b5
 8009844:	080098d5 	.word	0x080098d5
 8009848:	080098d5 	.word	0x080098d5
 800984c:	080098d5 	.word	0x080098d5
 8009850:	080098d5 	.word	0x080098d5
 8009854:	080098d5 	.word	0x080098d5
 8009858:	080098d5 	.word	0x080098d5
 800985c:	080098d5 	.word	0x080098d5
 8009860:	080098bd 	.word	0x080098bd
 8009864:	080098d5 	.word	0x080098d5
 8009868:	080098d5 	.word	0x080098d5
 800986c:	080098d5 	.word	0x080098d5
 8009870:	080098d5 	.word	0x080098d5
 8009874:	080098d5 	.word	0x080098d5
 8009878:	080098d5 	.word	0x080098d5
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098c5 	.word	0x080098c5
 8009884:	080098d5 	.word	0x080098d5
 8009888:	080098d5 	.word	0x080098d5
 800988c:	080098d5 	.word	0x080098d5
 8009890:	080098d5 	.word	0x080098d5
 8009894:	080098d5 	.word	0x080098d5
 8009898:	080098d5 	.word	0x080098d5
 800989c:	080098d5 	.word	0x080098d5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e050      	b.n	800994e <UART_SetConfig+0x7ae>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e04c      	b.n	800994e <UART_SetConfig+0x7ae>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e048      	b.n	800994e <UART_SetConfig+0x7ae>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e044      	b.n	800994e <UART_SetConfig+0x7ae>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e040      	b.n	800994e <UART_SetConfig+0x7ae>
 80098cc:	2340      	movs	r3, #64	@ 0x40
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e03c      	b.n	800994e <UART_SetConfig+0x7ae>
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e038      	b.n	800994e <UART_SetConfig+0x7ae>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a71      	ldr	r2, [pc, #452]	@ (8009aa8 <UART_SetConfig+0x908>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d130      	bne.n	8009948 <UART_SetConfig+0x7a8>
 80098e6:	4b6f      	ldr	r3, [pc, #444]	@ (8009aa4 <UART_SetConfig+0x904>)
 80098e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d826      	bhi.n	8009940 <UART_SetConfig+0x7a0>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <UART_SetConfig+0x758>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009911 	.word	0x08009911
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009921 	.word	0x08009921
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	2302      	movs	r3, #2
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e01a      	b.n	800994e <UART_SetConfig+0x7ae>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e016      	b.n	800994e <UART_SetConfig+0x7ae>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e012      	b.n	800994e <UART_SetConfig+0x7ae>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e00e      	b.n	800994e <UART_SetConfig+0x7ae>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e00a      	b.n	800994e <UART_SetConfig+0x7ae>
 8009938:	2340      	movs	r3, #64	@ 0x40
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e006      	b.n	800994e <UART_SetConfig+0x7ae>
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e002      	b.n	800994e <UART_SetConfig+0x7ae>
 8009948:	2380      	movs	r3, #128	@ 0x80
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a55      	ldr	r2, [pc, #340]	@ (8009aa8 <UART_SetConfig+0x908>)
 8009954:	4293      	cmp	r3, r2
 8009956:	f040 80f8 	bne.w	8009b4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800995a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800995e:	2b20      	cmp	r3, #32
 8009960:	dc46      	bgt.n	80099f0 <UART_SetConfig+0x850>
 8009962:	2b02      	cmp	r3, #2
 8009964:	db75      	blt.n	8009a52 <UART_SetConfig+0x8b2>
 8009966:	3b02      	subs	r3, #2
 8009968:	2b1e      	cmp	r3, #30
 800996a:	d872      	bhi.n	8009a52 <UART_SetConfig+0x8b2>
 800996c:	a201      	add	r2, pc, #4	@ (adr r2, 8009974 <UART_SetConfig+0x7d4>)
 800996e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009972:	bf00      	nop
 8009974:	080099f7 	.word	0x080099f7
 8009978:	08009a53 	.word	0x08009a53
 800997c:	080099ff 	.word	0x080099ff
 8009980:	08009a53 	.word	0x08009a53
 8009984:	08009a53 	.word	0x08009a53
 8009988:	08009a53 	.word	0x08009a53
 800998c:	08009a0f 	.word	0x08009a0f
 8009990:	08009a53 	.word	0x08009a53
 8009994:	08009a53 	.word	0x08009a53
 8009998:	08009a53 	.word	0x08009a53
 800999c:	08009a53 	.word	0x08009a53
 80099a0:	08009a53 	.word	0x08009a53
 80099a4:	08009a53 	.word	0x08009a53
 80099a8:	08009a53 	.word	0x08009a53
 80099ac:	08009a1f 	.word	0x08009a1f
 80099b0:	08009a53 	.word	0x08009a53
 80099b4:	08009a53 	.word	0x08009a53
 80099b8:	08009a53 	.word	0x08009a53
 80099bc:	08009a53 	.word	0x08009a53
 80099c0:	08009a53 	.word	0x08009a53
 80099c4:	08009a53 	.word	0x08009a53
 80099c8:	08009a53 	.word	0x08009a53
 80099cc:	08009a53 	.word	0x08009a53
 80099d0:	08009a53 	.word	0x08009a53
 80099d4:	08009a53 	.word	0x08009a53
 80099d8:	08009a53 	.word	0x08009a53
 80099dc:	08009a53 	.word	0x08009a53
 80099e0:	08009a53 	.word	0x08009a53
 80099e4:	08009a53 	.word	0x08009a53
 80099e8:	08009a53 	.word	0x08009a53
 80099ec:	08009a45 	.word	0x08009a45
 80099f0:	2b40      	cmp	r3, #64	@ 0x40
 80099f2:	d02a      	beq.n	8009a4a <UART_SetConfig+0x8aa>
 80099f4:	e02d      	b.n	8009a52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099f6:	f7fd fd9b 	bl	8007530 <HAL_RCCEx_GetD3PCLK1Freq>
 80099fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099fc:	e02f      	b.n	8009a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd fdaa 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a0c:	e027      	b.n	8009a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a0e:	f107 0318 	add.w	r3, r7, #24
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd fef6 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a1c:	e01f      	b.n	8009a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a1e:	4b21      	ldr	r3, [pc, #132]	@ (8009aa4 <UART_SetConfig+0x904>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d009      	beq.n	8009a3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa4 <UART_SetConfig+0x904>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	08db      	lsrs	r3, r3, #3
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	4a1d      	ldr	r2, [pc, #116]	@ (8009aac <UART_SetConfig+0x90c>)
 8009a36:	fa22 f303 	lsr.w	r3, r2, r3
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a3c:	e00f      	b.n	8009a5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009aac <UART_SetConfig+0x90c>)
 8009a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a42:	e00c      	b.n	8009a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a44:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <UART_SetConfig+0x910>)
 8009a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a48:	e009      	b.n	8009a5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a50:	e005      	b.n	8009a5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 81ee 	beq.w	8009e42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6a:	4a12      	ldr	r2, [pc, #72]	@ (8009ab4 <UART_SetConfig+0x914>)
 8009a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a70:	461a      	mov	r2, r3
 8009a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	4413      	add	r3, r2
 8009a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d305      	bcc.n	8009a96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d910      	bls.n	8009ab8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a9c:	e1d1      	b.n	8009e42 <UART_SetConfig+0xca2>
 8009a9e:	bf00      	nop
 8009aa0:	40011c00 	.word	0x40011c00
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	58000c00 	.word	0x58000c00
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	003d0900 	.word	0x003d0900
 8009ab4:	0800c634 	.word	0x0800c634
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aba:	2200      	movs	r2, #0
 8009abc:	60bb      	str	r3, [r7, #8]
 8009abe:	60fa      	str	r2, [r7, #12]
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac4:	4ac0      	ldr	r2, [pc, #768]	@ (8009dc8 <UART_SetConfig+0xc28>)
 8009ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2200      	movs	r2, #0
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ada:	f7f6 fc79 	bl	80003d0 <__aeabi_uldivmod>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	020b      	lsls	r3, r1, #8
 8009af0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009af4:	0202      	lsls	r2, r0, #8
 8009af6:	6979      	ldr	r1, [r7, #20]
 8009af8:	6849      	ldr	r1, [r1, #4]
 8009afa:	0849      	lsrs	r1, r1, #1
 8009afc:	2000      	movs	r0, #0
 8009afe:	460c      	mov	r4, r1
 8009b00:	4605      	mov	r5, r0
 8009b02:	eb12 0804 	adds.w	r8, r2, r4
 8009b06:	eb43 0905 	adc.w	r9, r3, r5
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	469a      	mov	sl, r3
 8009b12:	4693      	mov	fp, r2
 8009b14:	4652      	mov	r2, sl
 8009b16:	465b      	mov	r3, fp
 8009b18:	4640      	mov	r0, r8
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	f7f6 fc58 	bl	80003d0 <__aeabi_uldivmod>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4613      	mov	r3, r2
 8009b26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b2e:	d308      	bcc.n	8009b42 <UART_SetConfig+0x9a2>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b36:	d204      	bcs.n	8009b42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b3e:	60da      	str	r2, [r3, #12]
 8009b40:	e17f      	b.n	8009e42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b48:	e17b      	b.n	8009e42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b52:	f040 80bd 	bne.w	8009cd0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009b56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	dc48      	bgt.n	8009bf0 <UART_SetConfig+0xa50>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	db7b      	blt.n	8009c5a <UART_SetConfig+0xaba>
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	d879      	bhi.n	8009c5a <UART_SetConfig+0xaba>
 8009b66:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <UART_SetConfig+0x9cc>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009bf7 	.word	0x08009bf7
 8009b70:	08009bff 	.word	0x08009bff
 8009b74:	08009c5b 	.word	0x08009c5b
 8009b78:	08009c5b 	.word	0x08009c5b
 8009b7c:	08009c07 	.word	0x08009c07
 8009b80:	08009c5b 	.word	0x08009c5b
 8009b84:	08009c5b 	.word	0x08009c5b
 8009b88:	08009c5b 	.word	0x08009c5b
 8009b8c:	08009c17 	.word	0x08009c17
 8009b90:	08009c5b 	.word	0x08009c5b
 8009b94:	08009c5b 	.word	0x08009c5b
 8009b98:	08009c5b 	.word	0x08009c5b
 8009b9c:	08009c5b 	.word	0x08009c5b
 8009ba0:	08009c5b 	.word	0x08009c5b
 8009ba4:	08009c5b 	.word	0x08009c5b
 8009ba8:	08009c5b 	.word	0x08009c5b
 8009bac:	08009c27 	.word	0x08009c27
 8009bb0:	08009c5b 	.word	0x08009c5b
 8009bb4:	08009c5b 	.word	0x08009c5b
 8009bb8:	08009c5b 	.word	0x08009c5b
 8009bbc:	08009c5b 	.word	0x08009c5b
 8009bc0:	08009c5b 	.word	0x08009c5b
 8009bc4:	08009c5b 	.word	0x08009c5b
 8009bc8:	08009c5b 	.word	0x08009c5b
 8009bcc:	08009c5b 	.word	0x08009c5b
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c5b 	.word	0x08009c5b
 8009bd8:	08009c5b 	.word	0x08009c5b
 8009bdc:	08009c5b 	.word	0x08009c5b
 8009be0:	08009c5b 	.word	0x08009c5b
 8009be4:	08009c5b 	.word	0x08009c5b
 8009be8:	08009c5b 	.word	0x08009c5b
 8009bec:	08009c4d 	.word	0x08009c4d
 8009bf0:	2b40      	cmp	r3, #64	@ 0x40
 8009bf2:	d02e      	beq.n	8009c52 <UART_SetConfig+0xab2>
 8009bf4:	e031      	b.n	8009c5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bf6:	f7fc facf 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8009bfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bfc:	e033      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bfe:	f7fc fae1 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 8009c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c04:	e02f      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd fca6 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c14:	e027      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c16:	f107 0318 	add.w	r3, r7, #24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fd fdf2 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c24:	e01f      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c26:	4b69      	ldr	r3, [pc, #420]	@ (8009dcc <UART_SetConfig+0xc2c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c32:	4b66      	ldr	r3, [pc, #408]	@ (8009dcc <UART_SetConfig+0xc2c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	4a64      	ldr	r2, [pc, #400]	@ (8009dd0 <UART_SetConfig+0xc30>)
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c44:	e00f      	b.n	8009c66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c46:	4b62      	ldr	r3, [pc, #392]	@ (8009dd0 <UART_SetConfig+0xc30>)
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c4a:	e00c      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c4c:	4b61      	ldr	r3, [pc, #388]	@ (8009dd4 <UART_SetConfig+0xc34>)
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c50:	e009      	b.n	8009c66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c58:	e005      	b.n	8009c66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80ea 	beq.w	8009e42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c72:	4a55      	ldr	r2, [pc, #340]	@ (8009dc8 <UART_SetConfig+0xc28>)
 8009c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c80:	005a      	lsls	r2, r3, #1
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	441a      	add	r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c96:	2b0f      	cmp	r3, #15
 8009c98:	d916      	bls.n	8009cc8 <UART_SetConfig+0xb28>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ca0:	d212      	bcs.n	8009cc8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f023 030f 	bic.w	r3, r3, #15
 8009caa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009cc4:	60da      	str	r2, [r3, #12]
 8009cc6:	e0bc      	b.n	8009e42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cce:	e0b8      	b.n	8009e42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	dc4b      	bgt.n	8009d70 <UART_SetConfig+0xbd0>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f2c0 8087 	blt.w	8009dec <UART_SetConfig+0xc4c>
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	f200 8084 	bhi.w	8009dec <UART_SetConfig+0xc4c>
 8009ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cec <UART_SetConfig+0xb4c>)
 8009ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cea:	bf00      	nop
 8009cec:	08009d77 	.word	0x08009d77
 8009cf0:	08009d7f 	.word	0x08009d7f
 8009cf4:	08009ded 	.word	0x08009ded
 8009cf8:	08009ded 	.word	0x08009ded
 8009cfc:	08009d87 	.word	0x08009d87
 8009d00:	08009ded 	.word	0x08009ded
 8009d04:	08009ded 	.word	0x08009ded
 8009d08:	08009ded 	.word	0x08009ded
 8009d0c:	08009d97 	.word	0x08009d97
 8009d10:	08009ded 	.word	0x08009ded
 8009d14:	08009ded 	.word	0x08009ded
 8009d18:	08009ded 	.word	0x08009ded
 8009d1c:	08009ded 	.word	0x08009ded
 8009d20:	08009ded 	.word	0x08009ded
 8009d24:	08009ded 	.word	0x08009ded
 8009d28:	08009ded 	.word	0x08009ded
 8009d2c:	08009da7 	.word	0x08009da7
 8009d30:	08009ded 	.word	0x08009ded
 8009d34:	08009ded 	.word	0x08009ded
 8009d38:	08009ded 	.word	0x08009ded
 8009d3c:	08009ded 	.word	0x08009ded
 8009d40:	08009ded 	.word	0x08009ded
 8009d44:	08009ded 	.word	0x08009ded
 8009d48:	08009ded 	.word	0x08009ded
 8009d4c:	08009ded 	.word	0x08009ded
 8009d50:	08009ded 	.word	0x08009ded
 8009d54:	08009ded 	.word	0x08009ded
 8009d58:	08009ded 	.word	0x08009ded
 8009d5c:	08009ded 	.word	0x08009ded
 8009d60:	08009ded 	.word	0x08009ded
 8009d64:	08009ded 	.word	0x08009ded
 8009d68:	08009ded 	.word	0x08009ded
 8009d6c:	08009ddf 	.word	0x08009ddf
 8009d70:	2b40      	cmp	r3, #64	@ 0x40
 8009d72:	d037      	beq.n	8009de4 <UART_SetConfig+0xc44>
 8009d74:	e03a      	b.n	8009dec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d76:	f7fc fa0f 	bl	8006198 <HAL_RCC_GetPCLK1Freq>
 8009d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d7c:	e03c      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d7e:	f7fc fa21 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 8009d82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d84:	e038      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fd fbe6 	bl	800755c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d94:	e030      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d96:	f107 0318 	add.w	r3, r7, #24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fd fd32 	bl	8007804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da4:	e028      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da6:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <UART_SetConfig+0xc2c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d012      	beq.n	8009dd8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009db2:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <UART_SetConfig+0xc2c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	08db      	lsrs	r3, r3, #3
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	4a04      	ldr	r2, [pc, #16]	@ (8009dd0 <UART_SetConfig+0xc30>)
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dc4:	e018      	b.n	8009df8 <UART_SetConfig+0xc58>
 8009dc6:	bf00      	nop
 8009dc8:	0800c634 	.word	0x0800c634
 8009dcc:	58024400 	.word	0x58024400
 8009dd0:	03d09000 	.word	0x03d09000
 8009dd4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b24      	ldr	r3, [pc, #144]	@ (8009e6c <UART_SetConfig+0xccc>)
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ddc:	e00c      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dde:	4b24      	ldr	r3, [pc, #144]	@ (8009e70 <UART_SetConfig+0xcd0>)
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de2:	e009      	b.n	8009df8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dea:	e005      	b.n	8009df8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009df6:	bf00      	nop
    }

    if (pclk != 0U)
 8009df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d021      	beq.n	8009e42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	4a1c      	ldr	r2, [pc, #112]	@ (8009e74 <UART_SetConfig+0xcd4>)
 8009e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	085b      	lsrs	r3, r3, #1
 8009e16:	441a      	add	r2, r3
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e20:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	2b0f      	cmp	r3, #15
 8009e26:	d909      	bls.n	8009e3c <UART_SetConfig+0xc9c>
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e2e:	d205      	bcs.n	8009e3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60da      	str	r2, [r3, #12]
 8009e3a:	e002      	b.n	8009e42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2200      	movs	r2, #0
 8009e56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3748      	adds	r7, #72	@ 0x48
 8009e66:	46bd      	mov	sp, r7
 8009e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e6c:	03d09000 	.word	0x03d09000
 8009e70:	003d0900 	.word	0x003d0900
 8009e74:	0800c634 	.word	0x0800c634

08009e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e84:	f003 0308 	and.w	r3, r3, #8
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00a      	beq.n	8009f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01a      	beq.n	8009f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f76:	d10a      	bne.n	8009f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	605a      	str	r2, [r3, #4]
  }
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b098      	sub	sp, #96	@ 0x60
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fcc:	f7f7 fbe8 	bl	80017a0 <HAL_GetTick>
 8009fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d12f      	bne.n	800a040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f88e 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d022      	beq.n	800a040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a00e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	461a      	mov	r2, r3
 800a016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a018:	647b      	str	r3, [r7, #68]	@ 0x44
 800a01a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e6      	bne.n	8009ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e063      	b.n	800a108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0304 	and.w	r3, r3, #4
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d149      	bne.n	800a0e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a056:	2200      	movs	r2, #0
 800a058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f857 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d03c      	beq.n	800a0e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	623b      	str	r3, [r7, #32]
   return(result);
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a086:	633b      	str	r3, [r7, #48]	@ 0x30
 800a088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e6      	bne.n	800a068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f023 0301 	bic.w	r3, r3, #1
 800a0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3308      	adds	r3, #8
 800a0b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ba:	61fa      	str	r2, [r7, #28]
 800a0bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	69b9      	ldr	r1, [r7, #24]
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e5      	bne.n	800a09a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e012      	b.n	800a108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3758      	adds	r7, #88	@ 0x58
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	4613      	mov	r3, r2
 800a11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a120:	e04f      	b.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a128:	d04b      	beq.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a12a:	f7f7 fb39 	bl	80017a0 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	429a      	cmp	r2, r3
 800a138:	d302      	bcc.n	800a140 <UART_WaitOnFlagUntilTimeout+0x30>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e04e      	b.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d037      	beq.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b80      	cmp	r3, #128	@ 0x80
 800a156:	d034      	beq.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b40      	cmp	r3, #64	@ 0x40
 800a15c:	d031      	beq.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	f003 0308 	and.w	r3, r3, #8
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d110      	bne.n	800a18e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2208      	movs	r2, #8
 800a172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f921 	bl	800a3bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2208      	movs	r2, #8
 800a17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e029      	b.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a19c:	d111      	bne.n	800a1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f907 	bl	800a3bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e00f      	b.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69da      	ldr	r2, [r3, #28]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	bf0c      	ite	eq
 800a1d2:	2301      	moveq	r3, #1
 800a1d4:	2300      	movne	r3, #0
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d0a0      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b096      	sub	sp, #88	@ 0x58
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	88fa      	ldrh	r2, [r7, #6]
 800a204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2222      	movs	r2, #34	@ 0x22
 800a214:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d02d      	beq.n	800a27e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a228:	4a40      	ldr	r2, [pc, #256]	@ (800a32c <UART_Start_Receive_DMA+0x140>)
 800a22a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a232:	4a3f      	ldr	r2, [pc, #252]	@ (800a330 <UART_Start_Receive_DMA+0x144>)
 800a234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a23c:	4a3d      	ldr	r2, [pc, #244]	@ (800a334 <UART_Start_Receive_DMA+0x148>)
 800a23e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a246:	2200      	movs	r2, #0
 800a248:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3324      	adds	r3, #36	@ 0x24
 800a256:	4619      	mov	r1, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25c:	461a      	mov	r2, r3
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	f7f7 ff26 	bl	80020b0 <HAL_DMA_Start_IT>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2210      	movs	r2, #16
 800a26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e051      	b.n	800a322 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d018      	beq.n	800a2b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a29a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e6      	bne.n	800a286 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3308      	adds	r3, #8
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a2da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e5      	bne.n	800a2b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a30c:	623a      	str	r2, [r7, #32]
 800a30e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	69f9      	ldr	r1, [r7, #28]
 800a312:	6a3a      	ldr	r2, [r7, #32]
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	61bb      	str	r3, [r7, #24]
   return(result);
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e5      	bne.n	800a2ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3758      	adds	r7, #88	@ 0x58
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	0800a489 	.word	0x0800a489
 800a330:	0800a5b1 	.word	0x0800a5b1
 800a334:	0800a5ef 	.word	0x0800a5ef

0800a338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b08f      	sub	sp, #60	@ 0x3c
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a354:	637b      	str	r3, [r7, #52]	@ 0x34
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a360:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e6      	bne.n	800a340 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	60bb      	str	r3, [r7, #8]
   return(result);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a388:	633b      	str	r3, [r7, #48]	@ 0x30
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a392:	61ba      	str	r2, [r7, #24]
 800a394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6979      	ldr	r1, [r7, #20]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e5      	bne.n	800a372 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a3ae:	bf00      	nop
 800a3b0:	373c      	adds	r7, #60	@ 0x3c
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
	...

0800a3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b095      	sub	sp, #84	@ 0x54
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e6      	bne.n	800a3c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	61fb      	str	r3, [r7, #28]
   return(result);
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	4b1e      	ldr	r3, [pc, #120]	@ (800a484 <UART_EndRxTransfer+0xc8>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3308      	adds	r3, #8
 800a414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e5      	bne.n	800a3f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d118      	bne.n	800a464 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f023 0310 	bic.w	r3, r3, #16
 800a446:	647b      	str	r3, [r7, #68]	@ 0x44
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	613b      	str	r3, [r7, #16]
   return(result);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e6      	bne.n	800a432 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a478:	bf00      	nop
 800a47a:	3754      	adds	r7, #84	@ 0x54
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	effffffe 	.word	0xeffffffe

0800a488 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b09c      	sub	sp, #112	@ 0x70
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a494:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a49e:	d071      	beq.n	800a584 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e6      	bne.n	800a4a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	e853 3f00 	ldrex	r3, [r3]
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a4fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800a4fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e5      	bne.n	800a4da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	623b      	str	r3, [r7, #32]
   return(result);
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a524:	663b      	str	r3, [r7, #96]	@ 0x60
 800a526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a52e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a54c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d118      	bne.n	800a584 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f023 0310 	bic.w	r3, r3, #16
 800a566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a570:	61fb      	str	r3, [r7, #28]
 800a572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	69b9      	ldr	r1, [r7, #24]
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	617b      	str	r3, [r7, #20]
   return(result);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e6      	bne.n	800a552 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a586:	2200      	movs	r2, #0
 800a588:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d107      	bne.n	800a5a2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a598:	4619      	mov	r1, r3
 800a59a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a59c:	f7fe fdf4 	bl	8009188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5a0:	e002      	b.n	800a5a8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a5a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a5a4:	f000 fc12 	bl	800adcc <HAL_UART_RxCpltCallback>
}
 800a5a8:	bf00      	nop
 800a5aa:	3770      	adds	r7, #112	@ 0x70
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d109      	bne.n	800a5e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5d2:	085b      	lsrs	r3, r3, #1
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7fe fdd5 	bl	8009188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5de:	e002      	b.n	800a5e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7fe fdbd 	bl	8009160 <HAL_UART_RxHalfCpltCallback>
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b086      	sub	sp, #24
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a602:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a616:	2b80      	cmp	r3, #128	@ 0x80
 800a618:	d109      	bne.n	800a62e <UART_DMAError+0x40>
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2b21      	cmp	r3, #33	@ 0x21
 800a61e:	d106      	bne.n	800a62e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2200      	movs	r2, #0
 800a624:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a628:	6978      	ldr	r0, [r7, #20]
 800a62a:	f7ff fe85 	bl	800a338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a638:	2b40      	cmp	r3, #64	@ 0x40
 800a63a:	d109      	bne.n	800a650 <UART_DMAError+0x62>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b22      	cmp	r3, #34	@ 0x22
 800a640:	d106      	bne.n	800a650 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2200      	movs	r2, #0
 800a646:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a64a:	6978      	ldr	r0, [r7, #20]
 800a64c:	f7ff feb6 	bl	800a3bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a656:	f043 0210 	orr.w	r2, r3, #16
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a660:	6978      	ldr	r0, [r7, #20]
 800a662:	f7fe fd87 	bl	8009174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a666:	bf00      	nop
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7fe fd71 	bl	8009174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a692:	bf00      	nop
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b08f      	sub	sp, #60	@ 0x3c
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6a8:	2b21      	cmp	r3, #33	@ 0x21
 800a6aa:	d14c      	bne.n	800a746 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d132      	bne.n	800a71e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e6      	bne.n	800a6b8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	61bb      	str	r3, [r7, #24]
 800a70a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6979      	ldr	r1, [r7, #20]
 800a70e:	69ba      	ldr	r2, [r7, #24]
 800a710:	e841 2300 	strex	r3, r2, [r1]
 800a714:	613b      	str	r3, [r7, #16]
   return(result);
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e6      	bne.n	800a6ea <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a71c:	e013      	b.n	800a746 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a746:	bf00      	nop
 800a748:	373c      	adds	r7, #60	@ 0x3c
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a752:	b480      	push	{r7}
 800a754:	b091      	sub	sp, #68	@ 0x44
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a760:	2b21      	cmp	r3, #33	@ 0x21
 800a762:	d151      	bne.n	800a808 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d132      	bne.n	800a7d6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	623b      	str	r3, [r7, #32]
   return(result);
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a784:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e6      	bne.n	800a770 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c0:	61fb      	str	r3, [r7, #28]
 800a7c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	69b9      	ldr	r1, [r7, #24]
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e6      	bne.n	800a7a2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a7d4:	e018      	b.n	800a808 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7f0:	1c9a      	adds	r2, r3, #2
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	3b01      	subs	r3, #1
 800a800:	b29a      	uxth	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a808:	bf00      	nop
 800a80a:	3744      	adds	r7, #68	@ 0x44
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b091      	sub	sp, #68	@ 0x44
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a822:	2b21      	cmp	r3, #33	@ 0x21
 800a824:	d160      	bne.n	800a8e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a82c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a82e:	e057      	b.n	800a8e0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d133      	bne.n	800a8a4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	623b      	str	r3, [r7, #32]
   return(result);
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a852:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3308      	adds	r3, #8
 800a85a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a85c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e5      	bne.n	800a83c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a884:	637b      	str	r3, [r7, #52]	@ 0x34
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88e:	61fb      	str	r3, [r7, #28]
 800a890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	69b9      	ldr	r1, [r7, #24]
 800a894:	69fa      	ldr	r2, [r7, #28]
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	617b      	str	r3, [r7, #20]
   return(result);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e6      	bne.n	800a870 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a8a2:	e021      	b.n	800a8e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d013      	beq.n	800a8da <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b6:	781a      	ldrb	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a8da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a8e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1a4      	bne.n	800a830 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a8e6:	e7ff      	b.n	800a8e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a8e8:	bf00      	nop
 800a8ea:	3744      	adds	r7, #68	@ 0x44
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b091      	sub	sp, #68	@ 0x44
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a902:	2b21      	cmp	r3, #33	@ 0x21
 800a904:	d165      	bne.n	800a9d2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a90c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a90e:	e05c      	b.n	800a9ca <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a916:	b29b      	uxth	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d133      	bne.n	800a984 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3308      	adds	r3, #8
 800a922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a93c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a93e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a944:	e841 2300 	strex	r3, r2, [r1]
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e5      	bne.n	800a91c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	e853 3f00 	ldrex	r3, [r3]
 800a95c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	61bb      	str	r3, [r7, #24]
 800a970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	6979      	ldr	r1, [r7, #20]
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	613b      	str	r3, [r7, #16]
   return(result);
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e6      	bne.n	800a950 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a982:	e026      	b.n	800a9d2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d018      	beq.n	800a9c4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a996:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ac:	1c9a      	adds	r2, r3, #2
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a9c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a9ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d19f      	bne.n	800a910 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a9d0:	e7ff      	b.n	800a9d2 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a9d2:	bf00      	nop
 800a9d4:	3744      	adds	r7, #68	@ 0x44
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b088      	sub	sp, #32
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	61bb      	str	r3, [r7, #24]
 800aa06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	613b      	str	r3, [r7, #16]
   return(result);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e6      	bne.n	800a9e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f9e0 	bl	800adec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa2c:	bf00      	nop
 800aa2e:	3720      	adds	r7, #32
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e027      	b.n	800aad6 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2224      	movs	r2, #36	@ 0x24
 800aa92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0201 	bic.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e02d      	b.n	800ab56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2224      	movs	r2, #36	@ 0x24
 800ab06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 0201 	bic.w	r2, r2, #1
 800ab20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f850 	bl	800abdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e02d      	b.n	800abd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2224      	movs	r2, #36	@ 0x24
 800ab82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f022 0201 	bic.w	r2, r2, #1
 800ab9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f812 	bl	800abdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2220      	movs	r2, #32
 800abc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d108      	bne.n	800abfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abfc:	e031      	b.n	800ac62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abfe:	2310      	movs	r3, #16
 800ac00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac02:	2310      	movs	r3, #16
 800ac04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	0e5b      	lsrs	r3, r3, #25
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f003 0307 	and.w	r3, r3, #7
 800ac14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	0f5b      	lsrs	r3, r3, #29
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	7b3a      	ldrb	r2, [r7, #12]
 800ac2a:	4911      	ldr	r1, [pc, #68]	@ (800ac70 <UARTEx_SetNbDataToProcess+0x94>)
 800ac2c:	5c8a      	ldrb	r2, [r1, r2]
 800ac2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac32:	7b3a      	ldrb	r2, [r7, #12]
 800ac34:	490f      	ldr	r1, [pc, #60]	@ (800ac74 <UARTEx_SetNbDataToProcess+0x98>)
 800ac36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	7b7a      	ldrb	r2, [r7, #13]
 800ac48:	4909      	ldr	r1, [pc, #36]	@ (800ac70 <UARTEx_SetNbDataToProcess+0x94>)
 800ac4a:	5c8a      	ldrb	r2, [r1, r2]
 800ac4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac50:	7b7a      	ldrb	r2, [r7, #13]
 800ac52:	4908      	ldr	r1, [pc, #32]	@ (800ac74 <UARTEx_SetNbDataToProcess+0x98>)
 800ac54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	0800c64c 	.word	0x0800c64c
 800ac74:	0800c654 	.word	0x0800c654

0800ac78 <HAL_GPIO_EXTI_Callback>:
 *      Author: Aswin
 */
#include "gpioInt.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4603      	mov	r3, r0
 800ac80:	80fb      	strh	r3, [r7, #6]

}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <RTCInit>:
		.mins	= 0,
		.secs	= 21
};

void RTCInit(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800ac94:	2101      	movs	r1, #1
 800ac96:	4809      	ldr	r0, [pc, #36]	@ (800acbc <RTCInit+0x2c>)
 800ac98:	f7fd fcd4 	bl	8008644 <HAL_RTCEx_BKUPRead>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f242 3246 	movw	r2, #9030	@ 0x2346
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d008      	beq.n	800acb8 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800aca6:	4806      	ldr	r0, [pc, #24]	@ (800acc0 <RTCInit+0x30>)
 800aca8:	f000 f810 	bl	800accc <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800acac:	2364      	movs	r3, #100	@ 0x64
 800acae:	220d      	movs	r2, #13
 800acb0:	4904      	ldr	r1, [pc, #16]	@ (800acc4 <RTCInit+0x34>)
 800acb2:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <RTCInit+0x38>)
 800acb4:	f7fd fd2c 	bl	8008710 <HAL_UART_Transmit>
	}
}
 800acb8:	bf00      	nop
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	240006bc 	.word	0x240006bc
 800acc0:	24000064 	.word	0x24000064
 800acc4:	0800c5f4 	.word	0x0800c5f4
 800acc8:	240006e4 	.word	0x240006e4

0800accc <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800acd4:	f107 030c 	add.w	r3, r7, #12
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	609a      	str	r2, [r3, #8]
 800ace0:	60da      	str	r2, [r3, #12]
 800ace2:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	785b      	ldrb	r3, [r3, #1]
 800acee:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	789b      	ldrb	r3, [r3, #2]
 800acf4:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800acfe:	2300      	movs	r3, #0
 800ad00:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	78db      	ldrb	r3, [r3, #3]
 800ad06:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	795b      	ldrb	r3, [r3, #5]
 800ad0c:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	799b      	ldrb	r3, [r3, #6]
 800ad18:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	2200      	movs	r2, #0
 800ad20:	4619      	mov	r1, r3
 800ad22:	4810      	ldr	r0, [pc, #64]	@ (800ad64 <setRTCData+0x98>)
 800ad24:	f7fd f8a8 	bl	8007e78 <HAL_RTC_SetTime>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d115      	bne.n	800ad5a <setRTCData+0x8e>
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	2200      	movs	r2, #0
 800ad34:	4619      	mov	r1, r3
 800ad36:	480b      	ldr	r0, [pc, #44]	@ (800ad64 <setRTCData+0x98>)
 800ad38:	f7fd f998 	bl	800806c <HAL_RTC_SetDate>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10b      	bne.n	800ad5a <setRTCData+0x8e>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800ad42:	f242 3245 	movw	r2, #9029	@ 0x2345
 800ad46:	2101      	movs	r1, #1
 800ad48:	4806      	ldr	r0, [pc, #24]	@ (800ad64 <setRTCData+0x98>)
 800ad4a:	f7fd fc63 	bl	8008614 <HAL_RTCEx_BKUPWrite>
		HAL_UART_Transmit(&huart3, "RTC date Time Set\r\n", 18, 100);
 800ad4e:	2364      	movs	r3, #100	@ 0x64
 800ad50:	2212      	movs	r2, #18
 800ad52:	4905      	ldr	r1, [pc, #20]	@ (800ad68 <setRTCData+0x9c>)
 800ad54:	4805      	ldr	r0, [pc, #20]	@ (800ad6c <setRTCData+0xa0>)
 800ad56:	f7fd fcdb 	bl	8008710 <HAL_UART_Transmit>
	}
}
 800ad5a:	bf00      	nop
 800ad5c:	3720      	adds	r7, #32
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	240006bc 	.word	0x240006bc
 800ad68:	0800c608 	.word	0x0800c608
 800ad6c:	240006e4 	.word	0x240006e4

0800ad70 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800ad78:	f107 0308 	add.w	r3, r7, #8
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4811      	ldr	r0, [pc, #68]	@ (800adc8 <getRTCData+0x58>)
 800ad82:	f7fd f917 	bl	8007fb4 <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800ad86:	f107 031c 	add.w	r3, r7, #28
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	480e      	ldr	r0, [pc, #56]	@ (800adc8 <getRTCData+0x58>)
 800ad90:	f7fd f9f4 	bl	800817c <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800ad94:	7fba      	ldrb	r2, [r7, #30]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800ad9a:	7f3a      	ldrb	r2, [r7, #28]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800ada0:	7f7a      	ldrb	r2, [r7, #29]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800ada6:	7ffa      	ldrb	r2, [r7, #31]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800adac:	7a3a      	ldrb	r2, [r7, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800adb2:	7a7a      	ldrb	r2, [r7, #9]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800adb8:	7aba      	ldrb	r2, [r7, #10]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	709a      	strb	r2, [r3, #2]
}
 800adbe:	bf00      	nop
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	240006bc 	.word	0x240006bc

0800adcc <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <HAL_UART_RxCpltCallback+0x1c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	60fb      	str	r3, [r7, #12]

	fptr();
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4798      	blx	r3
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	240007f4 	.word	0x240007f4

0800adec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]

}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800ae08:	4a04      	ldr	r2, [pc, #16]	@ (800ae1c <uartInit+0x1c>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6013      	str	r3, [r2, #0]
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	240007f4 	.word	0x240007f4

0800ae20 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800ae28:	2201      	movs	r2, #1
 800ae2a:	6879      	ldr	r1, [r7, #4]
 800ae2c:	4803      	ldr	r0, [pc, #12]	@ (800ae3c <receptionItrOn+0x1c>)
 800ae2e:	f7fd fd91 	bl	8008954 <HAL_UART_Receive_DMA>
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	240006e4 	.word	0x240006e4

0800ae40 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <debugRxCallback+0x28>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2b0d      	cmp	r3, #13
 800ae4a:	d102      	bne.n	800ae52 <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800ae4c:	4b07      	ldr	r3, [pc, #28]	@ (800ae6c <debugRxCallback+0x2c>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800ae52:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <debugRxCallback+0x30>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4904      	ldr	r1, [pc, #16]	@ (800ae68 <debugRxCallback+0x28>)
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f88a 	bl	800af72 <circularBufferEnqueue>
	receptionItrOn(&data);
 800ae5e:	4802      	ldr	r0, [pc, #8]	@ (800ae68 <debugRxCallback+0x28>)
 800ae60:	f7ff ffde 	bl	800ae20 <receptionItrOn>

}
 800ae64:	bf00      	nop
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	240007f8 	.word	0x240007f8
 800ae6c:	24000800 	.word	0x24000800
 800ae70:	240007fc 	.word	0x240007fc

0800ae74 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aea4 <debugUartInit+0x30>)
 800ae7c:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <debugUartInit+0x34>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 f839 	bl	800af00 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff ffb6 	bl	800ae00 <uartInit>

	receptionItrOn(&data);
 800ae94:	4805      	ldr	r0, [pc, #20]	@ (800aeac <debugUartInit+0x38>)
 800ae96:	f7ff ffc3 	bl	800ae20 <receptionItrOn>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0800ae41 	.word	0x0800ae41
 800aea8:	240007fc 	.word	0x240007fc
 800aeac:	240007f8 	.word	0x240007f8

0800aeb0 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800aeb4:	4b03      	ldr	r3, [pc, #12]	@ (800aec4 <getCmdReceivedFlag+0x14>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	24000800 	.word	0x24000800

0800aec8 <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	4603      	mov	r3, r0
 800aed0:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800aed2:	4a04      	ldr	r2, [pc, #16]	@ (800aee4 <setCmdReceivedFlag+0x1c>)
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	7013      	strb	r3, [r2, #0]
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	24000800 	.word	0x24000800

0800aee8 <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
	return rxBuffer;
 800aeec:	4b03      	ldr	r3, [pc, #12]	@ (800aefc <getRxBuffer+0x14>)
 800aeee:	681b      	ldr	r3, [r3, #0]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	240007fc 	.word	0x240007fc

0800af00 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	807b      	strh	r3, [r7, #2]
 800af0c:	4613      	mov	r3, r2
 800af0e:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800af10:	2301      	movs	r3, #1
 800af12:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	883a      	ldrh	r2, [r7, #0]
 800af24:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	887a      	ldrh	r2, [r7, #2]
 800af2a:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800af2c:	887b      	ldrh	r3, [r7, #2]
 800af2e:	883a      	ldrh	r2, [r7, #0]
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	4618      	mov	r0, r3
 800af36:	f000 f8ad 	bl	800b094 <malloc>
 800af3a:	4603      	mov	r3, r0
 800af3c:	461a      	mov	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00b      	beq.n	800af68 <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68d8      	ldr	r0, [r3, #12]
 800af54:	887b      	ldrh	r3, [r7, #2]
 800af56:	883a      	ldrh	r2, [r7, #0]
 800af58:	fb02 f303 	mul.w	r3, r2, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	2100      	movs	r1, #0
 800af60:	f000 fb0b 	bl	800b57a <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800af7c:	2303      	movs	r3, #3
 800af7e:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	889b      	ldrh	r3, [r3, #4]
 800af8c:	89ba      	ldrh	r2, [r7, #12]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d301      	bcc.n	800af96 <circularBufferEnqueue+0x24>
    {
        next = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	885b      	ldrh	r3, [r3, #2]
 800af9a:	89ba      	ldrh	r2, [r7, #12]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d02b      	beq.n	800aff8 <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	8812      	ldrh	r2, [r2, #0]
 800afa8:	4611      	mov	r1, r2
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	88d2      	ldrh	r2, [r2, #6]
 800afae:	fb01 f202 	mul.w	r2, r1, r2
 800afb2:	1898      	adds	r0, r3, r2
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	88db      	ldrh	r3, [r3, #6]
 800afb8:	461a      	mov	r2, r3
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	f000 fbc5 	bl	800b74a <memcpy>
 800afc0:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d017      	beq.n	800aff8 <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	89ba      	ldrh	r2, [r7, #12]
 800afcc:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800afce:	2302      	movs	r3, #2
 800afd0:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	889b      	ldrh	r3, [r3, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	8852      	ldrh	r2, [r2, #2]
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	8892      	ldrh	r2, [r2, #4]
 800afe8:	fb93 f1f2 	sdiv	r1, r3, r2
 800afec:	fb01 f202 	mul.w	r2, r1, r2
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800b00c:	2305      	movs	r3, #5
 800b00e:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	885a      	ldrh	r2, [r3, #2]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d032      	beq.n	800b082 <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	885b      	ldrh	r3, [r3, #2]
 800b020:	3301      	adds	r3, #1
 800b022:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	889b      	ldrh	r3, [r3, #4]
 800b028:	89ba      	ldrh	r2, [r7, #12]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d301      	bcc.n	800b032 <circularBufferDequeue+0x30>
        {
            next = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	8852      	ldrh	r2, [r2, #2]
 800b03a:	4611      	mov	r1, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	88d2      	ldrh	r2, [r2, #6]
 800b040:	fb01 f202 	mul.w	r2, r1, r2
 800b044:	1899      	adds	r1, r3, r2
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	88db      	ldrh	r3, [r3, #6]
 800b04a:	461a      	mov	r2, r3
 800b04c:	6838      	ldr	r0, [r7, #0]
 800b04e:	f000 fb7c 	bl	800b74a <memcpy>

        cBuff->tail = next;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	89ba      	ldrh	r2, [r7, #12]
 800b056:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	889b      	ldrh	r3, [r3, #4]
 800b062:	4413      	add	r3, r2
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	8852      	ldrh	r2, [r2, #2]
 800b068:	1a9b      	subs	r3, r3, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	8892      	ldrh	r2, [r2, #4]
 800b06e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b072:	fb01 f202 	mul.w	r2, r1, r2
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800b07e:	2304      	movs	r3, #4
 800b080:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <atoi>:
 800b08c:	220a      	movs	r2, #10
 800b08e:	2100      	movs	r1, #0
 800b090:	f000 b930 	b.w	800b2f4 <strtol>

0800b094 <malloc>:
 800b094:	4b02      	ldr	r3, [pc, #8]	@ (800b0a0 <malloc+0xc>)
 800b096:	4601      	mov	r1, r0
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f000 b825 	b.w	800b0e8 <_malloc_r>
 800b09e:	bf00      	nop
 800b0a0:	24000078 	.word	0x24000078

0800b0a4 <sbrk_aligned>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b0e4 <sbrk_aligned+0x40>)
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b911      	cbnz	r1, 800b0b6 <sbrk_aligned+0x12>
 800b0b0:	f000 fafc 	bl	800b6ac <_sbrk_r>
 800b0b4:	6030      	str	r0, [r6, #0]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f000 faf7 	bl	800b6ac <_sbrk_r>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d103      	bne.n	800b0ca <sbrk_aligned+0x26>
 800b0c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ca:	1cc4      	adds	r4, r0, #3
 800b0cc:	f024 0403 	bic.w	r4, r4, #3
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d0f8      	beq.n	800b0c6 <sbrk_aligned+0x22>
 800b0d4:	1a21      	subs	r1, r4, r0
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f000 fae8 	bl	800b6ac <_sbrk_r>
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d1f2      	bne.n	800b0c6 <sbrk_aligned+0x22>
 800b0e0:	e7ef      	b.n	800b0c2 <sbrk_aligned+0x1e>
 800b0e2:	bf00      	nop
 800b0e4:	24000804 	.word	0x24000804

0800b0e8 <_malloc_r>:
 800b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	1ccd      	adds	r5, r1, #3
 800b0ee:	f025 0503 	bic.w	r5, r5, #3
 800b0f2:	3508      	adds	r5, #8
 800b0f4:	2d0c      	cmp	r5, #12
 800b0f6:	bf38      	it	cc
 800b0f8:	250c      	movcc	r5, #12
 800b0fa:	2d00      	cmp	r5, #0
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	db01      	blt.n	800b104 <_malloc_r+0x1c>
 800b100:	42a9      	cmp	r1, r5
 800b102:	d904      	bls.n	800b10e <_malloc_r+0x26>
 800b104:	230c      	movs	r3, #12
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	2000      	movs	r0, #0
 800b10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1e4 <_malloc_r+0xfc>
 800b112:	f000 f869 	bl	800b1e8 <__malloc_lock>
 800b116:	f8d8 3000 	ldr.w	r3, [r8]
 800b11a:	461c      	mov	r4, r3
 800b11c:	bb44      	cbnz	r4, 800b170 <_malloc_r+0x88>
 800b11e:	4629      	mov	r1, r5
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff ffbf 	bl	800b0a4 <sbrk_aligned>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	4604      	mov	r4, r0
 800b12a:	d158      	bne.n	800b1de <_malloc_r+0xf6>
 800b12c:	f8d8 4000 	ldr.w	r4, [r8]
 800b130:	4627      	mov	r7, r4
 800b132:	2f00      	cmp	r7, #0
 800b134:	d143      	bne.n	800b1be <_malloc_r+0xd6>
 800b136:	2c00      	cmp	r4, #0
 800b138:	d04b      	beq.n	800b1d2 <_malloc_r+0xea>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	4639      	mov	r1, r7
 800b13e:	4630      	mov	r0, r6
 800b140:	eb04 0903 	add.w	r9, r4, r3
 800b144:	f000 fab2 	bl	800b6ac <_sbrk_r>
 800b148:	4581      	cmp	r9, r0
 800b14a:	d142      	bne.n	800b1d2 <_malloc_r+0xea>
 800b14c:	6821      	ldr	r1, [r4, #0]
 800b14e:	1a6d      	subs	r5, r5, r1
 800b150:	4629      	mov	r1, r5
 800b152:	4630      	mov	r0, r6
 800b154:	f7ff ffa6 	bl	800b0a4 <sbrk_aligned>
 800b158:	3001      	adds	r0, #1
 800b15a:	d03a      	beq.n	800b1d2 <_malloc_r+0xea>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	442b      	add	r3, r5
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	f8d8 3000 	ldr.w	r3, [r8]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	bb62      	cbnz	r2, 800b1c4 <_malloc_r+0xdc>
 800b16a:	f8c8 7000 	str.w	r7, [r8]
 800b16e:	e00f      	b.n	800b190 <_malloc_r+0xa8>
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	1b52      	subs	r2, r2, r5
 800b174:	d420      	bmi.n	800b1b8 <_malloc_r+0xd0>
 800b176:	2a0b      	cmp	r2, #11
 800b178:	d917      	bls.n	800b1aa <_malloc_r+0xc2>
 800b17a:	1961      	adds	r1, r4, r5
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	6025      	str	r5, [r4, #0]
 800b180:	bf18      	it	ne
 800b182:	6059      	strne	r1, [r3, #4]
 800b184:	6863      	ldr	r3, [r4, #4]
 800b186:	bf08      	it	eq
 800b188:	f8c8 1000 	streq.w	r1, [r8]
 800b18c:	5162      	str	r2, [r4, r5]
 800b18e:	604b      	str	r3, [r1, #4]
 800b190:	4630      	mov	r0, r6
 800b192:	f000 f82f 	bl	800b1f4 <__malloc_unlock>
 800b196:	f104 000b 	add.w	r0, r4, #11
 800b19a:	1d23      	adds	r3, r4, #4
 800b19c:	f020 0007 	bic.w	r0, r0, #7
 800b1a0:	1ac2      	subs	r2, r0, r3
 800b1a2:	bf1c      	itt	ne
 800b1a4:	1a1b      	subne	r3, r3, r0
 800b1a6:	50a3      	strne	r3, [r4, r2]
 800b1a8:	e7af      	b.n	800b10a <_malloc_r+0x22>
 800b1aa:	6862      	ldr	r2, [r4, #4]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	bf0c      	ite	eq
 800b1b0:	f8c8 2000 	streq.w	r2, [r8]
 800b1b4:	605a      	strne	r2, [r3, #4]
 800b1b6:	e7eb      	b.n	800b190 <_malloc_r+0xa8>
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	6864      	ldr	r4, [r4, #4]
 800b1bc:	e7ae      	b.n	800b11c <_malloc_r+0x34>
 800b1be:	463c      	mov	r4, r7
 800b1c0:	687f      	ldr	r7, [r7, #4]
 800b1c2:	e7b6      	b.n	800b132 <_malloc_r+0x4a>
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d1fb      	bne.n	800b1c4 <_malloc_r+0xdc>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6053      	str	r3, [r2, #4]
 800b1d0:	e7de      	b.n	800b190 <_malloc_r+0xa8>
 800b1d2:	230c      	movs	r3, #12
 800b1d4:	6033      	str	r3, [r6, #0]
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 f80c 	bl	800b1f4 <__malloc_unlock>
 800b1dc:	e794      	b.n	800b108 <_malloc_r+0x20>
 800b1de:	6005      	str	r5, [r0, #0]
 800b1e0:	e7d6      	b.n	800b190 <_malloc_r+0xa8>
 800b1e2:	bf00      	nop
 800b1e4:	24000808 	.word	0x24000808

0800b1e8 <__malloc_lock>:
 800b1e8:	4801      	ldr	r0, [pc, #4]	@ (800b1f0 <__malloc_lock+0x8>)
 800b1ea:	f000 baac 	b.w	800b746 <__retarget_lock_acquire_recursive>
 800b1ee:	bf00      	nop
 800b1f0:	2400094c 	.word	0x2400094c

0800b1f4 <__malloc_unlock>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	@ (800b1fc <__malloc_unlock+0x8>)
 800b1f6:	f000 baa7 	b.w	800b748 <__retarget_lock_release_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	2400094c 	.word	0x2400094c

0800b200 <_strtol_l.constprop.0>:
 800b200:	2b24      	cmp	r3, #36	@ 0x24
 800b202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b206:	4686      	mov	lr, r0
 800b208:	4690      	mov	r8, r2
 800b20a:	d801      	bhi.n	800b210 <_strtol_l.constprop.0+0x10>
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d106      	bne.n	800b21e <_strtol_l.constprop.0+0x1e>
 800b210:	f000 fa6e 	bl	800b6f0 <__errno>
 800b214:	2316      	movs	r3, #22
 800b216:	6003      	str	r3, [r0, #0]
 800b218:	2000      	movs	r0, #0
 800b21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21e:	4834      	ldr	r0, [pc, #208]	@ (800b2f0 <_strtol_l.constprop.0+0xf0>)
 800b220:	460d      	mov	r5, r1
 800b222:	462a      	mov	r2, r5
 800b224:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b228:	5d06      	ldrb	r6, [r0, r4]
 800b22a:	f016 0608 	ands.w	r6, r6, #8
 800b22e:	d1f8      	bne.n	800b222 <_strtol_l.constprop.0+0x22>
 800b230:	2c2d      	cmp	r4, #45	@ 0x2d
 800b232:	d12d      	bne.n	800b290 <_strtol_l.constprop.0+0x90>
 800b234:	782c      	ldrb	r4, [r5, #0]
 800b236:	2601      	movs	r6, #1
 800b238:	1c95      	adds	r5, r2, #2
 800b23a:	f033 0210 	bics.w	r2, r3, #16
 800b23e:	d109      	bne.n	800b254 <_strtol_l.constprop.0+0x54>
 800b240:	2c30      	cmp	r4, #48	@ 0x30
 800b242:	d12a      	bne.n	800b29a <_strtol_l.constprop.0+0x9a>
 800b244:	782a      	ldrb	r2, [r5, #0]
 800b246:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b24a:	2a58      	cmp	r2, #88	@ 0x58
 800b24c:	d125      	bne.n	800b29a <_strtol_l.constprop.0+0x9a>
 800b24e:	786c      	ldrb	r4, [r5, #1]
 800b250:	2310      	movs	r3, #16
 800b252:	3502      	adds	r5, #2
 800b254:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b258:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b25c:	2200      	movs	r2, #0
 800b25e:	fbbc f9f3 	udiv	r9, ip, r3
 800b262:	4610      	mov	r0, r2
 800b264:	fb03 ca19 	mls	sl, r3, r9, ip
 800b268:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b26c:	2f09      	cmp	r7, #9
 800b26e:	d81b      	bhi.n	800b2a8 <_strtol_l.constprop.0+0xa8>
 800b270:	463c      	mov	r4, r7
 800b272:	42a3      	cmp	r3, r4
 800b274:	dd27      	ble.n	800b2c6 <_strtol_l.constprop.0+0xc6>
 800b276:	1c57      	adds	r7, r2, #1
 800b278:	d007      	beq.n	800b28a <_strtol_l.constprop.0+0x8a>
 800b27a:	4581      	cmp	r9, r0
 800b27c:	d320      	bcc.n	800b2c0 <_strtol_l.constprop.0+0xc0>
 800b27e:	d101      	bne.n	800b284 <_strtol_l.constprop.0+0x84>
 800b280:	45a2      	cmp	sl, r4
 800b282:	db1d      	blt.n	800b2c0 <_strtol_l.constprop.0+0xc0>
 800b284:	fb00 4003 	mla	r0, r0, r3, r4
 800b288:	2201      	movs	r2, #1
 800b28a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b28e:	e7eb      	b.n	800b268 <_strtol_l.constprop.0+0x68>
 800b290:	2c2b      	cmp	r4, #43	@ 0x2b
 800b292:	bf04      	itt	eq
 800b294:	782c      	ldrbeq	r4, [r5, #0]
 800b296:	1c95      	addeq	r5, r2, #2
 800b298:	e7cf      	b.n	800b23a <_strtol_l.constprop.0+0x3a>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1da      	bne.n	800b254 <_strtol_l.constprop.0+0x54>
 800b29e:	2c30      	cmp	r4, #48	@ 0x30
 800b2a0:	bf0c      	ite	eq
 800b2a2:	2308      	moveq	r3, #8
 800b2a4:	230a      	movne	r3, #10
 800b2a6:	e7d5      	b.n	800b254 <_strtol_l.constprop.0+0x54>
 800b2a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2ac:	2f19      	cmp	r7, #25
 800b2ae:	d801      	bhi.n	800b2b4 <_strtol_l.constprop.0+0xb4>
 800b2b0:	3c37      	subs	r4, #55	@ 0x37
 800b2b2:	e7de      	b.n	800b272 <_strtol_l.constprop.0+0x72>
 800b2b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2b8:	2f19      	cmp	r7, #25
 800b2ba:	d804      	bhi.n	800b2c6 <_strtol_l.constprop.0+0xc6>
 800b2bc:	3c57      	subs	r4, #87	@ 0x57
 800b2be:	e7d8      	b.n	800b272 <_strtol_l.constprop.0+0x72>
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c4:	e7e1      	b.n	800b28a <_strtol_l.constprop.0+0x8a>
 800b2c6:	1c53      	adds	r3, r2, #1
 800b2c8:	d108      	bne.n	800b2dc <_strtol_l.constprop.0+0xdc>
 800b2ca:	2322      	movs	r3, #34	@ 0x22
 800b2cc:	f8ce 3000 	str.w	r3, [lr]
 800b2d0:	4660      	mov	r0, ip
 800b2d2:	f1b8 0f00 	cmp.w	r8, #0
 800b2d6:	d0a0      	beq.n	800b21a <_strtol_l.constprop.0+0x1a>
 800b2d8:	1e69      	subs	r1, r5, #1
 800b2da:	e006      	b.n	800b2ea <_strtol_l.constprop.0+0xea>
 800b2dc:	b106      	cbz	r6, 800b2e0 <_strtol_l.constprop.0+0xe0>
 800b2de:	4240      	negs	r0, r0
 800b2e0:	f1b8 0f00 	cmp.w	r8, #0
 800b2e4:	d099      	beq.n	800b21a <_strtol_l.constprop.0+0x1a>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	d1f6      	bne.n	800b2d8 <_strtol_l.constprop.0+0xd8>
 800b2ea:	f8c8 1000 	str.w	r1, [r8]
 800b2ee:	e794      	b.n	800b21a <_strtol_l.constprop.0+0x1a>
 800b2f0:	0800c65d 	.word	0x0800c65d

0800b2f4 <strtol>:
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	460a      	mov	r2, r1
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4802      	ldr	r0, [pc, #8]	@ (800b304 <strtol+0x10>)
 800b2fc:	6800      	ldr	r0, [r0, #0]
 800b2fe:	f7ff bf7f 	b.w	800b200 <_strtol_l.constprop.0>
 800b302:	bf00      	nop
 800b304:	24000078 	.word	0x24000078

0800b308 <std>:
 800b308:	2300      	movs	r3, #0
 800b30a:	b510      	push	{r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	e9c0 3300 	strd	r3, r3, [r0]
 800b312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b316:	6083      	str	r3, [r0, #8]
 800b318:	8181      	strh	r1, [r0, #12]
 800b31a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b31c:	81c2      	strh	r2, [r0, #14]
 800b31e:	6183      	str	r3, [r0, #24]
 800b320:	4619      	mov	r1, r3
 800b322:	2208      	movs	r2, #8
 800b324:	305c      	adds	r0, #92	@ 0x5c
 800b326:	f000 f928 	bl	800b57a <memset>
 800b32a:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <std+0x58>)
 800b32c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b32e:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <std+0x5c>)
 800b330:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b332:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <std+0x60>)
 800b334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <std+0x64>)
 800b338:	6323      	str	r3, [r4, #48]	@ 0x30
 800b33a:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <std+0x68>)
 800b33c:	6224      	str	r4, [r4, #32]
 800b33e:	429c      	cmp	r4, r3
 800b340:	d006      	beq.n	800b350 <std+0x48>
 800b342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b346:	4294      	cmp	r4, r2
 800b348:	d002      	beq.n	800b350 <std+0x48>
 800b34a:	33d0      	adds	r3, #208	@ 0xd0
 800b34c:	429c      	cmp	r4, r3
 800b34e:	d105      	bne.n	800b35c <std+0x54>
 800b350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b358:	f000 b9f4 	b.w	800b744 <__retarget_lock_init_recursive>
 800b35c:	bd10      	pop	{r4, pc}
 800b35e:	bf00      	nop
 800b360:	0800b4f5 	.word	0x0800b4f5
 800b364:	0800b517 	.word	0x0800b517
 800b368:	0800b54f 	.word	0x0800b54f
 800b36c:	0800b573 	.word	0x0800b573
 800b370:	2400080c 	.word	0x2400080c

0800b374 <stdio_exit_handler>:
 800b374:	4a02      	ldr	r2, [pc, #8]	@ (800b380 <stdio_exit_handler+0xc>)
 800b376:	4903      	ldr	r1, [pc, #12]	@ (800b384 <stdio_exit_handler+0x10>)
 800b378:	4803      	ldr	r0, [pc, #12]	@ (800b388 <stdio_exit_handler+0x14>)
 800b37a:	f000 b869 	b.w	800b450 <_fwalk_sglue>
 800b37e:	bf00      	nop
 800b380:	2400006c 	.word	0x2400006c
 800b384:	0800bf0d 	.word	0x0800bf0d
 800b388:	2400007c 	.word	0x2400007c

0800b38c <cleanup_stdio>:
 800b38c:	6841      	ldr	r1, [r0, #4]
 800b38e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c0 <cleanup_stdio+0x34>)
 800b390:	4299      	cmp	r1, r3
 800b392:	b510      	push	{r4, lr}
 800b394:	4604      	mov	r4, r0
 800b396:	d001      	beq.n	800b39c <cleanup_stdio+0x10>
 800b398:	f000 fdb8 	bl	800bf0c <_fflush_r>
 800b39c:	68a1      	ldr	r1, [r4, #8]
 800b39e:	4b09      	ldr	r3, [pc, #36]	@ (800b3c4 <cleanup_stdio+0x38>)
 800b3a0:	4299      	cmp	r1, r3
 800b3a2:	d002      	beq.n	800b3aa <cleanup_stdio+0x1e>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fdb1 	bl	800bf0c <_fflush_r>
 800b3aa:	68e1      	ldr	r1, [r4, #12]
 800b3ac:	4b06      	ldr	r3, [pc, #24]	@ (800b3c8 <cleanup_stdio+0x3c>)
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	d004      	beq.n	800b3bc <cleanup_stdio+0x30>
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b8:	f000 bda8 	b.w	800bf0c <_fflush_r>
 800b3bc:	bd10      	pop	{r4, pc}
 800b3be:	bf00      	nop
 800b3c0:	2400080c 	.word	0x2400080c
 800b3c4:	24000874 	.word	0x24000874
 800b3c8:	240008dc 	.word	0x240008dc

0800b3cc <global_stdio_init.part.0>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <global_stdio_init.part.0+0x30>)
 800b3d0:	4c0b      	ldr	r4, [pc, #44]	@ (800b400 <global_stdio_init.part.0+0x34>)
 800b3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b404 <global_stdio_init.part.0+0x38>)
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2104      	movs	r1, #4
 800b3dc:	f7ff ff94 	bl	800b308 <std>
 800b3e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	2109      	movs	r1, #9
 800b3e8:	f7ff ff8e 	bl	800b308 <std>
 800b3ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f6:	2112      	movs	r1, #18
 800b3f8:	f7ff bf86 	b.w	800b308 <std>
 800b3fc:	24000944 	.word	0x24000944
 800b400:	2400080c 	.word	0x2400080c
 800b404:	0800b375 	.word	0x0800b375

0800b408 <__sfp_lock_acquire>:
 800b408:	4801      	ldr	r0, [pc, #4]	@ (800b410 <__sfp_lock_acquire+0x8>)
 800b40a:	f000 b99c 	b.w	800b746 <__retarget_lock_acquire_recursive>
 800b40e:	bf00      	nop
 800b410:	2400094d 	.word	0x2400094d

0800b414 <__sfp_lock_release>:
 800b414:	4801      	ldr	r0, [pc, #4]	@ (800b41c <__sfp_lock_release+0x8>)
 800b416:	f000 b997 	b.w	800b748 <__retarget_lock_release_recursive>
 800b41a:	bf00      	nop
 800b41c:	2400094d 	.word	0x2400094d

0800b420 <__sinit>:
 800b420:	b510      	push	{r4, lr}
 800b422:	4604      	mov	r4, r0
 800b424:	f7ff fff0 	bl	800b408 <__sfp_lock_acquire>
 800b428:	6a23      	ldr	r3, [r4, #32]
 800b42a:	b11b      	cbz	r3, 800b434 <__sinit+0x14>
 800b42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b430:	f7ff bff0 	b.w	800b414 <__sfp_lock_release>
 800b434:	4b04      	ldr	r3, [pc, #16]	@ (800b448 <__sinit+0x28>)
 800b436:	6223      	str	r3, [r4, #32]
 800b438:	4b04      	ldr	r3, [pc, #16]	@ (800b44c <__sinit+0x2c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1f5      	bne.n	800b42c <__sinit+0xc>
 800b440:	f7ff ffc4 	bl	800b3cc <global_stdio_init.part.0>
 800b444:	e7f2      	b.n	800b42c <__sinit+0xc>
 800b446:	bf00      	nop
 800b448:	0800b38d 	.word	0x0800b38d
 800b44c:	24000944 	.word	0x24000944

0800b450 <_fwalk_sglue>:
 800b450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b454:	4607      	mov	r7, r0
 800b456:	4688      	mov	r8, r1
 800b458:	4614      	mov	r4, r2
 800b45a:	2600      	movs	r6, #0
 800b45c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b460:	f1b9 0901 	subs.w	r9, r9, #1
 800b464:	d505      	bpl.n	800b472 <_fwalk_sglue+0x22>
 800b466:	6824      	ldr	r4, [r4, #0]
 800b468:	2c00      	cmp	r4, #0
 800b46a:	d1f7      	bne.n	800b45c <_fwalk_sglue+0xc>
 800b46c:	4630      	mov	r0, r6
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	89ab      	ldrh	r3, [r5, #12]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d907      	bls.n	800b488 <_fwalk_sglue+0x38>
 800b478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b47c:	3301      	adds	r3, #1
 800b47e:	d003      	beq.n	800b488 <_fwalk_sglue+0x38>
 800b480:	4629      	mov	r1, r5
 800b482:	4638      	mov	r0, r7
 800b484:	47c0      	blx	r8
 800b486:	4306      	orrs	r6, r0
 800b488:	3568      	adds	r5, #104	@ 0x68
 800b48a:	e7e9      	b.n	800b460 <_fwalk_sglue+0x10>

0800b48c <sniprintf>:
 800b48c:	b40c      	push	{r2, r3}
 800b48e:	b530      	push	{r4, r5, lr}
 800b490:	4b17      	ldr	r3, [pc, #92]	@ (800b4f0 <sniprintf+0x64>)
 800b492:	1e0c      	subs	r4, r1, #0
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	b09d      	sub	sp, #116	@ 0x74
 800b498:	da08      	bge.n	800b4ac <sniprintf+0x20>
 800b49a:	238b      	movs	r3, #139	@ 0x8b
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	b01d      	add	sp, #116	@ 0x74
 800b4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4a8:	b002      	add	sp, #8
 800b4aa:	4770      	bx	lr
 800b4ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b4b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4b4:	bf14      	ite	ne
 800b4b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4ba:	4623      	moveq	r3, r4
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4c4:	9002      	str	r0, [sp, #8]
 800b4c6:	9006      	str	r0, [sp, #24]
 800b4c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b4ce:	ab21      	add	r3, sp, #132	@ 0x84
 800b4d0:	a902      	add	r1, sp, #8
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f000 fa0b 	bl	800b8f0 <_svfiprintf_r>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	bfbc      	itt	lt
 800b4de:	238b      	movlt	r3, #139	@ 0x8b
 800b4e0:	602b      	strlt	r3, [r5, #0]
 800b4e2:	2c00      	cmp	r4, #0
 800b4e4:	d0dd      	beq.n	800b4a2 <sniprintf+0x16>
 800b4e6:	9b02      	ldr	r3, [sp, #8]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	701a      	strb	r2, [r3, #0]
 800b4ec:	e7d9      	b.n	800b4a2 <sniprintf+0x16>
 800b4ee:	bf00      	nop
 800b4f0:	24000078 	.word	0x24000078

0800b4f4 <__sread>:
 800b4f4:	b510      	push	{r4, lr}
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fc:	f000 f8c4 	bl	800b688 <_read_r>
 800b500:	2800      	cmp	r0, #0
 800b502:	bfab      	itete	ge
 800b504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b506:	89a3      	ldrhlt	r3, [r4, #12]
 800b508:	181b      	addge	r3, r3, r0
 800b50a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b50e:	bfac      	ite	ge
 800b510:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b512:	81a3      	strhlt	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__swrite>:
 800b516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51a:	461f      	mov	r7, r3
 800b51c:	898b      	ldrh	r3, [r1, #12]
 800b51e:	05db      	lsls	r3, r3, #23
 800b520:	4605      	mov	r5, r0
 800b522:	460c      	mov	r4, r1
 800b524:	4616      	mov	r6, r2
 800b526:	d505      	bpl.n	800b534 <__swrite+0x1e>
 800b528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52c:	2302      	movs	r3, #2
 800b52e:	2200      	movs	r2, #0
 800b530:	f000 f898 	bl	800b664 <_lseek_r>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b53a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	4632      	mov	r2, r6
 800b542:	463b      	mov	r3, r7
 800b544:	4628      	mov	r0, r5
 800b546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b54a:	f000 b8bf 	b.w	800b6cc <_write_r>

0800b54e <__sseek>:
 800b54e:	b510      	push	{r4, lr}
 800b550:	460c      	mov	r4, r1
 800b552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b556:	f000 f885 	bl	800b664 <_lseek_r>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	bf15      	itete	ne
 800b560:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b56a:	81a3      	strheq	r3, [r4, #12]
 800b56c:	bf18      	it	ne
 800b56e:	81a3      	strhne	r3, [r4, #12]
 800b570:	bd10      	pop	{r4, pc}

0800b572 <__sclose>:
 800b572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b576:	f000 b865 	b.w	800b644 <_close_r>

0800b57a <memset>:
 800b57a:	4402      	add	r2, r0
 800b57c:	4603      	mov	r3, r0
 800b57e:	4293      	cmp	r3, r2
 800b580:	d100      	bne.n	800b584 <memset+0xa>
 800b582:	4770      	bx	lr
 800b584:	f803 1b01 	strb.w	r1, [r3], #1
 800b588:	e7f9      	b.n	800b57e <memset+0x4>
	...

0800b58c <strtok>:
 800b58c:	4b16      	ldr	r3, [pc, #88]	@ (800b5e8 <strtok+0x5c>)
 800b58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b592:	681f      	ldr	r7, [r3, #0]
 800b594:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b596:	4605      	mov	r5, r0
 800b598:	460e      	mov	r6, r1
 800b59a:	b9ec      	cbnz	r4, 800b5d8 <strtok+0x4c>
 800b59c:	2050      	movs	r0, #80	@ 0x50
 800b59e:	f7ff fd79 	bl	800b094 <malloc>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b5a6:	b920      	cbnz	r0, 800b5b2 <strtok+0x26>
 800b5a8:	4b10      	ldr	r3, [pc, #64]	@ (800b5ec <strtok+0x60>)
 800b5aa:	4811      	ldr	r0, [pc, #68]	@ (800b5f0 <strtok+0x64>)
 800b5ac:	215b      	movs	r1, #91	@ 0x5b
 800b5ae:	f000 f8db 	bl	800b768 <__assert_func>
 800b5b2:	e9c0 4400 	strd	r4, r4, [r0]
 800b5b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b5ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b5be:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b5c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b5c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b5ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b5ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b5d2:	6184      	str	r4, [r0, #24]
 800b5d4:	7704      	strb	r4, [r0, #28]
 800b5d6:	6244      	str	r4, [r0, #36]	@ 0x24
 800b5d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e4:	f000 b806 	b.w	800b5f4 <__strtok_r>
 800b5e8:	24000078 	.word	0x24000078
 800b5ec:	0800c75d 	.word	0x0800c75d
 800b5f0:	0800c774 	.word	0x0800c774

0800b5f4 <__strtok_r>:
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	b908      	cbnz	r0, 800b5fe <__strtok_r+0xa>
 800b5fa:	6814      	ldr	r4, [r2, #0]
 800b5fc:	b144      	cbz	r4, 800b610 <__strtok_r+0x1c>
 800b5fe:	4620      	mov	r0, r4
 800b600:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b604:	460f      	mov	r7, r1
 800b606:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b60a:	b91e      	cbnz	r6, 800b614 <__strtok_r+0x20>
 800b60c:	b965      	cbnz	r5, 800b628 <__strtok_r+0x34>
 800b60e:	6015      	str	r5, [r2, #0]
 800b610:	2000      	movs	r0, #0
 800b612:	e005      	b.n	800b620 <__strtok_r+0x2c>
 800b614:	42b5      	cmp	r5, r6
 800b616:	d1f6      	bne.n	800b606 <__strtok_r+0x12>
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1f0      	bne.n	800b5fe <__strtok_r+0xa>
 800b61c:	6014      	str	r4, [r2, #0]
 800b61e:	7003      	strb	r3, [r0, #0]
 800b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b622:	461c      	mov	r4, r3
 800b624:	e00c      	b.n	800b640 <__strtok_r+0x4c>
 800b626:	b915      	cbnz	r5, 800b62e <__strtok_r+0x3a>
 800b628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b62c:	460e      	mov	r6, r1
 800b62e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b632:	42ab      	cmp	r3, r5
 800b634:	d1f7      	bne.n	800b626 <__strtok_r+0x32>
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0f3      	beq.n	800b622 <__strtok_r+0x2e>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b640:	6014      	str	r4, [r2, #0]
 800b642:	e7ed      	b.n	800b620 <__strtok_r+0x2c>

0800b644 <_close_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d06      	ldr	r5, [pc, #24]	@ (800b660 <_close_r+0x1c>)
 800b648:	2300      	movs	r3, #0
 800b64a:	4604      	mov	r4, r0
 800b64c:	4608      	mov	r0, r1
 800b64e:	602b      	str	r3, [r5, #0]
 800b650:	f7f5 fe1c 	bl	800128c <_close>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	d102      	bne.n	800b65e <_close_r+0x1a>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	b103      	cbz	r3, 800b65e <_close_r+0x1a>
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	24000948 	.word	0x24000948

0800b664 <_lseek_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d07      	ldr	r5, [pc, #28]	@ (800b684 <_lseek_r+0x20>)
 800b668:	4604      	mov	r4, r0
 800b66a:	4608      	mov	r0, r1
 800b66c:	4611      	mov	r1, r2
 800b66e:	2200      	movs	r2, #0
 800b670:	602a      	str	r2, [r5, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	f7f5 fe31 	bl	80012da <_lseek>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d102      	bne.n	800b682 <_lseek_r+0x1e>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	b103      	cbz	r3, 800b682 <_lseek_r+0x1e>
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	24000948 	.word	0x24000948

0800b688 <_read_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	4d07      	ldr	r5, [pc, #28]	@ (800b6a8 <_read_r+0x20>)
 800b68c:	4604      	mov	r4, r0
 800b68e:	4608      	mov	r0, r1
 800b690:	4611      	mov	r1, r2
 800b692:	2200      	movs	r2, #0
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	f7f5 fdbf 	bl	800121a <_read>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_read_r+0x1e>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_read_r+0x1e>
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	24000948 	.word	0x24000948

0800b6ac <_sbrk_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d06      	ldr	r5, [pc, #24]	@ (800b6c8 <_sbrk_r+0x1c>)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	f7f5 fe1c 	bl	80012f4 <_sbrk>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_sbrk_r+0x1a>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_sbrk_r+0x1a>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	24000948 	.word	0x24000948

0800b6cc <_write_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d07      	ldr	r5, [pc, #28]	@ (800b6ec <_write_r+0x20>)
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	4608      	mov	r0, r1
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	602a      	str	r2, [r5, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f7f5 fdba 	bl	8001254 <_write>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_write_r+0x1e>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_write_r+0x1e>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	24000948 	.word	0x24000948

0800b6f0 <__errno>:
 800b6f0:	4b01      	ldr	r3, [pc, #4]	@ (800b6f8 <__errno+0x8>)
 800b6f2:	6818      	ldr	r0, [r3, #0]
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	24000078 	.word	0x24000078

0800b6fc <__libc_init_array>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b734 <__libc_init_array+0x38>)
 800b700:	4c0d      	ldr	r4, [pc, #52]	@ (800b738 <__libc_init_array+0x3c>)
 800b702:	1b64      	subs	r4, r4, r5
 800b704:	10a4      	asrs	r4, r4, #2
 800b706:	2600      	movs	r6, #0
 800b708:	42a6      	cmp	r6, r4
 800b70a:	d109      	bne.n	800b720 <__libc_init_array+0x24>
 800b70c:	4d0b      	ldr	r5, [pc, #44]	@ (800b73c <__libc_init_array+0x40>)
 800b70e:	4c0c      	ldr	r4, [pc, #48]	@ (800b740 <__libc_init_array+0x44>)
 800b710:	f000 ff2a 	bl	800c568 <_init>
 800b714:	1b64      	subs	r4, r4, r5
 800b716:	10a4      	asrs	r4, r4, #2
 800b718:	2600      	movs	r6, #0
 800b71a:	42a6      	cmp	r6, r4
 800b71c:	d105      	bne.n	800b72a <__libc_init_array+0x2e>
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	f855 3b04 	ldr.w	r3, [r5], #4
 800b724:	4798      	blx	r3
 800b726:	3601      	adds	r6, #1
 800b728:	e7ee      	b.n	800b708 <__libc_init_array+0xc>
 800b72a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b72e:	4798      	blx	r3
 800b730:	3601      	adds	r6, #1
 800b732:	e7f2      	b.n	800b71a <__libc_init_array+0x1e>
 800b734:	0800c848 	.word	0x0800c848
 800b738:	0800c848 	.word	0x0800c848
 800b73c:	0800c848 	.word	0x0800c848
 800b740:	0800c84c 	.word	0x0800c84c

0800b744 <__retarget_lock_init_recursive>:
 800b744:	4770      	bx	lr

0800b746 <__retarget_lock_acquire_recursive>:
 800b746:	4770      	bx	lr

0800b748 <__retarget_lock_release_recursive>:
 800b748:	4770      	bx	lr

0800b74a <memcpy>:
 800b74a:	440a      	add	r2, r1
 800b74c:	4291      	cmp	r1, r2
 800b74e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b752:	d100      	bne.n	800b756 <memcpy+0xc>
 800b754:	4770      	bx	lr
 800b756:	b510      	push	{r4, lr}
 800b758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b760:	4291      	cmp	r1, r2
 800b762:	d1f9      	bne.n	800b758 <memcpy+0xe>
 800b764:	bd10      	pop	{r4, pc}
	...

0800b768 <__assert_func>:
 800b768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b76a:	4614      	mov	r4, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b09      	ldr	r3, [pc, #36]	@ (800b794 <__assert_func+0x2c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4605      	mov	r5, r0
 800b774:	68d8      	ldr	r0, [r3, #12]
 800b776:	b954      	cbnz	r4, 800b78e <__assert_func+0x26>
 800b778:	4b07      	ldr	r3, [pc, #28]	@ (800b798 <__assert_func+0x30>)
 800b77a:	461c      	mov	r4, r3
 800b77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b780:	9100      	str	r1, [sp, #0]
 800b782:	462b      	mov	r3, r5
 800b784:	4905      	ldr	r1, [pc, #20]	@ (800b79c <__assert_func+0x34>)
 800b786:	f000 fbe9 	bl	800bf5c <fiprintf>
 800b78a:	f000 fc13 	bl	800bfb4 <abort>
 800b78e:	4b04      	ldr	r3, [pc, #16]	@ (800b7a0 <__assert_func+0x38>)
 800b790:	e7f4      	b.n	800b77c <__assert_func+0x14>
 800b792:	bf00      	nop
 800b794:	24000078 	.word	0x24000078
 800b798:	0800c809 	.word	0x0800c809
 800b79c:	0800c7db 	.word	0x0800c7db
 800b7a0:	0800c7ce 	.word	0x0800c7ce

0800b7a4 <_free_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	d041      	beq.n	800b830 <_free_r+0x8c>
 800b7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b0:	1f0c      	subs	r4, r1, #4
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bfb8      	it	lt
 800b7b6:	18e4      	addlt	r4, r4, r3
 800b7b8:	f7ff fd16 	bl	800b1e8 <__malloc_lock>
 800b7bc:	4a1d      	ldr	r2, [pc, #116]	@ (800b834 <_free_r+0x90>)
 800b7be:	6813      	ldr	r3, [r2, #0]
 800b7c0:	b933      	cbnz	r3, 800b7d0 <_free_r+0x2c>
 800b7c2:	6063      	str	r3, [r4, #4]
 800b7c4:	6014      	str	r4, [r2, #0]
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7cc:	f7ff bd12 	b.w	800b1f4 <__malloc_unlock>
 800b7d0:	42a3      	cmp	r3, r4
 800b7d2:	d908      	bls.n	800b7e6 <_free_r+0x42>
 800b7d4:	6820      	ldr	r0, [r4, #0]
 800b7d6:	1821      	adds	r1, r4, r0
 800b7d8:	428b      	cmp	r3, r1
 800b7da:	bf01      	itttt	eq
 800b7dc:	6819      	ldreq	r1, [r3, #0]
 800b7de:	685b      	ldreq	r3, [r3, #4]
 800b7e0:	1809      	addeq	r1, r1, r0
 800b7e2:	6021      	streq	r1, [r4, #0]
 800b7e4:	e7ed      	b.n	800b7c2 <_free_r+0x1e>
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	b10b      	cbz	r3, 800b7f0 <_free_r+0x4c>
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	d9fa      	bls.n	800b7e6 <_free_r+0x42>
 800b7f0:	6811      	ldr	r1, [r2, #0]
 800b7f2:	1850      	adds	r0, r2, r1
 800b7f4:	42a0      	cmp	r0, r4
 800b7f6:	d10b      	bne.n	800b810 <_free_r+0x6c>
 800b7f8:	6820      	ldr	r0, [r4, #0]
 800b7fa:	4401      	add	r1, r0
 800b7fc:	1850      	adds	r0, r2, r1
 800b7fe:	4283      	cmp	r3, r0
 800b800:	6011      	str	r1, [r2, #0]
 800b802:	d1e0      	bne.n	800b7c6 <_free_r+0x22>
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	6053      	str	r3, [r2, #4]
 800b80a:	4408      	add	r0, r1
 800b80c:	6010      	str	r0, [r2, #0]
 800b80e:	e7da      	b.n	800b7c6 <_free_r+0x22>
 800b810:	d902      	bls.n	800b818 <_free_r+0x74>
 800b812:	230c      	movs	r3, #12
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	e7d6      	b.n	800b7c6 <_free_r+0x22>
 800b818:	6820      	ldr	r0, [r4, #0]
 800b81a:	1821      	adds	r1, r4, r0
 800b81c:	428b      	cmp	r3, r1
 800b81e:	bf04      	itt	eq
 800b820:	6819      	ldreq	r1, [r3, #0]
 800b822:	685b      	ldreq	r3, [r3, #4]
 800b824:	6063      	str	r3, [r4, #4]
 800b826:	bf04      	itt	eq
 800b828:	1809      	addeq	r1, r1, r0
 800b82a:	6021      	streq	r1, [r4, #0]
 800b82c:	6054      	str	r4, [r2, #4]
 800b82e:	e7ca      	b.n	800b7c6 <_free_r+0x22>
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	24000808 	.word	0x24000808

0800b838 <__ssputs_r>:
 800b838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b83c:	688e      	ldr	r6, [r1, #8]
 800b83e:	461f      	mov	r7, r3
 800b840:	42be      	cmp	r6, r7
 800b842:	680b      	ldr	r3, [r1, #0]
 800b844:	4682      	mov	sl, r0
 800b846:	460c      	mov	r4, r1
 800b848:	4690      	mov	r8, r2
 800b84a:	d82d      	bhi.n	800b8a8 <__ssputs_r+0x70>
 800b84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b854:	d026      	beq.n	800b8a4 <__ssputs_r+0x6c>
 800b856:	6965      	ldr	r5, [r4, #20]
 800b858:	6909      	ldr	r1, [r1, #16]
 800b85a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b85e:	eba3 0901 	sub.w	r9, r3, r1
 800b862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b866:	1c7b      	adds	r3, r7, #1
 800b868:	444b      	add	r3, r9
 800b86a:	106d      	asrs	r5, r5, #1
 800b86c:	429d      	cmp	r5, r3
 800b86e:	bf38      	it	cc
 800b870:	461d      	movcc	r5, r3
 800b872:	0553      	lsls	r3, r2, #21
 800b874:	d527      	bpl.n	800b8c6 <__ssputs_r+0x8e>
 800b876:	4629      	mov	r1, r5
 800b878:	f7ff fc36 	bl	800b0e8 <_malloc_r>
 800b87c:	4606      	mov	r6, r0
 800b87e:	b360      	cbz	r0, 800b8da <__ssputs_r+0xa2>
 800b880:	6921      	ldr	r1, [r4, #16]
 800b882:	464a      	mov	r2, r9
 800b884:	f7ff ff61 	bl	800b74a <memcpy>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b892:	81a3      	strh	r3, [r4, #12]
 800b894:	6126      	str	r6, [r4, #16]
 800b896:	6165      	str	r5, [r4, #20]
 800b898:	444e      	add	r6, r9
 800b89a:	eba5 0509 	sub.w	r5, r5, r9
 800b89e:	6026      	str	r6, [r4, #0]
 800b8a0:	60a5      	str	r5, [r4, #8]
 800b8a2:	463e      	mov	r6, r7
 800b8a4:	42be      	cmp	r6, r7
 800b8a6:	d900      	bls.n	800b8aa <__ssputs_r+0x72>
 800b8a8:	463e      	mov	r6, r7
 800b8aa:	6820      	ldr	r0, [r4, #0]
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	4641      	mov	r1, r8
 800b8b0:	f000 fb66 	bl	800bf80 <memmove>
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	1b9b      	subs	r3, r3, r6
 800b8b8:	60a3      	str	r3, [r4, #8]
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	4433      	add	r3, r6
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c6:	462a      	mov	r2, r5
 800b8c8:	f000 fb7b 	bl	800bfc2 <_realloc_r>
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d1e0      	bne.n	800b894 <__ssputs_r+0x5c>
 800b8d2:	6921      	ldr	r1, [r4, #16]
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f7ff ff65 	bl	800b7a4 <_free_r>
 800b8da:	230c      	movs	r3, #12
 800b8dc:	f8ca 3000 	str.w	r3, [sl]
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	e7e9      	b.n	800b8c2 <__ssputs_r+0x8a>
	...

0800b8f0 <_svfiprintf_r>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	4698      	mov	r8, r3
 800b8f6:	898b      	ldrh	r3, [r1, #12]
 800b8f8:	061b      	lsls	r3, r3, #24
 800b8fa:	b09d      	sub	sp, #116	@ 0x74
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	460d      	mov	r5, r1
 800b900:	4614      	mov	r4, r2
 800b902:	d510      	bpl.n	800b926 <_svfiprintf_r+0x36>
 800b904:	690b      	ldr	r3, [r1, #16]
 800b906:	b973      	cbnz	r3, 800b926 <_svfiprintf_r+0x36>
 800b908:	2140      	movs	r1, #64	@ 0x40
 800b90a:	f7ff fbed 	bl	800b0e8 <_malloc_r>
 800b90e:	6028      	str	r0, [r5, #0]
 800b910:	6128      	str	r0, [r5, #16]
 800b912:	b930      	cbnz	r0, 800b922 <_svfiprintf_r+0x32>
 800b914:	230c      	movs	r3, #12
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	b01d      	add	sp, #116	@ 0x74
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	2340      	movs	r3, #64	@ 0x40
 800b924:	616b      	str	r3, [r5, #20]
 800b926:	2300      	movs	r3, #0
 800b928:	9309      	str	r3, [sp, #36]	@ 0x24
 800b92a:	2320      	movs	r3, #32
 800b92c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b930:	f8cd 800c 	str.w	r8, [sp, #12]
 800b934:	2330      	movs	r3, #48	@ 0x30
 800b936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bad4 <_svfiprintf_r+0x1e4>
 800b93a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b93e:	f04f 0901 	mov.w	r9, #1
 800b942:	4623      	mov	r3, r4
 800b944:	469a      	mov	sl, r3
 800b946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b94a:	b10a      	cbz	r2, 800b950 <_svfiprintf_r+0x60>
 800b94c:	2a25      	cmp	r2, #37	@ 0x25
 800b94e:	d1f9      	bne.n	800b944 <_svfiprintf_r+0x54>
 800b950:	ebba 0b04 	subs.w	fp, sl, r4
 800b954:	d00b      	beq.n	800b96e <_svfiprintf_r+0x7e>
 800b956:	465b      	mov	r3, fp
 800b958:	4622      	mov	r2, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	4638      	mov	r0, r7
 800b95e:	f7ff ff6b 	bl	800b838 <__ssputs_r>
 800b962:	3001      	adds	r0, #1
 800b964:	f000 80a7 	beq.w	800bab6 <_svfiprintf_r+0x1c6>
 800b968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b96a:	445a      	add	r2, fp
 800b96c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b96e:	f89a 3000 	ldrb.w	r3, [sl]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 809f 	beq.w	800bab6 <_svfiprintf_r+0x1c6>
 800b978:	2300      	movs	r3, #0
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295
 800b97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b982:	f10a 0a01 	add.w	sl, sl, #1
 800b986:	9304      	str	r3, [sp, #16]
 800b988:	9307      	str	r3, [sp, #28]
 800b98a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b98e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b990:	4654      	mov	r4, sl
 800b992:	2205      	movs	r2, #5
 800b994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b998:	484e      	ldr	r0, [pc, #312]	@ (800bad4 <_svfiprintf_r+0x1e4>)
 800b99a:	f7f4 fcc9 	bl	8000330 <memchr>
 800b99e:	9a04      	ldr	r2, [sp, #16]
 800b9a0:	b9d8      	cbnz	r0, 800b9da <_svfiprintf_r+0xea>
 800b9a2:	06d0      	lsls	r0, r2, #27
 800b9a4:	bf44      	itt	mi
 800b9a6:	2320      	movmi	r3, #32
 800b9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ac:	0711      	lsls	r1, r2, #28
 800b9ae:	bf44      	itt	mi
 800b9b0:	232b      	movmi	r3, #43	@ 0x2b
 800b9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9bc:	d015      	beq.n	800b9ea <_svfiprintf_r+0xfa>
 800b9be:	9a07      	ldr	r2, [sp, #28]
 800b9c0:	4654      	mov	r4, sl
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f04f 0c0a 	mov.w	ip, #10
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ce:	3b30      	subs	r3, #48	@ 0x30
 800b9d0:	2b09      	cmp	r3, #9
 800b9d2:	d94b      	bls.n	800ba6c <_svfiprintf_r+0x17c>
 800b9d4:	b1b0      	cbz	r0, 800ba04 <_svfiprintf_r+0x114>
 800b9d6:	9207      	str	r2, [sp, #28]
 800b9d8:	e014      	b.n	800ba04 <_svfiprintf_r+0x114>
 800b9da:	eba0 0308 	sub.w	r3, r0, r8
 800b9de:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	9304      	str	r3, [sp, #16]
 800b9e6:	46a2      	mov	sl, r4
 800b9e8:	e7d2      	b.n	800b990 <_svfiprintf_r+0xa0>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	1d19      	adds	r1, r3, #4
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	9103      	str	r1, [sp, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfbb      	ittet	lt
 800b9f6:	425b      	neglt	r3, r3
 800b9f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b9fc:	9307      	strge	r3, [sp, #28]
 800b9fe:	9307      	strlt	r3, [sp, #28]
 800ba00:	bfb8      	it	lt
 800ba02:	9204      	strlt	r2, [sp, #16]
 800ba04:	7823      	ldrb	r3, [r4, #0]
 800ba06:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba08:	d10a      	bne.n	800ba20 <_svfiprintf_r+0x130>
 800ba0a:	7863      	ldrb	r3, [r4, #1]
 800ba0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba0e:	d132      	bne.n	800ba76 <_svfiprintf_r+0x186>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	9203      	str	r2, [sp, #12]
 800ba18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba1c:	3402      	adds	r4, #2
 800ba1e:	9305      	str	r3, [sp, #20]
 800ba20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bae4 <_svfiprintf_r+0x1f4>
 800ba24:	7821      	ldrb	r1, [r4, #0]
 800ba26:	2203      	movs	r2, #3
 800ba28:	4650      	mov	r0, sl
 800ba2a:	f7f4 fc81 	bl	8000330 <memchr>
 800ba2e:	b138      	cbz	r0, 800ba40 <_svfiprintf_r+0x150>
 800ba30:	9b04      	ldr	r3, [sp, #16]
 800ba32:	eba0 000a 	sub.w	r0, r0, sl
 800ba36:	2240      	movs	r2, #64	@ 0x40
 800ba38:	4082      	lsls	r2, r0
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	3401      	adds	r4, #1
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba44:	4824      	ldr	r0, [pc, #144]	@ (800bad8 <_svfiprintf_r+0x1e8>)
 800ba46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba4a:	2206      	movs	r2, #6
 800ba4c:	f7f4 fc70 	bl	8000330 <memchr>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d036      	beq.n	800bac2 <_svfiprintf_r+0x1d2>
 800ba54:	4b21      	ldr	r3, [pc, #132]	@ (800badc <_svfiprintf_r+0x1ec>)
 800ba56:	bb1b      	cbnz	r3, 800baa0 <_svfiprintf_r+0x1b0>
 800ba58:	9b03      	ldr	r3, [sp, #12]
 800ba5a:	3307      	adds	r3, #7
 800ba5c:	f023 0307 	bic.w	r3, r3, #7
 800ba60:	3308      	adds	r3, #8
 800ba62:	9303      	str	r3, [sp, #12]
 800ba64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba66:	4433      	add	r3, r6
 800ba68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6a:	e76a      	b.n	800b942 <_svfiprintf_r+0x52>
 800ba6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba70:	460c      	mov	r4, r1
 800ba72:	2001      	movs	r0, #1
 800ba74:	e7a8      	b.n	800b9c8 <_svfiprintf_r+0xd8>
 800ba76:	2300      	movs	r3, #0
 800ba78:	3401      	adds	r4, #1
 800ba7a:	9305      	str	r3, [sp, #20]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	f04f 0c0a 	mov.w	ip, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba88:	3a30      	subs	r2, #48	@ 0x30
 800ba8a:	2a09      	cmp	r2, #9
 800ba8c:	d903      	bls.n	800ba96 <_svfiprintf_r+0x1a6>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0c6      	beq.n	800ba20 <_svfiprintf_r+0x130>
 800ba92:	9105      	str	r1, [sp, #20]
 800ba94:	e7c4      	b.n	800ba20 <_svfiprintf_r+0x130>
 800ba96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e7f0      	b.n	800ba82 <_svfiprintf_r+0x192>
 800baa0:	ab03      	add	r3, sp, #12
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	462a      	mov	r2, r5
 800baa6:	4b0e      	ldr	r3, [pc, #56]	@ (800bae0 <_svfiprintf_r+0x1f0>)
 800baa8:	a904      	add	r1, sp, #16
 800baaa:	4638      	mov	r0, r7
 800baac:	f3af 8000 	nop.w
 800bab0:	1c42      	adds	r2, r0, #1
 800bab2:	4606      	mov	r6, r0
 800bab4:	d1d6      	bne.n	800ba64 <_svfiprintf_r+0x174>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	065b      	lsls	r3, r3, #25
 800baba:	f53f af2d 	bmi.w	800b918 <_svfiprintf_r+0x28>
 800babe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac0:	e72c      	b.n	800b91c <_svfiprintf_r+0x2c>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b05      	ldr	r3, [pc, #20]	@ (800bae0 <_svfiprintf_r+0x1f0>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4638      	mov	r0, r7
 800bace:	f000 f879 	bl	800bbc4 <_printf_i>
 800bad2:	e7ed      	b.n	800bab0 <_svfiprintf_r+0x1c0>
 800bad4:	0800c80a 	.word	0x0800c80a
 800bad8:	0800c814 	.word	0x0800c814
 800badc:	00000000 	.word	0x00000000
 800bae0:	0800b839 	.word	0x0800b839
 800bae4:	0800c810 	.word	0x0800c810

0800bae8 <_printf_common>:
 800bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baec:	4616      	mov	r6, r2
 800baee:	4698      	mov	r8, r3
 800baf0:	688a      	ldr	r2, [r1, #8]
 800baf2:	690b      	ldr	r3, [r1, #16]
 800baf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	bfb8      	it	lt
 800bafc:	4613      	movlt	r3, r2
 800bafe:	6033      	str	r3, [r6, #0]
 800bb00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb04:	4607      	mov	r7, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	b10a      	cbz	r2, 800bb0e <_printf_common+0x26>
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	6033      	str	r3, [r6, #0]
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	0699      	lsls	r1, r3, #26
 800bb12:	bf42      	ittt	mi
 800bb14:	6833      	ldrmi	r3, [r6, #0]
 800bb16:	3302      	addmi	r3, #2
 800bb18:	6033      	strmi	r3, [r6, #0]
 800bb1a:	6825      	ldr	r5, [r4, #0]
 800bb1c:	f015 0506 	ands.w	r5, r5, #6
 800bb20:	d106      	bne.n	800bb30 <_printf_common+0x48>
 800bb22:	f104 0a19 	add.w	sl, r4, #25
 800bb26:	68e3      	ldr	r3, [r4, #12]
 800bb28:	6832      	ldr	r2, [r6, #0]
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	42ab      	cmp	r3, r5
 800bb2e:	dc26      	bgt.n	800bb7e <_printf_common+0x96>
 800bb30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb34:	6822      	ldr	r2, [r4, #0]
 800bb36:	3b00      	subs	r3, #0
 800bb38:	bf18      	it	ne
 800bb3a:	2301      	movne	r3, #1
 800bb3c:	0692      	lsls	r2, r2, #26
 800bb3e:	d42b      	bmi.n	800bb98 <_printf_common+0xb0>
 800bb40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb44:	4641      	mov	r1, r8
 800bb46:	4638      	mov	r0, r7
 800bb48:	47c8      	blx	r9
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	d01e      	beq.n	800bb8c <_printf_common+0xa4>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	f003 0306 	and.w	r3, r3, #6
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	bf02      	ittt	eq
 800bb5a:	68e5      	ldreq	r5, [r4, #12]
 800bb5c:	6833      	ldreq	r3, [r6, #0]
 800bb5e:	1aed      	subeq	r5, r5, r3
 800bb60:	68a3      	ldr	r3, [r4, #8]
 800bb62:	bf0c      	ite	eq
 800bb64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb68:	2500      	movne	r5, #0
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	bfc4      	itt	gt
 800bb6e:	1a9b      	subgt	r3, r3, r2
 800bb70:	18ed      	addgt	r5, r5, r3
 800bb72:	2600      	movs	r6, #0
 800bb74:	341a      	adds	r4, #26
 800bb76:	42b5      	cmp	r5, r6
 800bb78:	d11a      	bne.n	800bbb0 <_printf_common+0xc8>
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	e008      	b.n	800bb90 <_printf_common+0xa8>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4652      	mov	r2, sl
 800bb82:	4641      	mov	r1, r8
 800bb84:	4638      	mov	r0, r7
 800bb86:	47c8      	blx	r9
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d103      	bne.n	800bb94 <_printf_common+0xac>
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	3501      	adds	r5, #1
 800bb96:	e7c6      	b.n	800bb26 <_printf_common+0x3e>
 800bb98:	18e1      	adds	r1, r4, r3
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	2030      	movs	r0, #48	@ 0x30
 800bb9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bba2:	4422      	add	r2, r4
 800bba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbac:	3302      	adds	r3, #2
 800bbae:	e7c7      	b.n	800bb40 <_printf_common+0x58>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4641      	mov	r1, r8
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	47c8      	blx	r9
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d0e6      	beq.n	800bb8c <_printf_common+0xa4>
 800bbbe:	3601      	adds	r6, #1
 800bbc0:	e7d9      	b.n	800bb76 <_printf_common+0x8e>
	...

0800bbc4 <_printf_i>:
 800bbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	7e0f      	ldrb	r7, [r1, #24]
 800bbca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbcc:	2f78      	cmp	r7, #120	@ 0x78
 800bbce:	4691      	mov	r9, r2
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	469a      	mov	sl, r3
 800bbd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbda:	d807      	bhi.n	800bbec <_printf_i+0x28>
 800bbdc:	2f62      	cmp	r7, #98	@ 0x62
 800bbde:	d80a      	bhi.n	800bbf6 <_printf_i+0x32>
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	f000 80d2 	beq.w	800bd8a <_printf_i+0x1c6>
 800bbe6:	2f58      	cmp	r7, #88	@ 0x58
 800bbe8:	f000 80b9 	beq.w	800bd5e <_printf_i+0x19a>
 800bbec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbf4:	e03a      	b.n	800bc6c <_printf_i+0xa8>
 800bbf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbfa:	2b15      	cmp	r3, #21
 800bbfc:	d8f6      	bhi.n	800bbec <_printf_i+0x28>
 800bbfe:	a101      	add	r1, pc, #4	@ (adr r1, 800bc04 <_printf_i+0x40>)
 800bc00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc71 	.word	0x0800bc71
 800bc0c:	0800bbed 	.word	0x0800bbed
 800bc10:	0800bbed 	.word	0x0800bbed
 800bc14:	0800bbed 	.word	0x0800bbed
 800bc18:	0800bbed 	.word	0x0800bbed
 800bc1c:	0800bc71 	.word	0x0800bc71
 800bc20:	0800bbed 	.word	0x0800bbed
 800bc24:	0800bbed 	.word	0x0800bbed
 800bc28:	0800bbed 	.word	0x0800bbed
 800bc2c:	0800bbed 	.word	0x0800bbed
 800bc30:	0800bd71 	.word	0x0800bd71
 800bc34:	0800bc9b 	.word	0x0800bc9b
 800bc38:	0800bd2b 	.word	0x0800bd2b
 800bc3c:	0800bbed 	.word	0x0800bbed
 800bc40:	0800bbed 	.word	0x0800bbed
 800bc44:	0800bd93 	.word	0x0800bd93
 800bc48:	0800bbed 	.word	0x0800bbed
 800bc4c:	0800bc9b 	.word	0x0800bc9b
 800bc50:	0800bbed 	.word	0x0800bbed
 800bc54:	0800bbed 	.word	0x0800bbed
 800bc58:	0800bd33 	.word	0x0800bd33
 800bc5c:	6833      	ldr	r3, [r6, #0]
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6032      	str	r2, [r6, #0]
 800bc64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e09d      	b.n	800bdac <_printf_i+0x1e8>
 800bc70:	6833      	ldr	r3, [r6, #0]
 800bc72:	6820      	ldr	r0, [r4, #0]
 800bc74:	1d19      	adds	r1, r3, #4
 800bc76:	6031      	str	r1, [r6, #0]
 800bc78:	0606      	lsls	r6, r0, #24
 800bc7a:	d501      	bpl.n	800bc80 <_printf_i+0xbc>
 800bc7c:	681d      	ldr	r5, [r3, #0]
 800bc7e:	e003      	b.n	800bc88 <_printf_i+0xc4>
 800bc80:	0645      	lsls	r5, r0, #25
 800bc82:	d5fb      	bpl.n	800bc7c <_printf_i+0xb8>
 800bc84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	da03      	bge.n	800bc94 <_printf_i+0xd0>
 800bc8c:	232d      	movs	r3, #45	@ 0x2d
 800bc8e:	426d      	negs	r5, r5
 800bc90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc94:	4859      	ldr	r0, [pc, #356]	@ (800bdfc <_printf_i+0x238>)
 800bc96:	230a      	movs	r3, #10
 800bc98:	e011      	b.n	800bcbe <_printf_i+0xfa>
 800bc9a:	6821      	ldr	r1, [r4, #0]
 800bc9c:	6833      	ldr	r3, [r6, #0]
 800bc9e:	0608      	lsls	r0, r1, #24
 800bca0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bca4:	d402      	bmi.n	800bcac <_printf_i+0xe8>
 800bca6:	0649      	lsls	r1, r1, #25
 800bca8:	bf48      	it	mi
 800bcaa:	b2ad      	uxthmi	r5, r5
 800bcac:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcae:	4853      	ldr	r0, [pc, #332]	@ (800bdfc <_printf_i+0x238>)
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	bf14      	ite	ne
 800bcb4:	230a      	movne	r3, #10
 800bcb6:	2308      	moveq	r3, #8
 800bcb8:	2100      	movs	r1, #0
 800bcba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bcbe:	6866      	ldr	r6, [r4, #4]
 800bcc0:	60a6      	str	r6, [r4, #8]
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	bfa2      	ittt	ge
 800bcc6:	6821      	ldrge	r1, [r4, #0]
 800bcc8:	f021 0104 	bicge.w	r1, r1, #4
 800bccc:	6021      	strge	r1, [r4, #0]
 800bcce:	b90d      	cbnz	r5, 800bcd4 <_printf_i+0x110>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	d04b      	beq.n	800bd6c <_printf_i+0x1a8>
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcda:	fb03 5711 	mls	r7, r3, r1, r5
 800bcde:	5dc7      	ldrb	r7, [r0, r7]
 800bce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bce4:	462f      	mov	r7, r5
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	460d      	mov	r5, r1
 800bcea:	d9f4      	bls.n	800bcd6 <_printf_i+0x112>
 800bcec:	2b08      	cmp	r3, #8
 800bcee:	d10b      	bne.n	800bd08 <_printf_i+0x144>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	07df      	lsls	r7, r3, #31
 800bcf4:	d508      	bpl.n	800bd08 <_printf_i+0x144>
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	bfde      	ittt	le
 800bcfe:	2330      	movle	r3, #48	@ 0x30
 800bd00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd08:	1b92      	subs	r2, r2, r6
 800bd0a:	6122      	str	r2, [r4, #16]
 800bd0c:	f8cd a000 	str.w	sl, [sp]
 800bd10:	464b      	mov	r3, r9
 800bd12:	aa03      	add	r2, sp, #12
 800bd14:	4621      	mov	r1, r4
 800bd16:	4640      	mov	r0, r8
 800bd18:	f7ff fee6 	bl	800bae8 <_printf_common>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d14a      	bne.n	800bdb6 <_printf_i+0x1f2>
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	b004      	add	sp, #16
 800bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f043 0320 	orr.w	r3, r3, #32
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	4833      	ldr	r0, [pc, #204]	@ (800be00 <_printf_i+0x23c>)
 800bd34:	2778      	movs	r7, #120	@ 0x78
 800bd36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	6831      	ldr	r1, [r6, #0]
 800bd3e:	061f      	lsls	r7, r3, #24
 800bd40:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd44:	d402      	bmi.n	800bd4c <_printf_i+0x188>
 800bd46:	065f      	lsls	r7, r3, #25
 800bd48:	bf48      	it	mi
 800bd4a:	b2ad      	uxthmi	r5, r5
 800bd4c:	6031      	str	r1, [r6, #0]
 800bd4e:	07d9      	lsls	r1, r3, #31
 800bd50:	bf44      	itt	mi
 800bd52:	f043 0320 	orrmi.w	r3, r3, #32
 800bd56:	6023      	strmi	r3, [r4, #0]
 800bd58:	b11d      	cbz	r5, 800bd62 <_printf_i+0x19e>
 800bd5a:	2310      	movs	r3, #16
 800bd5c:	e7ac      	b.n	800bcb8 <_printf_i+0xf4>
 800bd5e:	4827      	ldr	r0, [pc, #156]	@ (800bdfc <_printf_i+0x238>)
 800bd60:	e7e9      	b.n	800bd36 <_printf_i+0x172>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	f023 0320 	bic.w	r3, r3, #32
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	e7f6      	b.n	800bd5a <_printf_i+0x196>
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	e7bd      	b.n	800bcec <_printf_i+0x128>
 800bd70:	6833      	ldr	r3, [r6, #0]
 800bd72:	6825      	ldr	r5, [r4, #0]
 800bd74:	6961      	ldr	r1, [r4, #20]
 800bd76:	1d18      	adds	r0, r3, #4
 800bd78:	6030      	str	r0, [r6, #0]
 800bd7a:	062e      	lsls	r6, r5, #24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	d501      	bpl.n	800bd84 <_printf_i+0x1c0>
 800bd80:	6019      	str	r1, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <_printf_i+0x1c6>
 800bd84:	0668      	lsls	r0, r5, #25
 800bd86:	d5fb      	bpl.n	800bd80 <_printf_i+0x1bc>
 800bd88:	8019      	strh	r1, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	4616      	mov	r6, r2
 800bd90:	e7bc      	b.n	800bd0c <_printf_i+0x148>
 800bd92:	6833      	ldr	r3, [r6, #0]
 800bd94:	1d1a      	adds	r2, r3, #4
 800bd96:	6032      	str	r2, [r6, #0]
 800bd98:	681e      	ldr	r6, [r3, #0]
 800bd9a:	6862      	ldr	r2, [r4, #4]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7f4 fac6 	bl	8000330 <memchr>
 800bda4:	b108      	cbz	r0, 800bdaa <_printf_i+0x1e6>
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	6060      	str	r0, [r4, #4]
 800bdaa:	6863      	ldr	r3, [r4, #4]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdb4:	e7aa      	b.n	800bd0c <_printf_i+0x148>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	47d0      	blx	sl
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d0ad      	beq.n	800bd20 <_printf_i+0x15c>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	079b      	lsls	r3, r3, #30
 800bdc8:	d413      	bmi.n	800bdf2 <_printf_i+0x22e>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	4298      	cmp	r0, r3
 800bdd0:	bfb8      	it	lt
 800bdd2:	4618      	movlt	r0, r3
 800bdd4:	e7a6      	b.n	800bd24 <_printf_i+0x160>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4649      	mov	r1, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	47d0      	blx	sl
 800bde0:	3001      	adds	r0, #1
 800bde2:	d09d      	beq.n	800bd20 <_printf_i+0x15c>
 800bde4:	3501      	adds	r5, #1
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	9903      	ldr	r1, [sp, #12]
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dcf2      	bgt.n	800bdd6 <_printf_i+0x212>
 800bdf0:	e7eb      	b.n	800bdca <_printf_i+0x206>
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	f104 0619 	add.w	r6, r4, #25
 800bdf8:	e7f5      	b.n	800bde6 <_printf_i+0x222>
 800bdfa:	bf00      	nop
 800bdfc:	0800c81b 	.word	0x0800c81b
 800be00:	0800c82c 	.word	0x0800c82c

0800be04 <__sflush_r>:
 800be04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0c:	0716      	lsls	r6, r2, #28
 800be0e:	4605      	mov	r5, r0
 800be10:	460c      	mov	r4, r1
 800be12:	d454      	bmi.n	800bebe <__sflush_r+0xba>
 800be14:	684b      	ldr	r3, [r1, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	dc02      	bgt.n	800be20 <__sflush_r+0x1c>
 800be1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dd48      	ble.n	800beb2 <__sflush_r+0xae>
 800be20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be22:	2e00      	cmp	r6, #0
 800be24:	d045      	beq.n	800beb2 <__sflush_r+0xae>
 800be26:	2300      	movs	r3, #0
 800be28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be2c:	682f      	ldr	r7, [r5, #0]
 800be2e:	6a21      	ldr	r1, [r4, #32]
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	d030      	beq.n	800be96 <__sflush_r+0x92>
 800be34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	0759      	lsls	r1, r3, #29
 800be3a:	d505      	bpl.n	800be48 <__sflush_r+0x44>
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be42:	b10b      	cbz	r3, 800be48 <__sflush_r+0x44>
 800be44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be46:	1ad2      	subs	r2, r2, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be4c:	6a21      	ldr	r1, [r4, #32]
 800be4e:	4628      	mov	r0, r5
 800be50:	47b0      	blx	r6
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	d106      	bne.n	800be66 <__sflush_r+0x62>
 800be58:	6829      	ldr	r1, [r5, #0]
 800be5a:	291d      	cmp	r1, #29
 800be5c:	d82b      	bhi.n	800beb6 <__sflush_r+0xb2>
 800be5e:	4a2a      	ldr	r2, [pc, #168]	@ (800bf08 <__sflush_r+0x104>)
 800be60:	410a      	asrs	r2, r1
 800be62:	07d6      	lsls	r6, r2, #31
 800be64:	d427      	bmi.n	800beb6 <__sflush_r+0xb2>
 800be66:	2200      	movs	r2, #0
 800be68:	6062      	str	r2, [r4, #4]
 800be6a:	04d9      	lsls	r1, r3, #19
 800be6c:	6922      	ldr	r2, [r4, #16]
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	d504      	bpl.n	800be7c <__sflush_r+0x78>
 800be72:	1c42      	adds	r2, r0, #1
 800be74:	d101      	bne.n	800be7a <__sflush_r+0x76>
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	b903      	cbnz	r3, 800be7c <__sflush_r+0x78>
 800be7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800be7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be7e:	602f      	str	r7, [r5, #0]
 800be80:	b1b9      	cbz	r1, 800beb2 <__sflush_r+0xae>
 800be82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be86:	4299      	cmp	r1, r3
 800be88:	d002      	beq.n	800be90 <__sflush_r+0x8c>
 800be8a:	4628      	mov	r0, r5
 800be8c:	f7ff fc8a 	bl	800b7a4 <_free_r>
 800be90:	2300      	movs	r3, #0
 800be92:	6363      	str	r3, [r4, #52]	@ 0x34
 800be94:	e00d      	b.n	800beb2 <__sflush_r+0xae>
 800be96:	2301      	movs	r3, #1
 800be98:	4628      	mov	r0, r5
 800be9a:	47b0      	blx	r6
 800be9c:	4602      	mov	r2, r0
 800be9e:	1c50      	adds	r0, r2, #1
 800bea0:	d1c9      	bne.n	800be36 <__sflush_r+0x32>
 800bea2:	682b      	ldr	r3, [r5, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0c6      	beq.n	800be36 <__sflush_r+0x32>
 800bea8:	2b1d      	cmp	r3, #29
 800beaa:	d001      	beq.n	800beb0 <__sflush_r+0xac>
 800beac:	2b16      	cmp	r3, #22
 800beae:	d11e      	bne.n	800beee <__sflush_r+0xea>
 800beb0:	602f      	str	r7, [r5, #0]
 800beb2:	2000      	movs	r0, #0
 800beb4:	e022      	b.n	800befc <__sflush_r+0xf8>
 800beb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beba:	b21b      	sxth	r3, r3
 800bebc:	e01b      	b.n	800bef6 <__sflush_r+0xf2>
 800bebe:	690f      	ldr	r7, [r1, #16]
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	d0f6      	beq.n	800beb2 <__sflush_r+0xae>
 800bec4:	0793      	lsls	r3, r2, #30
 800bec6:	680e      	ldr	r6, [r1, #0]
 800bec8:	bf08      	it	eq
 800beca:	694b      	ldreq	r3, [r1, #20]
 800becc:	600f      	str	r7, [r1, #0]
 800bece:	bf18      	it	ne
 800bed0:	2300      	movne	r3, #0
 800bed2:	eba6 0807 	sub.w	r8, r6, r7
 800bed6:	608b      	str	r3, [r1, #8]
 800bed8:	f1b8 0f00 	cmp.w	r8, #0
 800bedc:	dde9      	ble.n	800beb2 <__sflush_r+0xae>
 800bede:	6a21      	ldr	r1, [r4, #32]
 800bee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bee2:	4643      	mov	r3, r8
 800bee4:	463a      	mov	r2, r7
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b0      	blx	r6
 800beea:	2800      	cmp	r0, #0
 800beec:	dc08      	bgt.n	800bf00 <__sflush_r+0xfc>
 800beee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf00:	4407      	add	r7, r0
 800bf02:	eba8 0800 	sub.w	r8, r8, r0
 800bf06:	e7e7      	b.n	800bed8 <__sflush_r+0xd4>
 800bf08:	dfbffffe 	.word	0xdfbffffe

0800bf0c <_fflush_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	690b      	ldr	r3, [r1, #16]
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	b913      	cbnz	r3, 800bf1c <_fflush_r+0x10>
 800bf16:	2500      	movs	r5, #0
 800bf18:	4628      	mov	r0, r5
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	b118      	cbz	r0, 800bf26 <_fflush_r+0x1a>
 800bf1e:	6a03      	ldr	r3, [r0, #32]
 800bf20:	b90b      	cbnz	r3, 800bf26 <_fflush_r+0x1a>
 800bf22:	f7ff fa7d 	bl	800b420 <__sinit>
 800bf26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0f3      	beq.n	800bf16 <_fflush_r+0xa>
 800bf2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf30:	07d0      	lsls	r0, r2, #31
 800bf32:	d404      	bmi.n	800bf3e <_fflush_r+0x32>
 800bf34:	0599      	lsls	r1, r3, #22
 800bf36:	d402      	bmi.n	800bf3e <_fflush_r+0x32>
 800bf38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf3a:	f7ff fc04 	bl	800b746 <__retarget_lock_acquire_recursive>
 800bf3e:	4628      	mov	r0, r5
 800bf40:	4621      	mov	r1, r4
 800bf42:	f7ff ff5f 	bl	800be04 <__sflush_r>
 800bf46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf48:	07da      	lsls	r2, r3, #31
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	d4e4      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	059b      	lsls	r3, r3, #22
 800bf52:	d4e1      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf56:	f7ff fbf7 	bl	800b748 <__retarget_lock_release_recursive>
 800bf5a:	e7dd      	b.n	800bf18 <_fflush_r+0xc>

0800bf5c <fiprintf>:
 800bf5c:	b40e      	push	{r1, r2, r3}
 800bf5e:	b503      	push	{r0, r1, lr}
 800bf60:	4601      	mov	r1, r0
 800bf62:	ab03      	add	r3, sp, #12
 800bf64:	4805      	ldr	r0, [pc, #20]	@ (800bf7c <fiprintf+0x20>)
 800bf66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	f000 f87f 	bl	800c070 <_vfiprintf_r>
 800bf72:	b002      	add	sp, #8
 800bf74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf78:	b003      	add	sp, #12
 800bf7a:	4770      	bx	lr
 800bf7c:	24000078 	.word	0x24000078

0800bf80 <memmove>:
 800bf80:	4288      	cmp	r0, r1
 800bf82:	b510      	push	{r4, lr}
 800bf84:	eb01 0402 	add.w	r4, r1, r2
 800bf88:	d902      	bls.n	800bf90 <memmove+0x10>
 800bf8a:	4284      	cmp	r4, r0
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	d807      	bhi.n	800bfa0 <memmove+0x20>
 800bf90:	1e43      	subs	r3, r0, #1
 800bf92:	42a1      	cmp	r1, r4
 800bf94:	d008      	beq.n	800bfa8 <memmove+0x28>
 800bf96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf9e:	e7f8      	b.n	800bf92 <memmove+0x12>
 800bfa0:	4402      	add	r2, r0
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	428a      	cmp	r2, r1
 800bfa6:	d100      	bne.n	800bfaa <memmove+0x2a>
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfb2:	e7f7      	b.n	800bfa4 <memmove+0x24>

0800bfb4 <abort>:
 800bfb4:	b508      	push	{r3, lr}
 800bfb6:	2006      	movs	r0, #6
 800bfb8:	f000 fa2e 	bl	800c418 <raise>
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	f7f5 f921 	bl	8001204 <_exit>

0800bfc2 <_realloc_r>:
 800bfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	4680      	mov	r8, r0
 800bfc8:	4615      	mov	r5, r2
 800bfca:	460c      	mov	r4, r1
 800bfcc:	b921      	cbnz	r1, 800bfd8 <_realloc_r+0x16>
 800bfce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	f7ff b888 	b.w	800b0e8 <_malloc_r>
 800bfd8:	b92a      	cbnz	r2, 800bfe6 <_realloc_r+0x24>
 800bfda:	f7ff fbe3 	bl	800b7a4 <_free_r>
 800bfde:	2400      	movs	r4, #0
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe6:	f000 fa33 	bl	800c450 <_malloc_usable_size_r>
 800bfea:	4285      	cmp	r5, r0
 800bfec:	4606      	mov	r6, r0
 800bfee:	d802      	bhi.n	800bff6 <_realloc_r+0x34>
 800bff0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bff4:	d8f4      	bhi.n	800bfe0 <_realloc_r+0x1e>
 800bff6:	4629      	mov	r1, r5
 800bff8:	4640      	mov	r0, r8
 800bffa:	f7ff f875 	bl	800b0e8 <_malloc_r>
 800bffe:	4607      	mov	r7, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	d0ec      	beq.n	800bfde <_realloc_r+0x1c>
 800c004:	42b5      	cmp	r5, r6
 800c006:	462a      	mov	r2, r5
 800c008:	4621      	mov	r1, r4
 800c00a:	bf28      	it	cs
 800c00c:	4632      	movcs	r2, r6
 800c00e:	f7ff fb9c 	bl	800b74a <memcpy>
 800c012:	4621      	mov	r1, r4
 800c014:	4640      	mov	r0, r8
 800c016:	f7ff fbc5 	bl	800b7a4 <_free_r>
 800c01a:	463c      	mov	r4, r7
 800c01c:	e7e0      	b.n	800bfe0 <_realloc_r+0x1e>

0800c01e <__sfputc_r>:
 800c01e:	6893      	ldr	r3, [r2, #8]
 800c020:	3b01      	subs	r3, #1
 800c022:	2b00      	cmp	r3, #0
 800c024:	b410      	push	{r4}
 800c026:	6093      	str	r3, [r2, #8]
 800c028:	da08      	bge.n	800c03c <__sfputc_r+0x1e>
 800c02a:	6994      	ldr	r4, [r2, #24]
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	db01      	blt.n	800c034 <__sfputc_r+0x16>
 800c030:	290a      	cmp	r1, #10
 800c032:	d103      	bne.n	800c03c <__sfputc_r+0x1e>
 800c034:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c038:	f000 b932 	b.w	800c2a0 <__swbuf_r>
 800c03c:	6813      	ldr	r3, [r2, #0]
 800c03e:	1c58      	adds	r0, r3, #1
 800c040:	6010      	str	r0, [r2, #0]
 800c042:	7019      	strb	r1, [r3, #0]
 800c044:	4608      	mov	r0, r1
 800c046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <__sfputs_r>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	4614      	mov	r4, r2
 800c054:	18d5      	adds	r5, r2, r3
 800c056:	42ac      	cmp	r4, r5
 800c058:	d101      	bne.n	800c05e <__sfputs_r+0x12>
 800c05a:	2000      	movs	r0, #0
 800c05c:	e007      	b.n	800c06e <__sfputs_r+0x22>
 800c05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c062:	463a      	mov	r2, r7
 800c064:	4630      	mov	r0, r6
 800c066:	f7ff ffda 	bl	800c01e <__sfputc_r>
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d1f3      	bne.n	800c056 <__sfputs_r+0xa>
 800c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c070 <_vfiprintf_r>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	460d      	mov	r5, r1
 800c076:	b09d      	sub	sp, #116	@ 0x74
 800c078:	4614      	mov	r4, r2
 800c07a:	4698      	mov	r8, r3
 800c07c:	4606      	mov	r6, r0
 800c07e:	b118      	cbz	r0, 800c088 <_vfiprintf_r+0x18>
 800c080:	6a03      	ldr	r3, [r0, #32]
 800c082:	b90b      	cbnz	r3, 800c088 <_vfiprintf_r+0x18>
 800c084:	f7ff f9cc 	bl	800b420 <__sinit>
 800c088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c08a:	07d9      	lsls	r1, r3, #31
 800c08c:	d405      	bmi.n	800c09a <_vfiprintf_r+0x2a>
 800c08e:	89ab      	ldrh	r3, [r5, #12]
 800c090:	059a      	lsls	r2, r3, #22
 800c092:	d402      	bmi.n	800c09a <_vfiprintf_r+0x2a>
 800c094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c096:	f7ff fb56 	bl	800b746 <__retarget_lock_acquire_recursive>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	071b      	lsls	r3, r3, #28
 800c09e:	d501      	bpl.n	800c0a4 <_vfiprintf_r+0x34>
 800c0a0:	692b      	ldr	r3, [r5, #16]
 800c0a2:	b99b      	cbnz	r3, 800c0cc <_vfiprintf_r+0x5c>
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 f938 	bl	800c31c <__swsetup_r>
 800c0ac:	b170      	cbz	r0, 800c0cc <_vfiprintf_r+0x5c>
 800c0ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0b0:	07dc      	lsls	r4, r3, #31
 800c0b2:	d504      	bpl.n	800c0be <_vfiprintf_r+0x4e>
 800c0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b8:	b01d      	add	sp, #116	@ 0x74
 800c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	0598      	lsls	r0, r3, #22
 800c0c2:	d4f7      	bmi.n	800c0b4 <_vfiprintf_r+0x44>
 800c0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0c6:	f7ff fb3f 	bl	800b748 <__retarget_lock_release_recursive>
 800c0ca:	e7f3      	b.n	800c0b4 <_vfiprintf_r+0x44>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0d0:	2320      	movs	r3, #32
 800c0d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0da:	2330      	movs	r3, #48	@ 0x30
 800c0dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c28c <_vfiprintf_r+0x21c>
 800c0e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0e4:	f04f 0901 	mov.w	r9, #1
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	469a      	mov	sl, r3
 800c0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0f0:	b10a      	cbz	r2, 800c0f6 <_vfiprintf_r+0x86>
 800c0f2:	2a25      	cmp	r2, #37	@ 0x25
 800c0f4:	d1f9      	bne.n	800c0ea <_vfiprintf_r+0x7a>
 800c0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c0fa:	d00b      	beq.n	800c114 <_vfiprintf_r+0xa4>
 800c0fc:	465b      	mov	r3, fp
 800c0fe:	4622      	mov	r2, r4
 800c100:	4629      	mov	r1, r5
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ffa2 	bl	800c04c <__sfputs_r>
 800c108:	3001      	adds	r0, #1
 800c10a:	f000 80a7 	beq.w	800c25c <_vfiprintf_r+0x1ec>
 800c10e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c110:	445a      	add	r2, fp
 800c112:	9209      	str	r2, [sp, #36]	@ 0x24
 800c114:	f89a 3000 	ldrb.w	r3, [sl]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 809f 	beq.w	800c25c <_vfiprintf_r+0x1ec>
 800c11e:	2300      	movs	r3, #0
 800c120:	f04f 32ff 	mov.w	r2, #4294967295
 800c124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c128:	f10a 0a01 	add.w	sl, sl, #1
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	9307      	str	r3, [sp, #28]
 800c130:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c134:	931a      	str	r3, [sp, #104]	@ 0x68
 800c136:	4654      	mov	r4, sl
 800c138:	2205      	movs	r2, #5
 800c13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13e:	4853      	ldr	r0, [pc, #332]	@ (800c28c <_vfiprintf_r+0x21c>)
 800c140:	f7f4 f8f6 	bl	8000330 <memchr>
 800c144:	9a04      	ldr	r2, [sp, #16]
 800c146:	b9d8      	cbnz	r0, 800c180 <_vfiprintf_r+0x110>
 800c148:	06d1      	lsls	r1, r2, #27
 800c14a:	bf44      	itt	mi
 800c14c:	2320      	movmi	r3, #32
 800c14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c152:	0713      	lsls	r3, r2, #28
 800c154:	bf44      	itt	mi
 800c156:	232b      	movmi	r3, #43	@ 0x2b
 800c158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c15c:	f89a 3000 	ldrb.w	r3, [sl]
 800c160:	2b2a      	cmp	r3, #42	@ 0x2a
 800c162:	d015      	beq.n	800c190 <_vfiprintf_r+0x120>
 800c164:	9a07      	ldr	r2, [sp, #28]
 800c166:	4654      	mov	r4, sl
 800c168:	2000      	movs	r0, #0
 800c16a:	f04f 0c0a 	mov.w	ip, #10
 800c16e:	4621      	mov	r1, r4
 800c170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c174:	3b30      	subs	r3, #48	@ 0x30
 800c176:	2b09      	cmp	r3, #9
 800c178:	d94b      	bls.n	800c212 <_vfiprintf_r+0x1a2>
 800c17a:	b1b0      	cbz	r0, 800c1aa <_vfiprintf_r+0x13a>
 800c17c:	9207      	str	r2, [sp, #28]
 800c17e:	e014      	b.n	800c1aa <_vfiprintf_r+0x13a>
 800c180:	eba0 0308 	sub.w	r3, r0, r8
 800c184:	fa09 f303 	lsl.w	r3, r9, r3
 800c188:	4313      	orrs	r3, r2
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	46a2      	mov	sl, r4
 800c18e:	e7d2      	b.n	800c136 <_vfiprintf_r+0xc6>
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	1d19      	adds	r1, r3, #4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	9103      	str	r1, [sp, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	bfbb      	ittet	lt
 800c19c:	425b      	neglt	r3, r3
 800c19e:	f042 0202 	orrlt.w	r2, r2, #2
 800c1a2:	9307      	strge	r3, [sp, #28]
 800c1a4:	9307      	strlt	r3, [sp, #28]
 800c1a6:	bfb8      	it	lt
 800c1a8:	9204      	strlt	r2, [sp, #16]
 800c1aa:	7823      	ldrb	r3, [r4, #0]
 800c1ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1ae:	d10a      	bne.n	800c1c6 <_vfiprintf_r+0x156>
 800c1b0:	7863      	ldrb	r3, [r4, #1]
 800c1b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1b4:	d132      	bne.n	800c21c <_vfiprintf_r+0x1ac>
 800c1b6:	9b03      	ldr	r3, [sp, #12]
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	9203      	str	r2, [sp, #12]
 800c1be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1c2:	3402      	adds	r4, #2
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c29c <_vfiprintf_r+0x22c>
 800c1ca:	7821      	ldrb	r1, [r4, #0]
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	4650      	mov	r0, sl
 800c1d0:	f7f4 f8ae 	bl	8000330 <memchr>
 800c1d4:	b138      	cbz	r0, 800c1e6 <_vfiprintf_r+0x176>
 800c1d6:	9b04      	ldr	r3, [sp, #16]
 800c1d8:	eba0 000a 	sub.w	r0, r0, sl
 800c1dc:	2240      	movs	r2, #64	@ 0x40
 800c1de:	4082      	lsls	r2, r0
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	3401      	adds	r4, #1
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ea:	4829      	ldr	r0, [pc, #164]	@ (800c290 <_vfiprintf_r+0x220>)
 800c1ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1f0:	2206      	movs	r2, #6
 800c1f2:	f7f4 f89d 	bl	8000330 <memchr>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d03f      	beq.n	800c27a <_vfiprintf_r+0x20a>
 800c1fa:	4b26      	ldr	r3, [pc, #152]	@ (800c294 <_vfiprintf_r+0x224>)
 800c1fc:	bb1b      	cbnz	r3, 800c246 <_vfiprintf_r+0x1d6>
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	3307      	adds	r3, #7
 800c202:	f023 0307 	bic.w	r3, r3, #7
 800c206:	3308      	adds	r3, #8
 800c208:	9303      	str	r3, [sp, #12]
 800c20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c20c:	443b      	add	r3, r7
 800c20e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c210:	e76a      	b.n	800c0e8 <_vfiprintf_r+0x78>
 800c212:	fb0c 3202 	mla	r2, ip, r2, r3
 800c216:	460c      	mov	r4, r1
 800c218:	2001      	movs	r0, #1
 800c21a:	e7a8      	b.n	800c16e <_vfiprintf_r+0xfe>
 800c21c:	2300      	movs	r3, #0
 800c21e:	3401      	adds	r4, #1
 800c220:	9305      	str	r3, [sp, #20]
 800c222:	4619      	mov	r1, r3
 800c224:	f04f 0c0a 	mov.w	ip, #10
 800c228:	4620      	mov	r0, r4
 800c22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c22e:	3a30      	subs	r2, #48	@ 0x30
 800c230:	2a09      	cmp	r2, #9
 800c232:	d903      	bls.n	800c23c <_vfiprintf_r+0x1cc>
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0c6      	beq.n	800c1c6 <_vfiprintf_r+0x156>
 800c238:	9105      	str	r1, [sp, #20]
 800c23a:	e7c4      	b.n	800c1c6 <_vfiprintf_r+0x156>
 800c23c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c240:	4604      	mov	r4, r0
 800c242:	2301      	movs	r3, #1
 800c244:	e7f0      	b.n	800c228 <_vfiprintf_r+0x1b8>
 800c246:	ab03      	add	r3, sp, #12
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	462a      	mov	r2, r5
 800c24c:	4b12      	ldr	r3, [pc, #72]	@ (800c298 <_vfiprintf_r+0x228>)
 800c24e:	a904      	add	r1, sp, #16
 800c250:	4630      	mov	r0, r6
 800c252:	f3af 8000 	nop.w
 800c256:	4607      	mov	r7, r0
 800c258:	1c78      	adds	r0, r7, #1
 800c25a:	d1d6      	bne.n	800c20a <_vfiprintf_r+0x19a>
 800c25c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c25e:	07d9      	lsls	r1, r3, #31
 800c260:	d405      	bmi.n	800c26e <_vfiprintf_r+0x1fe>
 800c262:	89ab      	ldrh	r3, [r5, #12]
 800c264:	059a      	lsls	r2, r3, #22
 800c266:	d402      	bmi.n	800c26e <_vfiprintf_r+0x1fe>
 800c268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c26a:	f7ff fa6d 	bl	800b748 <__retarget_lock_release_recursive>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	065b      	lsls	r3, r3, #25
 800c272:	f53f af1f 	bmi.w	800c0b4 <_vfiprintf_r+0x44>
 800c276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c278:	e71e      	b.n	800c0b8 <_vfiprintf_r+0x48>
 800c27a:	ab03      	add	r3, sp, #12
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	462a      	mov	r2, r5
 800c280:	4b05      	ldr	r3, [pc, #20]	@ (800c298 <_vfiprintf_r+0x228>)
 800c282:	a904      	add	r1, sp, #16
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff fc9d 	bl	800bbc4 <_printf_i>
 800c28a:	e7e4      	b.n	800c256 <_vfiprintf_r+0x1e6>
 800c28c:	0800c80a 	.word	0x0800c80a
 800c290:	0800c814 	.word	0x0800c814
 800c294:	00000000 	.word	0x00000000
 800c298:	0800c04d 	.word	0x0800c04d
 800c29c:	0800c810 	.word	0x0800c810

0800c2a0 <__swbuf_r>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	460e      	mov	r6, r1
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	4605      	mov	r5, r0
 800c2a8:	b118      	cbz	r0, 800c2b2 <__swbuf_r+0x12>
 800c2aa:	6a03      	ldr	r3, [r0, #32]
 800c2ac:	b90b      	cbnz	r3, 800c2b2 <__swbuf_r+0x12>
 800c2ae:	f7ff f8b7 	bl	800b420 <__sinit>
 800c2b2:	69a3      	ldr	r3, [r4, #24]
 800c2b4:	60a3      	str	r3, [r4, #8]
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	071a      	lsls	r2, r3, #28
 800c2ba:	d501      	bpl.n	800c2c0 <__swbuf_r+0x20>
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	b943      	cbnz	r3, 800c2d2 <__swbuf_r+0x32>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f000 f82a 	bl	800c31c <__swsetup_r>
 800c2c8:	b118      	cbz	r0, 800c2d2 <__swbuf_r+0x32>
 800c2ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	6922      	ldr	r2, [r4, #16]
 800c2d6:	1a98      	subs	r0, r3, r2
 800c2d8:	6963      	ldr	r3, [r4, #20]
 800c2da:	b2f6      	uxtb	r6, r6
 800c2dc:	4283      	cmp	r3, r0
 800c2de:	4637      	mov	r7, r6
 800c2e0:	dc05      	bgt.n	800c2ee <__swbuf_r+0x4e>
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f7ff fe11 	bl	800bf0c <_fflush_r>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d1ed      	bne.n	800c2ca <__swbuf_r+0x2a>
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	6823      	ldr	r3, [r4, #0]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	6022      	str	r2, [r4, #0]
 800c2fa:	701e      	strb	r6, [r3, #0]
 800c2fc:	6962      	ldr	r2, [r4, #20]
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	429a      	cmp	r2, r3
 800c302:	d004      	beq.n	800c30e <__swbuf_r+0x6e>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	07db      	lsls	r3, r3, #31
 800c308:	d5e1      	bpl.n	800c2ce <__swbuf_r+0x2e>
 800c30a:	2e0a      	cmp	r6, #10
 800c30c:	d1df      	bne.n	800c2ce <__swbuf_r+0x2e>
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f7ff fdfb 	bl	800bf0c <_fflush_r>
 800c316:	2800      	cmp	r0, #0
 800c318:	d0d9      	beq.n	800c2ce <__swbuf_r+0x2e>
 800c31a:	e7d6      	b.n	800c2ca <__swbuf_r+0x2a>

0800c31c <__swsetup_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4b29      	ldr	r3, [pc, #164]	@ (800c3c4 <__swsetup_r+0xa8>)
 800c320:	4605      	mov	r5, r0
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	460c      	mov	r4, r1
 800c326:	b118      	cbz	r0, 800c330 <__swsetup_r+0x14>
 800c328:	6a03      	ldr	r3, [r0, #32]
 800c32a:	b90b      	cbnz	r3, 800c330 <__swsetup_r+0x14>
 800c32c:	f7ff f878 	bl	800b420 <__sinit>
 800c330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c334:	0719      	lsls	r1, r3, #28
 800c336:	d422      	bmi.n	800c37e <__swsetup_r+0x62>
 800c338:	06da      	lsls	r2, r3, #27
 800c33a:	d407      	bmi.n	800c34c <__swsetup_r+0x30>
 800c33c:	2209      	movs	r2, #9
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	e033      	b.n	800c3b4 <__swsetup_r+0x98>
 800c34c:	0758      	lsls	r0, r3, #29
 800c34e:	d512      	bpl.n	800c376 <__swsetup_r+0x5a>
 800c350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c352:	b141      	cbz	r1, 800c366 <__swsetup_r+0x4a>
 800c354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c358:	4299      	cmp	r1, r3
 800c35a:	d002      	beq.n	800c362 <__swsetup_r+0x46>
 800c35c:	4628      	mov	r0, r5
 800c35e:	f7ff fa21 	bl	800b7a4 <_free_r>
 800c362:	2300      	movs	r3, #0
 800c364:	6363      	str	r3, [r4, #52]	@ 0x34
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	2300      	movs	r3, #0
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f043 0308 	orr.w	r3, r3, #8
 800c37c:	81a3      	strh	r3, [r4, #12]
 800c37e:	6923      	ldr	r3, [r4, #16]
 800c380:	b94b      	cbnz	r3, 800c396 <__swsetup_r+0x7a>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c38c:	d003      	beq.n	800c396 <__swsetup_r+0x7a>
 800c38e:	4621      	mov	r1, r4
 800c390:	4628      	mov	r0, r5
 800c392:	f000 f88b 	bl	800c4ac <__smakebuf_r>
 800c396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39a:	f013 0201 	ands.w	r2, r3, #1
 800c39e:	d00a      	beq.n	800c3b6 <__swsetup_r+0x9a>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	60a2      	str	r2, [r4, #8]
 800c3a4:	6962      	ldr	r2, [r4, #20]
 800c3a6:	4252      	negs	r2, r2
 800c3a8:	61a2      	str	r2, [r4, #24]
 800c3aa:	6922      	ldr	r2, [r4, #16]
 800c3ac:	b942      	cbnz	r2, 800c3c0 <__swsetup_r+0xa4>
 800c3ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3b2:	d1c5      	bne.n	800c340 <__swsetup_r+0x24>
 800c3b4:	bd38      	pop	{r3, r4, r5, pc}
 800c3b6:	0799      	lsls	r1, r3, #30
 800c3b8:	bf58      	it	pl
 800c3ba:	6962      	ldrpl	r2, [r4, #20]
 800c3bc:	60a2      	str	r2, [r4, #8]
 800c3be:	e7f4      	b.n	800c3aa <__swsetup_r+0x8e>
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e7f7      	b.n	800c3b4 <__swsetup_r+0x98>
 800c3c4:	24000078 	.word	0x24000078

0800c3c8 <_raise_r>:
 800c3c8:	291f      	cmp	r1, #31
 800c3ca:	b538      	push	{r3, r4, r5, lr}
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	d904      	bls.n	800c3dc <_raise_r+0x14>
 800c3d2:	2316      	movs	r3, #22
 800c3d4:	6003      	str	r3, [r0, #0]
 800c3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3de:	b112      	cbz	r2, 800c3e6 <_raise_r+0x1e>
 800c3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3e4:	b94b      	cbnz	r3, 800c3fa <_raise_r+0x32>
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 f830 	bl	800c44c <_getpid_r>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f6:	f000 b817 	b.w	800c428 <_kill_r>
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d00a      	beq.n	800c414 <_raise_r+0x4c>
 800c3fe:	1c59      	adds	r1, r3, #1
 800c400:	d103      	bne.n	800c40a <_raise_r+0x42>
 800c402:	2316      	movs	r3, #22
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	2001      	movs	r0, #1
 800c408:	e7e7      	b.n	800c3da <_raise_r+0x12>
 800c40a:	2100      	movs	r1, #0
 800c40c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c410:	4620      	mov	r0, r4
 800c412:	4798      	blx	r3
 800c414:	2000      	movs	r0, #0
 800c416:	e7e0      	b.n	800c3da <_raise_r+0x12>

0800c418 <raise>:
 800c418:	4b02      	ldr	r3, [pc, #8]	@ (800c424 <raise+0xc>)
 800c41a:	4601      	mov	r1, r0
 800c41c:	6818      	ldr	r0, [r3, #0]
 800c41e:	f7ff bfd3 	b.w	800c3c8 <_raise_r>
 800c422:	bf00      	nop
 800c424:	24000078 	.word	0x24000078

0800c428 <_kill_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d07      	ldr	r5, [pc, #28]	@ (800c448 <_kill_r+0x20>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	4604      	mov	r4, r0
 800c430:	4608      	mov	r0, r1
 800c432:	4611      	mov	r1, r2
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	f7f4 fed5 	bl	80011e4 <_kill>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d102      	bne.n	800c444 <_kill_r+0x1c>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	b103      	cbz	r3, 800c444 <_kill_r+0x1c>
 800c442:	6023      	str	r3, [r4, #0]
 800c444:	bd38      	pop	{r3, r4, r5, pc}
 800c446:	bf00      	nop
 800c448:	24000948 	.word	0x24000948

0800c44c <_getpid_r>:
 800c44c:	f7f4 bec2 	b.w	80011d4 <_getpid>

0800c450 <_malloc_usable_size_r>:
 800c450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c454:	1f18      	subs	r0, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfbc      	itt	lt
 800c45a:	580b      	ldrlt	r3, [r1, r0]
 800c45c:	18c0      	addlt	r0, r0, r3
 800c45e:	4770      	bx	lr

0800c460 <__swhatbuf_r>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	460c      	mov	r4, r1
 800c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c468:	2900      	cmp	r1, #0
 800c46a:	b096      	sub	sp, #88	@ 0x58
 800c46c:	4615      	mov	r5, r2
 800c46e:	461e      	mov	r6, r3
 800c470:	da0d      	bge.n	800c48e <__swhatbuf_r+0x2e>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c478:	f04f 0100 	mov.w	r1, #0
 800c47c:	bf14      	ite	ne
 800c47e:	2340      	movne	r3, #64	@ 0x40
 800c480:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c484:	2000      	movs	r0, #0
 800c486:	6031      	str	r1, [r6, #0]
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	b016      	add	sp, #88	@ 0x58
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	466a      	mov	r2, sp
 800c490:	f000 f848 	bl	800c524 <_fstat_r>
 800c494:	2800      	cmp	r0, #0
 800c496:	dbec      	blt.n	800c472 <__swhatbuf_r+0x12>
 800c498:	9901      	ldr	r1, [sp, #4]
 800c49a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c49e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4a2:	4259      	negs	r1, r3
 800c4a4:	4159      	adcs	r1, r3
 800c4a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4aa:	e7eb      	b.n	800c484 <__swhatbuf_r+0x24>

0800c4ac <__smakebuf_r>:
 800c4ac:	898b      	ldrh	r3, [r1, #12]
 800c4ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4b0:	079d      	lsls	r5, r3, #30
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	d507      	bpl.n	800c4c8 <__smakebuf_r+0x1c>
 800c4b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	6123      	str	r3, [r4, #16]
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	6163      	str	r3, [r4, #20]
 800c4c4:	b003      	add	sp, #12
 800c4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c8:	ab01      	add	r3, sp, #4
 800c4ca:	466a      	mov	r2, sp
 800c4cc:	f7ff ffc8 	bl	800c460 <__swhatbuf_r>
 800c4d0:	9f00      	ldr	r7, [sp, #0]
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f7fe fe06 	bl	800b0e8 <_malloc_r>
 800c4dc:	b948      	cbnz	r0, 800c4f2 <__smakebuf_r+0x46>
 800c4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e2:	059a      	lsls	r2, r3, #22
 800c4e4:	d4ee      	bmi.n	800c4c4 <__smakebuf_r+0x18>
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	f043 0302 	orr.w	r3, r3, #2
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	e7e2      	b.n	800c4b8 <__smakebuf_r+0xc>
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	6020      	str	r0, [r4, #0]
 800c4f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c502:	b15b      	cbz	r3, 800c51c <__smakebuf_r+0x70>
 800c504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f81d 	bl	800c548 <_isatty_r>
 800c50e:	b128      	cbz	r0, 800c51c <__smakebuf_r+0x70>
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	f023 0303 	bic.w	r3, r3, #3
 800c516:	f043 0301 	orr.w	r3, r3, #1
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	431d      	orrs	r5, r3
 800c520:	81a5      	strh	r5, [r4, #12]
 800c522:	e7cf      	b.n	800c4c4 <__smakebuf_r+0x18>

0800c524 <_fstat_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	@ (800c544 <_fstat_r+0x20>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	f7f4 feb7 	bl	80012a4 <_fstat>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	d102      	bne.n	800c540 <_fstat_r+0x1c>
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	b103      	cbz	r3, 800c540 <_fstat_r+0x1c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	24000948 	.word	0x24000948

0800c548 <_isatty_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	@ (800c564 <_isatty_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f4 feb6 	bl	80012c4 <_isatty>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_isatty_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_isatty_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	24000948 	.word	0x24000948

0800c568 <_init>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr

0800c574 <_fini>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr

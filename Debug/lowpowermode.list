
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be44  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c4cc  0800c4cc  0000d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c4d4  0800c4d4  0000d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c4d8  0800c4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f8  24000000  0800c4dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  240000f8  0800c5d4  0000e0f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400089c  0800c5d4  0000e89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a5ec  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c81  00000000  00000000  00028712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  0002c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cc0  00000000  00000000  0002d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362dc  00000000  00000000  0002e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c957  00000000  00000000  00064424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149ca7  00000000  00000000  00080d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001caa22  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e18  00000000  00000000  001caa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001cf880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f8 	.word	0x240000f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c0fc 	.word	0x0800c0fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000fc 	.word	0x240000fc
 800030c:	0800c0fc 	.word	0x0800c0fc

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a f9bb 	bl	800aa44 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a f9b7 	bl	800aa5c <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fd0b 	bl	800b10e <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fd05 	bl	800b10e <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000314 	.word	0x24000314
 8000710:	24000114 	.word	0x24000114

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a f99c 	bl	800aa7c <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a fa23 	bl	800ab96 <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000114 	.word	0x24000114

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fcce 	bl	800b120 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fcc1 	bl	800b120 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fbce 	bl	800b020 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fc56 	bl	8008142 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000060 	.word	0x24000060
 80008a4:	0800c150 	.word	0x0800c150
 80008a8:	24000114 	.word	0x24000114
 80008ac:	24000314 	.word	0x24000314
 80008b0:	2400033c 	.word	0x2400033c
 80008b4:	0800c154 	.word	0x0800c154
 80008b8:	0800c168 	.word	0x0800c168
 80008bc:	24000564 	.word	0x24000564

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 ffda 	bl	800a894 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fb8b 	bl	800b020 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fc14 	bl	8008142 <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c16c 	.word	0x0800c16c
 8000928:	24000564 	.word	0x24000564

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fbe1 	bl	800b120 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a f95c 	bl	800ac20 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fbce 	bl	800b120 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fbb6 	bl	800b120 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a f931 	bl	800ac20 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fba3 	bl	800b120 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 ff03 	bl	800a804 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fb0b 	bl	800b020 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fb94 	bl	8008142 <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c1b8 	.word	0x0800c1b8
 8000a28:	0800c1a0 	.word	0x0800c1a0
 8000a2c:	0800c1a4 	.word	0x0800c1a4
 8000a30:	0800c1a8 	.word	0x0800c1a8
 8000a34:	24000564 	.word	0x24000564

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fb5b 	bl	800b120 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a f8d6 	bl	800ac20 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fb48 	bl	800b120 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fb30 	bl	800b120 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a f8ab 	bl	800ac20 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fb1d 	bl	800b120 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 fef3 	bl	800a8f0 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fa85 	bl	800b020 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fb0e 	bl	8008142 <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c1b8 	.word	0x0800c1b8
 8000b34:	0800c1a0 	.word	0x0800c1a0
 8000b38:	0800c1a4 	.word	0x0800c1a4
 8000b3c:	0800c1bc 	.word	0x0800c1bc
 8000b40:	24000564 	.word	0x24000564

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <setCSleep+0x34>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f00a fa63 	bl	800b020 <sniprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <setCSleep+0x38>)
 8000b66:	f007 faec 	bl	8008142 <HAL_UART_Transmit>

	startSleepMode();
 8000b6a:	f009 fde9 	bl	800a740 <startSleepMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800c1cc 	.word	0x0800c1cc
 8000b7c:	24000564 	.word	0x24000564

08000b80 <setStopMode>:

static void setStopMode(char ** args, char *response)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	setStopModeFlag(true);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f009 fe08 	bl	800a7a0 <setStopModeFlag>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	491f      	ldr	r1, [pc, #124]	@ (8000c2c <setGreenLed+0x94>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fbae 	bl	8000310 <strcmp>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10d      	bne.n	8000bd6 <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <setGreenLed+0x98>)
 8000bc0:	f003 ff1a 	bl	80049f8 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <setGreenLed+0x9c>)
 8000bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f00a fa28 	bl	800b020 <sniprintf>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	81fb      	strh	r3, [r7, #14]
 8000bd4:	e01f      	b.n	8000c16 <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4916      	ldr	r1, [pc, #88]	@ (8000c38 <setGreenLed+0xa0>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fb96 	bl	8000310 <strcmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10d      	bne.n	8000c06 <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <setGreenLed+0x98>)
 8000bf0:	f003 ff02 	bl	80049f8 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000bf4:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <setGreenLed+0xa4>)
 8000bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfa:	6838      	ldr	r0, [r7, #0]
 8000bfc:	f00a fa10 	bl	800b020 <sniprintf>
 8000c00:	4603      	mov	r3, r0
 8000c02:	81fb      	strh	r3, [r7, #14]
 8000c04:	e007      	b.n	8000c16 <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000c06:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <setGreenLed+0xa8>)
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f00a fa07 	bl	800b020 <sniprintf>
 8000c12:	4603      	mov	r3, r0
 8000c14:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000c16:	89fa      	ldrh	r2, [r7, #14]
 8000c18:	2364      	movs	r3, #100	@ 0x64
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <setGreenLed+0xac>)
 8000c1e:	f007 fa90 	bl	8008142 <HAL_UART_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800c1ec 	.word	0x0800c1ec
 8000c30:	58020400 	.word	0x58020400
 8000c34:	0800c1f0 	.word	0x0800c1f0
 8000c38:	0800c200 	.word	0x0800c200
 8000c3c:	0800c204 	.word	0x0800c204
 8000c40:	0800c218 	.word	0x0800c218
 8000c44:	24000564 	.word	0x24000564

08000c48 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c4c:	f009 fedc 	bl	800aa08 <debugUartInit>

	RTCInit();
 8000c50:	f009 fdb6 	bl	800a7c0 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <systemInit+0x2c>)
 8000c5a:	f003 fecd 	bl	80049f8 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c5e:	2210      	movs	r2, #16
 8000c60:	4905      	ldr	r1, [pc, #20]	@ (8000c78 <systemInit+0x30>)
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <systemInit+0x34>)
 8000c64:	f007 fafc 	bl	8008260 <HAL_UART_Transmit_IT>

	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4);
 8000c68:	2008      	movs	r0, #8
 8000c6a:	f003 ff1f 	bl	8004aac <HAL_PWR_DisableWakeUpPin>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58020400 	.word	0x58020400
 8000c78:	0800c224 	.word	0x0800c224
 8000c7c:	24000564 	.word	0x24000564

08000c80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <MX_DMA_Init+0x3c>)
 8000c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <MX_DMA_Init+0x3c>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_DMA_Init+0x3c>)
 8000c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f000 fe90 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cae:	200b      	movs	r0, #11
 8000cb0:	f000 fea7 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b89      	ldr	r3, [pc, #548]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	4a87      	ldr	r2, [pc, #540]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce6:	4b85      	ldr	r3, [pc, #532]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf4:	4b81      	ldr	r3, [pc, #516]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	4a80      	ldr	r2, [pc, #512]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d04:	4b7d      	ldr	r3, [pc, #500]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b7a      	ldr	r3, [pc, #488]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	4a78      	ldr	r2, [pc, #480]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d22:	4b76      	ldr	r3, [pc, #472]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b72      	ldr	r3, [pc, #456]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a71      	ldr	r2, [pc, #452]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b6e      	ldr	r3, [pc, #440]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a69      	ldr	r2, [pc, #420]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b67      	ldr	r3, [pc, #412]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	4a62      	ldr	r2, [pc, #392]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	4a5a      	ldr	r2, [pc, #360]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9a:	4b58      	ldr	r3, [pc, #352]	@ (8000efc <MX_GPIO_Init+0x23c>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000dae:	4854      	ldr	r0, [pc, #336]	@ (8000f00 <MX_GPIO_Init+0x240>)
 8000db0:	f003 fe22 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dba:	4852      	ldr	r0, [pc, #328]	@ (8000f04 <MX_GPIO_Init+0x244>)
 8000dbc:	f003 fe1c 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4850      	ldr	r0, [pc, #320]	@ (8000f08 <MX_GPIO_Init+0x248>)
 8000dc6:	f003 fe17 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dca:	2332      	movs	r3, #50	@ 0x32
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4849      	ldr	r0, [pc, #292]	@ (8000f0c <MX_GPIO_Init+0x24c>)
 8000de6:	f003 fc5f 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dea:	2386      	movs	r3, #134	@ 0x86
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4842      	ldr	r0, [pc, #264]	@ (8000f10 <MX_GPIO_Init+0x250>)
 8000e06:	f003 fc4f 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e0a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4837      	ldr	r0, [pc, #220]	@ (8000f00 <MX_GPIO_Init+0x240>)
 8000e24:	f003 fc40 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	482e      	ldr	r0, [pc, #184]	@ (8000f00 <MX_GPIO_Init+0x240>)
 8000e46:	f003 fc2f 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4828      	ldr	r0, [pc, #160]	@ (8000f04 <MX_GPIO_Init+0x244>)
 8000e64:	f003 fc20 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4825      	ldr	r0, [pc, #148]	@ (8000f14 <MX_GPIO_Init+0x254>)
 8000e7e:	f003 fc13 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e94:	230a      	movs	r3, #10
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <MX_GPIO_Init+0x250>)
 8000ea0:	f003 fc02 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ea4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <MX_GPIO_Init+0x254>)
 8000ec2:	f003 fbf1 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <MX_GPIO_Init+0x248>)
 8000ede:	f003 fbe3 	bl	80046a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2017      	movs	r0, #23
 8000ee8:	f000 fd71 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eec:	2017      	movs	r0, #23
 8000eee:	f000 fd88 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	@ 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	58024400 	.word	0x58024400
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58020c00 	.word	0x58020c00
 8000f08:	58021000 	.word	0x58021000
 8000f0c:	58020800 	.word	0x58020800
 8000f10:	58020000 	.word	0x58020000
 8000f14:	58021800 	.word	0x58021800

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fbea 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f810 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff fecc 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f28:	f7ff feaa 	bl	8000c80 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f2c:	f000 fac8 	bl	80014c0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000f30:	f000 f888 	bl	8001044 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000f34:	f7ff fe88 	bl	8000c48 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000f38:	f7ff fbc2 	bl	80006c0 <debugCLITask>

	  stopModeTask();
 8000f3c:	f009 fbd6 	bl	800a6ec <stopModeTask>
	  debugCLITask();
 8000f40:	bf00      	nop
 8000f42:	e7f9      	b.n	8000f38 <main+0x20>

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	224c      	movs	r2, #76	@ 0x4c
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00a f8db 	bl	800b10e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00a f8d5 	bl	800b10e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f64:	2002      	movs	r0, #2
 8000f66:	f003 fdfd 	bl	8004b64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <SystemClock_Config+0xec>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <SystemClock_Config+0xec>)
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <SystemClock_Config+0xec>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f86:	bf00      	nop
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <SystemClock_Config+0xec>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f94:	d1f8      	bne.n	8000f88 <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f96:	f003 fd63 	bl	8004a60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <SystemClock_Config+0xf0>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f9e:	4a25      	ldr	r2, [pc, #148]	@ (8001034 <SystemClock_Config+0xf0>)
 8000fa0:	f023 0318 	bic.w	r3, r3, #24
 8000fa4:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000fc0:	f240 1313 	movw	r3, #275	@ 0x113
 8000fc4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fe4a 	bl	8004c7c <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fee:	f000 f823 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	233f      	movs	r3, #63	@ 0x3f
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ffe:	2308      	movs	r3, #8
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001002:	2340      	movs	r3, #64	@ 0x40
 8001004:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001006:	2340      	movs	r3, #64	@ 0x40
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800100a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fa09 	bl	8005430 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001024:	f000 f808 	bl	8001038 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3770      	adds	r7, #112	@ 0x70
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024800 	.word	0x58024800
 8001034:	58024400 	.word	0x58024400

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <MX_RTC_Init+0xb0>)
 800105e:	4a26      	ldr	r2, [pc, #152]	@ (80010f8 <MX_RTC_Init+0xb4>)
 8001060:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001062:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <MX_RTC_Init+0xb0>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <MX_RTC_Init+0xb0>)
 800106a:	227f      	movs	r2, #127	@ 0x7f
 800106c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <MX_RTC_Init+0xb0>)
 8001070:	22ff      	movs	r2, #255	@ 0xff
 8001072:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_RTC_Init+0xb0>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_RTC_Init+0xb0>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_RTC_Init+0xb0>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_RTC_Init+0xb0>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800108c:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <MX_RTC_Init+0xb0>)
 800108e:	f006 fb1d 	bl	80076cc <HAL_RTC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001098:	f7ff ffce 	bl	8001038 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800109c:	2300      	movs	r3, #0
 800109e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	@ (80010f4 <MX_RTC_Init+0xb0>)
 80010b8:	f006 fb8a 	bl	80077d0 <HAL_RTC_SetTime>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010c2:	f7ff ffb9 	bl	8001038 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010c6:	2301      	movs	r3, #1
 80010c8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010ca:	2301      	movs	r3, #1
 80010cc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_RTC_Init+0xb0>)
 80010de:	f006 fc71 	bl	80079c4 <HAL_RTC_SetDate>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010e8:	f7ff ffa6 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2400053c 	.word	0x2400053c
 80010f8:	58004000 	.word	0x58004000

080010fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b0      	sub	sp, #192	@ 0xc0
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	22b8      	movs	r2, #184	@ 0xb8
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f009 fffe 	bl	800b10e <memset>
  if(rtcHandle->Instance==RTC)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_RTC_MspInit+0x5c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d119      	bne.n	8001150 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800111c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f004 fd07 	bl	8005b48 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001140:	f7ff ff7a 	bl	8001038 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_RTC_MspInit+0x60>)
 8001146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_RTC_MspInit+0x60>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	37c0      	adds	r7, #192	@ 0xc0
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58004000 	.word	0x58004000
 800115c:	58024400 	.word	0x58024400

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_MspInit+0x3c>)
 8001168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_MspInit+0x3c>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <HAL_MspInit+0x3c>)
 8001178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fc20 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 fc37 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	58024400 	.word	0x58024400

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <NMI_Handler+0x4>

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <MemManage_Handler+0x4>

080011b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f6:	f000 faef 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD/AVD through EXTI Line detection Interrupt.
  */
void PVD_AVD_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8001202:	f003 fce9 	bl	8004bd8 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <DMA1_Stream0_IRQHandler+0x10>)
 8001212:	f001 ff37 	bl	8003084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	240005f8 	.word	0x240005f8

08001220 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001224:	2080      	movs	r0, #128	@ 0x80
 8001226:	f003 fc00 	bl	8004a2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <USART3_IRQHandler+0x10>)
 8001236:	f007 f8f3 	bl	8008420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000564 	.word	0x24000564

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125e:	f00a f811 	bl	800b284 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <_exit+0x12>

0800128a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e00a      	b.n	80012b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129c:	f3af 8000 	nop.w
 80012a0:	4601      	mov	r1, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf0      	blt.n	800129c <_read+0x12>
  }

  return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e009      	b.n	80012ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	60ba      	str	r2, [r7, #8]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbf1      	blt.n	80012d6 <_write+0x12>
  }
  return len;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_close>:

int _close(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001324:	605a      	str	r2, [r3, #4]
  return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_isatty>:

int _isatty(int file)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f009 ff76 	bl	800b284 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24050000 	.word	0x24050000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	24000560 	.word	0x24000560
 80013cc:	240008a0 	.word	0x240008a0

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d4:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <SystemInit+0xd0>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <SystemInit+0xd0>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e4:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <SystemInit+0xd4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	d807      	bhi.n	8001400 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f0:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <SystemInit+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 030f 	bic.w	r3, r3, #15
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <SystemInit+0xd4>)
 80013fa:	f043 0307 	orr.w	r3, r3, #7
 80013fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001400:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <SystemInit+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a28      	ldr	r2, [pc, #160]	@ (80014a8 <SystemInit+0xd8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <SystemInit+0xd8>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <SystemInit+0xd8>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4924      	ldr	r1, [pc, #144]	@ (80014a8 <SystemInit+0xd8>)
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <SystemInit+0xdc>)
 800141a:	4013      	ands	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <SystemInit+0xd4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <SystemInit+0xd4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <SystemInit+0xd4>)
 8001434:	f043 0307 	orr.w	r3, r3, #7
 8001438:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800143a:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <SystemInit+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <SystemInit+0xd8>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <SystemInit+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <SystemInit+0xd8>)
 800144e:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <SystemInit+0xe0>)
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <SystemInit+0xd8>)
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <SystemInit+0xe4>)
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <SystemInit+0xd8>)
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <SystemInit+0xe8>)
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <SystemInit+0xd8>)
 8001466:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <SystemInit+0xe8>)
 8001468:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <SystemInit+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <SystemInit+0xd8>)
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <SystemInit+0xe8>)
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001476:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <SystemInit+0xd8>)
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <SystemInit+0xd8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <SystemInit+0xd8>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <SystemInit+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <SystemInit+0xec>)
 8001490:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001494:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	52002000 	.word	0x52002000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b0:	02020200 	.word	0x02020200
 80014b4:	01ff0000 	.word	0x01ff0000
 80014b8:	01010280 	.word	0x01010280
 80014bc:	52004000 	.word	0x52004000

080014c0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <MX_USART3_UART_Init+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001508:	4811      	ldr	r0, [pc, #68]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 800150a:	f006 fdca 	bl	80080a2 <HAL_UART_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001514:	f7ff fd90 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 800151c:	f008 fffb 	bl	800a516 <HAL_UARTEx_SetTxFifoThreshold>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001526:	f7ff fd87 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152a:	2100      	movs	r1, #0
 800152c:	4808      	ldr	r0, [pc, #32]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 800152e:	f009 f830 	bl	800a592 <HAL_UARTEx_SetRxFifoThreshold>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001538:	f7ff fd7e 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_USART3_UART_Init+0x90>)
 800153e:	f008 ffb1 	bl	800a4a4 <HAL_UARTEx_DisableFifoMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001548:	f7ff fd76 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	24000564 	.word	0x24000564
 8001554:	40004800 	.word	0x40004800

08001558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0b8      	sub	sp, #224	@ 0xe0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	22b8      	movs	r2, #184	@ 0xb8
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f009 fdc8 	bl	800b10e <memset>
  if(uartHandle->Instance==USART3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a42      	ldr	r2, [pc, #264]	@ (800168c <HAL_UART_MspInit+0x134>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d17d      	bne.n	8001684 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001588:	f04f 0202 	mov.w	r2, #2
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fad2 	bl	8005b48 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015aa:	f7ff fd45 	bl	8001038 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ae:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b4:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <HAL_UART_MspInit+0x138>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80015ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001604:	2307      	movs	r3, #7
 8001606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800160e:	4619      	mov	r1, r3
 8001610:	4820      	ldr	r0, [pc, #128]	@ (8001694 <HAL_UART_MspInit+0x13c>)
 8001612:	f003 f849 	bl	80046a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001618:	4a20      	ldr	r2, [pc, #128]	@ (800169c <HAL_UART_MspInit+0x144>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800161c:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <HAL_UART_MspInit+0x140>)
 800161e:	222d      	movs	r2, #45	@ 0x2d
 8001620:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_UART_MspInit+0x140>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <HAL_UART_MspInit+0x140>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001648:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_UART_MspInit+0x140>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001656:	4810      	ldr	r0, [pc, #64]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001658:	f000 f9ee 	bl	8001a38 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001662:	f7ff fce9 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <HAL_UART_MspInit+0x140>)
 800166a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_UART_MspInit+0x140>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2027      	movs	r0, #39	@ 0x27
 800167a:	f000 f9a8 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800167e:	2027      	movs	r0, #39	@ 0x27
 8001680:	f000 f9bf 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	37e0      	adds	r7, #224	@ 0xe0
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40004800 	.word	0x40004800
 8001690:	58024400 	.word	0x58024400
 8001694:	58020c00 	.word	0x58020c00
 8001698:	240005f8 	.word	0x240005f8
 800169c:	40020010 	.word	0x40020010

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a4:	f7ff fe94 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f009 fddf 	bl	800b290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7ff fc21 	bl	8000f18 <main>
  bx  lr
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e0:	240000f8 	.word	0x240000f8
  ldr r2, =_sidata
 80016e4:	0800c4dc 	.word	0x0800c4dc
  ldr r2, =_sbss
 80016e8:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 80016ec:	2400089c 	.word	0x2400089c

080016f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC3_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fa:	2003      	movs	r0, #3
 80016fc:	f000 f95c 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001700:	f004 f84c 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_Init+0x68>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	4913      	ldr	r1, [pc, #76]	@ (8001760 <HAL_Init+0x6c>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_Init+0x68>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a0e      	ldr	r2, [pc, #56]	@ (8001760 <HAL_Init+0x6c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_Init+0x70>)
 8001736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_Init+0x74>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f814 	bl	800176c <HAL_InitTick>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e002      	b.n	8001754 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800174e:	f7ff fd07 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	58024400 	.word	0x58024400
 8001760:	0800c2a8 	.word	0x0800c2a8
 8001764:	24000088 	.word	0x24000088
 8001768:	24000084 	.word	0x24000084

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_InitTick+0x60>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e021      	b.n	80017c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_InitTick+0x64>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_InitTick+0x60>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f941 	bl	8001a1e <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f000 f90b 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_InitTick+0x68>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	24000090 	.word	0x24000090
 80017d0:	24000084 	.word	0x24000084
 80017d4:	2400008c 	.word	0x2400008c

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	24000090 	.word	0x24000090
 80017fc:	24000670 	.word	0x24000670

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	24000670 	.word	0x24000670

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0000 	.word	0x05fa0000

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff40 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff33 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa4 	bl	8001974 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fede 	bl	8001800 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e312      	b.n	8002076 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a66      	ldr	r2, [pc, #408]	@ (8001bf0 <HAL_DMA_Init+0x1b8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d04a      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_DMA_Init+0x1bc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d045      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a63      	ldr	r2, [pc, #396]	@ (8001bf8 <HAL_DMA_Init+0x1c0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d040      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a62      	ldr	r2, [pc, #392]	@ (8001bfc <HAL_DMA_Init+0x1c4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d03b      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a60      	ldr	r2, [pc, #384]	@ (8001c00 <HAL_DMA_Init+0x1c8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d036      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5f      	ldr	r2, [pc, #380]	@ (8001c04 <HAL_DMA_Init+0x1cc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d031      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_DMA_Init+0x1d0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02c      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c0c <HAL_DMA_Init+0x1d4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d027      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c10 <HAL_DMA_Init+0x1d8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a59      	ldr	r2, [pc, #356]	@ (8001c14 <HAL_DMA_Init+0x1dc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d01d      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	@ (8001c18 <HAL_DMA_Init+0x1e0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_DMA_Init+0x1e4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a54      	ldr	r2, [pc, #336]	@ (8001c20 <HAL_DMA_Init+0x1e8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a53      	ldr	r2, [pc, #332]	@ (8001c24 <HAL_DMA_Init+0x1ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a51      	ldr	r2, [pc, #324]	@ (8001c28 <HAL_DMA_Init+0x1f0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_DMA_Init+0xb8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a50      	ldr	r2, [pc, #320]	@ (8001c2c <HAL_DMA_Init+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Init+0xbc>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_DMA_Init+0xbe>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 813c 	beq.w	8001d74 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a37      	ldr	r2, [pc, #220]	@ (8001bf0 <HAL_DMA_Init+0x1b8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04a      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a36      	ldr	r2, [pc, #216]	@ (8001bf4 <HAL_DMA_Init+0x1bc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d045      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a34      	ldr	r2, [pc, #208]	@ (8001bf8 <HAL_DMA_Init+0x1c0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d040      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a33      	ldr	r2, [pc, #204]	@ (8001bfc <HAL_DMA_Init+0x1c4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d03b      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <HAL_DMA_Init+0x1c8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d036      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <HAL_DMA_Init+0x1cc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d031      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c08 <HAL_DMA_Init+0x1d0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02c      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <HAL_DMA_Init+0x1d4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d027      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	@ (8001c10 <HAL_DMA_Init+0x1d8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d022      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c14 <HAL_DMA_Init+0x1dc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01d      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <HAL_DMA_Init+0x1e0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d018      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a27      	ldr	r2, [pc, #156]	@ (8001c1c <HAL_DMA_Init+0x1e4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a25      	ldr	r2, [pc, #148]	@ (8001c20 <HAL_DMA_Init+0x1e8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00e      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_DMA_Init+0x1ec>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_DMA_Init+0x1f0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_Init+0x174>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <HAL_DMA_Init+0x1f4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d108      	bne.n	8001bbe <HAL_DMA_Init+0x186>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_DMA_Init+0x196>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bce:	e02f      	b.n	8001c30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bd0:	f7ff fe16 	bl	8001800 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d928      	bls.n	8001c30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e242      	b.n	8002076 <HAL_DMA_Init+0x63e>
 8001bf0:	40020010 	.word	0x40020010
 8001bf4:	40020028 	.word	0x40020028
 8001bf8:	40020040 	.word	0x40020040
 8001bfc:	40020058 	.word	0x40020058
 8001c00:	40020070 	.word	0x40020070
 8001c04:	40020088 	.word	0x40020088
 8001c08:	400200a0 	.word	0x400200a0
 8001c0c:	400200b8 	.word	0x400200b8
 8001c10:	40020410 	.word	0x40020410
 8001c14:	40020428 	.word	0x40020428
 8001c18:	40020440 	.word	0x40020440
 8001c1c:	40020458 	.word	0x40020458
 8001c20:	40020470 	.word	0x40020470
 8001c24:	40020488 	.word	0x40020488
 8001c28:	400204a0 	.word	0x400204a0
 8001c2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1c8      	bne.n	8001bd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4b83      	ldr	r3, [pc, #524]	@ (8001e58 <HAL_DMA_Init+0x420>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d107      	bne.n	8001c94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b28      	cmp	r3, #40	@ 0x28
 8001c9a:	d903      	bls.n	8001ca4 <HAL_DMA_Init+0x26c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ca2:	d91f      	bls.n	8001ce4 <HAL_DMA_Init+0x2ac>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001caa:	d903      	bls.n	8001cb4 <HAL_DMA_Init+0x27c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b42      	cmp	r3, #66	@ 0x42
 8001cb2:	d917      	bls.n	8001ce4 <HAL_DMA_Init+0x2ac>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b46      	cmp	r3, #70	@ 0x46
 8001cba:	d903      	bls.n	8001cc4 <HAL_DMA_Init+0x28c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b48      	cmp	r3, #72	@ 0x48
 8001cc2:	d90f      	bls.n	8001ce4 <HAL_DMA_Init+0x2ac>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001cca:	d903      	bls.n	8001cd4 <HAL_DMA_Init+0x29c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b52      	cmp	r3, #82	@ 0x52
 8001cd2:	d907      	bls.n	8001ce4 <HAL_DMA_Init+0x2ac>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b73      	cmp	r3, #115	@ 0x73
 8001cda:	d905      	bls.n	8001ce8 <HAL_DMA_Init+0x2b0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b77      	cmp	r3, #119	@ 0x77
 8001ce2:	d801      	bhi.n	8001ce8 <HAL_DMA_Init+0x2b0>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_DMA_Init+0x2b2>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cf4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f023 0307 	bic.w	r3, r3, #7
 8001d0c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d117      	bne.n	8001d50 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f002 fb2e 	bl	8004394 <DMA_CheckFifoParam>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2240      	movs	r2, #64	@ 0x40
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e192      	b.n	8002076 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f002 fa69 	bl	8004230 <DMA_CalcBaseAndBitshift>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	223f      	movs	r2, #63	@ 0x3f
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	e0c8      	b.n	8001f06 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a38      	ldr	r2, [pc, #224]	@ (8001e5c <HAL_DMA_Init+0x424>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d022      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a37      	ldr	r2, [pc, #220]	@ (8001e60 <HAL_DMA_Init+0x428>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d01d      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a35      	ldr	r2, [pc, #212]	@ (8001e64 <HAL_DMA_Init+0x42c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d018      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <HAL_DMA_Init+0x430>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a32      	ldr	r2, [pc, #200]	@ (8001e6c <HAL_DMA_Init+0x434>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00e      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a31      	ldr	r2, [pc, #196]	@ (8001e70 <HAL_DMA_Init+0x438>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e74 <HAL_DMA_Init+0x43c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_Init+0x38c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001e78 <HAL_DMA_Init+0x440>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Init+0x390>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_Init+0x392>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8092 	beq.w	8001ef4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <HAL_DMA_Init+0x424>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d021      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a20      	ldr	r2, [pc, #128]	@ (8001e60 <HAL_DMA_Init+0x428>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d01c      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <HAL_DMA_Init+0x42c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d017      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <HAL_DMA_Init+0x430>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d012      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_DMA_Init+0x434>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1a      	ldr	r2, [pc, #104]	@ (8001e70 <HAL_DMA_Init+0x438>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a18      	ldr	r2, [pc, #96]	@ (8001e74 <HAL_DMA_Init+0x43c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <HAL_DMA_Init+0x3e6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_DMA_Init+0x440>)
 8001e1c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_DMA_Init+0x444>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b40      	cmp	r3, #64	@ 0x40
 8001e44:	d01c      	beq.n	8001e80 <HAL_DMA_Init+0x448>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b80      	cmp	r3, #128	@ 0x80
 8001e4c:	d102      	bne.n	8001e54 <HAL_DMA_Init+0x41c>
 8001e4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e52:	e016      	b.n	8001e82 <HAL_DMA_Init+0x44a>
 8001e54:	2300      	movs	r3, #0
 8001e56:	e014      	b.n	8001e82 <HAL_DMA_Init+0x44a>
 8001e58:	fe10803f 	.word	0xfe10803f
 8001e5c:	58025408 	.word	0x58025408
 8001e60:	5802541c 	.word	0x5802541c
 8001e64:	58025430 	.word	0x58025430
 8001e68:	58025444 	.word	0x58025444
 8001e6c:	58025458 	.word	0x58025458
 8001e70:	5802546c 	.word	0x5802546c
 8001e74:	58025480 	.word	0x58025480
 8001e78:	58025494 	.word	0x58025494
 8001e7c:	fffe000f 	.word	0xfffe000f
 8001e80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001eb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8002080 <HAL_DMA_Init+0x648>)
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a6e      	ldr	r2, [pc, #440]	@ (8002084 <HAL_DMA_Init+0x64c>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	009a      	lsls	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f002 f9a9 	bl	8004230 <DMA_CalcBaseAndBitshift>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e008      	b.n	8001f06 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2240      	movs	r2, #64	@ 0x40
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0b7      	b.n	8002076 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002088 <HAL_DMA_Init+0x650>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d072      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5d      	ldr	r2, [pc, #372]	@ (800208c <HAL_DMA_Init+0x654>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d06d      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002090 <HAL_DMA_Init+0x658>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d068      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5a      	ldr	r2, [pc, #360]	@ (8002094 <HAL_DMA_Init+0x65c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d063      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a59      	ldr	r2, [pc, #356]	@ (8002098 <HAL_DMA_Init+0x660>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d05e      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a57      	ldr	r2, [pc, #348]	@ (800209c <HAL_DMA_Init+0x664>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d059      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a56      	ldr	r2, [pc, #344]	@ (80020a0 <HAL_DMA_Init+0x668>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d054      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a54      	ldr	r2, [pc, #336]	@ (80020a4 <HAL_DMA_Init+0x66c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d04f      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a53      	ldr	r2, [pc, #332]	@ (80020a8 <HAL_DMA_Init+0x670>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a51      	ldr	r2, [pc, #324]	@ (80020ac <HAL_DMA_Init+0x674>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a50      	ldr	r2, [pc, #320]	@ (80020b0 <HAL_DMA_Init+0x678>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4e      	ldr	r2, [pc, #312]	@ (80020b4 <HAL_DMA_Init+0x67c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4d      	ldr	r2, [pc, #308]	@ (80020b8 <HAL_DMA_Init+0x680>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80020bc <HAL_DMA_Init+0x684>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4a      	ldr	r2, [pc, #296]	@ (80020c0 <HAL_DMA_Init+0x688>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a48      	ldr	r2, [pc, #288]	@ (80020c4 <HAL_DMA_Init+0x68c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a47      	ldr	r2, [pc, #284]	@ (80020c8 <HAL_DMA_Init+0x690>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a45      	ldr	r2, [pc, #276]	@ (80020cc <HAL_DMA_Init+0x694>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a44      	ldr	r2, [pc, #272]	@ (80020d0 <HAL_DMA_Init+0x698>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <HAL_DMA_Init+0x69c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a41      	ldr	r2, [pc, #260]	@ (80020d8 <HAL_DMA_Init+0x6a0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <HAL_DMA_Init+0x6a4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80020e0 <HAL_DMA_Init+0x6a8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Init+0x5be>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_DMA_Init+0x6ac>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Init+0x5c2>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_Init+0x5c4>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d032      	beq.n	8002066 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f002 fa43 	bl	800448c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b80      	cmp	r3, #128	@ 0x80
 800200c:	d102      	bne.n	8002014 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002028:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <HAL_DMA_Init+0x61c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d80c      	bhi.n	8002054 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f002 fac0 	bl	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	e008      	b.n	8002066 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	a7fdabf8 	.word	0xa7fdabf8
 8002084:	cccccccd 	.word	0xcccccccd
 8002088:	40020010 	.word	0x40020010
 800208c:	40020028 	.word	0x40020028
 8002090:	40020040 	.word	0x40020040
 8002094:	40020058 	.word	0x40020058
 8002098:	40020070 	.word	0x40020070
 800209c:	40020088 	.word	0x40020088
 80020a0:	400200a0 	.word	0x400200a0
 80020a4:	400200b8 	.word	0x400200b8
 80020a8:	40020410 	.word	0x40020410
 80020ac:	40020428 	.word	0x40020428
 80020b0:	40020440 	.word	0x40020440
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020470 	.word	0x40020470
 80020bc:	40020488 	.word	0x40020488
 80020c0:	400204a0 	.word	0x400204a0
 80020c4:	400204b8 	.word	0x400204b8
 80020c8:	58025408 	.word	0x58025408
 80020cc:	5802541c 	.word	0x5802541c
 80020d0:	58025430 	.word	0x58025430
 80020d4:	58025444 	.word	0x58025444
 80020d8:	58025458 	.word	0x58025458
 80020dc:	5802546c 	.word	0x5802546c
 80020e0:	58025480 	.word	0x58025480
 80020e4:	58025494 	.word	0x58025494

080020e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e226      	b.n	8002552 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_DMA_Start_IT+0x2a>
 800210e:	2302      	movs	r3, #2
 8002110:	e21f      	b.n	8002552 <HAL_DMA_Start_IT+0x46a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	f040 820a 	bne.w	800253c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a68      	ldr	r2, [pc, #416]	@ (80022dc <HAL_DMA_Start_IT+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a66      	ldr	r2, [pc, #408]	@ (80022e0 <HAL_DMA_Start_IT+0x1f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a65      	ldr	r2, [pc, #404]	@ (80022e4 <HAL_DMA_Start_IT+0x1fc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a63      	ldr	r2, [pc, #396]	@ (80022e8 <HAL_DMA_Start_IT+0x200>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a62      	ldr	r2, [pc, #392]	@ (80022ec <HAL_DMA_Start_IT+0x204>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a60      	ldr	r2, [pc, #384]	@ (80022f0 <HAL_DMA_Start_IT+0x208>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5f      	ldr	r2, [pc, #380]	@ (80022f4 <HAL_DMA_Start_IT+0x20c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5d      	ldr	r2, [pc, #372]	@ (80022f8 <HAL_DMA_Start_IT+0x210>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5c      	ldr	r2, [pc, #368]	@ (80022fc <HAL_DMA_Start_IT+0x214>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5a      	ldr	r2, [pc, #360]	@ (8002300 <HAL_DMA_Start_IT+0x218>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a59      	ldr	r2, [pc, #356]	@ (8002304 <HAL_DMA_Start_IT+0x21c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a57      	ldr	r2, [pc, #348]	@ (8002308 <HAL_DMA_Start_IT+0x220>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a56      	ldr	r2, [pc, #344]	@ (800230c <HAL_DMA_Start_IT+0x224>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a54      	ldr	r2, [pc, #336]	@ (8002310 <HAL_DMA_Start_IT+0x228>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a53      	ldr	r2, [pc, #332]	@ (8002314 <HAL_DMA_Start_IT+0x22c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Start_IT+0xee>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a51      	ldr	r2, [pc, #324]	@ (8002318 <HAL_DMA_Start_IT+0x230>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <HAL_DMA_Start_IT+0x100>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_DMA_Start_IT+0x110>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f001 fe6a 	bl	8003ed8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a34      	ldr	r2, [pc, #208]	@ (80022dc <HAL_DMA_Start_IT+0x1f4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d04a      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a33      	ldr	r2, [pc, #204]	@ (80022e0 <HAL_DMA_Start_IT+0x1f8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d045      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a31      	ldr	r2, [pc, #196]	@ (80022e4 <HAL_DMA_Start_IT+0x1fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d040      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a30      	ldr	r2, [pc, #192]	@ (80022e8 <HAL_DMA_Start_IT+0x200>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d03b      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2e      	ldr	r2, [pc, #184]	@ (80022ec <HAL_DMA_Start_IT+0x204>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d036      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <HAL_DMA_Start_IT+0x208>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d031      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <HAL_DMA_Start_IT+0x20c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02c      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2a      	ldr	r2, [pc, #168]	@ (80022f8 <HAL_DMA_Start_IT+0x210>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d027      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a28      	ldr	r2, [pc, #160]	@ (80022fc <HAL_DMA_Start_IT+0x214>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_DMA_Start_IT+0x218>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d01d      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	@ (8002304 <HAL_DMA_Start_IT+0x21c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d018      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a24      	ldr	r2, [pc, #144]	@ (8002308 <HAL_DMA_Start_IT+0x220>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a22      	ldr	r2, [pc, #136]	@ (800230c <HAL_DMA_Start_IT+0x224>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_DMA_Start_IT+0x228>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_DMA_Start_IT+0x22c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_DMA_Start_IT+0x1bc>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <HAL_DMA_Start_IT+0x230>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Start_IT+0x1c0>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_DMA_Start_IT+0x1c2>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 021e 	bic.w	r2, r3, #30
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0216 	orr.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d03e      	beq.n	8002348 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0208 	orr.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e035      	b.n	8002348 <HAL_DMA_Start_IT+0x260>
 80022dc:	40020010 	.word	0x40020010
 80022e0:	40020028 	.word	0x40020028
 80022e4:	40020040 	.word	0x40020040
 80022e8:	40020058 	.word	0x40020058
 80022ec:	40020070 	.word	0x40020070
 80022f0:	40020088 	.word	0x40020088
 80022f4:	400200a0 	.word	0x400200a0
 80022f8:	400200b8 	.word	0x400200b8
 80022fc:	40020410 	.word	0x40020410
 8002300:	40020428 	.word	0x40020428
 8002304:	40020440 	.word	0x40020440
 8002308:	40020458 	.word	0x40020458
 800230c:	40020470 	.word	0x40020470
 8002310:	40020488 	.word	0x40020488
 8002314:	400204a0 	.word	0x400204a0
 8002318:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 020e 	bic.w	r2, r3, #14
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 020a 	orr.w	r2, r2, #10
 800232e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0204 	orr.w	r2, r2, #4
 8002346:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a83      	ldr	r2, [pc, #524]	@ (800255c <HAL_DMA_Start_IT+0x474>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d072      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a82      	ldr	r2, [pc, #520]	@ (8002560 <HAL_DMA_Start_IT+0x478>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d06d      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a80      	ldr	r2, [pc, #512]	@ (8002564 <HAL_DMA_Start_IT+0x47c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d068      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7f      	ldr	r2, [pc, #508]	@ (8002568 <HAL_DMA_Start_IT+0x480>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d063      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7d      	ldr	r2, [pc, #500]	@ (800256c <HAL_DMA_Start_IT+0x484>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d05e      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7c      	ldr	r2, [pc, #496]	@ (8002570 <HAL_DMA_Start_IT+0x488>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d059      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a7a      	ldr	r2, [pc, #488]	@ (8002574 <HAL_DMA_Start_IT+0x48c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d054      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a79      	ldr	r2, [pc, #484]	@ (8002578 <HAL_DMA_Start_IT+0x490>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04f      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a77      	ldr	r2, [pc, #476]	@ (800257c <HAL_DMA_Start_IT+0x494>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04a      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a76      	ldr	r2, [pc, #472]	@ (8002580 <HAL_DMA_Start_IT+0x498>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d045      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a74      	ldr	r2, [pc, #464]	@ (8002584 <HAL_DMA_Start_IT+0x49c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d040      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a73      	ldr	r2, [pc, #460]	@ (8002588 <HAL_DMA_Start_IT+0x4a0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d03b      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a71      	ldr	r2, [pc, #452]	@ (800258c <HAL_DMA_Start_IT+0x4a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d036      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a70      	ldr	r2, [pc, #448]	@ (8002590 <HAL_DMA_Start_IT+0x4a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d031      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_DMA_Start_IT+0x4ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02c      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002598 <HAL_DMA_Start_IT+0x4b0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d027      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6b      	ldr	r2, [pc, #428]	@ (800259c <HAL_DMA_Start_IT+0x4b4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d022      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6a      	ldr	r2, [pc, #424]	@ (80025a0 <HAL_DMA_Start_IT+0x4b8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01d      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a68      	ldr	r2, [pc, #416]	@ (80025a4 <HAL_DMA_Start_IT+0x4bc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d018      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_DMA_Start_IT+0x4c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a65      	ldr	r2, [pc, #404]	@ (80025ac <HAL_DMA_Start_IT+0x4c4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00e      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a64      	ldr	r2, [pc, #400]	@ (80025b0 <HAL_DMA_Start_IT+0x4c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a62      	ldr	r2, [pc, #392]	@ (80025b4 <HAL_DMA_Start_IT+0x4cc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <HAL_DMA_Start_IT+0x350>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a61      	ldr	r2, [pc, #388]	@ (80025b8 <HAL_DMA_Start_IT+0x4d0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_DMA_Start_IT+0x354>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_DMA_Start_IT+0x356>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01a      	beq.n	8002478 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800245e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002476:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_DMA_Start_IT+0x474>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d04a      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a36      	ldr	r2, [pc, #216]	@ (8002560 <HAL_DMA_Start_IT+0x478>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d045      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_DMA_Start_IT+0x47c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d040      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a33      	ldr	r2, [pc, #204]	@ (8002568 <HAL_DMA_Start_IT+0x480>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d03b      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_DMA_Start_IT+0x484>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d036      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a30      	ldr	r2, [pc, #192]	@ (8002570 <HAL_DMA_Start_IT+0x488>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d031      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_DMA_Start_IT+0x48c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02c      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <HAL_DMA_Start_IT+0x490>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d027      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <HAL_DMA_Start_IT+0x494>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d022      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_DMA_Start_IT+0x498>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01d      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_DMA_Start_IT+0x49c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d018      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_DMA_Start_IT+0x4a0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_DMA_Start_IT+0x4a4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_DMA_Start_IT+0x4a8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_DMA_Start_IT+0x4ac>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_DMA_Start_IT+0x430>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_DMA_Start_IT+0x4b0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <HAL_DMA_Start_IT+0x442>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e012      	b.n	8002550 <HAL_DMA_Start_IT+0x468>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e009      	b.n	8002550 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40020010 	.word	0x40020010
 8002560:	40020028 	.word	0x40020028
 8002564:	40020040 	.word	0x40020040
 8002568:	40020058 	.word	0x40020058
 800256c:	40020070 	.word	0x40020070
 8002570:	40020088 	.word	0x40020088
 8002574:	400200a0 	.word	0x400200a0
 8002578:	400200b8 	.word	0x400200b8
 800257c:	40020410 	.word	0x40020410
 8002580:	40020428 	.word	0x40020428
 8002584:	40020440 	.word	0x40020440
 8002588:	40020458 	.word	0x40020458
 800258c:	40020470 	.word	0x40020470
 8002590:	40020488 	.word	0x40020488
 8002594:	400204a0 	.word	0x400204a0
 8002598:	400204b8 	.word	0x400204b8
 800259c:	58025408 	.word	0x58025408
 80025a0:	5802541c 	.word	0x5802541c
 80025a4:	58025430 	.word	0x58025430
 80025a8:	58025444 	.word	0x58025444
 80025ac:	58025458 	.word	0x58025458
 80025b0:	5802546c 	.word	0x5802546c
 80025b4:	58025480 	.word	0x58025480
 80025b8:	58025494 	.word	0x58025494

080025bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff f91c 	bl	8001800 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e2dc      	b.n	8002b8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d008      	beq.n	80025f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e2cd      	b.n	8002b8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a76      	ldr	r2, [pc, #472]	@ (80027d0 <HAL_DMA_Abort+0x214>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04a      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a74      	ldr	r2, [pc, #464]	@ (80027d4 <HAL_DMA_Abort+0x218>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d045      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	@ (80027d8 <HAL_DMA_Abort+0x21c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d040      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a71      	ldr	r2, [pc, #452]	@ (80027dc <HAL_DMA_Abort+0x220>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d03b      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a70      	ldr	r2, [pc, #448]	@ (80027e0 <HAL_DMA_Abort+0x224>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d036      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6e      	ldr	r2, [pc, #440]	@ (80027e4 <HAL_DMA_Abort+0x228>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6d      	ldr	r2, [pc, #436]	@ (80027e8 <HAL_DMA_Abort+0x22c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d02c      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6b      	ldr	r2, [pc, #428]	@ (80027ec <HAL_DMA_Abort+0x230>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d027      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6a      	ldr	r2, [pc, #424]	@ (80027f0 <HAL_DMA_Abort+0x234>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a68      	ldr	r2, [pc, #416]	@ (80027f4 <HAL_DMA_Abort+0x238>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a67      	ldr	r2, [pc, #412]	@ (80027f8 <HAL_DMA_Abort+0x23c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a65      	ldr	r2, [pc, #404]	@ (80027fc <HAL_DMA_Abort+0x240>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a64      	ldr	r2, [pc, #400]	@ (8002800 <HAL_DMA_Abort+0x244>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	@ (8002804 <HAL_DMA_Abort+0x248>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a61      	ldr	r2, [pc, #388]	@ (8002808 <HAL_DMA_Abort+0x24c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Abort+0xd6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5f      	ldr	r2, [pc, #380]	@ (800280c <HAL_DMA_Abort+0x250>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_DMA_Abort+0xda>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_DMA_Abort+0xdc>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 021e 	bic.w	r2, r2, #30
 80026aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e00a      	b.n	80026da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020e 	bic.w	r2, r2, #14
 80026d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3c      	ldr	r2, [pc, #240]	@ (80027d0 <HAL_DMA_Abort+0x214>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d072      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3a      	ldr	r2, [pc, #232]	@ (80027d4 <HAL_DMA_Abort+0x218>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d06d      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a39      	ldr	r2, [pc, #228]	@ (80027d8 <HAL_DMA_Abort+0x21c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d068      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a37      	ldr	r2, [pc, #220]	@ (80027dc <HAL_DMA_Abort+0x220>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d063      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a36      	ldr	r2, [pc, #216]	@ (80027e0 <HAL_DMA_Abort+0x224>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d05e      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a34      	ldr	r2, [pc, #208]	@ (80027e4 <HAL_DMA_Abort+0x228>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d059      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a33      	ldr	r2, [pc, #204]	@ (80027e8 <HAL_DMA_Abort+0x22c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d054      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a31      	ldr	r2, [pc, #196]	@ (80027ec <HAL_DMA_Abort+0x230>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04f      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a30      	ldr	r2, [pc, #192]	@ (80027f0 <HAL_DMA_Abort+0x234>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d04a      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2e      	ldr	r2, [pc, #184]	@ (80027f4 <HAL_DMA_Abort+0x238>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d045      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2d      	ldr	r2, [pc, #180]	@ (80027f8 <HAL_DMA_Abort+0x23c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d040      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <HAL_DMA_Abort+0x240>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d03b      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2a      	ldr	r2, [pc, #168]	@ (8002800 <HAL_DMA_Abort+0x244>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d036      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a28      	ldr	r2, [pc, #160]	@ (8002804 <HAL_DMA_Abort+0x248>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d031      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <HAL_DMA_Abort+0x24c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d02c      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a25      	ldr	r2, [pc, #148]	@ (800280c <HAL_DMA_Abort+0x250>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d027      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_DMA_Abort+0x254>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d022      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a22      	ldr	r2, [pc, #136]	@ (8002814 <HAL_DMA_Abort+0x258>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01d      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a21      	ldr	r2, [pc, #132]	@ (8002818 <HAL_DMA_Abort+0x25c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d018      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_DMA_Abort+0x260>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_DMA_Abort+0x264>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00e      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <HAL_DMA_Abort+0x268>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <HAL_DMA_Abort+0x26c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_DMA_Abort+0x20e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_DMA_Abort+0x270>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d132      	bne.n	8002830 <HAL_DMA_Abort+0x274>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e031      	b.n	8002832 <HAL_DMA_Abort+0x276>
 80027ce:	bf00      	nop
 80027d0:	40020010 	.word	0x40020010
 80027d4:	40020028 	.word	0x40020028
 80027d8:	40020040 	.word	0x40020040
 80027dc:	40020058 	.word	0x40020058
 80027e0:	40020070 	.word	0x40020070
 80027e4:	40020088 	.word	0x40020088
 80027e8:	400200a0 	.word	0x400200a0
 80027ec:	400200b8 	.word	0x400200b8
 80027f0:	40020410 	.word	0x40020410
 80027f4:	40020428 	.word	0x40020428
 80027f8:	40020440 	.word	0x40020440
 80027fc:	40020458 	.word	0x40020458
 8002800:	40020470 	.word	0x40020470
 8002804:	40020488 	.word	0x40020488
 8002808:	400204a0 	.word	0x400204a0
 800280c:	400204b8 	.word	0x400204b8
 8002810:	58025408 	.word	0x58025408
 8002814:	5802541c 	.word	0x5802541c
 8002818:	58025430 	.word	0x58025430
 800281c:	58025444 	.word	0x58025444
 8002820:	58025458 	.word	0x58025458
 8002824:	5802546c 	.word	0x5802546c
 8002828:	58025480 	.word	0x58025480
 800282c:	58025494 	.word	0x58025494
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a00 <HAL_DMA_Abort+0x444>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d04a      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6b      	ldr	r2, [pc, #428]	@ (8002a04 <HAL_DMA_Abort+0x448>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d045      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6a      	ldr	r2, [pc, #424]	@ (8002a08 <HAL_DMA_Abort+0x44c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d040      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a68      	ldr	r2, [pc, #416]	@ (8002a0c <HAL_DMA_Abort+0x450>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d03b      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a67      	ldr	r2, [pc, #412]	@ (8002a10 <HAL_DMA_Abort+0x454>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d036      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	@ (8002a14 <HAL_DMA_Abort+0x458>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d031      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a64      	ldr	r2, [pc, #400]	@ (8002a18 <HAL_DMA_Abort+0x45c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d02c      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a62      	ldr	r2, [pc, #392]	@ (8002a1c <HAL_DMA_Abort+0x460>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d027      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a61      	ldr	r2, [pc, #388]	@ (8002a20 <HAL_DMA_Abort+0x464>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a24 <HAL_DMA_Abort+0x468>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <HAL_DMA_Abort+0x46c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d018      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a2c <HAL_DMA_Abort+0x470>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a30 <HAL_DMA_Abort+0x474>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00e      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a59      	ldr	r2, [pc, #356]	@ (8002a34 <HAL_DMA_Abort+0x478>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <HAL_DMA_Abort+0x47c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_DMA_Abort+0x32a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a56      	ldr	r2, [pc, #344]	@ (8002a3c <HAL_DMA_Abort+0x480>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <HAL_DMA_Abort+0x33c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e007      	b.n	8002908 <HAL_DMA_Abort+0x34c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002908:	e013      	b.n	8002932 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800290a:	f7fe ff79 	bl	8001800 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b05      	cmp	r3, #5
 8002916:	d90c      	bls.n	8002932 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12d      	b.n	8002b8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e5      	bne.n	800290a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2f      	ldr	r2, [pc, #188]	@ (8002a00 <HAL_DMA_Abort+0x444>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a04 <HAL_DMA_Abort+0x448>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2c      	ldr	r2, [pc, #176]	@ (8002a08 <HAL_DMA_Abort+0x44c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_Abort+0x422>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <HAL_DMA_Abort+0x450>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_DMA_Abort+0x454>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a27      	ldr	r2, [pc, #156]	@ (8002a14 <HAL_DMA_Abort+0x458>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_Abort+0x422>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <HAL_DMA_Abort+0x45c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a24      	ldr	r2, [pc, #144]	@ (8002a1c <HAL_DMA_Abort+0x460>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_Abort+0x422>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_DMA_Abort+0x464>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_Abort+0x422>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_DMA_Abort+0x468>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a20      	ldr	r2, [pc, #128]	@ (8002a28 <HAL_DMA_Abort+0x46c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a2c <HAL_DMA_Abort+0x470>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <HAL_DMA_Abort+0x474>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_DMA_Abort+0x478>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_DMA_Abort+0x47c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Abort+0x422>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <HAL_DMA_Abort+0x480>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Abort+0x426>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_Abort+0x428>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02b      	beq.n	8002a40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	223f      	movs	r2, #63	@ 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	e02a      	b.n	8002a56 <HAL_DMA_Abort+0x49a>
 8002a00:	40020010 	.word	0x40020010
 8002a04:	40020028 	.word	0x40020028
 8002a08:	40020040 	.word	0x40020040
 8002a0c:	40020058 	.word	0x40020058
 8002a10:	40020070 	.word	0x40020070
 8002a14:	40020088 	.word	0x40020088
 8002a18:	400200a0 	.word	0x400200a0
 8002a1c:	400200b8 	.word	0x400200b8
 8002a20:	40020410 	.word	0x40020410
 8002a24:	40020428 	.word	0x40020428
 8002a28:	40020440 	.word	0x40020440
 8002a2c:	40020458 	.word	0x40020458
 8002a30:	40020470 	.word	0x40020470
 8002a34:	40020488 	.word	0x40020488
 8002a38:	400204a0 	.word	0x400204a0
 8002a3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2201      	movs	r2, #1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b98 <HAL_DMA_Abort+0x5dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d072      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4d      	ldr	r2, [pc, #308]	@ (8002b9c <HAL_DMA_Abort+0x5e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d06d      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ba0 <HAL_DMA_Abort+0x5e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d068      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <HAL_DMA_Abort+0x5e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d063      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a49      	ldr	r2, [pc, #292]	@ (8002ba8 <HAL_DMA_Abort+0x5ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d05e      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a47      	ldr	r2, [pc, #284]	@ (8002bac <HAL_DMA_Abort+0x5f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d059      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a46      	ldr	r2, [pc, #280]	@ (8002bb0 <HAL_DMA_Abort+0x5f4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d054      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a44      	ldr	r2, [pc, #272]	@ (8002bb4 <HAL_DMA_Abort+0x5f8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04f      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a43      	ldr	r2, [pc, #268]	@ (8002bb8 <HAL_DMA_Abort+0x5fc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d04a      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a41      	ldr	r2, [pc, #260]	@ (8002bbc <HAL_DMA_Abort+0x600>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d045      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a40      	ldr	r2, [pc, #256]	@ (8002bc0 <HAL_DMA_Abort+0x604>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d040      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc4 <HAL_DMA_Abort+0x608>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d03b      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc8 <HAL_DMA_Abort+0x60c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d036      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bcc <HAL_DMA_Abort+0x610>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd0 <HAL_DMA_Abort+0x614>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d02c      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a38      	ldr	r2, [pc, #224]	@ (8002bd4 <HAL_DMA_Abort+0x618>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a37      	ldr	r2, [pc, #220]	@ (8002bd8 <HAL_DMA_Abort+0x61c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a35      	ldr	r2, [pc, #212]	@ (8002bdc <HAL_DMA_Abort+0x620>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a34      	ldr	r2, [pc, #208]	@ (8002be0 <HAL_DMA_Abort+0x624>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a32      	ldr	r2, [pc, #200]	@ (8002be4 <HAL_DMA_Abort+0x628>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a31      	ldr	r2, [pc, #196]	@ (8002be8 <HAL_DMA_Abort+0x62c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bec <HAL_DMA_Abort+0x630>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf0 <HAL_DMA_Abort+0x634>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_Abort+0x58a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf4 <HAL_DMA_Abort+0x638>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Abort+0x58e>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_DMA_Abort+0x590>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	58025408 	.word	0x58025408
 8002bdc:	5802541c 	.word	0x5802541c
 8002be0:	58025430 	.word	0x58025430
 8002be4:	58025444 	.word	0x58025444
 8002be8:	58025458 	.word	0x58025458
 8002bec:	5802546c 	.word	0x5802546c
 8002bf0:	58025480 	.word	0x58025480
 8002bf4:	58025494 	.word	0x58025494

08002bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e237      	b.n	800307a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e22c      	b.n	800307a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5c      	ldr	r2, [pc, #368]	@ (8002d98 <HAL_DMA_Abort_IT+0x1a0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04a      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d9c <HAL_DMA_Abort_IT+0x1a4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d045      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a59      	ldr	r2, [pc, #356]	@ (8002da0 <HAL_DMA_Abort_IT+0x1a8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d040      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a58      	ldr	r2, [pc, #352]	@ (8002da4 <HAL_DMA_Abort_IT+0x1ac>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d03b      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a56      	ldr	r2, [pc, #344]	@ (8002da8 <HAL_DMA_Abort_IT+0x1b0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d036      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a55      	ldr	r2, [pc, #340]	@ (8002dac <HAL_DMA_Abort_IT+0x1b4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a53      	ldr	r2, [pc, #332]	@ (8002db0 <HAL_DMA_Abort_IT+0x1b8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a52      	ldr	r2, [pc, #328]	@ (8002db4 <HAL_DMA_Abort_IT+0x1bc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d027      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a50      	ldr	r2, [pc, #320]	@ (8002db8 <HAL_DMA_Abort_IT+0x1c0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a4f      	ldr	r2, [pc, #316]	@ (8002dbc <HAL_DMA_Abort_IT+0x1c4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d01d      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a49      	ldr	r2, [pc, #292]	@ (8002dcc <HAL_DMA_Abort_IT+0x1d4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a47      	ldr	r2, [pc, #284]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xc8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a46      	ldr	r2, [pc, #280]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Abort_IT+0xcc>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_Abort_IT+0xce>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8086 	beq.w	8002dd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2204      	movs	r2, #4
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002d98 <HAL_DMA_Abort_IT+0x1a0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d9c <HAL_DMA_Abort_IT+0x1a4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <HAL_DMA_Abort_IT+0x1a8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <HAL_DMA_Abort_IT+0x1ac>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a29      	ldr	r2, [pc, #164]	@ (8002da8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a28      	ldr	r2, [pc, #160]	@ (8002dac <HAL_DMA_Abort_IT+0x1b4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_DMA_Abort_IT+0x1b8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <HAL_DMA_Abort_IT+0x1bc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <HAL_DMA_Abort_IT+0x1c0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a22      	ldr	r2, [pc, #136]	@ (8002dbc <HAL_DMA_Abort_IT+0x1c4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a20      	ldr	r2, [pc, #128]	@ (8002dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_DMA_Abort_IT+0x1d4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x17c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <HAL_DMA_Abort_IT+0x18e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e178      	b.n	8003078 <HAL_DMA_Abort_IT+0x480>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e16f      	b.n	8003078 <HAL_DMA_Abort_IT+0x480>
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 020e 	bic.w	r2, r2, #14
 8002de6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d04a      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d045      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a69      	ldr	r2, [pc, #420]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d040      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a68      	ldr	r2, [pc, #416]	@ (8002fac <HAL_DMA_Abort_IT+0x3b4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d03b      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a66      	ldr	r2, [pc, #408]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d036      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a65      	ldr	r2, [pc, #404]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d031      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a63      	ldr	r2, [pc, #396]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02c      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a62      	ldr	r2, [pc, #392]	@ (8002fbc <HAL_DMA_Abort_IT+0x3c4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d027      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a60      	ldr	r2, [pc, #384]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01d      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_DMA_Abort_IT+0x3d4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00e      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a59      	ldr	r2, [pc, #356]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a57      	ldr	r2, [pc, #348]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x290>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a56      	ldr	r2, [pc, #344]	@ (8002fdc <HAL_DMA_Abort_IT+0x3e4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <HAL_DMA_Abort_IT+0x2a2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e007      	b.n	8002eaa <HAL_DMA_Abort_IT+0x2b2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d072      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d06d      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	@ (8002fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d068      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a37      	ldr	r2, [pc, #220]	@ (8002fac <HAL_DMA_Abort_IT+0x3b4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d063      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a36      	ldr	r2, [pc, #216]	@ (8002fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d05e      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d059      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	@ (8002fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d054      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a31      	ldr	r2, [pc, #196]	@ (8002fbc <HAL_DMA_Abort_IT+0x3c4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d04f      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a30      	ldr	r2, [pc, #192]	@ (8002fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04a      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d045      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d040      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fcc <HAL_DMA_Abort_IT+0x3d4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d03b      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d036      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d031      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a27      	ldr	r2, [pc, #156]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d02c      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	@ (8002fdc <HAL_DMA_Abort_IT+0x3e4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d027      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a24      	ldr	r2, [pc, #144]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3e8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3ec>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3f0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d018      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <HAL_DMA_Abort_IT+0x3f4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3f8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00e      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3fc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <HAL_DMA_Abort_IT+0x400>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x3a2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_DMA_Abort_IT+0x404>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d132      	bne.n	8003000 <HAL_DMA_Abort_IT+0x408>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e031      	b.n	8003002 <HAL_DMA_Abort_IT+0x40a>
 8002f9e:	bf00      	nop
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d028      	beq.n	8003058 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003014:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2201      	movs	r2, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003034:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003056:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop

08003084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003090:	4b67      	ldr	r3, [pc, #412]	@ (8003230 <HAL_DMA_IRQHandler+0x1ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a67      	ldr	r2, [pc, #412]	@ (8003234 <HAL_DMA_IRQHandler+0x1b0>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a9b      	lsrs	r3, r3, #10
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003238 <HAL_DMA_IRQHandler+0x1b4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d04a      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5d      	ldr	r2, [pc, #372]	@ (800323c <HAL_DMA_IRQHandler+0x1b8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d045      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003240 <HAL_DMA_IRQHandler+0x1bc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d040      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003244 <HAL_DMA_IRQHandler+0x1c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03b      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a59      	ldr	r2, [pc, #356]	@ (8003248 <HAL_DMA_IRQHandler+0x1c4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d036      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a57      	ldr	r2, [pc, #348]	@ (800324c <HAL_DMA_IRQHandler+0x1c8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d031      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <HAL_DMA_IRQHandler+0x1cc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d02c      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a54      	ldr	r2, [pc, #336]	@ (8003254 <HAL_DMA_IRQHandler+0x1d0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d027      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a53      	ldr	r2, [pc, #332]	@ (8003258 <HAL_DMA_IRQHandler+0x1d4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a51      	ldr	r2, [pc, #324]	@ (800325c <HAL_DMA_IRQHandler+0x1d8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a50      	ldr	r2, [pc, #320]	@ (8003260 <HAL_DMA_IRQHandler+0x1dc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4e      	ldr	r2, [pc, #312]	@ (8003264 <HAL_DMA_IRQHandler+0x1e0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4d      	ldr	r2, [pc, #308]	@ (8003268 <HAL_DMA_IRQHandler+0x1e4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4b      	ldr	r2, [pc, #300]	@ (800326c <HAL_DMA_IRQHandler+0x1e8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <HAL_DMA_IRQHandler+0x1ec>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_DMA_IRQHandler+0xd2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a48      	ldr	r2, [pc, #288]	@ (8003274 <HAL_DMA_IRQHandler+0x1f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_DMA_IRQHandler+0xd6>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_DMA_IRQHandler+0xd8>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 842b 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2208      	movs	r2, #8
 800316c:	409a      	lsls	r2, r3
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80a2 	beq.w	80032bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2e      	ldr	r2, [pc, #184]	@ (8003238 <HAL_DMA_IRQHandler+0x1b4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d04a      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <HAL_DMA_IRQHandler+0x1b8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d045      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <HAL_DMA_IRQHandler+0x1bc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d040      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2a      	ldr	r2, [pc, #168]	@ (8003244 <HAL_DMA_IRQHandler+0x1c0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d03b      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a28      	ldr	r2, [pc, #160]	@ (8003248 <HAL_DMA_IRQHandler+0x1c4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d036      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a27      	ldr	r2, [pc, #156]	@ (800324c <HAL_DMA_IRQHandler+0x1c8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a25      	ldr	r2, [pc, #148]	@ (8003250 <HAL_DMA_IRQHandler+0x1cc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02c      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a24      	ldr	r2, [pc, #144]	@ (8003254 <HAL_DMA_IRQHandler+0x1d0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d027      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <HAL_DMA_IRQHandler+0x1d4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d022      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	@ (800325c <HAL_DMA_IRQHandler+0x1d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01d      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_DMA_IRQHandler+0x1dc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d018      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_DMA_IRQHandler+0x1e0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <HAL_DMA_IRQHandler+0x1e4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	@ (800326c <HAL_DMA_IRQHandler+0x1e8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <HAL_DMA_IRQHandler+0x1ec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_DMA_IRQHandler+0x194>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_DMA_IRQHandler+0x1f0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d12f      	bne.n	8003278 <HAL_DMA_IRQHandler+0x1f4>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e02e      	b.n	800328c <HAL_DMA_IRQHandler+0x208>
 800322e:	bf00      	nop
 8003230:	24000084 	.word	0x24000084
 8003234:	1b4e81b5 	.word	0x1b4e81b5
 8003238:	40020010 	.word	0x40020010
 800323c:	40020028 	.word	0x40020028
 8003240:	40020040 	.word	0x40020040
 8003244:	40020058 	.word	0x40020058
 8003248:	40020070 	.word	0x40020070
 800324c:	40020088 	.word	0x40020088
 8003250:	400200a0 	.word	0x400200a0
 8003254:	400200b8 	.word	0x400200b8
 8003258:	40020410 	.word	0x40020410
 800325c:	40020428 	.word	0x40020428
 8003260:	40020440 	.word	0x40020440
 8003264:	40020458 	.word	0x40020458
 8003268:	40020470 	.word	0x40020470
 800326c:	40020488 	.word	0x40020488
 8003270:	400204a0 	.word	0x400204a0
 8003274:	400204b8 	.word	0x400204b8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d015      	beq.n	80032bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2208      	movs	r2, #8
 80032aa:	409a      	lsls	r2, r3
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d06e      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a69      	ldr	r2, [pc, #420]	@ (800347c <HAL_DMA_IRQHandler+0x3f8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d04a      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a67      	ldr	r2, [pc, #412]	@ (8003480 <HAL_DMA_IRQHandler+0x3fc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d045      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a66      	ldr	r2, [pc, #408]	@ (8003484 <HAL_DMA_IRQHandler+0x400>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d040      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a64      	ldr	r2, [pc, #400]	@ (8003488 <HAL_DMA_IRQHandler+0x404>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d03b      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a63      	ldr	r2, [pc, #396]	@ (800348c <HAL_DMA_IRQHandler+0x408>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d036      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a61      	ldr	r2, [pc, #388]	@ (8003490 <HAL_DMA_IRQHandler+0x40c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a60      	ldr	r2, [pc, #384]	@ (8003494 <HAL_DMA_IRQHandler+0x410>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d02c      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a5e      	ldr	r2, [pc, #376]	@ (8003498 <HAL_DMA_IRQHandler+0x414>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d027      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5d      	ldr	r2, [pc, #372]	@ (800349c <HAL_DMA_IRQHandler+0x418>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a5b      	ldr	r2, [pc, #364]	@ (80034a0 <HAL_DMA_IRQHandler+0x41c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5a      	ldr	r2, [pc, #360]	@ (80034a4 <HAL_DMA_IRQHandler+0x420>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a58      	ldr	r2, [pc, #352]	@ (80034a8 <HAL_DMA_IRQHandler+0x424>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a57      	ldr	r2, [pc, #348]	@ (80034ac <HAL_DMA_IRQHandler+0x428>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a55      	ldr	r2, [pc, #340]	@ (80034b0 <HAL_DMA_IRQHandler+0x42c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a54      	ldr	r2, [pc, #336]	@ (80034b4 <HAL_DMA_IRQHandler+0x430>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_DMA_IRQHandler+0x2ee>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_DMA_IRQHandler+0x434>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10a      	bne.n	8003388 <HAL_DMA_IRQHandler+0x304>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e003      	b.n	8003390 <HAL_DMA_IRQHandler+0x30c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00d      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f043 0202 	orr.w	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2204      	movs	r2, #4
 80033ba:	409a      	lsls	r2, r3
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 808f 	beq.w	80034e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <HAL_DMA_IRQHandler+0x3f8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <HAL_DMA_IRQHandler+0x3fc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <HAL_DMA_IRQHandler+0x400>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_DMA_IRQHandler+0x404>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a26      	ldr	r2, [pc, #152]	@ (800348c <HAL_DMA_IRQHandler+0x408>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <HAL_DMA_IRQHandler+0x40c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <HAL_DMA_IRQHandler+0x410>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <HAL_DMA_IRQHandler+0x414>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_DMA_IRQHandler+0x418>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <HAL_DMA_IRQHandler+0x41c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_DMA_IRQHandler+0x420>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_DMA_IRQHandler+0x424>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_DMA_IRQHandler+0x428>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_DMA_IRQHandler+0x42c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_DMA_IRQHandler+0x430>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_IRQHandler+0x3e2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <HAL_DMA_IRQHandler+0x434>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12a      	bne.n	80034bc <HAL_DMA_IRQHandler+0x438>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e023      	b.n	80034c4 <HAL_DMA_IRQHandler+0x440>
 800347c:	40020010 	.word	0x40020010
 8003480:	40020028 	.word	0x40020028
 8003484:	40020040 	.word	0x40020040
 8003488:	40020058 	.word	0x40020058
 800348c:	40020070 	.word	0x40020070
 8003490:	40020088 	.word	0x40020088
 8003494:	400200a0 	.word	0x400200a0
 8003498:	400200b8 	.word	0x400200b8
 800349c:	40020410 	.word	0x40020410
 80034a0:	40020428 	.word	0x40020428
 80034a4:	40020440 	.word	0x40020440
 80034a8:	40020458 	.word	0x40020458
 80034ac:	40020470 	.word	0x40020470
 80034b0:	40020488 	.word	0x40020488
 80034b4:	400204a0 	.word	0x400204a0
 80034b8:	400204b8 	.word	0x400204b8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2204      	movs	r2, #4
 80034d2:	409a      	lsls	r2, r3
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	f043 0204 	orr.w	r2, r3, #4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2210      	movs	r2, #16
 80034ee:	409a      	lsls	r2, r3
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a6 	beq.w	8003646 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a85      	ldr	r2, [pc, #532]	@ (8003714 <HAL_DMA_IRQHandler+0x690>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a83      	ldr	r2, [pc, #524]	@ (8003718 <HAL_DMA_IRQHandler+0x694>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a82      	ldr	r2, [pc, #520]	@ (800371c <HAL_DMA_IRQHandler+0x698>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a80      	ldr	r2, [pc, #512]	@ (8003720 <HAL_DMA_IRQHandler+0x69c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7f      	ldr	r2, [pc, #508]	@ (8003724 <HAL_DMA_IRQHandler+0x6a0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a7d      	ldr	r2, [pc, #500]	@ (8003728 <HAL_DMA_IRQHandler+0x6a4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7c      	ldr	r2, [pc, #496]	@ (800372c <HAL_DMA_IRQHandler+0x6a8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7a      	ldr	r2, [pc, #488]	@ (8003730 <HAL_DMA_IRQHandler+0x6ac>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a79      	ldr	r2, [pc, #484]	@ (8003734 <HAL_DMA_IRQHandler+0x6b0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a77      	ldr	r2, [pc, #476]	@ (8003738 <HAL_DMA_IRQHandler+0x6b4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a76      	ldr	r2, [pc, #472]	@ (800373c <HAL_DMA_IRQHandler+0x6b8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a74      	ldr	r2, [pc, #464]	@ (8003740 <HAL_DMA_IRQHandler+0x6bc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a73      	ldr	r2, [pc, #460]	@ (8003744 <HAL_DMA_IRQHandler+0x6c0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a71      	ldr	r2, [pc, #452]	@ (8003748 <HAL_DMA_IRQHandler+0x6c4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a70      	ldr	r2, [pc, #448]	@ (800374c <HAL_DMA_IRQHandler+0x6c8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_IRQHandler+0x516>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6e      	ldr	r2, [pc, #440]	@ (8003750 <HAL_DMA_IRQHandler+0x6cc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10a      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x52c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e009      	b.n	80035c4 <HAL_DMA_IRQHandler+0x540>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03e      	beq.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	2210      	movs	r2, #16
 80035d2:	409a      	lsls	r2, r3
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d018      	beq.n	8003618 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d024      	beq.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e01f      	b.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01b      	beq.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e016      	b.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2220      	movs	r2, #32
 8003650:	409a      	lsls	r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8110 	beq.w	800387c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <HAL_DMA_IRQHandler+0x690>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d04a      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2b      	ldr	r2, [pc, #172]	@ (8003718 <HAL_DMA_IRQHandler+0x694>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d045      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <HAL_DMA_IRQHandler+0x698>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d040      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <HAL_DMA_IRQHandler+0x69c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d03b      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_DMA_IRQHandler+0x6a0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d036      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a25      	ldr	r2, [pc, #148]	@ (8003728 <HAL_DMA_IRQHandler+0x6a4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d031      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a23      	ldr	r2, [pc, #140]	@ (800372c <HAL_DMA_IRQHandler+0x6a8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02c      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a22      	ldr	r2, [pc, #136]	@ (8003730 <HAL_DMA_IRQHandler+0x6ac>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d027      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a20      	ldr	r2, [pc, #128]	@ (8003734 <HAL_DMA_IRQHandler+0x6b0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d022      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <HAL_DMA_IRQHandler+0x6b4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d01d      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_DMA_IRQHandler+0x6b8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d018      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_DMA_IRQHandler+0x6bc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003744 <HAL_DMA_IRQHandler+0x6c0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00e      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_DMA_IRQHandler+0x6c4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d009      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_DMA_IRQHandler+0x6c8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d004      	beq.n	80036fc <HAL_DMA_IRQHandler+0x678>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <HAL_DMA_IRQHandler+0x6cc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d12b      	bne.n	8003754 <HAL_DMA_IRQHandler+0x6d0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e02a      	b.n	8003768 <HAL_DMA_IRQHandler+0x6e4>
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8087 	beq.w	800387c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b04      	cmp	r3, #4
 8003788:	d139      	bne.n	80037fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x736>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	223f      	movs	r2, #63	@ 0x3f
 80037d4:	409a      	lsls	r2, r3
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 834a 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
          }
          return;
 80037fc:	e344      	b.n	8003e88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d018      	beq.n	800383e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02c      	beq.n	800387c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
 800382a:	e027      	b.n	800387c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
 800383c:	e01e      	b.n	800387c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0210 	bic.w	r2, r2, #16
 800385a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8306 	beq.w	8003e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8088 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7a      	ldr	r2, [pc, #488]	@ (8003a8c <HAL_DMA_IRQHandler+0xa08>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04a      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a79      	ldr	r2, [pc, #484]	@ (8003a90 <HAL_DMA_IRQHandler+0xa0c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d045      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a77      	ldr	r2, [pc, #476]	@ (8003a94 <HAL_DMA_IRQHandler+0xa10>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d040      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a76      	ldr	r2, [pc, #472]	@ (8003a98 <HAL_DMA_IRQHandler+0xa14>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d03b      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a74      	ldr	r2, [pc, #464]	@ (8003a9c <HAL_DMA_IRQHandler+0xa18>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d036      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a73      	ldr	r2, [pc, #460]	@ (8003aa0 <HAL_DMA_IRQHandler+0xa1c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d031      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a71      	ldr	r2, [pc, #452]	@ (8003aa4 <HAL_DMA_IRQHandler+0xa20>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02c      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a70      	ldr	r2, [pc, #448]	@ (8003aa8 <HAL_DMA_IRQHandler+0xa24>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d027      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_DMA_IRQHandler+0xa28>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d022      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6d      	ldr	r2, [pc, #436]	@ (8003ab0 <HAL_DMA_IRQHandler+0xa2c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d01d      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab4 <HAL_DMA_IRQHandler+0xa30>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d018      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_DMA_IRQHandler+0xa34>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a68      	ldr	r2, [pc, #416]	@ (8003abc <HAL_DMA_IRQHandler+0xa38>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a67      	ldr	r2, [pc, #412]	@ (8003ac0 <HAL_DMA_IRQHandler+0xa3c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa40>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_DMA_IRQHandler+0x8b8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a64      	ldr	r2, [pc, #400]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa44>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <HAL_DMA_IRQHandler+0x8ca>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e007      	b.n	800395e <HAL_DMA_IRQHandler+0x8da>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	429a      	cmp	r2, r3
 8003968:	d307      	bcc.n	800397a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f2      	bne.n	800395e <HAL_DMA_IRQHandler+0x8da>
 8003978:	e000      	b.n	800397c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800397a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003992:	e003      	b.n	800399c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8272 	beq.w	8003e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e26c      	b.n	8003e92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <HAL_DMA_IRQHandler+0xa48>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a42      	ldr	r2, [pc, #264]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa4c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d01d      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a40      	ldr	r2, [pc, #256]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa50>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <HAL_DMA_IRQHandler+0xa54>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3d      	ldr	r2, [pc, #244]	@ (8003adc <HAL_DMA_IRQHandler+0xa58>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae0 <HAL_DMA_IRQHandler+0xa5c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae4 <HAL_DMA_IRQHandler+0xa60>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x984>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a39      	ldr	r2, [pc, #228]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa64>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x988>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_DMA_IRQHandler+0x98a>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 823f 	beq.w	8003e92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2204      	movs	r2, #4
 8003a26:	409a      	lsls	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80cd 	beq.w	8003bcc <HAL_DMA_IRQHandler+0xb48>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80c7 	beq.w	8003bcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2204      	movs	r2, #4
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d049      	beq.n	8003aec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8210 	beq.w	8003e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e20a      	b.n	8003e8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8206 	beq.w	8003e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a88:	e200      	b.n	8003e8c <HAL_DMA_IRQHandler+0xe08>
 8003a8a:	bf00      	nop
 8003a8c:	40020010 	.word	0x40020010
 8003a90:	40020028 	.word	0x40020028
 8003a94:	40020040 	.word	0x40020040
 8003a98:	40020058 	.word	0x40020058
 8003a9c:	40020070 	.word	0x40020070
 8003aa0:	40020088 	.word	0x40020088
 8003aa4:	400200a0 	.word	0x400200a0
 8003aa8:	400200b8 	.word	0x400200b8
 8003aac:	40020410 	.word	0x40020410
 8003ab0:	40020428 	.word	0x40020428
 8003ab4:	40020440 	.word	0x40020440
 8003ab8:	40020458 	.word	0x40020458
 8003abc:	40020470 	.word	0x40020470
 8003ac0:	40020488 	.word	0x40020488
 8003ac4:	400204a0 	.word	0x400204a0
 8003ac8:	400204b8 	.word	0x400204b8
 8003acc:	58025408 	.word	0x58025408
 8003ad0:	5802541c 	.word	0x5802541c
 8003ad4:	58025430 	.word	0x58025430
 8003ad8:	58025444 	.word	0x58025444
 8003adc:	58025458 	.word	0x58025458
 8003ae0:	5802546c 	.word	0x5802546c
 8003ae4:	58025480 	.word	0x58025480
 8003ae8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d160      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7f      	ldr	r2, [pc, #508]	@ (8003cf8 <HAL_DMA_IRQHandler+0xc74>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d04a      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7d      	ldr	r2, [pc, #500]	@ (8003cfc <HAL_DMA_IRQHandler+0xc78>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d045      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d00 <HAL_DMA_IRQHandler+0xc7c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7a      	ldr	r2, [pc, #488]	@ (8003d04 <HAL_DMA_IRQHandler+0xc80>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d03b      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a79      	ldr	r2, [pc, #484]	@ (8003d08 <HAL_DMA_IRQHandler+0xc84>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d036      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a77      	ldr	r2, [pc, #476]	@ (8003d0c <HAL_DMA_IRQHandler+0xc88>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d031      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a76      	ldr	r2, [pc, #472]	@ (8003d10 <HAL_DMA_IRQHandler+0xc8c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02c      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a74      	ldr	r2, [pc, #464]	@ (8003d14 <HAL_DMA_IRQHandler+0xc90>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	@ (8003d18 <HAL_DMA_IRQHandler+0xc94>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d022      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a71      	ldr	r2, [pc, #452]	@ (8003d1c <HAL_DMA_IRQHandler+0xc98>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01d      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a70      	ldr	r2, [pc, #448]	@ (8003d20 <HAL_DMA_IRQHandler+0xc9c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <HAL_DMA_IRQHandler+0xca0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6d      	ldr	r2, [pc, #436]	@ (8003d28 <HAL_DMA_IRQHandler+0xca4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d2c <HAL_DMA_IRQHandler+0xca8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6a      	ldr	r2, [pc, #424]	@ (8003d30 <HAL_DMA_IRQHandler+0xcac>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xb12>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a68      	ldr	r2, [pc, #416]	@ (8003d34 <HAL_DMA_IRQHandler+0xcb0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0xb24>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0208 	bic.w	r2, r2, #8
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e007      	b.n	8003bb8 <HAL_DMA_IRQHandler+0xb34>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8165 	beq.w	8003e8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bca:	e15f      	b.n	8003e8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80c5 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xce8>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80bf 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 813a 	beq.w	8003e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c24:	e134      	b.n	8003e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8130 	beq.w	8003e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c38:	e12a      	b.n	8003e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 8089 	bne.w	8003d58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <HAL_DMA_IRQHandler+0xc74>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a29      	ldr	r2, [pc, #164]	@ (8003cfc <HAL_DMA_IRQHandler+0xc78>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d045      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a28      	ldr	r2, [pc, #160]	@ (8003d00 <HAL_DMA_IRQHandler+0xc7c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d040      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a26      	ldr	r2, [pc, #152]	@ (8003d04 <HAL_DMA_IRQHandler+0xc80>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a25      	ldr	r2, [pc, #148]	@ (8003d08 <HAL_DMA_IRQHandler+0xc84>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d036      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <HAL_DMA_IRQHandler+0xc88>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_DMA_IRQHandler+0xc8c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <HAL_DMA_IRQHandler+0xc90>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <HAL_DMA_IRQHandler+0xc94>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_DMA_IRQHandler+0xc98>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <HAL_DMA_IRQHandler+0xc9c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d24 <HAL_DMA_IRQHandler+0xca0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <HAL_DMA_IRQHandler+0xca4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <HAL_DMA_IRQHandler+0xca8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <HAL_DMA_IRQHandler+0xcac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xc62>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <HAL_DMA_IRQHandler+0xcb0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d128      	bne.n	8003d38 <HAL_DMA_IRQHandler+0xcb4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0214 	bic.w	r2, r2, #20
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e027      	b.n	8003d48 <HAL_DMA_IRQHandler+0xcc4>
 8003cf8:	40020010 	.word	0x40020010
 8003cfc:	40020028 	.word	0x40020028
 8003d00:	40020040 	.word	0x40020040
 8003d04:	40020058 	.word	0x40020058
 8003d08:	40020070 	.word	0x40020070
 8003d0c:	40020088 	.word	0x40020088
 8003d10:	400200a0 	.word	0x400200a0
 8003d14:	400200b8 	.word	0x400200b8
 8003d18:	40020410 	.word	0x40020410
 8003d1c:	40020428 	.word	0x40020428
 8003d20:	40020440 	.word	0x40020440
 8003d24:	40020458 	.word	0x40020458
 8003d28:	40020470 	.word	0x40020470
 8003d2c:	40020488 	.word	0x40020488
 8003d30:	400204a0 	.word	0x400204a0
 8003d34:	400204b8 	.word	0x400204b8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 020a 	bic.w	r2, r2, #10
 8003d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8097 	beq.w	8003e90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6a:	e091      	b.n	8003e90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2208      	movs	r2, #8
 8003d76:	409a      	lsls	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8088 	beq.w	8003e92 <HAL_DMA_IRQHandler+0xe0e>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8082 	beq.w	8003e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a41      	ldr	r2, [pc, #260]	@ (8003e98 <HAL_DMA_IRQHandler+0xe14>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d04a      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e9c <HAL_DMA_IRQHandler+0xe18>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d045      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea0 <HAL_DMA_IRQHandler+0xe1c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d040      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea4 <HAL_DMA_IRQHandler+0xe20>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d03b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3b      	ldr	r2, [pc, #236]	@ (8003ea8 <HAL_DMA_IRQHandler+0xe24>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d036      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a39      	ldr	r2, [pc, #228]	@ (8003eac <HAL_DMA_IRQHandler+0xe28>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a38      	ldr	r2, [pc, #224]	@ (8003eb0 <HAL_DMA_IRQHandler+0xe2c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d02c      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a36      	ldr	r2, [pc, #216]	@ (8003eb4 <HAL_DMA_IRQHandler+0xe30>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a35      	ldr	r2, [pc, #212]	@ (8003eb8 <HAL_DMA_IRQHandler+0xe34>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a33      	ldr	r2, [pc, #204]	@ (8003ebc <HAL_DMA_IRQHandler+0xe38>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a32      	ldr	r2, [pc, #200]	@ (8003ec0 <HAL_DMA_IRQHandler+0xe3c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_DMA_IRQHandler+0xe40>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec8 <HAL_DMA_IRQHandler+0xe44>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2d      	ldr	r2, [pc, #180]	@ (8003ecc <HAL_DMA_IRQHandler+0xe48>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed0 <HAL_DMA_IRQHandler+0xe4c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xdaa>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <HAL_DMA_IRQHandler+0xe50>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <HAL_DMA_IRQHandler+0xdbc>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 021c 	bic.w	r2, r2, #28
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e007      	b.n	8003e50 <HAL_DMA_IRQHandler+0xdcc>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 020e 	bic.w	r2, r2, #14
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2201      	movs	r2, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
 8003e86:	e004      	b.n	8003e92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e92:	3728      	adds	r7, #40	@ 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8

08003ed8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7f      	ldr	r2, [pc, #508]	@ (80040f4 <DMA_SetConfig+0x21c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d072      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a7d      	ldr	r2, [pc, #500]	@ (80040f8 <DMA_SetConfig+0x220>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d06d      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80040fc <DMA_SetConfig+0x224>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d068      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a7a      	ldr	r2, [pc, #488]	@ (8004100 <DMA_SetConfig+0x228>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d063      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a79      	ldr	r2, [pc, #484]	@ (8004104 <DMA_SetConfig+0x22c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d05e      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a77      	ldr	r2, [pc, #476]	@ (8004108 <DMA_SetConfig+0x230>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d059      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a76      	ldr	r2, [pc, #472]	@ (800410c <DMA_SetConfig+0x234>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d054      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a74      	ldr	r2, [pc, #464]	@ (8004110 <DMA_SetConfig+0x238>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04f      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a73      	ldr	r2, [pc, #460]	@ (8004114 <DMA_SetConfig+0x23c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d04a      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a71      	ldr	r2, [pc, #452]	@ (8004118 <DMA_SetConfig+0x240>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d045      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a70      	ldr	r2, [pc, #448]	@ (800411c <DMA_SetConfig+0x244>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d040      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6e      	ldr	r2, [pc, #440]	@ (8004120 <DMA_SetConfig+0x248>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d03b      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8004124 <DMA_SetConfig+0x24c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d036      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6b      	ldr	r2, [pc, #428]	@ (8004128 <DMA_SetConfig+0x250>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6a      	ldr	r2, [pc, #424]	@ (800412c <DMA_SetConfig+0x254>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d02c      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a68      	ldr	r2, [pc, #416]	@ (8004130 <DMA_SetConfig+0x258>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d027      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a67      	ldr	r2, [pc, #412]	@ (8004134 <DMA_SetConfig+0x25c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d022      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a65      	ldr	r2, [pc, #404]	@ (8004138 <DMA_SetConfig+0x260>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a64      	ldr	r2, [pc, #400]	@ (800413c <DMA_SetConfig+0x264>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a62      	ldr	r2, [pc, #392]	@ (8004140 <DMA_SetConfig+0x268>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a61      	ldr	r2, [pc, #388]	@ (8004144 <DMA_SetConfig+0x26c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8004148 <DMA_SetConfig+0x270>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800414c <DMA_SetConfig+0x274>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <DMA_SetConfig+0x10a>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8004150 <DMA_SetConfig+0x278>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <DMA_SetConfig+0x10e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <DMA_SetConfig+0x110>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00d      	beq.n	8004008 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ff4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004006:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <DMA_SetConfig+0x21c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d04a      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <DMA_SetConfig+0x220>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d045      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a36      	ldr	r2, [pc, #216]	@ (80040fc <DMA_SetConfig+0x224>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d040      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a35      	ldr	r2, [pc, #212]	@ (8004100 <DMA_SetConfig+0x228>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d03b      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a33      	ldr	r2, [pc, #204]	@ (8004104 <DMA_SetConfig+0x22c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d036      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a32      	ldr	r2, [pc, #200]	@ (8004108 <DMA_SetConfig+0x230>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d031      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a30      	ldr	r2, [pc, #192]	@ (800410c <DMA_SetConfig+0x234>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02c      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2f      	ldr	r2, [pc, #188]	@ (8004110 <DMA_SetConfig+0x238>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d027      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	@ (8004114 <DMA_SetConfig+0x23c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2c      	ldr	r2, [pc, #176]	@ (8004118 <DMA_SetConfig+0x240>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d01d      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2a      	ldr	r2, [pc, #168]	@ (800411c <DMA_SetConfig+0x244>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a29      	ldr	r2, [pc, #164]	@ (8004120 <DMA_SetConfig+0x248>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <DMA_SetConfig+0x24c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <DMA_SetConfig+0x250>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a24      	ldr	r2, [pc, #144]	@ (800412c <DMA_SetConfig+0x254>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <DMA_SetConfig+0x1d0>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a23      	ldr	r2, [pc, #140]	@ (8004130 <DMA_SetConfig+0x258>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <DMA_SetConfig+0x1d4>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <DMA_SetConfig+0x1d6>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d059      	beq.n	8004166 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	223f      	movs	r2, #63	@ 0x3f
 80040bc:	409a      	lsls	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d138      	bne.n	8004154 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040f2:	e086      	b.n	8004202 <DMA_SetConfig+0x32a>
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8
 8004134:	58025408 	.word	0x58025408
 8004138:	5802541c 	.word	0x5802541c
 800413c:	58025430 	.word	0x58025430
 8004140:	58025444 	.word	0x58025444
 8004144:	58025458 	.word	0x58025458
 8004148:	5802546c 	.word	0x5802546c
 800414c:	58025480 	.word	0x58025480
 8004150:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]
}
 8004164:	e04d      	b.n	8004202 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a29      	ldr	r2, [pc, #164]	@ (8004210 <DMA_SetConfig+0x338>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <DMA_SetConfig+0x33c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <DMA_SetConfig+0x340>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a24      	ldr	r2, [pc, #144]	@ (800421c <DMA_SetConfig+0x344>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <DMA_SetConfig+0x348>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a21      	ldr	r2, [pc, #132]	@ (8004224 <DMA_SetConfig+0x34c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a20      	ldr	r2, [pc, #128]	@ (8004228 <DMA_SetConfig+0x350>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <DMA_SetConfig+0x2de>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <DMA_SetConfig+0x354>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <DMA_SetConfig+0x2e2>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <DMA_SetConfig+0x2e4>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d108      	bne.n	80041f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	60da      	str	r2, [r3, #12]
}
 80041f0:	e007      	b.n	8004202 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	58025408 	.word	0x58025408
 8004214:	5802541c 	.word	0x5802541c
 8004218:	58025430 	.word	0x58025430
 800421c:	58025444 	.word	0x58025444
 8004220:	58025458 	.word	0x58025458
 8004224:	5802546c 	.word	0x5802546c
 8004228:	58025480 	.word	0x58025480
 800422c:	58025494 	.word	0x58025494

08004230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a42      	ldr	r2, [pc, #264]	@ (8004348 <DMA_CalcBaseAndBitshift+0x118>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a41      	ldr	r2, [pc, #260]	@ (800434c <DMA_CalcBaseAndBitshift+0x11c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3f      	ldr	r2, [pc, #252]	@ (8004350 <DMA_CalcBaseAndBitshift+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3e      	ldr	r2, [pc, #248]	@ (8004354 <DMA_CalcBaseAndBitshift+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3c      	ldr	r2, [pc, #240]	@ (8004358 <DMA_CalcBaseAndBitshift+0x128>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <DMA_CalcBaseAndBitshift+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a39      	ldr	r2, [pc, #228]	@ (8004360 <DMA_CalcBaseAndBitshift+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a38      	ldr	r2, [pc, #224]	@ (8004364 <DMA_CalcBaseAndBitshift+0x134>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a36      	ldr	r2, [pc, #216]	@ (8004368 <DMA_CalcBaseAndBitshift+0x138>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a35      	ldr	r2, [pc, #212]	@ (800436c <DMA_CalcBaseAndBitshift+0x13c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a33      	ldr	r2, [pc, #204]	@ (8004370 <DMA_CalcBaseAndBitshift+0x140>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a32      	ldr	r2, [pc, #200]	@ (8004374 <DMA_CalcBaseAndBitshift+0x144>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <DMA_CalcBaseAndBitshift+0x148>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2f      	ldr	r2, [pc, #188]	@ (800437c <DMA_CalcBaseAndBitshift+0x14c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004380 <DMA_CalcBaseAndBitshift+0x150>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <DMA_CalcBaseAndBitshift+0xa8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004384 <DMA_CalcBaseAndBitshift+0x154>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <DMA_CalcBaseAndBitshift+0xac>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <DMA_CalcBaseAndBitshift+0xae>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d024      	beq.n	800432c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3b10      	subs	r3, #16
 80042ea:	4a27      	ldr	r2, [pc, #156]	@ (8004388 <DMA_CalcBaseAndBitshift+0x158>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	4a24      	ldr	r2, [pc, #144]	@ (800438c <DMA_CalcBaseAndBitshift+0x15c>)
 80042fc:	5cd3      	ldrb	r3, [r2, r3]
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d908      	bls.n	800431c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <DMA_CalcBaseAndBitshift+0x160>)
 8004312:	4013      	ands	r3, r2
 8004314:	1d1a      	adds	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	659a      	str	r2, [r3, #88]	@ 0x58
 800431a:	e00d      	b.n	8004338 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <DMA_CalcBaseAndBitshift+0x160>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6593      	str	r3, [r2, #88]	@ 0x58
 800432a:	e005      	b.n	8004338 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	aaaaaaab 	.word	0xaaaaaaab
 800438c:	0800c2b8 	.word	0x0800c2b8
 8004390:	fffffc00 	.word	0xfffffc00

08004394 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d120      	bne.n	80043ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d858      	bhi.n	8004462 <DMA_CheckFifoParam+0xce>
 80043b0:	a201      	add	r2, pc, #4	@ (adr r2, 80043b8 <DMA_CheckFifoParam+0x24>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043db 	.word	0x080043db
 80043c0:	080043c9 	.word	0x080043c9
 80043c4:	08004463 	.word	0x08004463
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d048      	beq.n	8004466 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d8:	e045      	b.n	8004466 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043e2:	d142      	bne.n	800446a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043e8:	e03f      	b.n	800446a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043f2:	d123      	bne.n	800443c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d838      	bhi.n	800446e <DMA_CheckFifoParam+0xda>
 80043fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004404 <DMA_CheckFifoParam+0x70>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004415 	.word	0x08004415
 8004408:	0800441b 	.word	0x0800441b
 800440c:	08004415 	.word	0x08004415
 8004410:	0800442d 	.word	0x0800442d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
        break;
 8004418:	e030      	b.n	800447c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d025      	beq.n	8004472 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800442a:	e022      	b.n	8004472 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004434:	d11f      	bne.n	8004476 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800443a:	e01c      	b.n	8004476 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	2b02      	cmp	r3, #2
 8004442:	d902      	bls.n	800444a <DMA_CheckFifoParam+0xb6>
 8004444:	2b03      	cmp	r3, #3
 8004446:	d003      	beq.n	8004450 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004448:	e018      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
        break;
 800444e:	e015      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
    break;
 8004460:	e00b      	b.n	800447a <DMA_CheckFifoParam+0xe6>
        break;
 8004462:	bf00      	nop
 8004464:	e00a      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        break;
 8004466:	bf00      	nop
 8004468:	e008      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        break;
 800446a:	bf00      	nop
 800446c:	e006      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <DMA_CheckFifoParam+0xe8>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <DMA_CheckFifoParam+0xe8>
    break;
 800447a:	bf00      	nop
    }
  }

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a38      	ldr	r2, [pc, #224]	@ (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a36      	ldr	r2, [pc, #216]	@ (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01d      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a35      	ldr	r2, [pc, #212]	@ (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d018      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a33      	ldr	r2, [pc, #204]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a32      	ldr	r2, [pc, #200]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a30      	ldr	r2, [pc, #192]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2f      	ldr	r2, [pc, #188]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2d      	ldr	r2, [pc, #180]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01a      	beq.n	800452a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	3b08      	subs	r3, #8
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4b26      	ldr	r3, [pc, #152]	@ (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a24      	ldr	r2, [pc, #144]	@ (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004518:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004528:	e024      	b.n	8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3b10      	subs	r3, #16
 8004532:	4a1e      	ldr	r2, [pc, #120]	@ (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a1c      	ldr	r2, [pc, #112]	@ (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d806      	bhi.n	8004552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a1b      	ldr	r2, [pc, #108]	@ (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d902      	bls.n	8004552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3308      	adds	r3, #8
 8004550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004564:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2201      	movs	r2, #1
 800456e:	409a      	lsls	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	58025408 	.word	0x58025408
 8004584:	5802541c 	.word	0x5802541c
 8004588:	58025430 	.word	0x58025430
 800458c:	58025444 	.word	0x58025444
 8004590:	58025458 	.word	0x58025458
 8004594:	5802546c 	.word	0x5802546c
 8004598:	58025480 	.word	0x58025480
 800459c:	58025494 	.word	0x58025494
 80045a0:	cccccccd 	.word	0xcccccccd
 80045a4:	16009600 	.word	0x16009600
 80045a8:	58025880 	.word	0x58025880
 80045ac:	aaaaaaab 	.word	0xaaaaaaab
 80045b0:	400204b8 	.word	0x400204b8
 80045b4:	4002040f 	.word	0x4002040f
 80045b8:	10008200 	.word	0x10008200
 80045bc:	40020880 	.word	0x40020880

080045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04a      	beq.n	800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d847      	bhi.n	800466c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a25      	ldr	r2, [pc, #148]	@ (8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a24      	ldr	r2, [pc, #144]	@ (800467c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01d      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a22      	ldr	r2, [pc, #136]	@ (8004680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a21      	ldr	r2, [pc, #132]	@ (8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1e      	ldr	r2, [pc, #120]	@ (800468c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1b      	ldr	r2, [pc, #108]	@ (8004694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4b17      	ldr	r3, [pc, #92]	@ (8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a15      	ldr	r2, [pc, #84]	@ (800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004648:	671a      	str	r2, [r3, #112]	@ 0x70
 800464a:	e009      	b.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4b14      	ldr	r3, [pc, #80]	@ (80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a11      	ldr	r2, [pc, #68]	@ (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800465e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3b01      	subs	r3, #1
 8004664:	2201      	movs	r2, #1
 8004666:	409a      	lsls	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	58025408 	.word	0x58025408
 800467c:	5802541c 	.word	0x5802541c
 8004680:	58025430 	.word	0x58025430
 8004684:	58025444 	.word	0x58025444
 8004688:	58025458 	.word	0x58025458
 800468c:	5802546c 	.word	0x5802546c
 8004690:	58025480 	.word	0x58025480
 8004694:	58025494 	.word	0x58025494
 8004698:	1600963f 	.word	0x1600963f
 800469c:	58025940 	.word	0x58025940
 80046a0:	1000823f 	.word	0x1000823f
 80046a4:	40020940 	.word	0x40020940

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046b6:	4b86      	ldr	r3, [pc, #536]	@ (80048d0 <HAL_GPIO_Init+0x228>)
 80046b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046ba:	e18c      	b.n	80049d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 817e 	beq.w	80049d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d005      	beq.n	80046ec <HAL_GPIO_Init+0x44>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d130      	bne.n	800474e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004722:	2201      	movs	r2, #1
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0201 	and.w	r2, r3, #1
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d017      	beq.n	800478a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d123      	bne.n	80047de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80d8 	beq.w	80049d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004820:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <HAL_GPIO_Init+0x22c>)
 8004822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004826:	4a2b      	ldr	r2, [pc, #172]	@ (80048d4 <HAL_GPIO_Init+0x22c>)
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004830:	4b28      	ldr	r3, [pc, #160]	@ (80048d4 <HAL_GPIO_Init+0x22c>)
 8004832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800483e:	4a26      	ldr	r2, [pc, #152]	@ (80048d8 <HAL_GPIO_Init+0x230>)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1d      	ldr	r2, [pc, #116]	@ (80048dc <HAL_GPIO_Init+0x234>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d04a      	beq.n	8004900 <HAL_GPIO_Init+0x258>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <HAL_GPIO_Init+0x238>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02b      	beq.n	80048ca <HAL_GPIO_Init+0x222>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_GPIO_Init+0x23c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d025      	beq.n	80048c6 <HAL_GPIO_Init+0x21e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_GPIO_Init+0x240>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <HAL_GPIO_Init+0x21a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_GPIO_Init+0x244>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x216>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a18      	ldr	r2, [pc, #96]	@ (80048f0 <HAL_GPIO_Init+0x248>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x212>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <HAL_GPIO_Init+0x24c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x20e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <HAL_GPIO_Init+0x250>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x20a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <HAL_GPIO_Init+0x254>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x206>
 80048aa:	2309      	movs	r3, #9
 80048ac:	e029      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048ae:	230a      	movs	r3, #10
 80048b0:	e027      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e025      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e023      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e021      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048be:	2304      	movs	r3, #4
 80048c0:	e01f      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e01d      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e01b      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e019      	b.n	8004902 <HAL_GPIO_Init+0x25a>
 80048ce:	bf00      	nop
 80048d0:	58000080 	.word	0x58000080
 80048d4:	58024400 	.word	0x58024400
 80048d8:	58000400 	.word	0x58000400
 80048dc:	58020000 	.word	0x58020000
 80048e0:	58020400 	.word	0x58020400
 80048e4:	58020800 	.word	0x58020800
 80048e8:	58020c00 	.word	0x58020c00
 80048ec:	58021000 	.word	0x58021000
 80048f0:	58021400 	.word	0x58021400
 80048f4:	58021800 	.word	0x58021800
 80048f8:	58021c00 	.word	0x58021c00
 80048fc:	58022400 	.word	0x58022400
 8004900:	2300      	movs	r3, #0
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	f002 0203 	and.w	r2, r2, #3
 8004908:	0092      	lsls	r2, r2, #2
 800490a:	4093      	lsls	r3, r2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004912:	4938      	ldr	r1, [pc, #224]	@ (80049f4 <HAL_GPIO_Init+0x34c>)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	3302      	adds	r3, #2
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f47f ae6b 	bne.w	80046bc <HAL_GPIO_Init+0x14>
  }
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	3724      	adds	r7, #36	@ 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	58000400 	.word	0x58000400

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a14:	e003      	b.n	8004a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	041a      	lsls	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f005 fe2b 	bl	800a6ac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	58024800 	.word	0x58024800

08004a80 <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8004a88:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_PWR_EnableWakeUpPin+0x24>)
 8004a8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <HAL_PWR_EnableWakeUpPin+0x28>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	4904      	ldr	r1, [pc, #16]	@ (8004aa4 <HAL_PWR_EnableWakeUpPin+0x24>)
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	58024800 	.word	0x58024800
 8004aa8:	f000c0c0 	.word	0xf000c0c0

08004aac <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
 8004ab4:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8004ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4904      	ldr	r1, [pc, #16]	@ (8004ad4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	58024800 	.word	0x58024800

08004ad8 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ae4:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	4a07      	ldr	r2, [pc, #28]	@ (8004b08 <HAL_PWR_EnterSLEEPMode+0x30>)
 8004aea:	f023 0304 	bic.w	r3, r3, #4
 8004aee:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004af6:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004af8:	e000      	b.n	8004afc <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004afa:	bf20      	wfe
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	4a0d      	ldr	r2, [pc, #52]	@ (8004b4c <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b16:	f043 0305 	orr.w	r3, r3, #5
 8004b1a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	@ (8004b4c <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b22:	f043 0302 	orr.w	r3, r3, #2
 8004b26:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004b28:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	@ (8004b50 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b34:	f3bf 8f4f 	dsb	sy
}
 8004b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b3a:	f3bf 8f6f 	isb	sy
}
 8004b3e:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
 8004b40:	bf30      	wfi
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	58024800 	.word	0x58024800
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d00a      	beq.n	8004b8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b78:	4b16      	ldr	r3, [pc, #88]	@ (8004bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e01f      	b.n	8004bca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e01d      	b.n	8004bca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b8e:	4b11      	ldr	r3, [pc, #68]	@ (8004bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 0207 	bic.w	r2, r3, #7
 8004b96:	490f      	ldr	r1, [pc, #60]	@ (8004bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b9e:	f7fc fe2f 	bl	8001800 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ba4:	e009      	b.n	8004bba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ba6:	f7fc fe2b 	bl	8001800 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bb4:	d901      	bls.n	8004bba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc6:	d1ee      	bne.n	8004ba6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	58024800 	.word	0x58024800

08004bd8 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8004bdc:	4b22      	ldr	r3, [pc, #136]	@ (8004c68 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf8:	d112      	bne.n	8004c20 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8004bfa:	f7ff ffab 	bl	8004b54 <HAL_PWR_PVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8004c68 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0a:	d009      	beq.n	8004c20 <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8004c20:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01a      	beq.n	8004c62 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3c:	d111      	bne.n	8004c62 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8004c3e:	f000 f815 	bl	8004c6c <HAL_PWREx_AVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
 8004c42:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d009      	beq.n	8004c62 <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8004c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        }
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	58024800 	.word	0x58024800

08004c6c <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	@ 0x30
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e3c8      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8087 	beq.w	8004daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9c:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca6:	4b86      	ldr	r3, [pc, #536]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d007      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x46>
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	2b18      	cmp	r3, #24
 8004cb6:	d110      	bne.n	8004cda <HAL_RCC_OscConfig+0x5e>
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d10b      	bne.n	8004cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d06c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x12c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d168      	bne.n	8004da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e3a2      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x76>
 8004ce4:	4b76      	ldr	r3, [pc, #472]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a75      	ldr	r2, [pc, #468]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e02e      	b.n	8004d50 <HAL_RCC_OscConfig+0xd4>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x98>
 8004cfa:	4b71      	ldr	r3, [pc, #452]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a70      	ldr	r2, [pc, #448]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e01d      	b.n	8004d50 <HAL_RCC_OscConfig+0xd4>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0xbc>
 8004d1e:	4b68      	ldr	r3, [pc, #416]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a67      	ldr	r2, [pc, #412]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b65      	ldr	r3, [pc, #404]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a64      	ldr	r2, [pc, #400]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e00b      	b.n	8004d50 <HAL_RCC_OscConfig+0xd4>
 8004d38:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a60      	ldr	r2, [pc, #384]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fc fd52 	bl	8001800 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7fc fd4e 	bl	8001800 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	@ 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e356      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d72:	4b53      	ldr	r3, [pc, #332]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0xe4>
 8004d7e:	e014      	b.n	8004daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fc fd3e 	bl	8001800 <HAL_GetTick>
 8004d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7fc fd3a 	bl	8001800 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	@ 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e342      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d9a:	4b49      	ldr	r3, [pc, #292]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x10c>
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 808c 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db8:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_RCC_OscConfig+0x162>
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	2b18      	cmp	r3, #24
 8004dd2:	d137      	bne.n	8004e44 <HAL_RCC_OscConfig+0x1c8>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d132      	bne.n	8004e44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dde:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_RCC_OscConfig+0x17a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e314      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004df6:	4b32      	ldr	r3, [pc, #200]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 0219 	bic.w	r2, r3, #25
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	492f      	ldr	r1, [pc, #188]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fc fcfa 	bl	8001800 <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fc fcf6 	bl	8001800 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e2fe      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	4920      	ldr	r1, [pc, #128]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e42:	e045      	b.n	8004ed0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d026      	beq.n	8004e9a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f023 0219 	bic.w	r2, r3, #25
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4919      	ldr	r1, [pc, #100]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fc fccf 	bl	8001800 <HAL_GetTick>
 8004e62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fc fccb 	bl	8001800 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e2d3      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	490b      	ldr	r1, [pc, #44]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fc fcab 	bl	8001800 <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fc fca7 	bl	8001800 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d903      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e2af      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
 8004ec0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	4b96      	ldr	r3, [pc, #600]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d06a      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004edc:	4b90      	ldr	r3, [pc, #576]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d007      	beq.n	8004f02 <HAL_RCC_OscConfig+0x286>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b18      	cmp	r3, #24
 8004ef6:	d11b      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2b4>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d116      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f02:	4b87      	ldr	r3, [pc, #540]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_RCC_OscConfig+0x29e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b80      	cmp	r3, #128	@ 0x80
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e282      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1a:	4b81      	ldr	r3, [pc, #516]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	497d      	ldr	r1, [pc, #500]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2e:	e040      	b.n	8004fb2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d023      	beq.n	8004f80 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f38:	4b79      	ldr	r3, [pc, #484]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a78      	ldr	r2, [pc, #480]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fc5c 	bl	8001800 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fc58 	bl	8001800 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e260      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5e:	4b70      	ldr	r3, [pc, #448]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	4969      	ldr	r1, [pc, #420]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f80:	4b67      	ldr	r3, [pc, #412]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a66      	ldr	r2, [pc, #408]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fc38 	bl	8001800 <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f94:	f7fc fc34 	bl	8001800 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e23c      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d036      	beq.n	800502c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d019      	beq.n	8004ffa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b56      	ldr	r3, [pc, #344]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	4a55      	ldr	r2, [pc, #340]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fc15 	bl	8001800 <HAL_GetTick>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fc fc11 	bl	8001800 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e219      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fec:	4b4c      	ldr	r3, [pc, #304]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x35e>
 8004ff8:	e018      	b.n	800502c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffa:	4b49      	ldr	r3, [pc, #292]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffe:	4a48      	ldr	r2, [pc, #288]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fc fbfb 	bl	8001800 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500e:	f7fc fbf7 	bl	8001800 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1ff      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005020:	4b3f      	ldr	r3, [pc, #252]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d036      	beq.n	80050a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005040:	4b37      	ldr	r3, [pc, #220]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a36      	ldr	r2, [pc, #216]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800504a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800504c:	f7fc fbd8 	bl	8001800 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005054:	f7fc fbd4 	bl	8001800 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e1dc      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005066:	4b2e      	ldr	r3, [pc, #184]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x3d8>
 8005072:	e018      	b.n	80050a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a29      	ldr	r2, [pc, #164]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 800507a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800507e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005080:	f7fc fbbe 	bl	8001800 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005088:	f7fc fbba 	bl	8001800 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e1c2      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800509a:	4b21      	ldr	r3, [pc, #132]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 8086 	beq.w	80051c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <HAL_RCC_OscConfig+0x4a8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_RCC_OscConfig+0x4a8>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c0:	f7fc fb9e 	bl	8001800 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fc fb9a 	bl	8001800 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	@ 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1a2      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <HAL_RCC_OscConfig+0x4a8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d106      	bne.n	80050fc <HAL_RCC_OscConfig+0x480>
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050fa:	e032      	b.n	8005162 <HAL_RCC_OscConfig+0x4e6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <HAL_RCC_OscConfig+0x4ac>
 8005104:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4a05      	ldr	r2, [pc, #20]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005114:	4a02      	ldr	r2, [pc, #8]	@ (8005120 <HAL_RCC_OscConfig+0x4a4>)
 8005116:	f023 0304 	bic.w	r3, r3, #4
 800511a:	6713      	str	r3, [r2, #112]	@ 0x70
 800511c:	e021      	b.n	8005162 <HAL_RCC_OscConfig+0x4e6>
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	58024800 	.word	0x58024800
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x4ce>
 8005130:	4b83      	ldr	r3, [pc, #524]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	4a82      	ldr	r2, [pc, #520]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6713      	str	r3, [r2, #112]	@ 0x70
 800513c:	4b80      	ldr	r3, [pc, #512]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005140:	4a7f      	ldr	r2, [pc, #508]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	@ 0x70
 8005148:	e00b      	b.n	8005162 <HAL_RCC_OscConfig+0x4e6>
 800514a:	4b7d      	ldr	r3, [pc, #500]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514e:	4a7c      	ldr	r2, [pc, #496]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	@ 0x70
 8005156:	4b7a      	ldr	r3, [pc, #488]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	4a79      	ldr	r2, [pc, #484]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fc fb49 	bl	8001800 <HAL_GetTick>
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fb45 	bl	8001800 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e14b      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005188:	4b6d      	ldr	r3, [pc, #436]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ee      	beq.n	8005172 <HAL_RCC_OscConfig+0x4f6>
 8005194:	e014      	b.n	80051c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fc fb33 	bl	8001800 <HAL_GetTick>
 800519a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fc fb2f 	bl	8001800 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e135      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b4:	4b62      	ldr	r3, [pc, #392]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ee      	bne.n	800519e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 812a 	beq.w	800541e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d2:	2b18      	cmp	r3, #24
 80051d4:	f000 80ba 	beq.w	800534c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f040 8095 	bne.w	800530c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b57      	ldr	r3, [pc, #348]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a56      	ldr	r2, [pc, #344]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80051e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fc fb07 	bl	8001800 <HAL_GetTick>
 80051f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f6:	f7fc fb03 	bl	8001800 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10b      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005208:	4b4d      	ldr	r3, [pc, #308]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005214:	4b4a      	ldr	r3, [pc, #296]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005218:	4b4a      	ldr	r3, [pc, #296]	@ (8005344 <HAL_RCC_OscConfig+0x6c8>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	430a      	orrs	r2, r1
 8005228:	4945      	ldr	r1, [pc, #276]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	628b      	str	r3, [r1, #40]	@ 0x28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	3b01      	subs	r3, #1
 8005234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523c:	3b01      	subs	r3, #1
 800523e:	025b      	lsls	r3, r3, #9
 8005240:	b29b      	uxth	r3, r3
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	3b01      	subs	r3, #1
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005256:	3b01      	subs	r3, #1
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800525e:	4938      	ldr	r1, [pc, #224]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005264:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	4a35      	ldr	r2, [pc, #212]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005270:	4b33      	ldr	r3, [pc, #204]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005274:	4b34      	ldr	r3, [pc, #208]	@ (8005348 <HAL_RCC_OscConfig+0x6cc>)
 8005276:	4013      	ands	r3, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800527c:	00d2      	lsls	r2, r2, #3
 800527e:	4930      	ldr	r1, [pc, #192]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005284:	4b2e      	ldr	r3, [pc, #184]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	f023 020c 	bic.w	r2, r3, #12
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005290:	492b      	ldr	r1, [pc, #172]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005296:	4b2a      	ldr	r3, [pc, #168]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	f023 0202 	bic.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	4927      	ldr	r1, [pc, #156]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	4a24      	ldr	r2, [pc, #144]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b4:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc fa8c 	bl	8001800 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fc fa88 	bl	8001800 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e090      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fe:	4b10      	ldr	r3, [pc, #64]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x670>
 800530a:	e088      	b.n	800541e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0b      	ldr	r2, [pc, #44]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fc fa72 	bl	8001800 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fc fa6e 	bl	8001800 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e076      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005332:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <HAL_RCC_OscConfig+0x6c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a4>
 800533e:	e06e      	b.n	800541e <HAL_RCC_OscConfig+0x7a2>
 8005340:	58024400 	.word	0x58024400
 8005344:	fffffc0c 	.word	0xfffffc0c
 8005348:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800534c:	4b36      	ldr	r3, [pc, #216]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005352:	4b35      	ldr	r3, [pc, #212]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	2b01      	cmp	r3, #1
 800535e:	d031      	beq.n	80053c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f003 0203 	and.w	r2, r3, #3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d12a      	bne.n	80053c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d122      	bne.n	80053c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d11a      	bne.n	80053c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	0a5b      	lsrs	r3, r3, #9
 8005392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d108      	bne.n	80053c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e02b      	b.n	8005420 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053c8:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 80053ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053cc:	08db      	lsrs	r3, r3, #3
 80053ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d01f      	beq.n	800541e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4a11      	ldr	r2, [pc, #68]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053ea:	f7fc fa09 	bl	8001800 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053f0:	bf00      	nop
 80053f2:	f7fc fa05 	bl	8001800 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d0f9      	beq.n	80053f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 8005400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <HAL_RCC_OscConfig+0x7b0>)
 8005404:	4013      	ands	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800540a:	00d2      	lsls	r2, r2, #3
 800540c:	4906      	ldr	r1, [pc, #24]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 800540e:	4313      	orrs	r3, r2
 8005410:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <HAL_RCC_OscConfig+0x7ac>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	@ 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	58024400 	.word	0x58024400
 800542c:	ffff0007 	.word	0xffff0007

08005430 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e19c      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b8a      	ldr	r3, [pc, #552]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d910      	bls.n	8005474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b87      	ldr	r3, [pc, #540]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 020f 	bic.w	r2, r3, #15
 800545a:	4985      	ldr	r1, [pc, #532]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b83      	ldr	r3, [pc, #524]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e184      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	4b7b      	ldr	r3, [pc, #492]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548c:	429a      	cmp	r2, r3
 800548e:	d908      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005490:	4b78      	ldr	r3, [pc, #480]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	4975      	ldr	r1, [pc, #468]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	4b70      	ldr	r3, [pc, #448]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054be:	4b6d      	ldr	r3, [pc, #436]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	496a      	ldr	r1, [pc, #424]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4b64      	ldr	r3, [pc, #400]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d908      	bls.n	80054fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054ec:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	495e      	ldr	r1, [pc, #376]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d010      	beq.n	800552c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	4b59      	ldr	r3, [pc, #356]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005516:	429a      	cmp	r2, r3
 8005518:	d908      	bls.n	800552c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800551a:	4b56      	ldr	r3, [pc, #344]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	4953      	ldr	r1, [pc, #332]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005528:	4313      	orrs	r3, r2
 800552a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d010      	beq.n	800555a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	4b4d      	ldr	r3, [pc, #308]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	429a      	cmp	r2, r3
 8005546:	d908      	bls.n	800555a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b4a      	ldr	r3, [pc, #296]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f023 020f 	bic.w	r2, r3, #15
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4947      	ldr	r1, [pc, #284]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005556:	4313      	orrs	r3, r2
 8005558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d055      	beq.n	8005612 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005566:	4b43      	ldr	r3, [pc, #268]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4940      	ldr	r1, [pc, #256]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005574:	4313      	orrs	r3, r2
 8005576:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d107      	bne.n	8005590 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005580:	4b3c      	ldr	r3, [pc, #240]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d121      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0f6      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d115      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0ea      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055b0:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0de      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0d6      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055d0:	4b28      	ldr	r3, [pc, #160]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f023 0207 	bic.w	r2, r3, #7
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4925      	ldr	r1, [pc, #148]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e2:	f7fc f90d 	bl	8001800 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ea:	f7fc f909 	bl	8001800 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0be      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005600:	4b1c      	ldr	r3, [pc, #112]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	429a      	cmp	r2, r3
 8005610:	d1eb      	bne.n	80055ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	429a      	cmp	r2, r3
 800562c:	d208      	bcs.n	8005640 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562e:	4b11      	ldr	r3, [pc, #68]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f023 020f 	bic.w	r2, r3, #15
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	490e      	ldr	r1, [pc, #56]	@ (8005674 <HAL_RCC_ClockConfig+0x244>)
 800563c:	4313      	orrs	r3, r2
 800563e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d214      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 020f 	bic.w	r2, r3, #15
 8005656:	4906      	ldr	r1, [pc, #24]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <HAL_RCC_ClockConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e086      	b.n	800577e <HAL_RCC_ClockConfig+0x34e>
 8005670:	52002000 	.word	0x52002000
 8005674:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	4b3f      	ldr	r3, [pc, #252]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005690:	429a      	cmp	r2, r3
 8005692:	d208      	bcs.n	80056a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005694:	4b3c      	ldr	r3, [pc, #240]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	4939      	ldr	r1, [pc, #228]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	4b34      	ldr	r3, [pc, #208]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056be:	429a      	cmp	r2, r3
 80056c0:	d208      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056c2:	4b31      	ldr	r3, [pc, #196]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	492e      	ldr	r1, [pc, #184]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	4b28      	ldr	r3, [pc, #160]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d208      	bcs.n	8005702 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056f0:	4b25      	ldr	r3, [pc, #148]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4922      	ldr	r1, [pc, #136]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	4b1d      	ldr	r3, [pc, #116]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800571a:	429a      	cmp	r2, r3
 800571c:	d208      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800571e:	4b1a      	ldr	r3, [pc, #104]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4917      	ldr	r1, [pc, #92]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 800572c:	4313      	orrs	r3, r2
 800572e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005730:	f000 f834 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	4b14      	ldr	r3, [pc, #80]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	4912      	ldr	r1, [pc, #72]	@ (800578c <HAL_RCC_ClockConfig+0x35c>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800574e:	4b0e      	ldr	r3, [pc, #56]	@ (8005788 <HAL_RCC_ClockConfig+0x358>)
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	4a0d      	ldr	r2, [pc, #52]	@ (800578c <HAL_RCC_ClockConfig+0x35c>)
 8005758:	5cd3      	ldrb	r3, [r2, r3]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <HAL_RCC_ClockConfig+0x360>)
 8005766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005768:	4a0a      	ldr	r2, [pc, #40]	@ (8005794 <HAL_RCC_ClockConfig+0x364>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800576e:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <HAL_RCC_ClockConfig+0x368>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fb fffa 	bl	800176c <HAL_InitTick>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	58024400 	.word	0x58024400
 800578c:	0800c2a8 	.word	0x0800c2a8
 8005790:	24000088 	.word	0x24000088
 8005794:	24000084 	.word	0x24000084
 8005798:	2400008c 	.word	0x2400008c

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a2:	4bb3      	ldr	r3, [pc, #716]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057aa:	2b18      	cmp	r3, #24
 80057ac:	f200 8155 	bhi.w	8005a5a <HAL_RCC_GetSysClockFreq+0x2be>
 80057b0:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	0800581d 	.word	0x0800581d
 80057bc:	08005a5b 	.word	0x08005a5b
 80057c0:	08005a5b 	.word	0x08005a5b
 80057c4:	08005a5b 	.word	0x08005a5b
 80057c8:	08005a5b 	.word	0x08005a5b
 80057cc:	08005a5b 	.word	0x08005a5b
 80057d0:	08005a5b 	.word	0x08005a5b
 80057d4:	08005a5b 	.word	0x08005a5b
 80057d8:	08005843 	.word	0x08005843
 80057dc:	08005a5b 	.word	0x08005a5b
 80057e0:	08005a5b 	.word	0x08005a5b
 80057e4:	08005a5b 	.word	0x08005a5b
 80057e8:	08005a5b 	.word	0x08005a5b
 80057ec:	08005a5b 	.word	0x08005a5b
 80057f0:	08005a5b 	.word	0x08005a5b
 80057f4:	08005a5b 	.word	0x08005a5b
 80057f8:	08005849 	.word	0x08005849
 80057fc:	08005a5b 	.word	0x08005a5b
 8005800:	08005a5b 	.word	0x08005a5b
 8005804:	08005a5b 	.word	0x08005a5b
 8005808:	08005a5b 	.word	0x08005a5b
 800580c:	08005a5b 	.word	0x08005a5b
 8005810:	08005a5b 	.word	0x08005a5b
 8005814:	08005a5b 	.word	0x08005a5b
 8005818:	0800584f 	.word	0x0800584f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800581c:	4b94      	ldr	r3, [pc, #592]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005828:	4b91      	ldr	r3, [pc, #580]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	08db      	lsrs	r3, r3, #3
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	4a90      	ldr	r2, [pc, #576]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800583a:	e111      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800583c:	4b8d      	ldr	r3, [pc, #564]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800583e:	61bb      	str	r3, [r7, #24]
      break;
 8005840:	e10e      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005842:	4b8d      	ldr	r3, [pc, #564]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005844:	61bb      	str	r3, [r7, #24]
      break;
 8005846:	e10b      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005848:	4b8c      	ldr	r3, [pc, #560]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800584a:	61bb      	str	r3, [r7, #24]
      break;
 800584c:	e108      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800584e:	4b88      	ldr	r3, [pc, #544]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005858:	4b85      	ldr	r3, [pc, #532]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005862:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005864:	4b82      	ldr	r3, [pc, #520]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800586e:	4b80      	ldr	r3, [pc, #512]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80e1 	beq.w	8005a54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b02      	cmp	r3, #2
 8005896:	f000 8083 	beq.w	80059a0 <HAL_RCC_GetSysClockFreq+0x204>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b02      	cmp	r3, #2
 800589e:	f200 80a1 	bhi.w	80059e4 <HAL_RCC_GetSysClockFreq+0x248>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x114>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d056      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x1c0>
 80058ae:	e099      	b.n	80059e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d02d      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	4a6b      	ldr	r2, [pc, #428]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b62      	ldr	r3, [pc, #392]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005916:	e087      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b51      	ldr	r3, [pc, #324]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a02 	vldr	s12, [r7, #8]
 800593e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800595a:	e065      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	4b40      	ldr	r3, [pc, #256]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005982:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800599e:	e043      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a8c <HAL_RCC_GetSysClockFreq+0x2f0>
 80059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059e2:	e021      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	0a5b      	lsrs	r3, r3, #9
 8005a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a32:	3301      	adds	r3, #1
 8005a34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4c:	ee17 3a90 	vmov	r3, s15
 8005a50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a52:	e005      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
      break;
 8005a58:	e002      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a5a:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a5c:	61bb      	str	r3, [r7, #24]
      break;
 8005a5e:	bf00      	nop
  }

  return sysclockfreq;
 8005a60:	69bb      	ldr	r3, [r7, #24]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	@ 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	58024400 	.word	0x58024400
 8005a74:	03d09000 	.word	0x03d09000
 8005a78:	003d0900 	.word	0x003d0900
 8005a7c:	007a1200 	.word	0x007a1200
 8005a80:	46000000 	.word	0x46000000
 8005a84:	4c742400 	.word	0x4c742400
 8005a88:	4a742400 	.word	0x4a742400
 8005a8c:	4af42400 	.word	0x4af42400

08005a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a96:	f7ff fe81 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	490f      	ldr	r1, [pc, #60]	@ (8005ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aa8:	5ccb      	ldrb	r3, [r1, r3]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	4a09      	ldr	r2, [pc, #36]	@ (8005ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005abe:	5cd3      	ldrb	r3, [r2, r3]
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005acc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ace:	4a07      	ldr	r2, [pc, #28]	@ (8005aec <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ad4:	4b04      	ldr	r3, [pc, #16]	@ (8005ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	0800c2a8 	.word	0x0800c2a8
 8005ae8:	24000088 	.word	0x24000088
 8005aec:	24000084 	.word	0x24000084

08005af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005af4:	f7ff ffcc 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	58024400 	.word	0x58024400
 8005b18:	0800c2a8 	.word	0x0800c2a8

08005b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b20:	f7ff ffb6 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4904      	ldr	r1, [pc, #16]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	58024400 	.word	0x58024400
 8005b44:	0800c2a8 	.word	0x0800c2a8

08005b48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b0c6      	sub	sp, #280	@ 0x118
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	ea54 0305 	orrs.w	r3, r4, r5
 8005b72:	d049      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b7e:	d02f      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b84:	d828      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b8a:	d01a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b90:	d822      	bhi.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b9a:	d007      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b9c:	e01c      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9e:	4bab      	ldr	r3, [pc, #684]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	4aaa      	ldr	r2, [pc, #680]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005baa:	e01a      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fc25 	bl	8007404 <RCCEx_PLL2_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bc0:	e00f      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc6:	3328      	adds	r3, #40	@ 0x28
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fccc 	bl	8007568 <RCCEx_PLL3_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bd6:	e004      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bde:	e000      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bea:	4b98      	ldr	r3, [pc, #608]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf8:	4a94      	ldr	r2, [pc, #592]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bfe:	e003      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c14:	f04f 0900 	mov.w	r9, #0
 8005c18:	ea58 0309 	orrs.w	r3, r8, r9
 8005c1c:	d047      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d82a      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c28:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c45 	.word	0x08005c45
 8005c34:	08005c53 	.word	0x08005c53
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c87 	.word	0x08005c87
 8005c40:	08005c87 	.word	0x08005c87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c44:	4b81      	ldr	r3, [pc, #516]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a80      	ldr	r2, [pc, #512]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c50:	e01a      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	3308      	adds	r3, #8
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 fbd2 	bl	8007404 <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c66:	e00f      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	3328      	adds	r3, #40	@ 0x28
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fc79 	bl	8007568 <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c7c:	e004      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c84:	e000      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c90:	4b6e      	ldr	r3, [pc, #440]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c94:	f023 0107 	bic.w	r1, r3, #7
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005caa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005cba:	f04f 0b00 	mov.w	fp, #0
 8005cbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005cc2:	d05b      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ccc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005cd0:	d03b      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005cd2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005cd6:	d834      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cdc:	d037      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce2:	d82e      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ce4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ce8:	d033      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cee:	d828      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf4:	d01a      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cfa:	d822      	bhi.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d04:	d007      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005d06:	e01c      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4b50      	ldr	r3, [pc, #320]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d14:	e01e      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fb70 	bl	8007404 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e013      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	3328      	adds	r3, #40	@ 0x28
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fc17 	bl	8007568 <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d40:	e008      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d6c:	4a37      	ldr	r2, [pc, #220]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d05d      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005da4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005da8:	d03b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005daa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005dae:	d834      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005db4:	d037      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dba:	d82e      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dc0:	d033      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dc6:	d828      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dcc:	d01a      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dd2:	d822      	bhi.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ddc:	d007      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005dde:	e01c      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	4a19      	ldr	r2, [pc, #100]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dec:	e01e      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	3308      	adds	r3, #8
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 fb04 	bl	8007404 <RCCEx_PLL2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e02:	e013      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	3328      	adds	r3, #40	@ 0x28
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fbab 	bl	8007568 <RCCEx_PLL3_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e18:	e008      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e20:	e004      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e22:	bf00      	nop
 8005e24:	e002      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e26:	bf00      	nop
 8005e28:	e000      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e34:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e44:	4a01      	ldr	r2, [pc, #4]	@ (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	d03a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7e:	2b30      	cmp	r3, #48	@ 0x30
 8005e80:	d01f      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e82:	2b30      	cmp	r3, #48	@ 0x30
 8005e84:	d819      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d00c      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d815      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d019      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e92:	2b10      	cmp	r3, #16
 8005e94:	d111      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e96:	4baa      	ldr	r3, [pc, #680]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	4aa9      	ldr	r2, [pc, #676]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ea2:	e011      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 faa9 	bl	8007404 <RCCEx_PLL2_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	4a98      	ldr	r2, [pc, #608]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ee4:	e003      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	d051      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f18:	d035      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f1e:	d82e      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f24:	d031      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f2a:	d828      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f30:	d01a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f36:	d822      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f40:	d007      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f42:	e01c      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f44:	4b7e      	ldr	r3, [pc, #504]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	4a7d      	ldr	r2, [pc, #500]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f50:	e01c      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	3308      	adds	r3, #8
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fa52 	bl	8007404 <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f66:	e011      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	3328      	adds	r3, #40	@ 0x28
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 faf9 	bl	8007568 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f84:	e002      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f94:	4b6a      	ldr	r3, [pc, #424]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa2:	4a67      	ldr	r2, [pc, #412]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d053      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fdc:	d033      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005fde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fe2:	d82c      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fe4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fe8:	d02f      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fee:	d826      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ff0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ff4:	d02b      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005ff6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ffa:	d820      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006000:	d012      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006006:	d81a      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d022      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d115      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006016:	3308      	adds	r3, #8
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f9f2 	bl	8007404 <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006026:	e015      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	3328      	adds	r3, #40	@ 0x28
 800602e:	2101      	movs	r1, #1
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fa99 	bl	8007568 <RCCEx_PLL3_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800603c:	e00a      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006044:	e006      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006046:	bf00      	nop
 8006048:	e004      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800605c:	4b38      	ldr	r3, [pc, #224]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006060:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800606a:	4a35      	ldr	r2, [pc, #212]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800606c:	430b      	orrs	r3, r1
 800606e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006070:	e003      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006076:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006090:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d058      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a6:	d033      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80060a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ac:	d82c      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	d02f      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b8:	d826      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060be:	d02b      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80060c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060c4:	d820      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ca:	d012      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80060cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d0:	d81a      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d022      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060da:	d115      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	3308      	adds	r3, #8
 80060e2:	2101      	movs	r1, #1
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f98d 	bl	8007404 <RCCEx_PLL2_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060f0:	e015      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	3328      	adds	r3, #40	@ 0x28
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fa34 	bl	8007568 <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006106:	e00a      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800610e:	e006      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006110:	bf00      	nop
 8006112:	e004      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800611c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10e      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006126:	4b06      	ldr	r3, [pc, #24]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006132:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006136:	4a02      	ldr	r2, [pc, #8]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006138:	430b      	orrs	r3, r1
 800613a:	6593      	str	r3, [r2, #88]	@ 0x58
 800613c:	e006      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800613e:	bf00      	nop
 8006140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800615c:	2300      	movs	r3, #0
 800615e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006162:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006166:	460b      	mov	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	d037      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006176:	d00e      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800617c:	d816      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d018      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006186:	d111      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4bc4      	ldr	r3, [pc, #784]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4ac3      	ldr	r2, [pc, #780]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006194:	e00f      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619a:	3308      	adds	r3, #8
 800619c:	2101      	movs	r1, #1
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f930 	bl	8007404 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061be:	4bb7      	ldr	r3, [pc, #732]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061cc:	4ab3      	ldr	r2, [pc, #716]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d2:	e003      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d039      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006202:	2b03      	cmp	r3, #3
 8006204:	d81c      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006249 	.word	0x08006249
 8006210:	0800621d 	.word	0x0800621d
 8006214:	0800622b 	.word	0x0800622b
 8006218:	08006249 	.word	0x08006249
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621c:	4b9f      	ldr	r3, [pc, #636]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	4a9e      	ldr	r2, [pc, #632]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006228:	e00f      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	3308      	adds	r3, #8
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f8e6 	bl	8007404 <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006252:	4b92      	ldr	r3, [pc, #584]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006256:	f023 0103 	bic.w	r1, r3, #3
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006260:	4a8e      	ldr	r2, [pc, #568]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006262:	430b      	orrs	r3, r1
 8006264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800626c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800627c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006286:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800628a:	460b      	mov	r3, r1
 800628c:	4313      	orrs	r3, r2
 800628e:	f000 8099 	beq.w	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006292:	4b83      	ldr	r3, [pc, #524]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a82      	ldr	r2, [pc, #520]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800629c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800629e:	f7fb faaf 	bl	8001800 <HAL_GetTick>
 80062a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a6:	e00b      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a8:	f7fb faaa 	bl	8001800 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b64      	cmp	r3, #100	@ 0x64
 80062b6:	d903      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062be:	e005      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c0:	4b77      	ldr	r3, [pc, #476]	@ (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ed      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80062cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d173      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062d4:	4b71      	ldr	r3, [pc, #452]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062e0:	4053      	eors	r3, r2
 80062e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d015      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062ea:	4b6c      	ldr	r3, [pc, #432]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f6:	4b69      	ldr	r3, [pc, #420]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	4a68      	ldr	r2, [pc, #416]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006302:	4b66      	ldr	r3, [pc, #408]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	4a65      	ldr	r2, [pc, #404]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800630e:	4a63      	ldr	r2, [pc, #396]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006314:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800631e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006322:	d118      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fb fa6c 	bl	8001800 <HAL_GetTick>
 8006328:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632c:	e00d      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fb fa67 	bl	8001800 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800633e:	429a      	cmp	r2, r3
 8006340:	d903      	bls.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006348:	e005      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800634a:	4b54      	ldr	r3, [pc, #336]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0eb      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800635a:	2b00      	cmp	r3, #0
 800635c:	d129      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800636a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800636e:	d10e      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006370:	4b4a      	ldr	r3, [pc, #296]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006380:	091a      	lsrs	r2, r3, #4
 8006382:	4b48      	ldr	r3, [pc, #288]	@ (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006384:	4013      	ands	r3, r2
 8006386:	4a45      	ldr	r2, [pc, #276]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6113      	str	r3, [r2, #16]
 800638c:	e005      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800638e:	4b43      	ldr	r3, [pc, #268]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	4a42      	ldr	r2, [pc, #264]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006394:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006398:	6113      	str	r3, [r2, #16]
 800639a:	4b40      	ldr	r3, [pc, #256]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800639c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063aa:	4a3c      	ldr	r2, [pc, #240]	@ (800649c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b0:	e008      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f002 0301 	and.w	r3, r2, #1
 80063d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f000 808f 	beq.w	8006504 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ec:	2b28      	cmp	r3, #40	@ 0x28
 80063ee:	d871      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	080064dd 	.word	0x080064dd
 80063fc:	080064d5 	.word	0x080064d5
 8006400:	080064d5 	.word	0x080064d5
 8006404:	080064d5 	.word	0x080064d5
 8006408:	080064d5 	.word	0x080064d5
 800640c:	080064d5 	.word	0x080064d5
 8006410:	080064d5 	.word	0x080064d5
 8006414:	080064d5 	.word	0x080064d5
 8006418:	080064a9 	.word	0x080064a9
 800641c:	080064d5 	.word	0x080064d5
 8006420:	080064d5 	.word	0x080064d5
 8006424:	080064d5 	.word	0x080064d5
 8006428:	080064d5 	.word	0x080064d5
 800642c:	080064d5 	.word	0x080064d5
 8006430:	080064d5 	.word	0x080064d5
 8006434:	080064d5 	.word	0x080064d5
 8006438:	080064bf 	.word	0x080064bf
 800643c:	080064d5 	.word	0x080064d5
 8006440:	080064d5 	.word	0x080064d5
 8006444:	080064d5 	.word	0x080064d5
 8006448:	080064d5 	.word	0x080064d5
 800644c:	080064d5 	.word	0x080064d5
 8006450:	080064d5 	.word	0x080064d5
 8006454:	080064d5 	.word	0x080064d5
 8006458:	080064dd 	.word	0x080064dd
 800645c:	080064d5 	.word	0x080064d5
 8006460:	080064d5 	.word	0x080064d5
 8006464:	080064d5 	.word	0x080064d5
 8006468:	080064d5 	.word	0x080064d5
 800646c:	080064d5 	.word	0x080064d5
 8006470:	080064d5 	.word	0x080064d5
 8006474:	080064d5 	.word	0x080064d5
 8006478:	080064dd 	.word	0x080064dd
 800647c:	080064d5 	.word	0x080064d5
 8006480:	080064d5 	.word	0x080064d5
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064d5 	.word	0x080064d5
 8006490:	080064d5 	.word	0x080064d5
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064dd 	.word	0x080064dd
 800649c:	58024400 	.word	0x58024400
 80064a0:	58024800 	.word	0x58024800
 80064a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	3308      	adds	r3, #8
 80064ae:	2101      	movs	r1, #1
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 ffa7 	bl	8007404 <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064bc:	e00f      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c2:	3328      	adds	r3, #40	@ 0x28
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f84e 	bl	8007568 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064d2:	e004      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064da:	e000      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064e6:	4bbf      	ldr	r3, [pc, #764]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064f4:	4abb      	ldr	r2, [pc, #748]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064f6:	430b      	orrs	r3, r1
 80064f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f002 0302 	and.w	r3, r2, #2
 8006510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800651a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	d041      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652a:	2b05      	cmp	r3, #5
 800652c:	d824      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800652e:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006581 	.word	0x08006581
 8006538:	0800654d 	.word	0x0800654d
 800653c:	08006563 	.word	0x08006563
 8006540:	08006581 	.word	0x08006581
 8006544:	08006581 	.word	0x08006581
 8006548:	08006581 	.word	0x08006581
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	3308      	adds	r3, #8
 8006552:	2101      	movs	r1, #1
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ff55 	bl	8007404 <RCCEx_PLL2_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006560:	e00f      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	3328      	adds	r3, #40	@ 0x28
 8006568:	2101      	movs	r1, #1
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fffc 	bl	8007568 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006576:	e004      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006582:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800658a:	4b96      	ldr	r3, [pc, #600]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800658c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658e:	f023 0107 	bic.w	r1, r3, #7
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006598:	4a92      	ldr	r2, [pc, #584]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6553      	str	r3, [r2, #84]	@ 0x54
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 0304 	and.w	r3, r2, #4
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d044      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d0:	2b05      	cmp	r3, #5
 80065d2:	d825      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065d4:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	08006629 	.word	0x08006629
 80065e0:	080065f5 	.word	0x080065f5
 80065e4:	0800660b 	.word	0x0800660b
 80065e8:	08006629 	.word	0x08006629
 80065ec:	08006629 	.word	0x08006629
 80065f0:	08006629 	.word	0x08006629
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	3308      	adds	r3, #8
 80065fa:	2101      	movs	r1, #1
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 ff01 	bl	8007404 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006608:	e00f      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660e:	3328      	adds	r3, #40	@ 0x28
 8006610:	2101      	movs	r1, #1
 8006612:	4618      	mov	r0, r3
 8006614:	f000 ffa8 	bl	8007568 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800661e:	e004      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006632:	4b6c      	ldr	r3, [pc, #432]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006636:	f023 0107 	bic.w	r1, r3, #7
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	4a68      	ldr	r2, [pc, #416]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6593      	str	r3, [r2, #88]	@ 0x58
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800664e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f002 0320 	and.w	r3, r2, #32
 800665e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006662:	2300      	movs	r3, #0
 8006664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006668:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800666c:	460b      	mov	r3, r1
 800666e:	4313      	orrs	r3, r2
 8006670:	d055      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800667a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800667e:	d033      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006684:	d82c      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668a:	d02f      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d826      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006696:	d02b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800669c:	d820      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800669e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a2:	d012      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a8:	d81a      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d022      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b2:	d115      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b8:	3308      	adds	r3, #8
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fea1 	bl	8007404 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066c8:	e015      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	3328      	adds	r3, #40	@ 0x28
 80066d0:	2102      	movs	r1, #2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 ff48 	bl	8007568 <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066de:	e00a      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066e6:	e006      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066fe:	4b39      	ldr	r3, [pc, #228]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006702:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800670e:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6553      	str	r3, [r2, #84]	@ 0x54
 8006714:	e003      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800672a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006734:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d058      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006746:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800674a:	d033      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800674c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006750:	d82c      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006756:	d02f      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675c:	d826      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800675e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006762:	d02b      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006764:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006768:	d820      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676e:	d012      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006774:	d81a      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d022      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677e:	d115      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006784:	3308      	adds	r3, #8
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fe3b 	bl	8007404 <RCCEx_PLL2_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006794:	e015      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	3328      	adds	r3, #40	@ 0x28
 800679c:	2102      	movs	r1, #2
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fee2 	bl	8007568 <RCCEx_PLL3_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067aa:	e00a      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067b2:	e006      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b4:	bf00      	nop
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b8:	bf00      	nop
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10e      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067da:	4a02      	ldr	r2, [pc, #8]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067dc:	430b      	orrs	r3, r1
 80067de:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006806:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d055      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006818:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800681c:	d033      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800681e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006822:	d82c      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006828:	d02f      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800682e:	d826      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006830:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006834:	d02b      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006836:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800683a:	d820      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006840:	d012      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006846:	d81a      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d022      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800684c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006850:	d115      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	3308      	adds	r3, #8
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fdd2 	bl	8007404 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006866:	e015      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	3328      	adds	r3, #40	@ 0x28
 800686e:	2102      	movs	r1, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fe79 	bl	8007568 <RCCEx_PLL3_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800687c:	e00a      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006884:	e006      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006886:	bf00      	nop
 8006888:	e004      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800688a:	bf00      	nop
 800688c:	e002      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800689c:	4ba0      	ldr	r3, [pc, #640]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ac:	4a9c      	ldr	r2, [pc, #624]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f002 0308 	and.w	r3, r2, #8
 80068c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d01e      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	3328      	adds	r3, #40	@ 0x28
 80068f0:	2102      	movs	r1, #2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fe38 	bl	8007568 <RCCEx_PLL3_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006904:	4b86      	ldr	r3, [pc, #536]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006908:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006914:	4a82      	ldr	r2, [pc, #520]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006916:	430b      	orrs	r3, r1
 8006918:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f002 0310 	and.w	r3, r2, #16
 8006926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800692a:	2300      	movs	r3, #0
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006930:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d01e      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006946:	d10c      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	3328      	adds	r3, #40	@ 0x28
 800694e:	2102      	movs	r1, #2
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fe09 	bl	8007568 <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006962:	4b6f      	ldr	r3, [pc, #444]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006972:	4a6b      	ldr	r2, [pc, #428]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006974:	430b      	orrs	r3, r1
 8006976:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006984:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006986:	2300      	movs	r3, #0
 8006988:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800698a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d03e      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800699c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069a0:	d022      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80069a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069a6:	d81b      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b0:	d00b      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80069b2:	e015      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	3308      	adds	r3, #8
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fd21 	bl	8007404 <RCCEx_PLL2_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069c8:	e00f      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	3328      	adds	r3, #40	@ 0x28
 80069d0:	2102      	movs	r1, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fdc8 	bl	8007568 <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a02:	4a47      	ldr	r2, [pc, #284]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a20:	2300      	movs	r3, #0
 8006a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	d03b      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a3a:	d01f      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a40:	d818      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a46:	d003      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4c:	d007      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a4e:	e011      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a32      	ldr	r2, [pc, #200]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a5c:	e00f      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a62:	3328      	adds	r3, #40	@ 0x28
 8006a64:	2101      	movs	r1, #1
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fd7e 	bl	8007568 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a72:	e004      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a7a:	e000      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a86:	4b26      	ldr	r3, [pc, #152]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a96:	4a22      	ldr	r2, [pc, #136]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ab8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006abc:	460b      	mov	r3, r1
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	d034      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad0:	d007      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006ad2:	e011      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad4:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4a11      	ldr	r2, [pc, #68]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ae0:	e00e      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2102      	movs	r1, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fc8a 	bl	8007404 <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b16:	4a02      	ldr	r2, [pc, #8]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b1e:	bf00      	nop
 8006b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d00c      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	3328      	adds	r3, #40	@ 0x28
 8006b4e:	2102      	movs	r1, #2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fd09 	bl	8007568 <RCCEx_PLL3_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b70:	2300      	movs	r3, #0
 8006b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d036      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b88:	d018      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8e:	d811      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b94:	d014      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b9a:	d80b      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d011      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba4:	d106      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba6:	4bb7      	ldr	r3, [pc, #732]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	4ab6      	ldr	r2, [pc, #728]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bba:	e004      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bce:	4bad      	ldr	r3, [pc, #692]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bdc:	4aa9      	ldr	r2, [pc, #676]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c08:	4b9e      	ldr	r3, [pc, #632]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c16:	4a9b      	ldr	r2, [pc, #620]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c32:	460b      	mov	r3, r1
 8006c34:	4313      	orrs	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c38:	4b92      	ldr	r3, [pc, #584]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c46:	4a8f      	ldr	r2, [pc, #572]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c68:	4b86      	ldr	r3, [pc, #536]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4a85      	ldr	r2, [pc, #532]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c72:	6113      	str	r3, [r2, #16]
 8006c74:	4b83      	ldr	r3, [pc, #524]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c76:	6919      	ldr	r1, [r3, #16]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c80:	4a80      	ldr	r2, [pc, #512]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ca2:	4b78      	ldr	r3, [pc, #480]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb0:	4a74      	ldr	r2, [pc, #464]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	4a68      	ldr	r2, [pc, #416]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d011      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fb79 	bl	8007404 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	2100      	movs	r1, #0
 8006d32:	6239      	str	r1, [r7, #32]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d011      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	3308      	adds	r3, #8
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fb59 	bl	8007404 <RCCEx_PLL2_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	2100      	movs	r1, #0
 8006d72:	61b9      	str	r1, [r7, #24]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d011      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	3308      	adds	r3, #8
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fb39 	bl	8007404 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	2100      	movs	r1, #0
 8006db2:	6139      	str	r1, [r7, #16]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d011      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	3328      	adds	r3, #40	@ 0x28
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fbcb 	bl	8007568 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	2100      	movs	r1, #0
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d011      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	3328      	adds	r3, #40	@ 0x28
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fbab 	bl	8007568 <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	2100      	movs	r1, #0
 8006e32:	6039      	str	r1, [r7, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	3328      	adds	r3, #40	@ 0x28
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb8b 	bl	8007568 <RCCEx_PLL3_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e82:	bf00      	nop
 8006e84:	58024400 	.word	0x58024400

08006e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e8c:	f7fe fe00 	bl	8005a90 <HAL_RCC_GetHCLKFreq>
 8006e90:	4602      	mov	r2, r0
 8006e92:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	4904      	ldr	r1, [pc, #16]	@ (8006eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	0800c2a8 	.word	0x0800c2a8

08006eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b089      	sub	sp, #36	@ 0x24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ec6:	4b9f      	ldr	r3, [pc, #636]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	0b1b      	lsrs	r3, r3, #12
 8006ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	091b      	lsrs	r3, r3, #4
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ede:	4b99      	ldr	r3, [pc, #612]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8111 	beq.w	8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	f000 8083 	beq.w	8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	f200 80a1 	bhi.w	8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d056      	beq.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f1e:	e099      	b.n	8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f20:	4b88      	ldr	r3, [pc, #544]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02d      	beq.n	8006f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f2c:	4b85      	ldr	r3, [pc, #532]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	08db      	lsrs	r3, r3, #3
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	4a84      	ldr	r2, [pc, #528]	@ (8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f56:	4b7b      	ldr	r3, [pc, #492]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f86:	e087      	b.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fca:	e065      	b.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fde:	4b59      	ldr	r3, [pc, #356]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700e:	e043      	b.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800701e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007022:	4b48      	ldr	r3, [pc, #288]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007032:	ed97 6a03 	vldr	s12, [r7, #12]
 8007036:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800703a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007052:	e021      	b.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007066:	4b37      	ldr	r3, [pc, #220]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007076:	ed97 6a03 	vldr	s12, [r7, #12]
 800707a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800708a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007098:	4b2a      	ldr	r3, [pc, #168]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	0a5b      	lsrs	r3, r3, #9
 800709e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80070c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ec:	ee17 2a90 	vmov	r2, s15
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070f4:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f8:	0e1b      	lsrs	r3, r3, #24
 80070fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800710a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800711a:	ee17 2a90 	vmov	r2, s15
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007122:	e008      	b.n	8007136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
}
 8007136:	bf00      	nop
 8007138:	3724      	adds	r7, #36	@ 0x24
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	58024400 	.word	0x58024400
 8007148:	03d09000 	.word	0x03d09000
 800714c:	46000000 	.word	0x46000000
 8007150:	4c742400 	.word	0x4c742400
 8007154:	4a742400 	.word	0x4a742400
 8007158:	4af42400 	.word	0x4af42400

0800715c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800715c:	b480      	push	{r7}
 800715e:	b089      	sub	sp, #36	@ 0x24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007164:	4ba1      	ldr	r3, [pc, #644]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800716e:	4b9f      	ldr	r3, [pc, #636]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	0d1b      	lsrs	r3, r3, #20
 8007174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800717a:	4b9c      	ldr	r3, [pc, #624]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007186:	4b99      	ldr	r3, [pc, #612]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	08db      	lsrs	r3, r3, #3
 800718c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8111 	beq.w	80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	f000 8083 	beq.w	80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	f200 80a1 	bhi.w	80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d056      	beq.n	8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071c6:	e099      	b.n	80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c8:	4b88      	ldr	r3, [pc, #544]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d02d      	beq.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071d4:	4b85      	ldr	r3, [pc, #532]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	08db      	lsrs	r3, r3, #3
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	4a84      	ldr	r2, [pc, #528]	@ (80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
 80071e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fe:	4b7b      	ldr	r3, [pc, #492]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007212:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800722e:	e087      	b.n	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b6a      	ldr	r3, [pc, #424]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a03 	vldr	s12, [r7, #12]
 8007256:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007272:	e065      	b.n	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b59      	ldr	r3, [pc, #356]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a03 	vldr	s12, [r7, #12]
 800729a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b6:	e043      	b.n	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b48      	ldr	r3, [pc, #288]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a03 	vldr	s12, [r7, #12]
 80072de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fa:	e021      	b.n	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b37      	ldr	r3, [pc, #220]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007322:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007340:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	0a5b      	lsrs	r3, r3, #9
 8007346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735a:	edd7 6a07 	vldr	s13, [r7, #28]
 800735e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007366:	ee17 2a90 	vmov	r2, s15
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800736e:	4b1f      	ldr	r3, [pc, #124]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007388:	edd7 6a07 	vldr	s13, [r7, #28]
 800738c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007394:	ee17 2a90 	vmov	r2, s15
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800739c:	4b13      	ldr	r3, [pc, #76]	@ (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	0e1b      	lsrs	r3, r3, #24
 80073a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c2:	ee17 2a90 	vmov	r2, s15
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073ca:	e008      	b.n	80073de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	609a      	str	r2, [r3, #8]
}
 80073de:	bf00      	nop
 80073e0:	3724      	adds	r7, #36	@ 0x24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
 80073f0:	03d09000 	.word	0x03d09000
 80073f4:	46000000 	.word	0x46000000
 80073f8:	4c742400 	.word	0x4c742400
 80073fc:	4a742400 	.word	0x4a742400
 8007400:	4af42400 	.word	0x4af42400

08007404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007412:	4b53      	ldr	r3, [pc, #332]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d101      	bne.n	8007422 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e099      	b.n	8007556 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007422:	4b4f      	ldr	r3, [pc, #316]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a4e      	ldr	r2, [pc, #312]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007428:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800742c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742e:	f7fa f9e7 	bl	8001800 <HAL_GetTick>
 8007432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007434:	e008      	b.n	8007448 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007436:	f7fa f9e3 	bl	8001800 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e086      	b.n	8007556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007448:	4b45      	ldr	r3, [pc, #276]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f0      	bne.n	8007436 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007454:	4b42      	ldr	r3, [pc, #264]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	031b      	lsls	r3, r3, #12
 8007462:	493f      	ldr	r1, [pc, #252]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007464:	4313      	orrs	r3, r2
 8007466:	628b      	str	r3, [r1, #40]	@ 0x28
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	3b01      	subs	r3, #1
 8007478:	025b      	lsls	r3, r3, #9
 800747a:	b29b      	uxth	r3, r3
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	3b01      	subs	r3, #1
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	3b01      	subs	r3, #1
 8007492:	061b      	lsls	r3, r3, #24
 8007494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007498:	4931      	ldr	r1, [pc, #196]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800749a:	4313      	orrs	r3, r2
 800749c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800749e:	4b30      	ldr	r3, [pc, #192]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	492d      	ldr	r1, [pc, #180]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	f023 0220 	bic.w	r2, r3, #32
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	4928      	ldr	r1, [pc, #160]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074c2:	4b27      	ldr	r3, [pc, #156]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	4a26      	ldr	r2, [pc, #152]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	f023 0310 	bic.w	r3, r3, #16
 80074cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074ce:	4b24      	ldr	r3, [pc, #144]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074d2:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <RCCEx_PLL2_Config+0x160>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	69d2      	ldr	r2, [r2, #28]
 80074da:	00d2      	lsls	r2, r2, #3
 80074dc:	4920      	ldr	r1, [pc, #128]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	f043 0310 	orr.w	r3, r3, #16
 80074ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4a19      	ldr	r2, [pc, #100]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 80074fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007500:	e00f      	b.n	8007522 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d106      	bne.n	8007516 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007508:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	4a14      	ldr	r2, [pc, #80]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800750e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007514:	e005      	b.n	8007522 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007516:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	4a11      	ldr	r2, [pc, #68]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800751c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007522:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a0e      	ldr	r2, [pc, #56]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 8007528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800752c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752e:	f7fa f967 	bl	8001800 <HAL_GetTick>
 8007532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007534:	e008      	b.n	8007548 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007536:	f7fa f963 	bl	8001800 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d901      	bls.n	8007548 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e006      	b.n	8007556 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <RCCEx_PLL2_Config+0x15c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0f0      	beq.n	8007536 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
 8007564:	ffff0007 	.word	0xffff0007

08007568 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007576:	4b53      	ldr	r3, [pc, #332]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d101      	bne.n	8007586 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e099      	b.n	80076ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007586:	4b4f      	ldr	r3, [pc, #316]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a4e      	ldr	r2, [pc, #312]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800758c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007592:	f7fa f935 	bl	8001800 <HAL_GetTick>
 8007596:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007598:	e008      	b.n	80075ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800759a:	f7fa f931 	bl	8001800 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e086      	b.n	80076ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075ac:	4b45      	ldr	r3, [pc, #276]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f0      	bne.n	800759a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075b8:	4b42      	ldr	r3, [pc, #264]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	051b      	lsls	r3, r3, #20
 80075c6:	493f      	ldr	r1, [pc, #252]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	3b01      	subs	r3, #1
 80075dc:	025b      	lsls	r3, r3, #9
 80075de:	b29b      	uxth	r3, r3
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	041b      	lsls	r3, r3, #16
 80075ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	061b      	lsls	r3, r3, #24
 80075f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075fc:	4931      	ldr	r1, [pc, #196]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007602:	4b30      	ldr	r3, [pc, #192]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	492d      	ldr	r1, [pc, #180]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007610:	4313      	orrs	r3, r2
 8007612:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007614:	4b2b      	ldr	r3, [pc, #172]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	4928      	ldr	r1, [pc, #160]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007626:	4b27      	ldr	r3, [pc, #156]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	4a26      	ldr	r2, [pc, #152]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800762c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007632:	4b24      	ldr	r3, [pc, #144]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007636:	4b24      	ldr	r3, [pc, #144]	@ (80076c8 <RCCEx_PLL3_Config+0x160>)
 8007638:	4013      	ands	r3, r2
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	69d2      	ldr	r2, [r2, #28]
 800763e:	00d2      	lsls	r2, r2, #3
 8007640:	4920      	ldr	r1, [pc, #128]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007646:	4b1f      	ldr	r3, [pc, #124]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	4a1e      	ldr	r2, [pc, #120]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800764c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007658:	4b1a      	ldr	r3, [pc, #104]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a19      	ldr	r2, [pc, #100]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800765e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007664:	e00f      	b.n	8007686 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d106      	bne.n	800767a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800766c:	4b15      	ldr	r3, [pc, #84]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	4a14      	ldr	r2, [pc, #80]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007676:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007678:	e005      	b.n	8007686 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800767a:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007680:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007684:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a0e      	ldr	r2, [pc, #56]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 800768c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007692:	f7fa f8b5 	bl	8001800 <HAL_GetTick>
 8007696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007698:	e008      	b.n	80076ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800769a:	f7fa f8b1 	bl	8001800 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e006      	b.n	80076ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <RCCEx_PLL3_Config+0x15c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
 80076c8:	ffff0007 	.word	0xffff0007

080076cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d071      	beq.n	80077c2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7f9 fd02 	bl	80010fc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b10      	cmp	r3, #16
 800770c:	d050      	beq.n	80077b0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	22ca      	movs	r2, #202	@ 0xca
 8007714:	625a      	str	r2, [r3, #36]	@ 0x24
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2253      	movs	r2, #83	@ 0x53
 800771c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fb88 	bl	8007e34 <RTC_EnterInitMode>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d124      	bne.n	8007778 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6899      	ldr	r1, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b24      	ldr	r3, [pc, #144]	@ (80077cc <HAL_RTC_Init+0x100>)
 800773a:	400b      	ands	r3, r1
 800773c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6899      	ldr	r1, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	0419      	lsls	r1, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb94 	bl	8007e9c <RTC_ExitInitMode>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d113      	bne.n	80077a6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0203 	bic.w	r2, r2, #3
 800778c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	22ff      	movs	r2, #255	@ 0xff
 80077ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80077ae:	e001      	b.n	80077b4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	ff8fffbf 	.word	0xff8fffbf

080077d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_RTC_SetTime+0x1a>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e089      	b.n	80078fe <HAL_RTC_SetTime+0x12e>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2202      	movs	r2, #2
 80077f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	22ca      	movs	r2, #202	@ 0xca
 8007800:	625a      	str	r2, [r3, #36]	@ 0x24
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2253      	movs	r2, #83	@ 0x53
 8007808:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fb12 	bl	8007e34 <RTC_EnterInitMode>
 8007810:	4603      	mov	r3, r0
 8007812:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007814:	7cfb      	ldrb	r3, [r7, #19]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d161      	bne.n	80078de <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d126      	bne.n	800786e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fb6d 	bl	8007f18 <RTC_ByteToBcd2>
 800783e:	4603      	mov	r3, r0
 8007840:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fb66 	bl	8007f18 <RTC_ByteToBcd2>
 800784c:	4603      	mov	r3, r0
 800784e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007850:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	789b      	ldrb	r3, [r3, #2]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fb5e 	bl	8007f18 <RTC_ByteToBcd2>
 800785c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800785e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	78db      	ldrb	r3, [r3, #3]
 8007866:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e018      	b.n	80078a0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800788e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007894:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	78db      	ldrb	r3, [r3, #3]
 800789a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	4b18      	ldr	r3, [pc, #96]	@ (8007908 <HAL_RTC_SetTime+0x138>)
 80078a8:	400b      	ands	r3, r1
 80078aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80078ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6899      	ldr	r1, [r3, #8]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fae1 	bl	8007e9c <RTC_ExitInitMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	22ff      	movs	r2, #255	@ 0xff
 80078e4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80078e6:	7cfb      	ldrb	r3, [r7, #19]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d103      	bne.n	80078f4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80078fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd90      	pop	{r4, r7, pc}
 8007906:	bf00      	nop
 8007908:	007f7f7f 	.word	0x007f7f7f

0800790c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	4b22      	ldr	r3, [pc, #136]	@ (80079c0 <HAL_RTC_GetTime+0xb4>)
 8007938:	4013      	ands	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	0c1b      	lsrs	r3, r3, #16
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007956:	b2da      	uxtb	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007964:	b2da      	uxtb	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	0d9b      	lsrs	r3, r3, #22
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11a      	bne.n	80079b6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fae7 	bl	8007f58 <RTC_Bcd2ToByte>
 800798a:	4603      	mov	r3, r0
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fade 	bl	8007f58 <RTC_Bcd2ToByte>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	789b      	ldrb	r3, [r3, #2]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fad5 	bl	8007f58 <RTC_Bcd2ToByte>
 80079ae:	4603      	mov	r3, r0
 80079b0:	461a      	mov	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	007f7f7f 	.word	0x007f7f7f

080079c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_RTC_SetDate+0x1a>
 80079da:	2302      	movs	r3, #2
 80079dc:	e073      	b.n	8007ac6 <HAL_RTC_SetDate+0x102>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10e      	bne.n	8007a12 <HAL_RTC_SetDate+0x4e>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	f023 0310 	bic.w	r3, r3, #16
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	330a      	adds	r3, #10
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11c      	bne.n	8007a52 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fa7b 	bl	8007f18 <RTC_ByteToBcd2>
 8007a22:	4603      	mov	r3, r0
 8007a24:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fa74 	bl	8007f18 <RTC_ByteToBcd2>
 8007a30:	4603      	mov	r3, r0
 8007a32:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a34:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fa6c 	bl	8007f18 <RTC_ByteToBcd2>
 8007a40:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a42:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e00e      	b.n	8007a70 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	78db      	ldrb	r3, [r3, #3]
 8007a56:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a5e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a64:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	22ca      	movs	r2, #202	@ 0xca
 8007a76:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2253      	movs	r2, #83	@ 0x53
 8007a7e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f9d7 	bl	8007e34 <RTC_EnterInitMode>
 8007a86:	4603      	mov	r3, r0
 8007a88:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a8a:	7cfb      	ldrb	r3, [r7, #19]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6979      	ldr	r1, [r7, #20]
 8007a96:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <HAL_RTC_SetDate+0x10c>)
 8007a98:	400b      	ands	r3, r1
 8007a9a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f9fd 	bl	8007e9c <RTC_ExitInitMode>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	22ff      	movs	r2, #255	@ 0xff
 8007aac:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007aae:	7cfb      	ldrb	r3, [r7, #19]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007ac4:	7cfb      	ldrb	r3, [r7, #19]


}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd90      	pop	{r4, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	00ffff3f 	.word	0x00ffff3f

08007ad4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <HAL_RTC_GetDate+0x98>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	0b5b      	lsrs	r3, r3, #13
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d11a      	bne.n	8007b60 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	78db      	ldrb	r3, [r3, #3]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fa12 	bl	8007f58 <RTC_Bcd2ToByte>
 8007b34:	4603      	mov	r3, r0
 8007b36:	461a      	mov	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fa09 	bl	8007f58 <RTC_Bcd2ToByte>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	789b      	ldrb	r3, [r3, #2]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fa00 	bl	8007f58 <RTC_Bcd2ToByte>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	00ffff3f 	.word	0x00ffff3f

08007b70 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007b70:	b590      	push	{r4, r7, lr}
 8007b72:	b089      	sub	sp, #36	@ 0x24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_RTC_SetAlarm_IT+0x1a>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e129      	b.n	8007dde <HAL_RTC_SetAlarm_IT+0x26e>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2202      	movs	r2, #2
 8007b96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d137      	bne.n	8007c10 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f9ad 	bl	8007f18 <RTC_ByteToBcd2>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f9a6 	bl	8007f18 <RTC_ByteToBcd2>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007bd0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	789b      	ldrb	r3, [r3, #2]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f99e 	bl	8007f18 <RTC_ByteToBcd2>
 8007bdc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007bde:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007be8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f990 	bl	8007f18 <RTC_ByteToBcd2>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007bfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007c04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	e023      	b.n	8007c58 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007c30:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007c36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	78db      	ldrb	r3, [r3, #3]
 8007c3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007c3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c46:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007c48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007c4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	22ca      	movs	r2, #202	@ 0xca
 8007c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2253      	movs	r2, #83	@ 0x53
 8007c72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7c:	d14a      	bne.n	8007d14 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c8c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007c9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ca0:	f7f9 fdae 	bl	8001800 <HAL_GetTick>
 8007ca4:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007ca6:	e015      	b.n	8007cd4 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ca8:	f7f9 fdaa 	bl	8001800 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb6:	d90d      	bls.n	8007cd4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	22ff      	movs	r2, #255	@ 0xff
 8007cbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e084      	b.n	8007dde <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0e2      	beq.n	8007ca8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d00:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	e049      	b.n	8007da8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007d22:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007d34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d36:	f7f9 fd63 	bl	8001800 <HAL_GetTick>
 8007d3a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d3c:	e015      	b.n	8007d6a <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d3e:	f7f9 fd5f 	bl	8001800 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d4c:	d90d      	bls.n	8007d6a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	22ff      	movs	r2, #255	@ 0xff
 8007d54:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e039      	b.n	8007dde <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0e2      	beq.n	8007d3e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689a      	ldr	r2, [r3, #8]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007da6:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007da8:	4b0f      	ldr	r3, [pc, #60]	@ (8007de8 <HAL_RTC_SetAlarm_IT+0x278>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0e      	ldr	r2, [pc, #56]	@ (8007de8 <HAL_RTC_SetAlarm_IT+0x278>)
 8007dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db2:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dc2:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	22ff      	movs	r2, #255	@ 0xff
 8007dca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3724      	adds	r7, #36	@ 0x24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd90      	pop	{r4, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	58000080 	.word	0x58000080

08007dec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0d      	ldr	r2, [pc, #52]	@ (8007e30 <HAL_RTC_WaitForSynchro+0x44>)
 8007dfa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007dfc:	f7f9 fd00 	bl	8001800 <HAL_GetTick>
 8007e00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e02:	e009      	b.n	8007e18 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e04:	f7f9 fcfc 	bl	8001800 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e12:	d901      	bls.n	8007e18 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e007      	b.n	8007e28 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0ee      	beq.n	8007e04 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	0003ff5f 	.word	0x0003ff5f

08007e34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d120      	bne.n	8007e90 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f04f 32ff 	mov.w	r2, #4294967295
 8007e56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e58:	f7f9 fcd2 	bl	8001800 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e5e:	e00d      	b.n	8007e7c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e60:	f7f9 fcce 	bl	8001800 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e6e:	d905      	bls.n	8007e7c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <RTC_EnterInitMode+0x5c>
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d1e7      	bne.n	8007e60 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eb2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007eb4:	4b17      	ldr	r3, [pc, #92]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10c      	bne.n	8007eda <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ff93 	bl	8007dec <HAL_RTC_WaitForSynchro>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01e      	beq.n	8007f0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	73fb      	strb	r3, [r7, #15]
 8007ed8:	e017      	b.n	8007f0a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007eda:	4b0e      	ldr	r3, [pc, #56]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4a0d      	ldr	r2, [pc, #52]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007ee0:	f023 0320 	bic.w	r3, r3, #32
 8007ee4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff ff80 	bl	8007dec <HAL_RTC_WaitForSynchro>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007efe:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	4a04      	ldr	r2, [pc, #16]	@ (8007f14 <RTC_ExitInitMode+0x78>)
 8007f04:	f043 0320 	orr.w	r3, r3, #32
 8007f08:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	58004000 	.word	0x58004000

08007f18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007f2a:	e005      	b.n	8007f38 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	3b0a      	subs	r3, #10
 8007f36:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	d8f6      	bhi.n	8007f2c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	011b      	lsls	r3, r3, #4
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b2db      	uxtb	r3, r3
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	b2db      	uxtb	r3, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e04d      	b.n	800803e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	22ca      	movs	r2, #202	@ 0xca
 8007fb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2253      	movs	r2, #83	@ 0x53
 8007fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fd0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fe0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007fe2:	f7f9 fc0d 	bl	8001800 <HAL_GetTick>
 8007fe6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
#if defined(TAMP)
  while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007fe8:	e015      	b.n	8008016 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
#endif /* TAMP */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fea:	f7f9 fc09 	bl	8001800 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ff8:	d90d      	bls.n	8008016 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	22ff      	movs	r2, #255	@ 0xff
 8008000:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2203      	movs	r2, #3
 8008006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e013      	b.n	800803e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0e2      	beq.n	8007fea <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	22ff      	movs	r2, #255	@ 0xff
 800802a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008046:	b480      	push	{r7}
 8008048:	b087      	sub	sp, #28
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3350      	adds	r3, #80	@ 0x50
 8008058:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3350      	adds	r3, #80	@ 0x50
 8008086:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e042      	b.n	800813a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f9 fa46 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2224      	movs	r2, #36	@ 0x24
 80080d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fbdd 	bl	80098ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fd6e 	bl	8008bd4 <UART_SetConfig>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e01b      	b.n	800813a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008110:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008120:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fc5c 	bl	80099f0 <UART_CheckIdleState>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b08a      	sub	sp, #40	@ 0x28
 8008146:	af02      	add	r7, sp, #8
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	603b      	str	r3, [r7, #0]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008158:	2b20      	cmp	r3, #32
 800815a:	d17b      	bne.n	8008254 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_UART_Transmit+0x26>
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e074      	b.n	8008256 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2221      	movs	r2, #33	@ 0x21
 8008178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800817c:	f7f9 fb40 	bl	8001800 <HAL_GetTick>
 8008180:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819a:	d108      	bne.n	80081ae <HAL_UART_Transmit+0x6c>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	e003      	b.n	80081b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081b6:	e030      	b.n	800821a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2200      	movs	r2, #0
 80081c0:	2180      	movs	r1, #128	@ 0x80
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f001 fcbe 	bl	8009b44 <UART_WaitOnFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e03d      	b.n	8008256 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10b      	bne.n	80081f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	3302      	adds	r3, #2
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e007      	b.n	8008208 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1c8      	bne.n	80081b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2200      	movs	r2, #0
 800822e:	2140      	movs	r1, #64	@ 0x40
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f001 fc87 	bl	8009b44 <UART_WaitOnFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e006      	b.n	8008256 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008260:	b480      	push	{r7}
 8008262:	b091      	sub	sp, #68	@ 0x44
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008274:	2b20      	cmp	r3, #32
 8008276:	d178      	bne.n	800836a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_UART_Transmit_IT+0x24>
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e071      	b.n	800836c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2221      	movs	r2, #33	@ 0x21
 80082b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082bc:	d12a      	bne.n	8008314 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c6:	d107      	bne.n	80082d8 <HAL_UART_Transmit_IT+0x78>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4a29      	ldr	r2, [pc, #164]	@ (8008378 <HAL_UART_Transmit_IT+0x118>)
 80082d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80082d6:	e002      	b.n	80082de <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a28      	ldr	r2, [pc, #160]	@ (800837c <HAL_UART_Transmit_IT+0x11c>)
 80082dc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8008300:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e5      	bne.n	80082de <HAL_UART_Transmit_IT+0x7e>
 8008312:	e028      	b.n	8008366 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800831c:	d107      	bne.n	800832e <HAL_UART_Transmit_IT+0xce>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <HAL_UART_Transmit_IT+0x120>)
 800832a:	679a      	str	r2, [r3, #120]	@ 0x78
 800832c:	e002      	b.n	8008334 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <HAL_UART_Transmit_IT+0x124>)
 8008332:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	613b      	str	r3, [r7, #16]
   return(result);
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008352:	623b      	str	r3, [r7, #32]
 8008354:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	69f9      	ldr	r1, [r7, #28]
 8008358:	6a3a      	ldr	r2, [r7, #32]
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e6      	bne.n	8008334 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3744      	adds	r7, #68	@ 0x44
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	0800a329 	.word	0x0800a329
 800837c:	0800a249 	.word	0x0800a249
 8008380:	0800a187 	.word	0x0800a187
 8008384:	0800a0cf 	.word	0x0800a0cf

08008388 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	@ 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800839c:	2b20      	cmp	r3, #32
 800839e:	d137      	bne.n	8008410 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_UART_Receive_DMA+0x24>
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e030      	b.n	8008412 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a18      	ldr	r2, [pc, #96]	@ (800841c <HAL_UART_Receive_DMA+0x94>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d01f      	beq.n	8008400 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d018      	beq.n	8008400 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	613b      	str	r3, [r7, #16]
   return(result);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	623b      	str	r3, [r7, #32]
 80083ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69f9      	ldr	r1, [r7, #28]
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	461a      	mov	r2, r3
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f001 fc0a 	bl	8009c20 <UART_Start_Receive_DMA>
 800840c:	4603      	mov	r3, r0
 800840e:	e000      	b.n	8008412 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008410:	2302      	movs	r3, #2
  }
}
 8008412:	4618      	mov	r0, r3
 8008414:	3728      	adds	r7, #40	@ 0x28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	58000c00 	.word	0x58000c00

08008420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b0ba      	sub	sp, #232	@ 0xe8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800844a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800844e:	4013      	ands	r3, r2
 8008450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11b      	bne.n	8008494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800845c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d015      	beq.n	8008494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d009      	beq.n	8008494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8377 	beq.w	8008b78 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
      }
      return;
 8008492:	e371      	b.n	8008b78 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8123 	beq.w	80086e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800849e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084a2:	4b8d      	ldr	r3, [pc, #564]	@ (80086d8 <HAL_UART_IRQHandler+0x2b8>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084ae:	4b8b      	ldr	r3, [pc, #556]	@ (80086dc <HAL_UART_IRQHandler+0x2bc>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8116 	beq.w	80086e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d011      	beq.n	80084e8 <HAL_UART_IRQHandler+0xc8>
 80084c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f043 0201 	orr.w	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d011      	beq.n	8008518 <HAL_UART_IRQHandler+0xf8>
 80084f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2202      	movs	r2, #2
 8008506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850e:	f043 0204 	orr.w	r2, r3, #4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d011      	beq.n	8008548 <HAL_UART_IRQHandler+0x128>
 8008524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2204      	movs	r2, #4
 8008536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853e:	f043 0202 	orr.w	r2, r3, #2
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d017      	beq.n	8008584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008564:	4b5c      	ldr	r3, [pc, #368]	@ (80086d8 <HAL_UART_IRQHandler+0x2b8>)
 8008566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2208      	movs	r2, #8
 8008572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800857a:	f043 0208 	orr.w	r2, r3, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800858c:	2b00      	cmp	r3, #0
 800858e:	d012      	beq.n	80085b6 <HAL_UART_IRQHandler+0x196>
 8008590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ac:	f043 0220 	orr.w	r2, r3, #32
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 82dd 	beq.w	8008b7c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d013      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800860a:	2b40      	cmp	r3, #64	@ 0x40
 800860c:	d005      	beq.n	800861a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800860e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008616:	2b00      	cmp	r3, #0
 8008618:	d054      	beq.n	80086c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fbe8 	bl	8009df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862a:	2b40      	cmp	r3, #64	@ 0x40
 800862c:	d146      	bne.n	80086bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800864c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800865a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800865e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1d9      	bne.n	800862e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008680:	2b00      	cmp	r3, #0
 8008682:	d017      	beq.n	80086b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868a:	4a15      	ldr	r2, [pc, #84]	@ (80086e0 <HAL_UART_IRQHandler+0x2c0>)
 800868c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008694:	4618      	mov	r0, r3
 8008696:	f7fa faaf 	bl	8002bf8 <HAL_DMA_Abort_IT>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d019      	beq.n	80086d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b2:	e00f      	b.n	80086d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa77 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ba:	e00b      	b.n	80086d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa73 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c2:	e007      	b.n	80086d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa6f 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80086d2:	e253      	b.n	8008b7c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	bf00      	nop
    return;
 80086d6:	e251      	b.n	8008b7c <HAL_UART_IRQHandler+0x75c>
 80086d8:	10000001 	.word	0x10000001
 80086dc:	04000120 	.word	0x04000120
 80086e0:	0800a0a3 	.word	0x0800a0a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f040 81e7 	bne.w	8008abc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 81e0 	beq.w	8008abc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008700:	f003 0310 	and.w	r3, r3, #16
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 81d9 	beq.w	8008abc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2210      	movs	r2, #16
 8008710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871c:	2b40      	cmp	r3, #64	@ 0x40
 800871e:	f040 8151 	bne.w	80089c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a96      	ldr	r2, [pc, #600]	@ (8008984 <HAL_UART_IRQHandler+0x564>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d068      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a93      	ldr	r2, [pc, #588]	@ (8008988 <HAL_UART_IRQHandler+0x568>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d061      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a91      	ldr	r2, [pc, #580]	@ (800898c <HAL_UART_IRQHandler+0x56c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d05a      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a8e      	ldr	r2, [pc, #568]	@ (8008990 <HAL_UART_IRQHandler+0x570>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d053      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a8c      	ldr	r2, [pc, #560]	@ (8008994 <HAL_UART_IRQHandler+0x574>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d04c      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a89      	ldr	r2, [pc, #548]	@ (8008998 <HAL_UART_IRQHandler+0x578>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d045      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a87      	ldr	r2, [pc, #540]	@ (800899c <HAL_UART_IRQHandler+0x57c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d03e      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a84      	ldr	r2, [pc, #528]	@ (80089a0 <HAL_UART_IRQHandler+0x580>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d037      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a82      	ldr	r2, [pc, #520]	@ (80089a4 <HAL_UART_IRQHandler+0x584>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d030      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a7f      	ldr	r2, [pc, #508]	@ (80089a8 <HAL_UART_IRQHandler+0x588>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d029      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a7d      	ldr	r2, [pc, #500]	@ (80089ac <HAL_UART_IRQHandler+0x58c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d022      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a7a      	ldr	r2, [pc, #488]	@ (80089b0 <HAL_UART_IRQHandler+0x590>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01b      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a78      	ldr	r2, [pc, #480]	@ (80089b4 <HAL_UART_IRQHandler+0x594>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d014      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a75      	ldr	r2, [pc, #468]	@ (80089b8 <HAL_UART_IRQHandler+0x598>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00d      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a73      	ldr	r2, [pc, #460]	@ (80089bc <HAL_UART_IRQHandler+0x59c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d006      	beq.n	8008802 <HAL_UART_IRQHandler+0x3e2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a70      	ldr	r2, [pc, #448]	@ (80089c0 <HAL_UART_IRQHandler+0x5a0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d106      	bne.n	8008810 <HAL_UART_IRQHandler+0x3f0>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b29b      	uxth	r3, r3
 800880e:	e005      	b.n	800881c <HAL_UART_IRQHandler+0x3fc>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 81ab 	beq.w	8008b80 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008834:	429a      	cmp	r2, r3
 8008836:	f080 81a3 	bcs.w	8008b80 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008840:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008850:	f000 8087 	beq.w	8008962 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008868:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800886c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800887e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008882:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800888a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1da      	bne.n	8008854 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e1      	bne.n	800889e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008900:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800890c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e3      	bne.n	80088da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800892e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008942:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008944:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e4      	bne.n	8008920 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895c:	4618      	mov	r0, r3
 800895e:	f7f9 fe2d 	bl	80025bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008974:	b29b      	uxth	r3, r3
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f91d 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008982:	e0fd      	b.n	8008b80 <HAL_UART_IRQHandler+0x760>
 8008984:	40020010 	.word	0x40020010
 8008988:	40020028 	.word	0x40020028
 800898c:	40020040 	.word	0x40020040
 8008990:	40020058 	.word	0x40020058
 8008994:	40020070 	.word	0x40020070
 8008998:	40020088 	.word	0x40020088
 800899c:	400200a0 	.word	0x400200a0
 80089a0:	400200b8 	.word	0x400200b8
 80089a4:	40020410 	.word	0x40020410
 80089a8:	40020428 	.word	0x40020428
 80089ac:	40020440 	.word	0x40020440
 80089b0:	40020458 	.word	0x40020458
 80089b4:	40020470 	.word	0x40020470
 80089b8:	40020488 	.word	0x40020488
 80089bc:	400204a0 	.word	0x400204a0
 80089c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80cf 	beq.w	8008b84 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80089e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80ca 	beq.w	8008b84 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a14:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e4      	bne.n	80089f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	623b      	str	r3, [r7, #32]
   return(result);
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	4b55      	ldr	r3, [pc, #340]	@ (8008b90 <HAL_UART_IRQHandler+0x770>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e3      	bne.n	8008a26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0310 	bic.w	r3, r3, #16
 8008a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	69b9      	ldr	r1, [r7, #24]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e4      	bne.n	8008a72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f881 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aba:	e063      	b.n	8008b84 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x6c6>
 8008ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fcc2 	bl	800a468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ae4:	e051      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d014      	beq.n	8008b1c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d008      	beq.n	8008b1c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03a      	beq.n	8008b88 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
    }
    return;
 8008b1a:	e035      	b.n	8008b88 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d009      	beq.n	8008b3c <HAL_UART_IRQHandler+0x71c>
 8008b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fc6c 	bl	800a412 <UART_EndTransmit_IT>
    return;
 8008b3a:	e026      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <HAL_UART_IRQHandler+0x73c>
 8008b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 fc9b 	bl	800a490 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b5a:	e016      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d010      	beq.n	8008b8a <HAL_UART_IRQHandler+0x76a>
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0c      	bge.n	8008b8a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 fc83 	bl	800a47c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b76:	e008      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
      return;
 8008b78:	bf00      	nop
 8008b7a:	e006      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
    return;
 8008b7c:	bf00      	nop
 8008b7e:	e004      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
      return;
 8008b80:	bf00      	nop
 8008b82:	e002      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
      return;
 8008b84:	bf00      	nop
 8008b86:	e000      	b.n	8008b8a <HAL_UART_IRQHandler+0x76a>
    return;
 8008b88:	bf00      	nop
  }
}
 8008b8a:	37e8      	adds	r7, #232	@ 0xe8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	effffffe 	.word	0xeffffffe

08008b94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd8:	b092      	sub	sp, #72	@ 0x48
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4bbe      	ldr	r3, [pc, #760]	@ (8008efc <UART_SetConfig+0x328>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4ab3      	ldr	r2, [pc, #716]	@ (8008f00 <UART_SetConfig+0x32c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	4baf      	ldr	r3, [pc, #700]	@ (8008f04 <UART_SetConfig+0x330>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	6812      	ldr	r2, [r2, #0]
 8008c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c50:	430b      	orrs	r3, r1
 8008c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5a:	f023 010f 	bic.w	r1, r3, #15
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4aa6      	ldr	r2, [pc, #664]	@ (8008f08 <UART_SetConfig+0x334>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d177      	bne.n	8008d64 <UART_SetConfig+0x190>
 8008c74:	4ba5      	ldr	r3, [pc, #660]	@ (8008f0c <UART_SetConfig+0x338>)
 8008c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c7c:	2b28      	cmp	r3, #40	@ 0x28
 8008c7e:	d86d      	bhi.n	8008d5c <UART_SetConfig+0x188>
 8008c80:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0xb4>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008d2d 	.word	0x08008d2d
 8008c8c:	08008d5d 	.word	0x08008d5d
 8008c90:	08008d5d 	.word	0x08008d5d
 8008c94:	08008d5d 	.word	0x08008d5d
 8008c98:	08008d5d 	.word	0x08008d5d
 8008c9c:	08008d5d 	.word	0x08008d5d
 8008ca0:	08008d5d 	.word	0x08008d5d
 8008ca4:	08008d5d 	.word	0x08008d5d
 8008ca8:	08008d35 	.word	0x08008d35
 8008cac:	08008d5d 	.word	0x08008d5d
 8008cb0:	08008d5d 	.word	0x08008d5d
 8008cb4:	08008d5d 	.word	0x08008d5d
 8008cb8:	08008d5d 	.word	0x08008d5d
 8008cbc:	08008d5d 	.word	0x08008d5d
 8008cc0:	08008d5d 	.word	0x08008d5d
 8008cc4:	08008d5d 	.word	0x08008d5d
 8008cc8:	08008d3d 	.word	0x08008d3d
 8008ccc:	08008d5d 	.word	0x08008d5d
 8008cd0:	08008d5d 	.word	0x08008d5d
 8008cd4:	08008d5d 	.word	0x08008d5d
 8008cd8:	08008d5d 	.word	0x08008d5d
 8008cdc:	08008d5d 	.word	0x08008d5d
 8008ce0:	08008d5d 	.word	0x08008d5d
 8008ce4:	08008d5d 	.word	0x08008d5d
 8008ce8:	08008d45 	.word	0x08008d45
 8008cec:	08008d5d 	.word	0x08008d5d
 8008cf0:	08008d5d 	.word	0x08008d5d
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008d5d 	.word	0x08008d5d
 8008d00:	08008d5d 	.word	0x08008d5d
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d4d 	.word	0x08008d4d
 8008d0c:	08008d5d 	.word	0x08008d5d
 8008d10:	08008d5d 	.word	0x08008d5d
 8008d14:	08008d5d 	.word	0x08008d5d
 8008d18:	08008d5d 	.word	0x08008d5d
 8008d1c:	08008d5d 	.word	0x08008d5d
 8008d20:	08008d5d 	.word	0x08008d5d
 8008d24:	08008d5d 	.word	0x08008d5d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e326      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e322      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e31e      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e31a      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e316      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d54:	2340      	movs	r3, #64	@ 0x40
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e312      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d5c:	2380      	movs	r3, #128	@ 0x80
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e30e      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a69      	ldr	r2, [pc, #420]	@ (8008f10 <UART_SetConfig+0x33c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d130      	bne.n	8008dd0 <UART_SetConfig+0x1fc>
 8008d6e:	4b67      	ldr	r3, [pc, #412]	@ (8008f0c <UART_SetConfig+0x338>)
 8008d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d826      	bhi.n	8008dc8 <UART_SetConfig+0x1f4>
 8008d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0x1ac>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e2f0      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e2ec      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e2e8      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e2e4      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e2e0      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e2dc      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e2d8      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8008f14 <UART_SetConfig+0x340>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d130      	bne.n	8008e3c <UART_SetConfig+0x268>
 8008dda:	4b4c      	ldr	r3, [pc, #304]	@ (8008f0c <UART_SetConfig+0x338>)
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d826      	bhi.n	8008e34 <UART_SetConfig+0x260>
 8008de6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <UART_SetConfig+0x218>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e05 	.word	0x08008e05
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e25 	.word	0x08008e25
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e2ba      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e2b6      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e2b2      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e2ae      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e24:	2320      	movs	r3, #32
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e2aa      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e2c:	2340      	movs	r3, #64	@ 0x40
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e2a6      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e34:	2380      	movs	r3, #128	@ 0x80
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e2a2      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a35      	ldr	r2, [pc, #212]	@ (8008f18 <UART_SetConfig+0x344>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d130      	bne.n	8008ea8 <UART_SetConfig+0x2d4>
 8008e46:	4b31      	ldr	r3, [pc, #196]	@ (8008f0c <UART_SetConfig+0x338>)
 8008e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d826      	bhi.n	8008ea0 <UART_SetConfig+0x2cc>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <UART_SetConfig+0x284>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e79 	.word	0x08008e79
 8008e60:	08008e81 	.word	0x08008e81
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e91 	.word	0x08008e91
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e284      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e280      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e80:	2308      	movs	r3, #8
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e27c      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e278      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e90:	2320      	movs	r3, #32
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e274      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008e98:	2340      	movs	r3, #64	@ 0x40
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e270      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e26c      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	@ (8008f1c <UART_SetConfig+0x348>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d142      	bne.n	8008f38 <UART_SetConfig+0x364>
 8008eb2:	4b16      	ldr	r3, [pc, #88]	@ (8008f0c <UART_SetConfig+0x338>)
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d838      	bhi.n	8008f30 <UART_SetConfig+0x35c>
 8008ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <UART_SetConfig+0x2f0>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008eed 	.word	0x08008eed
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08008f21 	.word	0x08008f21
 8008ed8:	08008f29 	.word	0x08008f29
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e24e      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e24a      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008eec:	2308      	movs	r3, #8
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e246      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e242      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008efc:	cfff69f3 	.word	0xcfff69f3
 8008f00:	58000c00 	.word	0x58000c00
 8008f04:	11fff4ff 	.word	0x11fff4ff
 8008f08:	40011000 	.word	0x40011000
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	40004400 	.word	0x40004400
 8008f14:	40004800 	.word	0x40004800
 8008f18:	40004c00 	.word	0x40004c00
 8008f1c:	40005000 	.word	0x40005000
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e22c      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008f28:	2340      	movs	r3, #64	@ 0x40
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e228      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008f30:	2380      	movs	r3, #128	@ 0x80
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e224      	b.n	8009382 <UART_SetConfig+0x7ae>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4ab1      	ldr	r2, [pc, #708]	@ (8009204 <UART_SetConfig+0x630>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d176      	bne.n	8009030 <UART_SetConfig+0x45c>
 8008f42:	4bb1      	ldr	r3, [pc, #708]	@ (8009208 <UART_SetConfig+0x634>)
 8008f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f4a:	2b28      	cmp	r3, #40	@ 0x28
 8008f4c:	d86c      	bhi.n	8009028 <UART_SetConfig+0x454>
 8008f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <UART_SetConfig+0x380>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008ff9 	.word	0x08008ff9
 8008f58:	08009029 	.word	0x08009029
 8008f5c:	08009029 	.word	0x08009029
 8008f60:	08009029 	.word	0x08009029
 8008f64:	08009029 	.word	0x08009029
 8008f68:	08009029 	.word	0x08009029
 8008f6c:	08009029 	.word	0x08009029
 8008f70:	08009029 	.word	0x08009029
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08009029 	.word	0x08009029
 8008f7c:	08009029 	.word	0x08009029
 8008f80:	08009029 	.word	0x08009029
 8008f84:	08009029 	.word	0x08009029
 8008f88:	08009029 	.word	0x08009029
 8008f8c:	08009029 	.word	0x08009029
 8008f90:	08009029 	.word	0x08009029
 8008f94:	08009009 	.word	0x08009009
 8008f98:	08009029 	.word	0x08009029
 8008f9c:	08009029 	.word	0x08009029
 8008fa0:	08009029 	.word	0x08009029
 8008fa4:	08009029 	.word	0x08009029
 8008fa8:	08009029 	.word	0x08009029
 8008fac:	08009029 	.word	0x08009029
 8008fb0:	08009029 	.word	0x08009029
 8008fb4:	08009011 	.word	0x08009011
 8008fb8:	08009029 	.word	0x08009029
 8008fbc:	08009029 	.word	0x08009029
 8008fc0:	08009029 	.word	0x08009029
 8008fc4:	08009029 	.word	0x08009029
 8008fc8:	08009029 	.word	0x08009029
 8008fcc:	08009029 	.word	0x08009029
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009029 	.word	0x08009029
 8008fdc:	08009029 	.word	0x08009029
 8008fe0:	08009029 	.word	0x08009029
 8008fe4:	08009029 	.word	0x08009029
 8008fe8:	08009029 	.word	0x08009029
 8008fec:	08009029 	.word	0x08009029
 8008ff0:	08009029 	.word	0x08009029
 8008ff4:	08009021 	.word	0x08009021
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e1c0      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009000:	2304      	movs	r3, #4
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e1bc      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009008:	2308      	movs	r3, #8
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e1b8      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009010:	2310      	movs	r3, #16
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e1b4      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009018:	2320      	movs	r3, #32
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e1b0      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009020:	2340      	movs	r3, #64	@ 0x40
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e1ac      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009028:	2380      	movs	r3, #128	@ 0x80
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e1a8      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a75      	ldr	r2, [pc, #468]	@ (800920c <UART_SetConfig+0x638>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d130      	bne.n	800909c <UART_SetConfig+0x4c8>
 800903a:	4b73      	ldr	r3, [pc, #460]	@ (8009208 <UART_SetConfig+0x634>)
 800903c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b05      	cmp	r3, #5
 8009044:	d826      	bhi.n	8009094 <UART_SetConfig+0x4c0>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <UART_SetConfig+0x478>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009065 	.word	0x08009065
 8009050:	0800906d 	.word	0x0800906d
 8009054:	08009075 	.word	0x08009075
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	2300      	movs	r3, #0
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e18a      	b.n	8009382 <UART_SetConfig+0x7ae>
 800906c:	2304      	movs	r3, #4
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e186      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009074:	2308      	movs	r3, #8
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e182      	b.n	8009382 <UART_SetConfig+0x7ae>
 800907c:	2310      	movs	r3, #16
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e17e      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009084:	2320      	movs	r3, #32
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e17a      	b.n	8009382 <UART_SetConfig+0x7ae>
 800908c:	2340      	movs	r3, #64	@ 0x40
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e176      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009094:	2380      	movs	r3, #128	@ 0x80
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e172      	b.n	8009382 <UART_SetConfig+0x7ae>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a5b      	ldr	r2, [pc, #364]	@ (8009210 <UART_SetConfig+0x63c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d130      	bne.n	8009108 <UART_SetConfig+0x534>
 80090a6:	4b58      	ldr	r3, [pc, #352]	@ (8009208 <UART_SetConfig+0x634>)
 80090a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d826      	bhi.n	8009100 <UART_SetConfig+0x52c>
 80090b2:	a201      	add	r2, pc, #4	@ (adr r2, 80090b8 <UART_SetConfig+0x4e4>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090d1 	.word	0x080090d1
 80090bc:	080090d9 	.word	0x080090d9
 80090c0:	080090e1 	.word	0x080090e1
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e154      	b.n	8009382 <UART_SetConfig+0x7ae>
 80090d8:	2304      	movs	r3, #4
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e150      	b.n	8009382 <UART_SetConfig+0x7ae>
 80090e0:	2308      	movs	r3, #8
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e14c      	b.n	8009382 <UART_SetConfig+0x7ae>
 80090e8:	2310      	movs	r3, #16
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e148      	b.n	8009382 <UART_SetConfig+0x7ae>
 80090f0:	2320      	movs	r3, #32
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e144      	b.n	8009382 <UART_SetConfig+0x7ae>
 80090f8:	2340      	movs	r3, #64	@ 0x40
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e140      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009100:	2380      	movs	r3, #128	@ 0x80
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e13c      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a41      	ldr	r2, [pc, #260]	@ (8009214 <UART_SetConfig+0x640>)
 800910e:	4293      	cmp	r3, r2
 8009110:	f040 8082 	bne.w	8009218 <UART_SetConfig+0x644>
 8009114:	4b3c      	ldr	r3, [pc, #240]	@ (8009208 <UART_SetConfig+0x634>)
 8009116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800911c:	2b28      	cmp	r3, #40	@ 0x28
 800911e:	d86d      	bhi.n	80091fc <UART_SetConfig+0x628>
 8009120:	a201      	add	r2, pc, #4	@ (adr r2, 8009128 <UART_SetConfig+0x554>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	080091cd 	.word	0x080091cd
 800912c:	080091fd 	.word	0x080091fd
 8009130:	080091fd 	.word	0x080091fd
 8009134:	080091fd 	.word	0x080091fd
 8009138:	080091fd 	.word	0x080091fd
 800913c:	080091fd 	.word	0x080091fd
 8009140:	080091fd 	.word	0x080091fd
 8009144:	080091fd 	.word	0x080091fd
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091fd 	.word	0x080091fd
 8009150:	080091fd 	.word	0x080091fd
 8009154:	080091fd 	.word	0x080091fd
 8009158:	080091fd 	.word	0x080091fd
 800915c:	080091fd 	.word	0x080091fd
 8009160:	080091fd 	.word	0x080091fd
 8009164:	080091fd 	.word	0x080091fd
 8009168:	080091dd 	.word	0x080091dd
 800916c:	080091fd 	.word	0x080091fd
 8009170:	080091fd 	.word	0x080091fd
 8009174:	080091fd 	.word	0x080091fd
 8009178:	080091fd 	.word	0x080091fd
 800917c:	080091fd 	.word	0x080091fd
 8009180:	080091fd 	.word	0x080091fd
 8009184:	080091fd 	.word	0x080091fd
 8009188:	080091e5 	.word	0x080091e5
 800918c:	080091fd 	.word	0x080091fd
 8009190:	080091fd 	.word	0x080091fd
 8009194:	080091fd 	.word	0x080091fd
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080091fd 	.word	0x080091fd
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	080091ed 	.word	0x080091ed
 80091ac:	080091fd 	.word	0x080091fd
 80091b0:	080091fd 	.word	0x080091fd
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	080091fd 	.word	0x080091fd
 80091bc:	080091fd 	.word	0x080091fd
 80091c0:	080091fd 	.word	0x080091fd
 80091c4:	080091fd 	.word	0x080091fd
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e0d6      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091d4:	2304      	movs	r3, #4
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e0d2      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091dc:	2308      	movs	r3, #8
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e2:	e0ce      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091e4:	2310      	movs	r3, #16
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ea:	e0ca      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091ec:	2320      	movs	r3, #32
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e0c6      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091f4:	2340      	movs	r3, #64	@ 0x40
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e0c2      	b.n	8009382 <UART_SetConfig+0x7ae>
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e0be      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009204:	40011400 	.word	0x40011400
 8009208:	58024400 	.word	0x58024400
 800920c:	40007800 	.word	0x40007800
 8009210:	40007c00 	.word	0x40007c00
 8009214:	40011800 	.word	0x40011800
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4aad      	ldr	r2, [pc, #692]	@ (80094d4 <UART_SetConfig+0x900>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d176      	bne.n	8009310 <UART_SetConfig+0x73c>
 8009222:	4bad      	ldr	r3, [pc, #692]	@ (80094d8 <UART_SetConfig+0x904>)
 8009224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800922a:	2b28      	cmp	r3, #40	@ 0x28
 800922c:	d86c      	bhi.n	8009308 <UART_SetConfig+0x734>
 800922e:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <UART_SetConfig+0x660>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	080092d9 	.word	0x080092d9
 8009238:	08009309 	.word	0x08009309
 800923c:	08009309 	.word	0x08009309
 8009240:	08009309 	.word	0x08009309
 8009244:	08009309 	.word	0x08009309
 8009248:	08009309 	.word	0x08009309
 800924c:	08009309 	.word	0x08009309
 8009250:	08009309 	.word	0x08009309
 8009254:	080092e1 	.word	0x080092e1
 8009258:	08009309 	.word	0x08009309
 800925c:	08009309 	.word	0x08009309
 8009260:	08009309 	.word	0x08009309
 8009264:	08009309 	.word	0x08009309
 8009268:	08009309 	.word	0x08009309
 800926c:	08009309 	.word	0x08009309
 8009270:	08009309 	.word	0x08009309
 8009274:	080092e9 	.word	0x080092e9
 8009278:	08009309 	.word	0x08009309
 800927c:	08009309 	.word	0x08009309
 8009280:	08009309 	.word	0x08009309
 8009284:	08009309 	.word	0x08009309
 8009288:	08009309 	.word	0x08009309
 800928c:	08009309 	.word	0x08009309
 8009290:	08009309 	.word	0x08009309
 8009294:	080092f1 	.word	0x080092f1
 8009298:	08009309 	.word	0x08009309
 800929c:	08009309 	.word	0x08009309
 80092a0:	08009309 	.word	0x08009309
 80092a4:	08009309 	.word	0x08009309
 80092a8:	08009309 	.word	0x08009309
 80092ac:	08009309 	.word	0x08009309
 80092b0:	08009309 	.word	0x08009309
 80092b4:	080092f9 	.word	0x080092f9
 80092b8:	08009309 	.word	0x08009309
 80092bc:	08009309 	.word	0x08009309
 80092c0:	08009309 	.word	0x08009309
 80092c4:	08009309 	.word	0x08009309
 80092c8:	08009309 	.word	0x08009309
 80092cc:	08009309 	.word	0x08009309
 80092d0:	08009309 	.word	0x08009309
 80092d4:	08009301 	.word	0x08009301
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092de:	e050      	b.n	8009382 <UART_SetConfig+0x7ae>
 80092e0:	2304      	movs	r3, #4
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e6:	e04c      	b.n	8009382 <UART_SetConfig+0x7ae>
 80092e8:	2308      	movs	r3, #8
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ee:	e048      	b.n	8009382 <UART_SetConfig+0x7ae>
 80092f0:	2310      	movs	r3, #16
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f6:	e044      	b.n	8009382 <UART_SetConfig+0x7ae>
 80092f8:	2320      	movs	r3, #32
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092fe:	e040      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009300:	2340      	movs	r3, #64	@ 0x40
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009306:	e03c      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009308:	2380      	movs	r3, #128	@ 0x80
 800930a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930e:	e038      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a71      	ldr	r2, [pc, #452]	@ (80094dc <UART_SetConfig+0x908>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d130      	bne.n	800937c <UART_SetConfig+0x7a8>
 800931a:	4b6f      	ldr	r3, [pc, #444]	@ (80094d8 <UART_SetConfig+0x904>)
 800931c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	2b05      	cmp	r3, #5
 8009324:	d826      	bhi.n	8009374 <UART_SetConfig+0x7a0>
 8009326:	a201      	add	r2, pc, #4	@ (adr r2, 800932c <UART_SetConfig+0x758>)
 8009328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932c:	08009345 	.word	0x08009345
 8009330:	0800934d 	.word	0x0800934d
 8009334:	08009355 	.word	0x08009355
 8009338:	0800935d 	.word	0x0800935d
 800933c:	08009365 	.word	0x08009365
 8009340:	0800936d 	.word	0x0800936d
 8009344:	2302      	movs	r3, #2
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e01a      	b.n	8009382 <UART_SetConfig+0x7ae>
 800934c:	2304      	movs	r3, #4
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009352:	e016      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009354:	2308      	movs	r3, #8
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935a:	e012      	b.n	8009382 <UART_SetConfig+0x7ae>
 800935c:	2310      	movs	r3, #16
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009362:	e00e      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009364:	2320      	movs	r3, #32
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e00a      	b.n	8009382 <UART_SetConfig+0x7ae>
 800936c:	2340      	movs	r3, #64	@ 0x40
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e006      	b.n	8009382 <UART_SetConfig+0x7ae>
 8009374:	2380      	movs	r3, #128	@ 0x80
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e002      	b.n	8009382 <UART_SetConfig+0x7ae>
 800937c:	2380      	movs	r3, #128	@ 0x80
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a55      	ldr	r2, [pc, #340]	@ (80094dc <UART_SetConfig+0x908>)
 8009388:	4293      	cmp	r3, r2
 800938a:	f040 80f8 	bne.w	800957e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800938e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009392:	2b20      	cmp	r3, #32
 8009394:	dc46      	bgt.n	8009424 <UART_SetConfig+0x850>
 8009396:	2b02      	cmp	r3, #2
 8009398:	db75      	blt.n	8009486 <UART_SetConfig+0x8b2>
 800939a:	3b02      	subs	r3, #2
 800939c:	2b1e      	cmp	r3, #30
 800939e:	d872      	bhi.n	8009486 <UART_SetConfig+0x8b2>
 80093a0:	a201      	add	r2, pc, #4	@ (adr r2, 80093a8 <UART_SetConfig+0x7d4>)
 80093a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a6:	bf00      	nop
 80093a8:	0800942b 	.word	0x0800942b
 80093ac:	08009487 	.word	0x08009487
 80093b0:	08009433 	.word	0x08009433
 80093b4:	08009487 	.word	0x08009487
 80093b8:	08009487 	.word	0x08009487
 80093bc:	08009487 	.word	0x08009487
 80093c0:	08009443 	.word	0x08009443
 80093c4:	08009487 	.word	0x08009487
 80093c8:	08009487 	.word	0x08009487
 80093cc:	08009487 	.word	0x08009487
 80093d0:	08009487 	.word	0x08009487
 80093d4:	08009487 	.word	0x08009487
 80093d8:	08009487 	.word	0x08009487
 80093dc:	08009487 	.word	0x08009487
 80093e0:	08009453 	.word	0x08009453
 80093e4:	08009487 	.word	0x08009487
 80093e8:	08009487 	.word	0x08009487
 80093ec:	08009487 	.word	0x08009487
 80093f0:	08009487 	.word	0x08009487
 80093f4:	08009487 	.word	0x08009487
 80093f8:	08009487 	.word	0x08009487
 80093fc:	08009487 	.word	0x08009487
 8009400:	08009487 	.word	0x08009487
 8009404:	08009487 	.word	0x08009487
 8009408:	08009487 	.word	0x08009487
 800940c:	08009487 	.word	0x08009487
 8009410:	08009487 	.word	0x08009487
 8009414:	08009487 	.word	0x08009487
 8009418:	08009487 	.word	0x08009487
 800941c:	08009487 	.word	0x08009487
 8009420:	08009479 	.word	0x08009479
 8009424:	2b40      	cmp	r3, #64	@ 0x40
 8009426:	d02a      	beq.n	800947e <UART_SetConfig+0x8aa>
 8009428:	e02d      	b.n	8009486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800942a:	f7fd fd2d 	bl	8006e88 <HAL_RCCEx_GetD3PCLK1Freq>
 800942e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009430:	e02f      	b.n	8009492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fd3c 	bl	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009440:	e027      	b.n	8009492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009442:	f107 0318 	add.w	r3, r7, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fe88 	bl	800715c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e01f      	b.n	8009492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009452:	4b21      	ldr	r3, [pc, #132]	@ (80094d8 <UART_SetConfig+0x904>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800945e:	4b1e      	ldr	r3, [pc, #120]	@ (80094d8 <UART_SetConfig+0x904>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	08db      	lsrs	r3, r3, #3
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <UART_SetConfig+0x90c>)
 800946a:	fa22 f303 	lsr.w	r3, r2, r3
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009470:	e00f      	b.n	8009492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009472:	4b1b      	ldr	r3, [pc, #108]	@ (80094e0 <UART_SetConfig+0x90c>)
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009476:	e00c      	b.n	8009492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009478:	4b1a      	ldr	r3, [pc, #104]	@ (80094e4 <UART_SetConfig+0x910>)
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947c:	e009      	b.n	8009492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009484:	e005      	b.n	8009492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 81ee 	beq.w	8009876 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	4a12      	ldr	r2, [pc, #72]	@ (80094e8 <UART_SetConfig+0x914>)
 80094a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a4:	461a      	mov	r2, r3
 80094a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d305      	bcc.n	80094ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d910      	bls.n	80094ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094d0:	e1d1      	b.n	8009876 <UART_SetConfig+0xca2>
 80094d2:	bf00      	nop
 80094d4:	40011c00 	.word	0x40011c00
 80094d8:	58024400 	.word	0x58024400
 80094dc:	58000c00 	.word	0x58000c00
 80094e0:	03d09000 	.word	0x03d09000
 80094e4:	003d0900 	.word	0x003d0900
 80094e8:	0800c2c0 	.word	0x0800c2c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ee:	2200      	movs	r2, #0
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	60fa      	str	r2, [r7, #12]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	4ac0      	ldr	r2, [pc, #768]	@ (80097fc <UART_SetConfig+0xc28>)
 80094fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2200      	movs	r2, #0
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800950a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800950e:	f7f6 ff5f 	bl	80003d0 <__aeabi_uldivmod>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	020b      	lsls	r3, r1, #8
 8009524:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009528:	0202      	lsls	r2, r0, #8
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	6849      	ldr	r1, [r1, #4]
 800952e:	0849      	lsrs	r1, r1, #1
 8009530:	2000      	movs	r0, #0
 8009532:	460c      	mov	r4, r1
 8009534:	4605      	mov	r5, r0
 8009536:	eb12 0804 	adds.w	r8, r2, r4
 800953a:	eb43 0905 	adc.w	r9, r3, r5
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	469a      	mov	sl, r3
 8009546:	4693      	mov	fp, r2
 8009548:	4652      	mov	r2, sl
 800954a:	465b      	mov	r3, fp
 800954c:	4640      	mov	r0, r8
 800954e:	4649      	mov	r1, r9
 8009550:	f7f6 ff3e 	bl	80003d0 <__aeabi_uldivmod>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4613      	mov	r3, r2
 800955a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800955c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009562:	d308      	bcc.n	8009576 <UART_SetConfig+0x9a2>
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800956a:	d204      	bcs.n	8009576 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009572:	60da      	str	r2, [r3, #12]
 8009574:	e17f      	b.n	8009876 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800957c:	e17b      	b.n	8009876 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009586:	f040 80bd 	bne.w	8009704 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800958a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800958e:	2b20      	cmp	r3, #32
 8009590:	dc48      	bgt.n	8009624 <UART_SetConfig+0xa50>
 8009592:	2b00      	cmp	r3, #0
 8009594:	db7b      	blt.n	800968e <UART_SetConfig+0xaba>
 8009596:	2b20      	cmp	r3, #32
 8009598:	d879      	bhi.n	800968e <UART_SetConfig+0xaba>
 800959a:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <UART_SetConfig+0x9cc>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	0800962b 	.word	0x0800962b
 80095a4:	08009633 	.word	0x08009633
 80095a8:	0800968f 	.word	0x0800968f
 80095ac:	0800968f 	.word	0x0800968f
 80095b0:	0800963b 	.word	0x0800963b
 80095b4:	0800968f 	.word	0x0800968f
 80095b8:	0800968f 	.word	0x0800968f
 80095bc:	0800968f 	.word	0x0800968f
 80095c0:	0800964b 	.word	0x0800964b
 80095c4:	0800968f 	.word	0x0800968f
 80095c8:	0800968f 	.word	0x0800968f
 80095cc:	0800968f 	.word	0x0800968f
 80095d0:	0800968f 	.word	0x0800968f
 80095d4:	0800968f 	.word	0x0800968f
 80095d8:	0800968f 	.word	0x0800968f
 80095dc:	0800968f 	.word	0x0800968f
 80095e0:	0800965b 	.word	0x0800965b
 80095e4:	0800968f 	.word	0x0800968f
 80095e8:	0800968f 	.word	0x0800968f
 80095ec:	0800968f 	.word	0x0800968f
 80095f0:	0800968f 	.word	0x0800968f
 80095f4:	0800968f 	.word	0x0800968f
 80095f8:	0800968f 	.word	0x0800968f
 80095fc:	0800968f 	.word	0x0800968f
 8009600:	0800968f 	.word	0x0800968f
 8009604:	0800968f 	.word	0x0800968f
 8009608:	0800968f 	.word	0x0800968f
 800960c:	0800968f 	.word	0x0800968f
 8009610:	0800968f 	.word	0x0800968f
 8009614:	0800968f 	.word	0x0800968f
 8009618:	0800968f 	.word	0x0800968f
 800961c:	0800968f 	.word	0x0800968f
 8009620:	08009681 	.word	0x08009681
 8009624:	2b40      	cmp	r3, #64	@ 0x40
 8009626:	d02e      	beq.n	8009686 <UART_SetConfig+0xab2>
 8009628:	e031      	b.n	800968e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800962a:	f7fc fa61 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 800962e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009630:	e033      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009632:	f7fc fa73 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
 8009636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009638:	e02f      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800963e:	4618      	mov	r0, r3
 8009640:	f7fd fc38 	bl	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009648:	e027      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964a:	f107 0318 	add.w	r3, r7, #24
 800964e:	4618      	mov	r0, r3
 8009650:	f7fd fd84 	bl	800715c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009658:	e01f      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800965a:	4b69      	ldr	r3, [pc, #420]	@ (8009800 <UART_SetConfig+0xc2c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009666:	4b66      	ldr	r3, [pc, #408]	@ (8009800 <UART_SetConfig+0xc2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	4a64      	ldr	r2, [pc, #400]	@ (8009804 <UART_SetConfig+0xc30>)
 8009672:	fa22 f303 	lsr.w	r3, r2, r3
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009678:	e00f      	b.n	800969a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800967a:	4b62      	ldr	r3, [pc, #392]	@ (8009804 <UART_SetConfig+0xc30>)
 800967c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967e:	e00c      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009680:	4b61      	ldr	r3, [pc, #388]	@ (8009808 <UART_SetConfig+0xc34>)
 8009682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009684:	e009      	b.n	800969a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800968c:	e005      	b.n	800969a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800969a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 80ea 	beq.w	8009876 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a6:	4a55      	ldr	r2, [pc, #340]	@ (80097fc <UART_SetConfig+0xc28>)
 80096a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ac:	461a      	mov	r2, r3
 80096ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b4:	005a      	lsls	r2, r3, #1
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	085b      	lsrs	r3, r3, #1
 80096bc:	441a      	add	r2, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	2b0f      	cmp	r3, #15
 80096cc:	d916      	bls.n	80096fc <UART_SetConfig+0xb28>
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096d4:	d212      	bcs.n	80096fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f023 030f 	bic.w	r3, r3, #15
 80096de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	085b      	lsrs	r3, r3, #1
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096ee:	4313      	orrs	r3, r2
 80096f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096f8:	60da      	str	r2, [r3, #12]
 80096fa:	e0bc      	b.n	8009876 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009702:	e0b8      	b.n	8009876 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009704:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009708:	2b20      	cmp	r3, #32
 800970a:	dc4b      	bgt.n	80097a4 <UART_SetConfig+0xbd0>
 800970c:	2b00      	cmp	r3, #0
 800970e:	f2c0 8087 	blt.w	8009820 <UART_SetConfig+0xc4c>
 8009712:	2b20      	cmp	r3, #32
 8009714:	f200 8084 	bhi.w	8009820 <UART_SetConfig+0xc4c>
 8009718:	a201      	add	r2, pc, #4	@ (adr r2, 8009720 <UART_SetConfig+0xb4c>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	080097ab 	.word	0x080097ab
 8009724:	080097b3 	.word	0x080097b3
 8009728:	08009821 	.word	0x08009821
 800972c:	08009821 	.word	0x08009821
 8009730:	080097bb 	.word	0x080097bb
 8009734:	08009821 	.word	0x08009821
 8009738:	08009821 	.word	0x08009821
 800973c:	08009821 	.word	0x08009821
 8009740:	080097cb 	.word	0x080097cb
 8009744:	08009821 	.word	0x08009821
 8009748:	08009821 	.word	0x08009821
 800974c:	08009821 	.word	0x08009821
 8009750:	08009821 	.word	0x08009821
 8009754:	08009821 	.word	0x08009821
 8009758:	08009821 	.word	0x08009821
 800975c:	08009821 	.word	0x08009821
 8009760:	080097db 	.word	0x080097db
 8009764:	08009821 	.word	0x08009821
 8009768:	08009821 	.word	0x08009821
 800976c:	08009821 	.word	0x08009821
 8009770:	08009821 	.word	0x08009821
 8009774:	08009821 	.word	0x08009821
 8009778:	08009821 	.word	0x08009821
 800977c:	08009821 	.word	0x08009821
 8009780:	08009821 	.word	0x08009821
 8009784:	08009821 	.word	0x08009821
 8009788:	08009821 	.word	0x08009821
 800978c:	08009821 	.word	0x08009821
 8009790:	08009821 	.word	0x08009821
 8009794:	08009821 	.word	0x08009821
 8009798:	08009821 	.word	0x08009821
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009813 	.word	0x08009813
 80097a4:	2b40      	cmp	r3, #64	@ 0x40
 80097a6:	d037      	beq.n	8009818 <UART_SetConfig+0xc44>
 80097a8:	e03a      	b.n	8009820 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097aa:	f7fc f9a1 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 80097ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097b0:	e03c      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b2:	f7fc f9b3 	bl	8005b1c <HAL_RCC_GetPCLK2Freq>
 80097b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097b8:	e038      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fd fb78 	bl	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c8:	e030      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ca:	f107 0318 	add.w	r3, r7, #24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fd fcc4 	bl	800715c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d8:	e028      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097da:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <UART_SetConfig+0xc2c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0320 	and.w	r3, r3, #32
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d012      	beq.n	800980c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097e6:	4b06      	ldr	r3, [pc, #24]	@ (8009800 <UART_SetConfig+0xc2c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	08db      	lsrs	r3, r3, #3
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	4a04      	ldr	r2, [pc, #16]	@ (8009804 <UART_SetConfig+0xc30>)
 80097f2:	fa22 f303 	lsr.w	r3, r2, r3
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097f8:	e018      	b.n	800982c <UART_SetConfig+0xc58>
 80097fa:	bf00      	nop
 80097fc:	0800c2c0 	.word	0x0800c2c0
 8009800:	58024400 	.word	0x58024400
 8009804:	03d09000 	.word	0x03d09000
 8009808:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800980c:	4b24      	ldr	r3, [pc, #144]	@ (80098a0 <UART_SetConfig+0xccc>)
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009810:	e00c      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009812:	4b24      	ldr	r3, [pc, #144]	@ (80098a4 <UART_SetConfig+0xcd0>)
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009816:	e009      	b.n	800982c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009818:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800981c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981e:	e005      	b.n	800982c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800982a:	bf00      	nop
    }

    if (pclk != 0U)
 800982c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d021      	beq.n	8009876 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	4a1c      	ldr	r2, [pc, #112]	@ (80098a8 <UART_SetConfig+0xcd4>)
 8009838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983c:	461a      	mov	r2, r3
 800983e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009840:	fbb3 f2f2 	udiv	r2, r3, r2
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	441a      	add	r2, r3
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	fbb2 f3f3 	udiv	r3, r2, r3
 8009854:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	2b0f      	cmp	r3, #15
 800985a:	d909      	bls.n	8009870 <UART_SetConfig+0xc9c>
 800985c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009862:	d205      	bcs.n	8009870 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009866:	b29a      	uxth	r2, r3
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60da      	str	r2, [r3, #12]
 800986e:	e002      	b.n	8009876 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2201      	movs	r2, #1
 800987a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2201      	movs	r2, #1
 8009882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2200      	movs	r2, #0
 800988a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2200      	movs	r2, #0
 8009890:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009892:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009896:	4618      	mov	r0, r3
 8009898:	3748      	adds	r7, #72	@ 0x48
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098a0:	03d09000 	.word	0x03d09000
 80098a4:	003d0900 	.word	0x003d0900
 80098a8:	0800c2c0 	.word	0x0800c2c0

080098ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01a      	beq.n	80099c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099aa:	d10a      	bne.n	80099c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00a      	beq.n	80099e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	605a      	str	r2, [r3, #4]
  }
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b098      	sub	sp, #96	@ 0x60
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a00:	f7f7 fefe 	bl	8001800 <HAL_GetTick>
 8009a04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d12f      	bne.n	8009a74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f88e 	bl	8009b44 <UART_WaitOnFlagUntilTimeout>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d022      	beq.n	8009a74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a54:	e841 2300 	strex	r3, r2, [r1]
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e6      	bne.n	8009a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e063      	b.n	8009b3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0304 	and.w	r3, r3, #4
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d149      	bne.n	8009b16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f857 	bl	8009b44 <UART_WaitOnFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d03c      	beq.n	8009b16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8009abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e6      	bne.n	8009a9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3308      	adds	r3, #8
 8009aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aee:	61fa      	str	r2, [r7, #28]
 8009af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	69b9      	ldr	r1, [r7, #24]
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	617b      	str	r3, [r7, #20]
   return(result);
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e012      	b.n	8009b3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2220      	movs	r2, #32
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3758      	adds	r7, #88	@ 0x58
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b54:	e04f      	b.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d04b      	beq.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5e:	f7f7 fe4f 	bl	8001800 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d302      	bcc.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e04e      	b.n	8009c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d037      	beq.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b80      	cmp	r3, #128	@ 0x80
 8009b8a:	d034      	beq.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b40      	cmp	r3, #64	@ 0x40
 8009b90:	d031      	beq.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f003 0308 	and.w	r3, r3, #8
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d110      	bne.n	8009bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f921 	bl	8009df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2208      	movs	r2, #8
 8009bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e029      	b.n	8009c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd0:	d111      	bne.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f907 	bl	8009df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e00f      	b.n	8009c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69da      	ldr	r2, [r3, #28]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	bf0c      	ite	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	2300      	movne	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d0a0      	beq.n	8009b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b096      	sub	sp, #88	@ 0x58
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2222      	movs	r2, #34	@ 0x22
 8009c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d02d      	beq.n	8009cb2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c5c:	4a40      	ldr	r2, [pc, #256]	@ (8009d60 <UART_Start_Receive_DMA+0x140>)
 8009c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c66:	4a3f      	ldr	r2, [pc, #252]	@ (8009d64 <UART_Start_Receive_DMA+0x144>)
 8009c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c70:	4a3d      	ldr	r2, [pc, #244]	@ (8009d68 <UART_Start_Receive_DMA+0x148>)
 8009c72:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	3324      	adds	r3, #36	@ 0x24
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c90:	461a      	mov	r2, r3
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	f7f8 fa28 	bl	80020e8 <HAL_DMA_Start_IT>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2210      	movs	r2, #16
 8009ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e051      	b.n	8009d56 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d018      	beq.n	8009cec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc2:	e853 3f00 	ldrex	r3, [r3]
 8009cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cda:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ce0:	e841 2300 	strex	r3, r2, [r1]
 8009ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1e6      	bne.n	8009cba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	f043 0301 	orr.w	r3, r3, #1
 8009d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e5      	bne.n	8009cec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3308      	adds	r3, #8
 8009d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d40:	623a      	str	r2, [r7, #32]
 8009d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	69f9      	ldr	r1, [r7, #28]
 8009d46:	6a3a      	ldr	r2, [r7, #32]
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e5      	bne.n	8009d20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3758      	adds	r7, #88	@ 0x58
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	08009ebd 	.word	0x08009ebd
 8009d64:	08009fe5 	.word	0x08009fe5
 8009d68:	0800a023 	.word	0x0800a023

08009d6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b08f      	sub	sp, #60	@ 0x3c
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e6      	bne.n	8009d74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3308      	adds	r3, #8
 8009dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc6:	61ba      	str	r2, [r7, #24]
 8009dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6979      	ldr	r1, [r7, #20]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e5      	bne.n	8009da6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009de2:	bf00      	nop
 8009de4:	373c      	adds	r7, #60	@ 0x3c
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b095      	sub	sp, #84	@ 0x54
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e6      	bne.n	8009df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8009eb8 <UART_EndRxTransfer+0xc8>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e5      	bne.n	8009e2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d118      	bne.n	8009e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f023 0310 	bic.w	r3, r3, #16
 8009e7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e84:	61bb      	str	r3, [r7, #24]
 8009e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	6979      	ldr	r1, [r7, #20]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	613b      	str	r3, [r7, #16]
   return(result);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e6      	bne.n	8009e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009eac:	bf00      	nop
 8009eae:	3754      	adds	r7, #84	@ 0x54
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	effffffe 	.word	0xeffffffe

08009ebc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b09c      	sub	sp, #112	@ 0x70
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed2:	d071      	beq.n	8009fb8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009efa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009efc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e6      	bne.n	8009edc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3308      	adds	r3, #8
 8009f14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f20:	f023 0301 	bic.w	r3, r3, #1
 8009f24:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3308      	adds	r3, #8
 8009f48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	623b      	str	r3, [r7, #32]
   return(result);
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e5      	bne.n	8009f42 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f78:	2220      	movs	r2, #32
 8009f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d118      	bne.n	8009fb8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0310 	bic.w	r3, r3, #16
 8009f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fa4:	61fb      	str	r3, [r7, #28]
 8009fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	69b9      	ldr	r1, [r7, #24]
 8009faa:	69fa      	ldr	r2, [r7, #28]
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fba:	2200      	movs	r2, #0
 8009fbc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d107      	bne.n	8009fd6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fd0:	f7fe fdf4 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fd4:	e002      	b.n	8009fdc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009fd6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fd8:	f000 fcc4 	bl	800a964 <HAL_UART_RxCpltCallback>
}
 8009fdc:	bf00      	nop
 8009fde:	3770      	adds	r7, #112	@ 0x70
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d109      	bne.n	800a014 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a006:	085b      	lsrs	r3, r3, #1
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4619      	mov	r1, r3
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f7fe fdd5 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a012:	e002      	b.n	800a01a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7fe fdbd 	bl	8008b94 <HAL_UART_RxHalfCpltCallback>
}
 800a01a:	bf00      	nop
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a036:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04a:	2b80      	cmp	r3, #128	@ 0x80
 800a04c:	d109      	bne.n	800a062 <UART_DMAError+0x40>
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b21      	cmp	r3, #33	@ 0x21
 800a052:	d106      	bne.n	800a062 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a05c:	6978      	ldr	r0, [r7, #20]
 800a05e:	f7ff fe85 	bl	8009d6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a06c:	2b40      	cmp	r3, #64	@ 0x40
 800a06e:	d109      	bne.n	800a084 <UART_DMAError+0x62>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b22      	cmp	r3, #34	@ 0x22
 800a074:	d106      	bne.n	800a084 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2200      	movs	r2, #0
 800a07a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f7ff feb6 	bl	8009df0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a08a:	f043 0210 	orr.w	r2, r3, #16
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a094:	6978      	ldr	r0, [r7, #20]
 800a096:	f7fe fd87 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a09a:	bf00      	nop
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7fe fd71 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c6:	bf00      	nop
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b08f      	sub	sp, #60	@ 0x3c
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0dc:	2b21      	cmp	r3, #33	@ 0x21
 800a0de:	d14c      	bne.n	800a17a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d132      	bne.n	800a152 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a10c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e6      	bne.n	800a0ec <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a132:	633b      	str	r3, [r7, #48]	@ 0x30
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6979      	ldr	r1, [r7, #20]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	613b      	str	r3, [r7, #16]
   return(result);
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e6      	bne.n	800a11e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a150:	e013      	b.n	800a17a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a16e:	b29b      	uxth	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a17a:	bf00      	nop
 800a17c:	373c      	adds	r7, #60	@ 0x3c
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a186:	b480      	push	{r7}
 800a188:	b091      	sub	sp, #68	@ 0x44
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a194:	2b21      	cmp	r3, #33	@ 0x21
 800a196:	d151      	bne.n	800a23c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d132      	bne.n	800a20a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e6      	bne.n	800a1a4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f4:	61fb      	str	r3, [r7, #28]
 800a1f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	69b9      	ldr	r1, [r7, #24]
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	617b      	str	r3, [r7, #20]
   return(result);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e6      	bne.n	800a1d6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a208:	e018      	b.n	800a23c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a21e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a224:	1c9a      	adds	r2, r3, #2
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a23c:	bf00      	nop
 800a23e:	3744      	adds	r7, #68	@ 0x44
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b091      	sub	sp, #68	@ 0x44
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a256:	2b21      	cmp	r3, #33	@ 0x21
 800a258:	d160      	bne.n	800a31c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a260:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a262:	e057      	b.n	800a314 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d133      	bne.n	800a2d8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3308      	adds	r3, #8
 800a276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	623b      	str	r3, [r7, #32]
   return(result);
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3308      	adds	r3, #8
 800a28e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a290:	633a      	str	r2, [r7, #48]	@ 0x30
 800a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e5      	bne.n	800a270 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c2:	61fb      	str	r3, [r7, #28]
 800a2c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	69b9      	ldr	r1, [r7, #24]
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e6      	bne.n	800a2a4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a2d6:	e021      	b.n	800a31c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d013      	beq.n	800a30e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a30e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a310:	3b01      	subs	r3, #1
 800a312:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a314:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1a4      	bne.n	800a264 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a31a:	e7ff      	b.n	800a31c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a31c:	bf00      	nop
 800a31e:	3744      	adds	r7, #68	@ 0x44
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b091      	sub	sp, #68	@ 0x44
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a336:	2b21      	cmp	r3, #33	@ 0x21
 800a338:	d165      	bne.n	800a406 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a340:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a342:	e05c      	b.n	800a3fe <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d133      	bne.n	800a3b8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	60bb      	str	r3, [r7, #8]
   return(result);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	633b      	str	r3, [r7, #48]	@ 0x30
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	61bb      	str	r3, [r7, #24]
 800a3a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6979      	ldr	r1, [r7, #20]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e6      	bne.n	800a384 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a3b6:	e026      	b.n	800a406 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d018      	beq.n	800a3f8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3da:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e0:	1c9a      	adds	r2, r3, #2
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a3f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a3fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a400:	2b00      	cmp	r3, #0
 800a402:	d19f      	bne.n	800a344 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a404:	e7ff      	b.n	800a406 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a406:	bf00      	nop
 800a408:	3744      	adds	r7, #68	@ 0x44
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b088      	sub	sp, #32
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	60bb      	str	r3, [r7, #8]
   return(result);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6979      	ldr	r1, [r7, #20]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	613b      	str	r3, [r7, #16]
   return(result);
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e6      	bne.n	800a41a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa92 	bl	800a984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a460:	bf00      	nop
 800a462:	3720      	adds	r7, #32
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d101      	bne.n	800a4ba <HAL_UARTEx_DisableFifoMode+0x16>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e027      	b.n	800a50a <HAL_UARTEx_DisableFifoMode+0x66>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2224      	movs	r2, #36	@ 0x24
 800a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 0201 	bic.w	r2, r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e02d      	b.n	800a58a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2224      	movs	r2, #36	@ 0x24
 800a53a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f850 	bl	800a610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e02d      	b.n	800a606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2224      	movs	r2, #36	@ 0x24
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f812 	bl	800a610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d108      	bne.n	800a632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a630:	e031      	b.n	800a696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a632:	2310      	movs	r3, #16
 800a634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a636:	2310      	movs	r3, #16
 800a638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	0e5b      	lsrs	r3, r3, #25
 800a642:	b2db      	uxtb	r3, r3
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	0f5b      	lsrs	r3, r3, #29
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	7b3a      	ldrb	r2, [r7, #12]
 800a65e:	4911      	ldr	r1, [pc, #68]	@ (800a6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a660:	5c8a      	ldrb	r2, [r1, r2]
 800a662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a666:	7b3a      	ldrb	r2, [r7, #12]
 800a668:	490f      	ldr	r1, [pc, #60]	@ (800a6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800a66a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a66c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a670:	b29a      	uxth	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	7b7a      	ldrb	r2, [r7, #13]
 800a67c:	4909      	ldr	r1, [pc, #36]	@ (800a6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a67e:	5c8a      	ldrb	r2, [r1, r2]
 800a680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a684:	7b7a      	ldrb	r2, [r7, #13]
 800a686:	4908      	ldr	r1, [pc, #32]	@ (800a6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800a688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a68a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a68e:	b29a      	uxth	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	0800c2d8 	.word	0x0800c2d8
 800a6a8:	0800c2e0 	.word	0x0800c2e0

0800a6ac <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a6b6:	f000 f863 	bl	800a780 <HAL_ResumeTick>

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a6ba:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <HAL_GPIO_EXTI_Callback+0x34>)
 800a6bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a6c0:	4808      	ldr	r0, [pc, #32]	@ (800a6e4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a6c2:	f000 fcad 	bl	800b020 <sniprintf>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a6ca:	89fa      	ldrh	r2, [r7, #14]
 800a6cc:	2364      	movs	r3, #100	@ 0x64
 800a6ce:	4905      	ldr	r1, [pc, #20]	@ (800a6e4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a6d0:	4805      	ldr	r0, [pc, #20]	@ (800a6e8 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a6d2:	f7fd fd36 	bl	8008142 <HAL_UART_Transmit>

}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	0800c238 	.word	0x0800c238
 800a6e4:	24000674 	.word	0x24000674
 800a6e8:	24000564 	.word	0x24000564

0800a6ec <stopModeTask>:

}


void stopModeTask(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
	if(stopModeTriggered == true)
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a730 <stopModeTask+0x44>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d015      	beq.n	800a726 <stopModeTask+0x3a>
	{
		stopModeTriggered = false;
 800a6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a730 <stopModeTask+0x44>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	701a      	strb	r2, [r3, #0]
//		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
//		{
//			Error_Handler();
//		}

	    uint16_t length = snprintf(res, 512, "Stop Mode Triggered \r\n");
 800a700:	4a0c      	ldr	r2, [pc, #48]	@ (800a734 <stopModeTask+0x48>)
 800a702:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a706:	480c      	ldr	r0, [pc, #48]	@ (800a738 <stopModeTask+0x4c>)
 800a708:	f000 fc8a 	bl	800b020 <sniprintf>
 800a70c:	4603      	mov	r3, r0
 800a70e:	80fb      	strh	r3, [r7, #6]

	    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 800a710:	2008      	movs	r0, #8
 800a712:	f7fa f9b5 	bl	8004a80 <HAL_PWR_EnableWakeUpPin>

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	2364      	movs	r3, #100	@ 0x64
 800a71a:	4907      	ldr	r1, [pc, #28]	@ (800a738 <stopModeTask+0x4c>)
 800a71c:	4807      	ldr	r0, [pc, #28]	@ (800a73c <stopModeTask+0x50>)
 800a71e:	f7fd fd10 	bl	8008142 <HAL_UART_Transmit>

		HAL_PWR_EnterSTANDBYMode();
 800a722:	f7fa f9f3 	bl	8004b0c <HAL_PWR_EnterSTANDBYMode>

	}
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2400073c 	.word	0x2400073c
 800a734:	0800c24c 	.word	0x0800c24c
 800a738:	240006d8 	.word	0x240006d8
 800a73c:	24000564 	.word	0x24000564

0800a740 <startSleepMode>:

void startSleepMode(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a744:	4805      	ldr	r0, [pc, #20]	@ (800a75c <startSleepMode+0x1c>)
 800a746:	f7fd fc21 	bl	8007f8c <HAL_RTCEx_DeactivateWakeUpTimer>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a74a:	2101      	movs	r1, #1
 800a74c:	2000      	movs	r0, #0
 800a74e:	f7fa f9c3 	bl	8004ad8 <HAL_PWR_EnterSLEEPMode>

	HAL_SuspendTick();
 800a752:	f000 f805 	bl	800a760 <HAL_SuspendTick>
}
 800a756:	bf00      	nop
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	2400053c 	.word	0x2400053c

0800a760 <HAL_SuspendTick>:
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}


void HAL_SuspendTick(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <HAL_SuspendTick+0x1c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a04      	ldr	r2, [pc, #16]	@ (800a77c <HAL_SuspendTick+0x1c>)
 800a76a:	f023 0302 	bic.w	r3, r3, #2
 800a76e:	6013      	str	r3, [r2, #0]
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	e000e010 	.word	0xe000e010

0800a780 <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a784:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <HAL_ResumeTick+0x1c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a04      	ldr	r2, [pc, #16]	@ (800a79c <HAL_ResumeTick+0x1c>)
 800a78a:	f043 0302 	orr.w	r3, r3, #2
 800a78e:	6013      	str	r3, [r2, #0]
}
 800a790:	bf00      	nop
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	e000e010 	.word	0xe000e010

0800a7a0 <setStopModeFlag>:
{
	return stopModeTriggered;
}

void setStopModeFlag(bool flag)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	71fb      	strb	r3, [r7, #7]
	stopModeTriggered = flag;
 800a7aa:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <setStopModeFlag+0x1c>)
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	7013      	strb	r3, [r2, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	2400073c 	.word	0x2400073c

0800a7c0 <RTCInit>:

	rtcAlarmTriggered = true;
}

void RTCInit(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	480b      	ldr	r0, [pc, #44]	@ (800a7f4 <RTCInit+0x34>)
 800a7c8:	f7fd fc55 	bl	8008076 <HAL_RTCEx_BKUPRead>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d008      	beq.n	800a7e8 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a7d6:	4808      	ldr	r0, [pc, #32]	@ (800a7f8 <RTCInit+0x38>)
 800a7d8:	f000 f814 	bl	800a804 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a7dc:	2364      	movs	r3, #100	@ 0x64
 800a7de:	220d      	movs	r2, #13
 800a7e0:	4906      	ldr	r1, [pc, #24]	@ (800a7fc <RTCInit+0x3c>)
 800a7e2:	4807      	ldr	r0, [pc, #28]	@ (800a800 <RTCInit+0x40>)
 800a7e4:	f7fd fcad 	bl	8008142 <HAL_UART_Transmit>
	}
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a7e8:	4802      	ldr	r0, [pc, #8]	@ (800a7f4 <RTCInit+0x34>)
 800a7ea:	f7fd fbcf 	bl	8007f8c <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800a7ee:	bf00      	nop
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2400053c 	.word	0x2400053c
 800a7f8:	24000094 	.word	0x24000094
 800a7fc:	0800c264 	.word	0x0800c264
 800a800:	24000564 	.word	0x24000564

0800a804 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a80c:	f107 030c 	add.w	r3, r7, #12
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	609a      	str	r2, [r3, #8]
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	789b      	ldrb	r3, [r3, #2]
 800a82c:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a82e:	2300      	movs	r3, #0
 800a830:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a836:	2300      	movs	r3, #0
 800a838:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	78db      	ldrb	r3, [r3, #3]
 800a83e:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	795b      	ldrb	r3, [r3, #5]
 800a844:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	791b      	ldrb	r3, [r3, #4]
 800a84a:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	799b      	ldrb	r3, [r3, #6]
 800a850:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	2200      	movs	r2, #0
 800a858:	4619      	mov	r1, r3
 800a85a:	480d      	ldr	r0, [pc, #52]	@ (800a890 <setRTCData+0x8c>)
 800a85c:	f7fc ffb8 	bl	80077d0 <HAL_RTC_SetTime>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10f      	bne.n	800a886 <setRTCData+0x82>
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	2200      	movs	r2, #0
 800a86c:	4619      	mov	r1, r3
 800a86e:	4808      	ldr	r0, [pc, #32]	@ (800a890 <setRTCData+0x8c>)
 800a870:	f7fd f8a8 	bl	80079c4 <HAL_RTC_SetDate>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a87a:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a87e:	2101      	movs	r1, #1
 800a880:	4803      	ldr	r0, [pc, #12]	@ (800a890 <setRTCData+0x8c>)
 800a882:	f7fd fbe0 	bl	8008046 <HAL_RTCEx_BKUPWrite>
	}
}
 800a886:	bf00      	nop
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	2400053c 	.word	0x2400053c

0800a894 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4811      	ldr	r0, [pc, #68]	@ (800a8ec <getRTCData+0x58>)
 800a8a6:	f7fd f831 	bl	800790c <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a8aa:	f107 031c 	add.w	r3, r7, #28
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	480e      	ldr	r0, [pc, #56]	@ (800a8ec <getRTCData+0x58>)
 800a8b4:	f7fd f90e 	bl	8007ad4 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800a8b8:	7fba      	ldrb	r2, [r7, #30]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800a8be:	7f3a      	ldrb	r2, [r7, #28]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800a8c4:	7f7a      	ldrb	r2, [r7, #29]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800a8ca:	7ffa      	ldrb	r2, [r7, #31]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800a8d0:	7a3a      	ldrb	r2, [r7, #8]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800a8d6:	7a7a      	ldrb	r2, [r7, #9]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800a8dc:	7aba      	ldrb	r2, [r7, #10]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	709a      	strb	r2, [r3, #2]
}
 800a8e2:	bf00      	nop
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	2400053c 	.word	0x2400053c

0800a8f0 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08c      	sub	sp, #48	@ 0x30
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800a8f8:	f107 0308 	add.w	r3, r7, #8
 800a8fc:	2228      	movs	r2, #40	@ 0x28
 800a8fe:	2100      	movs	r1, #0
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fc04 	bl	800b10e <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	789b      	ldrb	r3, [r3, #2]
 800a916:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a920:	2300      	movs	r3, #0
 800a922:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a928:	2300      	movs	r3, #0
 800a92a:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800a92c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a930:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800a93a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a93e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a940:	f107 0308 	add.w	r3, r7, #8
 800a944:	2200      	movs	r2, #0
 800a946:	4619      	mov	r1, r3
 800a948:	4805      	ldr	r0, [pc, #20]	@ (800a960 <setRTCAlarm+0x70>)
 800a94a:	f7fd f911 	bl	8007b70 <HAL_RTC_SetAlarm_IT>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <setRTCAlarm+0x68>
	{
		Error_Handler();
 800a954:	f7f6 fb70 	bl	8001038 <Error_Handler>
	}
}
 800a958:	bf00      	nop
 800a95a:	3730      	adds	r7, #48	@ 0x30
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	2400053c 	.word	0x2400053c

0800a964 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800a96c:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <HAL_UART_RxCpltCallback+0x1c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	60fb      	str	r3, [r7, #12]

	fptr();
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4798      	blx	r3
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	24000740 	.word	0x24000740

0800a984 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]

}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800a9a0:	4a04      	ldr	r2, [pc, #16]	@ (800a9b4 <uartInit+0x1c>)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6013      	str	r3, [r2, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	24000740 	.word	0x24000740

0800a9b8 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4803      	ldr	r0, [pc, #12]	@ (800a9d4 <receptionItrOn+0x1c>)
 800a9c6:	f7fd fcdf 	bl	8008388 <HAL_UART_Receive_DMA>
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	24000564 	.word	0x24000564

0800a9d8 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800a9dc:	4b07      	ldr	r3, [pc, #28]	@ (800a9fc <debugRxCallback+0x24>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b0d      	cmp	r3, #13
 800a9e2:	d102      	bne.n	800a9ea <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800a9e4:	4b06      	ldr	r3, [pc, #24]	@ (800aa00 <debugRxCallback+0x28>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800a9ea:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <debugRxCallback+0x2c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4903      	ldr	r1, [pc, #12]	@ (800a9fc <debugRxCallback+0x24>)
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 f888 	bl	800ab06 <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800a9f6:	bf00      	nop
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	24000744 	.word	0x24000744
 800aa00:	2400074c 	.word	0x2400074c
 800aa04:	24000748 	.word	0x24000748

0800aa08 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800aa0e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa38 <debugUartInit+0x30>)
 800aa10:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800aa12:	4b0a      	ldr	r3, [pc, #40]	@ (800aa3c <debugUartInit+0x34>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f839 	bl	800aa94 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff ffb8 	bl	800a998 <uartInit>

	receptionItrOn(&data);
 800aa28:	4805      	ldr	r0, [pc, #20]	@ (800aa40 <debugUartInit+0x38>)
 800aa2a:	f7ff ffc5 	bl	800a9b8 <receptionItrOn>
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	0800a9d9 	.word	0x0800a9d9
 800aa3c:	24000748 	.word	0x24000748
 800aa40:	24000744 	.word	0x24000744

0800aa44 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800aa48:	4b03      	ldr	r3, [pc, #12]	@ (800aa58 <getCmdReceivedFlag+0x14>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	2400074c 	.word	0x2400074c

0800aa5c <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800aa66:	4a04      	ldr	r2, [pc, #16]	@ (800aa78 <setCmdReceivedFlag+0x1c>)
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	7013      	strb	r3, [r2, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	2400074c 	.word	0x2400074c

0800aa7c <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
	return rxBuffer;
 800aa80:	4b03      	ldr	r3, [pc, #12]	@ (800aa90 <getRxBuffer+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	24000748 	.word	0x24000748

0800aa94 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	807b      	strh	r3, [r7, #2]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	883a      	ldrh	r2, [r7, #0]
 800aab8:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	887a      	ldrh	r2, [r7, #2]
 800aabe:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800aac0:	887b      	ldrh	r3, [r7, #2]
 800aac2:	883a      	ldrh	r2, [r7, #0]
 800aac4:	fb02 f303 	mul.w	r3, r2, r3
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f8ad 	bl	800ac28 <malloc>
 800aace:	4603      	mov	r3, r0
 800aad0:	461a      	mov	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68d8      	ldr	r0, [r3, #12]
 800aae8:	887b      	ldrh	r3, [r7, #2]
 800aaea:	883a      	ldrh	r2, [r7, #0]
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	f000 fb0b 	bl	800b10e <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800ab10:	2303      	movs	r3, #3
 800ab12:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	889b      	ldrh	r3, [r3, #4]
 800ab20:	89ba      	ldrh	r2, [r7, #12]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d301      	bcc.n	800ab2a <circularBufferEnqueue+0x24>
    {
        next = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	885b      	ldrh	r3, [r3, #2]
 800ab2e:	89ba      	ldrh	r2, [r7, #12]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d02b      	beq.n	800ab8c <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	8812      	ldrh	r2, [r2, #0]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	88d2      	ldrh	r2, [r2, #6]
 800ab42:	fb01 f202 	mul.w	r2, r1, r2
 800ab46:	1898      	adds	r0, r3, r2
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	88db      	ldrh	r3, [r3, #6]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	f000 fbc5 	bl	800b2de <memcpy>
 800ab54:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d017      	beq.n	800ab8c <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	89ba      	ldrh	r2, [r7, #12]
 800ab60:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800ab62:	2302      	movs	r3, #2
 800ab64:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	889b      	ldrh	r3, [r3, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	8852      	ldrh	r2, [r2, #2]
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	8892      	ldrh	r2, [r2, #4]
 800ab7c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab80:	fb01 f202 	mul.w	r2, r1, r2
 800ab84:	1a9b      	subs	r3, r3, r2
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800aba0:	2305      	movs	r3, #5
 800aba2:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	885a      	ldrh	r2, [r3, #2]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d032      	beq.n	800ac16 <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	885b      	ldrh	r3, [r3, #2]
 800abb4:	3301      	adds	r3, #1
 800abb6:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	889b      	ldrh	r3, [r3, #4]
 800abbc:	89ba      	ldrh	r2, [r7, #12]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d301      	bcc.n	800abc6 <circularBufferDequeue+0x30>
        {
            next = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	8852      	ldrh	r2, [r2, #2]
 800abce:	4611      	mov	r1, r2
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	88d2      	ldrh	r2, [r2, #6]
 800abd4:	fb01 f202 	mul.w	r2, r1, r2
 800abd8:	1899      	adds	r1, r3, r2
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	461a      	mov	r2, r3
 800abe0:	6838      	ldr	r0, [r7, #0]
 800abe2:	f000 fb7c 	bl	800b2de <memcpy>

        cBuff->tail = next;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	89ba      	ldrh	r2, [r7, #12]
 800abea:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	889b      	ldrh	r3, [r3, #4]
 800abf6:	4413      	add	r3, r2
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	8852      	ldrh	r2, [r2, #2]
 800abfc:	1a9b      	subs	r3, r3, r2
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	8892      	ldrh	r2, [r2, #4]
 800ac02:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac06:	fb01 f202 	mul.w	r2, r1, r2
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ac12:	2304      	movs	r3, #4
 800ac14:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <atoi>:
 800ac20:	220a      	movs	r2, #10
 800ac22:	2100      	movs	r1, #0
 800ac24:	f000 b930 	b.w	800ae88 <strtol>

0800ac28 <malloc>:
 800ac28:	4b02      	ldr	r3, [pc, #8]	@ (800ac34 <malloc+0xc>)
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	f000 b825 	b.w	800ac7c <_malloc_r>
 800ac32:	bf00      	nop
 800ac34:	240000a8 	.word	0x240000a8

0800ac38 <sbrk_aligned>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ac78 <sbrk_aligned+0x40>)
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	6831      	ldr	r1, [r6, #0]
 800ac40:	4605      	mov	r5, r0
 800ac42:	b911      	cbnz	r1, 800ac4a <sbrk_aligned+0x12>
 800ac44:	f000 fafc 	bl	800b240 <_sbrk_r>
 800ac48:	6030      	str	r0, [r6, #0]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 faf7 	bl	800b240 <_sbrk_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d103      	bne.n	800ac5e <sbrk_aligned+0x26>
 800ac56:	f04f 34ff 	mov.w	r4, #4294967295
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}
 800ac5e:	1cc4      	adds	r4, r0, #3
 800ac60:	f024 0403 	bic.w	r4, r4, #3
 800ac64:	42a0      	cmp	r0, r4
 800ac66:	d0f8      	beq.n	800ac5a <sbrk_aligned+0x22>
 800ac68:	1a21      	subs	r1, r4, r0
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f000 fae8 	bl	800b240 <_sbrk_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	d1f2      	bne.n	800ac5a <sbrk_aligned+0x22>
 800ac74:	e7ef      	b.n	800ac56 <sbrk_aligned+0x1e>
 800ac76:	bf00      	nop
 800ac78:	24000750 	.word	0x24000750

0800ac7c <_malloc_r>:
 800ac7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac80:	1ccd      	adds	r5, r1, #3
 800ac82:	f025 0503 	bic.w	r5, r5, #3
 800ac86:	3508      	adds	r5, #8
 800ac88:	2d0c      	cmp	r5, #12
 800ac8a:	bf38      	it	cc
 800ac8c:	250c      	movcc	r5, #12
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	4606      	mov	r6, r0
 800ac92:	db01      	blt.n	800ac98 <_malloc_r+0x1c>
 800ac94:	42a9      	cmp	r1, r5
 800ac96:	d904      	bls.n	800aca2 <_malloc_r+0x26>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	6033      	str	r3, [r6, #0]
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad78 <_malloc_r+0xfc>
 800aca6:	f000 f869 	bl	800ad7c <__malloc_lock>
 800acaa:	f8d8 3000 	ldr.w	r3, [r8]
 800acae:	461c      	mov	r4, r3
 800acb0:	bb44      	cbnz	r4, 800ad04 <_malloc_r+0x88>
 800acb2:	4629      	mov	r1, r5
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff ffbf 	bl	800ac38 <sbrk_aligned>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	4604      	mov	r4, r0
 800acbe:	d158      	bne.n	800ad72 <_malloc_r+0xf6>
 800acc0:	f8d8 4000 	ldr.w	r4, [r8]
 800acc4:	4627      	mov	r7, r4
 800acc6:	2f00      	cmp	r7, #0
 800acc8:	d143      	bne.n	800ad52 <_malloc_r+0xd6>
 800acca:	2c00      	cmp	r4, #0
 800accc:	d04b      	beq.n	800ad66 <_malloc_r+0xea>
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	4639      	mov	r1, r7
 800acd2:	4630      	mov	r0, r6
 800acd4:	eb04 0903 	add.w	r9, r4, r3
 800acd8:	f000 fab2 	bl	800b240 <_sbrk_r>
 800acdc:	4581      	cmp	r9, r0
 800acde:	d142      	bne.n	800ad66 <_malloc_r+0xea>
 800ace0:	6821      	ldr	r1, [r4, #0]
 800ace2:	1a6d      	subs	r5, r5, r1
 800ace4:	4629      	mov	r1, r5
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ffa6 	bl	800ac38 <sbrk_aligned>
 800acec:	3001      	adds	r0, #1
 800acee:	d03a      	beq.n	800ad66 <_malloc_r+0xea>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	442b      	add	r3, r5
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	f8d8 3000 	ldr.w	r3, [r8]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	bb62      	cbnz	r2, 800ad58 <_malloc_r+0xdc>
 800acfe:	f8c8 7000 	str.w	r7, [r8]
 800ad02:	e00f      	b.n	800ad24 <_malloc_r+0xa8>
 800ad04:	6822      	ldr	r2, [r4, #0]
 800ad06:	1b52      	subs	r2, r2, r5
 800ad08:	d420      	bmi.n	800ad4c <_malloc_r+0xd0>
 800ad0a:	2a0b      	cmp	r2, #11
 800ad0c:	d917      	bls.n	800ad3e <_malloc_r+0xc2>
 800ad0e:	1961      	adds	r1, r4, r5
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	6025      	str	r5, [r4, #0]
 800ad14:	bf18      	it	ne
 800ad16:	6059      	strne	r1, [r3, #4]
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	bf08      	it	eq
 800ad1c:	f8c8 1000 	streq.w	r1, [r8]
 800ad20:	5162      	str	r2, [r4, r5]
 800ad22:	604b      	str	r3, [r1, #4]
 800ad24:	4630      	mov	r0, r6
 800ad26:	f000 f82f 	bl	800ad88 <__malloc_unlock>
 800ad2a:	f104 000b 	add.w	r0, r4, #11
 800ad2e:	1d23      	adds	r3, r4, #4
 800ad30:	f020 0007 	bic.w	r0, r0, #7
 800ad34:	1ac2      	subs	r2, r0, r3
 800ad36:	bf1c      	itt	ne
 800ad38:	1a1b      	subne	r3, r3, r0
 800ad3a:	50a3      	strne	r3, [r4, r2]
 800ad3c:	e7af      	b.n	800ac9e <_malloc_r+0x22>
 800ad3e:	6862      	ldr	r2, [r4, #4]
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	bf0c      	ite	eq
 800ad44:	f8c8 2000 	streq.w	r2, [r8]
 800ad48:	605a      	strne	r2, [r3, #4]
 800ad4a:	e7eb      	b.n	800ad24 <_malloc_r+0xa8>
 800ad4c:	4623      	mov	r3, r4
 800ad4e:	6864      	ldr	r4, [r4, #4]
 800ad50:	e7ae      	b.n	800acb0 <_malloc_r+0x34>
 800ad52:	463c      	mov	r4, r7
 800ad54:	687f      	ldr	r7, [r7, #4]
 800ad56:	e7b6      	b.n	800acc6 <_malloc_r+0x4a>
 800ad58:	461a      	mov	r2, r3
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d1fb      	bne.n	800ad58 <_malloc_r+0xdc>
 800ad60:	2300      	movs	r3, #0
 800ad62:	6053      	str	r3, [r2, #4]
 800ad64:	e7de      	b.n	800ad24 <_malloc_r+0xa8>
 800ad66:	230c      	movs	r3, #12
 800ad68:	6033      	str	r3, [r6, #0]
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 f80c 	bl	800ad88 <__malloc_unlock>
 800ad70:	e794      	b.n	800ac9c <_malloc_r+0x20>
 800ad72:	6005      	str	r5, [r0, #0]
 800ad74:	e7d6      	b.n	800ad24 <_malloc_r+0xa8>
 800ad76:	bf00      	nop
 800ad78:	24000754 	.word	0x24000754

0800ad7c <__malloc_lock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	@ (800ad84 <__malloc_lock+0x8>)
 800ad7e:	f000 baac 	b.w	800b2da <__retarget_lock_acquire_recursive>
 800ad82:	bf00      	nop
 800ad84:	24000898 	.word	0x24000898

0800ad88 <__malloc_unlock>:
 800ad88:	4801      	ldr	r0, [pc, #4]	@ (800ad90 <__malloc_unlock+0x8>)
 800ad8a:	f000 baa7 	b.w	800b2dc <__retarget_lock_release_recursive>
 800ad8e:	bf00      	nop
 800ad90:	24000898 	.word	0x24000898

0800ad94 <_strtol_l.constprop.0>:
 800ad94:	2b24      	cmp	r3, #36	@ 0x24
 800ad96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9a:	4686      	mov	lr, r0
 800ad9c:	4690      	mov	r8, r2
 800ad9e:	d801      	bhi.n	800ada4 <_strtol_l.constprop.0+0x10>
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d106      	bne.n	800adb2 <_strtol_l.constprop.0+0x1e>
 800ada4:	f000 fa6e 	bl	800b284 <__errno>
 800ada8:	2316      	movs	r3, #22
 800adaa:	6003      	str	r3, [r0, #0]
 800adac:	2000      	movs	r0, #0
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	4834      	ldr	r0, [pc, #208]	@ (800ae84 <_strtol_l.constprop.0+0xf0>)
 800adb4:	460d      	mov	r5, r1
 800adb6:	462a      	mov	r2, r5
 800adb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adbc:	5d06      	ldrb	r6, [r0, r4]
 800adbe:	f016 0608 	ands.w	r6, r6, #8
 800adc2:	d1f8      	bne.n	800adb6 <_strtol_l.constprop.0+0x22>
 800adc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800adc6:	d12d      	bne.n	800ae24 <_strtol_l.constprop.0+0x90>
 800adc8:	782c      	ldrb	r4, [r5, #0]
 800adca:	2601      	movs	r6, #1
 800adcc:	1c95      	adds	r5, r2, #2
 800adce:	f033 0210 	bics.w	r2, r3, #16
 800add2:	d109      	bne.n	800ade8 <_strtol_l.constprop.0+0x54>
 800add4:	2c30      	cmp	r4, #48	@ 0x30
 800add6:	d12a      	bne.n	800ae2e <_strtol_l.constprop.0+0x9a>
 800add8:	782a      	ldrb	r2, [r5, #0]
 800adda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adde:	2a58      	cmp	r2, #88	@ 0x58
 800ade0:	d125      	bne.n	800ae2e <_strtol_l.constprop.0+0x9a>
 800ade2:	786c      	ldrb	r4, [r5, #1]
 800ade4:	2310      	movs	r3, #16
 800ade6:	3502      	adds	r5, #2
 800ade8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800adec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800adf0:	2200      	movs	r2, #0
 800adf2:	fbbc f9f3 	udiv	r9, ip, r3
 800adf6:	4610      	mov	r0, r2
 800adf8:	fb03 ca19 	mls	sl, r3, r9, ip
 800adfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae00:	2f09      	cmp	r7, #9
 800ae02:	d81b      	bhi.n	800ae3c <_strtol_l.constprop.0+0xa8>
 800ae04:	463c      	mov	r4, r7
 800ae06:	42a3      	cmp	r3, r4
 800ae08:	dd27      	ble.n	800ae5a <_strtol_l.constprop.0+0xc6>
 800ae0a:	1c57      	adds	r7, r2, #1
 800ae0c:	d007      	beq.n	800ae1e <_strtol_l.constprop.0+0x8a>
 800ae0e:	4581      	cmp	r9, r0
 800ae10:	d320      	bcc.n	800ae54 <_strtol_l.constprop.0+0xc0>
 800ae12:	d101      	bne.n	800ae18 <_strtol_l.constprop.0+0x84>
 800ae14:	45a2      	cmp	sl, r4
 800ae16:	db1d      	blt.n	800ae54 <_strtol_l.constprop.0+0xc0>
 800ae18:	fb00 4003 	mla	r0, r0, r3, r4
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae22:	e7eb      	b.n	800adfc <_strtol_l.constprop.0+0x68>
 800ae24:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae26:	bf04      	itt	eq
 800ae28:	782c      	ldrbeq	r4, [r5, #0]
 800ae2a:	1c95      	addeq	r5, r2, #2
 800ae2c:	e7cf      	b.n	800adce <_strtol_l.constprop.0+0x3a>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1da      	bne.n	800ade8 <_strtol_l.constprop.0+0x54>
 800ae32:	2c30      	cmp	r4, #48	@ 0x30
 800ae34:	bf0c      	ite	eq
 800ae36:	2308      	moveq	r3, #8
 800ae38:	230a      	movne	r3, #10
 800ae3a:	e7d5      	b.n	800ade8 <_strtol_l.constprop.0+0x54>
 800ae3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae40:	2f19      	cmp	r7, #25
 800ae42:	d801      	bhi.n	800ae48 <_strtol_l.constprop.0+0xb4>
 800ae44:	3c37      	subs	r4, #55	@ 0x37
 800ae46:	e7de      	b.n	800ae06 <_strtol_l.constprop.0+0x72>
 800ae48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae4c:	2f19      	cmp	r7, #25
 800ae4e:	d804      	bhi.n	800ae5a <_strtol_l.constprop.0+0xc6>
 800ae50:	3c57      	subs	r4, #87	@ 0x57
 800ae52:	e7d8      	b.n	800ae06 <_strtol_l.constprop.0+0x72>
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295
 800ae58:	e7e1      	b.n	800ae1e <_strtol_l.constprop.0+0x8a>
 800ae5a:	1c53      	adds	r3, r2, #1
 800ae5c:	d108      	bne.n	800ae70 <_strtol_l.constprop.0+0xdc>
 800ae5e:	2322      	movs	r3, #34	@ 0x22
 800ae60:	f8ce 3000 	str.w	r3, [lr]
 800ae64:	4660      	mov	r0, ip
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	d0a0      	beq.n	800adae <_strtol_l.constprop.0+0x1a>
 800ae6c:	1e69      	subs	r1, r5, #1
 800ae6e:	e006      	b.n	800ae7e <_strtol_l.constprop.0+0xea>
 800ae70:	b106      	cbz	r6, 800ae74 <_strtol_l.constprop.0+0xe0>
 800ae72:	4240      	negs	r0, r0
 800ae74:	f1b8 0f00 	cmp.w	r8, #0
 800ae78:	d099      	beq.n	800adae <_strtol_l.constprop.0+0x1a>
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	d1f6      	bne.n	800ae6c <_strtol_l.constprop.0+0xd8>
 800ae7e:	f8c8 1000 	str.w	r1, [r8]
 800ae82:	e794      	b.n	800adae <_strtol_l.constprop.0+0x1a>
 800ae84:	0800c2e9 	.word	0x0800c2e9

0800ae88 <strtol>:
 800ae88:	4613      	mov	r3, r2
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4802      	ldr	r0, [pc, #8]	@ (800ae98 <strtol+0x10>)
 800ae90:	6800      	ldr	r0, [r0, #0]
 800ae92:	f7ff bf7f 	b.w	800ad94 <_strtol_l.constprop.0>
 800ae96:	bf00      	nop
 800ae98:	240000a8 	.word	0x240000a8

0800ae9c <std>:
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	b510      	push	{r4, lr}
 800aea0:	4604      	mov	r4, r0
 800aea2:	e9c0 3300 	strd	r3, r3, [r0]
 800aea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeaa:	6083      	str	r3, [r0, #8]
 800aeac:	8181      	strh	r1, [r0, #12]
 800aeae:	6643      	str	r3, [r0, #100]	@ 0x64
 800aeb0:	81c2      	strh	r2, [r0, #14]
 800aeb2:	6183      	str	r3, [r0, #24]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	2208      	movs	r2, #8
 800aeb8:	305c      	adds	r0, #92	@ 0x5c
 800aeba:	f000 f928 	bl	800b10e <memset>
 800aebe:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <std+0x58>)
 800aec0:	6263      	str	r3, [r4, #36]	@ 0x24
 800aec2:	4b0d      	ldr	r3, [pc, #52]	@ (800aef8 <std+0x5c>)
 800aec4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aec6:	4b0d      	ldr	r3, [pc, #52]	@ (800aefc <std+0x60>)
 800aec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <std+0x64>)
 800aecc:	6323      	str	r3, [r4, #48]	@ 0x30
 800aece:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <std+0x68>)
 800aed0:	6224      	str	r4, [r4, #32]
 800aed2:	429c      	cmp	r4, r3
 800aed4:	d006      	beq.n	800aee4 <std+0x48>
 800aed6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aeda:	4294      	cmp	r4, r2
 800aedc:	d002      	beq.n	800aee4 <std+0x48>
 800aede:	33d0      	adds	r3, #208	@ 0xd0
 800aee0:	429c      	cmp	r4, r3
 800aee2:	d105      	bne.n	800aef0 <std+0x54>
 800aee4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeec:	f000 b9f4 	b.w	800b2d8 <__retarget_lock_init_recursive>
 800aef0:	bd10      	pop	{r4, pc}
 800aef2:	bf00      	nop
 800aef4:	0800b089 	.word	0x0800b089
 800aef8:	0800b0ab 	.word	0x0800b0ab
 800aefc:	0800b0e3 	.word	0x0800b0e3
 800af00:	0800b107 	.word	0x0800b107
 800af04:	24000758 	.word	0x24000758

0800af08 <stdio_exit_handler>:
 800af08:	4a02      	ldr	r2, [pc, #8]	@ (800af14 <stdio_exit_handler+0xc>)
 800af0a:	4903      	ldr	r1, [pc, #12]	@ (800af18 <stdio_exit_handler+0x10>)
 800af0c:	4803      	ldr	r0, [pc, #12]	@ (800af1c <stdio_exit_handler+0x14>)
 800af0e:	f000 b869 	b.w	800afe4 <_fwalk_sglue>
 800af12:	bf00      	nop
 800af14:	2400009c 	.word	0x2400009c
 800af18:	0800baa1 	.word	0x0800baa1
 800af1c:	240000ac 	.word	0x240000ac

0800af20 <cleanup_stdio>:
 800af20:	6841      	ldr	r1, [r0, #4]
 800af22:	4b0c      	ldr	r3, [pc, #48]	@ (800af54 <cleanup_stdio+0x34>)
 800af24:	4299      	cmp	r1, r3
 800af26:	b510      	push	{r4, lr}
 800af28:	4604      	mov	r4, r0
 800af2a:	d001      	beq.n	800af30 <cleanup_stdio+0x10>
 800af2c:	f000 fdb8 	bl	800baa0 <_fflush_r>
 800af30:	68a1      	ldr	r1, [r4, #8]
 800af32:	4b09      	ldr	r3, [pc, #36]	@ (800af58 <cleanup_stdio+0x38>)
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <cleanup_stdio+0x1e>
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 fdb1 	bl	800baa0 <_fflush_r>
 800af3e:	68e1      	ldr	r1, [r4, #12]
 800af40:	4b06      	ldr	r3, [pc, #24]	@ (800af5c <cleanup_stdio+0x3c>)
 800af42:	4299      	cmp	r1, r3
 800af44:	d004      	beq.n	800af50 <cleanup_stdio+0x30>
 800af46:	4620      	mov	r0, r4
 800af48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af4c:	f000 bda8 	b.w	800baa0 <_fflush_r>
 800af50:	bd10      	pop	{r4, pc}
 800af52:	bf00      	nop
 800af54:	24000758 	.word	0x24000758
 800af58:	240007c0 	.word	0x240007c0
 800af5c:	24000828 	.word	0x24000828

0800af60 <global_stdio_init.part.0>:
 800af60:	b510      	push	{r4, lr}
 800af62:	4b0b      	ldr	r3, [pc, #44]	@ (800af90 <global_stdio_init.part.0+0x30>)
 800af64:	4c0b      	ldr	r4, [pc, #44]	@ (800af94 <global_stdio_init.part.0+0x34>)
 800af66:	4a0c      	ldr	r2, [pc, #48]	@ (800af98 <global_stdio_init.part.0+0x38>)
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	4620      	mov	r0, r4
 800af6c:	2200      	movs	r2, #0
 800af6e:	2104      	movs	r1, #4
 800af70:	f7ff ff94 	bl	800ae9c <std>
 800af74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af78:	2201      	movs	r2, #1
 800af7a:	2109      	movs	r1, #9
 800af7c:	f7ff ff8e 	bl	800ae9c <std>
 800af80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af84:	2202      	movs	r2, #2
 800af86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af8a:	2112      	movs	r1, #18
 800af8c:	f7ff bf86 	b.w	800ae9c <std>
 800af90:	24000890 	.word	0x24000890
 800af94:	24000758 	.word	0x24000758
 800af98:	0800af09 	.word	0x0800af09

0800af9c <__sfp_lock_acquire>:
 800af9c:	4801      	ldr	r0, [pc, #4]	@ (800afa4 <__sfp_lock_acquire+0x8>)
 800af9e:	f000 b99c 	b.w	800b2da <__retarget_lock_acquire_recursive>
 800afa2:	bf00      	nop
 800afa4:	24000899 	.word	0x24000899

0800afa8 <__sfp_lock_release>:
 800afa8:	4801      	ldr	r0, [pc, #4]	@ (800afb0 <__sfp_lock_release+0x8>)
 800afaa:	f000 b997 	b.w	800b2dc <__retarget_lock_release_recursive>
 800afae:	bf00      	nop
 800afb0:	24000899 	.word	0x24000899

0800afb4 <__sinit>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4604      	mov	r4, r0
 800afb8:	f7ff fff0 	bl	800af9c <__sfp_lock_acquire>
 800afbc:	6a23      	ldr	r3, [r4, #32]
 800afbe:	b11b      	cbz	r3, 800afc8 <__sinit+0x14>
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f7ff bff0 	b.w	800afa8 <__sfp_lock_release>
 800afc8:	4b04      	ldr	r3, [pc, #16]	@ (800afdc <__sinit+0x28>)
 800afca:	6223      	str	r3, [r4, #32]
 800afcc:	4b04      	ldr	r3, [pc, #16]	@ (800afe0 <__sinit+0x2c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1f5      	bne.n	800afc0 <__sinit+0xc>
 800afd4:	f7ff ffc4 	bl	800af60 <global_stdio_init.part.0>
 800afd8:	e7f2      	b.n	800afc0 <__sinit+0xc>
 800afda:	bf00      	nop
 800afdc:	0800af21 	.word	0x0800af21
 800afe0:	24000890 	.word	0x24000890

0800afe4 <_fwalk_sglue>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	4607      	mov	r7, r0
 800afea:	4688      	mov	r8, r1
 800afec:	4614      	mov	r4, r2
 800afee:	2600      	movs	r6, #0
 800aff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aff4:	f1b9 0901 	subs.w	r9, r9, #1
 800aff8:	d505      	bpl.n	800b006 <_fwalk_sglue+0x22>
 800affa:	6824      	ldr	r4, [r4, #0]
 800affc:	2c00      	cmp	r4, #0
 800affe:	d1f7      	bne.n	800aff0 <_fwalk_sglue+0xc>
 800b000:	4630      	mov	r0, r6
 800b002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b006:	89ab      	ldrh	r3, [r5, #12]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d907      	bls.n	800b01c <_fwalk_sglue+0x38>
 800b00c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b010:	3301      	adds	r3, #1
 800b012:	d003      	beq.n	800b01c <_fwalk_sglue+0x38>
 800b014:	4629      	mov	r1, r5
 800b016:	4638      	mov	r0, r7
 800b018:	47c0      	blx	r8
 800b01a:	4306      	orrs	r6, r0
 800b01c:	3568      	adds	r5, #104	@ 0x68
 800b01e:	e7e9      	b.n	800aff4 <_fwalk_sglue+0x10>

0800b020 <sniprintf>:
 800b020:	b40c      	push	{r2, r3}
 800b022:	b530      	push	{r4, r5, lr}
 800b024:	4b17      	ldr	r3, [pc, #92]	@ (800b084 <sniprintf+0x64>)
 800b026:	1e0c      	subs	r4, r1, #0
 800b028:	681d      	ldr	r5, [r3, #0]
 800b02a:	b09d      	sub	sp, #116	@ 0x74
 800b02c:	da08      	bge.n	800b040 <sniprintf+0x20>
 800b02e:	238b      	movs	r3, #139	@ 0x8b
 800b030:	602b      	str	r3, [r5, #0]
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	b01d      	add	sp, #116	@ 0x74
 800b038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b03c:	b002      	add	sp, #8
 800b03e:	4770      	bx	lr
 800b040:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b044:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b048:	bf14      	ite	ne
 800b04a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b04e:	4623      	moveq	r3, r4
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	9307      	str	r3, [sp, #28]
 800b054:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b058:	9002      	str	r0, [sp, #8]
 800b05a:	9006      	str	r0, [sp, #24]
 800b05c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b060:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b062:	ab21      	add	r3, sp, #132	@ 0x84
 800b064:	a902      	add	r1, sp, #8
 800b066:	4628      	mov	r0, r5
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	f000 fa0b 	bl	800b484 <_svfiprintf_r>
 800b06e:	1c43      	adds	r3, r0, #1
 800b070:	bfbc      	itt	lt
 800b072:	238b      	movlt	r3, #139	@ 0x8b
 800b074:	602b      	strlt	r3, [r5, #0]
 800b076:	2c00      	cmp	r4, #0
 800b078:	d0dd      	beq.n	800b036 <sniprintf+0x16>
 800b07a:	9b02      	ldr	r3, [sp, #8]
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	e7d9      	b.n	800b036 <sniprintf+0x16>
 800b082:	bf00      	nop
 800b084:	240000a8 	.word	0x240000a8

0800b088 <__sread>:
 800b088:	b510      	push	{r4, lr}
 800b08a:	460c      	mov	r4, r1
 800b08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b090:	f000 f8c4 	bl	800b21c <_read_r>
 800b094:	2800      	cmp	r0, #0
 800b096:	bfab      	itete	ge
 800b098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b09a:	89a3      	ldrhlt	r3, [r4, #12]
 800b09c:	181b      	addge	r3, r3, r0
 800b09e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0a2:	bfac      	ite	ge
 800b0a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0a6:	81a3      	strhlt	r3, [r4, #12]
 800b0a8:	bd10      	pop	{r4, pc}

0800b0aa <__swrite>:
 800b0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	461f      	mov	r7, r3
 800b0b0:	898b      	ldrh	r3, [r1, #12]
 800b0b2:	05db      	lsls	r3, r3, #23
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	d505      	bpl.n	800b0c8 <__swrite+0x1e>
 800b0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f000 f898 	bl	800b1f8 <_lseek_r>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0d2:	81a3      	strh	r3, [r4, #12]
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	4628      	mov	r0, r5
 800b0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0de:	f000 b8bf 	b.w	800b260 <_write_r>

0800b0e2 <__sseek>:
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ea:	f000 f885 	bl	800b1f8 <_lseek_r>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	bf15      	itete	ne
 800b0f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0fe:	81a3      	strheq	r3, [r4, #12]
 800b100:	bf18      	it	ne
 800b102:	81a3      	strhne	r3, [r4, #12]
 800b104:	bd10      	pop	{r4, pc}

0800b106 <__sclose>:
 800b106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10a:	f000 b865 	b.w	800b1d8 <_close_r>

0800b10e <memset>:
 800b10e:	4402      	add	r2, r0
 800b110:	4603      	mov	r3, r0
 800b112:	4293      	cmp	r3, r2
 800b114:	d100      	bne.n	800b118 <memset+0xa>
 800b116:	4770      	bx	lr
 800b118:	f803 1b01 	strb.w	r1, [r3], #1
 800b11c:	e7f9      	b.n	800b112 <memset+0x4>
	...

0800b120 <strtok>:
 800b120:	4b16      	ldr	r3, [pc, #88]	@ (800b17c <strtok+0x5c>)
 800b122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b126:	681f      	ldr	r7, [r3, #0]
 800b128:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b12a:	4605      	mov	r5, r0
 800b12c:	460e      	mov	r6, r1
 800b12e:	b9ec      	cbnz	r4, 800b16c <strtok+0x4c>
 800b130:	2050      	movs	r0, #80	@ 0x50
 800b132:	f7ff fd79 	bl	800ac28 <malloc>
 800b136:	4602      	mov	r2, r0
 800b138:	6478      	str	r0, [r7, #68]	@ 0x44
 800b13a:	b920      	cbnz	r0, 800b146 <strtok+0x26>
 800b13c:	4b10      	ldr	r3, [pc, #64]	@ (800b180 <strtok+0x60>)
 800b13e:	4811      	ldr	r0, [pc, #68]	@ (800b184 <strtok+0x64>)
 800b140:	215b      	movs	r1, #91	@ 0x5b
 800b142:	f000 f8db 	bl	800b2fc <__assert_func>
 800b146:	e9c0 4400 	strd	r4, r4, [r0]
 800b14a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b14e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b152:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b156:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b15a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b15e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b162:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b166:	6184      	str	r4, [r0, #24]
 800b168:	7704      	strb	r4, [r0, #28]
 800b16a:	6244      	str	r4, [r0, #36]	@ 0x24
 800b16c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b16e:	4631      	mov	r1, r6
 800b170:	4628      	mov	r0, r5
 800b172:	2301      	movs	r3, #1
 800b174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	f000 b806 	b.w	800b188 <__strtok_r>
 800b17c:	240000a8 	.word	0x240000a8
 800b180:	0800c3e9 	.word	0x0800c3e9
 800b184:	0800c400 	.word	0x0800c400

0800b188 <__strtok_r>:
 800b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	b908      	cbnz	r0, 800b192 <__strtok_r+0xa>
 800b18e:	6814      	ldr	r4, [r2, #0]
 800b190:	b144      	cbz	r4, 800b1a4 <__strtok_r+0x1c>
 800b192:	4620      	mov	r0, r4
 800b194:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b198:	460f      	mov	r7, r1
 800b19a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b19e:	b91e      	cbnz	r6, 800b1a8 <__strtok_r+0x20>
 800b1a0:	b965      	cbnz	r5, 800b1bc <__strtok_r+0x34>
 800b1a2:	6015      	str	r5, [r2, #0]
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e005      	b.n	800b1b4 <__strtok_r+0x2c>
 800b1a8:	42b5      	cmp	r5, r6
 800b1aa:	d1f6      	bne.n	800b19a <__strtok_r+0x12>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1f0      	bne.n	800b192 <__strtok_r+0xa>
 800b1b0:	6014      	str	r4, [r2, #0]
 800b1b2:	7003      	strb	r3, [r0, #0]
 800b1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b6:	461c      	mov	r4, r3
 800b1b8:	e00c      	b.n	800b1d4 <__strtok_r+0x4c>
 800b1ba:	b915      	cbnz	r5, 800b1c2 <__strtok_r+0x3a>
 800b1bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b1c6:	42ab      	cmp	r3, r5
 800b1c8:	d1f7      	bne.n	800b1ba <__strtok_r+0x32>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d0f3      	beq.n	800b1b6 <__strtok_r+0x2e>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b1d4:	6014      	str	r4, [r2, #0]
 800b1d6:	e7ed      	b.n	800b1b4 <__strtok_r+0x2c>

0800b1d8 <_close_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	@ (800b1f4 <_close_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7f6 f88a 	bl	80012fc <_close>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_close_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_close_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	24000894 	.word	0x24000894

0800b1f8 <_lseek_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d07      	ldr	r5, [pc, #28]	@ (800b218 <_lseek_r+0x20>)
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	4608      	mov	r0, r1
 800b200:	4611      	mov	r1, r2
 800b202:	2200      	movs	r2, #0
 800b204:	602a      	str	r2, [r5, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	f7f6 f89f 	bl	800134a <_lseek>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_lseek_r+0x1e>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_lseek_r+0x1e>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	24000894 	.word	0x24000894

0800b21c <_read_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	@ (800b23c <_read_r+0x20>)
 800b220:	4604      	mov	r4, r0
 800b222:	4608      	mov	r0, r1
 800b224:	4611      	mov	r1, r2
 800b226:	2200      	movs	r2, #0
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	f7f6 f82d 	bl	800128a <_read>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_read_r+0x1e>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_read_r+0x1e>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	24000894 	.word	0x24000894

0800b240 <_sbrk_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d06      	ldr	r5, [pc, #24]	@ (800b25c <_sbrk_r+0x1c>)
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f7f6 f88a 	bl	8001364 <_sbrk>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_sbrk_r+0x1a>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_sbrk_r+0x1a>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	24000894 	.word	0x24000894

0800b260 <_write_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d07      	ldr	r5, [pc, #28]	@ (800b280 <_write_r+0x20>)
 800b264:	4604      	mov	r4, r0
 800b266:	4608      	mov	r0, r1
 800b268:	4611      	mov	r1, r2
 800b26a:	2200      	movs	r2, #0
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f7f6 f828 	bl	80012c4 <_write>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_write_r+0x1e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_write_r+0x1e>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	24000894 	.word	0x24000894

0800b284 <__errno>:
 800b284:	4b01      	ldr	r3, [pc, #4]	@ (800b28c <__errno+0x8>)
 800b286:	6818      	ldr	r0, [r3, #0]
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	240000a8 	.word	0x240000a8

0800b290 <__libc_init_array>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	4d0d      	ldr	r5, [pc, #52]	@ (800b2c8 <__libc_init_array+0x38>)
 800b294:	4c0d      	ldr	r4, [pc, #52]	@ (800b2cc <__libc_init_array+0x3c>)
 800b296:	1b64      	subs	r4, r4, r5
 800b298:	10a4      	asrs	r4, r4, #2
 800b29a:	2600      	movs	r6, #0
 800b29c:	42a6      	cmp	r6, r4
 800b29e:	d109      	bne.n	800b2b4 <__libc_init_array+0x24>
 800b2a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b2d0 <__libc_init_array+0x40>)
 800b2a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b2d4 <__libc_init_array+0x44>)
 800b2a4:	f000 ff2a 	bl	800c0fc <_init>
 800b2a8:	1b64      	subs	r4, r4, r5
 800b2aa:	10a4      	asrs	r4, r4, #2
 800b2ac:	2600      	movs	r6, #0
 800b2ae:	42a6      	cmp	r6, r4
 800b2b0:	d105      	bne.n	800b2be <__libc_init_array+0x2e>
 800b2b2:	bd70      	pop	{r4, r5, r6, pc}
 800b2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b8:	4798      	blx	r3
 800b2ba:	3601      	adds	r6, #1
 800b2bc:	e7ee      	b.n	800b29c <__libc_init_array+0xc>
 800b2be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2c2:	4798      	blx	r3
 800b2c4:	3601      	adds	r6, #1
 800b2c6:	e7f2      	b.n	800b2ae <__libc_init_array+0x1e>
 800b2c8:	0800c4d4 	.word	0x0800c4d4
 800b2cc:	0800c4d4 	.word	0x0800c4d4
 800b2d0:	0800c4d4 	.word	0x0800c4d4
 800b2d4:	0800c4d8 	.word	0x0800c4d8

0800b2d8 <__retarget_lock_init_recursive>:
 800b2d8:	4770      	bx	lr

0800b2da <__retarget_lock_acquire_recursive>:
 800b2da:	4770      	bx	lr

0800b2dc <__retarget_lock_release_recursive>:
 800b2dc:	4770      	bx	lr

0800b2de <memcpy>:
 800b2de:	440a      	add	r2, r1
 800b2e0:	4291      	cmp	r1, r2
 800b2e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e6:	d100      	bne.n	800b2ea <memcpy+0xc>
 800b2e8:	4770      	bx	lr
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2f4:	4291      	cmp	r1, r2
 800b2f6:	d1f9      	bne.n	800b2ec <memcpy+0xe>
 800b2f8:	bd10      	pop	{r4, pc}
	...

0800b2fc <__assert_func>:
 800b2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2fe:	4614      	mov	r4, r2
 800b300:	461a      	mov	r2, r3
 800b302:	4b09      	ldr	r3, [pc, #36]	@ (800b328 <__assert_func+0x2c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4605      	mov	r5, r0
 800b308:	68d8      	ldr	r0, [r3, #12]
 800b30a:	b954      	cbnz	r4, 800b322 <__assert_func+0x26>
 800b30c:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <__assert_func+0x30>)
 800b30e:	461c      	mov	r4, r3
 800b310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b314:	9100      	str	r1, [sp, #0]
 800b316:	462b      	mov	r3, r5
 800b318:	4905      	ldr	r1, [pc, #20]	@ (800b330 <__assert_func+0x34>)
 800b31a:	f000 fbe9 	bl	800baf0 <fiprintf>
 800b31e:	f000 fc13 	bl	800bb48 <abort>
 800b322:	4b04      	ldr	r3, [pc, #16]	@ (800b334 <__assert_func+0x38>)
 800b324:	e7f4      	b.n	800b310 <__assert_func+0x14>
 800b326:	bf00      	nop
 800b328:	240000a8 	.word	0x240000a8
 800b32c:	0800c495 	.word	0x0800c495
 800b330:	0800c467 	.word	0x0800c467
 800b334:	0800c45a 	.word	0x0800c45a

0800b338 <_free_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4605      	mov	r5, r0
 800b33c:	2900      	cmp	r1, #0
 800b33e:	d041      	beq.n	800b3c4 <_free_r+0x8c>
 800b340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b344:	1f0c      	subs	r4, r1, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfb8      	it	lt
 800b34a:	18e4      	addlt	r4, r4, r3
 800b34c:	f7ff fd16 	bl	800ad7c <__malloc_lock>
 800b350:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c8 <_free_r+0x90>)
 800b352:	6813      	ldr	r3, [r2, #0]
 800b354:	b933      	cbnz	r3, 800b364 <_free_r+0x2c>
 800b356:	6063      	str	r3, [r4, #4]
 800b358:	6014      	str	r4, [r2, #0]
 800b35a:	4628      	mov	r0, r5
 800b35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b360:	f7ff bd12 	b.w	800ad88 <__malloc_unlock>
 800b364:	42a3      	cmp	r3, r4
 800b366:	d908      	bls.n	800b37a <_free_r+0x42>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	1821      	adds	r1, r4, r0
 800b36c:	428b      	cmp	r3, r1
 800b36e:	bf01      	itttt	eq
 800b370:	6819      	ldreq	r1, [r3, #0]
 800b372:	685b      	ldreq	r3, [r3, #4]
 800b374:	1809      	addeq	r1, r1, r0
 800b376:	6021      	streq	r1, [r4, #0]
 800b378:	e7ed      	b.n	800b356 <_free_r+0x1e>
 800b37a:	461a      	mov	r2, r3
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	b10b      	cbz	r3, 800b384 <_free_r+0x4c>
 800b380:	42a3      	cmp	r3, r4
 800b382:	d9fa      	bls.n	800b37a <_free_r+0x42>
 800b384:	6811      	ldr	r1, [r2, #0]
 800b386:	1850      	adds	r0, r2, r1
 800b388:	42a0      	cmp	r0, r4
 800b38a:	d10b      	bne.n	800b3a4 <_free_r+0x6c>
 800b38c:	6820      	ldr	r0, [r4, #0]
 800b38e:	4401      	add	r1, r0
 800b390:	1850      	adds	r0, r2, r1
 800b392:	4283      	cmp	r3, r0
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	d1e0      	bne.n	800b35a <_free_r+0x22>
 800b398:	6818      	ldr	r0, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	6053      	str	r3, [r2, #4]
 800b39e:	4408      	add	r0, r1
 800b3a0:	6010      	str	r0, [r2, #0]
 800b3a2:	e7da      	b.n	800b35a <_free_r+0x22>
 800b3a4:	d902      	bls.n	800b3ac <_free_r+0x74>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	e7d6      	b.n	800b35a <_free_r+0x22>
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	1821      	adds	r1, r4, r0
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	bf04      	itt	eq
 800b3b4:	6819      	ldreq	r1, [r3, #0]
 800b3b6:	685b      	ldreq	r3, [r3, #4]
 800b3b8:	6063      	str	r3, [r4, #4]
 800b3ba:	bf04      	itt	eq
 800b3bc:	1809      	addeq	r1, r1, r0
 800b3be:	6021      	streq	r1, [r4, #0]
 800b3c0:	6054      	str	r4, [r2, #4]
 800b3c2:	e7ca      	b.n	800b35a <_free_r+0x22>
 800b3c4:	bd38      	pop	{r3, r4, r5, pc}
 800b3c6:	bf00      	nop
 800b3c8:	24000754 	.word	0x24000754

0800b3cc <__ssputs_r>:
 800b3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d0:	688e      	ldr	r6, [r1, #8]
 800b3d2:	461f      	mov	r7, r3
 800b3d4:	42be      	cmp	r6, r7
 800b3d6:	680b      	ldr	r3, [r1, #0]
 800b3d8:	4682      	mov	sl, r0
 800b3da:	460c      	mov	r4, r1
 800b3dc:	4690      	mov	r8, r2
 800b3de:	d82d      	bhi.n	800b43c <__ssputs_r+0x70>
 800b3e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3e8:	d026      	beq.n	800b438 <__ssputs_r+0x6c>
 800b3ea:	6965      	ldr	r5, [r4, #20]
 800b3ec:	6909      	ldr	r1, [r1, #16]
 800b3ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3f2:	eba3 0901 	sub.w	r9, r3, r1
 800b3f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3fa:	1c7b      	adds	r3, r7, #1
 800b3fc:	444b      	add	r3, r9
 800b3fe:	106d      	asrs	r5, r5, #1
 800b400:	429d      	cmp	r5, r3
 800b402:	bf38      	it	cc
 800b404:	461d      	movcc	r5, r3
 800b406:	0553      	lsls	r3, r2, #21
 800b408:	d527      	bpl.n	800b45a <__ssputs_r+0x8e>
 800b40a:	4629      	mov	r1, r5
 800b40c:	f7ff fc36 	bl	800ac7c <_malloc_r>
 800b410:	4606      	mov	r6, r0
 800b412:	b360      	cbz	r0, 800b46e <__ssputs_r+0xa2>
 800b414:	6921      	ldr	r1, [r4, #16]
 800b416:	464a      	mov	r2, r9
 800b418:	f7ff ff61 	bl	800b2de <memcpy>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	6126      	str	r6, [r4, #16]
 800b42a:	6165      	str	r5, [r4, #20]
 800b42c:	444e      	add	r6, r9
 800b42e:	eba5 0509 	sub.w	r5, r5, r9
 800b432:	6026      	str	r6, [r4, #0]
 800b434:	60a5      	str	r5, [r4, #8]
 800b436:	463e      	mov	r6, r7
 800b438:	42be      	cmp	r6, r7
 800b43a:	d900      	bls.n	800b43e <__ssputs_r+0x72>
 800b43c:	463e      	mov	r6, r7
 800b43e:	6820      	ldr	r0, [r4, #0]
 800b440:	4632      	mov	r2, r6
 800b442:	4641      	mov	r1, r8
 800b444:	f000 fb66 	bl	800bb14 <memmove>
 800b448:	68a3      	ldr	r3, [r4, #8]
 800b44a:	1b9b      	subs	r3, r3, r6
 800b44c:	60a3      	str	r3, [r4, #8]
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	4433      	add	r3, r6
 800b452:	6023      	str	r3, [r4, #0]
 800b454:	2000      	movs	r0, #0
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	462a      	mov	r2, r5
 800b45c:	f000 fb7b 	bl	800bb56 <_realloc_r>
 800b460:	4606      	mov	r6, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	d1e0      	bne.n	800b428 <__ssputs_r+0x5c>
 800b466:	6921      	ldr	r1, [r4, #16]
 800b468:	4650      	mov	r0, sl
 800b46a:	f7ff ff65 	bl	800b338 <_free_r>
 800b46e:	230c      	movs	r3, #12
 800b470:	f8ca 3000 	str.w	r3, [sl]
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b47a:	81a3      	strh	r3, [r4, #12]
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	e7e9      	b.n	800b456 <__ssputs_r+0x8a>
	...

0800b484 <_svfiprintf_r>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	4698      	mov	r8, r3
 800b48a:	898b      	ldrh	r3, [r1, #12]
 800b48c:	061b      	lsls	r3, r3, #24
 800b48e:	b09d      	sub	sp, #116	@ 0x74
 800b490:	4607      	mov	r7, r0
 800b492:	460d      	mov	r5, r1
 800b494:	4614      	mov	r4, r2
 800b496:	d510      	bpl.n	800b4ba <_svfiprintf_r+0x36>
 800b498:	690b      	ldr	r3, [r1, #16]
 800b49a:	b973      	cbnz	r3, 800b4ba <_svfiprintf_r+0x36>
 800b49c:	2140      	movs	r1, #64	@ 0x40
 800b49e:	f7ff fbed 	bl	800ac7c <_malloc_r>
 800b4a2:	6028      	str	r0, [r5, #0]
 800b4a4:	6128      	str	r0, [r5, #16]
 800b4a6:	b930      	cbnz	r0, 800b4b6 <_svfiprintf_r+0x32>
 800b4a8:	230c      	movs	r3, #12
 800b4aa:	603b      	str	r3, [r7, #0]
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	b01d      	add	sp, #116	@ 0x74
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	2340      	movs	r3, #64	@ 0x40
 800b4b8:	616b      	str	r3, [r5, #20]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4be:	2320      	movs	r3, #32
 800b4c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c8:	2330      	movs	r3, #48	@ 0x30
 800b4ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b668 <_svfiprintf_r+0x1e4>
 800b4ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4d2:	f04f 0901 	mov.w	r9, #1
 800b4d6:	4623      	mov	r3, r4
 800b4d8:	469a      	mov	sl, r3
 800b4da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4de:	b10a      	cbz	r2, 800b4e4 <_svfiprintf_r+0x60>
 800b4e0:	2a25      	cmp	r2, #37	@ 0x25
 800b4e2:	d1f9      	bne.n	800b4d8 <_svfiprintf_r+0x54>
 800b4e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4e8:	d00b      	beq.n	800b502 <_svfiprintf_r+0x7e>
 800b4ea:	465b      	mov	r3, fp
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7ff ff6b 	bl	800b3cc <__ssputs_r>
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f000 80a7 	beq.w	800b64a <_svfiprintf_r+0x1c6>
 800b4fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4fe:	445a      	add	r2, fp
 800b500:	9209      	str	r2, [sp, #36]	@ 0x24
 800b502:	f89a 3000 	ldrb.w	r3, [sl]
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 809f 	beq.w	800b64a <_svfiprintf_r+0x1c6>
 800b50c:	2300      	movs	r3, #0
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295
 800b512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b516:	f10a 0a01 	add.w	sl, sl, #1
 800b51a:	9304      	str	r3, [sp, #16]
 800b51c:	9307      	str	r3, [sp, #28]
 800b51e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b522:	931a      	str	r3, [sp, #104]	@ 0x68
 800b524:	4654      	mov	r4, sl
 800b526:	2205      	movs	r2, #5
 800b528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b52c:	484e      	ldr	r0, [pc, #312]	@ (800b668 <_svfiprintf_r+0x1e4>)
 800b52e:	f7f4 feff 	bl	8000330 <memchr>
 800b532:	9a04      	ldr	r2, [sp, #16]
 800b534:	b9d8      	cbnz	r0, 800b56e <_svfiprintf_r+0xea>
 800b536:	06d0      	lsls	r0, r2, #27
 800b538:	bf44      	itt	mi
 800b53a:	2320      	movmi	r3, #32
 800b53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b540:	0711      	lsls	r1, r2, #28
 800b542:	bf44      	itt	mi
 800b544:	232b      	movmi	r3, #43	@ 0x2b
 800b546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b54a:	f89a 3000 	ldrb.w	r3, [sl]
 800b54e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b550:	d015      	beq.n	800b57e <_svfiprintf_r+0xfa>
 800b552:	9a07      	ldr	r2, [sp, #28]
 800b554:	4654      	mov	r4, sl
 800b556:	2000      	movs	r0, #0
 800b558:	f04f 0c0a 	mov.w	ip, #10
 800b55c:	4621      	mov	r1, r4
 800b55e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b562:	3b30      	subs	r3, #48	@ 0x30
 800b564:	2b09      	cmp	r3, #9
 800b566:	d94b      	bls.n	800b600 <_svfiprintf_r+0x17c>
 800b568:	b1b0      	cbz	r0, 800b598 <_svfiprintf_r+0x114>
 800b56a:	9207      	str	r2, [sp, #28]
 800b56c:	e014      	b.n	800b598 <_svfiprintf_r+0x114>
 800b56e:	eba0 0308 	sub.w	r3, r0, r8
 800b572:	fa09 f303 	lsl.w	r3, r9, r3
 800b576:	4313      	orrs	r3, r2
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	46a2      	mov	sl, r4
 800b57c:	e7d2      	b.n	800b524 <_svfiprintf_r+0xa0>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	1d19      	adds	r1, r3, #4
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	9103      	str	r1, [sp, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfbb      	ittet	lt
 800b58a:	425b      	neglt	r3, r3
 800b58c:	f042 0202 	orrlt.w	r2, r2, #2
 800b590:	9307      	strge	r3, [sp, #28]
 800b592:	9307      	strlt	r3, [sp, #28]
 800b594:	bfb8      	it	lt
 800b596:	9204      	strlt	r2, [sp, #16]
 800b598:	7823      	ldrb	r3, [r4, #0]
 800b59a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b59c:	d10a      	bne.n	800b5b4 <_svfiprintf_r+0x130>
 800b59e:	7863      	ldrb	r3, [r4, #1]
 800b5a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5a2:	d132      	bne.n	800b60a <_svfiprintf_r+0x186>
 800b5a4:	9b03      	ldr	r3, [sp, #12]
 800b5a6:	1d1a      	adds	r2, r3, #4
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	9203      	str	r2, [sp, #12]
 800b5ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5b0:	3402      	adds	r4, #2
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b678 <_svfiprintf_r+0x1f4>
 800b5b8:	7821      	ldrb	r1, [r4, #0]
 800b5ba:	2203      	movs	r2, #3
 800b5bc:	4650      	mov	r0, sl
 800b5be:	f7f4 feb7 	bl	8000330 <memchr>
 800b5c2:	b138      	cbz	r0, 800b5d4 <_svfiprintf_r+0x150>
 800b5c4:	9b04      	ldr	r3, [sp, #16]
 800b5c6:	eba0 000a 	sub.w	r0, r0, sl
 800b5ca:	2240      	movs	r2, #64	@ 0x40
 800b5cc:	4082      	lsls	r2, r0
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	3401      	adds	r4, #1
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d8:	4824      	ldr	r0, [pc, #144]	@ (800b66c <_svfiprintf_r+0x1e8>)
 800b5da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5de:	2206      	movs	r2, #6
 800b5e0:	f7f4 fea6 	bl	8000330 <memchr>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d036      	beq.n	800b656 <_svfiprintf_r+0x1d2>
 800b5e8:	4b21      	ldr	r3, [pc, #132]	@ (800b670 <_svfiprintf_r+0x1ec>)
 800b5ea:	bb1b      	cbnz	r3, 800b634 <_svfiprintf_r+0x1b0>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	3307      	adds	r3, #7
 800b5f0:	f023 0307 	bic.w	r3, r3, #7
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	9303      	str	r3, [sp, #12]
 800b5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5fa:	4433      	add	r3, r6
 800b5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5fe:	e76a      	b.n	800b4d6 <_svfiprintf_r+0x52>
 800b600:	fb0c 3202 	mla	r2, ip, r2, r3
 800b604:	460c      	mov	r4, r1
 800b606:	2001      	movs	r0, #1
 800b608:	e7a8      	b.n	800b55c <_svfiprintf_r+0xd8>
 800b60a:	2300      	movs	r3, #0
 800b60c:	3401      	adds	r4, #1
 800b60e:	9305      	str	r3, [sp, #20]
 800b610:	4619      	mov	r1, r3
 800b612:	f04f 0c0a 	mov.w	ip, #10
 800b616:	4620      	mov	r0, r4
 800b618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b61c:	3a30      	subs	r2, #48	@ 0x30
 800b61e:	2a09      	cmp	r2, #9
 800b620:	d903      	bls.n	800b62a <_svfiprintf_r+0x1a6>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0c6      	beq.n	800b5b4 <_svfiprintf_r+0x130>
 800b626:	9105      	str	r1, [sp, #20]
 800b628:	e7c4      	b.n	800b5b4 <_svfiprintf_r+0x130>
 800b62a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b62e:	4604      	mov	r4, r0
 800b630:	2301      	movs	r3, #1
 800b632:	e7f0      	b.n	800b616 <_svfiprintf_r+0x192>
 800b634:	ab03      	add	r3, sp, #12
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	462a      	mov	r2, r5
 800b63a:	4b0e      	ldr	r3, [pc, #56]	@ (800b674 <_svfiprintf_r+0x1f0>)
 800b63c:	a904      	add	r1, sp, #16
 800b63e:	4638      	mov	r0, r7
 800b640:	f3af 8000 	nop.w
 800b644:	1c42      	adds	r2, r0, #1
 800b646:	4606      	mov	r6, r0
 800b648:	d1d6      	bne.n	800b5f8 <_svfiprintf_r+0x174>
 800b64a:	89ab      	ldrh	r3, [r5, #12]
 800b64c:	065b      	lsls	r3, r3, #25
 800b64e:	f53f af2d 	bmi.w	800b4ac <_svfiprintf_r+0x28>
 800b652:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b654:	e72c      	b.n	800b4b0 <_svfiprintf_r+0x2c>
 800b656:	ab03      	add	r3, sp, #12
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	462a      	mov	r2, r5
 800b65c:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <_svfiprintf_r+0x1f0>)
 800b65e:	a904      	add	r1, sp, #16
 800b660:	4638      	mov	r0, r7
 800b662:	f000 f879 	bl	800b758 <_printf_i>
 800b666:	e7ed      	b.n	800b644 <_svfiprintf_r+0x1c0>
 800b668:	0800c496 	.word	0x0800c496
 800b66c:	0800c4a0 	.word	0x0800c4a0
 800b670:	00000000 	.word	0x00000000
 800b674:	0800b3cd 	.word	0x0800b3cd
 800b678:	0800c49c 	.word	0x0800c49c

0800b67c <_printf_common>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	4616      	mov	r6, r2
 800b682:	4698      	mov	r8, r3
 800b684:	688a      	ldr	r2, [r1, #8]
 800b686:	690b      	ldr	r3, [r1, #16]
 800b688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	bfb8      	it	lt
 800b690:	4613      	movlt	r3, r2
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b698:	4607      	mov	r7, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	b10a      	cbz	r2, 800b6a2 <_printf_common+0x26>
 800b69e:	3301      	adds	r3, #1
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	0699      	lsls	r1, r3, #26
 800b6a6:	bf42      	ittt	mi
 800b6a8:	6833      	ldrmi	r3, [r6, #0]
 800b6aa:	3302      	addmi	r3, #2
 800b6ac:	6033      	strmi	r3, [r6, #0]
 800b6ae:	6825      	ldr	r5, [r4, #0]
 800b6b0:	f015 0506 	ands.w	r5, r5, #6
 800b6b4:	d106      	bne.n	800b6c4 <_printf_common+0x48>
 800b6b6:	f104 0a19 	add.w	sl, r4, #25
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	6832      	ldr	r2, [r6, #0]
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	42ab      	cmp	r3, r5
 800b6c2:	dc26      	bgt.n	800b712 <_printf_common+0x96>
 800b6c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6c8:	6822      	ldr	r2, [r4, #0]
 800b6ca:	3b00      	subs	r3, #0
 800b6cc:	bf18      	it	ne
 800b6ce:	2301      	movne	r3, #1
 800b6d0:	0692      	lsls	r2, r2, #26
 800b6d2:	d42b      	bmi.n	800b72c <_printf_common+0xb0>
 800b6d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6d8:	4641      	mov	r1, r8
 800b6da:	4638      	mov	r0, r7
 800b6dc:	47c8      	blx	r9
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d01e      	beq.n	800b720 <_printf_common+0xa4>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	6922      	ldr	r2, [r4, #16]
 800b6e6:	f003 0306 	and.w	r3, r3, #6
 800b6ea:	2b04      	cmp	r3, #4
 800b6ec:	bf02      	ittt	eq
 800b6ee:	68e5      	ldreq	r5, [r4, #12]
 800b6f0:	6833      	ldreq	r3, [r6, #0]
 800b6f2:	1aed      	subeq	r5, r5, r3
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	bf0c      	ite	eq
 800b6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6fc:	2500      	movne	r5, #0
 800b6fe:	4293      	cmp	r3, r2
 800b700:	bfc4      	itt	gt
 800b702:	1a9b      	subgt	r3, r3, r2
 800b704:	18ed      	addgt	r5, r5, r3
 800b706:	2600      	movs	r6, #0
 800b708:	341a      	adds	r4, #26
 800b70a:	42b5      	cmp	r5, r6
 800b70c:	d11a      	bne.n	800b744 <_printf_common+0xc8>
 800b70e:	2000      	movs	r0, #0
 800b710:	e008      	b.n	800b724 <_printf_common+0xa8>
 800b712:	2301      	movs	r3, #1
 800b714:	4652      	mov	r2, sl
 800b716:	4641      	mov	r1, r8
 800b718:	4638      	mov	r0, r7
 800b71a:	47c8      	blx	r9
 800b71c:	3001      	adds	r0, #1
 800b71e:	d103      	bne.n	800b728 <_printf_common+0xac>
 800b720:	f04f 30ff 	mov.w	r0, #4294967295
 800b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b728:	3501      	adds	r5, #1
 800b72a:	e7c6      	b.n	800b6ba <_printf_common+0x3e>
 800b72c:	18e1      	adds	r1, r4, r3
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	2030      	movs	r0, #48	@ 0x30
 800b732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b736:	4422      	add	r2, r4
 800b738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b73c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b740:	3302      	adds	r3, #2
 800b742:	e7c7      	b.n	800b6d4 <_printf_common+0x58>
 800b744:	2301      	movs	r3, #1
 800b746:	4622      	mov	r2, r4
 800b748:	4641      	mov	r1, r8
 800b74a:	4638      	mov	r0, r7
 800b74c:	47c8      	blx	r9
 800b74e:	3001      	adds	r0, #1
 800b750:	d0e6      	beq.n	800b720 <_printf_common+0xa4>
 800b752:	3601      	adds	r6, #1
 800b754:	e7d9      	b.n	800b70a <_printf_common+0x8e>
	...

0800b758 <_printf_i>:
 800b758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b75c:	7e0f      	ldrb	r7, [r1, #24]
 800b75e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b760:	2f78      	cmp	r7, #120	@ 0x78
 800b762:	4691      	mov	r9, r2
 800b764:	4680      	mov	r8, r0
 800b766:	460c      	mov	r4, r1
 800b768:	469a      	mov	sl, r3
 800b76a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b76e:	d807      	bhi.n	800b780 <_printf_i+0x28>
 800b770:	2f62      	cmp	r7, #98	@ 0x62
 800b772:	d80a      	bhi.n	800b78a <_printf_i+0x32>
 800b774:	2f00      	cmp	r7, #0
 800b776:	f000 80d2 	beq.w	800b91e <_printf_i+0x1c6>
 800b77a:	2f58      	cmp	r7, #88	@ 0x58
 800b77c:	f000 80b9 	beq.w	800b8f2 <_printf_i+0x19a>
 800b780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b788:	e03a      	b.n	800b800 <_printf_i+0xa8>
 800b78a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b78e:	2b15      	cmp	r3, #21
 800b790:	d8f6      	bhi.n	800b780 <_printf_i+0x28>
 800b792:	a101      	add	r1, pc, #4	@ (adr r1, 800b798 <_printf_i+0x40>)
 800b794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b798:	0800b7f1 	.word	0x0800b7f1
 800b79c:	0800b805 	.word	0x0800b805
 800b7a0:	0800b781 	.word	0x0800b781
 800b7a4:	0800b781 	.word	0x0800b781
 800b7a8:	0800b781 	.word	0x0800b781
 800b7ac:	0800b781 	.word	0x0800b781
 800b7b0:	0800b805 	.word	0x0800b805
 800b7b4:	0800b781 	.word	0x0800b781
 800b7b8:	0800b781 	.word	0x0800b781
 800b7bc:	0800b781 	.word	0x0800b781
 800b7c0:	0800b781 	.word	0x0800b781
 800b7c4:	0800b905 	.word	0x0800b905
 800b7c8:	0800b82f 	.word	0x0800b82f
 800b7cc:	0800b8bf 	.word	0x0800b8bf
 800b7d0:	0800b781 	.word	0x0800b781
 800b7d4:	0800b781 	.word	0x0800b781
 800b7d8:	0800b927 	.word	0x0800b927
 800b7dc:	0800b781 	.word	0x0800b781
 800b7e0:	0800b82f 	.word	0x0800b82f
 800b7e4:	0800b781 	.word	0x0800b781
 800b7e8:	0800b781 	.word	0x0800b781
 800b7ec:	0800b8c7 	.word	0x0800b8c7
 800b7f0:	6833      	ldr	r3, [r6, #0]
 800b7f2:	1d1a      	adds	r2, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6032      	str	r2, [r6, #0]
 800b7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b800:	2301      	movs	r3, #1
 800b802:	e09d      	b.n	800b940 <_printf_i+0x1e8>
 800b804:	6833      	ldr	r3, [r6, #0]
 800b806:	6820      	ldr	r0, [r4, #0]
 800b808:	1d19      	adds	r1, r3, #4
 800b80a:	6031      	str	r1, [r6, #0]
 800b80c:	0606      	lsls	r6, r0, #24
 800b80e:	d501      	bpl.n	800b814 <_printf_i+0xbc>
 800b810:	681d      	ldr	r5, [r3, #0]
 800b812:	e003      	b.n	800b81c <_printf_i+0xc4>
 800b814:	0645      	lsls	r5, r0, #25
 800b816:	d5fb      	bpl.n	800b810 <_printf_i+0xb8>
 800b818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	da03      	bge.n	800b828 <_printf_i+0xd0>
 800b820:	232d      	movs	r3, #45	@ 0x2d
 800b822:	426d      	negs	r5, r5
 800b824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b828:	4859      	ldr	r0, [pc, #356]	@ (800b990 <_printf_i+0x238>)
 800b82a:	230a      	movs	r3, #10
 800b82c:	e011      	b.n	800b852 <_printf_i+0xfa>
 800b82e:	6821      	ldr	r1, [r4, #0]
 800b830:	6833      	ldr	r3, [r6, #0]
 800b832:	0608      	lsls	r0, r1, #24
 800b834:	f853 5b04 	ldr.w	r5, [r3], #4
 800b838:	d402      	bmi.n	800b840 <_printf_i+0xe8>
 800b83a:	0649      	lsls	r1, r1, #25
 800b83c:	bf48      	it	mi
 800b83e:	b2ad      	uxthmi	r5, r5
 800b840:	2f6f      	cmp	r7, #111	@ 0x6f
 800b842:	4853      	ldr	r0, [pc, #332]	@ (800b990 <_printf_i+0x238>)
 800b844:	6033      	str	r3, [r6, #0]
 800b846:	bf14      	ite	ne
 800b848:	230a      	movne	r3, #10
 800b84a:	2308      	moveq	r3, #8
 800b84c:	2100      	movs	r1, #0
 800b84e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b852:	6866      	ldr	r6, [r4, #4]
 800b854:	60a6      	str	r6, [r4, #8]
 800b856:	2e00      	cmp	r6, #0
 800b858:	bfa2      	ittt	ge
 800b85a:	6821      	ldrge	r1, [r4, #0]
 800b85c:	f021 0104 	bicge.w	r1, r1, #4
 800b860:	6021      	strge	r1, [r4, #0]
 800b862:	b90d      	cbnz	r5, 800b868 <_printf_i+0x110>
 800b864:	2e00      	cmp	r6, #0
 800b866:	d04b      	beq.n	800b900 <_printf_i+0x1a8>
 800b868:	4616      	mov	r6, r2
 800b86a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b86e:	fb03 5711 	mls	r7, r3, r1, r5
 800b872:	5dc7      	ldrb	r7, [r0, r7]
 800b874:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b878:	462f      	mov	r7, r5
 800b87a:	42bb      	cmp	r3, r7
 800b87c:	460d      	mov	r5, r1
 800b87e:	d9f4      	bls.n	800b86a <_printf_i+0x112>
 800b880:	2b08      	cmp	r3, #8
 800b882:	d10b      	bne.n	800b89c <_printf_i+0x144>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	07df      	lsls	r7, r3, #31
 800b888:	d508      	bpl.n	800b89c <_printf_i+0x144>
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	6861      	ldr	r1, [r4, #4]
 800b88e:	4299      	cmp	r1, r3
 800b890:	bfde      	ittt	le
 800b892:	2330      	movle	r3, #48	@ 0x30
 800b894:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b898:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b89c:	1b92      	subs	r2, r2, r6
 800b89e:	6122      	str	r2, [r4, #16]
 800b8a0:	f8cd a000 	str.w	sl, [sp]
 800b8a4:	464b      	mov	r3, r9
 800b8a6:	aa03      	add	r2, sp, #12
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7ff fee6 	bl	800b67c <_printf_common>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d14a      	bne.n	800b94a <_printf_i+0x1f2>
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	b004      	add	sp, #16
 800b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	f043 0320 	orr.w	r3, r3, #32
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	4833      	ldr	r0, [pc, #204]	@ (800b994 <_printf_i+0x23c>)
 800b8c8:	2778      	movs	r7, #120	@ 0x78
 800b8ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	6831      	ldr	r1, [r6, #0]
 800b8d2:	061f      	lsls	r7, r3, #24
 800b8d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8d8:	d402      	bmi.n	800b8e0 <_printf_i+0x188>
 800b8da:	065f      	lsls	r7, r3, #25
 800b8dc:	bf48      	it	mi
 800b8de:	b2ad      	uxthmi	r5, r5
 800b8e0:	6031      	str	r1, [r6, #0]
 800b8e2:	07d9      	lsls	r1, r3, #31
 800b8e4:	bf44      	itt	mi
 800b8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b8ea:	6023      	strmi	r3, [r4, #0]
 800b8ec:	b11d      	cbz	r5, 800b8f6 <_printf_i+0x19e>
 800b8ee:	2310      	movs	r3, #16
 800b8f0:	e7ac      	b.n	800b84c <_printf_i+0xf4>
 800b8f2:	4827      	ldr	r0, [pc, #156]	@ (800b990 <_printf_i+0x238>)
 800b8f4:	e7e9      	b.n	800b8ca <_printf_i+0x172>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	f023 0320 	bic.w	r3, r3, #32
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	e7f6      	b.n	800b8ee <_printf_i+0x196>
 800b900:	4616      	mov	r6, r2
 800b902:	e7bd      	b.n	800b880 <_printf_i+0x128>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	6825      	ldr	r5, [r4, #0]
 800b908:	6961      	ldr	r1, [r4, #20]
 800b90a:	1d18      	adds	r0, r3, #4
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	062e      	lsls	r6, r5, #24
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	d501      	bpl.n	800b918 <_printf_i+0x1c0>
 800b914:	6019      	str	r1, [r3, #0]
 800b916:	e002      	b.n	800b91e <_printf_i+0x1c6>
 800b918:	0668      	lsls	r0, r5, #25
 800b91a:	d5fb      	bpl.n	800b914 <_printf_i+0x1bc>
 800b91c:	8019      	strh	r1, [r3, #0]
 800b91e:	2300      	movs	r3, #0
 800b920:	6123      	str	r3, [r4, #16]
 800b922:	4616      	mov	r6, r2
 800b924:	e7bc      	b.n	800b8a0 <_printf_i+0x148>
 800b926:	6833      	ldr	r3, [r6, #0]
 800b928:	1d1a      	adds	r2, r3, #4
 800b92a:	6032      	str	r2, [r6, #0]
 800b92c:	681e      	ldr	r6, [r3, #0]
 800b92e:	6862      	ldr	r2, [r4, #4]
 800b930:	2100      	movs	r1, #0
 800b932:	4630      	mov	r0, r6
 800b934:	f7f4 fcfc 	bl	8000330 <memchr>
 800b938:	b108      	cbz	r0, 800b93e <_printf_i+0x1e6>
 800b93a:	1b80      	subs	r0, r0, r6
 800b93c:	6060      	str	r0, [r4, #4]
 800b93e:	6863      	ldr	r3, [r4, #4]
 800b940:	6123      	str	r3, [r4, #16]
 800b942:	2300      	movs	r3, #0
 800b944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b948:	e7aa      	b.n	800b8a0 <_printf_i+0x148>
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	4632      	mov	r2, r6
 800b94e:	4649      	mov	r1, r9
 800b950:	4640      	mov	r0, r8
 800b952:	47d0      	blx	sl
 800b954:	3001      	adds	r0, #1
 800b956:	d0ad      	beq.n	800b8b4 <_printf_i+0x15c>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	079b      	lsls	r3, r3, #30
 800b95c:	d413      	bmi.n	800b986 <_printf_i+0x22e>
 800b95e:	68e0      	ldr	r0, [r4, #12]
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	4298      	cmp	r0, r3
 800b964:	bfb8      	it	lt
 800b966:	4618      	movlt	r0, r3
 800b968:	e7a6      	b.n	800b8b8 <_printf_i+0x160>
 800b96a:	2301      	movs	r3, #1
 800b96c:	4632      	mov	r2, r6
 800b96e:	4649      	mov	r1, r9
 800b970:	4640      	mov	r0, r8
 800b972:	47d0      	blx	sl
 800b974:	3001      	adds	r0, #1
 800b976:	d09d      	beq.n	800b8b4 <_printf_i+0x15c>
 800b978:	3501      	adds	r5, #1
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	9903      	ldr	r1, [sp, #12]
 800b97e:	1a5b      	subs	r3, r3, r1
 800b980:	42ab      	cmp	r3, r5
 800b982:	dcf2      	bgt.n	800b96a <_printf_i+0x212>
 800b984:	e7eb      	b.n	800b95e <_printf_i+0x206>
 800b986:	2500      	movs	r5, #0
 800b988:	f104 0619 	add.w	r6, r4, #25
 800b98c:	e7f5      	b.n	800b97a <_printf_i+0x222>
 800b98e:	bf00      	nop
 800b990:	0800c4a7 	.word	0x0800c4a7
 800b994:	0800c4b8 	.word	0x0800c4b8

0800b998 <__sflush_r>:
 800b998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a0:	0716      	lsls	r6, r2, #28
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	d454      	bmi.n	800ba52 <__sflush_r+0xba>
 800b9a8:	684b      	ldr	r3, [r1, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	dc02      	bgt.n	800b9b4 <__sflush_r+0x1c>
 800b9ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	dd48      	ble.n	800ba46 <__sflush_r+0xae>
 800b9b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9b6:	2e00      	cmp	r6, #0
 800b9b8:	d045      	beq.n	800ba46 <__sflush_r+0xae>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9c0:	682f      	ldr	r7, [r5, #0]
 800b9c2:	6a21      	ldr	r1, [r4, #32]
 800b9c4:	602b      	str	r3, [r5, #0]
 800b9c6:	d030      	beq.n	800ba2a <__sflush_r+0x92>
 800b9c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	0759      	lsls	r1, r3, #29
 800b9ce:	d505      	bpl.n	800b9dc <__sflush_r+0x44>
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	1ad2      	subs	r2, r2, r3
 800b9d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9d6:	b10b      	cbz	r3, 800b9dc <__sflush_r+0x44>
 800b9d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	2300      	movs	r3, #0
 800b9de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9e0:	6a21      	ldr	r1, [r4, #32]
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	47b0      	blx	r6
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	d106      	bne.n	800b9fa <__sflush_r+0x62>
 800b9ec:	6829      	ldr	r1, [r5, #0]
 800b9ee:	291d      	cmp	r1, #29
 800b9f0:	d82b      	bhi.n	800ba4a <__sflush_r+0xb2>
 800b9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800ba9c <__sflush_r+0x104>)
 800b9f4:	410a      	asrs	r2, r1
 800b9f6:	07d6      	lsls	r6, r2, #31
 800b9f8:	d427      	bmi.n	800ba4a <__sflush_r+0xb2>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	6062      	str	r2, [r4, #4]
 800b9fe:	04d9      	lsls	r1, r3, #19
 800ba00:	6922      	ldr	r2, [r4, #16]
 800ba02:	6022      	str	r2, [r4, #0]
 800ba04:	d504      	bpl.n	800ba10 <__sflush_r+0x78>
 800ba06:	1c42      	adds	r2, r0, #1
 800ba08:	d101      	bne.n	800ba0e <__sflush_r+0x76>
 800ba0a:	682b      	ldr	r3, [r5, #0]
 800ba0c:	b903      	cbnz	r3, 800ba10 <__sflush_r+0x78>
 800ba0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba12:	602f      	str	r7, [r5, #0]
 800ba14:	b1b9      	cbz	r1, 800ba46 <__sflush_r+0xae>
 800ba16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba1a:	4299      	cmp	r1, r3
 800ba1c:	d002      	beq.n	800ba24 <__sflush_r+0x8c>
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f7ff fc8a 	bl	800b338 <_free_r>
 800ba24:	2300      	movs	r3, #0
 800ba26:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba28:	e00d      	b.n	800ba46 <__sflush_r+0xae>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b0      	blx	r6
 800ba30:	4602      	mov	r2, r0
 800ba32:	1c50      	adds	r0, r2, #1
 800ba34:	d1c9      	bne.n	800b9ca <__sflush_r+0x32>
 800ba36:	682b      	ldr	r3, [r5, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0c6      	beq.n	800b9ca <__sflush_r+0x32>
 800ba3c:	2b1d      	cmp	r3, #29
 800ba3e:	d001      	beq.n	800ba44 <__sflush_r+0xac>
 800ba40:	2b16      	cmp	r3, #22
 800ba42:	d11e      	bne.n	800ba82 <__sflush_r+0xea>
 800ba44:	602f      	str	r7, [r5, #0]
 800ba46:	2000      	movs	r0, #0
 800ba48:	e022      	b.n	800ba90 <__sflush_r+0xf8>
 800ba4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4e:	b21b      	sxth	r3, r3
 800ba50:	e01b      	b.n	800ba8a <__sflush_r+0xf2>
 800ba52:	690f      	ldr	r7, [r1, #16]
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	d0f6      	beq.n	800ba46 <__sflush_r+0xae>
 800ba58:	0793      	lsls	r3, r2, #30
 800ba5a:	680e      	ldr	r6, [r1, #0]
 800ba5c:	bf08      	it	eq
 800ba5e:	694b      	ldreq	r3, [r1, #20]
 800ba60:	600f      	str	r7, [r1, #0]
 800ba62:	bf18      	it	ne
 800ba64:	2300      	movne	r3, #0
 800ba66:	eba6 0807 	sub.w	r8, r6, r7
 800ba6a:	608b      	str	r3, [r1, #8]
 800ba6c:	f1b8 0f00 	cmp.w	r8, #0
 800ba70:	dde9      	ble.n	800ba46 <__sflush_r+0xae>
 800ba72:	6a21      	ldr	r1, [r4, #32]
 800ba74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba76:	4643      	mov	r3, r8
 800ba78:	463a      	mov	r2, r7
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	47b0      	blx	r6
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	dc08      	bgt.n	800ba94 <__sflush_r+0xfc>
 800ba82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba94:	4407      	add	r7, r0
 800ba96:	eba8 0800 	sub.w	r8, r8, r0
 800ba9a:	e7e7      	b.n	800ba6c <__sflush_r+0xd4>
 800ba9c:	dfbffffe 	.word	0xdfbffffe

0800baa0 <_fflush_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	690b      	ldr	r3, [r1, #16]
 800baa4:	4605      	mov	r5, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	b913      	cbnz	r3, 800bab0 <_fflush_r+0x10>
 800baaa:	2500      	movs	r5, #0
 800baac:	4628      	mov	r0, r5
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	b118      	cbz	r0, 800baba <_fflush_r+0x1a>
 800bab2:	6a03      	ldr	r3, [r0, #32]
 800bab4:	b90b      	cbnz	r3, 800baba <_fflush_r+0x1a>
 800bab6:	f7ff fa7d 	bl	800afb4 <__sinit>
 800baba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0f3      	beq.n	800baaa <_fflush_r+0xa>
 800bac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bac4:	07d0      	lsls	r0, r2, #31
 800bac6:	d404      	bmi.n	800bad2 <_fflush_r+0x32>
 800bac8:	0599      	lsls	r1, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_fflush_r+0x32>
 800bacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bace:	f7ff fc04 	bl	800b2da <__retarget_lock_acquire_recursive>
 800bad2:	4628      	mov	r0, r5
 800bad4:	4621      	mov	r1, r4
 800bad6:	f7ff ff5f 	bl	800b998 <__sflush_r>
 800bada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800badc:	07da      	lsls	r2, r3, #31
 800bade:	4605      	mov	r5, r0
 800bae0:	d4e4      	bmi.n	800baac <_fflush_r+0xc>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	059b      	lsls	r3, r3, #22
 800bae6:	d4e1      	bmi.n	800baac <_fflush_r+0xc>
 800bae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baea:	f7ff fbf7 	bl	800b2dc <__retarget_lock_release_recursive>
 800baee:	e7dd      	b.n	800baac <_fflush_r+0xc>

0800baf0 <fiprintf>:
 800baf0:	b40e      	push	{r1, r2, r3}
 800baf2:	b503      	push	{r0, r1, lr}
 800baf4:	4601      	mov	r1, r0
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	4805      	ldr	r0, [pc, #20]	@ (800bb10 <fiprintf+0x20>)
 800bafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafe:	6800      	ldr	r0, [r0, #0]
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	f000 f87f 	bl	800bc04 <_vfiprintf_r>
 800bb06:	b002      	add	sp, #8
 800bb08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb0c:	b003      	add	sp, #12
 800bb0e:	4770      	bx	lr
 800bb10:	240000a8 	.word	0x240000a8

0800bb14 <memmove>:
 800bb14:	4288      	cmp	r0, r1
 800bb16:	b510      	push	{r4, lr}
 800bb18:	eb01 0402 	add.w	r4, r1, r2
 800bb1c:	d902      	bls.n	800bb24 <memmove+0x10>
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	4623      	mov	r3, r4
 800bb22:	d807      	bhi.n	800bb34 <memmove+0x20>
 800bb24:	1e43      	subs	r3, r0, #1
 800bb26:	42a1      	cmp	r1, r4
 800bb28:	d008      	beq.n	800bb3c <memmove+0x28>
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb32:	e7f8      	b.n	800bb26 <memmove+0x12>
 800bb34:	4402      	add	r2, r0
 800bb36:	4601      	mov	r1, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	d100      	bne.n	800bb3e <memmove+0x2a>
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb46:	e7f7      	b.n	800bb38 <memmove+0x24>

0800bb48 <abort>:
 800bb48:	b508      	push	{r3, lr}
 800bb4a:	2006      	movs	r0, #6
 800bb4c:	f000 fa2e 	bl	800bfac <raise>
 800bb50:	2001      	movs	r0, #1
 800bb52:	f7f5 fb8f 	bl	8001274 <_exit>

0800bb56 <_realloc_r>:
 800bb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4615      	mov	r5, r2
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b921      	cbnz	r1, 800bb6c <_realloc_r+0x16>
 800bb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb66:	4611      	mov	r1, r2
 800bb68:	f7ff b888 	b.w	800ac7c <_malloc_r>
 800bb6c:	b92a      	cbnz	r2, 800bb7a <_realloc_r+0x24>
 800bb6e:	f7ff fbe3 	bl	800b338 <_free_r>
 800bb72:	2400      	movs	r4, #0
 800bb74:	4620      	mov	r0, r4
 800bb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7a:	f000 fa33 	bl	800bfe4 <_malloc_usable_size_r>
 800bb7e:	4285      	cmp	r5, r0
 800bb80:	4606      	mov	r6, r0
 800bb82:	d802      	bhi.n	800bb8a <_realloc_r+0x34>
 800bb84:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb88:	d8f4      	bhi.n	800bb74 <_realloc_r+0x1e>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	f7ff f875 	bl	800ac7c <_malloc_r>
 800bb92:	4607      	mov	r7, r0
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d0ec      	beq.n	800bb72 <_realloc_r+0x1c>
 800bb98:	42b5      	cmp	r5, r6
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	bf28      	it	cs
 800bba0:	4632      	movcs	r2, r6
 800bba2:	f7ff fb9c 	bl	800b2de <memcpy>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4640      	mov	r0, r8
 800bbaa:	f7ff fbc5 	bl	800b338 <_free_r>
 800bbae:	463c      	mov	r4, r7
 800bbb0:	e7e0      	b.n	800bb74 <_realloc_r+0x1e>

0800bbb2 <__sfputc_r>:
 800bbb2:	6893      	ldr	r3, [r2, #8]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	b410      	push	{r4}
 800bbba:	6093      	str	r3, [r2, #8]
 800bbbc:	da08      	bge.n	800bbd0 <__sfputc_r+0x1e>
 800bbbe:	6994      	ldr	r4, [r2, #24]
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	db01      	blt.n	800bbc8 <__sfputc_r+0x16>
 800bbc4:	290a      	cmp	r1, #10
 800bbc6:	d103      	bne.n	800bbd0 <__sfputc_r+0x1e>
 800bbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbcc:	f000 b932 	b.w	800be34 <__swbuf_r>
 800bbd0:	6813      	ldr	r3, [r2, #0]
 800bbd2:	1c58      	adds	r0, r3, #1
 800bbd4:	6010      	str	r0, [r2, #0]
 800bbd6:	7019      	strb	r1, [r3, #0]
 800bbd8:	4608      	mov	r0, r1
 800bbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <__sfputs_r>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	18d5      	adds	r5, r2, r3
 800bbea:	42ac      	cmp	r4, r5
 800bbec:	d101      	bne.n	800bbf2 <__sfputs_r+0x12>
 800bbee:	2000      	movs	r0, #0
 800bbf0:	e007      	b.n	800bc02 <__sfputs_r+0x22>
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	463a      	mov	r2, r7
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f7ff ffda 	bl	800bbb2 <__sfputc_r>
 800bbfe:	1c43      	adds	r3, r0, #1
 800bc00:	d1f3      	bne.n	800bbea <__sfputs_r+0xa>
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc04 <_vfiprintf_r>:
 800bc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	460d      	mov	r5, r1
 800bc0a:	b09d      	sub	sp, #116	@ 0x74
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	4698      	mov	r8, r3
 800bc10:	4606      	mov	r6, r0
 800bc12:	b118      	cbz	r0, 800bc1c <_vfiprintf_r+0x18>
 800bc14:	6a03      	ldr	r3, [r0, #32]
 800bc16:	b90b      	cbnz	r3, 800bc1c <_vfiprintf_r+0x18>
 800bc18:	f7ff f9cc 	bl	800afb4 <__sinit>
 800bc1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc1e:	07d9      	lsls	r1, r3, #31
 800bc20:	d405      	bmi.n	800bc2e <_vfiprintf_r+0x2a>
 800bc22:	89ab      	ldrh	r3, [r5, #12]
 800bc24:	059a      	lsls	r2, r3, #22
 800bc26:	d402      	bmi.n	800bc2e <_vfiprintf_r+0x2a>
 800bc28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc2a:	f7ff fb56 	bl	800b2da <__retarget_lock_acquire_recursive>
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	071b      	lsls	r3, r3, #28
 800bc32:	d501      	bpl.n	800bc38 <_vfiprintf_r+0x34>
 800bc34:	692b      	ldr	r3, [r5, #16]
 800bc36:	b99b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x5c>
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f000 f938 	bl	800beb0 <__swsetup_r>
 800bc40:	b170      	cbz	r0, 800bc60 <_vfiprintf_r+0x5c>
 800bc42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc44:	07dc      	lsls	r4, r3, #31
 800bc46:	d504      	bpl.n	800bc52 <_vfiprintf_r+0x4e>
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	b01d      	add	sp, #116	@ 0x74
 800bc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc52:	89ab      	ldrh	r3, [r5, #12]
 800bc54:	0598      	lsls	r0, r3, #22
 800bc56:	d4f7      	bmi.n	800bc48 <_vfiprintf_r+0x44>
 800bc58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc5a:	f7ff fb3f 	bl	800b2dc <__retarget_lock_release_recursive>
 800bc5e:	e7f3      	b.n	800bc48 <_vfiprintf_r+0x44>
 800bc60:	2300      	movs	r3, #0
 800bc62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc64:	2320      	movs	r3, #32
 800bc66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc6e:	2330      	movs	r3, #48	@ 0x30
 800bc70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be20 <_vfiprintf_r+0x21c>
 800bc74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc78:	f04f 0901 	mov.w	r9, #1
 800bc7c:	4623      	mov	r3, r4
 800bc7e:	469a      	mov	sl, r3
 800bc80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc84:	b10a      	cbz	r2, 800bc8a <_vfiprintf_r+0x86>
 800bc86:	2a25      	cmp	r2, #37	@ 0x25
 800bc88:	d1f9      	bne.n	800bc7e <_vfiprintf_r+0x7a>
 800bc8a:	ebba 0b04 	subs.w	fp, sl, r4
 800bc8e:	d00b      	beq.n	800bca8 <_vfiprintf_r+0xa4>
 800bc90:	465b      	mov	r3, fp
 800bc92:	4622      	mov	r2, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7ff ffa2 	bl	800bbe0 <__sfputs_r>
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f000 80a7 	beq.w	800bdf0 <_vfiprintf_r+0x1ec>
 800bca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca4:	445a      	add	r2, fp
 800bca6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bca8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 809f 	beq.w	800bdf0 <_vfiprintf_r+0x1ec>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcbc:	f10a 0a01 	add.w	sl, sl, #1
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	9307      	str	r3, [sp, #28]
 800bcc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcca:	4654      	mov	r4, sl
 800bccc:	2205      	movs	r2, #5
 800bcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd2:	4853      	ldr	r0, [pc, #332]	@ (800be20 <_vfiprintf_r+0x21c>)
 800bcd4:	f7f4 fb2c 	bl	8000330 <memchr>
 800bcd8:	9a04      	ldr	r2, [sp, #16]
 800bcda:	b9d8      	cbnz	r0, 800bd14 <_vfiprintf_r+0x110>
 800bcdc:	06d1      	lsls	r1, r2, #27
 800bcde:	bf44      	itt	mi
 800bce0:	2320      	movmi	r3, #32
 800bce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bce6:	0713      	lsls	r3, r2, #28
 800bce8:	bf44      	itt	mi
 800bcea:	232b      	movmi	r3, #43	@ 0x2b
 800bcec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcf6:	d015      	beq.n	800bd24 <_vfiprintf_r+0x120>
 800bcf8:	9a07      	ldr	r2, [sp, #28]
 800bcfa:	4654      	mov	r4, sl
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f04f 0c0a 	mov.w	ip, #10
 800bd02:	4621      	mov	r1, r4
 800bd04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd08:	3b30      	subs	r3, #48	@ 0x30
 800bd0a:	2b09      	cmp	r3, #9
 800bd0c:	d94b      	bls.n	800bda6 <_vfiprintf_r+0x1a2>
 800bd0e:	b1b0      	cbz	r0, 800bd3e <_vfiprintf_r+0x13a>
 800bd10:	9207      	str	r2, [sp, #28]
 800bd12:	e014      	b.n	800bd3e <_vfiprintf_r+0x13a>
 800bd14:	eba0 0308 	sub.w	r3, r0, r8
 800bd18:	fa09 f303 	lsl.w	r3, r9, r3
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	9304      	str	r3, [sp, #16]
 800bd20:	46a2      	mov	sl, r4
 800bd22:	e7d2      	b.n	800bcca <_vfiprintf_r+0xc6>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	1d19      	adds	r1, r3, #4
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	9103      	str	r1, [sp, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	bfbb      	ittet	lt
 800bd30:	425b      	neglt	r3, r3
 800bd32:	f042 0202 	orrlt.w	r2, r2, #2
 800bd36:	9307      	strge	r3, [sp, #28]
 800bd38:	9307      	strlt	r3, [sp, #28]
 800bd3a:	bfb8      	it	lt
 800bd3c:	9204      	strlt	r2, [sp, #16]
 800bd3e:	7823      	ldrb	r3, [r4, #0]
 800bd40:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd42:	d10a      	bne.n	800bd5a <_vfiprintf_r+0x156>
 800bd44:	7863      	ldrb	r3, [r4, #1]
 800bd46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd48:	d132      	bne.n	800bdb0 <_vfiprintf_r+0x1ac>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d1a      	adds	r2, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9203      	str	r2, [sp, #12]
 800bd52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd56:	3402      	adds	r4, #2
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be30 <_vfiprintf_r+0x22c>
 800bd5e:	7821      	ldrb	r1, [r4, #0]
 800bd60:	2203      	movs	r2, #3
 800bd62:	4650      	mov	r0, sl
 800bd64:	f7f4 fae4 	bl	8000330 <memchr>
 800bd68:	b138      	cbz	r0, 800bd7a <_vfiprintf_r+0x176>
 800bd6a:	9b04      	ldr	r3, [sp, #16]
 800bd6c:	eba0 000a 	sub.w	r0, r0, sl
 800bd70:	2240      	movs	r2, #64	@ 0x40
 800bd72:	4082      	lsls	r2, r0
 800bd74:	4313      	orrs	r3, r2
 800bd76:	3401      	adds	r4, #1
 800bd78:	9304      	str	r3, [sp, #16]
 800bd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7e:	4829      	ldr	r0, [pc, #164]	@ (800be24 <_vfiprintf_r+0x220>)
 800bd80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd84:	2206      	movs	r2, #6
 800bd86:	f7f4 fad3 	bl	8000330 <memchr>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d03f      	beq.n	800be0e <_vfiprintf_r+0x20a>
 800bd8e:	4b26      	ldr	r3, [pc, #152]	@ (800be28 <_vfiprintf_r+0x224>)
 800bd90:	bb1b      	cbnz	r3, 800bdda <_vfiprintf_r+0x1d6>
 800bd92:	9b03      	ldr	r3, [sp, #12]
 800bd94:	3307      	adds	r3, #7
 800bd96:	f023 0307 	bic.w	r3, r3, #7
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	9303      	str	r3, [sp, #12]
 800bd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda0:	443b      	add	r3, r7
 800bda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda4:	e76a      	b.n	800bc7c <_vfiprintf_r+0x78>
 800bda6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdaa:	460c      	mov	r4, r1
 800bdac:	2001      	movs	r0, #1
 800bdae:	e7a8      	b.n	800bd02 <_vfiprintf_r+0xfe>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	3401      	adds	r4, #1
 800bdb4:	9305      	str	r3, [sp, #20]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	f04f 0c0a 	mov.w	ip, #10
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc2:	3a30      	subs	r2, #48	@ 0x30
 800bdc4:	2a09      	cmp	r2, #9
 800bdc6:	d903      	bls.n	800bdd0 <_vfiprintf_r+0x1cc>
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0c6      	beq.n	800bd5a <_vfiprintf_r+0x156>
 800bdcc:	9105      	str	r1, [sp, #20]
 800bdce:	e7c4      	b.n	800bd5a <_vfiprintf_r+0x156>
 800bdd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e7f0      	b.n	800bdbc <_vfiprintf_r+0x1b8>
 800bdda:	ab03      	add	r3, sp, #12
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	462a      	mov	r2, r5
 800bde0:	4b12      	ldr	r3, [pc, #72]	@ (800be2c <_vfiprintf_r+0x228>)
 800bde2:	a904      	add	r1, sp, #16
 800bde4:	4630      	mov	r0, r6
 800bde6:	f3af 8000 	nop.w
 800bdea:	4607      	mov	r7, r0
 800bdec:	1c78      	adds	r0, r7, #1
 800bdee:	d1d6      	bne.n	800bd9e <_vfiprintf_r+0x19a>
 800bdf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdf2:	07d9      	lsls	r1, r3, #31
 800bdf4:	d405      	bmi.n	800be02 <_vfiprintf_r+0x1fe>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	059a      	lsls	r2, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_vfiprintf_r+0x1fe>
 800bdfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdfe:	f7ff fa6d 	bl	800b2dc <__retarget_lock_release_recursive>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	065b      	lsls	r3, r3, #25
 800be06:	f53f af1f 	bmi.w	800bc48 <_vfiprintf_r+0x44>
 800be0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be0c:	e71e      	b.n	800bc4c <_vfiprintf_r+0x48>
 800be0e:	ab03      	add	r3, sp, #12
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	462a      	mov	r2, r5
 800be14:	4b05      	ldr	r3, [pc, #20]	@ (800be2c <_vfiprintf_r+0x228>)
 800be16:	a904      	add	r1, sp, #16
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff fc9d 	bl	800b758 <_printf_i>
 800be1e:	e7e4      	b.n	800bdea <_vfiprintf_r+0x1e6>
 800be20:	0800c496 	.word	0x0800c496
 800be24:	0800c4a0 	.word	0x0800c4a0
 800be28:	00000000 	.word	0x00000000
 800be2c:	0800bbe1 	.word	0x0800bbe1
 800be30:	0800c49c 	.word	0x0800c49c

0800be34 <__swbuf_r>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	460e      	mov	r6, r1
 800be38:	4614      	mov	r4, r2
 800be3a:	4605      	mov	r5, r0
 800be3c:	b118      	cbz	r0, 800be46 <__swbuf_r+0x12>
 800be3e:	6a03      	ldr	r3, [r0, #32]
 800be40:	b90b      	cbnz	r3, 800be46 <__swbuf_r+0x12>
 800be42:	f7ff f8b7 	bl	800afb4 <__sinit>
 800be46:	69a3      	ldr	r3, [r4, #24]
 800be48:	60a3      	str	r3, [r4, #8]
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	071a      	lsls	r2, r3, #28
 800be4e:	d501      	bpl.n	800be54 <__swbuf_r+0x20>
 800be50:	6923      	ldr	r3, [r4, #16]
 800be52:	b943      	cbnz	r3, 800be66 <__swbuf_r+0x32>
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f000 f82a 	bl	800beb0 <__swsetup_r>
 800be5c:	b118      	cbz	r0, 800be66 <__swbuf_r+0x32>
 800be5e:	f04f 37ff 	mov.w	r7, #4294967295
 800be62:	4638      	mov	r0, r7
 800be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	6922      	ldr	r2, [r4, #16]
 800be6a:	1a98      	subs	r0, r3, r2
 800be6c:	6963      	ldr	r3, [r4, #20]
 800be6e:	b2f6      	uxtb	r6, r6
 800be70:	4283      	cmp	r3, r0
 800be72:	4637      	mov	r7, r6
 800be74:	dc05      	bgt.n	800be82 <__swbuf_r+0x4e>
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f7ff fe11 	bl	800baa0 <_fflush_r>
 800be7e:	2800      	cmp	r0, #0
 800be80:	d1ed      	bne.n	800be5e <__swbuf_r+0x2a>
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	60a3      	str	r3, [r4, #8]
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	6022      	str	r2, [r4, #0]
 800be8e:	701e      	strb	r6, [r3, #0]
 800be90:	6962      	ldr	r2, [r4, #20]
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	429a      	cmp	r2, r3
 800be96:	d004      	beq.n	800bea2 <__swbuf_r+0x6e>
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	07db      	lsls	r3, r3, #31
 800be9c:	d5e1      	bpl.n	800be62 <__swbuf_r+0x2e>
 800be9e:	2e0a      	cmp	r6, #10
 800bea0:	d1df      	bne.n	800be62 <__swbuf_r+0x2e>
 800bea2:	4621      	mov	r1, r4
 800bea4:	4628      	mov	r0, r5
 800bea6:	f7ff fdfb 	bl	800baa0 <_fflush_r>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d0d9      	beq.n	800be62 <__swbuf_r+0x2e>
 800beae:	e7d6      	b.n	800be5e <__swbuf_r+0x2a>

0800beb0 <__swsetup_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4b29      	ldr	r3, [pc, #164]	@ (800bf58 <__swsetup_r+0xa8>)
 800beb4:	4605      	mov	r5, r0
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	460c      	mov	r4, r1
 800beba:	b118      	cbz	r0, 800bec4 <__swsetup_r+0x14>
 800bebc:	6a03      	ldr	r3, [r0, #32]
 800bebe:	b90b      	cbnz	r3, 800bec4 <__swsetup_r+0x14>
 800bec0:	f7ff f878 	bl	800afb4 <__sinit>
 800bec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec8:	0719      	lsls	r1, r3, #28
 800beca:	d422      	bmi.n	800bf12 <__swsetup_r+0x62>
 800becc:	06da      	lsls	r2, r3, #27
 800bece:	d407      	bmi.n	800bee0 <__swsetup_r+0x30>
 800bed0:	2209      	movs	r2, #9
 800bed2:	602a      	str	r2, [r5, #0]
 800bed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	e033      	b.n	800bf48 <__swsetup_r+0x98>
 800bee0:	0758      	lsls	r0, r3, #29
 800bee2:	d512      	bpl.n	800bf0a <__swsetup_r+0x5a>
 800bee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bee6:	b141      	cbz	r1, 800befa <__swsetup_r+0x4a>
 800bee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beec:	4299      	cmp	r1, r3
 800beee:	d002      	beq.n	800bef6 <__swsetup_r+0x46>
 800bef0:	4628      	mov	r0, r5
 800bef2:	f7ff fa21 	bl	800b338 <_free_r>
 800bef6:	2300      	movs	r3, #0
 800bef8:	6363      	str	r3, [r4, #52]	@ 0x34
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf00:	81a3      	strh	r3, [r4, #12]
 800bf02:	2300      	movs	r3, #0
 800bf04:	6063      	str	r3, [r4, #4]
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0308 	orr.w	r3, r3, #8
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	b94b      	cbnz	r3, 800bf2a <__swsetup_r+0x7a>
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf20:	d003      	beq.n	800bf2a <__swsetup_r+0x7a>
 800bf22:	4621      	mov	r1, r4
 800bf24:	4628      	mov	r0, r5
 800bf26:	f000 f88b 	bl	800c040 <__smakebuf_r>
 800bf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2e:	f013 0201 	ands.w	r2, r3, #1
 800bf32:	d00a      	beq.n	800bf4a <__swsetup_r+0x9a>
 800bf34:	2200      	movs	r2, #0
 800bf36:	60a2      	str	r2, [r4, #8]
 800bf38:	6962      	ldr	r2, [r4, #20]
 800bf3a:	4252      	negs	r2, r2
 800bf3c:	61a2      	str	r2, [r4, #24]
 800bf3e:	6922      	ldr	r2, [r4, #16]
 800bf40:	b942      	cbnz	r2, 800bf54 <__swsetup_r+0xa4>
 800bf42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf46:	d1c5      	bne.n	800bed4 <__swsetup_r+0x24>
 800bf48:	bd38      	pop	{r3, r4, r5, pc}
 800bf4a:	0799      	lsls	r1, r3, #30
 800bf4c:	bf58      	it	pl
 800bf4e:	6962      	ldrpl	r2, [r4, #20]
 800bf50:	60a2      	str	r2, [r4, #8]
 800bf52:	e7f4      	b.n	800bf3e <__swsetup_r+0x8e>
 800bf54:	2000      	movs	r0, #0
 800bf56:	e7f7      	b.n	800bf48 <__swsetup_r+0x98>
 800bf58:	240000a8 	.word	0x240000a8

0800bf5c <_raise_r>:
 800bf5c:	291f      	cmp	r1, #31
 800bf5e:	b538      	push	{r3, r4, r5, lr}
 800bf60:	4605      	mov	r5, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	d904      	bls.n	800bf70 <_raise_r+0x14>
 800bf66:	2316      	movs	r3, #22
 800bf68:	6003      	str	r3, [r0, #0]
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf72:	b112      	cbz	r2, 800bf7a <_raise_r+0x1e>
 800bf74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf78:	b94b      	cbnz	r3, 800bf8e <_raise_r+0x32>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 f830 	bl	800bfe0 <_getpid_r>
 800bf80:	4622      	mov	r2, r4
 800bf82:	4601      	mov	r1, r0
 800bf84:	4628      	mov	r0, r5
 800bf86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf8a:	f000 b817 	b.w	800bfbc <_kill_r>
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d00a      	beq.n	800bfa8 <_raise_r+0x4c>
 800bf92:	1c59      	adds	r1, r3, #1
 800bf94:	d103      	bne.n	800bf9e <_raise_r+0x42>
 800bf96:	2316      	movs	r3, #22
 800bf98:	6003      	str	r3, [r0, #0]
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7e7      	b.n	800bf6e <_raise_r+0x12>
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4798      	blx	r3
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e7e0      	b.n	800bf6e <_raise_r+0x12>

0800bfac <raise>:
 800bfac:	4b02      	ldr	r3, [pc, #8]	@ (800bfb8 <raise+0xc>)
 800bfae:	4601      	mov	r1, r0
 800bfb0:	6818      	ldr	r0, [r3, #0]
 800bfb2:	f7ff bfd3 	b.w	800bf5c <_raise_r>
 800bfb6:	bf00      	nop
 800bfb8:	240000a8 	.word	0x240000a8

0800bfbc <_kill_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4d07      	ldr	r5, [pc, #28]	@ (800bfdc <_kill_r+0x20>)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	602b      	str	r3, [r5, #0]
 800bfca:	f7f5 f943 	bl	8001254 <_kill>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d102      	bne.n	800bfd8 <_kill_r+0x1c>
 800bfd2:	682b      	ldr	r3, [r5, #0]
 800bfd4:	b103      	cbz	r3, 800bfd8 <_kill_r+0x1c>
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	24000894 	.word	0x24000894

0800bfe0 <_getpid_r>:
 800bfe0:	f7f5 b930 	b.w	8001244 <_getpid>

0800bfe4 <_malloc_usable_size_r>:
 800bfe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe8:	1f18      	subs	r0, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	bfbc      	itt	lt
 800bfee:	580b      	ldrlt	r3, [r1, r0]
 800bff0:	18c0      	addlt	r0, r0, r3
 800bff2:	4770      	bx	lr

0800bff4 <__swhatbuf_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	2900      	cmp	r1, #0
 800bffe:	b096      	sub	sp, #88	@ 0x58
 800c000:	4615      	mov	r5, r2
 800c002:	461e      	mov	r6, r3
 800c004:	da0d      	bge.n	800c022 <__swhatbuf_r+0x2e>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c00c:	f04f 0100 	mov.w	r1, #0
 800c010:	bf14      	ite	ne
 800c012:	2340      	movne	r3, #64	@ 0x40
 800c014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c018:	2000      	movs	r0, #0
 800c01a:	6031      	str	r1, [r6, #0]
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	b016      	add	sp, #88	@ 0x58
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	466a      	mov	r2, sp
 800c024:	f000 f848 	bl	800c0b8 <_fstat_r>
 800c028:	2800      	cmp	r0, #0
 800c02a:	dbec      	blt.n	800c006 <__swhatbuf_r+0x12>
 800c02c:	9901      	ldr	r1, [sp, #4]
 800c02e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c036:	4259      	negs	r1, r3
 800c038:	4159      	adcs	r1, r3
 800c03a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c03e:	e7eb      	b.n	800c018 <__swhatbuf_r+0x24>

0800c040 <__smakebuf_r>:
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c044:	079d      	lsls	r5, r3, #30
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	d507      	bpl.n	800c05c <__smakebuf_r+0x1c>
 800c04c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	2301      	movs	r3, #1
 800c056:	6163      	str	r3, [r4, #20]
 800c058:	b003      	add	sp, #12
 800c05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05c:	ab01      	add	r3, sp, #4
 800c05e:	466a      	mov	r2, sp
 800c060:	f7ff ffc8 	bl	800bff4 <__swhatbuf_r>
 800c064:	9f00      	ldr	r7, [sp, #0]
 800c066:	4605      	mov	r5, r0
 800c068:	4639      	mov	r1, r7
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7fe fe06 	bl	800ac7c <_malloc_r>
 800c070:	b948      	cbnz	r0, 800c086 <__smakebuf_r+0x46>
 800c072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c076:	059a      	lsls	r2, r3, #22
 800c078:	d4ee      	bmi.n	800c058 <__smakebuf_r+0x18>
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	e7e2      	b.n	800c04c <__smakebuf_r+0xc>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	6020      	str	r0, [r4, #0]
 800c08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c096:	b15b      	cbz	r3, 800c0b0 <__smakebuf_r+0x70>
 800c098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 f81d 	bl	800c0dc <_isatty_r>
 800c0a2:	b128      	cbz	r0, 800c0b0 <__smakebuf_r+0x70>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	431d      	orrs	r5, r3
 800c0b4:	81a5      	strh	r5, [r4, #12]
 800c0b6:	e7cf      	b.n	800c058 <__smakebuf_r+0x18>

0800c0b8 <_fstat_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d07      	ldr	r5, [pc, #28]	@ (800c0d8 <_fstat_r+0x20>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	f7f5 f925 	bl	8001314 <_fstat>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	d102      	bne.n	800c0d4 <_fstat_r+0x1c>
 800c0ce:	682b      	ldr	r3, [r5, #0]
 800c0d0:	b103      	cbz	r3, 800c0d4 <_fstat_r+0x1c>
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	bd38      	pop	{r3, r4, r5, pc}
 800c0d6:	bf00      	nop
 800c0d8:	24000894 	.word	0x24000894

0800c0dc <_isatty_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	@ (800c0f8 <_isatty_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f5 f924 	bl	8001334 <_isatty>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_isatty_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_isatty_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	24000894 	.word	0x24000894

0800c0fc <_init>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	bf00      	nop
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr

0800c108 <_fini>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr

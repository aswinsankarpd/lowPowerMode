
lowpowermode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf94  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800c264  0800c264  0000d264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c630  0800c630  0000d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c638  0800c638  0000d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c63c  0800c63c  0000d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f8  24000000  0800c640  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  240000f8  0800c738  0000e0f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400089c  0800c738  0000e89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa19  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c70  00000000  00000000  00028b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f0  00000000  00000000  0002c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cc1  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362d0  00000000  00000000  0002e561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c982  00000000  00000000  00064831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149ca7  00000000  00000000  000811b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cae5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e14  00000000  00000000  001caea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001cfcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000f8 	.word	0x240000f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c24c 	.word	0x0800c24c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000fc 	.word	0x240000fc
 800030c:	0800c24c 	.word	0x0800c24c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b96a 	b.w	80006bc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9d08      	ldr	r5, [sp, #32]
 8000406:	460c      	mov	r4, r1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d14e      	bne.n	80004aa <__udivmoddi4+0xaa>
 800040c:	4694      	mov	ip, r2
 800040e:	458c      	cmp	ip, r1
 8000410:	4686      	mov	lr, r0
 8000412:	fab2 f282 	clz	r2, r2
 8000416:	d962      	bls.n	80004de <__udivmoddi4+0xde>
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	4091      	lsls	r1, r2
 8000420:	fa20 f303 	lsr.w	r3, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	4319      	orrs	r1, r3
 800042a:	fa00 fe02 	lsl.w	lr, r0, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f f68c 	uxth.w	r6, ip
 8000436:	fbb1 f4f7 	udiv	r4, r1, r7
 800043a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043e:	fb07 1114 	mls	r1, r7, r4, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb04 f106 	mul.w	r1, r4, r6
 800044a:	4299      	cmp	r1, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x64>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f104 30ff 	add.w	r0, r4, #4294967295
 8000456:	f080 8112 	bcs.w	800067e <__udivmoddi4+0x27e>
 800045a:	4299      	cmp	r1, r3
 800045c:	f240 810f 	bls.w	800067e <__udivmoddi4+0x27e>
 8000460:	3c02      	subs	r4, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	fa1f f38e 	uxth.w	r3, lr
 800046a:	fbb1 f0f7 	udiv	r0, r1, r7
 800046e:	fb07 1110 	mls	r1, r7, r0, r1
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f606 	mul.w	r6, r0, r6
 800047a:	429e      	cmp	r6, r3
 800047c:	d90a      	bls.n	8000494 <__udivmoddi4+0x94>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 31ff 	add.w	r1, r0, #4294967295
 8000486:	f080 80fc 	bcs.w	8000682 <__udivmoddi4+0x282>
 800048a:	429e      	cmp	r6, r3
 800048c:	f240 80f9 	bls.w	8000682 <__udivmoddi4+0x282>
 8000490:	4463      	add	r3, ip
 8000492:	3802      	subs	r0, #2
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800049a:	2100      	movs	r1, #0
 800049c:	b11d      	cbz	r5, 80004a6 <__udivmoddi4+0xa6>
 800049e:	40d3      	lsrs	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	e9c5 3200 	strd	r3, r2, [r5]
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d905      	bls.n	80004ba <__udivmoddi4+0xba>
 80004ae:	b10d      	cbz	r5, 80004b4 <__udivmoddi4+0xb4>
 80004b0:	e9c5 0100 	strd	r0, r1, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4608      	mov	r0, r1
 80004b8:	e7f5      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004ba:	fab3 f183 	clz	r1, r3
 80004be:	2900      	cmp	r1, #0
 80004c0:	d146      	bne.n	8000550 <__udivmoddi4+0x150>
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	d302      	bcc.n	80004cc <__udivmoddi4+0xcc>
 80004c6:	4290      	cmp	r0, r2
 80004c8:	f0c0 80f0 	bcc.w	80006ac <__udivmoddi4+0x2ac>
 80004cc:	1a86      	subs	r6, r0, r2
 80004ce:	eb64 0303 	sbc.w	r3, r4, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d0e6      	beq.n	80004a6 <__udivmoddi4+0xa6>
 80004d8:	e9c5 6300 	strd	r6, r3, [r5]
 80004dc:	e7e3      	b.n	80004a6 <__udivmoddi4+0xa6>
 80004de:	2a00      	cmp	r2, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x204>
 80004e4:	eba1 040c 	sub.w	r4, r1, ip
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa1f f78c 	uxth.w	r7, ip
 80004f0:	2101      	movs	r1, #1
 80004f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004fa:	fb08 4416 	mls	r4, r8, r6, r4
 80004fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000502:	fb07 f006 	mul.w	r0, r7, r6
 8000506:	4298      	cmp	r0, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x11c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x11a>
 8000514:	4298      	cmp	r0, r3
 8000516:	f200 80cd 	bhi.w	80006b4 <__udivmoddi4+0x2b4>
 800051a:	4626      	mov	r6, r4
 800051c:	1a1c      	subs	r4, r3, r0
 800051e:	fa1f f38e 	uxth.w	r3, lr
 8000522:	fbb4 f0f8 	udiv	r0, r4, r8
 8000526:	fb08 4410 	mls	r4, r8, r0, r4
 800052a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800052e:	fb00 f707 	mul.w	r7, r0, r7
 8000532:	429f      	cmp	r7, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x148>
 8000536:	eb1c 0303 	adds.w	r3, ip, r3
 800053a:	f100 34ff 	add.w	r4, r0, #4294967295
 800053e:	d202      	bcs.n	8000546 <__udivmoddi4+0x146>
 8000540:	429f      	cmp	r7, r3
 8000542:	f200 80b0 	bhi.w	80006a6 <__udivmoddi4+0x2a6>
 8000546:	4620      	mov	r0, r4
 8000548:	1bdb      	subs	r3, r3, r7
 800054a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800054e:	e7a5      	b.n	800049c <__udivmoddi4+0x9c>
 8000550:	f1c1 0620 	rsb	r6, r1, #32
 8000554:	408b      	lsls	r3, r1
 8000556:	fa22 f706 	lsr.w	r7, r2, r6
 800055a:	431f      	orrs	r7, r3
 800055c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000560:	fa04 f301 	lsl.w	r3, r4, r1
 8000564:	ea43 030c 	orr.w	r3, r3, ip
 8000568:	40f4      	lsrs	r4, r6
 800056a:	fa00 f801 	lsl.w	r8, r0, r1
 800056e:	0c38      	lsrs	r0, r7, #16
 8000570:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000574:	fbb4 fef0 	udiv	lr, r4, r0
 8000578:	fa1f fc87 	uxth.w	ip, r7
 800057c:	fb00 441e 	mls	r4, r0, lr, r4
 8000580:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000584:	fb0e f90c 	mul.w	r9, lr, ip
 8000588:	45a1      	cmp	r9, r4
 800058a:	fa02 f201 	lsl.w	r2, r2, r1
 800058e:	d90a      	bls.n	80005a6 <__udivmoddi4+0x1a6>
 8000590:	193c      	adds	r4, r7, r4
 8000592:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000596:	f080 8084 	bcs.w	80006a2 <__udivmoddi4+0x2a2>
 800059a:	45a1      	cmp	r9, r4
 800059c:	f240 8081 	bls.w	80006a2 <__udivmoddi4+0x2a2>
 80005a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005a4:	443c      	add	r4, r7
 80005a6:	eba4 0409 	sub.w	r4, r4, r9
 80005aa:	fa1f f983 	uxth.w	r9, r3
 80005ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80005b2:	fb00 4413 	mls	r4, r0, r3, r4
 80005b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80005be:	45a4      	cmp	ip, r4
 80005c0:	d907      	bls.n	80005d2 <__udivmoddi4+0x1d2>
 80005c2:	193c      	adds	r4, r7, r4
 80005c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005c8:	d267      	bcs.n	800069a <__udivmoddi4+0x29a>
 80005ca:	45a4      	cmp	ip, r4
 80005cc:	d965      	bls.n	800069a <__udivmoddi4+0x29a>
 80005ce:	3b02      	subs	r3, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005d6:	fba0 9302 	umull	r9, r3, r0, r2
 80005da:	eba4 040c 	sub.w	r4, r4, ip
 80005de:	429c      	cmp	r4, r3
 80005e0:	46ce      	mov	lr, r9
 80005e2:	469c      	mov	ip, r3
 80005e4:	d351      	bcc.n	800068a <__udivmoddi4+0x28a>
 80005e6:	d04e      	beq.n	8000686 <__udivmoddi4+0x286>
 80005e8:	b155      	cbz	r5, 8000600 <__udivmoddi4+0x200>
 80005ea:	ebb8 030e 	subs.w	r3, r8, lr
 80005ee:	eb64 040c 	sbc.w	r4, r4, ip
 80005f2:	fa04 f606 	lsl.w	r6, r4, r6
 80005f6:	40cb      	lsrs	r3, r1
 80005f8:	431e      	orrs	r6, r3
 80005fa:	40cc      	lsrs	r4, r1
 80005fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000600:	2100      	movs	r1, #0
 8000602:	e750      	b.n	80004a6 <__udivmoddi4+0xa6>
 8000604:	f1c2 0320 	rsb	r3, r2, #32
 8000608:	fa20 f103 	lsr.w	r1, r0, r3
 800060c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000610:	fa24 f303 	lsr.w	r3, r4, r3
 8000614:	4094      	lsls	r4, r2
 8000616:	430c      	orrs	r4, r1
 8000618:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800061c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000620:	fa1f f78c 	uxth.w	r7, ip
 8000624:	fbb3 f0f8 	udiv	r0, r3, r8
 8000628:	fb08 3110 	mls	r1, r8, r0, r3
 800062c:	0c23      	lsrs	r3, r4, #16
 800062e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000632:	fb00 f107 	mul.w	r1, r0, r7
 8000636:	4299      	cmp	r1, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x24c>
 800063a:	eb1c 0303 	adds.w	r3, ip, r3
 800063e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000642:	d22c      	bcs.n	800069e <__udivmoddi4+0x29e>
 8000644:	4299      	cmp	r1, r3
 8000646:	d92a      	bls.n	800069e <__udivmoddi4+0x29e>
 8000648:	3802      	subs	r0, #2
 800064a:	4463      	add	r3, ip
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb3 f1f8 	udiv	r1, r3, r8
 8000654:	fb08 3311 	mls	r3, r8, r1, r3
 8000658:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800065c:	fb01 f307 	mul.w	r3, r1, r7
 8000660:	42a3      	cmp	r3, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x276>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f101 36ff 	add.w	r6, r1, #4294967295
 800066c:	d213      	bcs.n	8000696 <__udivmoddi4+0x296>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d911      	bls.n	8000696 <__udivmoddi4+0x296>
 8000672:	3902      	subs	r1, #2
 8000674:	4464      	add	r4, ip
 8000676:	1ae4      	subs	r4, r4, r3
 8000678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800067c:	e739      	b.n	80004f2 <__udivmoddi4+0xf2>
 800067e:	4604      	mov	r4, r0
 8000680:	e6f0      	b.n	8000464 <__udivmoddi4+0x64>
 8000682:	4608      	mov	r0, r1
 8000684:	e706      	b.n	8000494 <__udivmoddi4+0x94>
 8000686:	45c8      	cmp	r8, r9
 8000688:	d2ae      	bcs.n	80005e8 <__udivmoddi4+0x1e8>
 800068a:	ebb9 0e02 	subs.w	lr, r9, r2
 800068e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000692:	3801      	subs	r0, #1
 8000694:	e7a8      	b.n	80005e8 <__udivmoddi4+0x1e8>
 8000696:	4631      	mov	r1, r6
 8000698:	e7ed      	b.n	8000676 <__udivmoddi4+0x276>
 800069a:	4603      	mov	r3, r0
 800069c:	e799      	b.n	80005d2 <__udivmoddi4+0x1d2>
 800069e:	4630      	mov	r0, r6
 80006a0:	e7d4      	b.n	800064c <__udivmoddi4+0x24c>
 80006a2:	46d6      	mov	lr, sl
 80006a4:	e77f      	b.n	80005a6 <__udivmoddi4+0x1a6>
 80006a6:	4463      	add	r3, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	e74d      	b.n	8000548 <__udivmoddi4+0x148>
 80006ac:	4606      	mov	r6, r0
 80006ae:	4623      	mov	r3, r4
 80006b0:	4608      	mov	r0, r1
 80006b2:	e70f      	b.n	80004d4 <__udivmoddi4+0xd4>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	e730      	b.n	800051c <__udivmoddi4+0x11c>
 80006ba:	bf00      	nop

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <debugCLITask>:

static void parseCommand(void);
static void processCommand(void);

void debugCLITask(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    bool commandRxd = false;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

    commandRxd = getCmdReceivedFlag();
 80006ca:	f00a fa63 	bl	800ab94 <getCmdReceivedFlag>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

    if(commandRxd == true)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d011      	beq.n	8000704 <debugCLITask+0x44>
    {
        parseCommand();
 80006e0:	f000 f818 	bl	8000714 <parseCommand>
        processCommand();
 80006e4:	f000 f83e 	bl	8000764 <processCommand>

        setCmdReceivedFlag(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f00a fa5f 	bl	800abac <setCmdReceivedFlag>

        memset(args,0,10);
 80006ee:	220a      	movs	r2, #10
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <debugCLITask+0x4c>)
 80006f4:	f00a fdb3 	bl	800b25e <memset>
        memset(commandBuffer,0,512);
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	2100      	movs	r1, #0
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <debugCLITask+0x50>)
 8000700:	f00a fdad 	bl	800b25e <memset>

    }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000314 	.word	0x24000314
 8000710:	24000114 	.word	0x24000114

08000714 <parseCommand>:

static void parseCommand(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint16_t pData = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	80bb      	strh	r3, [r7, #4]
    uint16_t cmdIdx = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	80fb      	strh	r3, [r7, #6]

    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000722:	e00d      	b.n	8000740 <parseCommand+0x2c>
    {
        if(pData == 0x0D)
 8000724:	88bb      	ldrh	r3, [r7, #4]
 8000726:	2b0d      	cmp	r3, #13
 8000728:	d102      	bne.n	8000730 <parseCommand+0x1c>
        {
            cmdIdx = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	80fb      	strh	r3, [r7, #6]
            break;
 800072e:	e013      	b.n	8000758 <parseCommand+0x44>
        }
        else
        {
        	commandBuffer[cmdIdx++] = (uint8_t)pData;
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	80fa      	strh	r2, [r7, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <parseCommand+0x4c>)
 800073e:	5499      	strb	r1, [r3, r2]
    while(E_CBUFF_DEQUEUE_OK == circularBufferDequeue(getRxBuffer(), (void *)&pData))
 8000740:	f00a fa44 	bl	800abcc <getRxBuffer>
 8000744:	4602      	mov	r2, r0
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f00a facb 	bl	800ace6 <circularBufferDequeue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b04      	cmp	r3, #4
 8000754:	d0e6      	beq.n	8000724 <parseCommand+0x10>
        }
    }
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000114 	.word	0x24000114

08000764 <processCommand>:

static void processCommand(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
    uint8_t argIndex = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
    sCommandStruct_t *commandStruct = mainCommandTable;
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <processCommand+0x13c>)
 8000770:	60bb      	str	r3, [r7, #8]
    uint8_t cmdIdx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
    bool cmdSucessFlag = false;
 8000776:	2300      	movs	r3, #0
 8000778:	71bb      	strb	r3, [r7, #6]


    args[argIndex] = strtok((char *)commandBuffer, " ");
 800077a:	7bfc      	ldrb	r4, [r7, #15]
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <processCommand+0x140>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <processCommand+0x144>)
 8000780:	f00a fd76 	bl	800b270 <strtok>
 8000784:	4603      	mov	r3, r0
 8000786:	4a49      	ldr	r2, [pc, #292]	@ (80008ac <processCommand+0x148>)
 8000788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 800078c:	e00b      	b.n	80007a6 <processCommand+0x42>
    {
        argIndex++;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3301      	adds	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
        args[argIndex] = strtok(NULL, " ");
 8000794:	7bfc      	ldrb	r4, [r7, #15]
 8000796:	4943      	ldr	r1, [pc, #268]	@ (80008a4 <processCommand+0x140>)
 8000798:	2000      	movs	r0, #0
 800079a:	f00a fd69 	bl	800b270 <strtok>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a42      	ldr	r2, [pc, #264]	@ (80008ac <processCommand+0x148>)
 80007a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    while (args[argIndex] != NULL)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4a40      	ldr	r2, [pc, #256]	@ (80008ac <processCommand+0x148>)
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ed      	bne.n	800078e <processCommand+0x2a>
    }

    cmdIdx = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
    argIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    while(commandStruct[cmdIdx].command != NULL)
 80007ba:	e04b      	b.n	8000854 <processCommand+0xf0>
    {
    	if(strcmp(commandStruct[cmdIdx].command, args[argIndex]) == 0)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4936      	ldr	r1, [pc, #216]	@ (80008ac <processCommand+0x148>)
 80007d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f7ff fd99 	bl	8000310 <strcmp>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d134      	bne.n	800084e <processCommand+0xea>
    	{
    		if(commandStruct[cmdIdx].fptr != NULL)
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4413      	add	r3, r2
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00e      	beq.n	8000818 <processCommand+0xb4>
			{
    			commandStruct[cmdIdx].fptr(args, response);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	4413      	add	r3, r2
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	4928      	ldr	r1, [pc, #160]	@ (80008b0 <processCommand+0x14c>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <processCommand+0x148>)
 8000810:	4798      	blx	r3
    			cmdSucessFlag = true;
 8000812:	2301      	movs	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
				break;
 8000816:	e028      	b.n	800086a <processCommand+0x106>
			}
    		else if(commandStruct[cmdIdx].subCommand != NULL)
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	461a      	mov	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <processCommand+0xf0>
    		{
				commandStruct = commandStruct[cmdIdx].subCommand;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	60bb      	str	r3, [r7, #8]
				argIndex++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
				cmdIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <processCommand+0xf0>
    		}
    	}
    	else
    	{
    		cmdIdx++;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
    while(commandStruct[cmdIdx].command != NULL)
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	461a      	mov	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1a8      	bne.n	80007bc <processCommand+0x58>
    	}
    }

    if( false == cmdSucessFlag)
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <processCommand+0x132>
    {
		uint8_t len = snprintf(response, 512, "%s", "Command Not OK\r\n");
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <processCommand+0x150>)
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <processCommand+0x154>)
 800087a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <processCommand+0x14c>)
 8000880:	f00a fc76 	bl	800b170 <sniprintf>
 8000884:	4603      	mov	r3, r0
 8000886:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, response, len, 100);
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	b29a      	uxth	r2, r3
 800088c:	2364      	movs	r3, #100	@ 0x64
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <processCommand+0x14c>)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <processCommand+0x158>)
 8000892:	f007 fccf 	bl	8008234 <HAL_UART_Transmit>
    }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	24000060 	.word	0x24000060
 80008a4:	0800c2a0 	.word	0x0800c2a0
 80008a8:	24000114 	.word	0x24000114
 80008ac:	24000314 	.word	0x24000314
 80008b0:	2400033c 	.word	0x2400033c
 80008b4:	0800c2a4 	.word	0x0800c2a4
 80008b8:	0800c2b8 	.word	0x0800c2b8
 80008bc:	24000564 	.word	0x24000564

080008c0 <getDateTime>:


static void getDateTime(char ** args, char *response)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08d      	sub	sp, #52	@ 0x34
 80008c4:	af06      	add	r7, sp, #24
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	sDateTimeConfig_t dateTime = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	f8c3 2003 	str.w	r2, [r3, #3]

	getRTCData(&dateTime);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a f882 	bl	800a9e4 <getRTCData>

	uint16_t length = snprintf(response, 512, "Time: %02u:%02u:%02u Date: %02u/%02u/%02u/%02u\r\n", dateTime.hours, dateTime.mins, dateTime.secs, dateTime.day, dateTime.date,  dateTime.month,  dateTime.year);
 80008e0:	7b3b      	ldrb	r3, [r7, #12]
 80008e2:	461e      	mov	r6, r3
 80008e4:	7b7b      	ldrb	r3, [r7, #13]
 80008e6:	7bba      	ldrb	r2, [r7, #14]
 80008e8:	7bf9      	ldrb	r1, [r7, #15]
 80008ea:	7c38      	ldrb	r0, [r7, #16]
 80008ec:	7c7c      	ldrb	r4, [r7, #17]
 80008ee:	7cbd      	ldrb	r5, [r7, #18]
 80008f0:	9505      	str	r5, [sp, #20]
 80008f2:	9404      	str	r4, [sp, #16]
 80008f4:	9003      	str	r0, [sp, #12]
 80008f6:	9102      	str	r1, [sp, #8]
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4633      	mov	r3, r6
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <getDateTime+0x64>)
 8000900:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00a fc33 	bl	800b170 <sniprintf>
 800090a:	4603      	mov	r3, r0
 800090c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 800090e:	8afa      	ldrh	r2, [r7, #22]
 8000910:	2364      	movs	r3, #100	@ 0x64
 8000912:	6839      	ldr	r1, [r7, #0]
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <getDateTime+0x68>)
 8000916:	f007 fc8d 	bl	8008234 <HAL_UART_Transmit>
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000922:	bf00      	nop
 8000924:	0800c2bc 	.word	0x0800c2bc
 8000928:	24000564 	.word	0x24000564

0800092c <setDateTime>:

static void setDateTime(char ** args, char *response)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000936:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <setDateTime+0xf8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	823b      	strh	r3, [r7, #16]
 800093c:	2300      	movs	r3, #0
 800093e:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4934      	ldr	r1, [pc, #208]	@ (8000a28 <setDateTime+0xfc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f00a fc89 	bl	800b270 <strtok>
 800095e:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000960:	e011      	b.n	8000986 <setDateTime+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000962:	69b8      	ldr	r0, [r7, #24]
 8000964:	f00a fa04 	bl	800ad70 <atoi>
 8000968:	4602      	mov	r2, r0
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	3320      	adds	r3, #32
 8000970:	443b      	add	r3, r7
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	3301      	adds	r3, #1
 800097a:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 800097c:	492a      	ldr	r1, [pc, #168]	@ (8000a28 <setDateTime+0xfc>)
 800097e:	2000      	movs	r0, #0
 8000980:	f00a fc76 	bl	800b270 <strtok>
 8000984:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <setDateTime+0x66>
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e7      	bls.n	8000962 <setDateTime+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000996:	7c7b      	ldrb	r3, [r7, #17]
 8000998:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 800099a:	7cbb      	ldrb	r3, [r7, #18]
 800099c:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 800099e:	7cfb      	ldrb	r3, [r7, #19]
 80009a0:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	491f      	ldr	r1, [pc, #124]	@ (8000a2c <setDateTime+0x100>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fc5e 	bl	800b270 <strtok>
 80009b4:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 80009b6:	e011      	b.n	80009dc <setDateTime+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 80009b8:	69b8      	ldr	r0, [r7, #24]
 80009ba:	f00a f9d9 	bl	800ad70 <atoi>
 80009be:	4602      	mov	r2, r0
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	3320      	adds	r3, #32
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 80009d2:	4916      	ldr	r1, [pc, #88]	@ (8000a2c <setDateTime+0x100>)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f00a fc4b 	bl	800b270 <strtok>
 80009da:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <setDateTime+0xbc>
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d9e7      	bls.n	80009b8 <setDateTime+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 80009e8:	7c3b      	ldrb	r3, [r7, #16]
 80009ea:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	72bb      	strb	r3, [r7, #10]

    setRTCData(&dateTime);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 ffab 	bl	800a954 <setRTCData>

    uint16_t length = snprintf(response, 512, "Time is Set\r\n");
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <setDateTime+0x104>)
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f00a fbb3 	bl	800b170 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000a0e:	8afa      	ldrh	r2, [r7, #22]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	6839      	ldr	r1, [r7, #0]
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <setDateTime+0x108>)
 8000a16:	f007 fc0d 	bl	8008234 <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800c308 	.word	0x0800c308
 8000a28:	0800c2f0 	.word	0x0800c2f0
 8000a2c:	0800c2f4 	.word	0x0800c2f4
 8000a30:	0800c2f8 	.word	0x0800c2f8
 8000a34:	24000564 	.word	0x24000564

08000a38 <setRtcAlarm>:


static void setRtcAlarm(char ** args, char *response)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    uint8_t dateTimeArray[3] = {0};
 8000a42:	4b3b      	ldr	r3, [pc, #236]	@ (8000b30 <setRtcAlarm+0xf8>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	823b      	strh	r3, [r7, #16]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74bb      	strb	r3, [r7, #18]
    uint8_t tokenIdx = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
    sDateTimeConfig_t dateTime = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	f8c3 2003 	str.w	r2, [r3, #3]

    //<< extracting date
    char *token = strtok(args[2], "/");
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4934      	ldr	r1, [pc, #208]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fc03 	bl	800b270 <strtok>
 8000a6a:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 4)
 8000a6c:	e011      	b.n	8000a92 <setRtcAlarm+0x5a>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000a6e:	69b8      	ldr	r0, [r7, #24]
 8000a70:	f00a f97e 	bl	800ad70 <atoi>
 8000a74:	4602      	mov	r2, r0
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	3320      	adds	r3, #32
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	3301      	adds	r3, #1
 8000a86:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, "/");
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <setRtcAlarm+0xfc>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f00a fbf0 	bl	800b270 <strtok>
 8000a90:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 4)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <setRtcAlarm+0x66>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9e7      	bls.n	8000a6e <setRtcAlarm+0x36>
    }

    dateTime.day	= dateTimeArray[0];
 8000a9e:	7c3b      	ldrb	r3, [r7, #16]
 8000aa0:	72fb      	strb	r3, [r7, #11]
    dateTime.date 	= dateTimeArray[1];
 8000aa2:	7c7b      	ldrb	r3, [r7, #17]
 8000aa4:	733b      	strb	r3, [r7, #12]
    dateTime.month 	= dateTimeArray[2];
 8000aa6:	7cbb      	ldrb	r3, [r7, #18]
 8000aa8:	737b      	strb	r3, [r7, #13]
    dateTime.year 	= dateTimeArray[3];
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	73bb      	strb	r3, [r7, #14]

    //<< extracting time
    tokenIdx = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    token = strtok(args[3], ":");
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	491f      	ldr	r1, [pc, #124]	@ (8000b38 <setRtcAlarm+0x100>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fbd8 	bl	800b270 <strtok>
 8000ac0:	61b8      	str	r0, [r7, #24]

    while (token != NULL && tokenIdx < 3)
 8000ac2:	e011      	b.n	8000ae8 <setRtcAlarm+0xb0>
    {
        dateTimeArray[tokenIdx] = (uint8_t)atoi(token);
 8000ac4:	69b8      	ldr	r0, [r7, #24]
 8000ac6:	f00a f953 	bl	800ad70 <atoi>
 8000aca:	4602      	mov	r2, r0
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c10 	strb.w	r2, [r3, #-16]
        tokenIdx++;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	3301      	adds	r3, #1
 8000adc:	77fb      	strb	r3, [r7, #31]
        token = strtok(NULL, ":");
 8000ade:	4916      	ldr	r1, [pc, #88]	@ (8000b38 <setRtcAlarm+0x100>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f00a fbc5 	bl	800b270 <strtok>
 8000ae6:	61b8      	str	r0, [r7, #24]
    while (token != NULL && tokenIdx < 3)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <setRtcAlarm+0xbc>
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9e7      	bls.n	8000ac4 <setRtcAlarm+0x8c>
    }

    dateTime.hours 	= dateTimeArray[0];
 8000af4:	7c3b      	ldrb	r3, [r7, #16]
 8000af6:	723b      	strb	r3, [r7, #8]
    dateTime.mins 	= dateTimeArray[1];
 8000af8:	7c7b      	ldrb	r3, [r7, #17]
 8000afa:	727b      	strb	r3, [r7, #9]
    dateTime.secs 	= dateTimeArray[2];
 8000afc:	7cbb      	ldrb	r3, [r7, #18]
 8000afe:	72bb      	strb	r3, [r7, #10]

    setRTCAlarm(&dateTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 ff9b 	bl	800aa40 <setRTCAlarm>

    uint16_t length = snprintf(response, 512, "Alarm is Set\r\n");
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <setRtcAlarm+0x104>)
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f00a fb2d 	bl	800b170 <sniprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	2364      	movs	r3, #100	@ 0x64
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <setRtcAlarm+0x108>)
 8000b22:	f007 fb87 	bl	8008234 <HAL_UART_Transmit>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800c308 	.word	0x0800c308
 8000b34:	0800c2f0 	.word	0x0800c2f0
 8000b38:	0800c2f4 	.word	0x0800c2f4
 8000b3c:	0800c30c 	.word	0x0800c30c
 8000b40:	24000564 	.word	0x24000564

08000b44 <setCSleep>:

static void setCSleep(char ** args, char *response)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    uint16_t length = snprintf(response, 512, "Device entered cSleep mode\r\n");
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <setCSleep+0x34>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f00a fb0b 	bl	800b170 <sniprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <setCSleep+0x38>)
 8000b66:	f007 fb65 	bl	8008234 <HAL_UART_Transmit>

	startSleepMode();
 8000b6a:	f009 fe7f 	bl	800a86c <startSleepMode>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800c31c 	.word	0x0800c31c
 8000b7c:	24000564 	.word	0x24000564

08000b80 <setStopMode>:

static void setStopMode(char ** args, char *response)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	setStopModeFlag(true);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f009 fe9e 	bl	800a8cc <setStopModeFlag>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setGreenLed>:

static void setGreenLed(char ** args, char *response)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81fb      	strh	r3, [r7, #14]

	if(strcmp(args[2], "on") == 0)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	491f      	ldr	r1, [pc, #124]	@ (8000c2c <setGreenLed+0x94>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fbae 	bl	8000310 <strcmp>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10d      	bne.n	8000bd6 <setGreenLed+0x3e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	481c      	ldr	r0, [pc, #112]	@ (8000c30 <setGreenLed+0x98>)
 8000bc0:	f003 ff36 	bl	8004a30 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Set\r\n");
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <setGreenLed+0x9c>)
 8000bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f00a fad0 	bl	800b170 <sniprintf>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	81fb      	strh	r3, [r7, #14]
 8000bd4:	e01f      	b.n	8000c16 <setGreenLed+0x7e>
	}
	else if(strcmp(args[2], "off") == 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4916      	ldr	r1, [pc, #88]	@ (8000c38 <setGreenLed+0xa0>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fb96 	bl	8000310 <strcmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10d      	bne.n	8000c06 <setGreenLed+0x6e>
	{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <setGreenLed+0x98>)
 8000bf0:	f003 ff1e 	bl	8004a30 <HAL_GPIO_WritePin>
		length = snprintf(response, 512, "Green Led Unset\r\n");
 8000bf4:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <setGreenLed+0xa4>)
 8000bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfa:	6838      	ldr	r0, [r7, #0]
 8000bfc:	f00a fab8 	bl	800b170 <sniprintf>
 8000c00:	4603      	mov	r3, r0
 8000c02:	81fb      	strh	r3, [r7, #14]
 8000c04:	e007      	b.n	8000c16 <setGreenLed+0x7e>
	}
	else
	{
		length = snprintf(response, 512, "Arg Error\r\n");
 8000c06:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <setGreenLed+0xa8>)
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f00a faaf 	bl	800b170 <sniprintf>
 8000c12:	4603      	mov	r3, r0
 8000c14:	81fb      	strh	r3, [r7, #14]
	}

	HAL_UART_Transmit(&huart3, response, length, 100);
 8000c16:	89fa      	ldrh	r2, [r7, #14]
 8000c18:	2364      	movs	r3, #100	@ 0x64
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <setGreenLed+0xac>)
 8000c1e:	f007 fb09 	bl	8008234 <HAL_UART_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800c33c 	.word	0x0800c33c
 8000c30:	58020400 	.word	0x58020400
 8000c34:	0800c340 	.word	0x0800c340
 8000c38:	0800c350 	.word	0x0800c350
 8000c3c:	0800c354 	.word	0x0800c354
 8000c40:	0800c368 	.word	0x0800c368
 8000c44:	24000564 	.word	0x24000564

08000c48 <systemInit>:
#include "debugUart.h"

uint8_t receptionData = 0;

void systemInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	debugUartInit();
 8000c4c:	f009 ff84 	bl	800ab58 <debugUartInit>

	RTCInit();
 8000c50:	f009 fe5e 	bl	800a910 <RTCInit>

	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <systemInit+0x24>)
 8000c5a:	f003 fee9 	bl	8004a30 <HAL_GPIO_WritePin>

	HAL_UART_Transmit_IT(&huart3, "System Started\r\n", 16);
 8000c5e:	2210      	movs	r2, #16
 8000c60:	4903      	ldr	r1, [pc, #12]	@ (8000c70 <systemInit+0x28>)
 8000c62:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <systemInit+0x2c>)
 8000c64:	f007 fb74 	bl	8008350 <HAL_UART_Transmit_IT>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	0800c374 	.word	0x0800c374
 8000c74:	24000564 	.word	0x24000564

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_DMA_Init+0x3c>)
 8000c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <MX_DMA_Init+0x3c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_DMA_Init+0x3c>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	200b      	movs	r0, #11
 8000ca2:	f000 feb0 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f000 fec7 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400

08000cb8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	@ 0x30
 8000cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b90      	ldr	r3, [pc, #576]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b8c      	ldr	r3, [pc, #560]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cec:	4b88      	ldr	r3, [pc, #544]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a87      	ldr	r2, [pc, #540]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b84      	ldr	r3, [pc, #528]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b81      	ldr	r3, [pc, #516]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a7f      	ldr	r2, [pc, #508]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b79      	ldr	r3, [pc, #484]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a78      	ldr	r2, [pc, #480]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b75      	ldr	r3, [pc, #468]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b72      	ldr	r3, [pc, #456]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a70      	ldr	r2, [pc, #448]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b6e      	ldr	r3, [pc, #440]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d64:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a69      	ldr	r2, [pc, #420]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d82:	4b63      	ldr	r3, [pc, #396]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	4a61      	ldr	r2, [pc, #388]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d92:	4b5f      	ldr	r3, [pc, #380]	@ (8000f10 <MX_GPIO_Init+0x258>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000da6:	485b      	ldr	r0, [pc, #364]	@ (8000f14 <MX_GPIO_Init+0x25c>)
 8000da8:	f003 fe42 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db2:	4859      	ldr	r0, [pc, #356]	@ (8000f18 <MX_GPIO_Init+0x260>)
 8000db4:	f003 fe3c 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4857      	ldr	r0, [pc, #348]	@ (8000f1c <MX_GPIO_Init+0x264>)
 8000dbe:	f003 fe37 	bl	8004a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4851      	ldr	r0, [pc, #324]	@ (8000f20 <MX_GPIO_Init+0x268>)
 8000dda:	f003 fc81 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dde:	2332      	movs	r3, #50	@ 0x32
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4849      	ldr	r0, [pc, #292]	@ (8000f20 <MX_GPIO_Init+0x268>)
 8000dfa:	f003 fc71 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dfe:	2386      	movs	r3, #134	@ 0x86
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4842      	ldr	r0, [pc, #264]	@ (8000f24 <MX_GPIO_Init+0x26c>)
 8000e1a:	f003 fc61 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e1e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4837      	ldr	r0, [pc, #220]	@ (8000f14 <MX_GPIO_Init+0x25c>)
 8000e38:	f003 fc52 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	482e      	ldr	r0, [pc, #184]	@ (8000f14 <MX_GPIO_Init+0x25c>)
 8000e5a:	f003 fc41 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4828      	ldr	r0, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0x260>)
 8000e78:	f003 fc32 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4825      	ldr	r0, [pc, #148]	@ (8000f28 <MX_GPIO_Init+0x270>)
 8000e92:	f003 fc25 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481c      	ldr	r0, [pc, #112]	@ (8000f24 <MX_GPIO_Init+0x26c>)
 8000eb4:	f003 fc14 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eb8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4814      	ldr	r0, [pc, #80]	@ (8000f28 <MX_GPIO_Init+0x270>)
 8000ed6:	f003 fc03 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <MX_GPIO_Init+0x264>)
 8000ef2:	f003 fbf5 	bl	80046e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2028      	movs	r0, #40	@ 0x28
 8000efc:	f000 fd83 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f00:	2028      	movs	r0, #40	@ 0x28
 8000f02:	f000 fd9a 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3730      	adds	r7, #48	@ 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58020c00 	.word	0x58020c00
 8000f1c:	58021000 	.word	0x58021000
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58021800 	.word	0x58021800

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fbfc 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f810 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f7ff febe 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3c:	f7ff fe9c 	bl	8000c78 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f40:	f000 fada 	bl	80014f8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000f44:	f000 f888 	bl	8001058 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  systemInit();
 8000f48:	f7ff fe7e 	bl	8000c48 <systemInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugCLITask();
 8000f4c:	f7ff fbb8 	bl	80006c0 <debugCLITask>

	  stopModeTask();
 8000f50:	f009 fc44 	bl	800a7dc <stopModeTask>
	  debugCLITask();
 8000f54:	bf00      	nop
 8000f56:	e7f9      	b.n	8000f4c <main+0x20>

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09c      	sub	sp, #112	@ 0x70
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	224c      	movs	r2, #76	@ 0x4c
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00a f979 	bl	800b25e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2220      	movs	r2, #32
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00a f973 	bl	800b25e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f003 fe05 	bl	8004b88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <SystemClock_Config+0xec>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a2f      	ldr	r2, [pc, #188]	@ (8001044 <SystemClock_Config+0xec>)
 8000f88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <SystemClock_Config+0xec>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f9a:	bf00      	nop
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <SystemClock_Config+0xec>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fa8:	d1f8      	bne.n	8000f9c <SystemClock_Config+0x44>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000faa:	f003 fd8f 	bl	8004acc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fae:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <SystemClock_Config+0xf0>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb2:	4a25      	ldr	r2, [pc, #148]	@ (8001048 <SystemClock_Config+0xf0>)
 8000fb4:	f023 0318 	bic.w	r3, r3, #24
 8000fb8:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000fd4:	f240 1313 	movw	r3, #275	@ 0x113
 8000fd8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fe00 	bl	8004bfc <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001002:	f000 f823 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	233f      	movs	r3, #63	@ 0x3f
 8001008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2303      	movs	r3, #3
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001012:	2308      	movs	r3, #8
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001016:	2340      	movs	r3, #64	@ 0x40
 8001018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800101a:	2340      	movs	r3, #64	@ 0x40
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001024:	2340      	movs	r3, #64	@ 0x40
 8001026:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2103      	movs	r1, #3
 800102c:	4618      	mov	r0, r3
 800102e:	f004 f9bf 	bl	80053b0 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001038:	f000 f808 	bl	800104c <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3770      	adds	r7, #112	@ 0x70
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58024800 	.word	0x58024800
 8001048:	58024400 	.word	0x58024400

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <Error_Handler+0x8>

08001058 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001070:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001072:	4a2c      	ldr	r2, [pc, #176]	@ (8001124 <MX_RTC_Init+0xcc>)
 8001074:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001076:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <MX_RTC_Init+0xc8>)
 800107e:	227f      	movs	r2, #127	@ 0x7f
 8001080:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001082:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001084:	22ff      	movs	r2, #255	@ 0xff
 8001086:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <MX_RTC_Init+0xc8>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_RTC_Init+0xc8>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010a0:	481f      	ldr	r0, [pc, #124]	@ (8001120 <MX_RTC_Init+0xc8>)
 80010a2:	f006 fad3 	bl	800764c <HAL_RTC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80010ac:	f7ff ffce 	bl	800104c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <MX_RTC_Init+0xc8>)
 80010cc:	f006 fb40 	bl	8007750 <HAL_RTC_SetTime>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80010d6:	f7ff ffb9 	bl	800104c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010da:	2301      	movs	r3, #1
 80010dc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010de:	2301      	movs	r3, #1
 80010e0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <MX_RTC_Init+0xc8>)
 80010f2:	f006 fc27 	bl	8007944 <HAL_RTC_SetDate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80010fc:	f7ff ffa6 	bl	800104c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001100:	2200      	movs	r2, #0
 8001102:	f245 010b 	movw	r1, #20491	@ 0x500b
 8001106:	4806      	ldr	r0, [pc, #24]	@ (8001120 <MX_RTC_Init+0xc8>)
 8001108:	f006 ff00 	bl	8007f0c <HAL_RTCEx_SetWakeUpTimer_IT>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8001112:	f7ff ff9b 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2400053c 	.word	0x2400053c
 8001124:	58004000 	.word	0x58004000

08001128 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0b0      	sub	sp, #192	@ 0xc0
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	22b8      	movs	r2, #184	@ 0xb8
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00a f890 	bl	800b25e <memset>
  if(rtcHandle->Instance==RTC)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <HAL_RTC_MspInit+0x6c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d121      	bne.n	800118c <HAL_RTC_MspInit+0x64>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fcb1 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800116c:	f7ff ff6e 	bl	800104c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_RTC_MspInit+0x70>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001174:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_RTC_MspInit+0x70>)
 8001176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800117a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fc40 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 fc57 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800118c:	bf00      	nop
 800118e:	37c0      	adds	r7, #192	@ 0xc0
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58004000 	.word	0x58004000
 8001198:	58024400 	.word	0x58024400

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_MspInit+0x30>)
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x30>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x30>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58024400 	.word	0x58024400

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f000 faf3 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <RTC_WKUP_IRQHandler+0x10>)
 8001236:	f006 ff59 	bl	80080ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2400053c 	.word	0x2400053c

08001244 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA1_Stream0_IRQHandler+0x10>)
 800124a:	f001 ff37 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	240005f8 	.word	0x240005f8

08001258 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <USART3_IRQHandler+0x10>)
 800125e:	f007 f957 	bl	8008510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000564 	.word	0x24000564

0800126c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001270:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001274:	f003 fc0f 	bl	8004a96 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_kill>:

int _kill(int pid, int sig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001296:	f00a f89d 	bl	800b3d4 <__errno>
 800129a:	4603      	mov	r3, r0
 800129c:	2216      	movs	r2, #22
 800129e:	601a      	str	r2, [r3, #0]
  return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_exit>:

void _exit (int status)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffe7 	bl	800128c <_kill>
  while (1) {}    /* Make sure we hang here */
 80012be:	bf00      	nop
 80012c0:	e7fd      	b.n	80012be <_exit+0x12>

080012c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e00a      	b.n	80012ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d4:	f3af 8000 	nop.w
 80012d8:	4601      	mov	r1, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbf0      	blt.n	80012d4 <_read+0x12>
  }

  return len;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e009      	b.n	8001322 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbf1      	blt.n	800130e <_write+0x12>
  }
  return len;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_close>:

int _close(int file)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800135c:	605a      	str	r2, [r3, #4]
  return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_isatty>:

int _isatty(int file)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f00a f802 	bl	800b3d4 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24050000 	.word	0x24050000
 80013fc:	00000400 	.word	0x00000400
 8001400:	24000560 	.word	0x24000560
 8001404:	240008a0 	.word	0x240008a0

08001408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <SystemInit+0xd0>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <SystemInit+0xd0>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <SystemInit+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	2b06      	cmp	r3, #6
 8001426:	d807      	bhi.n	8001438 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <SystemInit+0xd4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 030f 	bic.w	r3, r3, #15
 8001430:	4a2a      	ldr	r2, [pc, #168]	@ (80014dc <SystemInit+0xd4>)
 8001432:	f043 0307 	orr.w	r3, r3, #7
 8001436:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001438:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <SystemInit+0xd8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a28      	ldr	r2, [pc, #160]	@ (80014e0 <SystemInit+0xd8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <SystemInit+0xd8>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <SystemInit+0xd8>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4924      	ldr	r1, [pc, #144]	@ (80014e0 <SystemInit+0xd8>)
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <SystemInit+0xdc>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <SystemInit+0xd4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <SystemInit+0xd4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 030f 	bic.w	r3, r3, #15
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <SystemInit+0xd4>)
 800146c:	f043 0307 	orr.w	r3, r3, #7
 8001470:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <SystemInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001478:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <SystemInit+0xd8>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <SystemInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <SystemInit+0xd8>)
 8001486:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <SystemInit+0xe0>)
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <SystemInit+0xd8>)
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <SystemInit+0xe4>)
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <SystemInit+0xd8>)
 8001492:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <SystemInit+0xe8>)
 8001494:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <SystemInit+0xd8>)
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <SystemInit+0xe8>)
 80014a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <SystemInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <SystemInit+0xd8>)
 80014aa:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <SystemInit+0xe8>)
 80014ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <SystemInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <SystemInit+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <SystemInit+0xd8>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <SystemInit+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <SystemInit+0xec>)
 80014c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	52002000 	.word	0x52002000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e8:	02020200 	.word	0x02020200
 80014ec:	01ff0000 	.word	0x01ff0000
 80014f0:	01010280 	.word	0x01010280
 80014f4:	52004000 	.word	0x52004000

080014f8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 80014fe:	4a23      	ldr	r2, [pc, #140]	@ (800158c <MX_USART3_UART_Init+0x94>)
 8001500:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001540:	4811      	ldr	r0, [pc, #68]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001542:	f006 fe27 	bl	8008194 <HAL_UART_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800154c:	f7ff fd7e 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001554:	f009 f857 	bl	800a606 <HAL_UARTEx_SetTxFifoThreshold>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800155e:	f7ff fd75 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	4808      	ldr	r0, [pc, #32]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001566:	f009 f88c 	bl	800a682 <HAL_UARTEx_SetRxFifoThreshold>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001570:	f7ff fd6c 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_USART3_UART_Init+0x90>)
 8001576:	f009 f80d 	bl	800a594 <HAL_UARTEx_DisableFifoMode>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001580:	f7ff fd64 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24000564 	.word	0x24000564
 800158c:	40004800 	.word	0x40004800

08001590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0b8      	sub	sp, #224	@ 0xe0
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	22b8      	movs	r2, #184	@ 0xb8
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f009 fe54 	bl	800b25e <memset>
  if(uartHandle->Instance==USART3)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a42      	ldr	r2, [pc, #264]	@ (80016c4 <HAL_UART_MspInit+0x134>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d17d      	bne.n	80016bc <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c0:	f04f 0202 	mov.w	r2, #2
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fa76 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015e2:	f7ff fd33 	bl	800104c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e6:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 80015e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ec:	4a36      	ldr	r2, [pc, #216]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 80015ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 80015f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001604:	4b30      	ldr	r3, [pc, #192]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	4a2f      	ldr	r2, [pc, #188]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001614:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <HAL_UART_MspInit+0x138>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001622:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001626:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800163c:	2307      	movs	r3, #7
 800163e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001642:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001646:	4619      	mov	r1, r3
 8001648:	4820      	ldr	r0, [pc, #128]	@ (80016cc <HAL_UART_MspInit+0x13c>)
 800164a:	f003 f849 	bl	80046e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001650:	4a20      	ldr	r2, [pc, #128]	@ (80016d4 <HAL_UART_MspInit+0x144>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001656:	222d      	movs	r2, #45	@ 0x2d
 8001658:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 800167c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001680:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 800168a:	2200      	movs	r2, #0
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800168e:	4810      	ldr	r0, [pc, #64]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 8001690:	f000 f9ee 	bl	8001a70 <HAL_DMA_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800169a:	f7ff fcd7 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 80016a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_UART_MspInit+0x140>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2027      	movs	r0, #39	@ 0x27
 80016b2:	f000 f9a8 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016b6:	2027      	movs	r0, #39	@ 0x27
 80016b8:	f000 f9bf 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	37e0      	adds	r7, #224	@ 0xe0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004800 	.word	0x40004800
 80016c8:	58024400 	.word	0x58024400
 80016cc:	58020c00 	.word	0x58020c00
 80016d0:	240005f8 	.word	0x240005f8
 80016d4:	40020010 	.word	0x40020010

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016dc:	f7ff fe94 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f009 fe6b 	bl	800b3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fc0f 	bl	8000f2c <main>
  bx  lr
 800170e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001714:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001718:	240000f8 	.word	0x240000f8
  ldr r2, =_sidata
 800171c:	0800c640 	.word	0x0800c640
  ldr r2, =_sbss
 8001720:	240000f8 	.word	0x240000f8
  ldr r4, =_ebss
 8001724:	2400089c 	.word	0x2400089c

08001728 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC3_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f95c 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001738:	f003 fff0 	bl	800571c <HAL_RCC_GetSysClockFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_Init+0x68>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4913      	ldr	r1, [pc, #76]	@ (8001798 <HAL_Init+0x6c>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_Init+0x68>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_Init+0x6c>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <HAL_Init+0x70>)
 800176e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001770:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <HAL_Init+0x74>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f814 	bl	80017a4 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e002      	b.n	800178c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001786:	f7ff fd09 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58024400 	.word	0x58024400
 8001798:	0800c40c 	.word	0x0800c40c
 800179c:	24000088 	.word	0x24000088
 80017a0:	24000084 	.word	0x24000084

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_InitTick+0x60>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e021      	b.n	80017fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_InitTick+0x64>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_InitTick+0x60>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f941 	bl	8001a56 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 f90b 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x68>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000090 	.word	0x24000090
 8001808:	24000084 	.word	0x24000084
 800180c:	2400008c 	.word	0x2400008c

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	24000090 	.word	0x24000090
 8001834:	24000670 	.word	0x24000670

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	24000670 	.word	0x24000670

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff40 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff33 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa4 	bl	80019ac <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fede 	bl	8001838 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e312      	b.n	80020ae <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a66      	ldr	r2, [pc, #408]	@ (8001c28 <HAL_DMA_Init+0x1b8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d04a      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a65      	ldr	r2, [pc, #404]	@ (8001c2c <HAL_DMA_Init+0x1bc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d045      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <HAL_DMA_Init+0x1c0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d040      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a62      	ldr	r2, [pc, #392]	@ (8001c34 <HAL_DMA_Init+0x1c4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d03b      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	@ (8001c38 <HAL_DMA_Init+0x1c8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d036      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c3c <HAL_DMA_Init+0x1cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d031      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <HAL_DMA_Init+0x1d0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02c      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c44 <HAL_DMA_Init+0x1d4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d027      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c48 <HAL_DMA_Init+0x1d8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d022      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a59      	ldr	r2, [pc, #356]	@ (8001c4c <HAL_DMA_Init+0x1dc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01d      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_DMA_Init+0x1e0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_DMA_Init+0x1e4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a54      	ldr	r2, [pc, #336]	@ (8001c58 <HAL_DMA_Init+0x1e8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a53      	ldr	r2, [pc, #332]	@ (8001c5c <HAL_DMA_Init+0x1ec>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a51      	ldr	r2, [pc, #324]	@ (8001c60 <HAL_DMA_Init+0x1f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_DMA_Init+0xb8>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_DMA_Init+0x1f4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0xbc>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_DMA_Init+0xbe>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 813c 	beq.w	8001dac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a37      	ldr	r2, [pc, #220]	@ (8001c28 <HAL_DMA_Init+0x1b8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d04a      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a36      	ldr	r2, [pc, #216]	@ (8001c2c <HAL_DMA_Init+0x1bc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d045      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a34      	ldr	r2, [pc, #208]	@ (8001c30 <HAL_DMA_Init+0x1c0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d040      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a33      	ldr	r2, [pc, #204]	@ (8001c34 <HAL_DMA_Init+0x1c4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d03b      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a31      	ldr	r2, [pc, #196]	@ (8001c38 <HAL_DMA_Init+0x1c8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d036      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a30      	ldr	r2, [pc, #192]	@ (8001c3c <HAL_DMA_Init+0x1cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d031      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2e      	ldr	r2, [pc, #184]	@ (8001c40 <HAL_DMA_Init+0x1d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02c      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <HAL_DMA_Init+0x1d4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d027      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2b      	ldr	r2, [pc, #172]	@ (8001c48 <HAL_DMA_Init+0x1d8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c4c <HAL_DMA_Init+0x1dc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01d      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	@ (8001c50 <HAL_DMA_Init+0x1e0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <HAL_DMA_Init+0x1e4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <HAL_DMA_Init+0x1e8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a24      	ldr	r2, [pc, #144]	@ (8001c5c <HAL_DMA_Init+0x1ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <HAL_DMA_Init+0x1f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Init+0x174>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	@ (8001c64 <HAL_DMA_Init+0x1f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d108      	bne.n	8001bf6 <HAL_DMA_Init+0x186>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e007      	b.n	8001c06 <HAL_DMA_Init+0x196>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c06:	e02f      	b.n	8001c68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c08:	f7ff fe16 	bl	8001838 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d928      	bls.n	8001c68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2203      	movs	r2, #3
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e242      	b.n	80020ae <HAL_DMA_Init+0x63e>
 8001c28:	40020010 	.word	0x40020010
 8001c2c:	40020028 	.word	0x40020028
 8001c30:	40020040 	.word	0x40020040
 8001c34:	40020058 	.word	0x40020058
 8001c38:	40020070 	.word	0x40020070
 8001c3c:	40020088 	.word	0x40020088
 8001c40:	400200a0 	.word	0x400200a0
 8001c44:	400200b8 	.word	0x400200b8
 8001c48:	40020410 	.word	0x40020410
 8001c4c:	40020428 	.word	0x40020428
 8001c50:	40020440 	.word	0x40020440
 8001c54:	40020458 	.word	0x40020458
 8001c58:	40020470 	.word	0x40020470
 8001c5c:	40020488 	.word	0x40020488
 8001c60:	400204a0 	.word	0x400204a0
 8001c64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1c8      	bne.n	8001c08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4b83      	ldr	r3, [pc, #524]	@ (8001e90 <HAL_DMA_Init+0x420>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b28      	cmp	r3, #40	@ 0x28
 8001cd2:	d903      	bls.n	8001cdc <HAL_DMA_Init+0x26c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cda:	d91f      	bls.n	8001d1c <HAL_DMA_Init+0x2ac>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ce2:	d903      	bls.n	8001cec <HAL_DMA_Init+0x27c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b42      	cmp	r3, #66	@ 0x42
 8001cea:	d917      	bls.n	8001d1c <HAL_DMA_Init+0x2ac>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b46      	cmp	r3, #70	@ 0x46
 8001cf2:	d903      	bls.n	8001cfc <HAL_DMA_Init+0x28c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b48      	cmp	r3, #72	@ 0x48
 8001cfa:	d90f      	bls.n	8001d1c <HAL_DMA_Init+0x2ac>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b4e      	cmp	r3, #78	@ 0x4e
 8001d02:	d903      	bls.n	8001d0c <HAL_DMA_Init+0x29c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b52      	cmp	r3, #82	@ 0x52
 8001d0a:	d907      	bls.n	8001d1c <HAL_DMA_Init+0x2ac>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b73      	cmp	r3, #115	@ 0x73
 8001d12:	d905      	bls.n	8001d20 <HAL_DMA_Init+0x2b0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b77      	cmp	r3, #119	@ 0x77
 8001d1a:	d801      	bhi.n	8001d20 <HAL_DMA_Init+0x2b0>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_DMA_Init+0x2b2>
 8001d20:	2300      	movs	r3, #0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d2c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f023 0307 	bic.w	r3, r3, #7
 8001d44:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d117      	bne.n	8001d88 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00e      	beq.n	8001d88 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f002 fb2e 	bl	80043cc <DMA_CheckFifoParam>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2240      	movs	r2, #64	@ 0x40
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e192      	b.n	80020ae <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f002 fa69 	bl	8004268 <DMA_CalcBaseAndBitshift>
 8001d96:	4603      	mov	r3, r0
 8001d98:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	223f      	movs	r2, #63	@ 0x3f
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	e0c8      	b.n	8001f3e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <HAL_DMA_Init+0x424>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <HAL_DMA_Init+0x428>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d01d      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a35      	ldr	r2, [pc, #212]	@ (8001e9c <HAL_DMA_Init+0x42c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a34      	ldr	r2, [pc, #208]	@ (8001ea0 <HAL_DMA_Init+0x430>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a32      	ldr	r2, [pc, #200]	@ (8001ea4 <HAL_DMA_Init+0x434>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a31      	ldr	r2, [pc, #196]	@ (8001ea8 <HAL_DMA_Init+0x438>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2f      	ldr	r2, [pc, #188]	@ (8001eac <HAL_DMA_Init+0x43c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Init+0x38c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb0 <HAL_DMA_Init+0x440>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Init+0x390>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_Init+0x392>
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8092 	beq.w	8001f2c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_DMA_Init+0x424>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d021      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a20      	ldr	r2, [pc, #128]	@ (8001e98 <HAL_DMA_Init+0x428>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01c      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_DMA_Init+0x42c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d017      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <HAL_DMA_Init+0x430>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_DMA_Init+0x434>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <HAL_DMA_Init+0x438>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d008      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_DMA_Init+0x43c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d003      	beq.n	8001e56 <HAL_DMA_Init+0x3e6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <HAL_DMA_Init+0x440>)
 8001e54:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_DMA_Init+0x444>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b40      	cmp	r3, #64	@ 0x40
 8001e7c:	d01c      	beq.n	8001eb8 <HAL_DMA_Init+0x448>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b80      	cmp	r3, #128	@ 0x80
 8001e84:	d102      	bne.n	8001e8c <HAL_DMA_Init+0x41c>
 8001e86:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e8a:	e016      	b.n	8001eba <HAL_DMA_Init+0x44a>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e014      	b.n	8001eba <HAL_DMA_Init+0x44a>
 8001e90:	fe10803f 	.word	0xfe10803f
 8001e94:	58025408 	.word	0x58025408
 8001e98:	5802541c 	.word	0x5802541c
 8001e9c:	58025430 	.word	0x58025430
 8001ea0:	58025444 	.word	0x58025444
 8001ea4:	58025458 	.word	0x58025458
 8001ea8:	5802546c 	.word	0x5802546c
 8001eac:	58025480 	.word	0x58025480
 8001eb0:	58025494 	.word	0x58025494
 8001eb4:	fffe000f 	.word	0xfffe000f
 8001eb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ee8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b6e      	ldr	r3, [pc, #440]	@ (80020b8 <HAL_DMA_Init+0x648>)
 8001f00:	4413      	add	r3, r2
 8001f02:	4a6e      	ldr	r2, [pc, #440]	@ (80020bc <HAL_DMA_Init+0x64c>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	009a      	lsls	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f002 f9a9 	bl	8004268 <DMA_CalcBaseAndBitshift>
 8001f16:	4603      	mov	r3, r0
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2201      	movs	r2, #1
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	e008      	b.n	8001f3e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0b7      	b.n	80020ae <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5f      	ldr	r2, [pc, #380]	@ (80020c0 <HAL_DMA_Init+0x650>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d072      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80020c4 <HAL_DMA_Init+0x654>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d06d      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	@ (80020c8 <HAL_DMA_Init+0x658>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d068      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <HAL_DMA_Init+0x65c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d063      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a59      	ldr	r2, [pc, #356]	@ (80020d0 <HAL_DMA_Init+0x660>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a57      	ldr	r2, [pc, #348]	@ (80020d4 <HAL_DMA_Init+0x664>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d059      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a56      	ldr	r2, [pc, #344]	@ (80020d8 <HAL_DMA_Init+0x668>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d054      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a54      	ldr	r2, [pc, #336]	@ (80020dc <HAL_DMA_Init+0x66c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d04f      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a53      	ldr	r2, [pc, #332]	@ (80020e0 <HAL_DMA_Init+0x670>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d04a      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	@ (80020e4 <HAL_DMA_Init+0x674>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d045      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a50      	ldr	r2, [pc, #320]	@ (80020e8 <HAL_DMA_Init+0x678>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d040      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80020ec <HAL_DMA_Init+0x67c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d03b      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a4d      	ldr	r2, [pc, #308]	@ (80020f0 <HAL_DMA_Init+0x680>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d036      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80020f4 <HAL_DMA_Init+0x684>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4a      	ldr	r2, [pc, #296]	@ (80020f8 <HAL_DMA_Init+0x688>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02c      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a48      	ldr	r2, [pc, #288]	@ (80020fc <HAL_DMA_Init+0x68c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d027      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	@ (8002100 <HAL_DMA_Init+0x690>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a45      	ldr	r2, [pc, #276]	@ (8002104 <HAL_DMA_Init+0x694>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a44      	ldr	r2, [pc, #272]	@ (8002108 <HAL_DMA_Init+0x698>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d018      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_DMA_Init+0x69c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a41      	ldr	r2, [pc, #260]	@ (8002110 <HAL_DMA_Init+0x6a0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3f      	ldr	r2, [pc, #252]	@ (8002114 <HAL_DMA_Init+0x6a4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_DMA_Init+0x5be>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3e      	ldr	r2, [pc, #248]	@ (8002118 <HAL_DMA_Init+0x6a8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Init+0x5be>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <HAL_DMA_Init+0x6ac>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_DMA_Init+0x5c2>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_DMA_Init+0x5c4>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f002 fa43 	bl	80044c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b80      	cmp	r3, #128	@ 0x80
 8002044:	d102      	bne.n	800204c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002060:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <HAL_DMA_Init+0x61c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d80c      	bhi.n	800208c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fac0 	bl	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e008      	b.n	800209e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	a7fdabf8 	.word	0xa7fdabf8
 80020bc:	cccccccd 	.word	0xcccccccd
 80020c0:	40020010 	.word	0x40020010
 80020c4:	40020028 	.word	0x40020028
 80020c8:	40020040 	.word	0x40020040
 80020cc:	40020058 	.word	0x40020058
 80020d0:	40020070 	.word	0x40020070
 80020d4:	40020088 	.word	0x40020088
 80020d8:	400200a0 	.word	0x400200a0
 80020dc:	400200b8 	.word	0x400200b8
 80020e0:	40020410 	.word	0x40020410
 80020e4:	40020428 	.word	0x40020428
 80020e8:	40020440 	.word	0x40020440
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020470 	.word	0x40020470
 80020f4:	40020488 	.word	0x40020488
 80020f8:	400204a0 	.word	0x400204a0
 80020fc:	400204b8 	.word	0x400204b8
 8002100:	58025408 	.word	0x58025408
 8002104:	5802541c 	.word	0x5802541c
 8002108:	58025430 	.word	0x58025430
 800210c:	58025444 	.word	0x58025444
 8002110:	58025458 	.word	0x58025458
 8002114:	5802546c 	.word	0x5802546c
 8002118:	58025480 	.word	0x58025480
 800211c:	58025494 	.word	0x58025494

08002120 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e226      	b.n	800258a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_DMA_Start_IT+0x2a>
 8002146:	2302      	movs	r3, #2
 8002148:	e21f      	b.n	800258a <HAL_DMA_Start_IT+0x46a>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	f040 820a 	bne.w	8002574 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a68      	ldr	r2, [pc, #416]	@ (8002314 <HAL_DMA_Start_IT+0x1f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04a      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a66      	ldr	r2, [pc, #408]	@ (8002318 <HAL_DMA_Start_IT+0x1f8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d045      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a65      	ldr	r2, [pc, #404]	@ (800231c <HAL_DMA_Start_IT+0x1fc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d040      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a63      	ldr	r2, [pc, #396]	@ (8002320 <HAL_DMA_Start_IT+0x200>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d03b      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <HAL_DMA_Start_IT+0x204>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d036      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a60      	ldr	r2, [pc, #384]	@ (8002328 <HAL_DMA_Start_IT+0x208>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5f      	ldr	r2, [pc, #380]	@ (800232c <HAL_DMA_Start_IT+0x20c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d02c      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002330 <HAL_DMA_Start_IT+0x210>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d027      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002334 <HAL_DMA_Start_IT+0x214>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d022      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HAL_DMA_Start_IT+0x218>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a59      	ldr	r2, [pc, #356]	@ (800233c <HAL_DMA_Start_IT+0x21c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d018      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a57      	ldr	r2, [pc, #348]	@ (8002340 <HAL_DMA_Start_IT+0x220>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a56      	ldr	r2, [pc, #344]	@ (8002344 <HAL_DMA_Start_IT+0x224>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00e      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a54      	ldr	r2, [pc, #336]	@ (8002348 <HAL_DMA_Start_IT+0x228>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a53      	ldr	r2, [pc, #332]	@ (800234c <HAL_DMA_Start_IT+0x22c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_DMA_Start_IT+0xee>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a51      	ldr	r2, [pc, #324]	@ (8002350 <HAL_DMA_Start_IT+0x230>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <HAL_DMA_Start_IT+0x100>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_DMA_Start_IT+0x110>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f001 fe6a 	bl	8003f10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a34      	ldr	r2, [pc, #208]	@ (8002314 <HAL_DMA_Start_IT+0x1f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d04a      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a33      	ldr	r2, [pc, #204]	@ (8002318 <HAL_DMA_Start_IT+0x1f8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d045      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a31      	ldr	r2, [pc, #196]	@ (800231c <HAL_DMA_Start_IT+0x1fc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d040      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a30      	ldr	r2, [pc, #192]	@ (8002320 <HAL_DMA_Start_IT+0x200>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d03b      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2e      	ldr	r2, [pc, #184]	@ (8002324 <HAL_DMA_Start_IT+0x204>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d036      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <HAL_DMA_Start_IT+0x208>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d031      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2b      	ldr	r2, [pc, #172]	@ (800232c <HAL_DMA_Start_IT+0x20c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02c      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_DMA_Start_IT+0x210>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d027      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <HAL_DMA_Start_IT+0x214>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d022      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <HAL_DMA_Start_IT+0x218>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d01d      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a25      	ldr	r2, [pc, #148]	@ (800233c <HAL_DMA_Start_IT+0x21c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d018      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a24      	ldr	r2, [pc, #144]	@ (8002340 <HAL_DMA_Start_IT+0x220>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <HAL_DMA_Start_IT+0x224>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_DMA_Start_IT+0x228>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	@ (800234c <HAL_DMA_Start_IT+0x22c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d004      	beq.n	80022dc <HAL_DMA_Start_IT+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_DMA_Start_IT+0x230>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Start_IT+0x1c0>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_DMA_Start_IT+0x1c2>
 80022e0:	2300      	movs	r3, #0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d036      	beq.n	8002354 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 021e 	bic.w	r2, r3, #30
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0216 	orr.w	r2, r2, #22
 80022f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03e      	beq.n	8002380 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0208 	orr.w	r2, r2, #8
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e035      	b.n	8002380 <HAL_DMA_Start_IT+0x260>
 8002314:	40020010 	.word	0x40020010
 8002318:	40020028 	.word	0x40020028
 800231c:	40020040 	.word	0x40020040
 8002320:	40020058 	.word	0x40020058
 8002324:	40020070 	.word	0x40020070
 8002328:	40020088 	.word	0x40020088
 800232c:	400200a0 	.word	0x400200a0
 8002330:	400200b8 	.word	0x400200b8
 8002334:	40020410 	.word	0x40020410
 8002338:	40020428 	.word	0x40020428
 800233c:	40020440 	.word	0x40020440
 8002340:	40020458 	.word	0x40020458
 8002344:	40020470 	.word	0x40020470
 8002348:	40020488 	.word	0x40020488
 800234c:	400204a0 	.word	0x400204a0
 8002350:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 020e 	bic.w	r2, r3, #14
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 020a 	orr.w	r2, r2, #10
 8002366:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0204 	orr.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	@ (8002594 <HAL_DMA_Start_IT+0x474>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d072      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a82      	ldr	r2, [pc, #520]	@ (8002598 <HAL_DMA_Start_IT+0x478>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d06d      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a80      	ldr	r2, [pc, #512]	@ (800259c <HAL_DMA_Start_IT+0x47c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d068      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7f      	ldr	r2, [pc, #508]	@ (80025a0 <HAL_DMA_Start_IT+0x480>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d063      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_DMA_Start_IT+0x484>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d05e      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7c      	ldr	r2, [pc, #496]	@ (80025a8 <HAL_DMA_Start_IT+0x488>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d059      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	@ (80025ac <HAL_DMA_Start_IT+0x48c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d054      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a79      	ldr	r2, [pc, #484]	@ (80025b0 <HAL_DMA_Start_IT+0x490>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04f      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a77      	ldr	r2, [pc, #476]	@ (80025b4 <HAL_DMA_Start_IT+0x494>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a76      	ldr	r2, [pc, #472]	@ (80025b8 <HAL_DMA_Start_IT+0x498>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a74      	ldr	r2, [pc, #464]	@ (80025bc <HAL_DMA_Start_IT+0x49c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a73      	ldr	r2, [pc, #460]	@ (80025c0 <HAL_DMA_Start_IT+0x4a0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a71      	ldr	r2, [pc, #452]	@ (80025c4 <HAL_DMA_Start_IT+0x4a4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a70      	ldr	r2, [pc, #448]	@ (80025c8 <HAL_DMA_Start_IT+0x4a8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6e      	ldr	r2, [pc, #440]	@ (80025cc <HAL_DMA_Start_IT+0x4ac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6d      	ldr	r2, [pc, #436]	@ (80025d0 <HAL_DMA_Start_IT+0x4b0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6b      	ldr	r2, [pc, #428]	@ (80025d4 <HAL_DMA_Start_IT+0x4b4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6a      	ldr	r2, [pc, #424]	@ (80025d8 <HAL_DMA_Start_IT+0x4b8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	@ (80025dc <HAL_DMA_Start_IT+0x4bc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <HAL_DMA_Start_IT+0x4c0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a65      	ldr	r2, [pc, #404]	@ (80025e4 <HAL_DMA_Start_IT+0x4c4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a64      	ldr	r2, [pc, #400]	@ (80025e8 <HAL_DMA_Start_IT+0x4c8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a62      	ldr	r2, [pc, #392]	@ (80025ec <HAL_DMA_Start_IT+0x4cc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Start_IT+0x350>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_DMA_Start_IT+0x4d0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_DMA_Start_IT+0x354>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_DMA_Start_IT+0x356>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01a      	beq.n	80024b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002496:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a37      	ldr	r2, [pc, #220]	@ (8002594 <HAL_DMA_Start_IT+0x474>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d04a      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <HAL_DMA_Start_IT+0x478>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d045      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a34      	ldr	r2, [pc, #208]	@ (800259c <HAL_DMA_Start_IT+0x47c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d040      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a33      	ldr	r2, [pc, #204]	@ (80025a0 <HAL_DMA_Start_IT+0x480>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d03b      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a31      	ldr	r2, [pc, #196]	@ (80025a4 <HAL_DMA_Start_IT+0x484>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d036      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a30      	ldr	r2, [pc, #192]	@ (80025a8 <HAL_DMA_Start_IT+0x488>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2e      	ldr	r2, [pc, #184]	@ (80025ac <HAL_DMA_Start_IT+0x48c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d02c      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a2d      	ldr	r2, [pc, #180]	@ (80025b0 <HAL_DMA_Start_IT+0x490>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d027      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2b      	ldr	r2, [pc, #172]	@ (80025b4 <HAL_DMA_Start_IT+0x494>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d022      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2a      	ldr	r2, [pc, #168]	@ (80025b8 <HAL_DMA_Start_IT+0x498>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d01d      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <HAL_DMA_Start_IT+0x49c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d018      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a27      	ldr	r2, [pc, #156]	@ (80025c0 <HAL_DMA_Start_IT+0x4a0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a25      	ldr	r2, [pc, #148]	@ (80025c4 <HAL_DMA_Start_IT+0x4a4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00e      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <HAL_DMA_Start_IT+0x4a8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_DMA_Start_IT+0x4ac>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Start_IT+0x430>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <HAL_DMA_Start_IT+0x4b0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d108      	bne.n	8002562 <HAL_DMA_Start_IT+0x442>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e012      	b.n	8002588 <HAL_DMA_Start_IT+0x468>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e009      	b.n	8002588 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002588:	7dfb      	ldrb	r3, [r7, #23]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	58025408 	.word	0x58025408
 80025d8:	5802541c 	.word	0x5802541c
 80025dc:	58025430 	.word	0x58025430
 80025e0:	58025444 	.word	0x58025444
 80025e4:	58025458 	.word	0x58025458
 80025e8:	5802546c 	.word	0x5802546c
 80025ec:	58025480 	.word	0x58025480
 80025f0:	58025494 	.word	0x58025494

080025f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff f91c 	bl	8001838 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e2dc      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e2cd      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a76      	ldr	r2, [pc, #472]	@ (8002808 <HAL_DMA_Abort+0x214>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d04a      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a74      	ldr	r2, [pc, #464]	@ (800280c <HAL_DMA_Abort+0x218>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d045      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	@ (8002810 <HAL_DMA_Abort+0x21c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d040      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a71      	ldr	r2, [pc, #452]	@ (8002814 <HAL_DMA_Abort+0x220>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d03b      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a70      	ldr	r2, [pc, #448]	@ (8002818 <HAL_DMA_Abort+0x224>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d036      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6e      	ldr	r2, [pc, #440]	@ (800281c <HAL_DMA_Abort+0x228>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6d      	ldr	r2, [pc, #436]	@ (8002820 <HAL_DMA_Abort+0x22c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d02c      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	@ (8002824 <HAL_DMA_Abort+0x230>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d027      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6a      	ldr	r2, [pc, #424]	@ (8002828 <HAL_DMA_Abort+0x234>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a68      	ldr	r2, [pc, #416]	@ (800282c <HAL_DMA_Abort+0x238>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01d      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a67      	ldr	r2, [pc, #412]	@ (8002830 <HAL_DMA_Abort+0x23c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a65      	ldr	r2, [pc, #404]	@ (8002834 <HAL_DMA_Abort+0x240>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a64      	ldr	r2, [pc, #400]	@ (8002838 <HAL_DMA_Abort+0x244>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a62      	ldr	r2, [pc, #392]	@ (800283c <HAL_DMA_Abort+0x248>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a61      	ldr	r2, [pc, #388]	@ (8002840 <HAL_DMA_Abort+0x24c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Abort+0xd6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002844 <HAL_DMA_Abort+0x250>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Abort+0xda>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_DMA_Abort+0xdc>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 021e 	bic.w	r2, r2, #30
 80026e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e00a      	b.n	8002712 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 020e 	bic.w	r2, r2, #14
 800270a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3c      	ldr	r2, [pc, #240]	@ (8002808 <HAL_DMA_Abort+0x214>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d072      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <HAL_DMA_Abort+0x218>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d06d      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <HAL_DMA_Abort+0x21c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d068      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	@ (8002814 <HAL_DMA_Abort+0x220>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a36      	ldr	r2, [pc, #216]	@ (8002818 <HAL_DMA_Abort+0x224>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_DMA_Abort+0x228>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d059      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	@ (8002820 <HAL_DMA_Abort+0x22c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d054      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <HAL_DMA_Abort+0x230>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04f      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_DMA_Abort+0x234>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_DMA_Abort+0x238>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	@ (8002830 <HAL_DMA_Abort+0x23c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <HAL_DMA_Abort+0x240>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <HAL_DMA_Abort+0x244>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	@ (800283c <HAL_DMA_Abort+0x248>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	@ (8002840 <HAL_DMA_Abort+0x24c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	@ (8002844 <HAL_DMA_Abort+0x250>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	@ (8002848 <HAL_DMA_Abort+0x254>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <HAL_DMA_Abort+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	@ (8002850 <HAL_DMA_Abort+0x25c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <HAL_DMA_Abort+0x260>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <HAL_DMA_Abort+0x264>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <HAL_DMA_Abort+0x268>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <HAL_DMA_Abort+0x26c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0x20e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <HAL_DMA_Abort+0x270>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d132      	bne.n	8002868 <HAL_DMA_Abort+0x274>
 8002802:	2301      	movs	r3, #1
 8002804:	e031      	b.n	800286a <HAL_DMA_Abort+0x276>
 8002806:	bf00      	nop
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002878:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800287c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6d      	ldr	r2, [pc, #436]	@ (8002a38 <HAL_DMA_Abort+0x444>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04a      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a3c <HAL_DMA_Abort+0x448>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d045      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6a      	ldr	r2, [pc, #424]	@ (8002a40 <HAL_DMA_Abort+0x44c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	@ (8002a44 <HAL_DMA_Abort+0x450>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d03b      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a67      	ldr	r2, [pc, #412]	@ (8002a48 <HAL_DMA_Abort+0x454>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <HAL_DMA_Abort+0x458>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a64      	ldr	r2, [pc, #400]	@ (8002a50 <HAL_DMA_Abort+0x45c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d02c      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a62      	ldr	r2, [pc, #392]	@ (8002a54 <HAL_DMA_Abort+0x460>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d027      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <HAL_DMA_Abort+0x464>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5f      	ldr	r2, [pc, #380]	@ (8002a5c <HAL_DMA_Abort+0x468>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a60 <HAL_DMA_Abort+0x46c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a64 <HAL_DMA_Abort+0x470>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002a68 <HAL_DMA_Abort+0x474>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a59      	ldr	r2, [pc, #356]	@ (8002a6c <HAL_DMA_Abort+0x478>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a58      	ldr	r2, [pc, #352]	@ (8002a70 <HAL_DMA_Abort+0x47c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_DMA_Abort+0x32a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a56      	ldr	r2, [pc, #344]	@ (8002a74 <HAL_DMA_Abort+0x480>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <HAL_DMA_Abort+0x33c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e007      	b.n	8002940 <HAL_DMA_Abort+0x34c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002940:	e013      	b.n	800296a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002942:	f7fe ff79 	bl	8001838 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b05      	cmp	r3, #5
 800294e:	d90c      	bls.n	800296a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12d      	b.n	8002bc6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a38 <HAL_DMA_Abort+0x444>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2d      	ldr	r2, [pc, #180]	@ (8002a3c <HAL_DMA_Abort+0x448>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <HAL_DMA_Abort+0x44c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2a      	ldr	r2, [pc, #168]	@ (8002a44 <HAL_DMA_Abort+0x450>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <HAL_DMA_Abort+0x454>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a27      	ldr	r2, [pc, #156]	@ (8002a4c <HAL_DMA_Abort+0x458>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a26      	ldr	r2, [pc, #152]	@ (8002a50 <HAL_DMA_Abort+0x45c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a24      	ldr	r2, [pc, #144]	@ (8002a54 <HAL_DMA_Abort+0x460>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <HAL_DMA_Abort+0x464>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <HAL_DMA_Abort+0x468>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a20      	ldr	r2, [pc, #128]	@ (8002a60 <HAL_DMA_Abort+0x46c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_DMA_Abort+0x470>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_DMA_Abort+0x474>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_DMA_Abort+0x478>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1a      	ldr	r2, [pc, #104]	@ (8002a70 <HAL_DMA_Abort+0x47c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_Abort+0x422>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_DMA_Abort+0x480>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_DMA_Abort+0x426>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_Abort+0x428>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02b      	beq.n	8002a78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	223f      	movs	r2, #63	@ 0x3f
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e02a      	b.n	8002a8e <HAL_DMA_Abort+0x49a>
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	40020028 	.word	0x40020028
 8002a40:	40020040 	.word	0x40020040
 8002a44:	40020058 	.word	0x40020058
 8002a48:	40020070 	.word	0x40020070
 8002a4c:	40020088 	.word	0x40020088
 8002a50:	400200a0 	.word	0x400200a0
 8002a54:	400200b8 	.word	0x400200b8
 8002a58:	40020410 	.word	0x40020410
 8002a5c:	40020428 	.word	0x40020428
 8002a60:	40020440 	.word	0x40020440
 8002a64:	40020458 	.word	0x40020458
 8002a68:	40020470 	.word	0x40020470
 8002a6c:	40020488 	.word	0x40020488
 8002a70:	400204a0 	.word	0x400204a0
 8002a74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd0 <HAL_DMA_Abort+0x5dc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d072      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd4 <HAL_DMA_Abort+0x5e0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d06d      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd8 <HAL_DMA_Abort+0x5e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d068      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_DMA_Abort+0x5e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d063      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_DMA_Abort+0x5ec>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d05e      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a47      	ldr	r2, [pc, #284]	@ (8002be4 <HAL_DMA_Abort+0x5f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d059      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a46      	ldr	r2, [pc, #280]	@ (8002be8 <HAL_DMA_Abort+0x5f4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d054      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a44      	ldr	r2, [pc, #272]	@ (8002bec <HAL_DMA_Abort+0x5f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04f      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a43      	ldr	r2, [pc, #268]	@ (8002bf0 <HAL_DMA_Abort+0x5fc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a41      	ldr	r2, [pc, #260]	@ (8002bf4 <HAL_DMA_Abort+0x600>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a40      	ldr	r2, [pc, #256]	@ (8002bf8 <HAL_DMA_Abort+0x604>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a3e      	ldr	r2, [pc, #248]	@ (8002bfc <HAL_DMA_Abort+0x608>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c00 <HAL_DMA_Abort+0x60c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a3b      	ldr	r2, [pc, #236]	@ (8002c04 <HAL_DMA_Abort+0x610>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c08 <HAL_DMA_Abort+0x614>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a38      	ldr	r2, [pc, #224]	@ (8002c0c <HAL_DMA_Abort+0x618>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a37      	ldr	r2, [pc, #220]	@ (8002c10 <HAL_DMA_Abort+0x61c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <HAL_DMA_Abort+0x620>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_DMA_Abort+0x624>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a32      	ldr	r2, [pc, #200]	@ (8002c1c <HAL_DMA_Abort+0x628>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a31      	ldr	r2, [pc, #196]	@ (8002c20 <HAL_DMA_Abort+0x62c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2f      	ldr	r2, [pc, #188]	@ (8002c24 <HAL_DMA_Abort+0x630>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <HAL_DMA_Abort+0x634>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_Abort+0x58a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	@ (8002c2c <HAL_DMA_Abort+0x638>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Abort+0x58e>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_Abort+0x590>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b90:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bb2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40020010 	.word	0x40020010
 8002bd4:	40020028 	.word	0x40020028
 8002bd8:	40020040 	.word	0x40020040
 8002bdc:	40020058 	.word	0x40020058
 8002be0:	40020070 	.word	0x40020070
 8002be4:	40020088 	.word	0x40020088
 8002be8:	400200a0 	.word	0x400200a0
 8002bec:	400200b8 	.word	0x400200b8
 8002bf0:	40020410 	.word	0x40020410
 8002bf4:	40020428 	.word	0x40020428
 8002bf8:	40020440 	.word	0x40020440
 8002bfc:	40020458 	.word	0x40020458
 8002c00:	40020470 	.word	0x40020470
 8002c04:	40020488 	.word	0x40020488
 8002c08:	400204a0 	.word	0x400204a0
 8002c0c:	400204b8 	.word	0x400204b8
 8002c10:	58025408 	.word	0x58025408
 8002c14:	5802541c 	.word	0x5802541c
 8002c18:	58025430 	.word	0x58025430
 8002c1c:	58025444 	.word	0x58025444
 8002c20:	58025458 	.word	0x58025458
 8002c24:	5802546c 	.word	0x5802546c
 8002c28:	58025480 	.word	0x58025480
 8002c2c:	58025494 	.word	0x58025494

08002c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e237      	b.n	80030b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d004      	beq.n	8002c58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e22c      	b.n	80030b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d04a      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d045      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a59      	ldr	r2, [pc, #356]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d040      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_DMA_Abort_IT+0x1ac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d03b      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_DMA_Abort_IT+0x1b0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d036      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a55      	ldr	r2, [pc, #340]	@ (8002de4 <HAL_DMA_Abort_IT+0x1b4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d031      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a53      	ldr	r2, [pc, #332]	@ (8002de8 <HAL_DMA_Abort_IT+0x1b8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_DMA_Abort_IT+0x1bc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d027      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a50      	ldr	r2, [pc, #320]	@ (8002df0 <HAL_DMA_Abort_IT+0x1c0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a4f      	ldr	r2, [pc, #316]	@ (8002df4 <HAL_DMA_Abort_IT+0x1c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8002df8 <HAL_DMA_Abort_IT+0x1c8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a4c      	ldr	r2, [pc, #304]	@ (8002dfc <HAL_DMA_Abort_IT+0x1cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e00 <HAL_DMA_Abort_IT+0x1d0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <HAL_DMA_Abort_IT+0x1d4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a47      	ldr	r2, [pc, #284]	@ (8002e08 <HAL_DMA_Abort_IT+0x1d8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0xc8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a46      	ldr	r2, [pc, #280]	@ (8002e0c <HAL_DMA_Abort_IT+0x1dc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Abort_IT+0xcc>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_Abort_IT+0xce>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8086 	beq.w	8002e10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd0 <HAL_DMA_Abort_IT+0x1a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d04a      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd4 <HAL_DMA_Abort_IT+0x1a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d045      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <HAL_DMA_Abort_IT+0x1a8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d040      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <HAL_DMA_Abort_IT+0x1ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03b      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a29      	ldr	r2, [pc, #164]	@ (8002de0 <HAL_DMA_Abort_IT+0x1b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d036      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a28      	ldr	r2, [pc, #160]	@ (8002de4 <HAL_DMA_Abort_IT+0x1b4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d031      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_DMA_Abort_IT+0x1b8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02c      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a25      	ldr	r2, [pc, #148]	@ (8002dec <HAL_DMA_Abort_IT+0x1bc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d027      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_DMA_Abort_IT+0x1c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_DMA_Abort_IT+0x1c4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d01d      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_DMA_Abort_IT+0x1c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <HAL_DMA_Abort_IT+0x1cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <HAL_DMA_Abort_IT+0x1d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <HAL_DMA_Abort_IT+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_DMA_Abort_IT+0x1d8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Abort_IT+0x17c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	@ (8002e0c <HAL_DMA_Abort_IT+0x1dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <HAL_DMA_Abort_IT+0x18e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e178      	b.n	80030b0 <HAL_DMA_Abort_IT+0x480>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e16f      	b.n	80030b0 <HAL_DMA_Abort_IT+0x480>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020e 	bic.w	r2, r2, #14
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6c      	ldr	r2, [pc, #432]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d04a      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_DMA_Abort_IT+0x3ac>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d045      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a69      	ldr	r2, [pc, #420]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d040      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d03b      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a66      	ldr	r2, [pc, #408]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d036      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_DMA_Abort_IT+0x3bc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a63      	ldr	r2, [pc, #396]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02c      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a62      	ldr	r2, [pc, #392]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d027      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a60      	ldr	r2, [pc, #384]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ffc <HAL_DMA_Abort_IT+0x3cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d01d      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	@ (8003000 <HAL_DMA_Abort_IT+0x3d0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a5c      	ldr	r2, [pc, #368]	@ (8003004 <HAL_DMA_Abort_IT+0x3d4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003008 <HAL_DMA_Abort_IT+0x3d8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a59      	ldr	r2, [pc, #356]	@ (800300c <HAL_DMA_Abort_IT+0x3dc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a57      	ldr	r2, [pc, #348]	@ (8003010 <HAL_DMA_Abort_IT+0x3e0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x290>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a56      	ldr	r2, [pc, #344]	@ (8003014 <HAL_DMA_Abort_IT+0x3e4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <HAL_DMA_Abort_IT+0x2a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_DMA_Abort_IT+0x2b2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd8 <HAL_DMA_Abort_IT+0x3a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d072      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fdc <HAL_DMA_Abort_IT+0x3ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d06d      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a39      	ldr	r2, [pc, #228]	@ (8002fe0 <HAL_DMA_Abort_IT+0x3b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d068      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a37      	ldr	r2, [pc, #220]	@ (8002fe4 <HAL_DMA_Abort_IT+0x3b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d063      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a36      	ldr	r2, [pc, #216]	@ (8002fe8 <HAL_DMA_Abort_IT+0x3b8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d05e      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	@ (8002fec <HAL_DMA_Abort_IT+0x3bc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d059      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a33      	ldr	r2, [pc, #204]	@ (8002ff0 <HAL_DMA_Abort_IT+0x3c0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d054      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ff4 <HAL_DMA_Abort_IT+0x3c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d04f      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a30      	ldr	r2, [pc, #192]	@ (8002ff8 <HAL_DMA_Abort_IT+0x3c8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d04a      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	@ (8002ffc <HAL_DMA_Abort_IT+0x3cc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d045      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <HAL_DMA_Abort_IT+0x3d0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d040      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2b      	ldr	r2, [pc, #172]	@ (8003004 <HAL_DMA_Abort_IT+0x3d4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d03b      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003008 <HAL_DMA_Abort_IT+0x3d8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d036      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	@ (800300c <HAL_DMA_Abort_IT+0x3dc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d031      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a27      	ldr	r2, [pc, #156]	@ (8003010 <HAL_DMA_Abort_IT+0x3e0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	@ (8003014 <HAL_DMA_Abort_IT+0x3e4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <HAL_DMA_Abort_IT+0x3e8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <HAL_DMA_Abort_IT+0x3ec>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <HAL_DMA_Abort_IT+0x3f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <HAL_DMA_Abort_IT+0x3f4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <HAL_DMA_Abort_IT+0x3f8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_DMA_Abort_IT+0x3fc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_DMA_Abort_IT+0x400>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x3a2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	@ (8003034 <HAL_DMA_Abort_IT+0x404>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d132      	bne.n	8003038 <HAL_DMA_Abort_IT+0x408>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e031      	b.n	800303a <HAL_DMA_Abort_IT+0x40a>
 8002fd6:	bf00      	nop
 8002fd8:	40020010 	.word	0x40020010
 8002fdc:	40020028 	.word	0x40020028
 8002fe0:	40020040 	.word	0x40020040
 8002fe4:	40020058 	.word	0x40020058
 8002fe8:	40020070 	.word	0x40020070
 8002fec:	40020088 	.word	0x40020088
 8002ff0:	400200a0 	.word	0x400200a0
 8002ff4:	400200b8 	.word	0x400200b8
 8002ff8:	40020410 	.word	0x40020410
 8002ffc:	40020428 	.word	0x40020428
 8003000:	40020440 	.word	0x40020440
 8003004:	40020458 	.word	0x40020458
 8003008:	40020470 	.word	0x40020470
 800300c:	40020488 	.word	0x40020488
 8003010:	400204a0 	.word	0x400204a0
 8003014:	400204b8 	.word	0x400204b8
 8003018:	58025408 	.word	0x58025408
 800301c:	5802541c 	.word	0x5802541c
 8003020:	58025430 	.word	0x58025430
 8003024:	58025444 	.word	0x58025444
 8003028:	58025458 	.word	0x58025458
 800302c:	5802546c 	.word	0x5802546c
 8003030:	58025480 	.word	0x58025480
 8003034:	58025494 	.word	0x58025494
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d028      	beq.n	8003090 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800306c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003084:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800308e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c8:	4b67      	ldr	r3, [pc, #412]	@ (8003268 <HAL_DMA_IRQHandler+0x1ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	@ (800326c <HAL_DMA_IRQHandler+0x1b0>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003270 <HAL_DMA_IRQHandler+0x1b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003274 <HAL_DMA_IRQHandler+0x1b8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5c      	ldr	r2, [pc, #368]	@ (8003278 <HAL_DMA_IRQHandler+0x1bc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5a      	ldr	r2, [pc, #360]	@ (800327c <HAL_DMA_IRQHandler+0x1c0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a59      	ldr	r2, [pc, #356]	@ (8003280 <HAL_DMA_IRQHandler+0x1c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a57      	ldr	r2, [pc, #348]	@ (8003284 <HAL_DMA_IRQHandler+0x1c8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a56      	ldr	r2, [pc, #344]	@ (8003288 <HAL_DMA_IRQHandler+0x1cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_DMA_IRQHandler+0x1d0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a53      	ldr	r2, [pc, #332]	@ (8003290 <HAL_DMA_IRQHandler+0x1d4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a51      	ldr	r2, [pc, #324]	@ (8003294 <HAL_DMA_IRQHandler+0x1d8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_DMA_IRQHandler+0x1dc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4e      	ldr	r2, [pc, #312]	@ (800329c <HAL_DMA_IRQHandler+0x1e0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4d      	ldr	r2, [pc, #308]	@ (80032a0 <HAL_DMA_IRQHandler+0x1e4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4b      	ldr	r2, [pc, #300]	@ (80032a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4a      	ldr	r2, [pc, #296]	@ (80032a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_IRQHandler+0xd2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a48      	ldr	r2, [pc, #288]	@ (80032ac <HAL_DMA_IRQHandler+0x1f0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_DMA_IRQHandler+0xd6>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_DMA_IRQHandler+0xd8>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 842b 	beq.w	80039f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2208      	movs	r2, #8
 80031a4:	409a      	lsls	r2, r3
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a2 	beq.w	80032f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003270 <HAL_DMA_IRQHandler+0x1b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2d      	ldr	r2, [pc, #180]	@ (8003274 <HAL_DMA_IRQHandler+0x1b8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003278 <HAL_DMA_IRQHandler+0x1bc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2a      	ldr	r2, [pc, #168]	@ (800327c <HAL_DMA_IRQHandler+0x1c0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a28      	ldr	r2, [pc, #160]	@ (8003280 <HAL_DMA_IRQHandler+0x1c4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a27      	ldr	r2, [pc, #156]	@ (8003284 <HAL_DMA_IRQHandler+0x1c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a25      	ldr	r2, [pc, #148]	@ (8003288 <HAL_DMA_IRQHandler+0x1cc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a24      	ldr	r2, [pc, #144]	@ (800328c <HAL_DMA_IRQHandler+0x1d0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <HAL_DMA_IRQHandler+0x1d4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a21      	ldr	r2, [pc, #132]	@ (8003294 <HAL_DMA_IRQHandler+0x1d8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1f      	ldr	r2, [pc, #124]	@ (8003298 <HAL_DMA_IRQHandler+0x1dc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_DMA_IRQHandler+0x1e0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1c      	ldr	r2, [pc, #112]	@ (80032a0 <HAL_DMA_IRQHandler+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1b      	ldr	r2, [pc, #108]	@ (80032a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_IRQHandler+0x194>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	@ (80032ac <HAL_DMA_IRQHandler+0x1f0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d12f      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x1f4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e02e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x208>
 8003266:	bf00      	nop
 8003268:	24000084 	.word	0x24000084
 800326c:	1b4e81b5 	.word	0x1b4e81b5
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06e      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a69      	ldr	r2, [pc, #420]	@ (80034b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d04a      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <HAL_DMA_IRQHandler+0x3fc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d045      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a66      	ldr	r2, [pc, #408]	@ (80034bc <HAL_DMA_IRQHandler+0x400>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d040      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a64      	ldr	r2, [pc, #400]	@ (80034c0 <HAL_DMA_IRQHandler+0x404>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a63      	ldr	r2, [pc, #396]	@ (80034c4 <HAL_DMA_IRQHandler+0x408>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d036      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a61      	ldr	r2, [pc, #388]	@ (80034c8 <HAL_DMA_IRQHandler+0x40c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a60      	ldr	r2, [pc, #384]	@ (80034cc <HAL_DMA_IRQHandler+0x410>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d02c      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5e      	ldr	r2, [pc, #376]	@ (80034d0 <HAL_DMA_IRQHandler+0x414>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5d      	ldr	r2, [pc, #372]	@ (80034d4 <HAL_DMA_IRQHandler+0x418>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5b      	ldr	r2, [pc, #364]	@ (80034d8 <HAL_DMA_IRQHandler+0x41c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5a      	ldr	r2, [pc, #360]	@ (80034dc <HAL_DMA_IRQHandler+0x420>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_DMA_IRQHandler+0x424>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a57      	ldr	r2, [pc, #348]	@ (80034e4 <HAL_DMA_IRQHandler+0x428>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a55      	ldr	r2, [pc, #340]	@ (80034e8 <HAL_DMA_IRQHandler+0x42c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a54      	ldr	r2, [pc, #336]	@ (80034ec <HAL_DMA_IRQHandler+0x430>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_DMA_IRQHandler+0x2ee>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a52      	ldr	r2, [pc, #328]	@ (80034f0 <HAL_DMA_IRQHandler+0x434>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10a      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x304>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e003      	b.n	80033c8 <HAL_DMA_IRQHandler+0x30c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 808f 	beq.w	800351c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	@ (80034b4 <HAL_DMA_IRQHandler+0x3f8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04a      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	@ (80034b8 <HAL_DMA_IRQHandler+0x3fc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d045      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_DMA_IRQHandler+0x400>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d040      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a27      	ldr	r2, [pc, #156]	@ (80034c0 <HAL_DMA_IRQHandler+0x404>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d03b      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <HAL_DMA_IRQHandler+0x408>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d036      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <HAL_DMA_IRQHandler+0x40c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a23      	ldr	r2, [pc, #140]	@ (80034cc <HAL_DMA_IRQHandler+0x410>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d02c      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a21      	ldr	r2, [pc, #132]	@ (80034d0 <HAL_DMA_IRQHandler+0x414>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d027      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a20      	ldr	r2, [pc, #128]	@ (80034d4 <HAL_DMA_IRQHandler+0x418>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_DMA_IRQHandler+0x41c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_DMA_IRQHandler+0x420>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <HAL_DMA_IRQHandler+0x424>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <HAL_DMA_IRQHandler+0x428>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <HAL_DMA_IRQHandler+0x42c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_DMA_IRQHandler+0x430>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_DMA_IRQHandler+0x3e2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <HAL_DMA_IRQHandler+0x434>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12a      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x438>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e023      	b.n	80034fc <HAL_DMA_IRQHandler+0x440>
 80034b4:	40020010 	.word	0x40020010
 80034b8:	40020028 	.word	0x40020028
 80034bc:	40020040 	.word	0x40020040
 80034c0:	40020058 	.word	0x40020058
 80034c4:	40020070 	.word	0x40020070
 80034c8:	40020088 	.word	0x40020088
 80034cc:	400200a0 	.word	0x400200a0
 80034d0:	400200b8 	.word	0x400200b8
 80034d4:	40020410 	.word	0x40020410
 80034d8:	40020428 	.word	0x40020428
 80034dc:	40020440 	.word	0x40020440
 80034e0:	40020458 	.word	0x40020458
 80034e4:	40020470 	.word	0x40020470
 80034e8:	40020488 	.word	0x40020488
 80034ec:	400204a0 	.word	0x400204a0
 80034f0:	400204b8 	.word	0x400204b8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2204      	movs	r2, #4
 800350a:	409a      	lsls	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2210      	movs	r2, #16
 8003526:	409a      	lsls	r2, r3
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a6 	beq.w	800367e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a85      	ldr	r2, [pc, #532]	@ (800374c <HAL_DMA_IRQHandler+0x690>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04a      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a83      	ldr	r2, [pc, #524]	@ (8003750 <HAL_DMA_IRQHandler+0x694>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a82      	ldr	r2, [pc, #520]	@ (8003754 <HAL_DMA_IRQHandler+0x698>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a80      	ldr	r2, [pc, #512]	@ (8003758 <HAL_DMA_IRQHandler+0x69c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7f      	ldr	r2, [pc, #508]	@ (800375c <HAL_DMA_IRQHandler+0x6a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d036      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7d      	ldr	r2, [pc, #500]	@ (8003760 <HAL_DMA_IRQHandler+0x6a4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7c      	ldr	r2, [pc, #496]	@ (8003764 <HAL_DMA_IRQHandler+0x6a8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02c      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7a      	ldr	r2, [pc, #488]	@ (8003768 <HAL_DMA_IRQHandler+0x6ac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a79      	ldr	r2, [pc, #484]	@ (800376c <HAL_DMA_IRQHandler+0x6b0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a77      	ldr	r2, [pc, #476]	@ (8003770 <HAL_DMA_IRQHandler+0x6b4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a76      	ldr	r2, [pc, #472]	@ (8003774 <HAL_DMA_IRQHandler+0x6b8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a74      	ldr	r2, [pc, #464]	@ (8003778 <HAL_DMA_IRQHandler+0x6bc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	@ (800377c <HAL_DMA_IRQHandler+0x6c0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a71      	ldr	r2, [pc, #452]	@ (8003780 <HAL_DMA_IRQHandler+0x6c4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a70      	ldr	r2, [pc, #448]	@ (8003784 <HAL_DMA_IRQHandler+0x6c8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x516>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_DMA_IRQHandler+0x6cc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10a      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x52c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e009      	b.n	80035fc <HAL_DMA_IRQHandler+0x540>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03e      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2210      	movs	r2, #16
 800360a:	409a      	lsls	r2, r3
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d024      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e01f      	b.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01b      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e016      	b.n	800367e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0208 	bic.w	r2, r2, #8
 800366c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	2220      	movs	r2, #32
 8003688:	409a      	lsls	r2, r3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8110 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <HAL_DMA_IRQHandler+0x690>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <HAL_DMA_IRQHandler+0x694>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a29      	ldr	r2, [pc, #164]	@ (8003754 <HAL_DMA_IRQHandler+0x698>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <HAL_DMA_IRQHandler+0x69c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a26      	ldr	r2, [pc, #152]	@ (800375c <HAL_DMA_IRQHandler+0x6a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a25      	ldr	r2, [pc, #148]	@ (8003760 <HAL_DMA_IRQHandler+0x6a4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a23      	ldr	r2, [pc, #140]	@ (8003764 <HAL_DMA_IRQHandler+0x6a8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <HAL_DMA_IRQHandler+0x6ac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a20      	ldr	r2, [pc, #128]	@ (800376c <HAL_DMA_IRQHandler+0x6b0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003770 <HAL_DMA_IRQHandler+0x6b4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003774 <HAL_DMA_IRQHandler+0x6b8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <HAL_DMA_IRQHandler+0x6bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <HAL_DMA_IRQHandler+0x6c0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <HAL_DMA_IRQHandler+0x6c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <HAL_DMA_IRQHandler+0x6c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_IRQHandler+0x678>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <HAL_DMA_IRQHandler+0x6cc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d12b      	bne.n	800378c <HAL_DMA_IRQHandler+0x6d0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e02a      	b.n	80037a0 <HAL_DMA_IRQHandler+0x6e4>
 800374a:	bf00      	nop
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2220      	movs	r2, #32
 80037b0:	409a      	lsls	r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d139      	bne.n	8003836 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x736>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	223f      	movs	r2, #63	@ 0x3f
 800380c:	409a      	lsls	r2, r3
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 834a 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
          }
          return;
 8003834:	e344      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02c      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e027      	b.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d023      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e01e      	b.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0210 	bic.w	r2, r2, #16
 8003892:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8306 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8088 	beq.w	80039dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2204      	movs	r2, #4
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac4 <HAL_DMA_IRQHandler+0xa08>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a79      	ldr	r2, [pc, #484]	@ (8003ac8 <HAL_DMA_IRQHandler+0xa0c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a77      	ldr	r2, [pc, #476]	@ (8003acc <HAL_DMA_IRQHandler+0xa10>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a76      	ldr	r2, [pc, #472]	@ (8003ad0 <HAL_DMA_IRQHandler+0xa14>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a74      	ldr	r2, [pc, #464]	@ (8003ad4 <HAL_DMA_IRQHandler+0xa18>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	@ (8003ad8 <HAL_DMA_IRQHandler+0xa1c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a71      	ldr	r2, [pc, #452]	@ (8003adc <HAL_DMA_IRQHandler+0xa20>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a70      	ldr	r2, [pc, #448]	@ (8003ae0 <HAL_DMA_IRQHandler+0xa24>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae4 <HAL_DMA_IRQHandler+0xa28>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6d      	ldr	r2, [pc, #436]	@ (8003ae8 <HAL_DMA_IRQHandler+0xa2c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6b      	ldr	r2, [pc, #428]	@ (8003aec <HAL_DMA_IRQHandler+0xa30>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6a      	ldr	r2, [pc, #424]	@ (8003af0 <HAL_DMA_IRQHandler+0xa34>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	@ (8003af4 <HAL_DMA_IRQHandler+0xa38>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a67      	ldr	r2, [pc, #412]	@ (8003af8 <HAL_DMA_IRQHandler+0xa3c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	@ (8003afc <HAL_DMA_IRQHandler+0xa40>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x8b8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a64      	ldr	r2, [pc, #400]	@ (8003b00 <HAL_DMA_IRQHandler+0xa44>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <HAL_DMA_IRQHandler+0x8ca>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e007      	b.n	8003996 <HAL_DMA_IRQHandler+0x8da>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	429a      	cmp	r2, r3
 80039a0:	d307      	bcc.n	80039b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f2      	bne.n	8003996 <HAL_DMA_IRQHandler+0x8da>
 80039b0:	e000      	b.n	80039b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80039ca:	e003      	b.n	80039d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8272 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e26c      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a43      	ldr	r2, [pc, #268]	@ (8003b04 <HAL_DMA_IRQHandler+0xa48>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d022      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a42      	ldr	r2, [pc, #264]	@ (8003b08 <HAL_DMA_IRQHandler+0xa4c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d01d      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a40      	ldr	r2, [pc, #256]	@ (8003b0c <HAL_DMA_IRQHandler+0xa50>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d018      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3f      	ldr	r2, [pc, #252]	@ (8003b10 <HAL_DMA_IRQHandler+0xa54>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b14 <HAL_DMA_IRQHandler+0xa58>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00e      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3c      	ldr	r2, [pc, #240]	@ (8003b18 <HAL_DMA_IRQHandler+0xa5c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d009      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a3a      	ldr	r2, [pc, #232]	@ (8003b1c <HAL_DMA_IRQHandler+0xa60>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x984>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a39      	ldr	r2, [pc, #228]	@ (8003b20 <HAL_DMA_IRQHandler+0xa64>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x988>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_DMA_IRQHandler+0x98a>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 823f 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80cd 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xb48>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80c7 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2204      	movs	r2, #4
 8003a80:	409a      	lsls	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d049      	beq.n	8003b24 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8210 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aac:	e20a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8206 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac0:	e200      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
 8003ac2:	bf00      	nop
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8
 8003b04:	58025408 	.word	0x58025408
 8003b08:	5802541c 	.word	0x5802541c
 8003b0c:	58025430 	.word	0x58025430
 8003b10:	58025444 	.word	0x58025444
 8003b14:	58025458 	.word	0x58025458
 8003b18:	5802546c 	.word	0x5802546c
 8003b1c:	58025480 	.word	0x58025480
 8003b20:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d160      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7f      	ldr	r2, [pc, #508]	@ (8003d30 <HAL_DMA_IRQHandler+0xc74>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04a      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7d      	ldr	r2, [pc, #500]	@ (8003d34 <HAL_DMA_IRQHandler+0xc78>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d045      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7c      	ldr	r2, [pc, #496]	@ (8003d38 <HAL_DMA_IRQHandler+0xc7c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d040      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7a      	ldr	r2, [pc, #488]	@ (8003d3c <HAL_DMA_IRQHandler+0xc80>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d03b      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a79      	ldr	r2, [pc, #484]	@ (8003d40 <HAL_DMA_IRQHandler+0xc84>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d036      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a77      	ldr	r2, [pc, #476]	@ (8003d44 <HAL_DMA_IRQHandler+0xc88>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d031      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a76      	ldr	r2, [pc, #472]	@ (8003d48 <HAL_DMA_IRQHandler+0xc8c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d02c      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a74      	ldr	r2, [pc, #464]	@ (8003d4c <HAL_DMA_IRQHandler+0xc90>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a73      	ldr	r2, [pc, #460]	@ (8003d50 <HAL_DMA_IRQHandler+0xc94>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a71      	ldr	r2, [pc, #452]	@ (8003d54 <HAL_DMA_IRQHandler+0xc98>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a70      	ldr	r2, [pc, #448]	@ (8003d58 <HAL_DMA_IRQHandler+0xc9c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d5c <HAL_DMA_IRQHandler+0xca0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6d      	ldr	r2, [pc, #436]	@ (8003d60 <HAL_DMA_IRQHandler+0xca4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d64 <HAL_DMA_IRQHandler+0xca8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8003d68 <HAL_DMA_IRQHandler+0xcac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_DMA_IRQHandler+0xb12>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	@ (8003d6c <HAL_DMA_IRQHandler+0xcb0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <HAL_DMA_IRQHandler+0xb24>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0208 	bic.w	r2, r2, #8
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e007      	b.n	8003bf0 <HAL_DMA_IRQHandler+0xb34>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8165 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c02:	e15f      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80c5 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xce8>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80bf 	beq.w	8003da4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2202      	movs	r2, #2
 8003c30:	409a      	lsls	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 813a 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5c:	e134      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8130 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c70:	e12a      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 8089 	bne.w	8003d90 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	@ (8003d30 <HAL_DMA_IRQHandler+0xc74>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <HAL_DMA_IRQHandler+0xc78>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d045      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a28      	ldr	r2, [pc, #160]	@ (8003d38 <HAL_DMA_IRQHandler+0xc7c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d040      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <HAL_DMA_IRQHandler+0xc80>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d03b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a25      	ldr	r2, [pc, #148]	@ (8003d40 <HAL_DMA_IRQHandler+0xc84>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d036      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_DMA_IRQHandler+0xc88>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d031      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a22      	ldr	r2, [pc, #136]	@ (8003d48 <HAL_DMA_IRQHandler+0xc8c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d02c      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	@ (8003d4c <HAL_DMA_IRQHandler+0xc90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <HAL_DMA_IRQHandler+0xc94>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_DMA_IRQHandler+0xc98>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01d      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <HAL_DMA_IRQHandler+0xc9c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d018      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d5c <HAL_DMA_IRQHandler+0xca0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_DMA_IRQHandler+0xca4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_DMA_IRQHandler+0xca8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <HAL_DMA_IRQHandler+0xcac>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xc62>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a14      	ldr	r2, [pc, #80]	@ (8003d6c <HAL_DMA_IRQHandler+0xcb0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d128      	bne.n	8003d70 <HAL_DMA_IRQHandler+0xcb4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0214 	bic.w	r2, r2, #20
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e027      	b.n	8003d80 <HAL_DMA_IRQHandler+0xcc4>
 8003d30:	40020010 	.word	0x40020010
 8003d34:	40020028 	.word	0x40020028
 8003d38:	40020040 	.word	0x40020040
 8003d3c:	40020058 	.word	0x40020058
 8003d40:	40020070 	.word	0x40020070
 8003d44:	40020088 	.word	0x40020088
 8003d48:	400200a0 	.word	0x400200a0
 8003d4c:	400200b8 	.word	0x400200b8
 8003d50:	40020410 	.word	0x40020410
 8003d54:	40020428 	.word	0x40020428
 8003d58:	40020440 	.word	0x40020440
 8003d5c:	40020458 	.word	0x40020458
 8003d60:	40020470 	.word	0x40020470
 8003d64:	40020488 	.word	0x40020488
 8003d68:	400204a0 	.word	0x400204a0
 8003d6c:	400204b8 	.word	0x400204b8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 020a 	bic.w	r2, r2, #10
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8097 	beq.w	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da2:	e091      	b.n	8003ec8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2208      	movs	r2, #8
 8003dae:	409a      	lsls	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8088 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8082 	beq.w	8003eca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a41      	ldr	r2, [pc, #260]	@ (8003ed0 <HAL_DMA_IRQHandler+0xe14>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d04a      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ed4 <HAL_DMA_IRQHandler+0xe18>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d045      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed8 <HAL_DMA_IRQHandler+0xe1c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d040      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3c      	ldr	r2, [pc, #240]	@ (8003edc <HAL_DMA_IRQHandler+0xe20>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d03b      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee0 <HAL_DMA_IRQHandler+0xe24>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d036      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a39      	ldr	r2, [pc, #228]	@ (8003ee4 <HAL_DMA_IRQHandler+0xe28>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d031      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a38      	ldr	r2, [pc, #224]	@ (8003ee8 <HAL_DMA_IRQHandler+0xe2c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d02c      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a36      	ldr	r2, [pc, #216]	@ (8003eec <HAL_DMA_IRQHandler+0xe30>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d027      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <HAL_DMA_IRQHandler+0xe34>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d022      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a33      	ldr	r2, [pc, #204]	@ (8003ef4 <HAL_DMA_IRQHandler+0xe38>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01d      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <HAL_DMA_IRQHandler+0xe3c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <HAL_DMA_IRQHandler+0xe40>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2f      	ldr	r2, [pc, #188]	@ (8003f00 <HAL_DMA_IRQHandler+0xe44>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <HAL_DMA_IRQHandler+0xe48>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2c      	ldr	r2, [pc, #176]	@ (8003f08 <HAL_DMA_IRQHandler+0xe4c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_IRQHandler+0xdaa>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <HAL_DMA_IRQHandler+0xe50>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_DMA_IRQHandler+0xdbc>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 021c 	bic.w	r2, r2, #28
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e007      	b.n	8003e88 <HAL_DMA_IRQHandler+0xdcc>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 020e 	bic.w	r2, r2, #14
 8003e86:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e004      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003eca:	3728      	adds	r7, #40	@ 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40020010 	.word	0x40020010
 8003ed4:	40020028 	.word	0x40020028
 8003ed8:	40020040 	.word	0x40020040
 8003edc:	40020058 	.word	0x40020058
 8003ee0:	40020070 	.word	0x40020070
 8003ee4:	40020088 	.word	0x40020088
 8003ee8:	400200a0 	.word	0x400200a0
 8003eec:	400200b8 	.word	0x400200b8
 8003ef0:	40020410 	.word	0x40020410
 8003ef4:	40020428 	.word	0x40020428
 8003ef8:	40020440 	.word	0x40020440
 8003efc:	40020458 	.word	0x40020458
 8003f00:	40020470 	.word	0x40020470
 8003f04:	40020488 	.word	0x40020488
 8003f08:	400204a0 	.word	0x400204a0
 8003f0c:	400204b8 	.word	0x400204b8

08003f10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7f      	ldr	r2, [pc, #508]	@ (800412c <DMA_SetConfig+0x21c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d072      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7d      	ldr	r2, [pc, #500]	@ (8004130 <DMA_SetConfig+0x220>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d06d      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7c      	ldr	r2, [pc, #496]	@ (8004134 <DMA_SetConfig+0x224>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d068      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004138 <DMA_SetConfig+0x228>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d063      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a79      	ldr	r2, [pc, #484]	@ (800413c <DMA_SetConfig+0x22c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d05e      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a77      	ldr	r2, [pc, #476]	@ (8004140 <DMA_SetConfig+0x230>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d059      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a76      	ldr	r2, [pc, #472]	@ (8004144 <DMA_SetConfig+0x234>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d054      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a74      	ldr	r2, [pc, #464]	@ (8004148 <DMA_SetConfig+0x238>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04f      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a73      	ldr	r2, [pc, #460]	@ (800414c <DMA_SetConfig+0x23c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d04a      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a71      	ldr	r2, [pc, #452]	@ (8004150 <DMA_SetConfig+0x240>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d045      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a70      	ldr	r2, [pc, #448]	@ (8004154 <DMA_SetConfig+0x244>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d040      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004158 <DMA_SetConfig+0x248>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d03b      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800415c <DMA_SetConfig+0x24c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d036      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8004160 <DMA_SetConfig+0x250>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6a      	ldr	r2, [pc, #424]	@ (8004164 <DMA_SetConfig+0x254>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d02c      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a68      	ldr	r2, [pc, #416]	@ (8004168 <DMA_SetConfig+0x258>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d027      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a67      	ldr	r2, [pc, #412]	@ (800416c <DMA_SetConfig+0x25c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a65      	ldr	r2, [pc, #404]	@ (8004170 <DMA_SetConfig+0x260>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a64      	ldr	r2, [pc, #400]	@ (8004174 <DMA_SetConfig+0x264>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a62      	ldr	r2, [pc, #392]	@ (8004178 <DMA_SetConfig+0x268>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a61      	ldr	r2, [pc, #388]	@ (800417c <DMA_SetConfig+0x26c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <DMA_SetConfig+0x10a>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5f      	ldr	r2, [pc, #380]	@ (8004180 <DMA_SetConfig+0x270>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <DMA_SetConfig+0x10a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5e      	ldr	r2, [pc, #376]	@ (8004184 <DMA_SetConfig+0x274>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <DMA_SetConfig+0x10a>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5c      	ldr	r2, [pc, #368]	@ (8004188 <DMA_SetConfig+0x278>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <DMA_SetConfig+0x10e>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <DMA_SetConfig+0x110>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800402c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800403e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a39      	ldr	r2, [pc, #228]	@ (800412c <DMA_SetConfig+0x21c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d04a      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <DMA_SetConfig+0x220>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d045      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a36      	ldr	r2, [pc, #216]	@ (8004134 <DMA_SetConfig+0x224>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d040      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a35      	ldr	r2, [pc, #212]	@ (8004138 <DMA_SetConfig+0x228>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d03b      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a33      	ldr	r2, [pc, #204]	@ (800413c <DMA_SetConfig+0x22c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d036      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a32      	ldr	r2, [pc, #200]	@ (8004140 <DMA_SetConfig+0x230>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d031      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a30      	ldr	r2, [pc, #192]	@ (8004144 <DMA_SetConfig+0x234>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02c      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2f      	ldr	r2, [pc, #188]	@ (8004148 <DMA_SetConfig+0x238>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d027      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	@ (800414c <DMA_SetConfig+0x23c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d022      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <DMA_SetConfig+0x240>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d01d      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <DMA_SetConfig+0x244>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d018      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <DMA_SetConfig+0x248>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a27      	ldr	r2, [pc, #156]	@ (800415c <DMA_SetConfig+0x24c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00e      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a26      	ldr	r2, [pc, #152]	@ (8004160 <DMA_SetConfig+0x250>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d009      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <DMA_SetConfig+0x254>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <DMA_SetConfig+0x1d0>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <DMA_SetConfig+0x258>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <DMA_SetConfig+0x1d4>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <DMA_SetConfig+0x1d6>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d059      	beq.n	800419e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	223f      	movs	r2, #63	@ 0x3f
 80040f4:	409a      	lsls	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004108:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d138      	bne.n	800418c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800412a:	e086      	b.n	800423a <DMA_SetConfig+0x32a>
 800412c:	40020010 	.word	0x40020010
 8004130:	40020028 	.word	0x40020028
 8004134:	40020040 	.word	0x40020040
 8004138:	40020058 	.word	0x40020058
 800413c:	40020070 	.word	0x40020070
 8004140:	40020088 	.word	0x40020088
 8004144:	400200a0 	.word	0x400200a0
 8004148:	400200b8 	.word	0x400200b8
 800414c:	40020410 	.word	0x40020410
 8004150:	40020428 	.word	0x40020428
 8004154:	40020440 	.word	0x40020440
 8004158:	40020458 	.word	0x40020458
 800415c:	40020470 	.word	0x40020470
 8004160:	40020488 	.word	0x40020488
 8004164:	400204a0 	.word	0x400204a0
 8004168:	400204b8 	.word	0x400204b8
 800416c:	58025408 	.word	0x58025408
 8004170:	5802541c 	.word	0x5802541c
 8004174:	58025430 	.word	0x58025430
 8004178:	58025444 	.word	0x58025444
 800417c:	58025458 	.word	0x58025458
 8004180:	5802546c 	.word	0x5802546c
 8004184:	58025480 	.word	0x58025480
 8004188:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
}
 800419c:	e04d      	b.n	800423a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <DMA_SetConfig+0x338>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a27      	ldr	r2, [pc, #156]	@ (800424c <DMA_SetConfig+0x33c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01d      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <DMA_SetConfig+0x340>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a24      	ldr	r2, [pc, #144]	@ (8004254 <DMA_SetConfig+0x344>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a23      	ldr	r2, [pc, #140]	@ (8004258 <DMA_SetConfig+0x348>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a21      	ldr	r2, [pc, #132]	@ (800425c <DMA_SetConfig+0x34c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <DMA_SetConfig+0x350>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <DMA_SetConfig+0x2de>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <DMA_SetConfig+0x354>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <DMA_SetConfig+0x2e2>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <DMA_SetConfig+0x2e4>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d108      	bne.n	800422a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	60da      	str	r2, [r3, #12]
}
 8004228:	e007      	b.n	800423a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	60da      	str	r2, [r3, #12]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	58025408 	.word	0x58025408
 800424c:	5802541c 	.word	0x5802541c
 8004250:	58025430 	.word	0x58025430
 8004254:	58025444 	.word	0x58025444
 8004258:	58025458 	.word	0x58025458
 800425c:	5802546c 	.word	0x5802546c
 8004260:	58025480 	.word	0x58025480
 8004264:	58025494 	.word	0x58025494

08004268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a42      	ldr	r2, [pc, #264]	@ (8004380 <DMA_CalcBaseAndBitshift+0x118>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	@ (8004384 <DMA_CalcBaseAndBitshift+0x11c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3f      	ldr	r2, [pc, #252]	@ (8004388 <DMA_CalcBaseAndBitshift+0x120>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3e      	ldr	r2, [pc, #248]	@ (800438c <DMA_CalcBaseAndBitshift+0x124>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3c      	ldr	r2, [pc, #240]	@ (8004390 <DMA_CalcBaseAndBitshift+0x128>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004394 <DMA_CalcBaseAndBitshift+0x12c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a39      	ldr	r2, [pc, #228]	@ (8004398 <DMA_CalcBaseAndBitshift+0x130>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	@ (800439c <DMA_CalcBaseAndBitshift+0x134>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a36      	ldr	r2, [pc, #216]	@ (80043a0 <DMA_CalcBaseAndBitshift+0x138>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a35      	ldr	r2, [pc, #212]	@ (80043a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	@ (80043a8 <DMA_CalcBaseAndBitshift+0x140>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <DMA_CalcBaseAndBitshift+0x144>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	@ (80043b0 <DMA_CalcBaseAndBitshift+0x148>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	@ (80043b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	@ (80043b8 <DMA_CalcBaseAndBitshift+0x150>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <DMA_CalcBaseAndBitshift+0xa8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2c      	ldr	r2, [pc, #176]	@ (80043bc <DMA_CalcBaseAndBitshift+0x154>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <DMA_CalcBaseAndBitshift+0xac>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <DMA_CalcBaseAndBitshift+0xae>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d024      	beq.n	8004364 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3b10      	subs	r3, #16
 8004322:	4a27      	ldr	r2, [pc, #156]	@ (80043c0 <DMA_CalcBaseAndBitshift+0x158>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	4a24      	ldr	r2, [pc, #144]	@ (80043c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d908      	bls.n	8004354 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b1f      	ldr	r3, [pc, #124]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x160>)
 800434a:	4013      	ands	r3, r2
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	659a      	str	r2, [r3, #88]	@ 0x58
 8004352:	e00d      	b.n	8004370 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x160>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
 8004362:	e005      	b.n	8004370 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
 80043c0:	aaaaaaab 	.word	0xaaaaaaab
 80043c4:	0800c41c 	.word	0x0800c41c
 80043c8:	fffffc00 	.word	0xfffffc00

080043cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d120      	bne.n	8004422 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d858      	bhi.n	800449a <DMA_CheckFifoParam+0xce>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <DMA_CheckFifoParam+0x24>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004413 	.word	0x08004413
 80043f8:	08004401 	.word	0x08004401
 80043fc:	0800449b 	.word	0x0800449b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d048      	beq.n	800449e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004410:	e045      	b.n	800449e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800441a:	d142      	bne.n	80044a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004420:	e03f      	b.n	80044a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442a:	d123      	bne.n	8004474 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	2b03      	cmp	r3, #3
 8004432:	d838      	bhi.n	80044a6 <DMA_CheckFifoParam+0xda>
 8004434:	a201      	add	r2, pc, #4	@ (adr r2, 800443c <DMA_CheckFifoParam+0x70>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	0800444d 	.word	0x0800444d
 8004440:	08004453 	.word	0x08004453
 8004444:	0800444d 	.word	0x0800444d
 8004448:	08004465 	.word	0x08004465
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
        break;
 8004450:	e030      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d025      	beq.n	80044aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004462:	e022      	b.n	80044aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800446c:	d11f      	bne.n	80044ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004472:	e01c      	b.n	80044ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <DMA_CheckFifoParam+0xb6>
 800447c:	2b03      	cmp	r3, #3
 800447e:	d003      	beq.n	8004488 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004480:	e018      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
        break;
 8004486:	e015      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
    break;
 8004498:	e00b      	b.n	80044b2 <DMA_CheckFifoParam+0xe6>
        break;
 800449a:	bf00      	nop
 800449c:	e00a      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        break;
 800449e:	bf00      	nop
 80044a0:	e008      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        break;
 80044a2:	bf00      	nop
 80044a4:	e006      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <DMA_CheckFifoParam+0xe8>
    break;
 80044b2:	bf00      	nop
    }
  }

  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a38      	ldr	r2, [pc, #224]	@ (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a35      	ldr	r2, [pc, #212]	@ (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a30      	ldr	r2, [pc, #192]	@ (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2f      	ldr	r2, [pc, #188]	@ (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2d      	ldr	r2, [pc, #180]	@ (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01a      	beq.n	8004562 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3b08      	subs	r3, #8
 8004534:	4a28      	ldr	r2, [pc, #160]	@ (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004550:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004560:	e024      	b.n	80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3b10      	subs	r3, #16
 800456a:	4a1e      	ldr	r2, [pc, #120]	@ (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a1c      	ldr	r2, [pc, #112]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d806      	bhi.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d902      	bls.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3308      	adds	r3, #8
 8004588:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a16      	ldr	r2, [pc, #88]	@ (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800459c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	58025408 	.word	0x58025408
 80045bc:	5802541c 	.word	0x5802541c
 80045c0:	58025430 	.word	0x58025430
 80045c4:	58025444 	.word	0x58025444
 80045c8:	58025458 	.word	0x58025458
 80045cc:	5802546c 	.word	0x5802546c
 80045d0:	58025480 	.word	0x58025480
 80045d4:	58025494 	.word	0x58025494
 80045d8:	cccccccd 	.word	0xcccccccd
 80045dc:	16009600 	.word	0x16009600
 80045e0:	58025880 	.word	0x58025880
 80045e4:	aaaaaaab 	.word	0xaaaaaaab
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	4002040f 	.word	0x4002040f
 80045f0:	10008200 	.word	0x10008200
 80045f4:	40020880 	.word	0x40020880

080045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04a      	beq.n	80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d847      	bhi.n	80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a25      	ldr	r2, [pc, #148]	@ (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1f      	ldr	r2, [pc, #124]	@ (80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1e      	ldr	r2, [pc, #120]	@ (80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1c      	ldr	r2, [pc, #112]	@ (80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1b      	ldr	r2, [pc, #108]	@ (80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	461a      	mov	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004680:	671a      	str	r2, [r3, #112]	@ 0x70
 8004682:	e009      	b.n	8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a11      	ldr	r2, [pc, #68]	@ (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004696:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	2201      	movs	r2, #1
 800469e:	409a      	lsls	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	58025408 	.word	0x58025408
 80046b4:	5802541c 	.word	0x5802541c
 80046b8:	58025430 	.word	0x58025430
 80046bc:	58025444 	.word	0x58025444
 80046c0:	58025458 	.word	0x58025458
 80046c4:	5802546c 	.word	0x5802546c
 80046c8:	58025480 	.word	0x58025480
 80046cc:	58025494 	.word	0x58025494
 80046d0:	1600963f 	.word	0x1600963f
 80046d4:	58025940 	.word	0x58025940
 80046d8:	1000823f 	.word	0x1000823f
 80046dc:	40020940 	.word	0x40020940

080046e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	@ 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046ee:	4b86      	ldr	r3, [pc, #536]	@ (8004908 <HAL_GPIO_Init+0x228>)
 80046f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046f2:	e18c      	b.n	8004a0e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 817e 	beq.w	8004a08 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d005      	beq.n	8004724 <HAL_GPIO_Init+0x44>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d130      	bne.n	8004786 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800475a:	2201      	movs	r2, #1
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0201 	and.w	r2, r3, #1
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d017      	beq.n	80047c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	2203      	movs	r2, #3
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d123      	bne.n	8004816 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	220f      	movs	r2, #15
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	08da      	lsrs	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3208      	adds	r2, #8
 8004810:	69b9      	ldr	r1, [r7, #24]
 8004812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2203      	movs	r2, #3
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0203 	and.w	r2, r3, #3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80d8 	beq.w	8004a08 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004858:	4b2c      	ldr	r3, [pc, #176]	@ (800490c <HAL_GPIO_Init+0x22c>)
 800485a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800485e:	4a2b      	ldr	r2, [pc, #172]	@ (800490c <HAL_GPIO_Init+0x22c>)
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004868:	4b28      	ldr	r3, [pc, #160]	@ (800490c <HAL_GPIO_Init+0x22c>)
 800486a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004876:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <HAL_GPIO_Init+0x230>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_GPIO_Init+0x234>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d04a      	beq.n	8004938 <HAL_GPIO_Init+0x258>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <HAL_GPIO_Init+0x238>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02b      	beq.n	8004902 <HAL_GPIO_Init+0x222>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	@ (800491c <HAL_GPIO_Init+0x23c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d025      	beq.n	80048fe <HAL_GPIO_Init+0x21e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004920 <HAL_GPIO_Init+0x240>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01f      	beq.n	80048fa <HAL_GPIO_Init+0x21a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a19      	ldr	r2, [pc, #100]	@ (8004924 <HAL_GPIO_Init+0x244>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d019      	beq.n	80048f6 <HAL_GPIO_Init+0x216>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_GPIO_Init+0x248>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_GPIO_Init+0x212>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a17      	ldr	r2, [pc, #92]	@ (800492c <HAL_GPIO_Init+0x24c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00d      	beq.n	80048ee <HAL_GPIO_Init+0x20e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <HAL_GPIO_Init+0x250>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <HAL_GPIO_Init+0x20a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a15      	ldr	r2, [pc, #84]	@ (8004934 <HAL_GPIO_Init+0x254>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_GPIO_Init+0x206>
 80048e2:	2309      	movs	r3, #9
 80048e4:	e029      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048e6:	230a      	movs	r3, #10
 80048e8:	e027      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e025      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048ee:	2306      	movs	r3, #6
 80048f0:	e023      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048f2:	2305      	movs	r3, #5
 80048f4:	e021      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048f6:	2304      	movs	r3, #4
 80048f8:	e01f      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e01d      	b.n	800493a <HAL_GPIO_Init+0x25a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e01b      	b.n	800493a <HAL_GPIO_Init+0x25a>
 8004902:	2301      	movs	r3, #1
 8004904:	e019      	b.n	800493a <HAL_GPIO_Init+0x25a>
 8004906:	bf00      	nop
 8004908:	58000080 	.word	0x58000080
 800490c:	58024400 	.word	0x58024400
 8004910:	58000400 	.word	0x58000400
 8004914:	58020000 	.word	0x58020000
 8004918:	58020400 	.word	0x58020400
 800491c:	58020800 	.word	0x58020800
 8004920:	58020c00 	.word	0x58020c00
 8004924:	58021000 	.word	0x58021000
 8004928:	58021400 	.word	0x58021400
 800492c:	58021800 	.word	0x58021800
 8004930:	58021c00 	.word	0x58021c00
 8004934:	58022400 	.word	0x58022400
 8004938:	2300      	movs	r3, #0
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	f002 0203 	and.w	r2, r2, #3
 8004940:	0092      	lsls	r2, r2, #2
 8004942:	4093      	lsls	r3, r2
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800494a:	4938      	ldr	r1, [pc, #224]	@ (8004a2c <HAL_GPIO_Init+0x34c>)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	3302      	adds	r3, #2
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800497e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f47f ae6b 	bne.w	80046f4 <HAL_GPIO_Init+0x14>
  }
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	3724      	adds	r7, #36	@ 0x24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	58000400 	.word	0x58000400

08004a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a40:	787b      	ldrb	r3, [r7, #1]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a4c:	e003      	b.n	8004a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	041a      	lsls	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	619a      	str	r2, [r3, #24]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	041a      	lsls	r2, r3, #16
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43d9      	mvns	r1, r3
 8004a80:	887b      	ldrh	r3, [r7, #2]
 8004a82:	400b      	ands	r3, r1
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	619a      	str	r2, [r3, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 fe6d 	bl	800a79c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	58024800 	.word	0x58024800

08004aec <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_PWR_EnablePVD+0x1c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a04      	ldr	r2, [pc, #16]	@ (8004b08 <HAL_PWR_EnablePVD+0x1c>)
 8004af6:	f043 0310 	orr.w	r3, r3, #16
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	58024800 	.word	0x58024800

08004b0c <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004b18:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <HAL_PWR_EnterSLEEPMode+0x30>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	4a07      	ldr	r2, [pc, #28]	@ (8004b3c <HAL_PWR_EnterSLEEPMode+0x30>)
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8004b2a:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8004b2c:	e000      	b.n	8004b30 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 8004b2e:	bf20      	wfe
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004b44:	4b0e      	ldr	r3, [pc, #56]	@ (8004b80 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b4a:	f043 0305 	orr.w	r3, r3, #5
 8004b4e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <HAL_PWR_EnterSTANDBYMode+0x40>)
 8004b56:	f043 0302 	orr.w	r3, r3, #2
 8004b5a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4a08      	ldr	r2, [pc, #32]	@ (8004b84 <HAL_PWR_EnterSTANDBYMode+0x44>)
 8004b62:	f043 0304 	orr.w	r3, r3, #4
 8004b66:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b68:	f3bf 8f4f 	dsb	sy
}
 8004b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b6e:	f3bf 8f6f 	isb	sy
}
 8004b72:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
 8004b74:	bf30      	wfi
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	58024800 	.word	0x58024800
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b90:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b9c:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e01f      	b.n	8004bee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e01d      	b.n	8004bee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bb2:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	490f      	ldr	r1, [pc, #60]	@ (8004bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bc2:	f7fc fe39 	bl	8001838 <HAL_GetTick>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bc8:	e009      	b.n	8004bde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bca:	f7fc fe35 	bl	8001838 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bd8:	d901      	bls.n	8004bde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e007      	b.n	8004bee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bde:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_PWREx_ConfigSupply+0x70>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bea:	d1ee      	bne.n	8004bca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	58024800 	.word	0x58024800

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e3c8      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8087 	beq.w	8004d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1c:	4b88      	ldr	r3, [pc, #544]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c26:	4b86      	ldr	r3, [pc, #536]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d007      	beq.n	8004c42 <HAL_RCC_OscConfig+0x46>
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	2b18      	cmp	r3, #24
 8004c36:	d110      	bne.n	8004c5a <HAL_RCC_OscConfig+0x5e>
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c42:	4b7f      	ldr	r3, [pc, #508]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d06c      	beq.n	8004d28 <HAL_RCC_OscConfig+0x12c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d168      	bne.n	8004d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e3a2      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_OscConfig+0x76>
 8004c64:	4b76      	ldr	r3, [pc, #472]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a75      	ldr	r2, [pc, #468]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e02e      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x98>
 8004c7a:	4b71      	ldr	r3, [pc, #452]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a70      	ldr	r2, [pc, #448]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b6e      	ldr	r3, [pc, #440]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e01d      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0xbc>
 8004c9e:	4b68      	ldr	r3, [pc, #416]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a67      	ldr	r2, [pc, #412]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b65      	ldr	r3, [pc, #404]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a64      	ldr	r2, [pc, #400]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0xd4>
 8004cb8:	4b61      	ldr	r3, [pc, #388]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a60      	ldr	r2, [pc, #384]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d013      	beq.n	8004d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fc fdae 	bl	8001838 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fc fdaa 	bl	8001838 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	@ 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e356      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf2:	4b53      	ldr	r3, [pc, #332]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0xe4>
 8004cfe:	e014      	b.n	8004d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fc fd9a 	bl	8001838 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d08:	f7fc fd96 	bl	8001838 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b64      	cmp	r3, #100	@ 0x64
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e342      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d1a:	4b49      	ldr	r3, [pc, #292]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x10c>
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 808c 	beq.w	8004e50 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d38:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d42:	4b3f      	ldr	r3, [pc, #252]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_RCC_OscConfig+0x162>
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	2b18      	cmp	r3, #24
 8004d52:	d137      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c8>
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d132      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5e:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e314      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d76:	4b32      	ldr	r3, [pc, #200]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 0219 	bic.w	r2, r3, #25
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	492f      	ldr	r1, [pc, #188]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fc fd56 	bl	8001838 <HAL_GetTick>
 8004d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d90:	f7fc fd52 	bl	8001838 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e2fe      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da2:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	4920      	ldr	r1, [pc, #128]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	e045      	b.n	8004e50 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d026      	beq.n	8004e1a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0219 	bic.w	r2, r3, #25
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4919      	ldr	r1, [pc, #100]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fc fd2b 	bl	8001838 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de6:	f7fc fd27 	bl	8001838 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e2d3      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df8:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	490b      	ldr	r1, [pc, #44]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
 8004e18:	e01a      	b.n	8004e50 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fc fd07 	bl	8001838 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2e:	f7fc fd03 	bl	8001838 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d903      	bls.n	8004e44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e2af      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
 8004e40:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e44:	4b96      	ldr	r3, [pc, #600]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d06a      	beq.n	8004f32 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5c:	4b90      	ldr	r3, [pc, #576]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e64:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e66:	4b8e      	ldr	r3, [pc, #568]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d007      	beq.n	8004e82 <HAL_RCC_OscConfig+0x286>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b18      	cmp	r3, #24
 8004e76:	d11b      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2b4>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d116      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e82:	4b87      	ldr	r3, [pc, #540]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_RCC_OscConfig+0x29e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e282      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e9a:	4b81      	ldr	r3, [pc, #516]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	497d      	ldr	r1, [pc, #500]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eae:	e040      	b.n	8004f32 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004eb8:	4b79      	ldr	r3, [pc, #484]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a78      	ldr	r2, [pc, #480]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fc fcb8 	bl	8001838 <HAL_GetTick>
 8004ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ecc:	f7fc fcb4 	bl	8001838 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e260      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ede:	4b70      	ldr	r3, [pc, #448]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eea:	4b6d      	ldr	r3, [pc, #436]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	4969      	ldr	r1, [pc, #420]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60cb      	str	r3, [r1, #12]
 8004efe:	e018      	b.n	8004f32 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f00:	4b67      	ldr	r3, [pc, #412]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a66      	ldr	r2, [pc, #408]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fc fc94 	bl	8001838 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f14:	f7fc fc90 	bl	8001838 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e23c      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f26:	4b5e      	ldr	r3, [pc, #376]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d036      	beq.n	8004fac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f46:	4b56      	ldr	r3, [pc, #344]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4a:	4a55      	ldr	r2, [pc, #340]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fc fc71 	bl	8001838 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fc fc6d 	bl	8001838 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e219      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x35e>
 8004f78:	e018      	b.n	8004fac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7a:	4b49      	ldr	r3, [pc, #292]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f7e:	4a48      	ldr	r2, [pc, #288]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f86:	f7fc fc57 	bl	8001838 <HAL_GetTick>
 8004f8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8e:	f7fc fc53 	bl	8001838 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1ff      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d036      	beq.n	8005026 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d019      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fc0:	4b37      	ldr	r3, [pc, #220]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a36      	ldr	r2, [pc, #216]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fcc:	f7fc fc34 	bl	8001838 <HAL_GetTick>
 8004fd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fd4:	f7fc fc30 	bl	8001838 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1dc      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x3d8>
 8004ff2:	e018      	b.n	8005026 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a29      	ldr	r2, [pc, #164]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8004ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005000:	f7fc fc1a 	bl	8001838 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005008:	f7fc fc16 	bl	8001838 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1c2      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800501a:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8086 	beq.w	8005140 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x4a8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1a      	ldr	r2, [pc, #104]	@ (80050a4 <HAL_RCC_OscConfig+0x4a8>)
 800503a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005040:	f7fc fbfa 	bl	8001838 <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005048:	f7fc fbf6 	bl	8001838 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1a2      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505a:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <HAL_RCC_OscConfig+0x4a8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d106      	bne.n	800507c <HAL_RCC_OscConfig+0x480>
 800506e:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a0b      	ldr	r2, [pc, #44]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	e032      	b.n	80050e2 <HAL_RCC_OscConfig+0x4e6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d111      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4ac>
 8005084:	4b06      	ldr	r3, [pc, #24]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8005086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005088:	4a05      	ldr	r2, [pc, #20]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005090:	4b03      	ldr	r3, [pc, #12]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	4a02      	ldr	r2, [pc, #8]	@ (80050a0 <HAL_RCC_OscConfig+0x4a4>)
 8005096:	f023 0304 	bic.w	r3, r3, #4
 800509a:	6713      	str	r3, [r2, #112]	@ 0x70
 800509c:	e021      	b.n	80050e2 <HAL_RCC_OscConfig+0x4e6>
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58024800 	.word	0x58024800
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d10c      	bne.n	80050ca <HAL_RCC_OscConfig+0x4ce>
 80050b0:	4b83      	ldr	r3, [pc, #524]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	4a82      	ldr	r2, [pc, #520]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80050bc:	4b80      	ldr	r3, [pc, #512]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	4a7f      	ldr	r2, [pc, #508]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c8:	e00b      	b.n	80050e2 <HAL_RCC_OscConfig+0x4e6>
 80050ca:	4b7d      	ldr	r3, [pc, #500]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a7c      	ldr	r2, [pc, #496]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d6:	4b7a      	ldr	r3, [pc, #488]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	4a79      	ldr	r2, [pc, #484]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d015      	beq.n	8005116 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fc fba5 	bl	8001838 <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f0:	e00a      	b.n	8005108 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fc fba1 	bl	8001838 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e14b      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005108:	4b6d      	ldr	r3, [pc, #436]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ee      	beq.n	80050f2 <HAL_RCC_OscConfig+0x4f6>
 8005114:	e014      	b.n	8005140 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fc fb8f 	bl	8001838 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc fb8b 	bl	8001838 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e135      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005134:	4b62      	ldr	r3, [pc, #392]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1ee      	bne.n	800511e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 812a 	beq.w	800539e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800514a:	4b5d      	ldr	r3, [pc, #372]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005152:	2b18      	cmp	r3, #24
 8005154:	f000 80ba 	beq.w	80052cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2b02      	cmp	r3, #2
 800515e:	f040 8095 	bne.w	800528c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005162:	4b57      	ldr	r3, [pc, #348]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a56      	ldr	r2, [pc, #344]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800516c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fc fb63 	bl	8001838 <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005176:	f7fc fb5f 	bl	8001838 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e10b      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005188:	4b4d      	ldr	r3, [pc, #308]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005194:	4b4a      	ldr	r3, [pc, #296]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005198:	4b4a      	ldr	r3, [pc, #296]	@ (80052c4 <HAL_RCC_OscConfig+0x6c8>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	430a      	orrs	r2, r1
 80051a8:	4945      	ldr	r1, [pc, #276]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	3b01      	subs	r3, #1
 80051b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051bc:	3b01      	subs	r3, #1
 80051be:	025b      	lsls	r3, r3, #9
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	3b01      	subs	r3, #1
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	3b01      	subs	r3, #1
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051de:	4938      	ldr	r1, [pc, #224]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051e4:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	4a35      	ldr	r2, [pc, #212]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051f0:	4b33      	ldr	r3, [pc, #204]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f4:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCC_OscConfig+0x6cc>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051fc:	00d2      	lsls	r2, r2, #3
 80051fe:	4930      	ldr	r1, [pc, #192]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005204:	4b2e      	ldr	r3, [pc, #184]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	f023 020c 	bic.w	r2, r3, #12
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	492b      	ldr	r1, [pc, #172]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005216:	4b2a      	ldr	r3, [pc, #168]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	f023 0202 	bic.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	4927      	ldr	r1, [pc, #156]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005228:	4b25      	ldr	r3, [pc, #148]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	4a24      	ldr	r2, [pc, #144]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005234:	4b22      	ldr	r3, [pc, #136]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005240:	4b1f      	ldr	r3, [pc, #124]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800524c:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005258:	4b19      	ldr	r3, [pc, #100]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a18      	ldr	r2, [pc, #96]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc fae8 	bl	8001838 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fc fae4 	bl	8001838 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e090      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800527e:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x670>
 800528a:	e088      	b.n	800539e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528c:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0b      	ldr	r2, [pc, #44]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 8005292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fc face 	bl	8001838 <HAL_GetTick>
 800529c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fc faca 	bl	8001838 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e076      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052b2:	4b03      	ldr	r3, [pc, #12]	@ (80052c0 <HAL_RCC_OscConfig+0x6c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x6a4>
 80052be:	e06e      	b.n	800539e <HAL_RCC_OscConfig+0x7a2>
 80052c0:	58024400 	.word	0x58024400
 80052c4:	fffffc0c 	.word	0xfffffc0c
 80052c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052cc:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052d2:	4b35      	ldr	r3, [pc, #212]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d031      	beq.n	8005344 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f003 0203 	and.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d12a      	bne.n	8005344 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d122      	bne.n	8005344 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005308:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d11a      	bne.n	8005344 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	0a5b      	lsrs	r3, r3, #9
 8005312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d111      	bne.n	8005344 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d108      	bne.n	8005344 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0e1b      	lsrs	r3, r3, #24
 8005336:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e02b      	b.n	80053a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005348:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 800534a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005352:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	d01f      	beq.n	800539e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800535e:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800536a:	f7fc fa65 	bl	8001838 <HAL_GetTick>
 800536e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005370:	bf00      	nop
 8005372:	f7fc fa61 	bl	8001838 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	4293      	cmp	r3, r2
 800537c:	d0f9      	beq.n	8005372 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 8005380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <HAL_RCC_OscConfig+0x7b0>)
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800538a:	00d2      	lsls	r2, r2, #3
 800538c:	4906      	ldr	r1, [pc, #24]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 800538e:	4313      	orrs	r3, r2
 8005390:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005392:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a04      	ldr	r2, [pc, #16]	@ (80053a8 <HAL_RCC_OscConfig+0x7ac>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3730      	adds	r7, #48	@ 0x30
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	58024400 	.word	0x58024400
 80053ac:	ffff0007 	.word	0xffff0007

080053b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e19c      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c4:	4b8a      	ldr	r3, [pc, #552]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d910      	bls.n	80053f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b87      	ldr	r3, [pc, #540]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 020f 	bic.w	r2, r3, #15
 80053da:	4985      	ldr	r1, [pc, #532]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b83      	ldr	r3, [pc, #524]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e184      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	4b7b      	ldr	r3, [pc, #492]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800540c:	429a      	cmp	r2, r3
 800540e:	d908      	bls.n	8005422 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005410:	4b78      	ldr	r3, [pc, #480]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	4975      	ldr	r1, [pc, #468]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800541e:	4313      	orrs	r3, r2
 8005420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	4b70      	ldr	r3, [pc, #448]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800543a:	429a      	cmp	r2, r3
 800543c:	d908      	bls.n	8005450 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800543e:	4b6d      	ldr	r3, [pc, #436]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	496a      	ldr	r1, [pc, #424]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800544c:	4313      	orrs	r3, r2
 800544e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	4b64      	ldr	r3, [pc, #400]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005468:	429a      	cmp	r2, r3
 800546a:	d908      	bls.n	800547e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800546c:	4b61      	ldr	r3, [pc, #388]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	495e      	ldr	r1, [pc, #376]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800547a:	4313      	orrs	r3, r2
 800547c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d010      	beq.n	80054ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	4b59      	ldr	r3, [pc, #356]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005496:	429a      	cmp	r2, r3
 8005498:	d908      	bls.n	80054ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800549a:	4b56      	ldr	r3, [pc, #344]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4953      	ldr	r1, [pc, #332]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d010      	beq.n	80054da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	4b4d      	ldr	r3, [pc, #308]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d908      	bls.n	80054da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b4a      	ldr	r3, [pc, #296]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f023 020f 	bic.w	r2, r3, #15
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4947      	ldr	r1, [pc, #284]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d055      	beq.n	8005592 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054e6:	4b43      	ldr	r3, [pc, #268]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4940      	ldr	r1, [pc, #256]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005500:	4b3c      	ldr	r3, [pc, #240]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d121      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0f6      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d107      	bne.n	8005528 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005518:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d115      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0ea      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005530:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0de      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005540:	4b2c      	ldr	r3, [pc, #176]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0d6      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005550:	4b28      	ldr	r3, [pc, #160]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f023 0207 	bic.w	r2, r3, #7
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4925      	ldr	r1, [pc, #148]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 800555e:	4313      	orrs	r3, r2
 8005560:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fc f969 	bl	8001838 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005568:	e00a      	b.n	8005580 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556a:	f7fc f965 	bl	8001838 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e0be      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005580:	4b1c      	ldr	r3, [pc, #112]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	429a      	cmp	r2, r3
 8005590:	d1eb      	bne.n	800556a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d208      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ae:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	490e      	ldr	r1, [pc, #56]	@ (80055f4 <HAL_RCC_ClockConfig+0x244>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d214      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ce:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 020f 	bic.w	r2, r3, #15
 80055d6:	4906      	ldr	r1, [pc, #24]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <HAL_RCC_ClockConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e086      	b.n	80056fe <HAL_RCC_ClockConfig+0x34e>
 80055f0:	52002000 	.word	0x52002000
 80055f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d010      	beq.n	8005626 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	4b3f      	ldr	r3, [pc, #252]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005610:	429a      	cmp	r2, r3
 8005612:	d208      	bcs.n	8005626 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005614:	4b3c      	ldr	r3, [pc, #240]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	4939      	ldr	r1, [pc, #228]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005622:	4313      	orrs	r3, r2
 8005624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d010      	beq.n	8005654 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800563e:	429a      	cmp	r2, r3
 8005640:	d208      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005642:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	492e      	ldr	r1, [pc, #184]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005650:	4313      	orrs	r3, r2
 8005652:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b00      	cmp	r3, #0
 800565e:	d010      	beq.n	8005682 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	4b28      	ldr	r3, [pc, #160]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800566c:	429a      	cmp	r2, r3
 800566e:	d208      	bcs.n	8005682 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005670:	4b25      	ldr	r3, [pc, #148]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4922      	ldr	r1, [pc, #136]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 800567e:	4313      	orrs	r3, r2
 8005680:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800569a:	429a      	cmp	r2, r3
 800569c:	d208      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800569e:	4b1a      	ldr	r3, [pc, #104]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	4917      	ldr	r1, [pc, #92]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056b0:	f000 f834 	bl	800571c <HAL_RCC_GetSysClockFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	4912      	ldr	r1, [pc, #72]	@ (800570c <HAL_RCC_ClockConfig+0x35c>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCC_ClockConfig+0x358>)
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	4a0d      	ldr	r2, [pc, #52]	@ (800570c <HAL_RCC_ClockConfig+0x35c>)
 80056d8:	5cd3      	ldrb	r3, [r2, r3]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <HAL_RCC_ClockConfig+0x360>)
 80056e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <HAL_RCC_ClockConfig+0x364>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <HAL_RCC_ClockConfig+0x368>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fc f856 	bl	80017a4 <HAL_InitTick>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	58024400 	.word	0x58024400
 800570c:	0800c40c 	.word	0x0800c40c
 8005710:	24000088 	.word	0x24000088
 8005714:	24000084 	.word	0x24000084
 8005718:	2400008c 	.word	0x2400008c

0800571c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	@ 0x24
 8005720:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005722:	4bb3      	ldr	r3, [pc, #716]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800572a:	2b18      	cmp	r3, #24
 800572c:	f200 8155 	bhi.w	80059da <HAL_RCC_GetSysClockFreq+0x2be>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800579d 	.word	0x0800579d
 800573c:	080059db 	.word	0x080059db
 8005740:	080059db 	.word	0x080059db
 8005744:	080059db 	.word	0x080059db
 8005748:	080059db 	.word	0x080059db
 800574c:	080059db 	.word	0x080059db
 8005750:	080059db 	.word	0x080059db
 8005754:	080059db 	.word	0x080059db
 8005758:	080057c3 	.word	0x080057c3
 800575c:	080059db 	.word	0x080059db
 8005760:	080059db 	.word	0x080059db
 8005764:	080059db 	.word	0x080059db
 8005768:	080059db 	.word	0x080059db
 800576c:	080059db 	.word	0x080059db
 8005770:	080059db 	.word	0x080059db
 8005774:	080059db 	.word	0x080059db
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080059db 	.word	0x080059db
 8005780:	080059db 	.word	0x080059db
 8005784:	080059db 	.word	0x080059db
 8005788:	080059db 	.word	0x080059db
 800578c:	080059db 	.word	0x080059db
 8005790:	080059db 	.word	0x080059db
 8005794:	080059db 	.word	0x080059db
 8005798:	080057cf 	.word	0x080057cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579c:	4b94      	ldr	r3, [pc, #592]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a8:	4b91      	ldr	r3, [pc, #580]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	4a90      	ldr	r2, [pc, #576]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057ba:	e111      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057bc:	4b8d      	ldr	r3, [pc, #564]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057be:	61bb      	str	r3, [r7, #24]
      break;
 80057c0:	e10e      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057c2:	4b8d      	ldr	r3, [pc, #564]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057c4:	61bb      	str	r3, [r7, #24]
      break;
 80057c6:	e10b      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057c8:	4b8c      	ldr	r3, [pc, #560]	@ (80059fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057ca:	61bb      	str	r3, [r7, #24]
      break;
 80057cc:	e108      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ce:	4b88      	ldr	r3, [pc, #544]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057d8:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057e4:	4b82      	ldr	r3, [pc, #520]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ee:	4b80      	ldr	r3, [pc, #512]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	08db      	lsrs	r3, r3, #3
 80057f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80e1 	beq.w	80059d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b02      	cmp	r3, #2
 8005816:	f000 8083 	beq.w	8005920 <HAL_RCC_GetSysClockFreq+0x204>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b02      	cmp	r3, #2
 800581e:	f200 80a1 	bhi.w	8005964 <HAL_RCC_GetSysClockFreq+0x248>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x114>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d056      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800582e:	e099      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005830:	4b6f      	ldr	r3, [pc, #444]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800583c:	4b6c      	ldr	r3, [pc, #432]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	4a6b      	ldr	r2, [pc, #428]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005866:	4b62      	ldr	r3, [pc, #392]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 6a02 	vldr	s12, [r7, #8]
 800587a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800587e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005896:	e087      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058aa:	4b51      	ldr	r3, [pc, #324]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80058be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058da:	e065      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	4b40      	ldr	r3, [pc, #256]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005902:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800591e:	e043      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a0c <HAL_RCC_GetSysClockFreq+0x2f0>
 800592e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005932:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	ed97 6a02 	vldr	s12, [r7, #8]
 8005946:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005962:	e021      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005976:	4b1e      	ldr	r3, [pc, #120]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005986:	ed97 6a02 	vldr	s12, [r7, #8]
 800598a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800598e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059a8:	4b11      	ldr	r3, [pc, #68]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	0a5b      	lsrs	r3, r3, #9
 80059ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b2:	3301      	adds	r3, #1
 80059b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059cc:	ee17 3a90 	vmov	r3, s15
 80059d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059d2:	e005      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
      break;
 80059d8:	e002      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059dc:	61bb      	str	r3, [r7, #24]
      break;
 80059de:	bf00      	nop
  }

  return sysclockfreq;
 80059e0:	69bb      	ldr	r3, [r7, #24]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3724      	adds	r7, #36	@ 0x24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58024400 	.word	0x58024400
 80059f4:	03d09000 	.word	0x03d09000
 80059f8:	003d0900 	.word	0x003d0900
 80059fc:	007a1200 	.word	0x007a1200
 8005a00:	46000000 	.word	0x46000000
 8005a04:	4c742400 	.word	0x4c742400
 8005a08:	4a742400 	.word	0x4a742400
 8005a0c:	4af42400 	.word	0x4af42400

08005a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a16:	f7ff fe81 	bl	800571c <HAL_RCC_GetSysClockFreq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b10      	ldr	r3, [pc, #64]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	490f      	ldr	r1, [pc, #60]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a28:	5ccb      	ldrb	r3, [r1, r3]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a34:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a3e:	5cd3      	ldrb	r3, [r2, r3]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a07      	ldr	r2, [pc, #28]	@ (8005a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a4e:	4a07      	ldr	r2, [pc, #28]	@ (8005a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a54:	4b04      	ldr	r3, [pc, #16]	@ (8005a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024400 	.word	0x58024400
 8005a64:	0800c40c 	.word	0x0800c40c
 8005a68:	24000088 	.word	0x24000088
 8005a6c:	24000084 	.word	0x24000084

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a74:	f7ff ffcc 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b06      	ldr	r3, [pc, #24]	@ (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4904      	ldr	r1, [pc, #16]	@ (8005a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	58024400 	.word	0x58024400
 8005a98:	0800c40c 	.word	0x0800c40c

08005a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005aa0:	f7ff ffb6 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4904      	ldr	r1, [pc, #16]	@ (8005ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	0800c40c 	.word	0x0800c40c

08005ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005acc:	b0c6      	sub	sp, #280	@ 0x118
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005aec:	2500      	movs	r5, #0
 8005aee:	ea54 0305 	orrs.w	r3, r4, r5
 8005af2:	d049      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005afa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005afe:	d02f      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b04:	d828      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b0a:	d01a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b10:	d822      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b1a:	d007      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b1c:	e01c      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b1e:	4bab      	ldr	r3, [pc, #684]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b22:	4aaa      	ldr	r2, [pc, #680]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b2a:	e01a      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	3308      	adds	r3, #8
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fc25 	bl	8007384 <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b40:	e00f      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	3328      	adds	r3, #40	@ 0x28
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 fccc 	bl	80074e8 <RCCEx_PLL3_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b56:	e004      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b5e:	e000      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b6a:	4b98      	ldr	r3, [pc, #608]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b78:	4a94      	ldr	r2, [pc, #592]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7e:	e003      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b94:	f04f 0900 	mov.w	r9, #0
 8005b98:	ea58 0309 	orrs.w	r3, r8, r9
 8005b9c:	d047      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d82a      	bhi.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bd3 	.word	0x08005bd3
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005c07 	.word	0x08005c07
 8005bc0:	08005c07 	.word	0x08005c07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc4:	4b81      	ldr	r3, [pc, #516]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4a80      	ldr	r2, [pc, #512]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e01a      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fbd2 	bl	8007384 <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be6:	e00f      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	3328      	adds	r3, #40	@ 0x28
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 fc79 	bl	80074e8 <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bfc:	e004      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c04:	e000      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c10:	4b6e      	ldr	r3, [pc, #440]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	f023 0107 	bic.w	r1, r3, #7
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c24:	e003      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c3a:	f04f 0b00 	mov.w	fp, #0
 8005c3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c42:	d05b      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c4c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c50:	d03b      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c52:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c56:	d834      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c5c:	d037      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c62:	d82e      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c68:	d033      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c6e:	d828      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c74:	d01a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7a:	d822      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c84:	d007      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c86:	e01c      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c88:	4b50      	ldr	r3, [pc, #320]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c94:	e01e      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fb70 	bl	8007384 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005caa:	e013      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	3328      	adds	r3, #40	@ 0x28
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fc17 	bl	80074e8 <RCCEx_PLL3_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cec:	4a37      	ldr	r2, [pc, #220]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf2:	e003      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d05d      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d28:	d03b      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d2e:	d834      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d34:	d037      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d3a:	d82e      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d40:	d033      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d46:	d828      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4c:	d01a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d52:	d822      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d5c:	d007      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d5e:	e01c      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a19      	ldr	r2, [pc, #100]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6c:	e01e      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fb04 	bl	8007384 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d82:	e013      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	3328      	adds	r3, #40	@ 0x28
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fbab 	bl	80074e8 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005da0:	e004      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005db4:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dc4:	4a01      	ldr	r2, [pc, #4]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dca:	e005      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005de4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d03a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	2b30      	cmp	r3, #48	@ 0x30
 8005e00:	d01f      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e02:	2b30      	cmp	r3, #48	@ 0x30
 8005e04:	d819      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d815      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d111      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e16:	4baa      	ldr	r3, [pc, #680]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4aa9      	ldr	r2, [pc, #676]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e22:	e011      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	3308      	adds	r3, #8
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 faa9 	bl	8007384 <RCCEx_PLL2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e38:	e006      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e40:	e002      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e42:	bf00      	nop
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e50:	4b9b      	ldr	r3, [pc, #620]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	4a98      	ldr	r2, [pc, #608]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e60:	430b      	orrs	r3, r1
 8005e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e64:	e003      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d051      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e98:	d035      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e9e:	d82e      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea4:	d031      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eaa:	d828      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	d01a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb6:	d822      	bhi.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ec2:	e01c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	4a7d      	ldr	r2, [pc, #500]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fa52 	bl	8007384 <RCCEx_PLL2_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ee6:	e011      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	3328      	adds	r3, #40	@ 0x28
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 faf9 	bl	80074e8 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f14:	4b6a      	ldr	r3, [pc, #424]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	4a67      	ldr	r2, [pc, #412]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d053      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f5c:	d033      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f62:	d82c      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f68:	d02f      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f6e:	d826      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f74:	d02b      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f7a:	d820      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f80:	d012      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f86:	d81a      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d022      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d115      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f96:	3308      	adds	r3, #8
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f9f2 	bl	8007384 <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fa6:	e015      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fac:	3328      	adds	r3, #40	@ 0x28
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fa99 	bl	80074e8 <RCCEx_PLL3_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e00a      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e004      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fca:	bf00      	nop
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fdc:	4b38      	ldr	r3, [pc, #224]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006010:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d058      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006026:	d033      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602c:	d82c      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d02f      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d826      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800603a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603e:	d02b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006044:	d820      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d012      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d81a      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605a:	d115      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	3308      	adds	r3, #8
 8006062:	2101      	movs	r1, #1
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f98d 	bl	8007384 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006070:	e015      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	3328      	adds	r3, #40	@ 0x28
 8006078:	2101      	movs	r1, #1
 800607a:	4618      	mov	r0, r3
 800607c:	f001 fa34 	bl	80074e8 <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006086:	e00a      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10e      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060b6:	4a02      	ldr	r2, [pc, #8]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80060bc:	e006      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060dc:	2300      	movs	r3, #0
 80060de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d037      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f6:	d00e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80060f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060fc:	d816      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d018      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006106:	d111      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4bc4      	ldr	r3, [pc, #784]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	4ac3      	ldr	r2, [pc, #780]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611a:	3308      	adds	r3, #8
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f930 	bl	8007384 <RCCEx_PLL2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800613e:	4bb7      	ldr	r3, [pc, #732]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614c:	4ab3      	ldr	r2, [pc, #716]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6513      	str	r3, [r2, #80]	@ 0x50
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006172:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d039      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81c      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061c9 	.word	0x080061c9
 8006190:	0800619d 	.word	0x0800619d
 8006194:	080061ab 	.word	0x080061ab
 8006198:	080061c9 	.word	0x080061c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619c:	4b9f      	ldr	r3, [pc, #636]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	4a9e      	ldr	r2, [pc, #632]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061a8:	e00f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	3308      	adds	r3, #8
 80061b0:	2102      	movs	r1, #2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 f8e6 	bl	8007384 <RCCEx_PLL2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061d2:	4b92      	ldr	r3, [pc, #584]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	f023 0103 	bic.w	r1, r3, #3
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e0:	4a8e      	ldr	r2, [pc, #568]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061e6:	e003      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006206:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	f000 8099 	beq.w	8006344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006212:	4b83      	ldr	r3, [pc, #524]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a82      	ldr	r2, [pc, #520]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800621e:	f7fb fb0b 	bl	8001838 <HAL_GetTick>
 8006222:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006226:	e00b      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fb fb06 	bl	8001838 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b64      	cmp	r3, #100	@ 0x64
 8006236:	d903      	bls.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800623e:	e005      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006240:	4b77      	ldr	r3, [pc, #476]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ed      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800624c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006250:	2b00      	cmp	r3, #0
 8006252:	d173      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006254:	4b71      	ldr	r3, [pc, #452]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006260:	4053      	eors	r3, r2
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	2b00      	cmp	r3, #0
 8006268:	d015      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800626a:	4b6c      	ldr	r3, [pc, #432]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006276:	4b69      	ldr	r3, [pc, #420]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	4a68      	ldr	r2, [pc, #416]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006280:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006282:	4b66      	ldr	r3, [pc, #408]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a65      	ldr	r2, [pc, #404]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800628e:	4a63      	ldr	r2, [pc, #396]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006294:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800629e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a2:	d118      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fb fac8 	bl	8001838 <HAL_GetTick>
 80062a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ac:	e00d      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fb fac3 	bl	8001838 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062be:	429a      	cmp	r2, r3
 80062c0:	d903      	bls.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ca:	4b54      	ldr	r3, [pc, #336]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0eb      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d129      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ee:	d10e      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062f0:	4b4a      	ldr	r3, [pc, #296]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006300:	091a      	lsrs	r2, r3, #4
 8006302:	4b48      	ldr	r3, [pc, #288]	@ (8006424 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006304:	4013      	ands	r3, r2
 8006306:	4a45      	ldr	r2, [pc, #276]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6113      	str	r3, [r2, #16]
 800630c:	e005      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800630e:	4b43      	ldr	r3, [pc, #268]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	4a42      	ldr	r2, [pc, #264]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006318:	6113      	str	r3, [r2, #16]
 800631a:	4b40      	ldr	r3, [pc, #256]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632a:	4a3c      	ldr	r2, [pc, #240]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006336:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f002 0301 	and.w	r3, r2, #1
 8006350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800635a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	f000 808f 	beq.w	8006484 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800636c:	2b28      	cmp	r3, #40	@ 0x28
 800636e:	d871      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	0800645d 	.word	0x0800645d
 800637c:	08006455 	.word	0x08006455
 8006380:	08006455 	.word	0x08006455
 8006384:	08006455 	.word	0x08006455
 8006388:	08006455 	.word	0x08006455
 800638c:	08006455 	.word	0x08006455
 8006390:	08006455 	.word	0x08006455
 8006394:	08006455 	.word	0x08006455
 8006398:	08006429 	.word	0x08006429
 800639c:	08006455 	.word	0x08006455
 80063a0:	08006455 	.word	0x08006455
 80063a4:	08006455 	.word	0x08006455
 80063a8:	08006455 	.word	0x08006455
 80063ac:	08006455 	.word	0x08006455
 80063b0:	08006455 	.word	0x08006455
 80063b4:	08006455 	.word	0x08006455
 80063b8:	0800643f 	.word	0x0800643f
 80063bc:	08006455 	.word	0x08006455
 80063c0:	08006455 	.word	0x08006455
 80063c4:	08006455 	.word	0x08006455
 80063c8:	08006455 	.word	0x08006455
 80063cc:	08006455 	.word	0x08006455
 80063d0:	08006455 	.word	0x08006455
 80063d4:	08006455 	.word	0x08006455
 80063d8:	0800645d 	.word	0x0800645d
 80063dc:	08006455 	.word	0x08006455
 80063e0:	08006455 	.word	0x08006455
 80063e4:	08006455 	.word	0x08006455
 80063e8:	08006455 	.word	0x08006455
 80063ec:	08006455 	.word	0x08006455
 80063f0:	08006455 	.word	0x08006455
 80063f4:	08006455 	.word	0x08006455
 80063f8:	0800645d 	.word	0x0800645d
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006455 	.word	0x08006455
 8006404:	08006455 	.word	0x08006455
 8006408:	08006455 	.word	0x08006455
 800640c:	08006455 	.word	0x08006455
 8006410:	08006455 	.word	0x08006455
 8006414:	08006455 	.word	0x08006455
 8006418:	0800645d 	.word	0x0800645d
 800641c:	58024400 	.word	0x58024400
 8006420:	58024800 	.word	0x58024800
 8006424:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	3308      	adds	r3, #8
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f000 ffa7 	bl	8007384 <RCCEx_PLL2_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800643c:	e00f      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	3328      	adds	r3, #40	@ 0x28
 8006444:	2101      	movs	r1, #1
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f84e 	bl	80074e8 <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006452:	e004      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800645a:	e000      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800645c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006466:	4bbf      	ldr	r3, [pc, #764]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006474:	4abb      	ldr	r2, [pc, #748]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006476:	430b      	orrs	r3, r1
 8006478:	6553      	str	r3, [r2, #84]	@ 0x54
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 0302 	and.w	r3, r2, #2
 8006490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800649a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d041      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d824      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	08006501 	.word	0x08006501
 80064b8:	080064cd 	.word	0x080064cd
 80064bc:	080064e3 	.word	0x080064e3
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	3308      	adds	r3, #8
 80064d2:	2101      	movs	r1, #1
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 ff55 	bl	8007384 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2101      	movs	r1, #1
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fffc 	bl	80074e8 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800650a:	4b96      	ldr	r3, [pc, #600]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650e:	f023 0107 	bic.w	r1, r3, #7
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006518:	4a92      	ldr	r2, [pc, #584]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800651a:	430b      	orrs	r3, r1
 800651c:	6553      	str	r3, [r2, #84]	@ 0x54
 800651e:	e003      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f002 0304 	and.w	r3, r2, #4
 8006534:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006538:	2300      	movs	r3, #0
 800653a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800653e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	d044      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006550:	2b05      	cmp	r3, #5
 8006552:	d825      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	080065a9 	.word	0x080065a9
 8006560:	08006575 	.word	0x08006575
 8006564:	0800658b 	.word	0x0800658b
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065a9 	.word	0x080065a9
 8006570:	080065a9 	.word	0x080065a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	3308      	adds	r3, #8
 800657a:	2101      	movs	r1, #1
 800657c:	4618      	mov	r0, r3
 800657e:	f000 ff01 	bl	8007384 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006588:	e00f      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ffa8 	bl	80074e8 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f023 0107 	bic.w	r1, r3, #7
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	4a68      	ldr	r2, [pc, #416]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f002 0320 	and.w	r3, r2, #32
 80065de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4313      	orrs	r3, r2
 80065f0:	d055      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065fe:	d033      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006604:	d82c      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660a:	d02f      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006610:	d826      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006616:	d02b      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800661c:	d820      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800661e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006622:	d012      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006628:	d81a      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d022      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006632:	d115      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006638:	3308      	adds	r3, #8
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fea1 	bl	8007384 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006648:	e015      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	3328      	adds	r3, #40	@ 0x28
 8006650:	2102      	movs	r1, #2
 8006652:	4618      	mov	r0, r3
 8006654:	f000 ff48 	bl	80074e8 <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006666:	e006      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006668:	bf00      	nop
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800667e:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006682:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800668e:	4a35      	ldr	r2, [pc, #212]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006690:	430b      	orrs	r3, r1
 8006692:	6553      	str	r3, [r2, #84]	@ 0x54
 8006694:	e003      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800669a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d058      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066ca:	d033      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066d0:	d82c      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d02f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066dc:	d826      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e2:	d02b      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e8:	d820      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ee:	d012      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f4:	d81a      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d022      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fe:	d115      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	3308      	adds	r3, #8
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fe3b 	bl	8007384 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006714:	e015      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fee2 	bl	80074e8 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800672a:	e00a      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006734:	bf00      	nop
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10e      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006756:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800675a:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006762:	bf00      	nop
 8006764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800677c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006786:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d055      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800679c:	d033      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800679e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067a2:	d82c      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a8:	d02f      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ae:	d826      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067b4:	d02b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067ba:	d820      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c0:	d012      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067c6:	d81a      	bhi.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d022      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d115      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d6:	3308      	adds	r3, #8
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fdd2 	bl	8007384 <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067e6:	e015      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	3328      	adds	r3, #40	@ 0x28
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fe79 	bl	80074e8 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00a      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800681c:	4ba0      	ldr	r3, [pc, #640]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800681e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006820:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800682c:	4a9c      	ldr	r2, [pc, #624]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800682e:	430b      	orrs	r3, r1
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
 8006832:	e003      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f002 0308 	and.w	r3, r2, #8
 8006848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006852:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d01e      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	d10c      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fe38 	bl	80074e8 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006884:	4b86      	ldr	r3, [pc, #536]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006894:	4a82      	ldr	r2, [pc, #520]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006896:	430b      	orrs	r3, r1
 8006898:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f002 0310 	and.w	r3, r2, #16
 80068a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d01e      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	3328      	adds	r3, #40	@ 0x28
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fe09 	bl	80074e8 <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068e2:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f2:	4a6b      	ldr	r2, [pc, #428]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006904:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006906:	2300      	movs	r3, #0
 8006908:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800690a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800690e:	460b      	mov	r3, r1
 8006910:	4313      	orrs	r3, r2
 8006912:	d03e      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800691c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006920:	d022      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006926:	d81b      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006930:	d00b      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006932:	e015      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006938:	3308      	adds	r3, #8
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fd21 	bl	8007384 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006948:	e00f      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	3328      	adds	r3, #40	@ 0x28
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fdc8 	bl	80074e8 <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800695e:	e004      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006966:	e000      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006976:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006982:	4a47      	ldr	r2, [pc, #284]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6593      	str	r3, [r2, #88]	@ 0x58
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800698e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800699e:	673b      	str	r3, [r7, #112]	@ 0x70
 80069a0:	2300      	movs	r3, #0
 80069a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80069a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d03b      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ba:	d01f      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069c0:	d818      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c6:	d003      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069cc:	d007      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069ce:	e011      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d0:	4b33      	ldr	r3, [pc, #204]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	4a32      	ldr	r2, [pc, #200]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069dc:	e00f      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2101      	movs	r1, #1
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fd7e 	bl	80074e8 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80069fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a06:	4b26      	ldr	r3, [pc, #152]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a16:	4a22      	ldr	r2, [pc, #136]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a34:	2300      	movs	r3, #0
 8006a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d034      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d007      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a52:	e011      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a58:	4a11      	ldr	r2, [pc, #68]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a60:	e00e      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	3308      	adds	r3, #8
 8006a68:	2102      	movs	r1, #2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fc8a 	bl	8007384 <RCCEx_PLL2_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a88:	4b05      	ldr	r3, [pc, #20]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a96:	4a02      	ldr	r2, [pc, #8]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aba:	2300      	movs	r3, #0
 8006abc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006abe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	d00c      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	3328      	adds	r3, #40	@ 0x28
 8006ace:	2102      	movs	r1, #2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fd09 	bl	80074e8 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006af0:	2300      	movs	r3, #0
 8006af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006af4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006af8:	460b      	mov	r3, r1
 8006afa:	4313      	orrs	r3, r2
 8006afc:	d036      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b08:	d018      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0e:	d811      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b14:	d014      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b1a:	d80b      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d011      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b24:	d106      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b26:	4bb7      	ldr	r3, [pc, #732]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	4ab6      	ldr	r2, [pc, #728]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b32:	e008      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b3a:	e004      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b4e:	4bad      	ldr	r3, [pc, #692]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b5c:	4aa9      	ldr	r2, [pc, #676]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b62:	e003      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b88:	4b9e      	ldr	r3, [pc, #632]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b96:	4a9b      	ldr	r2, [pc, #620]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006baa:	2300      	movs	r3, #0
 8006bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d009      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bb8:	4b92      	ldr	r3, [pc, #584]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc6:	4a8f      	ldr	r2, [pc, #572]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bda:	2300      	movs	r3, #0
 8006bdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006be2:	460b      	mov	r3, r1
 8006be4:	4313      	orrs	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006be8:	4b86      	ldr	r3, [pc, #536]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	4a85      	ldr	r2, [pc, #532]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bf2:	6113      	str	r3, [r2, #16]
 8006bf4:	4b83      	ldr	r3, [pc, #524]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf6:	6919      	ldr	r1, [r3, #16]
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c00:	4a80      	ldr	r2, [pc, #512]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d009      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c22:	4b78      	ldr	r3, [pc, #480]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c30:	4a74      	ldr	r2, [pc, #464]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c44:	2300      	movs	r3, #0
 8006c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d00a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c52:	4b6c      	ldr	r3, [pc, #432]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	4a68      	ldr	r2, [pc, #416]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	2100      	movs	r1, #0
 8006c72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d011      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c88:	3308      	adds	r3, #8
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb79 	bl	8007384 <RCCEx_PLL2_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6239      	str	r1, [r7, #32]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d011      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fb59 	bl	8007384 <RCCEx_PLL2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	61b9      	str	r1, [r7, #24]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d011      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	3308      	adds	r3, #8
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fb39 	bl	8007384 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	2100      	movs	r1, #0
 8006d32:	6139      	str	r1, [r7, #16]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d011      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	3328      	adds	r3, #40	@ 0x28
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fbcb 	bl	80074e8 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	2100      	movs	r1, #0
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d011      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	3328      	adds	r3, #40	@ 0x28
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fbab 	bl	80074e8 <RCCEx_PLL3_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	2100      	movs	r1, #0
 8006db2:	6039      	str	r1, [r7, #0]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	607b      	str	r3, [r7, #4]
 8006dba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d011      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	3328      	adds	r3, #40	@ 0x28
 8006dca:	2102      	movs	r1, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fb8b 	bl	80074e8 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006de8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400

08006e08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e0c:	f7fe fe00 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4904      	ldr	r1, [pc, #16]	@ (8006e30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	0800c40c 	.word	0x0800c40c

08006e34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b089      	sub	sp, #36	@ 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e3c:	4ba1      	ldr	r3, [pc, #644]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e46:	4b9f      	ldr	r3, [pc, #636]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	0b1b      	lsrs	r3, r3, #12
 8006e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e52:	4b9c      	ldr	r3, [pc, #624]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e5e:	4b99      	ldr	r3, [pc, #612]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8111 	beq.w	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	f000 8083 	beq.w	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	f200 80a1 	bhi.w	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d056      	beq.n	8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e9e:	e099      	b.n	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea0:	4b88      	ldr	r3, [pc, #544]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02d      	beq.n	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eac:	4b85      	ldr	r3, [pc, #532]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	08db      	lsrs	r3, r3, #3
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	4a84      	ldr	r2, [pc, #528]	@ (80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f06:	e087      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4a:	e065      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b59      	ldr	r3, [pc, #356]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8e:	e043      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa2:	4b48      	ldr	r3, [pc, #288]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd2:	e021      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b37      	ldr	r3, [pc, #220]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007016:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007018:	4b2a      	ldr	r3, [pc, #168]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	0a5b      	lsrs	r3, r3, #9
 800701e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800702e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007032:	edd7 6a07 	vldr	s13, [r7, #28]
 8007036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800703a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703e:	ee17 2a90 	vmov	r2, s15
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007046:	4b1f      	ldr	r3, [pc, #124]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	0c1b      	lsrs	r3, r3, #16
 800704c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800705c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007060:	edd7 6a07 	vldr	s13, [r7, #28]
 8007064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706c:	ee17 2a90 	vmov	r2, s15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007074:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007078:	0e1b      	lsrs	r3, r3, #24
 800707a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800708a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709a:	ee17 2a90 	vmov	r2, s15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070a2:	e008      	b.n	80070b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
}
 80070b6:	bf00      	nop
 80070b8:	3724      	adds	r7, #36	@ 0x24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	03d09000 	.word	0x03d09000
 80070cc:	46000000 	.word	0x46000000
 80070d0:	4c742400 	.word	0x4c742400
 80070d4:	4a742400 	.word	0x4a742400
 80070d8:	4af42400 	.word	0x4af42400

080070dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	@ 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e4:	4ba1      	ldr	r3, [pc, #644]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070ee:	4b9f      	ldr	r3, [pc, #636]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	0d1b      	lsrs	r3, r3, #20
 80070f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070fa:	4b9c      	ldr	r3, [pc, #624]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007106:	4b99      	ldr	r3, [pc, #612]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8111 	beq.w	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b02      	cmp	r3, #2
 800712e:	f000 8083 	beq.w	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b02      	cmp	r3, #2
 8007136:	f200 80a1 	bhi.w	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d056      	beq.n	80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007146:	e099      	b.n	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007148:	4b88      	ldr	r3, [pc, #544]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02d      	beq.n	80071b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007154:	4b85      	ldr	r3, [pc, #532]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	4a84      	ldr	r2, [pc, #528]	@ (8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b7b      	ldr	r3, [pc, #492]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ae:	e087      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b6a      	ldr	r3, [pc, #424]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f2:	e065      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b59      	ldr	r3, [pc, #356]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	e043      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b48      	ldr	r3, [pc, #288]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727a:	e021      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b37      	ldr	r3, [pc, #220]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072c0:	4b2a      	ldr	r3, [pc, #168]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	0a5b      	lsrs	r3, r3, #9
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072da:	edd7 6a07 	vldr	s13, [r7, #28]
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e6:	ee17 2a90 	vmov	r2, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072ee:	4b1f      	ldr	r3, [pc, #124]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007304:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007308:	edd7 6a07 	vldr	s13, [r7, #28]
 800730c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007314:	ee17 2a90 	vmov	r2, s15
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800731c:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007320:	0e1b      	lsrs	r3, r3, #24
 8007322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007336:	edd7 6a07 	vldr	s13, [r7, #28]
 800733a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007342:	ee17 2a90 	vmov	r2, s15
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800734a:	e008      	b.n	800735e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	3724      	adds	r7, #36	@ 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	03d09000 	.word	0x03d09000
 8007374:	46000000 	.word	0x46000000
 8007378:	4c742400 	.word	0x4c742400
 800737c:	4a742400 	.word	0x4a742400
 8007380:	4af42400 	.word	0x4af42400

08007384 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007392:	4b53      	ldr	r3, [pc, #332]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d101      	bne.n	80073a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e099      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073a2:	4b4f      	ldr	r3, [pc, #316]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a4e      	ldr	r2, [pc, #312]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ae:	f7fa fa43 	bl	8001838 <HAL_GetTick>
 80073b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073b6:	f7fa fa3f 	bl	8001838 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e086      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c8:	4b45      	ldr	r3, [pc, #276]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f0      	bne.n	80073b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073d4:	4b42      	ldr	r3, [pc, #264]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	031b      	lsls	r3, r3, #12
 80073e2:	493f      	ldr	r1, [pc, #252]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	025b      	lsls	r3, r3, #9
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	3b01      	subs	r3, #1
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007418:	4931      	ldr	r1, [pc, #196]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800741e:	4b30      	ldr	r3, [pc, #192]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	492d      	ldr	r1, [pc, #180]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800742c:	4313      	orrs	r3, r2
 800742e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007430:	4b2b      	ldr	r3, [pc, #172]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	f023 0220 	bic.w	r2, r3, #32
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4928      	ldr	r1, [pc, #160]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007442:	4b27      	ldr	r3, [pc, #156]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a26      	ldr	r2, [pc, #152]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800744e:	4b24      	ldr	r3, [pc, #144]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007452:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <RCCEx_PLL2_Config+0x160>)
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	69d2      	ldr	r2, [r2, #28]
 800745a:	00d2      	lsls	r2, r2, #3
 800745c:	4920      	ldr	r1, [pc, #128]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007462:	4b1f      	ldr	r3, [pc, #124]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	4a1e      	ldr	r2, [pc, #120]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007468:	f043 0310 	orr.w	r3, r3, #16
 800746c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007474:	4b1a      	ldr	r3, [pc, #104]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a19      	ldr	r2, [pc, #100]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800747a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007480:	e00f      	b.n	80074a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007488:	4b15      	ldr	r3, [pc, #84]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	4a14      	ldr	r2, [pc, #80]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800748e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007494:	e005      	b.n	80074a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007496:	4b12      	ldr	r3, [pc, #72]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	4a11      	ldr	r2, [pc, #68]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074a2:	4b0f      	ldr	r3, [pc, #60]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0e      	ldr	r2, [pc, #56]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fa f9c3 	bl	8001838 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074b6:	f7fa f9bf 	bl	8001838 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e006      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	ffff0007 	.word	0xffff0007

080074e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074f6:	4b53      	ldr	r3, [pc, #332]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d101      	bne.n	8007506 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e099      	b.n	800763a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007506:	4b4f      	ldr	r3, [pc, #316]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4e      	ldr	r2, [pc, #312]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800750c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007512:	f7fa f991 	bl	8001838 <HAL_GetTick>
 8007516:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007518:	e008      	b.n	800752c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800751a:	f7fa f98d 	bl	8001838 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e086      	b.n	800763a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800752c:	4b45      	ldr	r3, [pc, #276]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007538:	4b42      	ldr	r3, [pc, #264]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	493f      	ldr	r1, [pc, #252]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	628b      	str	r3, [r1, #40]	@ 0x28
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	025b      	lsls	r3, r3, #9
 800755e:	b29b      	uxth	r3, r3
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	3b01      	subs	r3, #1
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800757c:	4931      	ldr	r1, [pc, #196]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007582:	4b30      	ldr	r3, [pc, #192]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	492d      	ldr	r1, [pc, #180]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007594:	4b2b      	ldr	r3, [pc, #172]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	4928      	ldr	r1, [pc, #160]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075a6:	4b27      	ldr	r3, [pc, #156]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075b2:	4b24      	ldr	r3, [pc, #144]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075b6:	4b24      	ldr	r3, [pc, #144]	@ (8007648 <RCCEx_PLL3_Config+0x160>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	69d2      	ldr	r2, [r2, #28]
 80075be:	00d2      	lsls	r2, r2, #3
 80075c0:	4920      	ldr	r1, [pc, #128]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	4a19      	ldr	r2, [pc, #100]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075e4:	e00f      	b.n	8007606 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075ec:	4b15      	ldr	r3, [pc, #84]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	4a14      	ldr	r2, [pc, #80]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075f8:	e005      	b.n	8007606 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075fa:	4b12      	ldr	r3, [pc, #72]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	4a11      	ldr	r2, [pc, #68]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007604:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a0e      	ldr	r2, [pc, #56]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fa f911 	bl	8001838 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800761a:	f7fa f90d 	bl	8001838 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e006      	b.n	800763a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800762c:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <RCCEx_PLL3_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
 8007648:	ffff0007 	.word	0xffff0007

0800764c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d071      	beq.n	8007742 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 fd58 	bl	8001128 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b10      	cmp	r3, #16
 800768c:	d050      	beq.n	8007730 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	22ca      	movs	r2, #202	@ 0xca
 8007694:	625a      	str	r2, [r3, #36]	@ 0x24
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2253      	movs	r2, #83	@ 0x53
 800769c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb88 	bl	8007db4 <RTC_EnterInitMode>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d124      	bne.n	80076f8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6899      	ldr	r1, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b24      	ldr	r3, [pc, #144]	@ (800774c <HAL_RTC_Init+0x100>)
 80076ba:	400b      	ands	r3, r1
 80076bc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6899      	ldr	r1, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	0419      	lsls	r1, r3, #16
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fb94 	bl	8007e1c <RTC_ExitInitMode>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d113      	bne.n	8007726 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0203 	bic.w	r2, r2, #3
 800770c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	22ff      	movs	r2, #255	@ 0xff
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24
 800772e:	e001      	b.n	8007734 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	ff8fffbf 	.word	0xff8fffbf

08007750 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_RTC_SetTime+0x1a>
 8007766:	2302      	movs	r3, #2
 8007768:	e089      	b.n	800787e <HAL_RTC_SetTime+0x12e>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	22ca      	movs	r2, #202	@ 0xca
 8007780:	625a      	str	r2, [r3, #36]	@ 0x24
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2253      	movs	r2, #83	@ 0x53
 8007788:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 fb12 	bl	8007db4 <RTC_EnterInitMode>
 8007790:	4603      	mov	r3, r0
 8007792:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007794:	7cfb      	ldrb	r3, [r7, #19]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d161      	bne.n	800785e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d126      	bne.n	80077ee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2200      	movs	r2, #0
 80077b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fb6d 	bl	8007e98 <RTC_ByteToBcd2>
 80077be:	4603      	mov	r3, r0
 80077c0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fb66 	bl	8007e98 <RTC_ByteToBcd2>
 80077cc:	4603      	mov	r3, r0
 80077ce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077d0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	789b      	ldrb	r3, [r3, #2]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb5e 	bl	8007e98 <RTC_ByteToBcd2>
 80077dc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077de:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	78db      	ldrb	r3, [r3, #3]
 80077e6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e018      	b.n	8007820 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800780e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007814:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	78db      	ldrb	r3, [r3, #3]
 800781a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	6979      	ldr	r1, [r7, #20]
 8007826:	4b18      	ldr	r3, [pc, #96]	@ (8007888 <HAL_RTC_SetTime+0x138>)
 8007828:	400b      	ands	r3, r1
 800782a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800783a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6899      	ldr	r1, [r3, #8]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	431a      	orrs	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fae1 	bl	8007e1c <RTC_ExitInitMode>
 800785a:	4603      	mov	r3, r0
 800785c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	22ff      	movs	r2, #255	@ 0xff
 8007864:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007866:	7cfb      	ldrb	r3, [r7, #19]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800787c:	7cfb      	ldrb	r3, [r7, #19]
}
 800787e:	4618      	mov	r0, r3
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd90      	pop	{r4, r7, pc}
 8007886:	bf00      	nop
 8007888:	007f7f7f 	.word	0x007f7f7f

0800788c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b22      	ldr	r3, [pc, #136]	@ (8007940 <HAL_RTC_GetTime+0xb4>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	0d9b      	lsrs	r3, r3, #22
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11a      	bne.n	8007936 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fae7 	bl	8007ed8 <RTC_Bcd2ToByte>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fade 	bl	8007ed8 <RTC_Bcd2ToByte>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	789b      	ldrb	r3, [r3, #2]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fad5 	bl	8007ed8 <RTC_Bcd2ToByte>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	007f7f7f 	.word	0x007f7f7f

08007944 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_RTC_SetDate+0x1a>
 800795a:	2302      	movs	r3, #2
 800795c:	e073      	b.n	8007a46 <HAL_RTC_SetDate+0x102>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2202      	movs	r2, #2
 800796a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10e      	bne.n	8007992 <HAL_RTC_SetDate+0x4e>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	f023 0310 	bic.w	r3, r3, #16
 8007988:	b2db      	uxtb	r3, r3
 800798a:	330a      	adds	r3, #10
 800798c:	b2da      	uxtb	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11c      	bne.n	80079d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	78db      	ldrb	r3, [r3, #3]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fa7b 	bl	8007e98 <RTC_ByteToBcd2>
 80079a2:	4603      	mov	r3, r0
 80079a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fa74 	bl	8007e98 <RTC_ByteToBcd2>
 80079b0:	4603      	mov	r3, r0
 80079b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	789b      	ldrb	r3, [r3, #2]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fa6c 	bl	8007e98 <RTC_ByteToBcd2>
 80079c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e00e      	b.n	80079f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	78db      	ldrb	r3, [r3, #3]
 80079d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80079e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	22ca      	movs	r2, #202	@ 0xca
 80079f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2253      	movs	r2, #83	@ 0x53
 80079fe:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 f9d7 	bl	8007db4 <RTC_EnterInitMode>
 8007a06:	4603      	mov	r3, r0
 8007a08:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a0a:	7cfb      	ldrb	r3, [r7, #19]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	4b0e      	ldr	r3, [pc, #56]	@ (8007a50 <HAL_RTC_SetDate+0x10c>)
 8007a18:	400b      	ands	r3, r1
 8007a1a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f9fd 	bl	8007e1c <RTC_ExitInitMode>
 8007a22:	4603      	mov	r3, r0
 8007a24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	22ff      	movs	r2, #255	@ 0xff
 8007a2c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007a2e:	7cfb      	ldrb	r3, [r7, #19]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a44:	7cfb      	ldrb	r3, [r7, #19]


}
 8007a46:	4618      	mov	r0, r3
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd90      	pop	{r4, r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	00ffff3f 	.word	0x00ffff3f

08007a54 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4b21      	ldr	r3, [pc, #132]	@ (8007aec <HAL_RTC_GetDate+0x98>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	0a1b      	lsrs	r3, r3, #8
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	0b5b      	lsrs	r3, r3, #13
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11a      	bne.n	8007ae0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	78db      	ldrb	r3, [r3, #3]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fa12 	bl	8007ed8 <RTC_Bcd2ToByte>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 fa09 	bl	8007ed8 <RTC_Bcd2ToByte>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	461a      	mov	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	789b      	ldrb	r3, [r3, #2]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fa00 	bl	8007ed8 <RTC_Bcd2ToByte>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	00ffff3f 	.word	0x00ffff3f

08007af0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007af0:	b590      	push	{r4, r7, lr}
 8007af2:	b089      	sub	sp, #36	@ 0x24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_RTC_SetAlarm_IT+0x1a>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e129      	b.n	8007d5e <HAL_RTC_SetAlarm_IT+0x26e>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if(Format == RTC_FORMAT_BIN)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d137      	bne.n	8007b90 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2200      	movs	r2, #0
 8007b32:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f9ad 	bl	8007e98 <RTC_ByteToBcd2>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f9a6 	bl	8007e98 <RTC_ByteToBcd2>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b50:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	789b      	ldrb	r3, [r3, #2]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f99e 	bl	8007e98 <RTC_ByteToBcd2>
 8007b5c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007b5e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	78db      	ldrb	r3, [r3, #3]
 8007b66:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8007b68:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f990 	bl	8007e98 <RTC_ByteToBcd2>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8007b7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007b84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	e023      	b.n	8007bd8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007bb0:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007bb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	78db      	ldrb	r3, [r3, #3]
 8007bbc:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007bbe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007bc8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007bce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	22ca      	movs	r2, #202	@ 0xca
 8007bea:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2253      	movs	r2, #83	@ 0x53
 8007bf2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bfc:	d14a      	bne.n	8007c94 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c0c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007c1e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c20:	f7f9 fe0a 	bl	8001838 <HAL_GetTick>
 8007c24:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c26:	e015      	b.n	8007c54 <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c28:	f7f9 fe06 	bl	8001838 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c36:	d90d      	bls.n	8007c54 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	22ff      	movs	r2, #255	@ 0xff
 8007c3e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2203      	movs	r2, #3
 8007c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e084      	b.n	8007d5e <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0e2      	beq.n	8007c28 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c80:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c90:	609a      	str	r2, [r3, #8]
 8007c92:	e049      	b.n	8007d28 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007ca2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007cb4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007cb6:	f7f9 fdbf 	bl	8001838 <HAL_GetTick>
 8007cba:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007cbc:	e015      	b.n	8007cea <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cbe:	f7f9 fdbb 	bl	8001838 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ccc:	d90d      	bls.n	8007cea <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	22ff      	movs	r2, #255	@ 0xff
 8007cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2203      	movs	r2, #3
 8007cda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e039      	b.n	8007d5e <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0e2      	beq.n	8007cbe <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d16:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d26:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007d28:	4b0f      	ldr	r3, [pc, #60]	@ (8007d68 <HAL_RTC_SetAlarm_IT+0x278>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d68 <HAL_RTC_SetAlarm_IT+0x278>)
 8007d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d32:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d42:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	22ff      	movs	r2, #255	@ 0xff
 8007d4a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3724      	adds	r7, #36	@ 0x24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd90      	pop	{r4, r7, pc}
 8007d66:	bf00      	nop
 8007d68:	58000080 	.word	0x58000080

08007d6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a0d      	ldr	r2, [pc, #52]	@ (8007db0 <HAL_RTC_WaitForSynchro+0x44>)
 8007d7a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007d7c:	f7f9 fd5c 	bl	8001838 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d82:	e009      	b.n	8007d98 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d84:	f7f9 fd58 	bl	8001838 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d92:	d901      	bls.n	8007d98 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e007      	b.n	8007da8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0ee      	beq.n	8007d84 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	0003ff5f 	.word	0x0003ff5f

08007db4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d120      	bne.n	8007e10 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007dd8:	f7f9 fd2e 	bl	8001838 <HAL_GetTick>
 8007ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007dde:	e00d      	b.n	8007dfc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007de0:	f7f9 fd2a 	bl	8001838 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dee:	d905      	bls.n	8007dfc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2203      	movs	r2, #3
 8007df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <RTC_EnterInitMode+0x5c>
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d1e7      	bne.n	8007de0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007e28:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e32:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007e34:	4b17      	ldr	r3, [pc, #92]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10c      	bne.n	8007e5a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff ff93 	bl	8007d6c <HAL_RTC_WaitForSynchro>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01e      	beq.n	8007e8a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2203      	movs	r2, #3
 8007e50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	73fb      	strb	r3, [r7, #15]
 8007e58:	e017      	b.n	8007e8a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e60:	f023 0320 	bic.w	r3, r3, #32
 8007e64:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ff80 	bl	8007d6c <HAL_RTC_WaitForSynchro>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2203      	movs	r2, #3
 8007e76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e7e:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	4a04      	ldr	r2, [pc, #16]	@ (8007e94 <RTC_ExitInitMode+0x78>)
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	58004000 	.word	0x58004000

08007e98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007eaa:	e005      	b.n	8007eb8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	3b0a      	subs	r3, #10
 8007eb6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	d8f6      	bhi.n	8007eac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b2db      	uxtb	r3, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	0092      	lsls	r2, r2, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4413      	add	r3, r2
 8007efe:	b2db      	uxtb	r3, r3
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e07b      	b.n	800801e <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	22ca      	movs	r2, #202	@ 0xca
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2253      	movs	r2, #83	@ 0x53
 8007f44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8007f46:	4b38      	ldr	r3, [pc, #224]	@ (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	4a37      	ldr	r2, [pc, #220]	@ (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007f4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f50:	6093      	str	r3, [r2, #8]
  {
    tickstart = HAL_GetTick();

    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  if (READ_BIT(RTC->ISR, RTC_ISR_INITF) == 0U)
 8007f52:	4b35      	ldr	r3, [pc, #212]	@ (8008028 <HAL_RTCEx_SetWakeUpTimer_IT+0x11c>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d120      	bne.n	8007fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8007f5e:	f7f9 fc6b 	bl	8001838 <HAL_GetTick>
 8007f62:	6178      	str	r0, [r7, #20]

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f64:	e015      	b.n	8007f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
#endif /* TAMP */
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f66:	f7f9 fc67 	bl	8001838 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f74:	d90d      	bls.n	8007f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	22ff      	movs	r2, #255	@ 0xff
 8007f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2203      	movs	r2, #3
 8007f82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e045      	b.n	800801e <HAL_RTCEx_SetWakeUpTimer_IT+0x112>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0e2      	beq.n	8007f66 <HAL_RTCEx_SetWakeUpTimer_IT+0x5a>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	613b      	str	r3, [r7, #16]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	613b      	str	r3, [r7, #16]
    CR_tmp |= (uint32_t)WakeUpClock;
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
    hrtc->Instance->CR = CR_tmp;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_ENABLE_IT();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007fc8:	4b18      	ldr	r3, [pc, #96]	@ (800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a17      	ldr	r2, [pc, #92]	@ (800802c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>)
 8007fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fe2:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ff2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008002:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	22ff      	movs	r2, #255	@ 0xff
 800800a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58004000 	.word	0x58004000
 800802c:	58000080 	.word	0x58000080

08008030 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8008042:	2302      	movs	r3, #2
 8008044:	e04d      	b.n	80080e2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	22ca      	movs	r2, #202	@ 0xca
 800805c:	625a      	str	r2, [r3, #36]	@ 0x24
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2253      	movs	r2, #83	@ 0x53
 8008064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008074:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008084:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8008086:	f7f9 fbd7 	bl	8001838 <HAL_GetTick>
 800808a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
#if defined(TAMP)
  while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_WUTWF) == 0U)
#else
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800808c:	e015      	b.n	80080ba <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
#endif /* TAMP */
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800808e:	f7f9 fbd3 	bl	8001838 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800809c:	d90d      	bls.n	80080ba <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	22ff      	movs	r2, #255	@ 0xff
 80080a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2203      	movs	r2, #3
 80080aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e013      	b.n	80080e2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0e2      	beq.n	800808e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	22ff      	movs	r2, #255	@ 0xff
 80080ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_WAKEUPTIMER_EXTID2_CLEAR_FLAG();
  }
#else /* SINGLE_CORE */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80080f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008134 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80080f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80080fa:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800811a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
  #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
  #else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 fbe5 	bl	800a8ec <HAL_RTCEx_WakeUpTimerEventCallback>
  #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	58000080 	.word	0x58000080

08008138 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3350      	adds	r3, #80	@ 0x50
 800814a:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	601a      	str	r2, [r3, #0]
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3350      	adds	r3, #80	@ 0x50
 8008178:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e042      	b.n	800822c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7f9 f9e9 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	@ 0x24
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 fbdc 	bl	800999c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fd6d 	bl	8008cc4 <UART_SetConfig>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e01b      	b.n	800822c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fc5b 	bl	8009ae0 <UART_CheckIdleState>
 800822a:	4603      	mov	r3, r0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	@ 0x28
 8008238:	af02      	add	r7, sp, #8
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800824a:	2b20      	cmp	r3, #32
 800824c:	d17b      	bne.n	8008346 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_UART_Transmit+0x26>
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e074      	b.n	8008348 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2221      	movs	r2, #33	@ 0x21
 800826a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800826e:	f7f9 fae3 	bl	8001838 <HAL_GetTick>
 8008272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	88fa      	ldrh	r2, [r7, #6]
 8008278:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800828c:	d108      	bne.n	80082a0 <HAL_UART_Transmit+0x6c>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	e003      	b.n	80082a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082a8:	e030      	b.n	800830c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2200      	movs	r2, #0
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f001 fcbd 	bl	8009c34 <UART_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e03d      	b.n	8008348 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	3302      	adds	r3, #2
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	e007      	b.n	80082fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	3301      	adds	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1c8      	bne.n	80082aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2200      	movs	r2, #0
 8008320:	2140      	movs	r1, #64	@ 0x40
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f001 fc86 	bl	8009c34 <UART_WaitOnFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e006      	b.n	8008348 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	e000      	b.n	8008348 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008346:	2302      	movs	r3, #2
  }
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008350:	b480      	push	{r7}
 8008352:	b091      	sub	sp, #68	@ 0x44
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008364:	2b20      	cmp	r3, #32
 8008366:	d178      	bne.n	800845a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_UART_Transmit_IT+0x24>
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e071      	b.n	800845c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2221      	movs	r2, #33	@ 0x21
 80083a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ac:	d12a      	bne.n	8008404 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b6:	d107      	bne.n	80083c8 <HAL_UART_Transmit_IT+0x78>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a29      	ldr	r2, [pc, #164]	@ (8008468 <HAL_UART_Transmit_IT+0x118>)
 80083c4:	679a      	str	r2, [r3, #120]	@ 0x78
 80083c6:	e002      	b.n	80083ce <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a28      	ldr	r2, [pc, #160]	@ (800846c <HAL_UART_Transmit_IT+0x11c>)
 80083cc:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80083f0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e5      	bne.n	80083ce <HAL_UART_Transmit_IT+0x7e>
 8008402:	e028      	b.n	8008456 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840c:	d107      	bne.n	800841e <HAL_UART_Transmit_IT+0xce>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4a15      	ldr	r2, [pc, #84]	@ (8008470 <HAL_UART_Transmit_IT+0x120>)
 800841a:	679a      	str	r2, [r3, #120]	@ 0x78
 800841c:	e002      	b.n	8008424 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4a14      	ldr	r2, [pc, #80]	@ (8008474 <HAL_UART_Transmit_IT+0x124>)
 8008422:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	613b      	str	r3, [r7, #16]
   return(result);
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008442:	623b      	str	r3, [r7, #32]
 8008444:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	69f9      	ldr	r1, [r7, #28]
 8008448:	6a3a      	ldr	r2, [r7, #32]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800845a:	2302      	movs	r3, #2
  }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3744      	adds	r7, #68	@ 0x44
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	0800a419 	.word	0x0800a419
 800846c:	0800a339 	.word	0x0800a339
 8008470:	0800a277 	.word	0x0800a277
 8008474:	0800a1bf 	.word	0x0800a1bf

08008478 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	@ 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800848c:	2b20      	cmp	r3, #32
 800848e:	d137      	bne.n	8008500 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_UART_Receive_DMA+0x24>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e030      	b.n	8008502 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a18      	ldr	r2, [pc, #96]	@ (800850c <HAL_UART_Receive_DMA+0x94>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01f      	beq.n	80084f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	623b      	str	r3, [r7, #32]
 80084de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 fc0a 	bl	8009d10 <UART_Start_Receive_DMA>
 80084fc:	4603      	mov	r3, r0
 80084fe:	e000      	b.n	8008502 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3728      	adds	r7, #40	@ 0x28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	58000c00 	.word	0x58000c00

08008510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b0ba      	sub	sp, #232	@ 0xe8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800853a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800853e:	4013      	ands	r3, r2
 8008540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11b      	bne.n	8008584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d015      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d105      	bne.n	8008570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8377 	beq.w	8008c68 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
      }
      return;
 8008582:	e371      	b.n	8008c68 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8123 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008592:	4b8d      	ldr	r3, [pc, #564]	@ (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008594:	4013      	ands	r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800859a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800859e:	4b8b      	ldr	r3, [pc, #556]	@ (80087cc <HAL_UART_IRQHandler+0x2bc>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8116 	beq.w	80087d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d011      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00b      	beq.n	80085d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ce:	f043 0201 	orr.w	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d011      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
 80085e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2202      	movs	r2, #2
 80085f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fe:	f043 0204 	orr.w	r2, r3, #4
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2204      	movs	r2, #4
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862e:	f043 0202 	orr.w	r2, r3, #2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d017      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008654:	4b5c      	ldr	r3, [pc, #368]	@ (80087c8 <HAL_UART_IRQHandler+0x2b8>)
 8008656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2208      	movs	r2, #8
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866a:	f043 0208 	orr.w	r2, r3, #8
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800867c:	2b00      	cmp	r3, #0
 800867e:	d012      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00c      	beq.n	80086a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800869c:	f043 0220 	orr.w	r2, r3, #32
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 82dd 	beq.w	8008c6c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fa:	2b40      	cmp	r3, #64	@ 0x40
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008702:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008706:	2b00      	cmp	r3, #0
 8008708:	d054      	beq.n	80087b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fbe8 	bl	8009ee0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	d146      	bne.n	80087ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3308      	adds	r3, #8
 8008746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800874a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800874e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1d9      	bne.n	800871e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	d017      	beq.n	80087a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_UART_IRQHandler+0x2c0>)
 800877c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008784:	4618      	mov	r0, r3
 8008786:	f7fa fa53 	bl	8002c30 <HAL_DMA_Abort_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d019      	beq.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800879e:	4610      	mov	r0, r2
 80087a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a2:	e00f      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fa77 	bl	8008c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	e00b      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fa73 	bl	8008c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	e007      	b.n	80087c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa6f 	bl	8008c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80087c2:	e253      	b.n	8008c6c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	bf00      	nop
    return;
 80087c6:	e251      	b.n	8008c6c <HAL_UART_IRQHandler+0x75c>
 80087c8:	10000001 	.word	0x10000001
 80087cc:	04000120 	.word	0x04000120
 80087d0:	0800a193 	.word	0x0800a193

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	f040 81e7 	bne.w	8008bac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 81e0 	beq.w	8008bac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 81d9 	beq.w	8008bac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2210      	movs	r2, #16
 8008800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	f040 8151 	bne.w	8008ab4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a96      	ldr	r2, [pc, #600]	@ (8008a74 <HAL_UART_IRQHandler+0x564>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d068      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a93      	ldr	r2, [pc, #588]	@ (8008a78 <HAL_UART_IRQHandler+0x568>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d061      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a91      	ldr	r2, [pc, #580]	@ (8008a7c <HAL_UART_IRQHandler+0x56c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d05a      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a8e      	ldr	r2, [pc, #568]	@ (8008a80 <HAL_UART_IRQHandler+0x570>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d053      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a8c      	ldr	r2, [pc, #560]	@ (8008a84 <HAL_UART_IRQHandler+0x574>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d04c      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a89      	ldr	r2, [pc, #548]	@ (8008a88 <HAL_UART_IRQHandler+0x578>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d045      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a87      	ldr	r2, [pc, #540]	@ (8008a8c <HAL_UART_IRQHandler+0x57c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d03e      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a84      	ldr	r2, [pc, #528]	@ (8008a90 <HAL_UART_IRQHandler+0x580>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d037      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a82      	ldr	r2, [pc, #520]	@ (8008a94 <HAL_UART_IRQHandler+0x584>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d030      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a7f      	ldr	r2, [pc, #508]	@ (8008a98 <HAL_UART_IRQHandler+0x588>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d029      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a7d      	ldr	r2, [pc, #500]	@ (8008a9c <HAL_UART_IRQHandler+0x58c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d022      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a7a      	ldr	r2, [pc, #488]	@ (8008aa0 <HAL_UART_IRQHandler+0x590>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d01b      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a78      	ldr	r2, [pc, #480]	@ (8008aa4 <HAL_UART_IRQHandler+0x594>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d014      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a75      	ldr	r2, [pc, #468]	@ (8008aa8 <HAL_UART_IRQHandler+0x598>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00d      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a73      	ldr	r2, [pc, #460]	@ (8008aac <HAL_UART_IRQHandler+0x59c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d006      	beq.n	80088f2 <HAL_UART_IRQHandler+0x3e2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a70      	ldr	r2, [pc, #448]	@ (8008ab0 <HAL_UART_IRQHandler+0x5a0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d106      	bne.n	8008900 <HAL_UART_IRQHandler+0x3f0>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	e005      	b.n	800890c <HAL_UART_IRQHandler+0x3fc>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 81ab 	beq.w	8008c70 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008924:	429a      	cmp	r2, r3
 8008926:	f080 81a3 	bcs.w	8008c70 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008940:	f000 8087 	beq.w	8008a52 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800895c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800896e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008972:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800897a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1da      	bne.n	8008944 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3308      	adds	r3, #8
 8008994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800899e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e1      	bne.n	800898e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3308      	adds	r3, #8
 80089d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e3      	bne.n	80089ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a20:	f023 0310 	bic.w	r3, r3, #16
 8008a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e4      	bne.n	8008a10 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7f9 fdd1 	bl	80025f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f91d 	bl	8008cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a72:	e0fd      	b.n	8008c70 <HAL_UART_IRQHandler+0x760>
 8008a74:	40020010 	.word	0x40020010
 8008a78:	40020028 	.word	0x40020028
 8008a7c:	40020040 	.word	0x40020040
 8008a80:	40020058 	.word	0x40020058
 8008a84:	40020070 	.word	0x40020070
 8008a88:	40020088 	.word	0x40020088
 8008a8c:	400200a0 	.word	0x400200a0
 8008a90:	400200b8 	.word	0x400200b8
 8008a94:	40020410 	.word	0x40020410
 8008a98:	40020428 	.word	0x40020428
 8008a9c:	40020440 	.word	0x40020440
 8008aa0:	40020458 	.word	0x40020458
 8008aa4:	40020470 	.word	0x40020470
 8008aa8:	40020488 	.word	0x40020488
 8008aac:	400204a0 	.word	0x400204a0
 8008ab0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80cf 	beq.w	8008c74 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80ca 	beq.w	8008c74 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e4      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	623b      	str	r3, [r7, #32]
   return(result);
 8008b26:	6a3a      	ldr	r2, [r7, #32]
 8008b28:	4b55      	ldr	r3, [pc, #340]	@ (8008c80 <HAL_UART_IRQHandler+0x770>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3308      	adds	r3, #8
 8008b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e3      	bne.n	8008b16 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	e853 3f00 	ldrex	r3, [r3]
 8008b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0310 	bic.w	r3, r3, #16
 8008b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	69b9      	ldr	r1, [r7, #24]
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	617b      	str	r3, [r7, #20]
   return(result);
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e4      	bne.n	8008b62 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f881 	bl	8008cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008baa:	e063      	b.n	8008c74 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00e      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x6c6>
 8008bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fcc2 	bl	800a558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bd4:	e051      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d014      	beq.n	8008c0c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03a      	beq.n	8008c78 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
    }
    return;
 8008c0a:	e035      	b.n	8008c78 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d009      	beq.n	8008c2c <HAL_UART_IRQHandler+0x71c>
 8008c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 fc6c 	bl	800a502 <UART_EndTransmit_IT>
    return;
 8008c2a:	e026      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <HAL_UART_IRQHandler+0x73c>
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 fc9b 	bl	800a580 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c4a:	e016      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d010      	beq.n	8008c7a <HAL_UART_IRQHandler+0x76a>
 8008c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da0c      	bge.n	8008c7a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fc83 	bl	800a56c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c66:	e008      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c68:	bf00      	nop
 8008c6a:	e006      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
    return;
 8008c6c:	bf00      	nop
 8008c6e:	e004      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c70:	bf00      	nop
 8008c72:	e002      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
      return;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <HAL_UART_IRQHandler+0x76a>
    return;
 8008c78:	bf00      	nop
  }
}
 8008c7a:	37e8      	adds	r7, #232	@ 0xe8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	effffffe 	.word	0xeffffffe

08008c84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cc8:	b092      	sub	sp, #72	@ 0x48
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4bbe      	ldr	r3, [pc, #760]	@ (8008fec <UART_SetConfig+0x328>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cfc:	430b      	orrs	r3, r1
 8008cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4ab3      	ldr	r2, [pc, #716]	@ (8008ff0 <UART_SetConfig+0x32c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d004      	beq.n	8008d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	4baf      	ldr	r3, [pc, #700]	@ (8008ff4 <UART_SetConfig+0x330>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d40:	430b      	orrs	r3, r1
 8008d42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	f023 010f 	bic.w	r1, r3, #15
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8008ff8 <UART_SetConfig+0x334>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d177      	bne.n	8008e54 <UART_SetConfig+0x190>
 8008d64:	4ba5      	ldr	r3, [pc, #660]	@ (8008ffc <UART_SetConfig+0x338>)
 8008d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d6c:	2b28      	cmp	r3, #40	@ 0x28
 8008d6e:	d86d      	bhi.n	8008e4c <UART_SetConfig+0x188>
 8008d70:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <UART_SetConfig+0xb4>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008e1d 	.word	0x08008e1d
 8008d7c:	08008e4d 	.word	0x08008e4d
 8008d80:	08008e4d 	.word	0x08008e4d
 8008d84:	08008e4d 	.word	0x08008e4d
 8008d88:	08008e4d 	.word	0x08008e4d
 8008d8c:	08008e4d 	.word	0x08008e4d
 8008d90:	08008e4d 	.word	0x08008e4d
 8008d94:	08008e4d 	.word	0x08008e4d
 8008d98:	08008e25 	.word	0x08008e25
 8008d9c:	08008e4d 	.word	0x08008e4d
 8008da0:	08008e4d 	.word	0x08008e4d
 8008da4:	08008e4d 	.word	0x08008e4d
 8008da8:	08008e4d 	.word	0x08008e4d
 8008dac:	08008e4d 	.word	0x08008e4d
 8008db0:	08008e4d 	.word	0x08008e4d
 8008db4:	08008e4d 	.word	0x08008e4d
 8008db8:	08008e2d 	.word	0x08008e2d
 8008dbc:	08008e4d 	.word	0x08008e4d
 8008dc0:	08008e4d 	.word	0x08008e4d
 8008dc4:	08008e4d 	.word	0x08008e4d
 8008dc8:	08008e4d 	.word	0x08008e4d
 8008dcc:	08008e4d 	.word	0x08008e4d
 8008dd0:	08008e4d 	.word	0x08008e4d
 8008dd4:	08008e4d 	.word	0x08008e4d
 8008dd8:	08008e35 	.word	0x08008e35
 8008ddc:	08008e4d 	.word	0x08008e4d
 8008de0:	08008e4d 	.word	0x08008e4d
 8008de4:	08008e4d 	.word	0x08008e4d
 8008de8:	08008e4d 	.word	0x08008e4d
 8008dec:	08008e4d 	.word	0x08008e4d
 8008df0:	08008e4d 	.word	0x08008e4d
 8008df4:	08008e4d 	.word	0x08008e4d
 8008df8:	08008e3d 	.word	0x08008e3d
 8008dfc:	08008e4d 	.word	0x08008e4d
 8008e00:	08008e4d 	.word	0x08008e4d
 8008e04:	08008e4d 	.word	0x08008e4d
 8008e08:	08008e4d 	.word	0x08008e4d
 8008e0c:	08008e4d 	.word	0x08008e4d
 8008e10:	08008e4d 	.word	0x08008e4d
 8008e14:	08008e4d 	.word	0x08008e4d
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e326      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e24:	2304      	movs	r3, #4
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e322      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e31e      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e34:	2310      	movs	r3, #16
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e31a      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e316      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e44:	2340      	movs	r3, #64	@ 0x40
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e312      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e30e      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a69      	ldr	r2, [pc, #420]	@ (8009000 <UART_SetConfig+0x33c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d130      	bne.n	8008ec0 <UART_SetConfig+0x1fc>
 8008e5e:	4b67      	ldr	r3, [pc, #412]	@ (8008ffc <UART_SetConfig+0x338>)
 8008e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d826      	bhi.n	8008eb8 <UART_SetConfig+0x1f4>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <UART_SetConfig+0x1ac>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e89 	.word	0x08008e89
 8008e74:	08008e91 	.word	0x08008e91
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ea9 	.word	0x08008ea9
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e2f0      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e90:	2304      	movs	r3, #4
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e2ec      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e2e8      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e2e4      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008ea8:	2320      	movs	r3, #32
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e2e0      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008eb0:	2340      	movs	r3, #64	@ 0x40
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e2dc      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e2d8      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8009004 <UART_SetConfig+0x340>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d130      	bne.n	8008f2c <UART_SetConfig+0x268>
 8008eca:	4b4c      	ldr	r3, [pc, #304]	@ (8008ffc <UART_SetConfig+0x338>)
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ece:	f003 0307 	and.w	r3, r3, #7
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d826      	bhi.n	8008f24 <UART_SetConfig+0x260>
 8008ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <UART_SetConfig+0x218>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008ef5 	.word	0x08008ef5
 8008ee0:	08008efd 	.word	0x08008efd
 8008ee4:	08008f05 	.word	0x08008f05
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e2ba      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e2b6      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e2b2      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e2ae      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f14:	2320      	movs	r3, #32
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e2aa      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e2a6      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f24:	2380      	movs	r3, #128	@ 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e2a2      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a35      	ldr	r2, [pc, #212]	@ (8009008 <UART_SetConfig+0x344>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d130      	bne.n	8008f98 <UART_SetConfig+0x2d4>
 8008f36:	4b31      	ldr	r3, [pc, #196]	@ (8008ffc <UART_SetConfig+0x338>)
 8008f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d826      	bhi.n	8008f90 <UART_SetConfig+0x2cc>
 8008f42:	a201      	add	r2, pc, #4	@ (adr r2, 8008f48 <UART_SetConfig+0x284>)
 8008f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f69 	.word	0x08008f69
 8008f50:	08008f71 	.word	0x08008f71
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f81 	.word	0x08008f81
 8008f5c:	08008f89 	.word	0x08008f89
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e284      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e280      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f70:	2308      	movs	r3, #8
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e27c      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e278      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f80:	2320      	movs	r3, #32
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e274      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f88:	2340      	movs	r3, #64	@ 0x40
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e270      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f90:	2380      	movs	r3, #128	@ 0x80
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e26c      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800900c <UART_SetConfig+0x348>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d142      	bne.n	8009028 <UART_SetConfig+0x364>
 8008fa2:	4b16      	ldr	r3, [pc, #88]	@ (8008ffc <UART_SetConfig+0x338>)
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d838      	bhi.n	8009020 <UART_SetConfig+0x35c>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <UART_SetConfig+0x2f0>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fdd 	.word	0x08008fdd
 8008fc0:	08008fe5 	.word	0x08008fe5
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009019 	.word	0x08009019
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e24e      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e24a      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e246      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e242      	b.n	8009472 <UART_SetConfig+0x7ae>
 8008fec:	cfff69f3 	.word	0xcfff69f3
 8008ff0:	58000c00 	.word	0x58000c00
 8008ff4:	11fff4ff 	.word	0x11fff4ff
 8008ff8:	40011000 	.word	0x40011000
 8008ffc:	58024400 	.word	0x58024400
 8009000:	40004400 	.word	0x40004400
 8009004:	40004800 	.word	0x40004800
 8009008:	40004c00 	.word	0x40004c00
 800900c:	40005000 	.word	0x40005000
 8009010:	2320      	movs	r3, #32
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e22c      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009018:	2340      	movs	r3, #64	@ 0x40
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e228      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009020:	2380      	movs	r3, #128	@ 0x80
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e224      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4ab1      	ldr	r2, [pc, #708]	@ (80092f4 <UART_SetConfig+0x630>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d176      	bne.n	8009120 <UART_SetConfig+0x45c>
 8009032:	4bb1      	ldr	r3, [pc, #708]	@ (80092f8 <UART_SetConfig+0x634>)
 8009034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800903a:	2b28      	cmp	r3, #40	@ 0x28
 800903c:	d86c      	bhi.n	8009118 <UART_SetConfig+0x454>
 800903e:	a201      	add	r2, pc, #4	@ (adr r2, 8009044 <UART_SetConfig+0x380>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	080090e9 	.word	0x080090e9
 8009048:	08009119 	.word	0x08009119
 800904c:	08009119 	.word	0x08009119
 8009050:	08009119 	.word	0x08009119
 8009054:	08009119 	.word	0x08009119
 8009058:	08009119 	.word	0x08009119
 800905c:	08009119 	.word	0x08009119
 8009060:	08009119 	.word	0x08009119
 8009064:	080090f1 	.word	0x080090f1
 8009068:	08009119 	.word	0x08009119
 800906c:	08009119 	.word	0x08009119
 8009070:	08009119 	.word	0x08009119
 8009074:	08009119 	.word	0x08009119
 8009078:	08009119 	.word	0x08009119
 800907c:	08009119 	.word	0x08009119
 8009080:	08009119 	.word	0x08009119
 8009084:	080090f9 	.word	0x080090f9
 8009088:	08009119 	.word	0x08009119
 800908c:	08009119 	.word	0x08009119
 8009090:	08009119 	.word	0x08009119
 8009094:	08009119 	.word	0x08009119
 8009098:	08009119 	.word	0x08009119
 800909c:	08009119 	.word	0x08009119
 80090a0:	08009119 	.word	0x08009119
 80090a4:	08009101 	.word	0x08009101
 80090a8:	08009119 	.word	0x08009119
 80090ac:	08009119 	.word	0x08009119
 80090b0:	08009119 	.word	0x08009119
 80090b4:	08009119 	.word	0x08009119
 80090b8:	08009119 	.word	0x08009119
 80090bc:	08009119 	.word	0x08009119
 80090c0:	08009119 	.word	0x08009119
 80090c4:	08009109 	.word	0x08009109
 80090c8:	08009119 	.word	0x08009119
 80090cc:	08009119 	.word	0x08009119
 80090d0:	08009119 	.word	0x08009119
 80090d4:	08009119 	.word	0x08009119
 80090d8:	08009119 	.word	0x08009119
 80090dc:	08009119 	.word	0x08009119
 80090e0:	08009119 	.word	0x08009119
 80090e4:	08009111 	.word	0x08009111
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e1c0      	b.n	8009472 <UART_SetConfig+0x7ae>
 80090f0:	2304      	movs	r3, #4
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e1bc      	b.n	8009472 <UART_SetConfig+0x7ae>
 80090f8:	2308      	movs	r3, #8
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e1b8      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009100:	2310      	movs	r3, #16
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e1b4      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009108:	2320      	movs	r3, #32
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e1b0      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009110:	2340      	movs	r3, #64	@ 0x40
 8009112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009116:	e1ac      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009118:	2380      	movs	r3, #128	@ 0x80
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e1a8      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a75      	ldr	r2, [pc, #468]	@ (80092fc <UART_SetConfig+0x638>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d130      	bne.n	800918c <UART_SetConfig+0x4c8>
 800912a:	4b73      	ldr	r3, [pc, #460]	@ (80092f8 <UART_SetConfig+0x634>)
 800912c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	2b05      	cmp	r3, #5
 8009134:	d826      	bhi.n	8009184 <UART_SetConfig+0x4c0>
 8009136:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <UART_SetConfig+0x478>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009155 	.word	0x08009155
 8009140:	0800915d 	.word	0x0800915d
 8009144:	08009165 	.word	0x08009165
 8009148:	0800916d 	.word	0x0800916d
 800914c:	08009175 	.word	0x08009175
 8009150:	0800917d 	.word	0x0800917d
 8009154:	2300      	movs	r3, #0
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e18a      	b.n	8009472 <UART_SetConfig+0x7ae>
 800915c:	2304      	movs	r3, #4
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e186      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009164:	2308      	movs	r3, #8
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e182      	b.n	8009472 <UART_SetConfig+0x7ae>
 800916c:	2310      	movs	r3, #16
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e17e      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009174:	2320      	movs	r3, #32
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e17a      	b.n	8009472 <UART_SetConfig+0x7ae>
 800917c:	2340      	movs	r3, #64	@ 0x40
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e176      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009184:	2380      	movs	r3, #128	@ 0x80
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e172      	b.n	8009472 <UART_SetConfig+0x7ae>
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a5b      	ldr	r2, [pc, #364]	@ (8009300 <UART_SetConfig+0x63c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d130      	bne.n	80091f8 <UART_SetConfig+0x534>
 8009196:	4b58      	ldr	r3, [pc, #352]	@ (80092f8 <UART_SetConfig+0x634>)
 8009198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d826      	bhi.n	80091f0 <UART_SetConfig+0x52c>
 80091a2:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <UART_SetConfig+0x4e4>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091c9 	.word	0x080091c9
 80091b0:	080091d1 	.word	0x080091d1
 80091b4:	080091d9 	.word	0x080091d9
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e154      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091c8:	2304      	movs	r3, #4
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e150      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e14c      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091d8:	2310      	movs	r3, #16
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e148      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091e0:	2320      	movs	r3, #32
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e144      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091e8:	2340      	movs	r3, #64	@ 0x40
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e140      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091f0:	2380      	movs	r3, #128	@ 0x80
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e13c      	b.n	8009472 <UART_SetConfig+0x7ae>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a41      	ldr	r2, [pc, #260]	@ (8009304 <UART_SetConfig+0x640>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	f040 8082 	bne.w	8009308 <UART_SetConfig+0x644>
 8009204:	4b3c      	ldr	r3, [pc, #240]	@ (80092f8 <UART_SetConfig+0x634>)
 8009206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800920c:	2b28      	cmp	r3, #40	@ 0x28
 800920e:	d86d      	bhi.n	80092ec <UART_SetConfig+0x628>
 8009210:	a201      	add	r2, pc, #4	@ (adr r2, 8009218 <UART_SetConfig+0x554>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	080092bd 	.word	0x080092bd
 800921c:	080092ed 	.word	0x080092ed
 8009220:	080092ed 	.word	0x080092ed
 8009224:	080092ed 	.word	0x080092ed
 8009228:	080092ed 	.word	0x080092ed
 800922c:	080092ed 	.word	0x080092ed
 8009230:	080092ed 	.word	0x080092ed
 8009234:	080092ed 	.word	0x080092ed
 8009238:	080092c5 	.word	0x080092c5
 800923c:	080092ed 	.word	0x080092ed
 8009240:	080092ed 	.word	0x080092ed
 8009244:	080092ed 	.word	0x080092ed
 8009248:	080092ed 	.word	0x080092ed
 800924c:	080092ed 	.word	0x080092ed
 8009250:	080092ed 	.word	0x080092ed
 8009254:	080092ed 	.word	0x080092ed
 8009258:	080092cd 	.word	0x080092cd
 800925c:	080092ed 	.word	0x080092ed
 8009260:	080092ed 	.word	0x080092ed
 8009264:	080092ed 	.word	0x080092ed
 8009268:	080092ed 	.word	0x080092ed
 800926c:	080092ed 	.word	0x080092ed
 8009270:	080092ed 	.word	0x080092ed
 8009274:	080092ed 	.word	0x080092ed
 8009278:	080092d5 	.word	0x080092d5
 800927c:	080092ed 	.word	0x080092ed
 8009280:	080092ed 	.word	0x080092ed
 8009284:	080092ed 	.word	0x080092ed
 8009288:	080092ed 	.word	0x080092ed
 800928c:	080092ed 	.word	0x080092ed
 8009290:	080092ed 	.word	0x080092ed
 8009294:	080092ed 	.word	0x080092ed
 8009298:	080092dd 	.word	0x080092dd
 800929c:	080092ed 	.word	0x080092ed
 80092a0:	080092ed 	.word	0x080092ed
 80092a4:	080092ed 	.word	0x080092ed
 80092a8:	080092ed 	.word	0x080092ed
 80092ac:	080092ed 	.word	0x080092ed
 80092b0:	080092ed 	.word	0x080092ed
 80092b4:	080092ed 	.word	0x080092ed
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c2:	e0d6      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092c4:	2304      	movs	r3, #4
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ca:	e0d2      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092cc:	2308      	movs	r3, #8
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d2:	e0ce      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092d4:	2310      	movs	r3, #16
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092da:	e0ca      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092dc:	2320      	movs	r3, #32
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092e2:	e0c6      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092e4:	2340      	movs	r3, #64	@ 0x40
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ea:	e0c2      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092f2:	e0be      	b.n	8009472 <UART_SetConfig+0x7ae>
 80092f4:	40011400 	.word	0x40011400
 80092f8:	58024400 	.word	0x58024400
 80092fc:	40007800 	.word	0x40007800
 8009300:	40007c00 	.word	0x40007c00
 8009304:	40011800 	.word	0x40011800
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4aad      	ldr	r2, [pc, #692]	@ (80095c4 <UART_SetConfig+0x900>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d176      	bne.n	8009400 <UART_SetConfig+0x73c>
 8009312:	4bad      	ldr	r3, [pc, #692]	@ (80095c8 <UART_SetConfig+0x904>)
 8009314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800931a:	2b28      	cmp	r3, #40	@ 0x28
 800931c:	d86c      	bhi.n	80093f8 <UART_SetConfig+0x734>
 800931e:	a201      	add	r2, pc, #4	@ (adr r2, 8009324 <UART_SetConfig+0x660>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	080093c9 	.word	0x080093c9
 8009328:	080093f9 	.word	0x080093f9
 800932c:	080093f9 	.word	0x080093f9
 8009330:	080093f9 	.word	0x080093f9
 8009334:	080093f9 	.word	0x080093f9
 8009338:	080093f9 	.word	0x080093f9
 800933c:	080093f9 	.word	0x080093f9
 8009340:	080093f9 	.word	0x080093f9
 8009344:	080093d1 	.word	0x080093d1
 8009348:	080093f9 	.word	0x080093f9
 800934c:	080093f9 	.word	0x080093f9
 8009350:	080093f9 	.word	0x080093f9
 8009354:	080093f9 	.word	0x080093f9
 8009358:	080093f9 	.word	0x080093f9
 800935c:	080093f9 	.word	0x080093f9
 8009360:	080093f9 	.word	0x080093f9
 8009364:	080093d9 	.word	0x080093d9
 8009368:	080093f9 	.word	0x080093f9
 800936c:	080093f9 	.word	0x080093f9
 8009370:	080093f9 	.word	0x080093f9
 8009374:	080093f9 	.word	0x080093f9
 8009378:	080093f9 	.word	0x080093f9
 800937c:	080093f9 	.word	0x080093f9
 8009380:	080093f9 	.word	0x080093f9
 8009384:	080093e1 	.word	0x080093e1
 8009388:	080093f9 	.word	0x080093f9
 800938c:	080093f9 	.word	0x080093f9
 8009390:	080093f9 	.word	0x080093f9
 8009394:	080093f9 	.word	0x080093f9
 8009398:	080093f9 	.word	0x080093f9
 800939c:	080093f9 	.word	0x080093f9
 80093a0:	080093f9 	.word	0x080093f9
 80093a4:	080093e9 	.word	0x080093e9
 80093a8:	080093f9 	.word	0x080093f9
 80093ac:	080093f9 	.word	0x080093f9
 80093b0:	080093f9 	.word	0x080093f9
 80093b4:	080093f9 	.word	0x080093f9
 80093b8:	080093f9 	.word	0x080093f9
 80093bc:	080093f9 	.word	0x080093f9
 80093c0:	080093f9 	.word	0x080093f9
 80093c4:	080093f1 	.word	0x080093f1
 80093c8:	2301      	movs	r3, #1
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e050      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093d0:	2304      	movs	r3, #4
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e04c      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e048      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e044      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093e8:	2320      	movs	r3, #32
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e040      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093f0:	2340      	movs	r3, #64	@ 0x40
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e03c      	b.n	8009472 <UART_SetConfig+0x7ae>
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e038      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a71      	ldr	r2, [pc, #452]	@ (80095cc <UART_SetConfig+0x908>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d130      	bne.n	800946c <UART_SetConfig+0x7a8>
 800940a:	4b6f      	ldr	r3, [pc, #444]	@ (80095c8 <UART_SetConfig+0x904>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b05      	cmp	r3, #5
 8009414:	d826      	bhi.n	8009464 <UART_SetConfig+0x7a0>
 8009416:	a201      	add	r2, pc, #4	@ (adr r2, 800941c <UART_SetConfig+0x758>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	08009435 	.word	0x08009435
 8009420:	0800943d 	.word	0x0800943d
 8009424:	08009445 	.word	0x08009445
 8009428:	0800944d 	.word	0x0800944d
 800942c:	08009455 	.word	0x08009455
 8009430:	0800945d 	.word	0x0800945d
 8009434:	2302      	movs	r3, #2
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e01a      	b.n	8009472 <UART_SetConfig+0x7ae>
 800943c:	2304      	movs	r3, #4
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e016      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009444:	2308      	movs	r3, #8
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e012      	b.n	8009472 <UART_SetConfig+0x7ae>
 800944c:	2310      	movs	r3, #16
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e00e      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009454:	2320      	movs	r3, #32
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e00a      	b.n	8009472 <UART_SetConfig+0x7ae>
 800945c:	2340      	movs	r3, #64	@ 0x40
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e006      	b.n	8009472 <UART_SetConfig+0x7ae>
 8009464:	2380      	movs	r3, #128	@ 0x80
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e002      	b.n	8009472 <UART_SetConfig+0x7ae>
 800946c:	2380      	movs	r3, #128	@ 0x80
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a55      	ldr	r2, [pc, #340]	@ (80095cc <UART_SetConfig+0x908>)
 8009478:	4293      	cmp	r3, r2
 800947a:	f040 80f8 	bne.w	800966e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800947e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009482:	2b20      	cmp	r3, #32
 8009484:	dc46      	bgt.n	8009514 <UART_SetConfig+0x850>
 8009486:	2b02      	cmp	r3, #2
 8009488:	db75      	blt.n	8009576 <UART_SetConfig+0x8b2>
 800948a:	3b02      	subs	r3, #2
 800948c:	2b1e      	cmp	r3, #30
 800948e:	d872      	bhi.n	8009576 <UART_SetConfig+0x8b2>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <UART_SetConfig+0x7d4>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	0800951b 	.word	0x0800951b
 800949c:	08009577 	.word	0x08009577
 80094a0:	08009523 	.word	0x08009523
 80094a4:	08009577 	.word	0x08009577
 80094a8:	08009577 	.word	0x08009577
 80094ac:	08009577 	.word	0x08009577
 80094b0:	08009533 	.word	0x08009533
 80094b4:	08009577 	.word	0x08009577
 80094b8:	08009577 	.word	0x08009577
 80094bc:	08009577 	.word	0x08009577
 80094c0:	08009577 	.word	0x08009577
 80094c4:	08009577 	.word	0x08009577
 80094c8:	08009577 	.word	0x08009577
 80094cc:	08009577 	.word	0x08009577
 80094d0:	08009543 	.word	0x08009543
 80094d4:	08009577 	.word	0x08009577
 80094d8:	08009577 	.word	0x08009577
 80094dc:	08009577 	.word	0x08009577
 80094e0:	08009577 	.word	0x08009577
 80094e4:	08009577 	.word	0x08009577
 80094e8:	08009577 	.word	0x08009577
 80094ec:	08009577 	.word	0x08009577
 80094f0:	08009577 	.word	0x08009577
 80094f4:	08009577 	.word	0x08009577
 80094f8:	08009577 	.word	0x08009577
 80094fc:	08009577 	.word	0x08009577
 8009500:	08009577 	.word	0x08009577
 8009504:	08009577 	.word	0x08009577
 8009508:	08009577 	.word	0x08009577
 800950c:	08009577 	.word	0x08009577
 8009510:	08009569 	.word	0x08009569
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d02a      	beq.n	800956e <UART_SetConfig+0x8aa>
 8009518:	e02d      	b.n	8009576 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800951a:	f7fd fc75 	bl	8006e08 <HAL_RCCEx_GetD3PCLK1Freq>
 800951e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009520:	e02f      	b.n	8009582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd fc84 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e027      	b.n	8009582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009532:	f107 0318 	add.w	r3, r7, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd fdd0 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009540:	e01f      	b.n	8009582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009542:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <UART_SetConfig+0x904>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800954e:	4b1e      	ldr	r3, [pc, #120]	@ (80095c8 <UART_SetConfig+0x904>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	08db      	lsrs	r3, r3, #3
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	4a1d      	ldr	r2, [pc, #116]	@ (80095d0 <UART_SetConfig+0x90c>)
 800955a:	fa22 f303 	lsr.w	r3, r2, r3
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009560:	e00f      	b.n	8009582 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <UART_SetConfig+0x90c>)
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009566:	e00c      	b.n	8009582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009568:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <UART_SetConfig+0x910>)
 800956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956c:	e009      	b.n	8009582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009574:	e005      	b.n	8009582 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 81ee 	beq.w	8009966 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958e:	4a12      	ldr	r2, [pc, #72]	@ (80095d8 <UART_SetConfig+0x914>)
 8009590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009594:	461a      	mov	r2, r3
 8009596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009598:	fbb3 f3f2 	udiv	r3, r3, r2
 800959c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	4413      	add	r3, r2
 80095a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d305      	bcc.n	80095ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d910      	bls.n	80095dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095c0:	e1d1      	b.n	8009966 <UART_SetConfig+0xca2>
 80095c2:	bf00      	nop
 80095c4:	40011c00 	.word	0x40011c00
 80095c8:	58024400 	.word	0x58024400
 80095cc:	58000c00 	.word	0x58000c00
 80095d0:	03d09000 	.word	0x03d09000
 80095d4:	003d0900 	.word	0x003d0900
 80095d8:	0800c424 	.word	0x0800c424
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095de:	2200      	movs	r2, #0
 80095e0:	60bb      	str	r3, [r7, #8]
 80095e2:	60fa      	str	r2, [r7, #12]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e8:	4ac0      	ldr	r2, [pc, #768]	@ (80098ec <UART_SetConfig+0xc28>)
 80095ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095fe:	f7f6 fee7 	bl	80003d0 <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4610      	mov	r0, r2
 8009608:	4619      	mov	r1, r3
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	020b      	lsls	r3, r1, #8
 8009614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009618:	0202      	lsls	r2, r0, #8
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	6849      	ldr	r1, [r1, #4]
 800961e:	0849      	lsrs	r1, r1, #1
 8009620:	2000      	movs	r0, #0
 8009622:	460c      	mov	r4, r1
 8009624:	4605      	mov	r5, r0
 8009626:	eb12 0804 	adds.w	r8, r2, r4
 800962a:	eb43 0905 	adc.w	r9, r3, r5
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	469a      	mov	sl, r3
 8009636:	4693      	mov	fp, r2
 8009638:	4652      	mov	r2, sl
 800963a:	465b      	mov	r3, fp
 800963c:	4640      	mov	r0, r8
 800963e:	4649      	mov	r1, r9
 8009640:	f7f6 fec6 	bl	80003d0 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4613      	mov	r3, r2
 800964a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009652:	d308      	bcc.n	8009666 <UART_SetConfig+0x9a2>
 8009654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800965a:	d204      	bcs.n	8009666 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009662:	60da      	str	r2, [r3, #12]
 8009664:	e17f      	b.n	8009966 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800966c:	e17b      	b.n	8009966 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009676:	f040 80bd 	bne.w	80097f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800967a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800967e:	2b20      	cmp	r3, #32
 8009680:	dc48      	bgt.n	8009714 <UART_SetConfig+0xa50>
 8009682:	2b00      	cmp	r3, #0
 8009684:	db7b      	blt.n	800977e <UART_SetConfig+0xaba>
 8009686:	2b20      	cmp	r3, #32
 8009688:	d879      	bhi.n	800977e <UART_SetConfig+0xaba>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <UART_SetConfig+0x9cc>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	0800971b 	.word	0x0800971b
 8009694:	08009723 	.word	0x08009723
 8009698:	0800977f 	.word	0x0800977f
 800969c:	0800977f 	.word	0x0800977f
 80096a0:	0800972b 	.word	0x0800972b
 80096a4:	0800977f 	.word	0x0800977f
 80096a8:	0800977f 	.word	0x0800977f
 80096ac:	0800977f 	.word	0x0800977f
 80096b0:	0800973b 	.word	0x0800973b
 80096b4:	0800977f 	.word	0x0800977f
 80096b8:	0800977f 	.word	0x0800977f
 80096bc:	0800977f 	.word	0x0800977f
 80096c0:	0800977f 	.word	0x0800977f
 80096c4:	0800977f 	.word	0x0800977f
 80096c8:	0800977f 	.word	0x0800977f
 80096cc:	0800977f 	.word	0x0800977f
 80096d0:	0800974b 	.word	0x0800974b
 80096d4:	0800977f 	.word	0x0800977f
 80096d8:	0800977f 	.word	0x0800977f
 80096dc:	0800977f 	.word	0x0800977f
 80096e0:	0800977f 	.word	0x0800977f
 80096e4:	0800977f 	.word	0x0800977f
 80096e8:	0800977f 	.word	0x0800977f
 80096ec:	0800977f 	.word	0x0800977f
 80096f0:	0800977f 	.word	0x0800977f
 80096f4:	0800977f 	.word	0x0800977f
 80096f8:	0800977f 	.word	0x0800977f
 80096fc:	0800977f 	.word	0x0800977f
 8009700:	0800977f 	.word	0x0800977f
 8009704:	0800977f 	.word	0x0800977f
 8009708:	0800977f 	.word	0x0800977f
 800970c:	0800977f 	.word	0x0800977f
 8009710:	08009771 	.word	0x08009771
 8009714:	2b40      	cmp	r3, #64	@ 0x40
 8009716:	d02e      	beq.n	8009776 <UART_SetConfig+0xab2>
 8009718:	e031      	b.n	800977e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800971a:	f7fc f9a9 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800971e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009720:	e033      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009722:	f7fc f9bb 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8009726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009728:	e02f      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800972a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800972e:	4618      	mov	r0, r3
 8009730:	f7fd fb80 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009738:	e027      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973a:	f107 0318 	add.w	r3, r7, #24
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fccc 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009748:	e01f      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800974a:	4b69      	ldr	r3, [pc, #420]	@ (80098f0 <UART_SetConfig+0xc2c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009756:	4b66      	ldr	r3, [pc, #408]	@ (80098f0 <UART_SetConfig+0xc2c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	08db      	lsrs	r3, r3, #3
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	4a64      	ldr	r2, [pc, #400]	@ (80098f4 <UART_SetConfig+0xc30>)
 8009762:	fa22 f303 	lsr.w	r3, r2, r3
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009768:	e00f      	b.n	800978a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800976a:	4b62      	ldr	r3, [pc, #392]	@ (80098f4 <UART_SetConfig+0xc30>)
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800976e:	e00c      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009770:	4b61      	ldr	r3, [pc, #388]	@ (80098f8 <UART_SetConfig+0xc34>)
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009774:	e009      	b.n	800978a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800977a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977c:	e005      	b.n	800978a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800978a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 80ea 	beq.w	8009966 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009796:	4a55      	ldr	r2, [pc, #340]	@ (80098ec <UART_SetConfig+0xc28>)
 8009798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800979c:	461a      	mov	r2, r3
 800979e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a4:	005a      	lsls	r2, r3, #1
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	441a      	add	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	d916      	bls.n	80097ec <UART_SetConfig+0xb28>
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c4:	d212      	bcs.n	80097ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	f023 030f 	bic.w	r3, r3, #15
 80097ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	b29a      	uxth	r2, r3
 80097dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097de:	4313      	orrs	r3, r2
 80097e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80097e8:	60da      	str	r2, [r3, #12]
 80097ea:	e0bc      	b.n	8009966 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097f2:	e0b8      	b.n	8009966 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	dc4b      	bgt.n	8009894 <UART_SetConfig+0xbd0>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f2c0 8087 	blt.w	8009910 <UART_SetConfig+0xc4c>
 8009802:	2b20      	cmp	r3, #32
 8009804:	f200 8084 	bhi.w	8009910 <UART_SetConfig+0xc4c>
 8009808:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <UART_SetConfig+0xb4c>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	0800989b 	.word	0x0800989b
 8009814:	080098a3 	.word	0x080098a3
 8009818:	08009911 	.word	0x08009911
 800981c:	08009911 	.word	0x08009911
 8009820:	080098ab 	.word	0x080098ab
 8009824:	08009911 	.word	0x08009911
 8009828:	08009911 	.word	0x08009911
 800982c:	08009911 	.word	0x08009911
 8009830:	080098bb 	.word	0x080098bb
 8009834:	08009911 	.word	0x08009911
 8009838:	08009911 	.word	0x08009911
 800983c:	08009911 	.word	0x08009911
 8009840:	08009911 	.word	0x08009911
 8009844:	08009911 	.word	0x08009911
 8009848:	08009911 	.word	0x08009911
 800984c:	08009911 	.word	0x08009911
 8009850:	080098cb 	.word	0x080098cb
 8009854:	08009911 	.word	0x08009911
 8009858:	08009911 	.word	0x08009911
 800985c:	08009911 	.word	0x08009911
 8009860:	08009911 	.word	0x08009911
 8009864:	08009911 	.word	0x08009911
 8009868:	08009911 	.word	0x08009911
 800986c:	08009911 	.word	0x08009911
 8009870:	08009911 	.word	0x08009911
 8009874:	08009911 	.word	0x08009911
 8009878:	08009911 	.word	0x08009911
 800987c:	08009911 	.word	0x08009911
 8009880:	08009911 	.word	0x08009911
 8009884:	08009911 	.word	0x08009911
 8009888:	08009911 	.word	0x08009911
 800988c:	08009911 	.word	0x08009911
 8009890:	08009903 	.word	0x08009903
 8009894:	2b40      	cmp	r3, #64	@ 0x40
 8009896:	d037      	beq.n	8009908 <UART_SetConfig+0xc44>
 8009898:	e03a      	b.n	8009910 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800989a:	f7fc f8e9 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 800989e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098a0:	e03c      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098a2:	f7fc f8fb 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 80098a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098a8:	e038      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fd fac0 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b8:	e030      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ba:	f107 0318 	add.w	r3, r7, #24
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd fc0c 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c8:	e028      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098ca:	4b09      	ldr	r3, [pc, #36]	@ (80098f0 <UART_SetConfig+0xc2c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0320 	and.w	r3, r3, #32
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d012      	beq.n	80098fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098d6:	4b06      	ldr	r3, [pc, #24]	@ (80098f0 <UART_SetConfig+0xc2c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	08db      	lsrs	r3, r3, #3
 80098dc:	f003 0303 	and.w	r3, r3, #3
 80098e0:	4a04      	ldr	r2, [pc, #16]	@ (80098f4 <UART_SetConfig+0xc30>)
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098e8:	e018      	b.n	800991c <UART_SetConfig+0xc58>
 80098ea:	bf00      	nop
 80098ec:	0800c424 	.word	0x0800c424
 80098f0:	58024400 	.word	0x58024400
 80098f4:	03d09000 	.word	0x03d09000
 80098f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80098fc:	4b24      	ldr	r3, [pc, #144]	@ (8009990 <UART_SetConfig+0xccc>)
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e00c      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009902:	4b24      	ldr	r3, [pc, #144]	@ (8009994 <UART_SetConfig+0xcd0>)
 8009904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009906:	e009      	b.n	800991c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990e:	e005      	b.n	800991c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800991a:	bf00      	nop
    }

    if (pclk != 0U)
 800991c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d021      	beq.n	8009966 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009926:	4a1c      	ldr	r2, [pc, #112]	@ (8009998 <UART_SetConfig+0xcd4>)
 8009928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800992c:	461a      	mov	r2, r3
 800992e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009930:	fbb3 f2f2 	udiv	r2, r3, r2
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	085b      	lsrs	r3, r3, #1
 800993a:	441a      	add	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	fbb2 f3f3 	udiv	r3, r2, r3
 8009944:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	2b0f      	cmp	r3, #15
 800994a:	d909      	bls.n	8009960 <UART_SetConfig+0xc9c>
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009952:	d205      	bcs.n	8009960 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	b29a      	uxth	r2, r3
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	e002      	b.n	8009966 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2201      	movs	r2, #1
 800996a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2201      	movs	r2, #1
 8009972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2200      	movs	r2, #0
 800997a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2200      	movs	r2, #0
 8009980:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009982:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009986:	4618      	mov	r0, r3
 8009988:	3748      	adds	r7, #72	@ 0x48
 800998a:	46bd      	mov	sp, r7
 800998c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009990:	03d09000 	.word	0x03d09000
 8009994:	003d0900 	.word	0x003d0900
 8009998:	0800c424 	.word	0x0800c424

0800999c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00a      	beq.n	80099c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00a      	beq.n	80099e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00a      	beq.n	8009a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01a      	beq.n	8009ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a9a:	d10a      	bne.n	8009ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	605a      	str	r2, [r3, #4]
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b098      	sub	sp, #96	@ 0x60
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009af0:	f7f7 fea2 	bl	8001838 <HAL_GetTick>
 8009af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d12f      	bne.n	8009b64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f88e 	bl	8009c34 <UART_WaitOnFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d022      	beq.n	8009b64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e6      	bne.n	8009b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e063      	b.n	8009c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d149      	bne.n	8009c06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f857 	bl	8009c34 <UART_WaitOnFlagUntilTimeout>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d03c      	beq.n	8009c06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	623b      	str	r3, [r7, #32]
   return(result);
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e6      	bne.n	8009b8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3308      	adds	r3, #8
 8009bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bde:	61fa      	str	r2, [r7, #28]
 8009be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	69b9      	ldr	r1, [r7, #24]
 8009be4:	69fa      	ldr	r2, [r7, #28]
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	617b      	str	r3, [r7, #20]
   return(result);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e5      	bne.n	8009bbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e012      	b.n	8009c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3758      	adds	r7, #88	@ 0x58
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4613      	mov	r3, r2
 8009c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c44:	e04f      	b.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d04b      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4e:	f7f7 fdf3 	bl	8001838 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e04e      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d037      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b80      	cmp	r3, #128	@ 0x80
 8009c7a:	d034      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b40      	cmp	r3, #64	@ 0x40
 8009c80:	d031      	beq.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d110      	bne.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2208      	movs	r2, #8
 8009c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f921 	bl	8009ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e029      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cc0:	d111      	bne.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 f907 	bl	8009ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e00f      	b.n	8009d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	bf0c      	ite	eq
 8009cf6:	2301      	moveq	r3, #1
 8009cf8:	2300      	movne	r3, #0
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d0a0      	beq.n	8009c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b096      	sub	sp, #88	@ 0x58
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	88fa      	ldrh	r2, [r7, #6]
 8009d28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2222      	movs	r2, #34	@ 0x22
 8009d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d02d      	beq.n	8009da2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d4c:	4a40      	ldr	r2, [pc, #256]	@ (8009e50 <UART_Start_Receive_DMA+0x140>)
 8009d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d56:	4a3f      	ldr	r2, [pc, #252]	@ (8009e54 <UART_Start_Receive_DMA+0x144>)
 8009d58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d60:	4a3d      	ldr	r2, [pc, #244]	@ (8009e58 <UART_Start_Receive_DMA+0x148>)
 8009d62:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3324      	adds	r3, #36	@ 0x24
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d80:	461a      	mov	r2, r3
 8009d82:	88fb      	ldrh	r3, [r7, #6]
 8009d84:	f7f8 f9cc 	bl	8002120 <HAL_DMA_Start_IT>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2210      	movs	r2, #16
 8009d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e051      	b.n	8009e46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e6      	bne.n	8009daa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3308      	adds	r3, #8
 8009de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dee:	f043 0301 	orr.w	r3, r3, #1
 8009df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3308      	adds	r3, #8
 8009dfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dfc:	637a      	str	r2, [r7, #52]	@ 0x34
 8009dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e5      	bne.n	8009ddc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3308      	adds	r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e30:	623a      	str	r2, [r7, #32]
 8009e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	6a3a      	ldr	r2, [r7, #32]
 8009e38:	e841 2300 	strex	r3, r2, [r1]
 8009e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e5      	bne.n	8009e10 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3758      	adds	r7, #88	@ 0x58
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	08009fad 	.word	0x08009fad
 8009e54:	0800a0d5 	.word	0x0800a0d5
 8009e58:	0800a113 	.word	0x0800a113

08009e5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b08f      	sub	sp, #60	@ 0x3c
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	e853 3f00 	ldrex	r3, [r3]
 8009e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e6      	bne.n	8009e64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb6:	61ba      	str	r2, [r7, #24]
 8009eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	6979      	ldr	r1, [r7, #20]
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	e841 2300 	strex	r3, r2, [r1]
 8009ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1e5      	bne.n	8009e96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009ed2:	bf00      	nop
 8009ed4:	373c      	adds	r7, #60	@ 0x3c
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b095      	sub	sp, #84	@ 0x54
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e6      	bne.n	8009ee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa8 <UART_EndRxTransfer+0xc8>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3308      	adds	r3, #8
 8009f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e5      	bne.n	8009f1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d118      	bne.n	8009f88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f023 0310 	bic.w	r3, r3, #16
 8009f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6979      	ldr	r1, [r7, #20]
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	613b      	str	r3, [r7, #16]
   return(result);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f9c:	bf00      	nop
 8009f9e:	3754      	adds	r7, #84	@ 0x54
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	effffffe 	.word	0xeffffffe

08009fac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b09c      	sub	sp, #112	@ 0x70
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fc2:	d071      	beq.n	800a0a8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009fea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e6      	bne.n	8009fcc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3308      	adds	r3, #8
 800a004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	667b      	str	r3, [r7, #100]	@ 0x64
 800a016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a01e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a020:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a024:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3308      	adds	r3, #8
 800a038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	623b      	str	r3, [r7, #32]
   return(result);
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a048:	663b      	str	r3, [r7, #96]	@ 0x60
 800a04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a052:	633a      	str	r2, [r7, #48]	@ 0x30
 800a054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e5      	bne.n	800a032 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a072:	2b01      	cmp	r3, #1
 800a074:	d118      	bne.n	800a0a8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	60fb      	str	r3, [r7, #12]
   return(result);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0310 	bic.w	r3, r3, #16
 800a08a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a08c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	461a      	mov	r2, r3
 800a092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a098:	69b9      	ldr	r1, [r7, #24]
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e6      	bne.n	800a076 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d107      	bne.n	800a0c6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0c0:	f7fe fdf4 	bl	8008cac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0c4:	e002      	b.n	800a0cc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a0c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0c8:	f000 fcf4 	bl	800aab4 <HAL_UART_RxCpltCallback>
}
 800a0cc:	bf00      	nop
 800a0ce:	3770      	adds	r7, #112	@ 0x70
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d109      	bne.n	800a104 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0f6:	085b      	lsrs	r3, r3, #1
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7fe fdd5 	bl	8008cac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a102:	e002      	b.n	800a10a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7fe fdbd 	bl	8008c84 <HAL_UART_RxHalfCpltCallback>
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a126:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13a:	2b80      	cmp	r3, #128	@ 0x80
 800a13c:	d109      	bne.n	800a152 <UART_DMAError+0x40>
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b21      	cmp	r3, #33	@ 0x21
 800a142:	d106      	bne.n	800a152 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2200      	movs	r2, #0
 800a148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a14c:	6978      	ldr	r0, [r7, #20]
 800a14e:	f7ff fe85 	bl	8009e5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a15c:	2b40      	cmp	r3, #64	@ 0x40
 800a15e:	d109      	bne.n	800a174 <UART_DMAError+0x62>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b22      	cmp	r3, #34	@ 0x22
 800a164:	d106      	bne.n	800a174 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2200      	movs	r2, #0
 800a16a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a16e:	6978      	ldr	r0, [r7, #20]
 800a170:	f7ff feb6 	bl	8009ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17a:	f043 0210 	orr.w	r2, r3, #16
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a184:	6978      	ldr	r0, [r7, #20]
 800a186:	f7fe fd87 	bl	8008c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a18a:	bf00      	nop
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7fe fd71 	bl	8008c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b08f      	sub	sp, #60	@ 0x3c
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1cc:	2b21      	cmp	r3, #33	@ 0x21
 800a1ce:	d14c      	bne.n	800a26a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d132      	bne.n	800a242 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e6      	bne.n	800a1dc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a222:	633b      	str	r3, [r7, #48]	@ 0x30
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22c:	61bb      	str	r3, [r7, #24]
 800a22e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	6979      	ldr	r1, [r7, #20]
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	613b      	str	r3, [r7, #16]
   return(result);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e6      	bne.n	800a20e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a240:	e013      	b.n	800a26a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3b01      	subs	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a26a:	bf00      	nop
 800a26c:	373c      	adds	r7, #60	@ 0x3c
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a276:	b480      	push	{r7}
 800a278:	b091      	sub	sp, #68	@ 0x44
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a284:	2b21      	cmp	r3, #33	@ 0x21
 800a286:	d151      	bne.n	800a32c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d132      	bne.n	800a2fa <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e4:	61fb      	str	r3, [r7, #28]
 800a2e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	69b9      	ldr	r1, [r7, #24]
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e6      	bne.n	800a2c6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a2f8:	e018      	b.n	800a32c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a30e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a314:	1c9a      	adds	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a320:	b29b      	uxth	r3, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	b29a      	uxth	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a32c:	bf00      	nop
 800a32e:	3744      	adds	r7, #68	@ 0x44
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b091      	sub	sp, #68	@ 0x44
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a346:	2b21      	cmp	r3, #33	@ 0x21
 800a348:	d160      	bne.n	800a40c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a350:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a352:	e057      	b.n	800a404 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d133      	bne.n	800a3c8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3308      	adds	r3, #8
 800a366:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	623b      	str	r3, [r7, #32]
   return(result);
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a376:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3308      	adds	r3, #8
 800a37e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a380:	633a      	str	r2, [r7, #48]	@ 0x30
 800a382:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e5      	bne.n	800a360 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	61fb      	str	r3, [r7, #28]
 800a3b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	69b9      	ldr	r1, [r7, #24]
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e6      	bne.n	800a394 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a3c6:	e021      	b.n	800a40c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d013      	beq.n	800a3fe <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3da:	781a      	ldrb	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a3fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a400:	3b01      	subs	r3, #1
 800a402:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a404:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1a4      	bne.n	800a354 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a40a:	e7ff      	b.n	800a40c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a40c:	bf00      	nop
 800a40e:	3744      	adds	r7, #68	@ 0x44
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b091      	sub	sp, #68	@ 0x44
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a426:	2b21      	cmp	r3, #33	@ 0x21
 800a428:	d165      	bne.n	800a4f6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a430:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a432:	e05c      	b.n	800a4ee <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d133      	bne.n	800a4a8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3308      	adds	r3, #8
 800a446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	e853 3f00 	ldrex	r3, [r3]
 800a44e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3308      	adds	r3, #8
 800a45e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a460:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e5      	bne.n	800a440 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	60bb      	str	r3, [r7, #8]
   return(result);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	61bb      	str	r3, [r7, #24]
 800a494:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6979      	ldr	r1, [r7, #20]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e6      	bne.n	800a474 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a4a6:	e026      	b.n	800a4f6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4ca:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d0:	1c9a      	adds	r2, r3, #2
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a4e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a4ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d19f      	bne.n	800a434 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a4f4:	e7ff      	b.n	800a4f6 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a4f6:	bf00      	nop
 800a4f8:	3744      	adds	r7, #68	@ 0x44
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	60bb      	str	r3, [r7, #8]
   return(result);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	461a      	mov	r2, r3
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6979      	ldr	r1, [r7, #20]
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	613b      	str	r3, [r7, #16]
   return(result);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e6      	bne.n	800a50a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2220      	movs	r2, #32
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fac2 	bl	800aad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a550:	bf00      	nop
 800a552:	3720      	adds	r7, #32
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d101      	bne.n	800a5aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e027      	b.n	800a5fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2224      	movs	r2, #36	@ 0x24
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0201 	bic.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a5d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e02d      	b.n	800a67a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2224      	movs	r2, #36	@ 0x24
 800a62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f850 	bl	800a700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a696:	2302      	movs	r3, #2
 800a698:	e02d      	b.n	800a6f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2224      	movs	r2, #36	@ 0x24
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0201 	bic.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f812 	bl	800a700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d108      	bne.n	800a722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a720:	e031      	b.n	800a786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a722:	2310      	movs	r3, #16
 800a724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a726:	2310      	movs	r3, #16
 800a728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	0e5b      	lsrs	r3, r3, #25
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	0f5b      	lsrs	r3, r3, #29
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	7b3a      	ldrb	r2, [r7, #12]
 800a74e:	4911      	ldr	r1, [pc, #68]	@ (800a794 <UARTEx_SetNbDataToProcess+0x94>)
 800a750:	5c8a      	ldrb	r2, [r1, r2]
 800a752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a756:	7b3a      	ldrb	r2, [r7, #12]
 800a758:	490f      	ldr	r1, [pc, #60]	@ (800a798 <UARTEx_SetNbDataToProcess+0x98>)
 800a75a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a75c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	7b7a      	ldrb	r2, [r7, #13]
 800a76c:	4909      	ldr	r1, [pc, #36]	@ (800a794 <UARTEx_SetNbDataToProcess+0x94>)
 800a76e:	5c8a      	ldrb	r2, [r1, r2]
 800a770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a774:	7b7a      	ldrb	r2, [r7, #13]
 800a776:	4908      	ldr	r1, [pc, #32]	@ (800a798 <UARTEx_SetNbDataToProcess+0x98>)
 800a778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	0800c43c 	.word	0x0800c43c
 800a798:	0800c444 	.word	0x0800c444

0800a79c <HAL_GPIO_EXTI_Callback>:
#include "stm32h7xx_hal_cortex.h"

char rresponse[100] = {0};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 800a7a6:	f000 f881 	bl	800a8ac <HAL_ResumeTick>

    uint16_t length = snprintf(rresponse, 512, "Device woken up\r\n");
 800a7aa:	4a09      	ldr	r2, [pc, #36]	@ (800a7d0 <HAL_GPIO_EXTI_Callback+0x34>)
 800a7ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a7b0:	4808      	ldr	r0, [pc, #32]	@ (800a7d4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a7b2:	f000 fcdd 	bl	800b170 <sniprintf>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart3, rresponse, length, 100);
 800a7ba:	89fa      	ldrh	r2, [r7, #14]
 800a7bc:	2364      	movs	r3, #100	@ 0x64
 800a7be:	4905      	ldr	r1, [pc, #20]	@ (800a7d4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	@ (800a7d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 800a7c2:	f7fd fd37 	bl	8008234 <HAL_UART_Transmit>

}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	0800c388 	.word	0x0800c388
 800a7d4:	24000674 	.word	0x24000674
 800a7d8:	24000564 	.word	0x24000564

0800a7dc <stopModeTask>:

}


void stopModeTask(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
	if(stopModeTriggered == true)
 800a7e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a854 <stopModeTask+0x78>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d030      	beq.n	800a84c <stopModeTask+0x70>
	{
		stopModeTriggered = false;
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a854 <stopModeTask+0x78>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]

		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f245 010b 	movw	r1, #20491	@ 0x500b
 800a7f6:	4818      	ldr	r0, [pc, #96]	@ (800a858 <stopModeTask+0x7c>)
 800a7f8:	f7fd fb88 	bl	8007f0c <HAL_RTCEx_SetWakeUpTimer_IT>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <stopModeTask+0x2a>
		{
			Error_Handler();
 800a802:	f7f6 fc23 	bl	800104c <Error_Handler>
		}

	    uint16_t length = snprintf(res, 512, "Stop Mode Triggered \r\n");
 800a806:	4a15      	ldr	r2, [pc, #84]	@ (800a85c <stopModeTask+0x80>)
 800a808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a80c:	4814      	ldr	r0, [pc, #80]	@ (800a860 <stopModeTask+0x84>)
 800a80e:	f000 fcaf 	bl	800b170 <sniprintf>
 800a812:	4603      	mov	r3, r0
 800a814:	80fb      	strh	r3, [r7, #6]


		HAL_UART_Transmit(&huart3, res, length, 100);
 800a816:	88fa      	ldrh	r2, [r7, #6]
 800a818:	2364      	movs	r3, #100	@ 0x64
 800a81a:	4911      	ldr	r1, [pc, #68]	@ (800a860 <stopModeTask+0x84>)
 800a81c:	4811      	ldr	r0, [pc, #68]	@ (800a864 <stopModeTask+0x88>)
 800a81e:	f7fd fd09 	bl	8008234 <HAL_UART_Transmit>

		HAL_PWR_EnterSTANDBYMode();
 800a822:	f7fa f98d 	bl	8004b40 <HAL_PWR_EnterSTANDBYMode>

		//<<< Logic after wakeup
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a826:	480c      	ldr	r0, [pc, #48]	@ (800a858 <stopModeTask+0x7c>)
 800a828:	f7fd fc02 	bl	8008030 <HAL_RTCEx_DeactivateWakeUpTimer>

		HAL_PWR_EnablePVD();
 800a82c:	f7fa f95e 	bl	8004aec <HAL_PWR_EnablePVD>

	    length = snprintf(res, 512, "System woken up \r\n");
 800a830:	4a0d      	ldr	r2, [pc, #52]	@ (800a868 <stopModeTask+0x8c>)
 800a832:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a836:	480a      	ldr	r0, [pc, #40]	@ (800a860 <stopModeTask+0x84>)
 800a838:	f000 fc9a 	bl	800b170 <sniprintf>
 800a83c:	4603      	mov	r3, r0
 800a83e:	80fb      	strh	r3, [r7, #6]

		HAL_UART_Transmit(&huart3, res, length, 100);
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	2364      	movs	r3, #100	@ 0x64
 800a844:	4906      	ldr	r1, [pc, #24]	@ (800a860 <stopModeTask+0x84>)
 800a846:	4807      	ldr	r0, [pc, #28]	@ (800a864 <stopModeTask+0x88>)
 800a848:	f7fd fcf4 	bl	8008234 <HAL_UART_Transmit>

	}
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	2400073c 	.word	0x2400073c
 800a858:	2400053c 	.word	0x2400053c
 800a85c:	0800c39c 	.word	0x0800c39c
 800a860:	240006d8 	.word	0x240006d8
 800a864:	24000564 	.word	0x24000564
 800a868:	0800c3b4 	.word	0x0800c3b4

0800a86c <startSleepMode>:

void startSleepMode(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a870:	4805      	ldr	r0, [pc, #20]	@ (800a888 <startSleepMode+0x1c>)
 800a872:	f7fd fbdd 	bl	8008030 <HAL_RTCEx_DeactivateWakeUpTimer>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800a876:	2101      	movs	r1, #1
 800a878:	2000      	movs	r0, #0
 800a87a:	f7fa f947 	bl	8004b0c <HAL_PWR_EnterSLEEPMode>

	HAL_SuspendTick();
 800a87e:	f000 f805 	bl	800a88c <HAL_SuspendTick>
}
 800a882:	bf00      	nop
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	2400053c 	.word	0x2400053c

0800a88c <HAL_SuspendTick>:
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}


void HAL_SuspendTick(void)
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800a890:	4b05      	ldr	r3, [pc, #20]	@ (800a8a8 <HAL_SuspendTick+0x1c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a04      	ldr	r2, [pc, #16]	@ (800a8a8 <HAL_SuspendTick+0x1c>)
 800a896:	f023 0302 	bic.w	r3, r3, #2
 800a89a:	6013      	str	r3, [r2, #0]
}
 800a89c:	bf00      	nop
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	e000e010 	.word	0xe000e010

0800a8ac <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <HAL_ResumeTick+0x1c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	@ (800a8c8 <HAL_ResumeTick+0x1c>)
 800a8b6:	f043 0302 	orr.w	r3, r3, #2
 800a8ba:	6013      	str	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	e000e010 	.word	0xe000e010

0800a8cc <setStopModeFlag>:
{
	return stopModeTriggered;
}

void setStopModeFlag(bool flag)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
	stopModeTriggered = flag;
 800a8d6:	4a04      	ldr	r2, [pc, #16]	@ (800a8e8 <setStopModeFlag+0x1c>)
 800a8d8:	79fb      	ldrb	r3, [r7, #7]
 800a8da:	7013      	strb	r3, [r2, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	2400073c 	.word	0x2400073c

0800a8ec <HAL_RTCEx_WakeUpTimerEventCallback>:
static uint8_t days_in_month(uint8_t month, uint8_t year);

bool rtcAlarmTriggered = false;

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef * hrtc)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 800a8f4:	f7f6 fb30 	bl	8000f58 <SystemClock_Config>

	HAL_ResumeTick();
 800a8f8:	f7ff ffd8 	bl	800a8ac <HAL_ResumeTick>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800a8fc:	2102      	movs	r1, #2
 800a8fe:	4803      	ldr	r0, [pc, #12]	@ (800a90c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800a900:	f7fa f8af 	bl	8004a62 <HAL_GPIO_TogglePin>
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	58020400 	.word	0x58020400

0800a910 <RTCInit>:

	rtcAlarmTriggered = true;
}

void RTCInit(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2346)
 800a914:	2101      	movs	r1, #1
 800a916:	480b      	ldr	r0, [pc, #44]	@ (800a944 <RTCInit+0x34>)
 800a918:	f7fd fc26 	bl	8008168 <HAL_RTCEx_BKUPRead>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f242 3246 	movw	r2, #9030	@ 0x2346
 800a922:	4293      	cmp	r3, r2
 800a924:	d008      	beq.n	800a938 <RTCInit+0x28>
	{
		setRTCData(&defaultDateTime);
 800a926:	4808      	ldr	r0, [pc, #32]	@ (800a948 <RTCInit+0x38>)
 800a928:	f000 f814 	bl	800a954 <setRTCData>
		HAL_UART_Transmit(&huart3, "RTC Reconfig'd\r\n", 13, 100);
 800a92c:	2364      	movs	r3, #100	@ 0x64
 800a92e:	220d      	movs	r2, #13
 800a930:	4906      	ldr	r1, [pc, #24]	@ (800a94c <RTCInit+0x3c>)
 800a932:	4807      	ldr	r0, [pc, #28]	@ (800a950 <RTCInit+0x40>)
 800a934:	f7fd fc7e 	bl	8008234 <HAL_UART_Transmit>
	}
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800a938:	4802      	ldr	r0, [pc, #8]	@ (800a944 <RTCInit+0x34>)
 800a93a:	f7fd fb79 	bl	8008030 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800a93e:	bf00      	nop
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2400053c 	.word	0x2400053c
 800a948:	24000094 	.word	0x24000094
 800a94c:	0800c3c8 	.word	0x0800c3c8
 800a950:	24000564 	.word	0x24000564

0800a954 <setRTCData>:

void setRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 800a95c:	f107 030c 	add.w	r3, r7, #12
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	605a      	str	r2, [r3, #4]
 800a966:	609a      	str	r2, [r3, #8]
 800a968:	60da      	str	r2, [r3, #12]
 800a96a:	611a      	str	r2, [r3, #16]

	sTime.Hours = rtcDatTime->hours;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = rtcDatTime->mins;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = rtcDatTime->secs;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	789b      	ldrb	r3, [r3, #2]
 800a97c:	73bb      	strb	r3, [r7, #14]

	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a97e:	2300      	movs	r3, #0
 800a980:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a982:	2300      	movs	r3, #0
 800a984:	61fb      	str	r3, [r7, #28]

	RTC_DateTypeDef sDate = {0};
 800a986:	2300      	movs	r3, #0
 800a988:	60bb      	str	r3, [r7, #8]

	sDate.WeekDay = rtcDatTime->day;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	78db      	ldrb	r3, [r3, #3]
 800a98e:	723b      	strb	r3, [r7, #8]
	sDate.Month = rtcDatTime->month;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	795b      	ldrb	r3, [r3, #5]
 800a994:	727b      	strb	r3, [r7, #9]
	sDate.Date = rtcDatTime->date;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	72bb      	strb	r3, [r7, #10]
	sDate.Year = rtcDatTime->year;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	799b      	ldrb	r3, [r3, #6]
 800a9a0:	72fb      	strb	r3, [r7, #11]

	if ((HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK) && (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK))
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	480d      	ldr	r0, [pc, #52]	@ (800a9e0 <setRTCData+0x8c>)
 800a9ac:	f7fc fed0 	bl	8007750 <HAL_RTC_SetTime>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10f      	bne.n	800a9d6 <setRTCData+0x82>
 800a9b6:	f107 0308 	add.w	r3, r7, #8
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4808      	ldr	r0, [pc, #32]	@ (800a9e0 <setRTCData+0x8c>)
 800a9c0:	f7fc ffc0 	bl	8007944 <HAL_RTC_SetDate>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <setRTCData+0x82>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);
 800a9ca:	f242 3245 	movw	r2, #9029	@ 0x2345
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	4803      	ldr	r0, [pc, #12]	@ (800a9e0 <setRTCData+0x8c>)
 800a9d2:	f7fd fbb1 	bl	8008138 <HAL_RTCEx_BKUPWrite>
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	2400053c 	.word	0x2400053c

0800a9e4 <getRTCData>:

void getRTCData(sDateTimeConfig_t * rtcDatTime)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
	  RTC_DateTypeDef gDate;
	  RTC_TimeTypeDef gTime;


	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800a9ec:	f107 0308 	add.w	r3, r7, #8
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4811      	ldr	r0, [pc, #68]	@ (800aa3c <getRTCData+0x58>)
 800a9f6:	f7fc ff49 	bl	800788c <HAL_RTC_GetTime>

	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800a9fa:	f107 031c 	add.w	r3, r7, #28
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4619      	mov	r1, r3
 800aa02:	480e      	ldr	r0, [pc, #56]	@ (800aa3c <getRTCData+0x58>)
 800aa04:	f7fd f826 	bl	8007a54 <HAL_RTC_GetDate>

	  rtcDatTime->date 	= gDate.Date;
 800aa08:	7fba      	ldrb	r2, [r7, #30]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	711a      	strb	r2, [r3, #4]
	  rtcDatTime->day 	= gDate.WeekDay;
 800aa0e:	7f3a      	ldrb	r2, [r7, #28]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	70da      	strb	r2, [r3, #3]
	  rtcDatTime->month = gDate.Month;
 800aa14:	7f7a      	ldrb	r2, [r7, #29]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	715a      	strb	r2, [r3, #5]
	  rtcDatTime->year 	= gDate.Year;
 800aa1a:	7ffa      	ldrb	r2, [r7, #31]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	719a      	strb	r2, [r3, #6]

	  rtcDatTime->hours = gTime.Hours;
 800aa20:	7a3a      	ldrb	r2, [r7, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	701a      	strb	r2, [r3, #0]
	  rtcDatTime->mins 	= gTime.Minutes;
 800aa26:	7a7a      	ldrb	r2, [r7, #9]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	705a      	strb	r2, [r3, #1]
	  rtcDatTime->secs 	= gTime.Seconds;
 800aa2c:	7aba      	ldrb	r2, [r7, #10]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	709a      	strb	r2, [r3, #2]
}
 800aa32:	bf00      	nop
 800aa34:	3720      	adds	r7, #32
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2400053c 	.word	0x2400053c

0800aa40 <setRTCAlarm>:

void setRTCAlarm(sDateTimeConfig_t * rtcDatTime)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	@ 0x30
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 800aa48:	f107 0308 	add.w	r3, r7, #8
 800aa4c:	2228      	movs	r2, #40	@ 0x28
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 fc04 	bl	800b25e <memset>
	sAlarm.AlarmTime.Hours = rtcDatTime->hours;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = rtcDatTime->mins;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = rtcDatTime->secs;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800aa74:	2300      	movs	r3, #0
 800aa76:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800aa7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa80:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = rtcDatTime->day;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	78db      	ldrb	r3, [r3, #3]
 800aa86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800aa8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800aa90:	f107 0308 	add.w	r3, r7, #8
 800aa94:	2200      	movs	r2, #0
 800aa96:	4619      	mov	r1, r3
 800aa98:	4805      	ldr	r0, [pc, #20]	@ (800aab0 <setRTCAlarm+0x70>)
 800aa9a:	f7fd f829 	bl	8007af0 <HAL_RTC_SetAlarm_IT>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <setRTCAlarm+0x68>
	{
		Error_Handler();
 800aaa4:	f7f6 fad2 	bl	800104c <Error_Handler>
	}
}
 800aaa8:	bf00      	nop
 800aaaa:	3730      	adds	r7, #48	@ 0x30
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	2400053c 	.word	0x2400053c

0800aab4 <HAL_UART_RxCpltCallback>:
void * rxCalbackFptr = NULL;

typedef void (*rxCallback)(void) ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
	rxCallback fptr = (rxCallback)rxCalbackFptr;
 800aabc:	4b04      	ldr	r3, [pc, #16]	@ (800aad0 <HAL_UART_RxCpltCallback+0x1c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60fb      	str	r3, [r7, #12]

	fptr();
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4798      	blx	r3
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	24000740 	.word	0x24000740

0800aad4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <uartInit>:

void uartInit(void * rxCallbackPtr)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	rxCalbackFptr = rxCallbackPtr;
 800aaf0:	4a04      	ldr	r2, [pc, #16]	@ (800ab04 <uartInit+0x1c>)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6013      	str	r3, [r2, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	24000740 	.word	0x24000740

0800ab08 <receptionItrOn>:

void receptionItrOn(uint8_t * data)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, data, sizeof(uint8_t));
 800ab10:	2201      	movs	r2, #1
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4803      	ldr	r0, [pc, #12]	@ (800ab24 <receptionItrOn+0x1c>)
 800ab16:	f7fd fcaf 	bl	8008478 <HAL_UART_Receive_DMA>
}
 800ab1a:	bf00      	nop
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	24000564 	.word	0x24000564

0800ab28 <debugRxCallback>:
uint8_t commandReceivedFlag = 0;

uint16_t commandReceivedHead = 0;

void debugRxCallback(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	af00      	add	r7, sp, #0
	if(data == 0x0D)
 800ab2c:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <debugRxCallback+0x24>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b0d      	cmp	r3, #13
 800ab32:	d102      	bne.n	800ab3a <debugRxCallback+0x12>
	{
		commandReceivedFlag = 1;
 800ab34:	4b06      	ldr	r3, [pc, #24]	@ (800ab50 <debugRxCallback+0x28>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	701a      	strb	r2, [r3, #0]
	}
	circularBufferEnqueue(rxBuffer, (void * )&data);
 800ab3a:	4b06      	ldr	r3, [pc, #24]	@ (800ab54 <debugRxCallback+0x2c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4903      	ldr	r1, [pc, #12]	@ (800ab4c <debugRxCallback+0x24>)
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 f888 	bl	800ac56 <circularBufferEnqueue>
//	receptionItrOn(&data);

}
 800ab46:	bf00      	nop
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	24000744 	.word	0x24000744
 800ab50:	2400074c 	.word	0x2400074c
 800ab54:	24000748 	.word	0x24000748

0800ab58 <debugUartInit>:
{

}

void debugUartInit(void)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
	void * rxCallbackFptr = &debugRxCallback;
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ab88 <debugUartInit+0x30>)
 800ab60:	607b      	str	r3, [r7, #4]

	circularBufferInit(rxBuffer, (uint16_t)512, (uint16_t)sizeof(uint8_t));
 800ab62:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <debugUartInit+0x34>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 f839 	bl	800abe4 <circularBufferInit>

	uartInit(rxCallbackFptr);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff ffb8 	bl	800aae8 <uartInit>

	receptionItrOn(&data);
 800ab78:	4805      	ldr	r0, [pc, #20]	@ (800ab90 <debugUartInit+0x38>)
 800ab7a:	f7ff ffc5 	bl	800ab08 <receptionItrOn>
}
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	0800ab29 	.word	0x0800ab29
 800ab8c:	24000748 	.word	0x24000748
 800ab90:	24000744 	.word	0x24000744

0800ab94 <getCmdReceivedFlag>:
	}

}

uint8_t getCmdReceivedFlag(void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0
	return commandReceivedFlag;
 800ab98:	4b03      	ldr	r3, [pc, #12]	@ (800aba8 <getCmdReceivedFlag+0x14>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	2400074c 	.word	0x2400074c

0800abac <setCmdReceivedFlag>:

void setCmdReceivedFlag(uint8_t value)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
	commandReceivedFlag = value;
 800abb6:	4a04      	ldr	r2, [pc, #16]	@ (800abc8 <setCmdReceivedFlag+0x1c>)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	7013      	strb	r3, [r2, #0]
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	2400074c 	.word	0x2400074c

0800abcc <getRxBuffer>:

sCircularBuffer_t * getRxBuffer(void)
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
	return rxBuffer;
 800abd0:	4b03      	ldr	r3, [pc, #12]	@ (800abe0 <getRxBuffer+0x14>)
 800abd2:	681b      	ldr	r3, [r3, #0]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	24000748 	.word	0x24000748

0800abe4 <circularBufferInit>:
#include <stdlib.h>
#include <string.h>


eCbuffStatus_t circularBufferInit(sCircularBuffer_t * cBuff, uint16_t maxCapacity, uint16_t dataSize)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	807b      	strh	r3, [r7, #2]
 800abf0:	4613      	mov	r3, r2
 800abf2:	803b      	strh	r3, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_CREATE_FAILED;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]

    cBuff->head = 0;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	801a      	strh	r2, [r3, #0]
    cBuff->tail = 0;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	805a      	strh	r2, [r3, #2]
    cBuff->dataSize = dataSize;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	883a      	ldrh	r2, [r7, #0]
 800ac08:	80da      	strh	r2, [r3, #6]
    cBuff->maxCapacity = maxCapacity;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	887a      	ldrh	r2, [r7, #2]
 800ac0e:	809a      	strh	r2, [r3, #4]
    cBuff->array = malloc(maxCapacity * dataSize);
 800ac10:	887b      	ldrh	r3, [r7, #2]
 800ac12:	883a      	ldrh	r2, [r7, #0]
 800ac14:	fb02 f303 	mul.w	r3, r2, r3
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 f8ad 	bl	800ad78 <malloc>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	461a      	mov	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60da      	str	r2, [r3, #12]
    cBuff->length = 0;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	811a      	strh	r2, [r3, #8]

    if(cBuff->array != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <circularBufferInit+0x68>
    {
        memset(cBuff->array, 0, maxCapacity * dataSize);  // Corrected memset size
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68d8      	ldr	r0, [r3, #12]
 800ac38:	887b      	ldrh	r3, [r7, #2]
 800ac3a:	883a      	ldrh	r2, [r7, #0]
 800ac3c:	fb02 f303 	mul.w	r3, r2, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	2100      	movs	r1, #0
 800ac44:	f000 fb0b 	bl	800b25e <memset>
        status = E_CBUFF_CREATE_SUCCESS;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <circularBufferEnqueue>:

eCbuffStatus_t circularBufferEnqueue(sCircularBuffer_t * cBuff, void * value)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_ENQUEUE_FAILED;
 800ac60:	2303      	movs	r3, #3
 800ac62:	73fb      	strb	r3, [r7, #15]

    uint16_t next = cBuff->head + 1;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	81bb      	strh	r3, [r7, #12]

    if (next >= cBuff->maxCapacity)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	889b      	ldrh	r3, [r3, #4]
 800ac70:	89ba      	ldrh	r2, [r7, #12]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d301      	bcc.n	800ac7a <circularBufferEnqueue+0x24>
    {
        next = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	81bb      	strh	r3, [r7, #12]
    }

    // If next is equal to tail, buffer is full, so do not enqueue
    if (next != cBuff->tail)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	89ba      	ldrh	r2, [r7, #12]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d02b      	beq.n	800acdc <circularBufferEnqueue+0x86>
    {
        void *currentAddress = memcpy((char*)cBuff->array + (cBuff->head * cBuff->dataSize), value, cBuff->dataSize);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	8812      	ldrh	r2, [r2, #0]
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	88d2      	ldrh	r2, [r2, #6]
 800ac92:	fb01 f202 	mul.w	r2, r1, r2
 800ac96:	1898      	adds	r0, r3, r2
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	88db      	ldrh	r3, [r3, #6]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	f000 fbc5 	bl	800b42e <memcpy>
 800aca4:	60b8      	str	r0, [r7, #8]

        if (currentAddress != NULL)
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d017      	beq.n	800acdc <circularBufferEnqueue+0x86>
        {
            cBuff->head = next;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	89ba      	ldrh	r2, [r7, #12]
 800acb0:	801a      	strh	r2, [r3, #0]
            status = E_CBUFF_ENQUEUE_OK;
 800acb2:	2302      	movs	r3, #2
 800acb4:	73fb      	strb	r3, [r7, #15]

            cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	889b      	ldrh	r3, [r3, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	8852      	ldrh	r2, [r2, #2]
 800acc6:	1a9b      	subs	r3, r3, r2
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	8892      	ldrh	r2, [r2, #4]
 800accc:	fb93 f1f2 	sdiv	r1, r3, r2
 800acd0:	fb01 f202 	mul.w	r2, r1, r2
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	811a      	strh	r2, [r3, #8]
        }
    }

    return status;
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <circularBufferDequeue>:

eCbuffStatus_t circularBufferDequeue(sCircularBuffer_t * cBuff, void * value)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
    eCbuffStatus_t status = E_CBUFF_DEQUEUE_FAILED;
 800acf0:	2305      	movs	r3, #5
 800acf2:	73fb      	strb	r3, [r7, #15]

    // if head and tail are equal then it means no data has been dequeued and the buffer is full
    if (cBuff->tail != cBuff->head)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	885a      	ldrh	r2, [r3, #2]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d032      	beq.n	800ad66 <circularBufferDequeue+0x80>
    {
        uint16_t next = cBuff->tail + 1;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	885b      	ldrh	r3, [r3, #2]
 800ad04:	3301      	adds	r3, #1
 800ad06:	81bb      	strh	r3, [r7, #12]

        if (next >= cBuff->maxCapacity)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	889b      	ldrh	r3, [r3, #4]
 800ad0c:	89ba      	ldrh	r2, [r7, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d301      	bcc.n	800ad16 <circularBufferDequeue+0x30>
        {
            next = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	81bb      	strh	r3, [r7, #12]
        }

        memcpy(value, (char*)cBuff->array + (cBuff->tail * cBuff->dataSize), cBuff->dataSize);  // Copy dequeued element
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	8852      	ldrh	r2, [r2, #2]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	88d2      	ldrh	r2, [r2, #6]
 800ad24:	fb01 f202 	mul.w	r2, r1, r2
 800ad28:	1899      	adds	r1, r3, r2
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	88db      	ldrh	r3, [r3, #6]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6838      	ldr	r0, [r7, #0]
 800ad32:	f000 fb7c 	bl	800b42e <memcpy>

        cBuff->tail = next;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	89ba      	ldrh	r2, [r7, #12]
 800ad3a:	805a      	strh	r2, [r3, #2]

        cBuff->length = (cBuff->head + cBuff->maxCapacity - cBuff->tail) % cBuff->maxCapacity;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	889b      	ldrh	r3, [r3, #4]
 800ad46:	4413      	add	r3, r2
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	8852      	ldrh	r2, [r2, #2]
 800ad4c:	1a9b      	subs	r3, r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	8892      	ldrh	r2, [r2, #4]
 800ad52:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad56:	fb01 f202 	mul.w	r2, r1, r2
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	811a      	strh	r2, [r3, #8]

        status = E_CBUFF_DEQUEUE_OK;
 800ad62:	2304      	movs	r3, #4
 800ad64:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <atoi>:
 800ad70:	220a      	movs	r2, #10
 800ad72:	2100      	movs	r1, #0
 800ad74:	f000 b930 	b.w	800afd8 <strtol>

0800ad78 <malloc>:
 800ad78:	4b02      	ldr	r3, [pc, #8]	@ (800ad84 <malloc+0xc>)
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	6818      	ldr	r0, [r3, #0]
 800ad7e:	f000 b825 	b.w	800adcc <_malloc_r>
 800ad82:	bf00      	nop
 800ad84:	240000a8 	.word	0x240000a8

0800ad88 <sbrk_aligned>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	4e0f      	ldr	r6, [pc, #60]	@ (800adc8 <sbrk_aligned+0x40>)
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	6831      	ldr	r1, [r6, #0]
 800ad90:	4605      	mov	r5, r0
 800ad92:	b911      	cbnz	r1, 800ad9a <sbrk_aligned+0x12>
 800ad94:	f000 fafc 	bl	800b390 <_sbrk_r>
 800ad98:	6030      	str	r0, [r6, #0]
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f000 faf7 	bl	800b390 <_sbrk_r>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d103      	bne.n	800adae <sbrk_aligned+0x26>
 800ada6:	f04f 34ff 	mov.w	r4, #4294967295
 800adaa:	4620      	mov	r0, r4
 800adac:	bd70      	pop	{r4, r5, r6, pc}
 800adae:	1cc4      	adds	r4, r0, #3
 800adb0:	f024 0403 	bic.w	r4, r4, #3
 800adb4:	42a0      	cmp	r0, r4
 800adb6:	d0f8      	beq.n	800adaa <sbrk_aligned+0x22>
 800adb8:	1a21      	subs	r1, r4, r0
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 fae8 	bl	800b390 <_sbrk_r>
 800adc0:	3001      	adds	r0, #1
 800adc2:	d1f2      	bne.n	800adaa <sbrk_aligned+0x22>
 800adc4:	e7ef      	b.n	800ada6 <sbrk_aligned+0x1e>
 800adc6:	bf00      	nop
 800adc8:	24000750 	.word	0x24000750

0800adcc <_malloc_r>:
 800adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add0:	1ccd      	adds	r5, r1, #3
 800add2:	f025 0503 	bic.w	r5, r5, #3
 800add6:	3508      	adds	r5, #8
 800add8:	2d0c      	cmp	r5, #12
 800adda:	bf38      	it	cc
 800addc:	250c      	movcc	r5, #12
 800adde:	2d00      	cmp	r5, #0
 800ade0:	4606      	mov	r6, r0
 800ade2:	db01      	blt.n	800ade8 <_malloc_r+0x1c>
 800ade4:	42a9      	cmp	r1, r5
 800ade6:	d904      	bls.n	800adf2 <_malloc_r+0x26>
 800ade8:	230c      	movs	r3, #12
 800adea:	6033      	str	r3, [r6, #0]
 800adec:	2000      	movs	r0, #0
 800adee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aec8 <_malloc_r+0xfc>
 800adf6:	f000 f869 	bl	800aecc <__malloc_lock>
 800adfa:	f8d8 3000 	ldr.w	r3, [r8]
 800adfe:	461c      	mov	r4, r3
 800ae00:	bb44      	cbnz	r4, 800ae54 <_malloc_r+0x88>
 800ae02:	4629      	mov	r1, r5
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff ffbf 	bl	800ad88 <sbrk_aligned>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	d158      	bne.n	800aec2 <_malloc_r+0xf6>
 800ae10:	f8d8 4000 	ldr.w	r4, [r8]
 800ae14:	4627      	mov	r7, r4
 800ae16:	2f00      	cmp	r7, #0
 800ae18:	d143      	bne.n	800aea2 <_malloc_r+0xd6>
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	d04b      	beq.n	800aeb6 <_malloc_r+0xea>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	4639      	mov	r1, r7
 800ae22:	4630      	mov	r0, r6
 800ae24:	eb04 0903 	add.w	r9, r4, r3
 800ae28:	f000 fab2 	bl	800b390 <_sbrk_r>
 800ae2c:	4581      	cmp	r9, r0
 800ae2e:	d142      	bne.n	800aeb6 <_malloc_r+0xea>
 800ae30:	6821      	ldr	r1, [r4, #0]
 800ae32:	1a6d      	subs	r5, r5, r1
 800ae34:	4629      	mov	r1, r5
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7ff ffa6 	bl	800ad88 <sbrk_aligned>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d03a      	beq.n	800aeb6 <_malloc_r+0xea>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	442b      	add	r3, r5
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	f8d8 3000 	ldr.w	r3, [r8]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	bb62      	cbnz	r2, 800aea8 <_malloc_r+0xdc>
 800ae4e:	f8c8 7000 	str.w	r7, [r8]
 800ae52:	e00f      	b.n	800ae74 <_malloc_r+0xa8>
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	1b52      	subs	r2, r2, r5
 800ae58:	d420      	bmi.n	800ae9c <_malloc_r+0xd0>
 800ae5a:	2a0b      	cmp	r2, #11
 800ae5c:	d917      	bls.n	800ae8e <_malloc_r+0xc2>
 800ae5e:	1961      	adds	r1, r4, r5
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	6025      	str	r5, [r4, #0]
 800ae64:	bf18      	it	ne
 800ae66:	6059      	strne	r1, [r3, #4]
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	bf08      	it	eq
 800ae6c:	f8c8 1000 	streq.w	r1, [r8]
 800ae70:	5162      	str	r2, [r4, r5]
 800ae72:	604b      	str	r3, [r1, #4]
 800ae74:	4630      	mov	r0, r6
 800ae76:	f000 f82f 	bl	800aed8 <__malloc_unlock>
 800ae7a:	f104 000b 	add.w	r0, r4, #11
 800ae7e:	1d23      	adds	r3, r4, #4
 800ae80:	f020 0007 	bic.w	r0, r0, #7
 800ae84:	1ac2      	subs	r2, r0, r3
 800ae86:	bf1c      	itt	ne
 800ae88:	1a1b      	subne	r3, r3, r0
 800ae8a:	50a3      	strne	r3, [r4, r2]
 800ae8c:	e7af      	b.n	800adee <_malloc_r+0x22>
 800ae8e:	6862      	ldr	r2, [r4, #4]
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	bf0c      	ite	eq
 800ae94:	f8c8 2000 	streq.w	r2, [r8]
 800ae98:	605a      	strne	r2, [r3, #4]
 800ae9a:	e7eb      	b.n	800ae74 <_malloc_r+0xa8>
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	6864      	ldr	r4, [r4, #4]
 800aea0:	e7ae      	b.n	800ae00 <_malloc_r+0x34>
 800aea2:	463c      	mov	r4, r7
 800aea4:	687f      	ldr	r7, [r7, #4]
 800aea6:	e7b6      	b.n	800ae16 <_malloc_r+0x4a>
 800aea8:	461a      	mov	r2, r3
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	d1fb      	bne.n	800aea8 <_malloc_r+0xdc>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	6053      	str	r3, [r2, #4]
 800aeb4:	e7de      	b.n	800ae74 <_malloc_r+0xa8>
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	6033      	str	r3, [r6, #0]
 800aeba:	4630      	mov	r0, r6
 800aebc:	f000 f80c 	bl	800aed8 <__malloc_unlock>
 800aec0:	e794      	b.n	800adec <_malloc_r+0x20>
 800aec2:	6005      	str	r5, [r0, #0]
 800aec4:	e7d6      	b.n	800ae74 <_malloc_r+0xa8>
 800aec6:	bf00      	nop
 800aec8:	24000754 	.word	0x24000754

0800aecc <__malloc_lock>:
 800aecc:	4801      	ldr	r0, [pc, #4]	@ (800aed4 <__malloc_lock+0x8>)
 800aece:	f000 baac 	b.w	800b42a <__retarget_lock_acquire_recursive>
 800aed2:	bf00      	nop
 800aed4:	24000898 	.word	0x24000898

0800aed8 <__malloc_unlock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	@ (800aee0 <__malloc_unlock+0x8>)
 800aeda:	f000 baa7 	b.w	800b42c <__retarget_lock_release_recursive>
 800aede:	bf00      	nop
 800aee0:	24000898 	.word	0x24000898

0800aee4 <_strtol_l.constprop.0>:
 800aee4:	2b24      	cmp	r3, #36	@ 0x24
 800aee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeea:	4686      	mov	lr, r0
 800aeec:	4690      	mov	r8, r2
 800aeee:	d801      	bhi.n	800aef4 <_strtol_l.constprop.0+0x10>
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d106      	bne.n	800af02 <_strtol_l.constprop.0+0x1e>
 800aef4:	f000 fa6e 	bl	800b3d4 <__errno>
 800aef8:	2316      	movs	r3, #22
 800aefa:	6003      	str	r3, [r0, #0]
 800aefc:	2000      	movs	r0, #0
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	4834      	ldr	r0, [pc, #208]	@ (800afd4 <_strtol_l.constprop.0+0xf0>)
 800af04:	460d      	mov	r5, r1
 800af06:	462a      	mov	r2, r5
 800af08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af0c:	5d06      	ldrb	r6, [r0, r4]
 800af0e:	f016 0608 	ands.w	r6, r6, #8
 800af12:	d1f8      	bne.n	800af06 <_strtol_l.constprop.0+0x22>
 800af14:	2c2d      	cmp	r4, #45	@ 0x2d
 800af16:	d12d      	bne.n	800af74 <_strtol_l.constprop.0+0x90>
 800af18:	782c      	ldrb	r4, [r5, #0]
 800af1a:	2601      	movs	r6, #1
 800af1c:	1c95      	adds	r5, r2, #2
 800af1e:	f033 0210 	bics.w	r2, r3, #16
 800af22:	d109      	bne.n	800af38 <_strtol_l.constprop.0+0x54>
 800af24:	2c30      	cmp	r4, #48	@ 0x30
 800af26:	d12a      	bne.n	800af7e <_strtol_l.constprop.0+0x9a>
 800af28:	782a      	ldrb	r2, [r5, #0]
 800af2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af2e:	2a58      	cmp	r2, #88	@ 0x58
 800af30:	d125      	bne.n	800af7e <_strtol_l.constprop.0+0x9a>
 800af32:	786c      	ldrb	r4, [r5, #1]
 800af34:	2310      	movs	r3, #16
 800af36:	3502      	adds	r5, #2
 800af38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af40:	2200      	movs	r2, #0
 800af42:	fbbc f9f3 	udiv	r9, ip, r3
 800af46:	4610      	mov	r0, r2
 800af48:	fb03 ca19 	mls	sl, r3, r9, ip
 800af4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af50:	2f09      	cmp	r7, #9
 800af52:	d81b      	bhi.n	800af8c <_strtol_l.constprop.0+0xa8>
 800af54:	463c      	mov	r4, r7
 800af56:	42a3      	cmp	r3, r4
 800af58:	dd27      	ble.n	800afaa <_strtol_l.constprop.0+0xc6>
 800af5a:	1c57      	adds	r7, r2, #1
 800af5c:	d007      	beq.n	800af6e <_strtol_l.constprop.0+0x8a>
 800af5e:	4581      	cmp	r9, r0
 800af60:	d320      	bcc.n	800afa4 <_strtol_l.constprop.0+0xc0>
 800af62:	d101      	bne.n	800af68 <_strtol_l.constprop.0+0x84>
 800af64:	45a2      	cmp	sl, r4
 800af66:	db1d      	blt.n	800afa4 <_strtol_l.constprop.0+0xc0>
 800af68:	fb00 4003 	mla	r0, r0, r3, r4
 800af6c:	2201      	movs	r2, #1
 800af6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af72:	e7eb      	b.n	800af4c <_strtol_l.constprop.0+0x68>
 800af74:	2c2b      	cmp	r4, #43	@ 0x2b
 800af76:	bf04      	itt	eq
 800af78:	782c      	ldrbeq	r4, [r5, #0]
 800af7a:	1c95      	addeq	r5, r2, #2
 800af7c:	e7cf      	b.n	800af1e <_strtol_l.constprop.0+0x3a>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1da      	bne.n	800af38 <_strtol_l.constprop.0+0x54>
 800af82:	2c30      	cmp	r4, #48	@ 0x30
 800af84:	bf0c      	ite	eq
 800af86:	2308      	moveq	r3, #8
 800af88:	230a      	movne	r3, #10
 800af8a:	e7d5      	b.n	800af38 <_strtol_l.constprop.0+0x54>
 800af8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af90:	2f19      	cmp	r7, #25
 800af92:	d801      	bhi.n	800af98 <_strtol_l.constprop.0+0xb4>
 800af94:	3c37      	subs	r4, #55	@ 0x37
 800af96:	e7de      	b.n	800af56 <_strtol_l.constprop.0+0x72>
 800af98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af9c:	2f19      	cmp	r7, #25
 800af9e:	d804      	bhi.n	800afaa <_strtol_l.constprop.0+0xc6>
 800afa0:	3c57      	subs	r4, #87	@ 0x57
 800afa2:	e7d8      	b.n	800af56 <_strtol_l.constprop.0+0x72>
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295
 800afa8:	e7e1      	b.n	800af6e <_strtol_l.constprop.0+0x8a>
 800afaa:	1c53      	adds	r3, r2, #1
 800afac:	d108      	bne.n	800afc0 <_strtol_l.constprop.0+0xdc>
 800afae:	2322      	movs	r3, #34	@ 0x22
 800afb0:	f8ce 3000 	str.w	r3, [lr]
 800afb4:	4660      	mov	r0, ip
 800afb6:	f1b8 0f00 	cmp.w	r8, #0
 800afba:	d0a0      	beq.n	800aefe <_strtol_l.constprop.0+0x1a>
 800afbc:	1e69      	subs	r1, r5, #1
 800afbe:	e006      	b.n	800afce <_strtol_l.constprop.0+0xea>
 800afc0:	b106      	cbz	r6, 800afc4 <_strtol_l.constprop.0+0xe0>
 800afc2:	4240      	negs	r0, r0
 800afc4:	f1b8 0f00 	cmp.w	r8, #0
 800afc8:	d099      	beq.n	800aefe <_strtol_l.constprop.0+0x1a>
 800afca:	2a00      	cmp	r2, #0
 800afcc:	d1f6      	bne.n	800afbc <_strtol_l.constprop.0+0xd8>
 800afce:	f8c8 1000 	str.w	r1, [r8]
 800afd2:	e794      	b.n	800aefe <_strtol_l.constprop.0+0x1a>
 800afd4:	0800c44d 	.word	0x0800c44d

0800afd8 <strtol>:
 800afd8:	4613      	mov	r3, r2
 800afda:	460a      	mov	r2, r1
 800afdc:	4601      	mov	r1, r0
 800afde:	4802      	ldr	r0, [pc, #8]	@ (800afe8 <strtol+0x10>)
 800afe0:	6800      	ldr	r0, [r0, #0]
 800afe2:	f7ff bf7f 	b.w	800aee4 <_strtol_l.constprop.0>
 800afe6:	bf00      	nop
 800afe8:	240000a8 	.word	0x240000a8

0800afec <std>:
 800afec:	2300      	movs	r3, #0
 800afee:	b510      	push	{r4, lr}
 800aff0:	4604      	mov	r4, r0
 800aff2:	e9c0 3300 	strd	r3, r3, [r0]
 800aff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800affa:	6083      	str	r3, [r0, #8]
 800affc:	8181      	strh	r1, [r0, #12]
 800affe:	6643      	str	r3, [r0, #100]	@ 0x64
 800b000:	81c2      	strh	r2, [r0, #14]
 800b002:	6183      	str	r3, [r0, #24]
 800b004:	4619      	mov	r1, r3
 800b006:	2208      	movs	r2, #8
 800b008:	305c      	adds	r0, #92	@ 0x5c
 800b00a:	f000 f928 	bl	800b25e <memset>
 800b00e:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <std+0x58>)
 800b010:	6263      	str	r3, [r4, #36]	@ 0x24
 800b012:	4b0d      	ldr	r3, [pc, #52]	@ (800b048 <std+0x5c>)
 800b014:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b016:	4b0d      	ldr	r3, [pc, #52]	@ (800b04c <std+0x60>)
 800b018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b01a:	4b0d      	ldr	r3, [pc, #52]	@ (800b050 <std+0x64>)
 800b01c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b01e:	4b0d      	ldr	r3, [pc, #52]	@ (800b054 <std+0x68>)
 800b020:	6224      	str	r4, [r4, #32]
 800b022:	429c      	cmp	r4, r3
 800b024:	d006      	beq.n	800b034 <std+0x48>
 800b026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b02a:	4294      	cmp	r4, r2
 800b02c:	d002      	beq.n	800b034 <std+0x48>
 800b02e:	33d0      	adds	r3, #208	@ 0xd0
 800b030:	429c      	cmp	r4, r3
 800b032:	d105      	bne.n	800b040 <std+0x54>
 800b034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03c:	f000 b9f4 	b.w	800b428 <__retarget_lock_init_recursive>
 800b040:	bd10      	pop	{r4, pc}
 800b042:	bf00      	nop
 800b044:	0800b1d9 	.word	0x0800b1d9
 800b048:	0800b1fb 	.word	0x0800b1fb
 800b04c:	0800b233 	.word	0x0800b233
 800b050:	0800b257 	.word	0x0800b257
 800b054:	24000758 	.word	0x24000758

0800b058 <stdio_exit_handler>:
 800b058:	4a02      	ldr	r2, [pc, #8]	@ (800b064 <stdio_exit_handler+0xc>)
 800b05a:	4903      	ldr	r1, [pc, #12]	@ (800b068 <stdio_exit_handler+0x10>)
 800b05c:	4803      	ldr	r0, [pc, #12]	@ (800b06c <stdio_exit_handler+0x14>)
 800b05e:	f000 b869 	b.w	800b134 <_fwalk_sglue>
 800b062:	bf00      	nop
 800b064:	2400009c 	.word	0x2400009c
 800b068:	0800bbf1 	.word	0x0800bbf1
 800b06c:	240000ac 	.word	0x240000ac

0800b070 <cleanup_stdio>:
 800b070:	6841      	ldr	r1, [r0, #4]
 800b072:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a4 <cleanup_stdio+0x34>)
 800b074:	4299      	cmp	r1, r3
 800b076:	b510      	push	{r4, lr}
 800b078:	4604      	mov	r4, r0
 800b07a:	d001      	beq.n	800b080 <cleanup_stdio+0x10>
 800b07c:	f000 fdb8 	bl	800bbf0 <_fflush_r>
 800b080:	68a1      	ldr	r1, [r4, #8]
 800b082:	4b09      	ldr	r3, [pc, #36]	@ (800b0a8 <cleanup_stdio+0x38>)
 800b084:	4299      	cmp	r1, r3
 800b086:	d002      	beq.n	800b08e <cleanup_stdio+0x1e>
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 fdb1 	bl	800bbf0 <_fflush_r>
 800b08e:	68e1      	ldr	r1, [r4, #12]
 800b090:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <cleanup_stdio+0x3c>)
 800b092:	4299      	cmp	r1, r3
 800b094:	d004      	beq.n	800b0a0 <cleanup_stdio+0x30>
 800b096:	4620      	mov	r0, r4
 800b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b09c:	f000 bda8 	b.w	800bbf0 <_fflush_r>
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	bf00      	nop
 800b0a4:	24000758 	.word	0x24000758
 800b0a8:	240007c0 	.word	0x240007c0
 800b0ac:	24000828 	.word	0x24000828

0800b0b0 <global_stdio_init.part.0>:
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e0 <global_stdio_init.part.0+0x30>)
 800b0b4:	4c0b      	ldr	r4, [pc, #44]	@ (800b0e4 <global_stdio_init.part.0+0x34>)
 800b0b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b0e8 <global_stdio_init.part.0+0x38>)
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2104      	movs	r1, #4
 800b0c0:	f7ff ff94 	bl	800afec <std>
 800b0c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	2109      	movs	r1, #9
 800b0cc:	f7ff ff8e 	bl	800afec <std>
 800b0d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0da:	2112      	movs	r1, #18
 800b0dc:	f7ff bf86 	b.w	800afec <std>
 800b0e0:	24000890 	.word	0x24000890
 800b0e4:	24000758 	.word	0x24000758
 800b0e8:	0800b059 	.word	0x0800b059

0800b0ec <__sfp_lock_acquire>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	@ (800b0f4 <__sfp_lock_acquire+0x8>)
 800b0ee:	f000 b99c 	b.w	800b42a <__retarget_lock_acquire_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	24000899 	.word	0x24000899

0800b0f8 <__sfp_lock_release>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	@ (800b100 <__sfp_lock_release+0x8>)
 800b0fa:	f000 b997 	b.w	800b42c <__retarget_lock_release_recursive>
 800b0fe:	bf00      	nop
 800b100:	24000899 	.word	0x24000899

0800b104 <__sinit>:
 800b104:	b510      	push	{r4, lr}
 800b106:	4604      	mov	r4, r0
 800b108:	f7ff fff0 	bl	800b0ec <__sfp_lock_acquire>
 800b10c:	6a23      	ldr	r3, [r4, #32]
 800b10e:	b11b      	cbz	r3, 800b118 <__sinit+0x14>
 800b110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b114:	f7ff bff0 	b.w	800b0f8 <__sfp_lock_release>
 800b118:	4b04      	ldr	r3, [pc, #16]	@ (800b12c <__sinit+0x28>)
 800b11a:	6223      	str	r3, [r4, #32]
 800b11c:	4b04      	ldr	r3, [pc, #16]	@ (800b130 <__sinit+0x2c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1f5      	bne.n	800b110 <__sinit+0xc>
 800b124:	f7ff ffc4 	bl	800b0b0 <global_stdio_init.part.0>
 800b128:	e7f2      	b.n	800b110 <__sinit+0xc>
 800b12a:	bf00      	nop
 800b12c:	0800b071 	.word	0x0800b071
 800b130:	24000890 	.word	0x24000890

0800b134 <_fwalk_sglue>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	4607      	mov	r7, r0
 800b13a:	4688      	mov	r8, r1
 800b13c:	4614      	mov	r4, r2
 800b13e:	2600      	movs	r6, #0
 800b140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b144:	f1b9 0901 	subs.w	r9, r9, #1
 800b148:	d505      	bpl.n	800b156 <_fwalk_sglue+0x22>
 800b14a:	6824      	ldr	r4, [r4, #0]
 800b14c:	2c00      	cmp	r4, #0
 800b14e:	d1f7      	bne.n	800b140 <_fwalk_sglue+0xc>
 800b150:	4630      	mov	r0, r6
 800b152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d907      	bls.n	800b16c <_fwalk_sglue+0x38>
 800b15c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b160:	3301      	adds	r3, #1
 800b162:	d003      	beq.n	800b16c <_fwalk_sglue+0x38>
 800b164:	4629      	mov	r1, r5
 800b166:	4638      	mov	r0, r7
 800b168:	47c0      	blx	r8
 800b16a:	4306      	orrs	r6, r0
 800b16c:	3568      	adds	r5, #104	@ 0x68
 800b16e:	e7e9      	b.n	800b144 <_fwalk_sglue+0x10>

0800b170 <sniprintf>:
 800b170:	b40c      	push	{r2, r3}
 800b172:	b530      	push	{r4, r5, lr}
 800b174:	4b17      	ldr	r3, [pc, #92]	@ (800b1d4 <sniprintf+0x64>)
 800b176:	1e0c      	subs	r4, r1, #0
 800b178:	681d      	ldr	r5, [r3, #0]
 800b17a:	b09d      	sub	sp, #116	@ 0x74
 800b17c:	da08      	bge.n	800b190 <sniprintf+0x20>
 800b17e:	238b      	movs	r3, #139	@ 0x8b
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	f04f 30ff 	mov.w	r0, #4294967295
 800b186:	b01d      	add	sp, #116	@ 0x74
 800b188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b18c:	b002      	add	sp, #8
 800b18e:	4770      	bx	lr
 800b190:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b194:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b198:	bf14      	ite	ne
 800b19a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b19e:	4623      	moveq	r3, r4
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	9307      	str	r3, [sp, #28]
 800b1a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	9006      	str	r0, [sp, #24]
 800b1ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b1b2:	ab21      	add	r3, sp, #132	@ 0x84
 800b1b4:	a902      	add	r1, sp, #8
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	f000 fa0b 	bl	800b5d4 <_svfiprintf_r>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	bfbc      	itt	lt
 800b1c2:	238b      	movlt	r3, #139	@ 0x8b
 800b1c4:	602b      	strlt	r3, [r5, #0]
 800b1c6:	2c00      	cmp	r4, #0
 800b1c8:	d0dd      	beq.n	800b186 <sniprintf+0x16>
 800b1ca:	9b02      	ldr	r3, [sp, #8]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	e7d9      	b.n	800b186 <sniprintf+0x16>
 800b1d2:	bf00      	nop
 800b1d4:	240000a8 	.word	0x240000a8

0800b1d8 <__sread>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	f000 f8c4 	bl	800b36c <_read_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	bfab      	itete	ge
 800b1e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800b1ec:	181b      	addge	r3, r3, r0
 800b1ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1f2:	bfac      	ite	ge
 800b1f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1f6:	81a3      	strhlt	r3, [r4, #12]
 800b1f8:	bd10      	pop	{r4, pc}

0800b1fa <__swrite>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	461f      	mov	r7, r3
 800b200:	898b      	ldrh	r3, [r1, #12]
 800b202:	05db      	lsls	r3, r3, #23
 800b204:	4605      	mov	r5, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4616      	mov	r6, r2
 800b20a:	d505      	bpl.n	800b218 <__swrite+0x1e>
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2302      	movs	r3, #2
 800b212:	2200      	movs	r2, #0
 800b214:	f000 f898 	bl	800b348 <_lseek_r>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b21e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	4632      	mov	r2, r6
 800b226:	463b      	mov	r3, r7
 800b228:	4628      	mov	r0, r5
 800b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	f000 b8bf 	b.w	800b3b0 <_write_r>

0800b232 <__sseek>:
 800b232:	b510      	push	{r4, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23a:	f000 f885 	bl	800b348 <_lseek_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	bf15      	itete	ne
 800b244:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b24a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b24e:	81a3      	strheq	r3, [r4, #12]
 800b250:	bf18      	it	ne
 800b252:	81a3      	strhne	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__sclose>:
 800b256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25a:	f000 b865 	b.w	800b328 <_close_r>

0800b25e <memset>:
 800b25e:	4402      	add	r2, r0
 800b260:	4603      	mov	r3, r0
 800b262:	4293      	cmp	r3, r2
 800b264:	d100      	bne.n	800b268 <memset+0xa>
 800b266:	4770      	bx	lr
 800b268:	f803 1b01 	strb.w	r1, [r3], #1
 800b26c:	e7f9      	b.n	800b262 <memset+0x4>
	...

0800b270 <strtok>:
 800b270:	4b16      	ldr	r3, [pc, #88]	@ (800b2cc <strtok+0x5c>)
 800b272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	681f      	ldr	r7, [r3, #0]
 800b278:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b27a:	4605      	mov	r5, r0
 800b27c:	460e      	mov	r6, r1
 800b27e:	b9ec      	cbnz	r4, 800b2bc <strtok+0x4c>
 800b280:	2050      	movs	r0, #80	@ 0x50
 800b282:	f7ff fd79 	bl	800ad78 <malloc>
 800b286:	4602      	mov	r2, r0
 800b288:	6478      	str	r0, [r7, #68]	@ 0x44
 800b28a:	b920      	cbnz	r0, 800b296 <strtok+0x26>
 800b28c:	4b10      	ldr	r3, [pc, #64]	@ (800b2d0 <strtok+0x60>)
 800b28e:	4811      	ldr	r0, [pc, #68]	@ (800b2d4 <strtok+0x64>)
 800b290:	215b      	movs	r1, #91	@ 0x5b
 800b292:	f000 f8db 	bl	800b44c <__assert_func>
 800b296:	e9c0 4400 	strd	r4, r4, [r0]
 800b29a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b29e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b2a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b2a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b2aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b2ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b2b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b2b6:	6184      	str	r4, [r0, #24]
 800b2b8:	7704      	strb	r4, [r0, #28]
 800b2ba:	6244      	str	r4, [r0, #36]	@ 0x24
 800b2bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	f000 b806 	b.w	800b2d8 <__strtok_r>
 800b2cc:	240000a8 	.word	0x240000a8
 800b2d0:	0800c54d 	.word	0x0800c54d
 800b2d4:	0800c564 	.word	0x0800c564

0800b2d8 <__strtok_r>:
 800b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b908      	cbnz	r0, 800b2e2 <__strtok_r+0xa>
 800b2de:	6814      	ldr	r4, [r2, #0]
 800b2e0:	b144      	cbz	r4, 800b2f4 <__strtok_r+0x1c>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2e8:	460f      	mov	r7, r1
 800b2ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2ee:	b91e      	cbnz	r6, 800b2f8 <__strtok_r+0x20>
 800b2f0:	b965      	cbnz	r5, 800b30c <__strtok_r+0x34>
 800b2f2:	6015      	str	r5, [r2, #0]
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e005      	b.n	800b304 <__strtok_r+0x2c>
 800b2f8:	42b5      	cmp	r5, r6
 800b2fa:	d1f6      	bne.n	800b2ea <__strtok_r+0x12>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1f0      	bne.n	800b2e2 <__strtok_r+0xa>
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	7003      	strb	r3, [r0, #0]
 800b304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b306:	461c      	mov	r4, r3
 800b308:	e00c      	b.n	800b324 <__strtok_r+0x4c>
 800b30a:	b915      	cbnz	r5, 800b312 <__strtok_r+0x3a>
 800b30c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b310:	460e      	mov	r6, r1
 800b312:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b316:	42ab      	cmp	r3, r5
 800b318:	d1f7      	bne.n	800b30a <__strtok_r+0x32>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0f3      	beq.n	800b306 <__strtok_r+0x2e>
 800b31e:	2300      	movs	r3, #0
 800b320:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b324:	6014      	str	r4, [r2, #0]
 800b326:	e7ed      	b.n	800b304 <__strtok_r+0x2c>

0800b328 <_close_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	@ (800b344 <_close_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7f5 fffe 	bl	8001334 <_close>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_close_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_close_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	24000894 	.word	0x24000894

0800b348 <_lseek_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	@ (800b368 <_lseek_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7f6 f813 	bl	8001382 <_lseek>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_lseek_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_lseek_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	24000894 	.word	0x24000894

0800b36c <_read_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	@ (800b38c <_read_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7f5 ffa1 	bl	80012c2 <_read>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_read_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_read_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	24000894 	.word	0x24000894

0800b390 <_sbrk_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d06      	ldr	r5, [pc, #24]	@ (800b3ac <_sbrk_r+0x1c>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	602b      	str	r3, [r5, #0]
 800b39c:	f7f5 fffe 	bl	800139c <_sbrk>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d102      	bne.n	800b3aa <_sbrk_r+0x1a>
 800b3a4:	682b      	ldr	r3, [r5, #0]
 800b3a6:	b103      	cbz	r3, 800b3aa <_sbrk_r+0x1a>
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	bd38      	pop	{r3, r4, r5, pc}
 800b3ac:	24000894 	.word	0x24000894

0800b3b0 <_write_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4d07      	ldr	r5, [pc, #28]	@ (800b3d0 <_write_r+0x20>)
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	602a      	str	r2, [r5, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f7f5 ff9c 	bl	80012fc <_write>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_write_r+0x1e>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_write_r+0x1e>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	24000894 	.word	0x24000894

0800b3d4 <__errno>:
 800b3d4:	4b01      	ldr	r3, [pc, #4]	@ (800b3dc <__errno+0x8>)
 800b3d6:	6818      	ldr	r0, [r3, #0]
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	240000a8 	.word	0x240000a8

0800b3e0 <__libc_init_array>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b418 <__libc_init_array+0x38>)
 800b3e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b41c <__libc_init_array+0x3c>)
 800b3e6:	1b64      	subs	r4, r4, r5
 800b3e8:	10a4      	asrs	r4, r4, #2
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	d109      	bne.n	800b404 <__libc_init_array+0x24>
 800b3f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b420 <__libc_init_array+0x40>)
 800b3f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b424 <__libc_init_array+0x44>)
 800b3f4:	f000 ff2a 	bl	800c24c <_init>
 800b3f8:	1b64      	subs	r4, r4, r5
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	42a6      	cmp	r6, r4
 800b400:	d105      	bne.n	800b40e <__libc_init_array+0x2e>
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	f855 3b04 	ldr.w	r3, [r5], #4
 800b408:	4798      	blx	r3
 800b40a:	3601      	adds	r6, #1
 800b40c:	e7ee      	b.n	800b3ec <__libc_init_array+0xc>
 800b40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b412:	4798      	blx	r3
 800b414:	3601      	adds	r6, #1
 800b416:	e7f2      	b.n	800b3fe <__libc_init_array+0x1e>
 800b418:	0800c638 	.word	0x0800c638
 800b41c:	0800c638 	.word	0x0800c638
 800b420:	0800c638 	.word	0x0800c638
 800b424:	0800c63c 	.word	0x0800c63c

0800b428 <__retarget_lock_init_recursive>:
 800b428:	4770      	bx	lr

0800b42a <__retarget_lock_acquire_recursive>:
 800b42a:	4770      	bx	lr

0800b42c <__retarget_lock_release_recursive>:
 800b42c:	4770      	bx	lr

0800b42e <memcpy>:
 800b42e:	440a      	add	r2, r1
 800b430:	4291      	cmp	r1, r2
 800b432:	f100 33ff 	add.w	r3, r0, #4294967295
 800b436:	d100      	bne.n	800b43a <memcpy+0xc>
 800b438:	4770      	bx	lr
 800b43a:	b510      	push	{r4, lr}
 800b43c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b440:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b444:	4291      	cmp	r1, r2
 800b446:	d1f9      	bne.n	800b43c <memcpy+0xe>
 800b448:	bd10      	pop	{r4, pc}
	...

0800b44c <__assert_func>:
 800b44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b44e:	4614      	mov	r4, r2
 800b450:	461a      	mov	r2, r3
 800b452:	4b09      	ldr	r3, [pc, #36]	@ (800b478 <__assert_func+0x2c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4605      	mov	r5, r0
 800b458:	68d8      	ldr	r0, [r3, #12]
 800b45a:	b954      	cbnz	r4, 800b472 <__assert_func+0x26>
 800b45c:	4b07      	ldr	r3, [pc, #28]	@ (800b47c <__assert_func+0x30>)
 800b45e:	461c      	mov	r4, r3
 800b460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b464:	9100      	str	r1, [sp, #0]
 800b466:	462b      	mov	r3, r5
 800b468:	4905      	ldr	r1, [pc, #20]	@ (800b480 <__assert_func+0x34>)
 800b46a:	f000 fbe9 	bl	800bc40 <fiprintf>
 800b46e:	f000 fc13 	bl	800bc98 <abort>
 800b472:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <__assert_func+0x38>)
 800b474:	e7f4      	b.n	800b460 <__assert_func+0x14>
 800b476:	bf00      	nop
 800b478:	240000a8 	.word	0x240000a8
 800b47c:	0800c5f9 	.word	0x0800c5f9
 800b480:	0800c5cb 	.word	0x0800c5cb
 800b484:	0800c5be 	.word	0x0800c5be

0800b488 <_free_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4605      	mov	r5, r0
 800b48c:	2900      	cmp	r1, #0
 800b48e:	d041      	beq.n	800b514 <_free_r+0x8c>
 800b490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b494:	1f0c      	subs	r4, r1, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	bfb8      	it	lt
 800b49a:	18e4      	addlt	r4, r4, r3
 800b49c:	f7ff fd16 	bl	800aecc <__malloc_lock>
 800b4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b518 <_free_r+0x90>)
 800b4a2:	6813      	ldr	r3, [r2, #0]
 800b4a4:	b933      	cbnz	r3, 800b4b4 <_free_r+0x2c>
 800b4a6:	6063      	str	r3, [r4, #4]
 800b4a8:	6014      	str	r4, [r2, #0]
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b0:	f7ff bd12 	b.w	800aed8 <__malloc_unlock>
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	d908      	bls.n	800b4ca <_free_r+0x42>
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	1821      	adds	r1, r4, r0
 800b4bc:	428b      	cmp	r3, r1
 800b4be:	bf01      	itttt	eq
 800b4c0:	6819      	ldreq	r1, [r3, #0]
 800b4c2:	685b      	ldreq	r3, [r3, #4]
 800b4c4:	1809      	addeq	r1, r1, r0
 800b4c6:	6021      	streq	r1, [r4, #0]
 800b4c8:	e7ed      	b.n	800b4a6 <_free_r+0x1e>
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	b10b      	cbz	r3, 800b4d4 <_free_r+0x4c>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d9fa      	bls.n	800b4ca <_free_r+0x42>
 800b4d4:	6811      	ldr	r1, [r2, #0]
 800b4d6:	1850      	adds	r0, r2, r1
 800b4d8:	42a0      	cmp	r0, r4
 800b4da:	d10b      	bne.n	800b4f4 <_free_r+0x6c>
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	4401      	add	r1, r0
 800b4e0:	1850      	adds	r0, r2, r1
 800b4e2:	4283      	cmp	r3, r0
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	d1e0      	bne.n	800b4aa <_free_r+0x22>
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	6053      	str	r3, [r2, #4]
 800b4ee:	4408      	add	r0, r1
 800b4f0:	6010      	str	r0, [r2, #0]
 800b4f2:	e7da      	b.n	800b4aa <_free_r+0x22>
 800b4f4:	d902      	bls.n	800b4fc <_free_r+0x74>
 800b4f6:	230c      	movs	r3, #12
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	e7d6      	b.n	800b4aa <_free_r+0x22>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	1821      	adds	r1, r4, r0
 800b500:	428b      	cmp	r3, r1
 800b502:	bf04      	itt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	6063      	str	r3, [r4, #4]
 800b50a:	bf04      	itt	eq
 800b50c:	1809      	addeq	r1, r1, r0
 800b50e:	6021      	streq	r1, [r4, #0]
 800b510:	6054      	str	r4, [r2, #4]
 800b512:	e7ca      	b.n	800b4aa <_free_r+0x22>
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	bf00      	nop
 800b518:	24000754 	.word	0x24000754

0800b51c <__ssputs_r>:
 800b51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	688e      	ldr	r6, [r1, #8]
 800b522:	461f      	mov	r7, r3
 800b524:	42be      	cmp	r6, r7
 800b526:	680b      	ldr	r3, [r1, #0]
 800b528:	4682      	mov	sl, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4690      	mov	r8, r2
 800b52e:	d82d      	bhi.n	800b58c <__ssputs_r+0x70>
 800b530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b538:	d026      	beq.n	800b588 <__ssputs_r+0x6c>
 800b53a:	6965      	ldr	r5, [r4, #20]
 800b53c:	6909      	ldr	r1, [r1, #16]
 800b53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b542:	eba3 0901 	sub.w	r9, r3, r1
 800b546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b54a:	1c7b      	adds	r3, r7, #1
 800b54c:	444b      	add	r3, r9
 800b54e:	106d      	asrs	r5, r5, #1
 800b550:	429d      	cmp	r5, r3
 800b552:	bf38      	it	cc
 800b554:	461d      	movcc	r5, r3
 800b556:	0553      	lsls	r3, r2, #21
 800b558:	d527      	bpl.n	800b5aa <__ssputs_r+0x8e>
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7ff fc36 	bl	800adcc <_malloc_r>
 800b560:	4606      	mov	r6, r0
 800b562:	b360      	cbz	r0, 800b5be <__ssputs_r+0xa2>
 800b564:	6921      	ldr	r1, [r4, #16]
 800b566:	464a      	mov	r2, r9
 800b568:	f7ff ff61 	bl	800b42e <memcpy>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	6126      	str	r6, [r4, #16]
 800b57a:	6165      	str	r5, [r4, #20]
 800b57c:	444e      	add	r6, r9
 800b57e:	eba5 0509 	sub.w	r5, r5, r9
 800b582:	6026      	str	r6, [r4, #0]
 800b584:	60a5      	str	r5, [r4, #8]
 800b586:	463e      	mov	r6, r7
 800b588:	42be      	cmp	r6, r7
 800b58a:	d900      	bls.n	800b58e <__ssputs_r+0x72>
 800b58c:	463e      	mov	r6, r7
 800b58e:	6820      	ldr	r0, [r4, #0]
 800b590:	4632      	mov	r2, r6
 800b592:	4641      	mov	r1, r8
 800b594:	f000 fb66 	bl	800bc64 <memmove>
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	1b9b      	subs	r3, r3, r6
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	4433      	add	r3, r6
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5aa:	462a      	mov	r2, r5
 800b5ac:	f000 fb7b 	bl	800bca6 <_realloc_r>
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1e0      	bne.n	800b578 <__ssputs_r+0x5c>
 800b5b6:	6921      	ldr	r1, [r4, #16]
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	f7ff ff65 	bl	800b488 <_free_r>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	f8ca 3000 	str.w	r3, [sl]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	e7e9      	b.n	800b5a6 <__ssputs_r+0x8a>
	...

0800b5d4 <_svfiprintf_r>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	4698      	mov	r8, r3
 800b5da:	898b      	ldrh	r3, [r1, #12]
 800b5dc:	061b      	lsls	r3, r3, #24
 800b5de:	b09d      	sub	sp, #116	@ 0x74
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	d510      	bpl.n	800b60a <_svfiprintf_r+0x36>
 800b5e8:	690b      	ldr	r3, [r1, #16]
 800b5ea:	b973      	cbnz	r3, 800b60a <_svfiprintf_r+0x36>
 800b5ec:	2140      	movs	r1, #64	@ 0x40
 800b5ee:	f7ff fbed 	bl	800adcc <_malloc_r>
 800b5f2:	6028      	str	r0, [r5, #0]
 800b5f4:	6128      	str	r0, [r5, #16]
 800b5f6:	b930      	cbnz	r0, 800b606 <_svfiprintf_r+0x32>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	b01d      	add	sp, #116	@ 0x74
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	2340      	movs	r3, #64	@ 0x40
 800b608:	616b      	str	r3, [r5, #20]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60e:	2320      	movs	r3, #32
 800b610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b614:	f8cd 800c 	str.w	r8, [sp, #12]
 800b618:	2330      	movs	r3, #48	@ 0x30
 800b61a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7b8 <_svfiprintf_r+0x1e4>
 800b61e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b622:	f04f 0901 	mov.w	r9, #1
 800b626:	4623      	mov	r3, r4
 800b628:	469a      	mov	sl, r3
 800b62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62e:	b10a      	cbz	r2, 800b634 <_svfiprintf_r+0x60>
 800b630:	2a25      	cmp	r2, #37	@ 0x25
 800b632:	d1f9      	bne.n	800b628 <_svfiprintf_r+0x54>
 800b634:	ebba 0b04 	subs.w	fp, sl, r4
 800b638:	d00b      	beq.n	800b652 <_svfiprintf_r+0x7e>
 800b63a:	465b      	mov	r3, fp
 800b63c:	4622      	mov	r2, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff ff6b 	bl	800b51c <__ssputs_r>
 800b646:	3001      	adds	r0, #1
 800b648:	f000 80a7 	beq.w	800b79a <_svfiprintf_r+0x1c6>
 800b64c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b64e:	445a      	add	r2, fp
 800b650:	9209      	str	r2, [sp, #36]	@ 0x24
 800b652:	f89a 3000 	ldrb.w	r3, [sl]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 809f 	beq.w	800b79a <_svfiprintf_r+0x1c6>
 800b65c:	2300      	movs	r3, #0
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b666:	f10a 0a01 	add.w	sl, sl, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	9307      	str	r3, [sp, #28]
 800b66e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b672:	931a      	str	r3, [sp, #104]	@ 0x68
 800b674:	4654      	mov	r4, sl
 800b676:	2205      	movs	r2, #5
 800b678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67c:	484e      	ldr	r0, [pc, #312]	@ (800b7b8 <_svfiprintf_r+0x1e4>)
 800b67e:	f7f4 fe57 	bl	8000330 <memchr>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	b9d8      	cbnz	r0, 800b6be <_svfiprintf_r+0xea>
 800b686:	06d0      	lsls	r0, r2, #27
 800b688:	bf44      	itt	mi
 800b68a:	2320      	movmi	r3, #32
 800b68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b690:	0711      	lsls	r1, r2, #28
 800b692:	bf44      	itt	mi
 800b694:	232b      	movmi	r3, #43	@ 0x2b
 800b696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a0:	d015      	beq.n	800b6ce <_svfiprintf_r+0xfa>
 800b6a2:	9a07      	ldr	r2, [sp, #28]
 800b6a4:	4654      	mov	r4, sl
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b2:	3b30      	subs	r3, #48	@ 0x30
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d94b      	bls.n	800b750 <_svfiprintf_r+0x17c>
 800b6b8:	b1b0      	cbz	r0, 800b6e8 <_svfiprintf_r+0x114>
 800b6ba:	9207      	str	r2, [sp, #28]
 800b6bc:	e014      	b.n	800b6e8 <_svfiprintf_r+0x114>
 800b6be:	eba0 0308 	sub.w	r3, r0, r8
 800b6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	46a2      	mov	sl, r4
 800b6cc:	e7d2      	b.n	800b674 <_svfiprintf_r+0xa0>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	9103      	str	r1, [sp, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfbb      	ittet	lt
 800b6da:	425b      	neglt	r3, r3
 800b6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e0:	9307      	strge	r3, [sp, #28]
 800b6e2:	9307      	strlt	r3, [sp, #28]
 800b6e4:	bfb8      	it	lt
 800b6e6:	9204      	strlt	r2, [sp, #16]
 800b6e8:	7823      	ldrb	r3, [r4, #0]
 800b6ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6ec:	d10a      	bne.n	800b704 <_svfiprintf_r+0x130>
 800b6ee:	7863      	ldrb	r3, [r4, #1]
 800b6f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f2:	d132      	bne.n	800b75a <_svfiprintf_r+0x186>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b700:	3402      	adds	r4, #2
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7c8 <_svfiprintf_r+0x1f4>
 800b708:	7821      	ldrb	r1, [r4, #0]
 800b70a:	2203      	movs	r2, #3
 800b70c:	4650      	mov	r0, sl
 800b70e:	f7f4 fe0f 	bl	8000330 <memchr>
 800b712:	b138      	cbz	r0, 800b724 <_svfiprintf_r+0x150>
 800b714:	9b04      	ldr	r3, [sp, #16]
 800b716:	eba0 000a 	sub.w	r0, r0, sl
 800b71a:	2240      	movs	r2, #64	@ 0x40
 800b71c:	4082      	lsls	r2, r0
 800b71e:	4313      	orrs	r3, r2
 800b720:	3401      	adds	r4, #1
 800b722:	9304      	str	r3, [sp, #16]
 800b724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b728:	4824      	ldr	r0, [pc, #144]	@ (800b7bc <_svfiprintf_r+0x1e8>)
 800b72a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b72e:	2206      	movs	r2, #6
 800b730:	f7f4 fdfe 	bl	8000330 <memchr>
 800b734:	2800      	cmp	r0, #0
 800b736:	d036      	beq.n	800b7a6 <_svfiprintf_r+0x1d2>
 800b738:	4b21      	ldr	r3, [pc, #132]	@ (800b7c0 <_svfiprintf_r+0x1ec>)
 800b73a:	bb1b      	cbnz	r3, 800b784 <_svfiprintf_r+0x1b0>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	3307      	adds	r3, #7
 800b740:	f023 0307 	bic.w	r3, r3, #7
 800b744:	3308      	adds	r3, #8
 800b746:	9303      	str	r3, [sp, #12]
 800b748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b74a:	4433      	add	r3, r6
 800b74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74e:	e76a      	b.n	800b626 <_svfiprintf_r+0x52>
 800b750:	fb0c 3202 	mla	r2, ip, r2, r3
 800b754:	460c      	mov	r4, r1
 800b756:	2001      	movs	r0, #1
 800b758:	e7a8      	b.n	800b6ac <_svfiprintf_r+0xd8>
 800b75a:	2300      	movs	r3, #0
 800b75c:	3401      	adds	r4, #1
 800b75e:	9305      	str	r3, [sp, #20]
 800b760:	4619      	mov	r1, r3
 800b762:	f04f 0c0a 	mov.w	ip, #10
 800b766:	4620      	mov	r0, r4
 800b768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b76c:	3a30      	subs	r2, #48	@ 0x30
 800b76e:	2a09      	cmp	r2, #9
 800b770:	d903      	bls.n	800b77a <_svfiprintf_r+0x1a6>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0c6      	beq.n	800b704 <_svfiprintf_r+0x130>
 800b776:	9105      	str	r1, [sp, #20]
 800b778:	e7c4      	b.n	800b704 <_svfiprintf_r+0x130>
 800b77a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b77e:	4604      	mov	r4, r0
 800b780:	2301      	movs	r3, #1
 800b782:	e7f0      	b.n	800b766 <_svfiprintf_r+0x192>
 800b784:	ab03      	add	r3, sp, #12
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	462a      	mov	r2, r5
 800b78a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <_svfiprintf_r+0x1f0>)
 800b78c:	a904      	add	r1, sp, #16
 800b78e:	4638      	mov	r0, r7
 800b790:	f3af 8000 	nop.w
 800b794:	1c42      	adds	r2, r0, #1
 800b796:	4606      	mov	r6, r0
 800b798:	d1d6      	bne.n	800b748 <_svfiprintf_r+0x174>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	065b      	lsls	r3, r3, #25
 800b79e:	f53f af2d 	bmi.w	800b5fc <_svfiprintf_r+0x28>
 800b7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7a4:	e72c      	b.n	800b600 <_svfiprintf_r+0x2c>
 800b7a6:	ab03      	add	r3, sp, #12
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	4b05      	ldr	r3, [pc, #20]	@ (800b7c4 <_svfiprintf_r+0x1f0>)
 800b7ae:	a904      	add	r1, sp, #16
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f000 f879 	bl	800b8a8 <_printf_i>
 800b7b6:	e7ed      	b.n	800b794 <_svfiprintf_r+0x1c0>
 800b7b8:	0800c5fa 	.word	0x0800c5fa
 800b7bc:	0800c604 	.word	0x0800c604
 800b7c0:	00000000 	.word	0x00000000
 800b7c4:	0800b51d 	.word	0x0800b51d
 800b7c8:	0800c600 	.word	0x0800c600

0800b7cc <_printf_common>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	4698      	mov	r8, r3
 800b7d4:	688a      	ldr	r2, [r1, #8]
 800b7d6:	690b      	ldr	r3, [r1, #16]
 800b7d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	bfb8      	it	lt
 800b7e0:	4613      	movlt	r3, r2
 800b7e2:	6033      	str	r3, [r6, #0]
 800b7e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	b10a      	cbz	r2, 800b7f2 <_printf_common+0x26>
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	6033      	str	r3, [r6, #0]
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	0699      	lsls	r1, r3, #26
 800b7f6:	bf42      	ittt	mi
 800b7f8:	6833      	ldrmi	r3, [r6, #0]
 800b7fa:	3302      	addmi	r3, #2
 800b7fc:	6033      	strmi	r3, [r6, #0]
 800b7fe:	6825      	ldr	r5, [r4, #0]
 800b800:	f015 0506 	ands.w	r5, r5, #6
 800b804:	d106      	bne.n	800b814 <_printf_common+0x48>
 800b806:	f104 0a19 	add.w	sl, r4, #25
 800b80a:	68e3      	ldr	r3, [r4, #12]
 800b80c:	6832      	ldr	r2, [r6, #0]
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	42ab      	cmp	r3, r5
 800b812:	dc26      	bgt.n	800b862 <_printf_common+0x96>
 800b814:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	3b00      	subs	r3, #0
 800b81c:	bf18      	it	ne
 800b81e:	2301      	movne	r3, #1
 800b820:	0692      	lsls	r2, r2, #26
 800b822:	d42b      	bmi.n	800b87c <_printf_common+0xb0>
 800b824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b828:	4641      	mov	r1, r8
 800b82a:	4638      	mov	r0, r7
 800b82c:	47c8      	blx	r9
 800b82e:	3001      	adds	r0, #1
 800b830:	d01e      	beq.n	800b870 <_printf_common+0xa4>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	6922      	ldr	r2, [r4, #16]
 800b836:	f003 0306 	and.w	r3, r3, #6
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	bf02      	ittt	eq
 800b83e:	68e5      	ldreq	r5, [r4, #12]
 800b840:	6833      	ldreq	r3, [r6, #0]
 800b842:	1aed      	subeq	r5, r5, r3
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	bf0c      	ite	eq
 800b848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b84c:	2500      	movne	r5, #0
 800b84e:	4293      	cmp	r3, r2
 800b850:	bfc4      	itt	gt
 800b852:	1a9b      	subgt	r3, r3, r2
 800b854:	18ed      	addgt	r5, r5, r3
 800b856:	2600      	movs	r6, #0
 800b858:	341a      	adds	r4, #26
 800b85a:	42b5      	cmp	r5, r6
 800b85c:	d11a      	bne.n	800b894 <_printf_common+0xc8>
 800b85e:	2000      	movs	r0, #0
 800b860:	e008      	b.n	800b874 <_printf_common+0xa8>
 800b862:	2301      	movs	r3, #1
 800b864:	4652      	mov	r2, sl
 800b866:	4641      	mov	r1, r8
 800b868:	4638      	mov	r0, r7
 800b86a:	47c8      	blx	r9
 800b86c:	3001      	adds	r0, #1
 800b86e:	d103      	bne.n	800b878 <_printf_common+0xac>
 800b870:	f04f 30ff 	mov.w	r0, #4294967295
 800b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b878:	3501      	adds	r5, #1
 800b87a:	e7c6      	b.n	800b80a <_printf_common+0x3e>
 800b87c:	18e1      	adds	r1, r4, r3
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	2030      	movs	r0, #48	@ 0x30
 800b882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b886:	4422      	add	r2, r4
 800b888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b88c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b890:	3302      	adds	r3, #2
 800b892:	e7c7      	b.n	800b824 <_printf_common+0x58>
 800b894:	2301      	movs	r3, #1
 800b896:	4622      	mov	r2, r4
 800b898:	4641      	mov	r1, r8
 800b89a:	4638      	mov	r0, r7
 800b89c:	47c8      	blx	r9
 800b89e:	3001      	adds	r0, #1
 800b8a0:	d0e6      	beq.n	800b870 <_printf_common+0xa4>
 800b8a2:	3601      	adds	r6, #1
 800b8a4:	e7d9      	b.n	800b85a <_printf_common+0x8e>
	...

0800b8a8 <_printf_i>:
 800b8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	7e0f      	ldrb	r7, [r1, #24]
 800b8ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8b0:	2f78      	cmp	r7, #120	@ 0x78
 800b8b2:	4691      	mov	r9, r2
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	469a      	mov	sl, r3
 800b8ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8be:	d807      	bhi.n	800b8d0 <_printf_i+0x28>
 800b8c0:	2f62      	cmp	r7, #98	@ 0x62
 800b8c2:	d80a      	bhi.n	800b8da <_printf_i+0x32>
 800b8c4:	2f00      	cmp	r7, #0
 800b8c6:	f000 80d2 	beq.w	800ba6e <_printf_i+0x1c6>
 800b8ca:	2f58      	cmp	r7, #88	@ 0x58
 800b8cc:	f000 80b9 	beq.w	800ba42 <_printf_i+0x19a>
 800b8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8d8:	e03a      	b.n	800b950 <_printf_i+0xa8>
 800b8da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8de:	2b15      	cmp	r3, #21
 800b8e0:	d8f6      	bhi.n	800b8d0 <_printf_i+0x28>
 800b8e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b8e8 <_printf_i+0x40>)
 800b8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8e8:	0800b941 	.word	0x0800b941
 800b8ec:	0800b955 	.word	0x0800b955
 800b8f0:	0800b8d1 	.word	0x0800b8d1
 800b8f4:	0800b8d1 	.word	0x0800b8d1
 800b8f8:	0800b8d1 	.word	0x0800b8d1
 800b8fc:	0800b8d1 	.word	0x0800b8d1
 800b900:	0800b955 	.word	0x0800b955
 800b904:	0800b8d1 	.word	0x0800b8d1
 800b908:	0800b8d1 	.word	0x0800b8d1
 800b90c:	0800b8d1 	.word	0x0800b8d1
 800b910:	0800b8d1 	.word	0x0800b8d1
 800b914:	0800ba55 	.word	0x0800ba55
 800b918:	0800b97f 	.word	0x0800b97f
 800b91c:	0800ba0f 	.word	0x0800ba0f
 800b920:	0800b8d1 	.word	0x0800b8d1
 800b924:	0800b8d1 	.word	0x0800b8d1
 800b928:	0800ba77 	.word	0x0800ba77
 800b92c:	0800b8d1 	.word	0x0800b8d1
 800b930:	0800b97f 	.word	0x0800b97f
 800b934:	0800b8d1 	.word	0x0800b8d1
 800b938:	0800b8d1 	.word	0x0800b8d1
 800b93c:	0800ba17 	.word	0x0800ba17
 800b940:	6833      	ldr	r3, [r6, #0]
 800b942:	1d1a      	adds	r2, r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6032      	str	r2, [r6, #0]
 800b948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b94c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b950:	2301      	movs	r3, #1
 800b952:	e09d      	b.n	800ba90 <_printf_i+0x1e8>
 800b954:	6833      	ldr	r3, [r6, #0]
 800b956:	6820      	ldr	r0, [r4, #0]
 800b958:	1d19      	adds	r1, r3, #4
 800b95a:	6031      	str	r1, [r6, #0]
 800b95c:	0606      	lsls	r6, r0, #24
 800b95e:	d501      	bpl.n	800b964 <_printf_i+0xbc>
 800b960:	681d      	ldr	r5, [r3, #0]
 800b962:	e003      	b.n	800b96c <_printf_i+0xc4>
 800b964:	0645      	lsls	r5, r0, #25
 800b966:	d5fb      	bpl.n	800b960 <_printf_i+0xb8>
 800b968:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b96c:	2d00      	cmp	r5, #0
 800b96e:	da03      	bge.n	800b978 <_printf_i+0xd0>
 800b970:	232d      	movs	r3, #45	@ 0x2d
 800b972:	426d      	negs	r5, r5
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b978:	4859      	ldr	r0, [pc, #356]	@ (800bae0 <_printf_i+0x238>)
 800b97a:	230a      	movs	r3, #10
 800b97c:	e011      	b.n	800b9a2 <_printf_i+0xfa>
 800b97e:	6821      	ldr	r1, [r4, #0]
 800b980:	6833      	ldr	r3, [r6, #0]
 800b982:	0608      	lsls	r0, r1, #24
 800b984:	f853 5b04 	ldr.w	r5, [r3], #4
 800b988:	d402      	bmi.n	800b990 <_printf_i+0xe8>
 800b98a:	0649      	lsls	r1, r1, #25
 800b98c:	bf48      	it	mi
 800b98e:	b2ad      	uxthmi	r5, r5
 800b990:	2f6f      	cmp	r7, #111	@ 0x6f
 800b992:	4853      	ldr	r0, [pc, #332]	@ (800bae0 <_printf_i+0x238>)
 800b994:	6033      	str	r3, [r6, #0]
 800b996:	bf14      	ite	ne
 800b998:	230a      	movne	r3, #10
 800b99a:	2308      	moveq	r3, #8
 800b99c:	2100      	movs	r1, #0
 800b99e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9a2:	6866      	ldr	r6, [r4, #4]
 800b9a4:	60a6      	str	r6, [r4, #8]
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	bfa2      	ittt	ge
 800b9aa:	6821      	ldrge	r1, [r4, #0]
 800b9ac:	f021 0104 	bicge.w	r1, r1, #4
 800b9b0:	6021      	strge	r1, [r4, #0]
 800b9b2:	b90d      	cbnz	r5, 800b9b8 <_printf_i+0x110>
 800b9b4:	2e00      	cmp	r6, #0
 800b9b6:	d04b      	beq.n	800ba50 <_printf_i+0x1a8>
 800b9b8:	4616      	mov	r6, r2
 800b9ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9be:	fb03 5711 	mls	r7, r3, r1, r5
 800b9c2:	5dc7      	ldrb	r7, [r0, r7]
 800b9c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9c8:	462f      	mov	r7, r5
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	d9f4      	bls.n	800b9ba <_printf_i+0x112>
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d10b      	bne.n	800b9ec <_printf_i+0x144>
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	07df      	lsls	r7, r3, #31
 800b9d8:	d508      	bpl.n	800b9ec <_printf_i+0x144>
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	6861      	ldr	r1, [r4, #4]
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	bfde      	ittt	le
 800b9e2:	2330      	movle	r3, #48	@ 0x30
 800b9e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9ec:	1b92      	subs	r2, r2, r6
 800b9ee:	6122      	str	r2, [r4, #16]
 800b9f0:	f8cd a000 	str.w	sl, [sp]
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	aa03      	add	r2, sp, #12
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	f7ff fee6 	bl	800b7cc <_printf_common>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d14a      	bne.n	800ba9a <_printf_i+0x1f2>
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	b004      	add	sp, #16
 800ba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	f043 0320 	orr.w	r3, r3, #32
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	4833      	ldr	r0, [pc, #204]	@ (800bae4 <_printf_i+0x23c>)
 800ba18:	2778      	movs	r7, #120	@ 0x78
 800ba1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	6831      	ldr	r1, [r6, #0]
 800ba22:	061f      	lsls	r7, r3, #24
 800ba24:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba28:	d402      	bmi.n	800ba30 <_printf_i+0x188>
 800ba2a:	065f      	lsls	r7, r3, #25
 800ba2c:	bf48      	it	mi
 800ba2e:	b2ad      	uxthmi	r5, r5
 800ba30:	6031      	str	r1, [r6, #0]
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	bf44      	itt	mi
 800ba36:	f043 0320 	orrmi.w	r3, r3, #32
 800ba3a:	6023      	strmi	r3, [r4, #0]
 800ba3c:	b11d      	cbz	r5, 800ba46 <_printf_i+0x19e>
 800ba3e:	2310      	movs	r3, #16
 800ba40:	e7ac      	b.n	800b99c <_printf_i+0xf4>
 800ba42:	4827      	ldr	r0, [pc, #156]	@ (800bae0 <_printf_i+0x238>)
 800ba44:	e7e9      	b.n	800ba1a <_printf_i+0x172>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	f023 0320 	bic.w	r3, r3, #32
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	e7f6      	b.n	800ba3e <_printf_i+0x196>
 800ba50:	4616      	mov	r6, r2
 800ba52:	e7bd      	b.n	800b9d0 <_printf_i+0x128>
 800ba54:	6833      	ldr	r3, [r6, #0]
 800ba56:	6825      	ldr	r5, [r4, #0]
 800ba58:	6961      	ldr	r1, [r4, #20]
 800ba5a:	1d18      	adds	r0, r3, #4
 800ba5c:	6030      	str	r0, [r6, #0]
 800ba5e:	062e      	lsls	r6, r5, #24
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	d501      	bpl.n	800ba68 <_printf_i+0x1c0>
 800ba64:	6019      	str	r1, [r3, #0]
 800ba66:	e002      	b.n	800ba6e <_printf_i+0x1c6>
 800ba68:	0668      	lsls	r0, r5, #25
 800ba6a:	d5fb      	bpl.n	800ba64 <_printf_i+0x1bc>
 800ba6c:	8019      	strh	r1, [r3, #0]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	4616      	mov	r6, r2
 800ba74:	e7bc      	b.n	800b9f0 <_printf_i+0x148>
 800ba76:	6833      	ldr	r3, [r6, #0]
 800ba78:	1d1a      	adds	r2, r3, #4
 800ba7a:	6032      	str	r2, [r6, #0]
 800ba7c:	681e      	ldr	r6, [r3, #0]
 800ba7e:	6862      	ldr	r2, [r4, #4]
 800ba80:	2100      	movs	r1, #0
 800ba82:	4630      	mov	r0, r6
 800ba84:	f7f4 fc54 	bl	8000330 <memchr>
 800ba88:	b108      	cbz	r0, 800ba8e <_printf_i+0x1e6>
 800ba8a:	1b80      	subs	r0, r0, r6
 800ba8c:	6060      	str	r0, [r4, #4]
 800ba8e:	6863      	ldr	r3, [r4, #4]
 800ba90:	6123      	str	r3, [r4, #16]
 800ba92:	2300      	movs	r3, #0
 800ba94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba98:	e7aa      	b.n	800b9f0 <_printf_i+0x148>
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	47d0      	blx	sl
 800baa4:	3001      	adds	r0, #1
 800baa6:	d0ad      	beq.n	800ba04 <_printf_i+0x15c>
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	079b      	lsls	r3, r3, #30
 800baac:	d413      	bmi.n	800bad6 <_printf_i+0x22e>
 800baae:	68e0      	ldr	r0, [r4, #12]
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	4298      	cmp	r0, r3
 800bab4:	bfb8      	it	lt
 800bab6:	4618      	movlt	r0, r3
 800bab8:	e7a6      	b.n	800ba08 <_printf_i+0x160>
 800baba:	2301      	movs	r3, #1
 800babc:	4632      	mov	r2, r6
 800babe:	4649      	mov	r1, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	47d0      	blx	sl
 800bac4:	3001      	adds	r0, #1
 800bac6:	d09d      	beq.n	800ba04 <_printf_i+0x15c>
 800bac8:	3501      	adds	r5, #1
 800baca:	68e3      	ldr	r3, [r4, #12]
 800bacc:	9903      	ldr	r1, [sp, #12]
 800bace:	1a5b      	subs	r3, r3, r1
 800bad0:	42ab      	cmp	r3, r5
 800bad2:	dcf2      	bgt.n	800baba <_printf_i+0x212>
 800bad4:	e7eb      	b.n	800baae <_printf_i+0x206>
 800bad6:	2500      	movs	r5, #0
 800bad8:	f104 0619 	add.w	r6, r4, #25
 800badc:	e7f5      	b.n	800baca <_printf_i+0x222>
 800bade:	bf00      	nop
 800bae0:	0800c60b 	.word	0x0800c60b
 800bae4:	0800c61c 	.word	0x0800c61c

0800bae8 <__sflush_r>:
 800bae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	0716      	lsls	r6, r2, #28
 800baf2:	4605      	mov	r5, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	d454      	bmi.n	800bba2 <__sflush_r+0xba>
 800baf8:	684b      	ldr	r3, [r1, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dc02      	bgt.n	800bb04 <__sflush_r+0x1c>
 800bafe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dd48      	ble.n	800bb96 <__sflush_r+0xae>
 800bb04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb06:	2e00      	cmp	r6, #0
 800bb08:	d045      	beq.n	800bb96 <__sflush_r+0xae>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb10:	682f      	ldr	r7, [r5, #0]
 800bb12:	6a21      	ldr	r1, [r4, #32]
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	d030      	beq.n	800bb7a <__sflush_r+0x92>
 800bb18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	0759      	lsls	r1, r3, #29
 800bb1e:	d505      	bpl.n	800bb2c <__sflush_r+0x44>
 800bb20:	6863      	ldr	r3, [r4, #4]
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb26:	b10b      	cbz	r3, 800bb2c <__sflush_r+0x44>
 800bb28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb2a:	1ad2      	subs	r2, r2, r3
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb30:	6a21      	ldr	r1, [r4, #32]
 800bb32:	4628      	mov	r0, r5
 800bb34:	47b0      	blx	r6
 800bb36:	1c43      	adds	r3, r0, #1
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	d106      	bne.n	800bb4a <__sflush_r+0x62>
 800bb3c:	6829      	ldr	r1, [r5, #0]
 800bb3e:	291d      	cmp	r1, #29
 800bb40:	d82b      	bhi.n	800bb9a <__sflush_r+0xb2>
 800bb42:	4a2a      	ldr	r2, [pc, #168]	@ (800bbec <__sflush_r+0x104>)
 800bb44:	410a      	asrs	r2, r1
 800bb46:	07d6      	lsls	r6, r2, #31
 800bb48:	d427      	bmi.n	800bb9a <__sflush_r+0xb2>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	6062      	str	r2, [r4, #4]
 800bb4e:	04d9      	lsls	r1, r3, #19
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	6022      	str	r2, [r4, #0]
 800bb54:	d504      	bpl.n	800bb60 <__sflush_r+0x78>
 800bb56:	1c42      	adds	r2, r0, #1
 800bb58:	d101      	bne.n	800bb5e <__sflush_r+0x76>
 800bb5a:	682b      	ldr	r3, [r5, #0]
 800bb5c:	b903      	cbnz	r3, 800bb60 <__sflush_r+0x78>
 800bb5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb62:	602f      	str	r7, [r5, #0]
 800bb64:	b1b9      	cbz	r1, 800bb96 <__sflush_r+0xae>
 800bb66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb6a:	4299      	cmp	r1, r3
 800bb6c:	d002      	beq.n	800bb74 <__sflush_r+0x8c>
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7ff fc8a 	bl	800b488 <_free_r>
 800bb74:	2300      	movs	r3, #0
 800bb76:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb78:	e00d      	b.n	800bb96 <__sflush_r+0xae>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b0      	blx	r6
 800bb80:	4602      	mov	r2, r0
 800bb82:	1c50      	adds	r0, r2, #1
 800bb84:	d1c9      	bne.n	800bb1a <__sflush_r+0x32>
 800bb86:	682b      	ldr	r3, [r5, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0c6      	beq.n	800bb1a <__sflush_r+0x32>
 800bb8c:	2b1d      	cmp	r3, #29
 800bb8e:	d001      	beq.n	800bb94 <__sflush_r+0xac>
 800bb90:	2b16      	cmp	r3, #22
 800bb92:	d11e      	bne.n	800bbd2 <__sflush_r+0xea>
 800bb94:	602f      	str	r7, [r5, #0]
 800bb96:	2000      	movs	r0, #0
 800bb98:	e022      	b.n	800bbe0 <__sflush_r+0xf8>
 800bb9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb9e:	b21b      	sxth	r3, r3
 800bba0:	e01b      	b.n	800bbda <__sflush_r+0xf2>
 800bba2:	690f      	ldr	r7, [r1, #16]
 800bba4:	2f00      	cmp	r7, #0
 800bba6:	d0f6      	beq.n	800bb96 <__sflush_r+0xae>
 800bba8:	0793      	lsls	r3, r2, #30
 800bbaa:	680e      	ldr	r6, [r1, #0]
 800bbac:	bf08      	it	eq
 800bbae:	694b      	ldreq	r3, [r1, #20]
 800bbb0:	600f      	str	r7, [r1, #0]
 800bbb2:	bf18      	it	ne
 800bbb4:	2300      	movne	r3, #0
 800bbb6:	eba6 0807 	sub.w	r8, r6, r7
 800bbba:	608b      	str	r3, [r1, #8]
 800bbbc:	f1b8 0f00 	cmp.w	r8, #0
 800bbc0:	dde9      	ble.n	800bb96 <__sflush_r+0xae>
 800bbc2:	6a21      	ldr	r1, [r4, #32]
 800bbc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbc6:	4643      	mov	r3, r8
 800bbc8:	463a      	mov	r2, r7
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b0      	blx	r6
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	dc08      	bgt.n	800bbe4 <__sflush_r+0xfc>
 800bbd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	4407      	add	r7, r0
 800bbe6:	eba8 0800 	sub.w	r8, r8, r0
 800bbea:	e7e7      	b.n	800bbbc <__sflush_r+0xd4>
 800bbec:	dfbffffe 	.word	0xdfbffffe

0800bbf0 <_fflush_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	690b      	ldr	r3, [r1, #16]
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	b913      	cbnz	r3, 800bc00 <_fflush_r+0x10>
 800bbfa:	2500      	movs	r5, #0
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	b118      	cbz	r0, 800bc0a <_fflush_r+0x1a>
 800bc02:	6a03      	ldr	r3, [r0, #32]
 800bc04:	b90b      	cbnz	r3, 800bc0a <_fflush_r+0x1a>
 800bc06:	f7ff fa7d 	bl	800b104 <__sinit>
 800bc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0f3      	beq.n	800bbfa <_fflush_r+0xa>
 800bc12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc14:	07d0      	lsls	r0, r2, #31
 800bc16:	d404      	bmi.n	800bc22 <_fflush_r+0x32>
 800bc18:	0599      	lsls	r1, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_fflush_r+0x32>
 800bc1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc1e:	f7ff fc04 	bl	800b42a <__retarget_lock_acquire_recursive>
 800bc22:	4628      	mov	r0, r5
 800bc24:	4621      	mov	r1, r4
 800bc26:	f7ff ff5f 	bl	800bae8 <__sflush_r>
 800bc2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc2c:	07da      	lsls	r2, r3, #31
 800bc2e:	4605      	mov	r5, r0
 800bc30:	d4e4      	bmi.n	800bbfc <_fflush_r+0xc>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	059b      	lsls	r3, r3, #22
 800bc36:	d4e1      	bmi.n	800bbfc <_fflush_r+0xc>
 800bc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc3a:	f7ff fbf7 	bl	800b42c <__retarget_lock_release_recursive>
 800bc3e:	e7dd      	b.n	800bbfc <_fflush_r+0xc>

0800bc40 <fiprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b503      	push	{r0, r1, lr}
 800bc44:	4601      	mov	r1, r0
 800bc46:	ab03      	add	r3, sp, #12
 800bc48:	4805      	ldr	r0, [pc, #20]	@ (800bc60 <fiprintf+0x20>)
 800bc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	f000 f87f 	bl	800bd54 <_vfiprintf_r>
 800bc56:	b002      	add	sp, #8
 800bc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc5c:	b003      	add	sp, #12
 800bc5e:	4770      	bx	lr
 800bc60:	240000a8 	.word	0x240000a8

0800bc64 <memmove>:
 800bc64:	4288      	cmp	r0, r1
 800bc66:	b510      	push	{r4, lr}
 800bc68:	eb01 0402 	add.w	r4, r1, r2
 800bc6c:	d902      	bls.n	800bc74 <memmove+0x10>
 800bc6e:	4284      	cmp	r4, r0
 800bc70:	4623      	mov	r3, r4
 800bc72:	d807      	bhi.n	800bc84 <memmove+0x20>
 800bc74:	1e43      	subs	r3, r0, #1
 800bc76:	42a1      	cmp	r1, r4
 800bc78:	d008      	beq.n	800bc8c <memmove+0x28>
 800bc7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc82:	e7f8      	b.n	800bc76 <memmove+0x12>
 800bc84:	4402      	add	r2, r0
 800bc86:	4601      	mov	r1, r0
 800bc88:	428a      	cmp	r2, r1
 800bc8a:	d100      	bne.n	800bc8e <memmove+0x2a>
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc96:	e7f7      	b.n	800bc88 <memmove+0x24>

0800bc98 <abort>:
 800bc98:	b508      	push	{r3, lr}
 800bc9a:	2006      	movs	r0, #6
 800bc9c:	f000 fa2e 	bl	800c0fc <raise>
 800bca0:	2001      	movs	r0, #1
 800bca2:	f7f5 fb03 	bl	80012ac <_exit>

0800bca6 <_realloc_r>:
 800bca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4615      	mov	r5, r2
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b921      	cbnz	r1, 800bcbc <_realloc_r+0x16>
 800bcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	f7ff b888 	b.w	800adcc <_malloc_r>
 800bcbc:	b92a      	cbnz	r2, 800bcca <_realloc_r+0x24>
 800bcbe:	f7ff fbe3 	bl	800b488 <_free_r>
 800bcc2:	2400      	movs	r4, #0
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcca:	f000 fa33 	bl	800c134 <_malloc_usable_size_r>
 800bcce:	4285      	cmp	r5, r0
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	d802      	bhi.n	800bcda <_realloc_r+0x34>
 800bcd4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bcd8:	d8f4      	bhi.n	800bcc4 <_realloc_r+0x1e>
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4640      	mov	r0, r8
 800bcde:	f7ff f875 	bl	800adcc <_malloc_r>
 800bce2:	4607      	mov	r7, r0
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d0ec      	beq.n	800bcc2 <_realloc_r+0x1c>
 800bce8:	42b5      	cmp	r5, r6
 800bcea:	462a      	mov	r2, r5
 800bcec:	4621      	mov	r1, r4
 800bcee:	bf28      	it	cs
 800bcf0:	4632      	movcs	r2, r6
 800bcf2:	f7ff fb9c 	bl	800b42e <memcpy>
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	f7ff fbc5 	bl	800b488 <_free_r>
 800bcfe:	463c      	mov	r4, r7
 800bd00:	e7e0      	b.n	800bcc4 <_realloc_r+0x1e>

0800bd02 <__sfputc_r>:
 800bd02:	6893      	ldr	r3, [r2, #8]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	b410      	push	{r4}
 800bd0a:	6093      	str	r3, [r2, #8]
 800bd0c:	da08      	bge.n	800bd20 <__sfputc_r+0x1e>
 800bd0e:	6994      	ldr	r4, [r2, #24]
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	db01      	blt.n	800bd18 <__sfputc_r+0x16>
 800bd14:	290a      	cmp	r1, #10
 800bd16:	d103      	bne.n	800bd20 <__sfputc_r+0x1e>
 800bd18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd1c:	f000 b932 	b.w	800bf84 <__swbuf_r>
 800bd20:	6813      	ldr	r3, [r2, #0]
 800bd22:	1c58      	adds	r0, r3, #1
 800bd24:	6010      	str	r0, [r2, #0]
 800bd26:	7019      	strb	r1, [r3, #0]
 800bd28:	4608      	mov	r0, r1
 800bd2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <__sfputs_r>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	4614      	mov	r4, r2
 800bd38:	18d5      	adds	r5, r2, r3
 800bd3a:	42ac      	cmp	r4, r5
 800bd3c:	d101      	bne.n	800bd42 <__sfputs_r+0x12>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	e007      	b.n	800bd52 <__sfputs_r+0x22>
 800bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd46:	463a      	mov	r2, r7
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff ffda 	bl	800bd02 <__sfputc_r>
 800bd4e:	1c43      	adds	r3, r0, #1
 800bd50:	d1f3      	bne.n	800bd3a <__sfputs_r+0xa>
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd54 <_vfiprintf_r>:
 800bd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	460d      	mov	r5, r1
 800bd5a:	b09d      	sub	sp, #116	@ 0x74
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	4698      	mov	r8, r3
 800bd60:	4606      	mov	r6, r0
 800bd62:	b118      	cbz	r0, 800bd6c <_vfiprintf_r+0x18>
 800bd64:	6a03      	ldr	r3, [r0, #32]
 800bd66:	b90b      	cbnz	r3, 800bd6c <_vfiprintf_r+0x18>
 800bd68:	f7ff f9cc 	bl	800b104 <__sinit>
 800bd6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd6e:	07d9      	lsls	r1, r3, #31
 800bd70:	d405      	bmi.n	800bd7e <_vfiprintf_r+0x2a>
 800bd72:	89ab      	ldrh	r3, [r5, #12]
 800bd74:	059a      	lsls	r2, r3, #22
 800bd76:	d402      	bmi.n	800bd7e <_vfiprintf_r+0x2a>
 800bd78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd7a:	f7ff fb56 	bl	800b42a <__retarget_lock_acquire_recursive>
 800bd7e:	89ab      	ldrh	r3, [r5, #12]
 800bd80:	071b      	lsls	r3, r3, #28
 800bd82:	d501      	bpl.n	800bd88 <_vfiprintf_r+0x34>
 800bd84:	692b      	ldr	r3, [r5, #16]
 800bd86:	b99b      	cbnz	r3, 800bdb0 <_vfiprintf_r+0x5c>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f000 f938 	bl	800c000 <__swsetup_r>
 800bd90:	b170      	cbz	r0, 800bdb0 <_vfiprintf_r+0x5c>
 800bd92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd94:	07dc      	lsls	r4, r3, #31
 800bd96:	d504      	bpl.n	800bda2 <_vfiprintf_r+0x4e>
 800bd98:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9c:	b01d      	add	sp, #116	@ 0x74
 800bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	0598      	lsls	r0, r3, #22
 800bda6:	d4f7      	bmi.n	800bd98 <_vfiprintf_r+0x44>
 800bda8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdaa:	f7ff fb3f 	bl	800b42c <__retarget_lock_release_recursive>
 800bdae:	e7f3      	b.n	800bd98 <_vfiprintf_r+0x44>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdba:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdbe:	2330      	movs	r3, #48	@ 0x30
 800bdc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf70 <_vfiprintf_r+0x21c>
 800bdc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdc8:	f04f 0901 	mov.w	r9, #1
 800bdcc:	4623      	mov	r3, r4
 800bdce:	469a      	mov	sl, r3
 800bdd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdd4:	b10a      	cbz	r2, 800bdda <_vfiprintf_r+0x86>
 800bdd6:	2a25      	cmp	r2, #37	@ 0x25
 800bdd8:	d1f9      	bne.n	800bdce <_vfiprintf_r+0x7a>
 800bdda:	ebba 0b04 	subs.w	fp, sl, r4
 800bdde:	d00b      	beq.n	800bdf8 <_vfiprintf_r+0xa4>
 800bde0:	465b      	mov	r3, fp
 800bde2:	4622      	mov	r2, r4
 800bde4:	4629      	mov	r1, r5
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7ff ffa2 	bl	800bd30 <__sfputs_r>
 800bdec:	3001      	adds	r0, #1
 800bdee:	f000 80a7 	beq.w	800bf40 <_vfiprintf_r+0x1ec>
 800bdf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdf4:	445a      	add	r2, fp
 800bdf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 809f 	beq.w	800bf40 <_vfiprintf_r+0x1ec>
 800be02:	2300      	movs	r3, #0
 800be04:	f04f 32ff 	mov.w	r2, #4294967295
 800be08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be0c:	f10a 0a01 	add.w	sl, sl, #1
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	9307      	str	r3, [sp, #28]
 800be14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be18:	931a      	str	r3, [sp, #104]	@ 0x68
 800be1a:	4654      	mov	r4, sl
 800be1c:	2205      	movs	r2, #5
 800be1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be22:	4853      	ldr	r0, [pc, #332]	@ (800bf70 <_vfiprintf_r+0x21c>)
 800be24:	f7f4 fa84 	bl	8000330 <memchr>
 800be28:	9a04      	ldr	r2, [sp, #16]
 800be2a:	b9d8      	cbnz	r0, 800be64 <_vfiprintf_r+0x110>
 800be2c:	06d1      	lsls	r1, r2, #27
 800be2e:	bf44      	itt	mi
 800be30:	2320      	movmi	r3, #32
 800be32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be36:	0713      	lsls	r3, r2, #28
 800be38:	bf44      	itt	mi
 800be3a:	232b      	movmi	r3, #43	@ 0x2b
 800be3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be40:	f89a 3000 	ldrb.w	r3, [sl]
 800be44:	2b2a      	cmp	r3, #42	@ 0x2a
 800be46:	d015      	beq.n	800be74 <_vfiprintf_r+0x120>
 800be48:	9a07      	ldr	r2, [sp, #28]
 800be4a:	4654      	mov	r4, sl
 800be4c:	2000      	movs	r0, #0
 800be4e:	f04f 0c0a 	mov.w	ip, #10
 800be52:	4621      	mov	r1, r4
 800be54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be58:	3b30      	subs	r3, #48	@ 0x30
 800be5a:	2b09      	cmp	r3, #9
 800be5c:	d94b      	bls.n	800bef6 <_vfiprintf_r+0x1a2>
 800be5e:	b1b0      	cbz	r0, 800be8e <_vfiprintf_r+0x13a>
 800be60:	9207      	str	r2, [sp, #28]
 800be62:	e014      	b.n	800be8e <_vfiprintf_r+0x13a>
 800be64:	eba0 0308 	sub.w	r3, r0, r8
 800be68:	fa09 f303 	lsl.w	r3, r9, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	46a2      	mov	sl, r4
 800be72:	e7d2      	b.n	800be1a <_vfiprintf_r+0xc6>
 800be74:	9b03      	ldr	r3, [sp, #12]
 800be76:	1d19      	adds	r1, r3, #4
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	9103      	str	r1, [sp, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bfbb      	ittet	lt
 800be80:	425b      	neglt	r3, r3
 800be82:	f042 0202 	orrlt.w	r2, r2, #2
 800be86:	9307      	strge	r3, [sp, #28]
 800be88:	9307      	strlt	r3, [sp, #28]
 800be8a:	bfb8      	it	lt
 800be8c:	9204      	strlt	r2, [sp, #16]
 800be8e:	7823      	ldrb	r3, [r4, #0]
 800be90:	2b2e      	cmp	r3, #46	@ 0x2e
 800be92:	d10a      	bne.n	800beaa <_vfiprintf_r+0x156>
 800be94:	7863      	ldrb	r3, [r4, #1]
 800be96:	2b2a      	cmp	r3, #42	@ 0x2a
 800be98:	d132      	bne.n	800bf00 <_vfiprintf_r+0x1ac>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	1d1a      	adds	r2, r3, #4
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	9203      	str	r2, [sp, #12]
 800bea2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bea6:	3402      	adds	r4, #2
 800bea8:	9305      	str	r3, [sp, #20]
 800beaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf80 <_vfiprintf_r+0x22c>
 800beae:	7821      	ldrb	r1, [r4, #0]
 800beb0:	2203      	movs	r2, #3
 800beb2:	4650      	mov	r0, sl
 800beb4:	f7f4 fa3c 	bl	8000330 <memchr>
 800beb8:	b138      	cbz	r0, 800beca <_vfiprintf_r+0x176>
 800beba:	9b04      	ldr	r3, [sp, #16]
 800bebc:	eba0 000a 	sub.w	r0, r0, sl
 800bec0:	2240      	movs	r2, #64	@ 0x40
 800bec2:	4082      	lsls	r2, r0
 800bec4:	4313      	orrs	r3, r2
 800bec6:	3401      	adds	r4, #1
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4829      	ldr	r0, [pc, #164]	@ (800bf74 <_vfiprintf_r+0x220>)
 800bed0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bed4:	2206      	movs	r2, #6
 800bed6:	f7f4 fa2b 	bl	8000330 <memchr>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d03f      	beq.n	800bf5e <_vfiprintf_r+0x20a>
 800bede:	4b26      	ldr	r3, [pc, #152]	@ (800bf78 <_vfiprintf_r+0x224>)
 800bee0:	bb1b      	cbnz	r3, 800bf2a <_vfiprintf_r+0x1d6>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	3307      	adds	r3, #7
 800bee6:	f023 0307 	bic.w	r3, r3, #7
 800beea:	3308      	adds	r3, #8
 800beec:	9303      	str	r3, [sp, #12]
 800beee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bef0:	443b      	add	r3, r7
 800bef2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bef4:	e76a      	b.n	800bdcc <_vfiprintf_r+0x78>
 800bef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800befa:	460c      	mov	r4, r1
 800befc:	2001      	movs	r0, #1
 800befe:	e7a8      	b.n	800be52 <_vfiprintf_r+0xfe>
 800bf00:	2300      	movs	r3, #0
 800bf02:	3401      	adds	r4, #1
 800bf04:	9305      	str	r3, [sp, #20]
 800bf06:	4619      	mov	r1, r3
 800bf08:	f04f 0c0a 	mov.w	ip, #10
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf12:	3a30      	subs	r2, #48	@ 0x30
 800bf14:	2a09      	cmp	r2, #9
 800bf16:	d903      	bls.n	800bf20 <_vfiprintf_r+0x1cc>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d0c6      	beq.n	800beaa <_vfiprintf_r+0x156>
 800bf1c:	9105      	str	r1, [sp, #20]
 800bf1e:	e7c4      	b.n	800beaa <_vfiprintf_r+0x156>
 800bf20:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf24:	4604      	mov	r4, r0
 800bf26:	2301      	movs	r3, #1
 800bf28:	e7f0      	b.n	800bf0c <_vfiprintf_r+0x1b8>
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	462a      	mov	r2, r5
 800bf30:	4b12      	ldr	r3, [pc, #72]	@ (800bf7c <_vfiprintf_r+0x228>)
 800bf32:	a904      	add	r1, sp, #16
 800bf34:	4630      	mov	r0, r6
 800bf36:	f3af 8000 	nop.w
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	1c78      	adds	r0, r7, #1
 800bf3e:	d1d6      	bne.n	800beee <_vfiprintf_r+0x19a>
 800bf40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf42:	07d9      	lsls	r1, r3, #31
 800bf44:	d405      	bmi.n	800bf52 <_vfiprintf_r+0x1fe>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	059a      	lsls	r2, r3, #22
 800bf4a:	d402      	bmi.n	800bf52 <_vfiprintf_r+0x1fe>
 800bf4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf4e:	f7ff fa6d 	bl	800b42c <__retarget_lock_release_recursive>
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	065b      	lsls	r3, r3, #25
 800bf56:	f53f af1f 	bmi.w	800bd98 <_vfiprintf_r+0x44>
 800bf5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf5c:	e71e      	b.n	800bd9c <_vfiprintf_r+0x48>
 800bf5e:	ab03      	add	r3, sp, #12
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	462a      	mov	r2, r5
 800bf64:	4b05      	ldr	r3, [pc, #20]	@ (800bf7c <_vfiprintf_r+0x228>)
 800bf66:	a904      	add	r1, sp, #16
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7ff fc9d 	bl	800b8a8 <_printf_i>
 800bf6e:	e7e4      	b.n	800bf3a <_vfiprintf_r+0x1e6>
 800bf70:	0800c5fa 	.word	0x0800c5fa
 800bf74:	0800c604 	.word	0x0800c604
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	0800bd31 	.word	0x0800bd31
 800bf80:	0800c600 	.word	0x0800c600

0800bf84 <__swbuf_r>:
 800bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf86:	460e      	mov	r6, r1
 800bf88:	4614      	mov	r4, r2
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	b118      	cbz	r0, 800bf96 <__swbuf_r+0x12>
 800bf8e:	6a03      	ldr	r3, [r0, #32]
 800bf90:	b90b      	cbnz	r3, 800bf96 <__swbuf_r+0x12>
 800bf92:	f7ff f8b7 	bl	800b104 <__sinit>
 800bf96:	69a3      	ldr	r3, [r4, #24]
 800bf98:	60a3      	str	r3, [r4, #8]
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	071a      	lsls	r2, r3, #28
 800bf9e:	d501      	bpl.n	800bfa4 <__swbuf_r+0x20>
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	b943      	cbnz	r3, 800bfb6 <__swbuf_r+0x32>
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 f82a 	bl	800c000 <__swsetup_r>
 800bfac:	b118      	cbz	r0, 800bfb6 <__swbuf_r+0x32>
 800bfae:	f04f 37ff 	mov.w	r7, #4294967295
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	6922      	ldr	r2, [r4, #16]
 800bfba:	1a98      	subs	r0, r3, r2
 800bfbc:	6963      	ldr	r3, [r4, #20]
 800bfbe:	b2f6      	uxtb	r6, r6
 800bfc0:	4283      	cmp	r3, r0
 800bfc2:	4637      	mov	r7, r6
 800bfc4:	dc05      	bgt.n	800bfd2 <__swbuf_r+0x4e>
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4628      	mov	r0, r5
 800bfca:	f7ff fe11 	bl	800bbf0 <_fflush_r>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1ed      	bne.n	800bfae <__swbuf_r+0x2a>
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	60a3      	str	r3, [r4, #8]
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	701e      	strb	r6, [r3, #0]
 800bfe0:	6962      	ldr	r2, [r4, #20]
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d004      	beq.n	800bff2 <__swbuf_r+0x6e>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	07db      	lsls	r3, r3, #31
 800bfec:	d5e1      	bpl.n	800bfb2 <__swbuf_r+0x2e>
 800bfee:	2e0a      	cmp	r6, #10
 800bff0:	d1df      	bne.n	800bfb2 <__swbuf_r+0x2e>
 800bff2:	4621      	mov	r1, r4
 800bff4:	4628      	mov	r0, r5
 800bff6:	f7ff fdfb 	bl	800bbf0 <_fflush_r>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d0d9      	beq.n	800bfb2 <__swbuf_r+0x2e>
 800bffe:	e7d6      	b.n	800bfae <__swbuf_r+0x2a>

0800c000 <__swsetup_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4b29      	ldr	r3, [pc, #164]	@ (800c0a8 <__swsetup_r+0xa8>)
 800c004:	4605      	mov	r5, r0
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	460c      	mov	r4, r1
 800c00a:	b118      	cbz	r0, 800c014 <__swsetup_r+0x14>
 800c00c:	6a03      	ldr	r3, [r0, #32]
 800c00e:	b90b      	cbnz	r3, 800c014 <__swsetup_r+0x14>
 800c010:	f7ff f878 	bl	800b104 <__sinit>
 800c014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c018:	0719      	lsls	r1, r3, #28
 800c01a:	d422      	bmi.n	800c062 <__swsetup_r+0x62>
 800c01c:	06da      	lsls	r2, r3, #27
 800c01e:	d407      	bmi.n	800c030 <__swsetup_r+0x30>
 800c020:	2209      	movs	r2, #9
 800c022:	602a      	str	r2, [r5, #0]
 800c024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c028:	81a3      	strh	r3, [r4, #12]
 800c02a:	f04f 30ff 	mov.w	r0, #4294967295
 800c02e:	e033      	b.n	800c098 <__swsetup_r+0x98>
 800c030:	0758      	lsls	r0, r3, #29
 800c032:	d512      	bpl.n	800c05a <__swsetup_r+0x5a>
 800c034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c036:	b141      	cbz	r1, 800c04a <__swsetup_r+0x4a>
 800c038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c03c:	4299      	cmp	r1, r3
 800c03e:	d002      	beq.n	800c046 <__swsetup_r+0x46>
 800c040:	4628      	mov	r0, r5
 800c042:	f7ff fa21 	bl	800b488 <_free_r>
 800c046:	2300      	movs	r3, #0
 800c048:	6363      	str	r3, [r4, #52]	@ 0x34
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c050:	81a3      	strh	r3, [r4, #12]
 800c052:	2300      	movs	r3, #0
 800c054:	6063      	str	r3, [r4, #4]
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f043 0308 	orr.w	r3, r3, #8
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	6923      	ldr	r3, [r4, #16]
 800c064:	b94b      	cbnz	r3, 800c07a <__swsetup_r+0x7a>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c06c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c070:	d003      	beq.n	800c07a <__swsetup_r+0x7a>
 800c072:	4621      	mov	r1, r4
 800c074:	4628      	mov	r0, r5
 800c076:	f000 f88b 	bl	800c190 <__smakebuf_r>
 800c07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c07e:	f013 0201 	ands.w	r2, r3, #1
 800c082:	d00a      	beq.n	800c09a <__swsetup_r+0x9a>
 800c084:	2200      	movs	r2, #0
 800c086:	60a2      	str	r2, [r4, #8]
 800c088:	6962      	ldr	r2, [r4, #20]
 800c08a:	4252      	negs	r2, r2
 800c08c:	61a2      	str	r2, [r4, #24]
 800c08e:	6922      	ldr	r2, [r4, #16]
 800c090:	b942      	cbnz	r2, 800c0a4 <__swsetup_r+0xa4>
 800c092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c096:	d1c5      	bne.n	800c024 <__swsetup_r+0x24>
 800c098:	bd38      	pop	{r3, r4, r5, pc}
 800c09a:	0799      	lsls	r1, r3, #30
 800c09c:	bf58      	it	pl
 800c09e:	6962      	ldrpl	r2, [r4, #20]
 800c0a0:	60a2      	str	r2, [r4, #8]
 800c0a2:	e7f4      	b.n	800c08e <__swsetup_r+0x8e>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	e7f7      	b.n	800c098 <__swsetup_r+0x98>
 800c0a8:	240000a8 	.word	0x240000a8

0800c0ac <_raise_r>:
 800c0ac:	291f      	cmp	r1, #31
 800c0ae:	b538      	push	{r3, r4, r5, lr}
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	d904      	bls.n	800c0c0 <_raise_r+0x14>
 800c0b6:	2316      	movs	r3, #22
 800c0b8:	6003      	str	r3, [r0, #0]
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0c2:	b112      	cbz	r2, 800c0ca <_raise_r+0x1e>
 800c0c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c8:	b94b      	cbnz	r3, 800c0de <_raise_r+0x32>
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 f830 	bl	800c130 <_getpid_r>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0da:	f000 b817 	b.w	800c10c <_kill_r>
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d00a      	beq.n	800c0f8 <_raise_r+0x4c>
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	d103      	bne.n	800c0ee <_raise_r+0x42>
 800c0e6:	2316      	movs	r3, #22
 800c0e8:	6003      	str	r3, [r0, #0]
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	e7e7      	b.n	800c0be <_raise_r+0x12>
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	4798      	blx	r3
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7e0      	b.n	800c0be <_raise_r+0x12>

0800c0fc <raise>:
 800c0fc:	4b02      	ldr	r3, [pc, #8]	@ (800c108 <raise+0xc>)
 800c0fe:	4601      	mov	r1, r0
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	f7ff bfd3 	b.w	800c0ac <_raise_r>
 800c106:	bf00      	nop
 800c108:	240000a8 	.word	0x240000a8

0800c10c <_kill_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	@ (800c12c <_kill_r+0x20>)
 800c110:	2300      	movs	r3, #0
 800c112:	4604      	mov	r4, r0
 800c114:	4608      	mov	r0, r1
 800c116:	4611      	mov	r1, r2
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	f7f5 f8b7 	bl	800128c <_kill>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d102      	bne.n	800c128 <_kill_r+0x1c>
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	b103      	cbz	r3, 800c128 <_kill_r+0x1c>
 800c126:	6023      	str	r3, [r4, #0]
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop
 800c12c:	24000894 	.word	0x24000894

0800c130 <_getpid_r>:
 800c130:	f7f5 b8a4 	b.w	800127c <_getpid>

0800c134 <_malloc_usable_size_r>:
 800c134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c138:	1f18      	subs	r0, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bfbc      	itt	lt
 800c13e:	580b      	ldrlt	r3, [r1, r0]
 800c140:	18c0      	addlt	r0, r0, r3
 800c142:	4770      	bx	lr

0800c144 <__swhatbuf_r>:
 800c144:	b570      	push	{r4, r5, r6, lr}
 800c146:	460c      	mov	r4, r1
 800c148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14c:	2900      	cmp	r1, #0
 800c14e:	b096      	sub	sp, #88	@ 0x58
 800c150:	4615      	mov	r5, r2
 800c152:	461e      	mov	r6, r3
 800c154:	da0d      	bge.n	800c172 <__swhatbuf_r+0x2e>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c15c:	f04f 0100 	mov.w	r1, #0
 800c160:	bf14      	ite	ne
 800c162:	2340      	movne	r3, #64	@ 0x40
 800c164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c168:	2000      	movs	r0, #0
 800c16a:	6031      	str	r1, [r6, #0]
 800c16c:	602b      	str	r3, [r5, #0]
 800c16e:	b016      	add	sp, #88	@ 0x58
 800c170:	bd70      	pop	{r4, r5, r6, pc}
 800c172:	466a      	mov	r2, sp
 800c174:	f000 f848 	bl	800c208 <_fstat_r>
 800c178:	2800      	cmp	r0, #0
 800c17a:	dbec      	blt.n	800c156 <__swhatbuf_r+0x12>
 800c17c:	9901      	ldr	r1, [sp, #4]
 800c17e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c186:	4259      	negs	r1, r3
 800c188:	4159      	adcs	r1, r3
 800c18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c18e:	e7eb      	b.n	800c168 <__swhatbuf_r+0x24>

0800c190 <__smakebuf_r>:
 800c190:	898b      	ldrh	r3, [r1, #12]
 800c192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c194:	079d      	lsls	r5, r3, #30
 800c196:	4606      	mov	r6, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	d507      	bpl.n	800c1ac <__smakebuf_r+0x1c>
 800c19c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	b003      	add	sp, #12
 800c1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ac:	ab01      	add	r3, sp, #4
 800c1ae:	466a      	mov	r2, sp
 800c1b0:	f7ff ffc8 	bl	800c144 <__swhatbuf_r>
 800c1b4:	9f00      	ldr	r7, [sp, #0]
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7fe fe06 	bl	800adcc <_malloc_r>
 800c1c0:	b948      	cbnz	r0, 800c1d6 <__smakebuf_r+0x46>
 800c1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c6:	059a      	lsls	r2, r3, #22
 800c1c8:	d4ee      	bmi.n	800c1a8 <__smakebuf_r+0x18>
 800c1ca:	f023 0303 	bic.w	r3, r3, #3
 800c1ce:	f043 0302 	orr.w	r3, r3, #2
 800c1d2:	81a3      	strh	r3, [r4, #12]
 800c1d4:	e7e2      	b.n	800c19c <__smakebuf_r+0xc>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	6020      	str	r0, [r4, #0]
 800c1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1e6:	b15b      	cbz	r3, 800c200 <__smakebuf_r+0x70>
 800c1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f000 f81d 	bl	800c22c <_isatty_r>
 800c1f2:	b128      	cbz	r0, 800c200 <__smakebuf_r+0x70>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f023 0303 	bic.w	r3, r3, #3
 800c1fa:	f043 0301 	orr.w	r3, r3, #1
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	431d      	orrs	r5, r3
 800c204:	81a5      	strh	r5, [r4, #12]
 800c206:	e7cf      	b.n	800c1a8 <__smakebuf_r+0x18>

0800c208 <_fstat_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	@ (800c228 <_fstat_r+0x20>)
 800c20c:	2300      	movs	r3, #0
 800c20e:	4604      	mov	r4, r0
 800c210:	4608      	mov	r0, r1
 800c212:	4611      	mov	r1, r2
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	f7f5 f899 	bl	800134c <_fstat>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	d102      	bne.n	800c224 <_fstat_r+0x1c>
 800c21e:	682b      	ldr	r3, [r5, #0]
 800c220:	b103      	cbz	r3, 800c224 <_fstat_r+0x1c>
 800c222:	6023      	str	r3, [r4, #0]
 800c224:	bd38      	pop	{r3, r4, r5, pc}
 800c226:	bf00      	nop
 800c228:	24000894 	.word	0x24000894

0800c22c <_isatty_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	@ (800c248 <_isatty_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f5 f898 	bl	800136c <_isatty>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_isatty_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_isatty_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	24000894 	.word	0x24000894

0800c24c <_init>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	bf00      	nop
 800c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c252:	bc08      	pop	{r3}
 800c254:	469e      	mov	lr, r3
 800c256:	4770      	bx	lr

0800c258 <_fini>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	bf00      	nop
 800c25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25e:	bc08      	pop	{r3}
 800c260:	469e      	mov	lr, r3
 800c262:	4770      	bx	lr
